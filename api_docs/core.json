{
  "id": "core",
  "client": {
    "classes": [
      {
        "parentPluginId": "core",
        "id": "def-public.ToastsApi",
        "type": "Class",
        "tags": [],
        "label": "ToastsApi",
        "description": [
          "\nMethods for adding and removing global toast messages."
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastsApi",
            "text": "ToastsApi"
          },
          " implements Pick<",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastsApi",
            "text": "ToastsApi"
          },
          ", \"add\" | \"get$\" | \"remove\" | \"addSuccess\" | \"addWarning\" | \"addDanger\" | \"addError\" | \"addInfo\">"
        ],
        "path": "src/core/public/notifications/toasts/toasts_api.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.ToastsApi.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "deps",
                "description": [],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "core",
                    "id": "def-public.ToastsApi.Unnamed.$1.uiSettings",
                    "type": "Object",
                    "tags": [],
                    "label": "uiSettings",
                    "description": [],
                    "signature": [
                      {
                        "pluginId": "core",
                        "scope": "public",
                        "docId": "kibCorePluginApi",
                        "section": "def-public.IUiSettingsClient",
                        "text": "IUiSettingsClient"
                      }
                    ],
                    "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                    "deprecated": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.ToastsApi.get$",
            "type": "Function",
            "tags": [],
            "label": "get$",
            "description": [
              "Observable of the toast messages to show to the user."
            ],
            "signature": [
              "() => ",
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "[]>"
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.ToastsApi.add",
            "type": "Function",
            "tags": [],
            "label": "add",
            "description": [
              "\nAdds a new toast to current array of toast.\n"
            ],
            "signature": [
              "(toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ") => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              }
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.add.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "toastOrTitle",
                "description": [
                  "- a {@link ToastInput}"
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  }
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "a {@link Toast}"
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.ToastsApi.remove",
            "type": "Function",
            "tags": [],
            "label": "remove",
            "description": [
              "\nRemoves a toast from the current array of toasts if present."
            ],
            "signature": [
              "(toastOrId: string | ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              ") => void"
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.remove.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "toastOrId",
                "description": [
                  "- a {@link Toast} returned by {@link ToastsApi.add} or its id"
                ],
                "signature": [
                  "string | ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.Toast",
                    "text": "Toast"
                  }
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.ToastsApi.addInfo",
            "type": "Function",
            "tags": [],
            "label": "addInfo",
            "description": [
              "\nAdds a new toast pre-configured with the info color and info icon.\n"
            ],
            "signature": [
              "(toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              }
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.addInfo.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "toastOrTitle",
                "description": [
                  "- a {@link ToastInput}"
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  }
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.addInfo.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [
                  "- a {@link ToastOptions}"
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": [
              "a {@link Toast}"
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.ToastsApi.addSuccess",
            "type": "Function",
            "tags": [],
            "label": "addSuccess",
            "description": [
              "\nAdds a new toast pre-configured with the success color and check icon.\n"
            ],
            "signature": [
              "(toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              }
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.addSuccess.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "toastOrTitle",
                "description": [
                  "- a {@link ToastInput}"
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  }
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.addSuccess.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [
                  "- a {@link ToastOptions}"
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": [
              "a {@link Toast}"
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.ToastsApi.addWarning",
            "type": "Function",
            "tags": [],
            "label": "addWarning",
            "description": [
              "\nAdds a new toast pre-configured with the warning color and help icon.\n"
            ],
            "signature": [
              "(toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              }
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.addWarning.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "toastOrTitle",
                "description": [
                  "- a {@link ToastInput}"
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  }
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.addWarning.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [
                  "- a {@link ToastOptions}"
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": [
              "a {@link Toast}"
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.ToastsApi.addDanger",
            "type": "Function",
            "tags": [],
            "label": "addDanger",
            "description": [
              "\nAdds a new toast pre-configured with the danger color and alert icon.\n"
            ],
            "signature": [
              "(toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              }
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.addDanger.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "toastOrTitle",
                "description": [
                  "- a {@link ToastInput}"
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastInput",
                    "text": "ToastInput"
                  }
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.addDanger.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [
                  "- a {@link ToastOptions}"
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ToastOptions",
                    "text": "ToastOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": [
              "a {@link Toast}"
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.ToastsApi.addError",
            "type": "Function",
            "tags": [],
            "label": "addError",
            "description": [
              "\nAdds a new toast that displays an exception message with a button to open the full stacktrace in a modal.\n"
            ],
            "signature": [
              "(error: Error, options: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ErrorToastOptions",
                "text": "ErrorToastOptions"
              },
              ") => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              }
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.addError.$1",
                "type": "Object",
                "tags": [],
                "label": "error",
                "description": [
                  "- an `Error` instance."
                ],
                "signature": [
                  "Error"
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.ToastsApi.addError.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [
                  "- {@link ErrorToastOptions}"
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.ErrorToastOptions",
                    "text": "ErrorToastOptions"
                  }
                ],
                "path": "src/core/public/notifications/toasts/toasts_api.tsx",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "a {@link Toast}"
            ]
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "core",
        "id": "def-public.AppCategory",
        "type": "Interface",
        "tags": [],
        "label": "AppCategory",
        "description": [
          "\n\nA category definition for nav links to know where to sort them in the left hand nav"
        ],
        "path": "src/core/types/app_category.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.AppCategory.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nUnique identifier for the categories"
            ],
            "path": "src/core/types/app_category.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.AppCategory.label",
            "type": "string",
            "tags": [],
            "label": "label",
            "description": [
              "\nLabel used for category name.\nAlso used as aria-label if one isn't set."
            ],
            "path": "src/core/types/app_category.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.AppCategory.ariaLabel",
            "type": "string",
            "tags": [],
            "label": "ariaLabel",
            "description": [
              "\nIf the visual label isn't appropriate for screen readers,\ncan override it here"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/app_category.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.AppCategory.order",
            "type": "number",
            "tags": [],
            "label": "order",
            "description": [
              "\nThe order that categories will be sorted in\nPrefer large steps between categories to allow for further editing\n(Default categories are in steps of 1000)"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/core/types/app_category.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.AppCategory.euiIconType",
            "type": "string",
            "tags": [],
            "label": "euiIconType",
            "description": [
              "\nDefine an icon to be used for the category\nIf the category is only 1 item, and no icon is defined, will default to the product icon\nDefaults to initials if no icon is defined"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/app_category.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.AsyncPlugin",
        "type": "Interface",
        "tags": [
          "deprecated"
        ],
        "label": "AsyncPlugin",
        "description": [
          "\nA plugin with asynchronous lifecycle methods.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.AsyncPlugin",
            "text": "AsyncPlugin"
          },
          "<TSetup, TStart, TPluginsSetup, TPluginsStart>"
        ],
        "path": "src/core/public/plugins/plugin.ts",
        "deprecated": true,
        "references": [],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.AsyncPlugin.setup",
            "type": "Function",
            "tags": [],
            "label": "setup",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreSetup",
                "text": "CoreSetup"
              },
              "<TPluginsStart, TStart>, plugins: TPluginsSetup) => TSetup | Promise<TSetup>"
            ],
            "path": "src/core/public/plugins/plugin.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.AsyncPlugin.setup.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.CoreSetup",
                    "text": "CoreSetup"
                  },
                  "<TPluginsStart, TStart>"
                ],
                "path": "src/core/public/plugins/plugin.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.AsyncPlugin.setup.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsSetup"
                ],
                "path": "src/core/public/plugins/plugin.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.AsyncPlugin.start",
            "type": "Function",
            "tags": [],
            "label": "start",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreStart",
                "text": "CoreStart"
              },
              ", plugins: TPluginsStart) => TStart | Promise<TStart>"
            ],
            "path": "src/core/public/plugins/plugin.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.AsyncPlugin.start.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.CoreStart",
                    "text": "CoreStart"
                  }
                ],
                "path": "src/core/public/plugins/plugin.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.AsyncPlugin.start.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsStart"
                ],
                "path": "src/core/public/plugins/plugin.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.AsyncPlugin.stop",
            "type": "Function",
            "tags": [],
            "label": "stop",
            "description": [],
            "signature": [
              "(() => void) | undefined"
            ],
            "path": "src/core/public/plugins/plugin.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.Capabilities",
        "type": "Interface",
        "tags": [],
        "label": "Capabilities",
        "description": [
          "\nThe read-only set of capabilities available for the current UI session.\nCapabilities are simple key-value pairs of (string, boolean), where the string denotes the capability ID,\nand the boolean is a flag indicating if the capability is enabled or disabled.\n"
        ],
        "path": "src/core/types/capabilities.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.Capabilities.navLinks",
            "type": "Object",
            "tags": [],
            "label": "navLinks",
            "description": [
              "Navigation link capabilities."
            ],
            "signature": [
              "{ [x: string]: boolean; }"
            ],
            "path": "src/core/types/capabilities.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.Capabilities.management",
            "type": "Object",
            "tags": [],
            "label": "management",
            "description": [
              "Management section capabilities."
            ],
            "signature": [
              "{ [sectionId: string]: Record<string, boolean>; }"
            ],
            "path": "src/core/types/capabilities.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.Capabilities.catalogue",
            "type": "Object",
            "tags": [],
            "label": "catalogue",
            "description": [
              "Catalogue capabilities. Catalogue entries drive the visibility of the Kibana homepage options."
            ],
            "signature": [
              "{ [x: string]: boolean; }"
            ],
            "path": "src/core/types/capabilities.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.Capabilities.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [
              "Custom capabilities, registered by plugins."
            ],
            "signature": [
              "any"
            ],
            "path": "src/core/types/capabilities.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.CoreSetup",
        "type": "Interface",
        "tags": [],
        "label": "CoreSetup",
        "description": [
          "\nCore services exposed to the `Plugin` setup lifecycle\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.CoreSetup",
            "text": "CoreSetup"
          },
          "<TPluginsStart, TStart>"
        ],
        "path": "src/core/public/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.CoreSetup.application",
            "type": "Object",
            "tags": [],
            "label": "application",
            "description": [
              "{@link ApplicationSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreApplicationPluginApi",
                "section": "def-public.ApplicationSetup",
                "text": "ApplicationSetup"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreSetup.fatalErrors",
            "type": "Object",
            "tags": [],
            "label": "fatalErrors",
            "description": [
              "{@link FatalErrorsSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.FatalErrorsSetup",
                "text": "FatalErrorsSetup"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreSetup.http",
            "type": "Object",
            "tags": [],
            "label": "http",
            "description": [
              "{@link HttpSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpSetup",
                "text": "HttpSetup"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreSetup.notifications",
            "type": "Object",
            "tags": [],
            "label": "notifications",
            "description": [
              "{@link NotificationsSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.NotificationsSetup",
                "text": "NotificationsSetup"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreSetup.uiSettings",
            "type": "Object",
            "tags": [],
            "label": "uiSettings",
            "description": [
              "{@link IUiSettingsClient}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.IUiSettingsClient",
                "text": "IUiSettingsClient"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreSetup.injectedMetadata",
            "type": "Object",
            "tags": [
              "deprecated"
            ],
            "label": "injectedMetadata",
            "description": [
              "\nexposed temporarily until https://github.com/elastic/kibana/issues/41990 done\nuse *only* to retrieve config values. There is no way to set injected values\nin the new platform."
            ],
            "signature": [
              "{ getInjectedVar: (name: string, defaultValue?: any) => unknown; }"
            ],
            "path": "src/core/public/index.ts",
            "deprecated": true,
            "references": [
              {
                "plugin": "visTypeVega",
                "path": "src/plugins/vis_types/vega/public/plugin.ts"
              }
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreSetup.theme",
            "type": "Object",
            "tags": [],
            "label": "theme",
            "description": [
              "{@link ThemeServiceSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ThemeServiceSetup",
                "text": "ThemeServiceSetup"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreSetup.getStartServices",
            "type": "Function",
            "tags": [],
            "label": "getStartServices",
            "description": [
              "{@link StartServicesAccessor}"
            ],
            "signature": [
              "() => Promise<[",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreStart",
                "text": "CoreStart"
              },
              ", TPluginsStart, TStart]>"
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.CoreStart",
        "type": "Interface",
        "tags": [],
        "label": "CoreStart",
        "description": [
          "\nCore services exposed to the `Plugin` start lifecycle\n"
        ],
        "path": "src/core/public/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.application",
            "type": "Object",
            "tags": [],
            "label": "application",
            "description": [
              "{@link ApplicationStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreApplicationPluginApi",
                "section": "def-public.ApplicationStart",
                "text": "ApplicationStart"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.chrome",
            "type": "Object",
            "tags": [],
            "label": "chrome",
            "description": [
              "{@link ChromeStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreChromePluginApi",
                "section": "def-public.ChromeStart",
                "text": "ChromeStart"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.docLinks",
            "type": "Object",
            "tags": [],
            "label": "docLinks",
            "description": [
              "{@link DocLinksStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.DocLinksStart",
                "text": "DocLinksStart"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.http",
            "type": "Object",
            "tags": [],
            "label": "http",
            "description": [
              "{@link HttpStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-public.HttpSetup",
                "text": "HttpSetup"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.savedObjects",
            "type": "Object",
            "tags": [],
            "label": "savedObjects",
            "description": [
              "{@link SavedObjectsStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-public.SavedObjectsStart",
                "text": "SavedObjectsStart"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.i18n",
            "type": "Object",
            "tags": [],
            "label": "i18n",
            "description": [
              "{@link I18nStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.I18nStart",
                "text": "I18nStart"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.notifications",
            "type": "Object",
            "tags": [],
            "label": "notifications",
            "description": [
              "{@link NotificationsStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.NotificationsStart",
                "text": "NotificationsStart"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.overlays",
            "type": "Object",
            "tags": [],
            "label": "overlays",
            "description": [
              "{@link OverlayStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayStart",
                "text": "OverlayStart"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.uiSettings",
            "type": "Object",
            "tags": [],
            "label": "uiSettings",
            "description": [
              "{@link IUiSettingsClient}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.IUiSettingsClient",
                "text": "IUiSettingsClient"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.fatalErrors",
            "type": "Object",
            "tags": [],
            "label": "fatalErrors",
            "description": [
              "{@link FatalErrorsStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.FatalErrorsSetup",
                "text": "FatalErrorsSetup"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.deprecations",
            "type": "Object",
            "tags": [],
            "label": "deprecations",
            "description": [
              "{@link DeprecationsServiceStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.DeprecationsServiceStart",
                "text": "DeprecationsServiceStart"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.theme",
            "type": "Object",
            "tags": [],
            "label": "theme",
            "description": [
              "{@link ThemeServiceStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ThemeServiceStart",
                "text": "ThemeServiceStart"
              }
            ],
            "path": "src/core/public/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.CoreStart.injectedMetadata",
            "type": "Object",
            "tags": [
              "deprecated"
            ],
            "label": "injectedMetadata",
            "description": [
              "\nexposed temporarily until https://github.com/elastic/kibana/issues/41990 done\nuse *only* to retrieve config values. There is no way to set injected values\nin the new platform."
            ],
            "signature": [
              "{ getInjectedVar: (name: string, defaultValue?: any) => unknown; }"
            ],
            "path": "src/core/public/index.ts",
            "deprecated": true,
            "references": [
              {
                "plugin": "monitoring",
                "path": "x-pack/plugins/monitoring/public/legacy_shims.ts"
              },
              {
                "plugin": "visTypeVega",
                "path": "src/plugins/vis_types/vega/public/data_model/search_api.ts"
              },
              {
                "plugin": "visTypeVega",
                "path": "src/plugins/vis_types/vega/public/plugin.ts"
              },
              {
                "plugin": "visTypeVega",
                "path": "src/plugins/vis_types/vega/target/types/public/data_model/search_api.d.ts"
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.CoreTheme",
        "type": "Interface",
        "tags": [],
        "label": "CoreTheme",
        "description": [
          "\nContains all the required information to apply Kibana's theme at the various levels it can be used.\n"
        ],
        "path": "src/core/public/theme/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.CoreTheme.darkMode",
            "type": "boolean",
            "tags": [],
            "label": "darkMode",
            "description": [
              "is dark mode enabled or not"
            ],
            "path": "src/core/public/theme/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.DeprecationsServiceStart",
        "type": "Interface",
        "tags": [],
        "label": "DeprecationsServiceStart",
        "description": [
          "\nDeprecationsService provides methods to fetch domain deprecation details from\nthe Kibana server.\n"
        ],
        "path": "src/core/public/deprecations/deprecations_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.DeprecationsServiceStart.getAllDeprecations",
            "type": "Function",
            "tags": [],
            "label": "getAllDeprecations",
            "description": [
              "\nGrabs deprecations details for all domains."
            ],
            "signature": [
              "() => Promise<",
              "DomainDeprecationDetails",
              "[]>"
            ],
            "path": "src/core/public/deprecations/deprecations_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.DeprecationsServiceStart.getDeprecations",
            "type": "Function",
            "tags": [],
            "label": "getDeprecations",
            "description": [
              "\nGrabs deprecations for a specific domain.\n"
            ],
            "signature": [
              "(domainId: string) => Promise<",
              "DomainDeprecationDetails",
              "[]>"
            ],
            "path": "src/core/public/deprecations/deprecations_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.DeprecationsServiceStart.getDeprecations.$1",
                "type": "string",
                "tags": [],
                "label": "domainId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/public/deprecations/deprecations_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.DeprecationsServiceStart.isDeprecationResolvable",
            "type": "Function",
            "tags": [],
            "label": "isDeprecationResolvable",
            "description": [
              "\nReturns a boolean if the provided deprecation can be automatically resolvable.\n"
            ],
            "signature": [
              "(details: ",
              "DomainDeprecationDetails",
              ") => boolean"
            ],
            "path": "src/core/public/deprecations/deprecations_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.DeprecationsServiceStart.isDeprecationResolvable.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "details",
                "description": [],
                "signature": [
                  "DomainDeprecationDetails"
                ],
                "path": "src/core/public/deprecations/deprecations_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.DeprecationsServiceStart.resolveDeprecation",
            "type": "Function",
            "tags": [],
            "label": "resolveDeprecation",
            "description": [
              "\nCalls the correctiveActions.api to automatically resolve the depprecation.\n"
            ],
            "signature": [
              "(details: ",
              "DomainDeprecationDetails",
              ") => Promise<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ResolveDeprecationResponse",
                "text": "ResolveDeprecationResponse"
              },
              ">"
            ],
            "path": "src/core/public/deprecations/deprecations_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.DeprecationsServiceStart.resolveDeprecation.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "details",
                "description": [],
                "signature": [
                  "DomainDeprecationDetails"
                ],
                "path": "src/core/public/deprecations/deprecations_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.DocLinksStart",
        "type": "Interface",
        "tags": [],
        "label": "DocLinksStart",
        "description": [],
        "path": "src/core/public/doc_links/doc_links_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.DocLinksStart.DOC_LINK_VERSION",
            "type": "string",
            "tags": [],
            "label": "DOC_LINK_VERSION",
            "description": [],
            "path": "src/core/public/doc_links/doc_links_service.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.DocLinksStart.ELASTIC_WEBSITE_URL",
            "type": "string",
            "tags": [],
            "label": "ELASTIC_WEBSITE_URL",
            "description": [],
            "path": "src/core/public/doc_links/doc_links_service.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.DocLinksStart.links",
            "type": "Object",
            "tags": [],
            "label": "links",
            "description": [],
            "signature": [
              "{ readonly settings: string; readonly elasticStackGetStarted: string; readonly upgrade: { readonly upgradingElasticStack: string; }; readonly apm: { readonly kibanaSettings: string; readonly supportedServiceMaps: string; readonly customLinks: string; readonly droppedTransactionSpans: string; readonly upgrading: string; readonly metaData: string; }; readonly canvas: { readonly guide: string; }; readonly dashboard: { readonly guide: string; readonly drilldowns: string; readonly drilldownsTriggerPicker: string; readonly urlDrilldownTemplateSyntax: string; readonly urlDrilldownVariables: string; }; readonly discover: Record<string, string>; readonly filebeat: { readonly base: string; readonly installation: string; readonly configuration: string; readonly elasticsearchOutput: string; readonly elasticsearchModule: string; readonly startup: string; readonly exportedFields: string; readonly suricataModule: string; readonly zeekModule: string; }; readonly auditbeat: { readonly base: string; readonly auditdModule: string; readonly systemModule: string; }; readonly metricbeat: { readonly base: string; readonly configure: string; readonly httpEndpoint: string; readonly install: string; readonly start: string; }; readonly enterpriseSearch: { readonly base: string; readonly appSearchBase: string; readonly workplaceSearchBase: string; }; readonly heartbeat: { readonly base: string; }; readonly libbeat: { readonly getStarted: string; }; readonly logstash: { readonly base: string; }; readonly functionbeat: { readonly base: string; }; readonly winlogbeat: { readonly base: string; }; readonly aggs: { readonly composite: string; readonly composite_missing_bucket: string; readonly date_histogram: string; readonly date_range: string; readonly date_format_pattern: string; readonly filter: string; readonly filters: string; readonly geohash_grid: string; readonly histogram: string; readonly ip_range: string; readonly range: string; readonly significant_terms: string; readonly terms: string; readonly terms_doc_count_error: string; readonly avg: string; readonly avg_bucket: string; readonly max_bucket: string; readonly min_bucket: string; readonly sum_bucket: string; readonly cardinality: string; readonly count: string; readonly cumulative_sum: string; readonly derivative: string; readonly geo_bounds: string; readonly geo_centroid: string; readonly max: string; readonly median: string; readonly min: string; readonly moving_avg: string; readonly percentile_ranks: string; readonly serial_diff: string; readonly std_dev: string; readonly sum: string; readonly top_hits: string; }; readonly runtimeFields: { readonly overview: string; readonly mapping: string; }; readonly scriptedFields: { readonly scriptFields: string; readonly scriptAggs: string; readonly painless: string; readonly painlessApi: string; readonly painlessLangSpec: string; readonly painlessSyntax: string; readonly painlessWalkthrough: string; readonly luceneExpressions: string; }; readonly search: { readonly sessions: string; readonly sessionLimits: string; }; readonly indexPatterns: { readonly introduction: string; readonly fieldFormattersNumber: string; readonly fieldFormattersString: string; readonly runtimeFields: string; }; readonly addData: string; readonly kibana: string; readonly upgradeAssistant: { readonly overview: string; readonly batchReindex: string; readonly remoteReindex: string; }; readonly rollupJobs: string; readonly elasticsearch: Record<string, string>; readonly siem: { readonly privileges: string; readonly guide: string; readonly gettingStarted: string; readonly ml: string; readonly ruleChangeLog: string; readonly detectionsReq: string; readonly networkMap: string; readonly troubleshootGaps: string; }; readonly securitySolution: { readonly trustedApps: string; }; readonly query: { readonly eql: string; readonly kueryQuerySyntax: string; readonly luceneQuerySyntax: string; readonly percolate: string; readonly queryDsl: string; }; readonly date: { readonly dateMath: string; readonly dateMathIndexNames: string; }; readonly management: Record<string, string>; readonly ml: Record<string, string>; readonly transforms: Record<string, string>; readonly visualize: Record<string, string>; readonly apis: Readonly<{ bulkIndexAlias: string; byteSizeUnits: string; createAutoFollowPattern: string; createFollower: string; createIndex: string; createSnapshotLifecyclePolicy: string; createRoleMapping: string; createRoleMappingTemplates: string; createRollupJobsRequest: string; createApiKey: string; createPipeline: string; createTransformRequest: string; cronExpressions: string; executeWatchActionModes: string; indexExists: string; openIndex: string; putComponentTemplate: string; painlessExecute: string; painlessExecuteAPIContexts: string; putComponentTemplateMetadata: string; putSnapshotLifecyclePolicy: string; putIndexTemplateV1: string; putWatch: string; simulatePipeline: string; timeUnits: string; updateTransform: string; }>; readonly observability: Readonly<{ guide: string; infrastructureThreshold: string; logsThreshold: string; metricsThreshold: string; monitorStatus: string; monitorUptime: string; tlsCertificate: string; uptimeDurationAnomaly: string; }>; readonly alerting: Record<string, string>; readonly maps: Readonly<{ guide: string; importGeospatialPrivileges: string; gdalTutorial: string; }>; readonly monitoring: Record<string, string>; readonly security: Readonly<{ apiKeyServiceSettings: string; clusterPrivileges: string; elasticsearchSettings: string; elasticsearchEnableSecurity: string; elasticsearchEnableApiKeys: string; indicesPrivileges: string; kibanaTLS: string; kibanaPrivileges: string; mappingRoles: string; mappingRolesFieldRules: string; runAsPrivilege: string; }>; readonly spaces: Readonly<{ kibanaLegacyUrlAliases: string; kibanaDisableLegacyUrlAliasesApi: string; }>; readonly watcher: Record<string, string>; readonly ccs: Record<string, string>; readonly plugins: Record<string, string>; readonly snapshotRestore: Record<string, string>; readonly ingest: Record<string, string>; readonly fleet: Readonly<{ datastreamsILM: string; beatsAgentComparison: string; guide: string; fleetServer: string; fleetServerAddFleetServer: string; settings: string; settingsFleetServerHostSettings: string; settingsFleetServerProxySettings: string; troubleshooting: string; elasticAgent: string; datastreams: string; datastreamsNamingScheme: string; installElasticAgent: string; upgradeElasticAgent: string; upgradeElasticAgent712lower: string; learnMoreBlog: string; apiKeysLearnMore: string; onPremRegistry: string; }>; readonly ecs: { readonly guide: string; }; readonly clients: { readonly guide: string; readonly goOverview: string; readonly javaIndex: string; readonly jsIntro: string; readonly netGuide: string; readonly perlGuide: string; readonly phpGuide: string; readonly pythonGuide: string; readonly rubyOverview: string; readonly rustGuide: string; }; readonly endpoints: { readonly troubleshooting: string; }; }"
            ],
            "path": "src/core/public/doc_links/doc_links_service.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.EnvironmentMode",
        "type": "Interface",
        "tags": [],
        "label": "EnvironmentMode",
        "description": [],
        "path": "node_modules/@kbn/config/target_types/types.d.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.EnvironmentMode.name",
            "type": "CompoundType",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "\"production\" | \"development\""
            ],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.EnvironmentMode.dev",
            "type": "boolean",
            "tags": [],
            "label": "dev",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.EnvironmentMode.prod",
            "type": "boolean",
            "tags": [],
            "label": "prod",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.ErrorToastOptions",
        "type": "Interface",
        "tags": [],
        "label": "ErrorToastOptions",
        "description": [
          "\nOptions available for {@link IToasts} error APIs."
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ErrorToastOptions",
            "text": "ErrorToastOptions"
          },
          " extends ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          }
        ],
        "path": "src/core/public/notifications/toasts/toasts_api.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.ErrorToastOptions.title",
            "type": "string",
            "tags": [],
            "label": "title",
            "description": [
              "\nThe title of the toast and the dialog when expanding the message."
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.ErrorToastOptions.toastMessage",
            "type": "string",
            "tags": [],
            "label": "toastMessage",
            "description": [
              "\nThe message to be shown in the toast. If this is not specified the error's\nmessage will be shown in the toast instead. Overwriting that message can\nbe used to provide more user-friendly toasts. If you specify this, the error\nmessage will still be shown in the detailed error modal."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.FatalErrorInfo",
        "type": "Interface",
        "tags": [],
        "label": "FatalErrorInfo",
        "description": [
          "\nRepresents the `message` and `stack` of a fatal Error\n"
        ],
        "path": "src/core/public/fatal_errors/get_error_info.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.FatalErrorInfo.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "src/core/public/fatal_errors/get_error_info.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.FatalErrorInfo.stack",
            "type": "string",
            "tags": [],
            "label": "stack",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/fatal_errors/get_error_info.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.FatalErrorsSetup",
        "type": "Interface",
        "tags": [],
        "label": "FatalErrorsSetup",
        "description": [
          "\nFatalErrors stop the Kibana Public Core and displays a fatal error screen\nwith details about the Kibana build and the error.\n"
        ],
        "path": "src/core/public/fatal_errors/fatal_errors_service.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.FatalErrorsSetup.add",
            "type": "Function",
            "tags": [],
            "label": "add",
            "description": [
              "\nAdd a new fatal error. This will stop the Kibana Public Core and display\na fatal error screen with details about the Kibana build and the error.\n"
            ],
            "signature": [
              "(error: string | Error, source?: string | undefined) => never"
            ],
            "path": "src/core/public/fatal_errors/fatal_errors_service.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.FatalErrorsSetup.add.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "error",
                "description": [
                  "- The error to display"
                ],
                "signature": [
                  "string | Error"
                ],
                "path": "src/core/public/fatal_errors/fatal_errors_service.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.FatalErrorsSetup.add.$2",
                "type": "string",
                "tags": [],
                "label": "source",
                "description": [
                  "- Adds a prefix of the form `${source}: ` to the error message"
                ],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/core/public/fatal_errors/fatal_errors_service.tsx",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.FatalErrorsSetup.get$",
            "type": "Function",
            "tags": [],
            "label": "get$",
            "description": [
              "\nAn Observable that will emit whenever a fatal error is added with `add()`"
            ],
            "signature": [
              "() => ",
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.FatalErrorInfo",
                "text": "FatalErrorInfo"
              },
              ">"
            ],
            "path": "src/core/public/fatal_errors/fatal_errors_service.tsx",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.I18nStart",
        "type": "Interface",
        "tags": [],
        "label": "I18nStart",
        "description": [
          "\nI18nStart.Context is required by any localizable React component from \\@kbn/i18n and \\@elastic/eui packages\nand is supposed to be used as the topmost component for any i18n-compatible React tree.\n"
        ],
        "path": "src/core/public/i18n/i18n_service.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.I18nStart.Context",
            "type": "Function",
            "tags": [],
            "label": "Context",
            "description": [
              "\nReact Context provider required as the topmost component for any i18n-compatible React tree."
            ],
            "signature": [
              "({ children }: { children: React.ReactNode; }) => JSX.Element"
            ],
            "path": "src/core/public/i18n/i18n_service.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.I18nStart.Context.$1",
                "type": "Object",
                "tags": [],
                "label": "{ children }",
                "description": [],
                "path": "src/core/public/i18n/i18n_service.tsx",
                "deprecated": false,
                "children": [
                  {
                    "parentPluginId": "core",
                    "id": "def-public.I18nStart.Context.$1.children",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "children",
                    "description": [],
                    "signature": [
                      "string | number | boolean | {} | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ReactNodeArray | React.ReactPortal | null | undefined"
                    ],
                    "path": "src/core/public/i18n/i18n_service.tsx",
                    "deprecated": false
                  }
                ]
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.IExternalUrlPolicy",
        "type": "Interface",
        "tags": [],
        "label": "IExternalUrlPolicy",
        "description": [
          "\nA policy describing whether access to an external destination is allowed."
        ],
        "path": "src/core/server/external_url/external_url_config.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.IExternalUrlPolicy.allow",
            "type": "boolean",
            "tags": [],
            "label": "allow",
            "description": [
              "\nIndicates if this policy allows or denies access to the described destination."
            ],
            "path": "src/core/server/external_url/external_url_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IExternalUrlPolicy.host",
            "type": "string",
            "tags": [],
            "label": "host",
            "description": [
              "\nOptional host describing the external destination.\nMay be combined with `protocol`.\n"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/external_url/external_url_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IExternalUrlPolicy.protocol",
            "type": "string",
            "tags": [],
            "label": "protocol",
            "description": [
              "\nOptional protocol describing the external destination.\nMay be combined with `host`.\n"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/external_url/external_url_config.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.IUiSettingsClient",
        "type": "Interface",
        "tags": [],
        "label": "IUiSettingsClient",
        "description": [
          "\nClient-side client that provides access to the advanced settings stored in elasticsearch.\nThe settings provide control over the behavior of the Kibana application.\nFor example, a user can specify how to display numeric or date fields.\nUsers can adjust the settings via Management UI.\n{@link IUiSettingsClient}\n"
        ],
        "path": "src/core/public/ui_settings/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nGets the value for a specific uiSetting. If this setting has no user-defined value\nthen the `defaultOverride` parameter is returned (and parsed if setting is of type\n\"json\" or \"number). If the parameter is not defined and the key is not registered\nby any plugin then an error is thrown, otherwise reads the default value defined by a plugin."
            ],
            "signature": [
              "<T = any>(key: string, defaultOverride?: T | undefined) => T"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.get.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.get.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "defaultOverride",
                "description": [],
                "signature": [
                  "T | undefined"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.get$",
            "type": "Function",
            "tags": [],
            "label": "get$",
            "description": [
              "\nGets an observable of the current value for a config key, and all updates to that config\nkey in the future. Providing a `defaultOverride` argument behaves the same as it does in #get()"
            ],
            "signature": [
              "<T = any>(key: string, defaultOverride?: T | undefined) => ",
              "Observable",
              "<T>"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.get$.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.get$.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "defaultOverride",
                "description": [],
                "signature": [
                  "T | undefined"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.getAll",
            "type": "Function",
            "tags": [],
            "label": "getAll",
            "description": [
              "\nGets the metadata about all uiSettings, including the type, default value, and user value\nfor each key."
            ],
            "signature": [
              "() => Readonly<Record<string, Pick<",
              "UiSettingsParams",
              "<unknown>, \"name\" | \"type\" | \"description\" | \"options\" | \"order\" | \"value\" | \"category\" | \"optionLabels\" | \"requiresPageReload\" | \"readonly\" | \"sensitive\" | \"deprecation\" | \"metric\"> & ",
              "UserProvidedValues",
              "<any>>>"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.set",
            "type": "Function",
            "tags": [],
            "label": "set",
            "description": [
              "\nSets the value for a uiSetting. If the setting is not registered by any plugin\nit will be stored as a custom setting. The new value will be synchronously available via\nthe `get()` method and sent to the server in the background. If the request to the\nserver fails then a updateErrors$ will be notified and the setting will be\nreverted to its value before `set()` was called."
            ],
            "signature": [
              "(key: string, value: any) => Promise<boolean>"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.set.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.set.$2",
                "type": "Any",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.remove",
            "type": "Function",
            "tags": [],
            "label": "remove",
            "description": [
              "\nRemoves the user-defined value for a setting, causing it to revert to the default. This\nmethod behaves the same as calling `set(key, null)`, including the synchronization, custom\nsetting, and error behavior of that method."
            ],
            "signature": [
              "(key: string) => Promise<boolean>"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.remove.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.isDeclared",
            "type": "Function",
            "tags": [],
            "label": "isDeclared",
            "description": [
              "\nReturns true if the key is a \"known\" uiSetting, meaning it is either registered\nby any plugin or was previously added as a custom setting via the `set()` method."
            ],
            "signature": [
              "(key: string) => boolean"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.isDeclared.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.isDefault",
            "type": "Function",
            "tags": [],
            "label": "isDefault",
            "description": [
              "\nReturns true if the setting has no user-defined value or is unknown"
            ],
            "signature": [
              "(key: string) => boolean"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.isDefault.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.isCustom",
            "type": "Function",
            "tags": [],
            "label": "isCustom",
            "description": [
              "\nReturns true if the setting wasn't registered by any plugin, but was either\nadded directly via `set()`, or is an unknown setting found in the uiSettings saved\nobject"
            ],
            "signature": [
              "(key: string) => boolean"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.isCustom.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.isOverridden",
            "type": "Function",
            "tags": [],
            "label": "isOverridden",
            "description": [
              "\nShows whether the uiSettings value set by the user."
            ],
            "signature": [
              "(key: string) => boolean"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.IUiSettingsClient.isOverridden.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/public/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.getUpdate$",
            "type": "Function",
            "tags": [],
            "label": "getUpdate$",
            "description": [
              "\nReturns an Observable that notifies subscribers of each update to the uiSettings,\nincluding the key, newValue, and oldValue of the setting that changed."
            ],
            "signature": [
              "<T = any>() => ",
              "Observable",
              "<{ key: string; newValue: T; oldValue: T; }>"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.IUiSettingsClient.getUpdateErrors$",
            "type": "Function",
            "tags": [],
            "label": "getUpdateErrors$",
            "description": [
              "\nReturns an Observable that notifies subscribers of each error while trying to update\nthe settings, containing the actual Error class."
            ],
            "signature": [
              "() => ",
              "Observable",
              "<Error>"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.NotificationsSetup",
        "type": "Interface",
        "tags": [],
        "label": "NotificationsSetup",
        "description": [],
        "path": "src/core/public/notifications/notifications_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.NotificationsSetup.toasts",
            "type": "Object",
            "tags": [],
            "label": "toasts",
            "description": [
              "{@link ToastsSetup}"
            ],
            "signature": [
              "{ add: (toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ") => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; get$: () => ",
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "[]>; remove: (toastOrId: string | ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              ") => void; addSuccess: (toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; addWarning: (toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; addDanger: (toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; addError: (error: Error, options: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ErrorToastOptions",
                "text": "ErrorToastOptions"
              },
              ") => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; addInfo: (toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; }"
            ],
            "path": "src/core/public/notifications/notifications_service.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.NotificationsStart",
        "type": "Interface",
        "tags": [],
        "label": "NotificationsStart",
        "description": [],
        "path": "src/core/public/notifications/notifications_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.NotificationsStart.toasts",
            "type": "Object",
            "tags": [],
            "label": "toasts",
            "description": [
              "{@link ToastsStart}"
            ],
            "signature": [
              "{ add: (toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ") => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; get$: () => ",
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "[]>; remove: (toastOrId: string | ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              ") => void; addSuccess: (toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; addWarning: (toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; addDanger: (toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; addError: (error: Error, options: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ErrorToastOptions",
                "text": "ErrorToastOptions"
              },
              ") => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; addInfo: (toastOrTitle: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastInput",
                "text": "ToastInput"
              },
              ", options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.ToastOptions",
                "text": "ToastOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.Toast",
                "text": "Toast"
              },
              "; }"
            ],
            "path": "src/core/public/notifications/notifications_service.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.OverlayBannersStart",
        "type": "Interface",
        "tags": [],
        "label": "OverlayBannersStart",
        "description": [],
        "path": "src/core/public/overlays/banners/banners_service.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayBannersStart.add",
            "type": "Function",
            "tags": [],
            "label": "add",
            "description": [
              "\nAdd a new banner\n"
            ],
            "signature": [
              "(mount: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.MountPoint",
                "text": "MountPoint"
              },
              "<HTMLElement>, priority?: number | undefined) => string"
            ],
            "path": "src/core/public/overlays/banners/banners_service.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayBannersStart.add.$1",
                "type": "Function",
                "tags": [],
                "label": "mount",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.MountPoint",
                    "text": "MountPoint"
                  },
                  "<HTMLElement>"
                ],
                "path": "src/core/public/overlays/banners/banners_service.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayBannersStart.add.$2",
                "type": "number",
                "tags": [],
                "label": "priority",
                "description": [
                  "optional priority order to display this banner. Higher priority values are shown first."
                ],
                "signature": [
                  "number | undefined"
                ],
                "path": "src/core/public/overlays/banners/banners_service.tsx",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": [
              "a unique identifier for the given banner to be used with {@link OverlayBannersStart.remove} and\n{@link OverlayBannersStart.replace}"
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayBannersStart.remove",
            "type": "Function",
            "tags": [],
            "label": "remove",
            "description": [
              "\nRemove a banner\n"
            ],
            "signature": [
              "(id: string) => boolean"
            ],
            "path": "src/core/public/overlays/banners/banners_service.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayBannersStart.remove.$1",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [
                  "the unique identifier for the banner returned by {@link OverlayBannersStart.add}"
                ],
                "signature": [
                  "string"
                ],
                "path": "src/core/public/overlays/banners/banners_service.tsx",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "if the banner was found or not"
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayBannersStart.replace",
            "type": "Function",
            "tags": [],
            "label": "replace",
            "description": [
              "\nReplace a banner in place\n"
            ],
            "signature": [
              "(id: string | undefined, mount: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.MountPoint",
                "text": "MountPoint"
              },
              "<HTMLElement>, priority?: number | undefined) => string"
            ],
            "path": "src/core/public/overlays/banners/banners_service.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayBannersStart.replace.$1",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [
                  "the unique identifier for the banner returned by {@link OverlayBannersStart.add}"
                ],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/core/public/overlays/banners/banners_service.tsx",
                "deprecated": false,
                "isRequired": false
              },
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayBannersStart.replace.$2",
                "type": "Function",
                "tags": [],
                "label": "mount",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.MountPoint",
                    "text": "MountPoint"
                  },
                  "<HTMLElement>"
                ],
                "path": "src/core/public/overlays/banners/banners_service.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayBannersStart.replace.$3",
                "type": "number",
                "tags": [],
                "label": "priority",
                "description": [
                  "optional priority order to display this banner. Higher priority values are shown first."
                ],
                "signature": [
                  "number | undefined"
                ],
                "path": "src/core/public/overlays/banners/banners_service.tsx",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": [
              "a new identifier for the given banner to be used with {@link OverlayBannersStart.remove} and\n{@link OverlayBannersStart.replace}"
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayBannersStart.getComponent",
            "type": "Function",
            "tags": [],
            "label": "getComponent",
            "description": [],
            "signature": [
              "() => JSX.Element"
            ],
            "path": "src/core/public/overlays/banners/banners_service.tsx",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.OverlayFlyoutOpenOptions",
        "type": "Interface",
        "tags": [],
        "label": "OverlayFlyoutOpenOptions",
        "description": [],
        "path": "src/core/public/overlays/flyout/flyout_service.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutOpenOptions.className",
            "type": "string",
            "tags": [],
            "label": "className",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutOpenOptions.closeButtonAriaLabel",
            "type": "string",
            "tags": [],
            "label": "closeButtonAriaLabel",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutOpenOptions.ownFocus",
            "type": "CompoundType",
            "tags": [],
            "label": "ownFocus",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutOpenOptions.datatestsubj",
            "type": "string",
            "tags": [],
            "label": "'data-test-subj'",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutOpenOptions.arialabel",
            "type": "string",
            "tags": [],
            "label": "'aria-label'",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutOpenOptions.size",
            "type": "CompoundType",
            "tags": [],
            "label": "size",
            "description": [],
            "signature": [
              "\"s\" | \"m\" | \"l\" | undefined"
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutOpenOptions.maxWidth",
            "type": "CompoundType",
            "tags": [],
            "label": "maxWidth",
            "description": [],
            "signature": [
              "string | number | boolean | undefined"
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutOpenOptions.hideCloseButton",
            "type": "CompoundType",
            "tags": [],
            "label": "hideCloseButton",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutOpenOptions.maskProps",
            "type": "CompoundType",
            "tags": [],
            "label": "maskProps",
            "description": [],
            "signature": [
              "EuiOverlayMaskProps",
              " | undefined"
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutOpenOptions.onClose",
            "type": "Function",
            "tags": [],
            "label": "onClose",
            "description": [
              "\nEuiFlyout onClose handler.\nIf provided the consumer is responsible for calling flyout.close() to close the flyout;"
            ],
            "signature": [
              "((flyout: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayRef",
                "text": "OverlayRef"
              },
              ") => void) | undefined"
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayFlyoutOpenOptions.onClose.$1",
                "type": "Object",
                "tags": [],
                "label": "flyout",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.OverlayRef",
                    "text": "OverlayRef"
                  }
                ],
                "path": "src/core/public/overlays/flyout/flyout_service.tsx",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.OverlayFlyoutStart",
        "type": "Interface",
        "tags": [],
        "label": "OverlayFlyoutStart",
        "description": [
          "\nAPIs to open and manage fly-out dialogs.\n"
        ],
        "path": "src/core/public/overlays/flyout/flyout_service.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayFlyoutStart.open",
            "type": "Function",
            "tags": [
              "return"
            ],
            "label": "open",
            "description": [
              "\nOpens a flyout panel with the given mount point inside. You can use\n`close()` on the returned FlyoutRef to close the flyout.\n"
            ],
            "signature": [
              "(mount: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.MountPoint",
                "text": "MountPoint"
              },
              "<HTMLElement>, options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayFlyoutOpenOptions",
                "text": "OverlayFlyoutOpenOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayRef",
                "text": "OverlayRef"
              }
            ],
            "path": "src/core/public/overlays/flyout/flyout_service.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayFlyoutStart.open.$1",
                "type": "Function",
                "tags": [],
                "label": "mount",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.MountPoint",
                    "text": "MountPoint"
                  },
                  "<HTMLElement>"
                ],
                "path": "src/core/public/overlays/flyout/flyout_service.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayFlyoutStart.open.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.OverlayFlyoutOpenOptions",
                    "text": "OverlayFlyoutOpenOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/public/overlays/flyout/flyout_service.tsx",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.OverlayModalConfirmOptions",
        "type": "Interface",
        "tags": [],
        "label": "OverlayModalConfirmOptions",
        "description": [],
        "path": "src/core/public/overlays/modal/modal_service.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalConfirmOptions.title",
            "type": "string",
            "tags": [],
            "label": "title",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalConfirmOptions.cancelButtonText",
            "type": "string",
            "tags": [],
            "label": "cancelButtonText",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalConfirmOptions.confirmButtonText",
            "type": "string",
            "tags": [],
            "label": "confirmButtonText",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalConfirmOptions.className",
            "type": "string",
            "tags": [],
            "label": "className",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalConfirmOptions.closeButtonAriaLabel",
            "type": "string",
            "tags": [],
            "label": "closeButtonAriaLabel",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalConfirmOptions.datatestsubj",
            "type": "string",
            "tags": [],
            "label": "'data-test-subj'",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalConfirmOptions.defaultFocusedButton",
            "type": "CompoundType",
            "tags": [],
            "label": "defaultFocusedButton",
            "description": [],
            "signature": [
              "\"cancel\" | \"confirm\" | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalConfirmOptions.buttonColor",
            "type": "CompoundType",
            "tags": [],
            "label": "buttonColor",
            "description": [],
            "signature": [
              "\"text\" | \"primary\" | \"success\" | \"warning\" | \"danger\" | \"accent\" | \"ghost\" | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalConfirmOptions.maxWidth",
            "type": "CompoundType",
            "tags": [],
            "label": "maxWidth",
            "description": [
              "\nSets the max-width of the modal.\nSet to `true` to use the default (`euiBreakpoints 'm'`),\nset to `false` to not restrict the width,\nset to a number for a custom width in px,\nset to a string for a custom width in custom measurement."
            ],
            "signature": [
              "string | number | boolean | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.OverlayModalOpenOptions",
        "type": "Interface",
        "tags": [],
        "label": "OverlayModalOpenOptions",
        "description": [],
        "path": "src/core/public/overlays/modal/modal_service.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalOpenOptions.className",
            "type": "string",
            "tags": [],
            "label": "className",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalOpenOptions.closeButtonAriaLabel",
            "type": "string",
            "tags": [],
            "label": "closeButtonAriaLabel",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalOpenOptions.datatestsubj",
            "type": "string",
            "tags": [],
            "label": "'data-test-subj'",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalOpenOptions.maxWidth",
            "type": "CompoundType",
            "tags": [],
            "label": "maxWidth",
            "description": [],
            "signature": [
              "string | number | boolean | undefined"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.OverlayModalStart",
        "type": "Interface",
        "tags": [],
        "label": "OverlayModalStart",
        "description": [
          "\nAPIs to open and manage modal dialogs.\n"
        ],
        "path": "src/core/public/overlays/modal/modal_service.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalStart.open",
            "type": "Function",
            "tags": [
              "return"
            ],
            "label": "open",
            "description": [
              "\nOpens a modal panel with the given mount point inside. You can use\n`close()` on the returned OverlayRef to close the modal.\n"
            ],
            "signature": [
              "(mount: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.MountPoint",
                "text": "MountPoint"
              },
              "<HTMLElement>, options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayModalOpenOptions",
                "text": "OverlayModalOpenOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayRef",
                "text": "OverlayRef"
              }
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayModalStart.open.$1",
                "type": "Function",
                "tags": [],
                "label": "mount",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.MountPoint",
                    "text": "MountPoint"
                  },
                  "<HTMLElement>"
                ],
                "path": "src/core/public/overlays/modal/modal_service.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayModalStart.open.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.OverlayModalOpenOptions",
                    "text": "OverlayModalOpenOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/public/overlays/modal/modal_service.tsx",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayModalStart.openConfirm",
            "type": "Function",
            "tags": [],
            "label": "openConfirm",
            "description": [
              "\nOpens a confirmation modal with the given text or mountpoint as a message.\nReturns a Promise resolving to `true` if user confirmed or `false` otherwise.\n"
            ],
            "signature": [
              "(message: string | ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.MountPoint",
                "text": "MountPoint"
              },
              "<HTMLElement>, options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayModalConfirmOptions",
                "text": "OverlayModalConfirmOptions"
              },
              " | undefined) => Promise<boolean>"
            ],
            "path": "src/core/public/overlays/modal/modal_service.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayModalStart.openConfirm.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string | ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.MountPoint",
                    "text": "MountPoint"
                  },
                  "<HTMLElement>"
                ],
                "path": "src/core/public/overlays/modal/modal_service.tsx",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayModalStart.openConfirm.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.OverlayModalConfirmOptions",
                    "text": "OverlayModalConfirmOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/public/overlays/modal/modal_service.tsx",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.OverlayRef",
        "type": "Interface",
        "tags": [],
        "label": "OverlayRef",
        "description": [
          "\nReturned by {@link OverlayStart} methods for closing a mounted overlay."
        ],
        "path": "src/core/public/overlays/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayRef.onClose",
            "type": "Object",
            "tags": [],
            "label": "onClose",
            "description": [
              "\nA Promise that will resolve once this overlay is closed.\n\nOverlays can close from user interaction, calling `close()` on the overlay\nreference or another overlay replacing yours via `openModal` or `openFlyout`."
            ],
            "signature": [
              "Promise<void>"
            ],
            "path": "src/core/public/overlays/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayRef.close",
            "type": "Function",
            "tags": [],
            "label": "close",
            "description": [
              "\nCloses the referenced overlay if it's still open which in turn will\nresolve the `onClose` Promise. If the overlay had already been\nclosed this method does nothing."
            ],
            "signature": [
              "() => Promise<void>"
            ],
            "path": "src/core/public/overlays/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.OverlayStart",
        "type": "Interface",
        "tags": [],
        "label": "OverlayStart",
        "description": [],
        "path": "src/core/public/overlays/overlay_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayStart.banners",
            "type": "Object",
            "tags": [],
            "label": "banners",
            "description": [
              "{@link OverlayBannersStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayBannersStart",
                "text": "OverlayBannersStart"
              }
            ],
            "path": "src/core/public/overlays/overlay_service.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayStart.openFlyout",
            "type": "Function",
            "tags": [],
            "label": "openFlyout",
            "description": [
              "{@link OverlayFlyoutStart#open}"
            ],
            "signature": [
              "(mount: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.MountPoint",
                "text": "MountPoint"
              },
              "<HTMLElement>, options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayFlyoutOpenOptions",
                "text": "OverlayFlyoutOpenOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayRef",
                "text": "OverlayRef"
              }
            ],
            "path": "src/core/public/overlays/overlay_service.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayStart.openFlyout.$1",
                "type": "Function",
                "tags": [],
                "label": "mount",
                "description": [],
                "signature": [
                  "(element: HTMLElement) => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.UnmountCallback",
                    "text": "UnmountCallback"
                  }
                ],
                "path": "src/core/public/overlays/flyout/flyout_service.tsx",
                "deprecated": false,
                "returnComment": [],
                "children": [
                  {
                    "parentPluginId": "core",
                    "id": "def-public.OverlayStart.openFlyout.$1.$1",
                    "type": "Uncategorized",
                    "tags": [],
                    "label": "element",
                    "description": [],
                    "signature": [
                      "T"
                    ],
                    "path": "src/core/public/types.ts",
                    "deprecated": false
                  }
                ]
              },
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayStart.openFlyout.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.OverlayFlyoutOpenOptions",
                    "text": "OverlayFlyoutOpenOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/public/overlays/flyout/flyout_service.tsx",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayStart.openModal",
            "type": "Function",
            "tags": [],
            "label": "openModal",
            "description": [
              "{@link OverlayModalStart#open}"
            ],
            "signature": [
              "(mount: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.MountPoint",
                "text": "MountPoint"
              },
              "<HTMLElement>, options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayModalOpenOptions",
                "text": "OverlayModalOpenOptions"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayRef",
                "text": "OverlayRef"
              }
            ],
            "path": "src/core/public/overlays/overlay_service.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayStart.openModal.$1",
                "type": "Function",
                "tags": [],
                "label": "mount",
                "description": [],
                "signature": [
                  "(element: HTMLElement) => ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.UnmountCallback",
                    "text": "UnmountCallback"
                  }
                ],
                "path": "src/core/public/overlays/modal/modal_service.tsx",
                "deprecated": false,
                "returnComment": [],
                "children": [
                  {
                    "parentPluginId": "core",
                    "id": "def-public.OverlayStart.openModal.$1.$1",
                    "type": "Uncategorized",
                    "tags": [],
                    "label": "element",
                    "description": [],
                    "signature": [
                      "T"
                    ],
                    "path": "src/core/public/types.ts",
                    "deprecated": false
                  }
                ]
              },
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayStart.openModal.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.OverlayModalOpenOptions",
                    "text": "OverlayModalOpenOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/public/overlays/modal/modal_service.tsx",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.OverlayStart.openConfirm",
            "type": "Function",
            "tags": [],
            "label": "openConfirm",
            "description": [
              "{@link OverlayModalStart#openConfirm}"
            ],
            "signature": [
              "(message: string | ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.MountPoint",
                "text": "MountPoint"
              },
              "<HTMLElement>, options?: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.OverlayModalConfirmOptions",
                "text": "OverlayModalConfirmOptions"
              },
              " | undefined) => Promise<boolean>"
            ],
            "path": "src/core/public/overlays/overlay_service.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayStart.openConfirm.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string | ",
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.MountPoint",
                    "text": "MountPoint"
                  },
                  "<HTMLElement>"
                ],
                "path": "src/core/public/overlays/modal/modal_service.tsx",
                "deprecated": false
              },
              {
                "parentPluginId": "core",
                "id": "def-public.OverlayStart.openConfirm.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.OverlayModalConfirmOptions",
                    "text": "OverlayModalConfirmOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/public/overlays/modal/modal_service.tsx",
                "deprecated": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.PackageInfo",
        "type": "Interface",
        "tags": [],
        "label": "PackageInfo",
        "description": [],
        "path": "node_modules/@kbn/config/target_types/types.d.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.PackageInfo.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.PackageInfo.branch",
            "type": "string",
            "tags": [],
            "label": "branch",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.PackageInfo.buildNum",
            "type": "number",
            "tags": [],
            "label": "buildNum",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.PackageInfo.buildSha",
            "type": "string",
            "tags": [],
            "label": "buildSha",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.PackageInfo.dist",
            "type": "boolean",
            "tags": [],
            "label": "dist",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.Plugin",
        "type": "Interface",
        "tags": [],
        "label": "Plugin",
        "description": [
          "\nThe interface that should be returned by a `PluginInitializer`.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Plugin",
            "text": "Plugin"
          },
          "<TSetup, TStart, TPluginsSetup, TPluginsStart>"
        ],
        "path": "src/core/public/plugins/plugin.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.Plugin.setup",
            "type": "Function",
            "tags": [],
            "label": "setup",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreSetup",
                "text": "CoreSetup"
              },
              "<TPluginsStart, TStart>, plugins: TPluginsSetup) => TSetup"
            ],
            "path": "src/core/public/plugins/plugin.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.Plugin.setup.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.CoreSetup",
                    "text": "CoreSetup"
                  },
                  "<TPluginsStart, TStart>"
                ],
                "path": "src/core/public/plugins/plugin.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.Plugin.setup.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsSetup"
                ],
                "path": "src/core/public/plugins/plugin.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.Plugin.start",
            "type": "Function",
            "tags": [],
            "label": "start",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreStart",
                "text": "CoreStart"
              },
              ", plugins: TPluginsStart) => TStart"
            ],
            "path": "src/core/public/plugins/plugin.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-public.Plugin.start.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.CoreStart",
                    "text": "CoreStart"
                  }
                ],
                "path": "src/core/public/plugins/plugin.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-public.Plugin.start.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsStart"
                ],
                "path": "src/core/public/plugins/plugin.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.Plugin.stop",
            "type": "Function",
            "tags": [],
            "label": "stop",
            "description": [],
            "signature": [
              "(() => void) | undefined"
            ],
            "path": "src/core/public/plugins/plugin.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.PluginInitializerContext",
        "type": "Interface",
        "tags": [],
        "label": "PluginInitializerContext",
        "description": [
          "\nThe available core services passed to a `PluginInitializer`\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.PluginInitializerContext",
            "text": "PluginInitializerContext"
          },
          "<ConfigSchema>"
        ],
        "path": "src/core/public/plugins/plugin_context.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.PluginInitializerContext.opaqueId",
            "type": "Uncategorized",
            "tags": [],
            "label": "opaqueId",
            "description": [
              "\nA symbol used to identify this plugin in the system. Needed when registering handlers or context providers."
            ],
            "signature": [
              "symbol"
            ],
            "path": "src/core/public/plugins/plugin_context.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.PluginInitializerContext.env",
            "type": "Object",
            "tags": [],
            "label": "env",
            "description": [],
            "signature": [
              "{ mode: Readonly<",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.EnvironmentMode",
                "text": "EnvironmentMode"
              },
              ">; packageInfo: Readonly<",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.PackageInfo",
                "text": "PackageInfo"
              },
              ">; }"
            ],
            "path": "src/core/public/plugins/plugin_context.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.PluginInitializerContext.config",
            "type": "Object",
            "tags": [],
            "label": "config",
            "description": [],
            "signature": [
              "{ get: <T extends object = ConfigSchema>() => T; }"
            ],
            "path": "src/core/public/plugins/plugin_context.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObject",
        "type": "Interface",
        "tags": [],
        "label": "SavedObject",
        "description": [],
        "signature": [
          "SavedObject",
          "<T>"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "The ID of this Saved Object, guaranteed to be unique for all objects of the same `type`"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [
              " The type of Saved Object. Each plugin can define it's own custom Saved Object types."
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [
              "An opaque version number which changes on each successful write operation. Can be used for implementing optimistic concurrency control."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.updated_at",
            "type": "string",
            "tags": [],
            "label": "updated_at",
            "description": [
              "Timestamp of the last time this document had been updated."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.error",
            "type": "Object",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "SavedObjectError",
              " | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.attributes",
            "type": "Uncategorized",
            "tags": [],
            "label": "attributes",
            "description": [
              "{@inheritdoc SavedObjectAttributes}"
            ],
            "signature": [
              "T"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.references",
            "type": "Array",
            "tags": [],
            "label": "references",
            "description": [
              "{@inheritdoc SavedObjectReference}"
            ],
            "signature": [
              "SavedObjectReference",
              "[]"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.migrationVersion",
            "type": "Object",
            "tags": [],
            "label": "migrationVersion",
            "description": [
              "{@inheritdoc SavedObjectsMigrationVersion}"
            ],
            "signature": [
              "SavedObjectsMigrationVersion",
              " | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.coreMigrationVersion",
            "type": "string",
            "tags": [],
            "label": "coreMigrationVersion",
            "description": [
              "A semver value that is used when upgrading objects between Kibana versions."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.namespaces",
            "type": "Array",
            "tags": [],
            "label": "namespaces",
            "description": [
              "\nSpace(s) that this saved object exists in. This attribute is not used for \"global\" saved object types which are registered with\n`namespaceType: 'agnostic'`."
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObject.originId",
            "type": "string",
            "tags": [],
            "label": "originId",
            "description": [
              "\nThe ID of the saved object this originated from. This is set if this object's `id` was regenerated; that can happen during migration\nfrom a legacy single-namespace type, or during import. It is only set during migration or create operations. This is used during import\nto ensure that ID regeneration is deterministic, so saved objects will be overwritten if they are imported multiple times into a given\nspace."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectAttributes",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectAttributes",
        "description": [
          "\nThe data for a Saved Object is stored as an object in the `attributes`\nproperty.\n"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectAttributes.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectError",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectError",
        "description": [],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectError.error",
            "type": "string",
            "tags": [],
            "label": "error",
            "description": [],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectError.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectError.statusCode",
            "type": "number",
            "tags": [],
            "label": "statusCode",
            "description": [],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectError.metadata",
            "type": "Object",
            "tags": [],
            "label": "metadata",
            "description": [],
            "signature": [
              "Record<string, unknown> | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectReference",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectReference",
        "description": [
          "\nA reference to another saved object.\n"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectReference.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectReference.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectReference.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectReferenceWithContext",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectReferenceWithContext",
        "description": [
          "\nA returned input object or one of its references, with additional context.\n"
        ],
        "path": "src/core/server/saved_objects/service/lib/collect_multi_namespace_references.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectReferenceWithContext.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [
              "The type of the referenced object"
            ],
            "path": "src/core/server/saved_objects/service/lib/collect_multi_namespace_references.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectReferenceWithContext.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "The ID of the referenced object"
            ],
            "path": "src/core/server/saved_objects/service/lib/collect_multi_namespace_references.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectReferenceWithContext.spaces",
            "type": "Array",
            "tags": [],
            "label": "spaces",
            "description": [
              "The space(s) that the referenced object exists in"
            ],
            "signature": [
              "string[]"
            ],
            "path": "src/core/server/saved_objects/service/lib/collect_multi_namespace_references.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectReferenceWithContext.inboundReferences",
            "type": "Array",
            "tags": [],
            "label": "inboundReferences",
            "description": [
              "\nReferences to this object; note that this does not contain _all inbound references everywhere for this object_, it only contains\ninbound references for the scope of this operation"
            ],
            "signature": [
              "{ type: string; id: string; name: string; }[]"
            ],
            "path": "src/core/server/saved_objects/service/lib/collect_multi_namespace_references.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectReferenceWithContext.isMissing",
            "type": "CompoundType",
            "tags": [],
            "label": "isMissing",
            "description": [
              "Whether or not this object or reference is missing"
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/server/saved_objects/service/lib/collect_multi_namespace_references.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectReferenceWithContext.spacesWithMatchingAliases",
            "type": "Array",
            "tags": [],
            "label": "spacesWithMatchingAliases",
            "description": [
              "The space(s) that legacy URL aliases matching this type/id exist in"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/server/saved_objects/service/lib/collect_multi_namespace_references.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsBaseOptions",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsBaseOptions",
        "description": [
          "\n"
        ],
        "path": "src/core/server/saved_objects/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsBaseOptions.namespace",
            "type": "string",
            "tags": [],
            "label": "namespace",
            "description": [
              "Specify the namespace for this operation"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsBulkResolveObject",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsBulkResolveObject",
        "description": [
          "\n"
        ],
        "path": "src/core/server/saved_objects/service/saved_objects_client.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsBulkResolveObject.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/core/server/saved_objects/service/saved_objects_client.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsBulkResolveObject.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/core/server/saved_objects/service/saved_objects_client.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsBulkResolveResponse",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsBulkResolveResponse",
        "description": [
          "\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreSavedObjectsPluginApi",
            "section": "def-server.SavedObjectsBulkResolveResponse",
            "text": "SavedObjectsBulkResolveResponse"
          },
          "<T>"
        ],
        "path": "src/core/server/saved_objects/service/saved_objects_client.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsBulkResolveResponse.resolved_objects",
            "type": "Array",
            "tags": [],
            "label": "resolved_objects",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsResolveResponse",
                "text": "SavedObjectsResolveResponse"
              },
              "<T>[]"
            ],
            "path": "src/core/server/saved_objects/service/saved_objects_client.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsCollectMultiNamespaceReferencesResponse",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsCollectMultiNamespaceReferencesResponse",
        "description": [
          "\nThe response when object references are collected.\n"
        ],
        "path": "src/core/server/saved_objects/service/lib/collect_multi_namespace_references.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsCollectMultiNamespaceReferencesResponse.objects",
            "type": "Array",
            "tags": [],
            "label": "objects",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectReferenceWithContext",
                "text": "SavedObjectReferenceWithContext"
              },
              "[]"
            ],
            "path": "src/core/server/saved_objects/service/lib/collect_multi_namespace_references.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsFindOptions",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsFindOptions",
        "description": [
          "\n"
        ],
        "path": "src/core/server/saved_objects/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "string | string[]"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.page",
            "type": "number",
            "tags": [],
            "label": "page",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.perPage",
            "type": "number",
            "tags": [],
            "label": "perPage",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.sortField",
            "type": "string",
            "tags": [],
            "label": "sortField",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.sortOrder",
            "type": "CompoundType",
            "tags": [],
            "label": "sortOrder",
            "description": [],
            "signature": [
              "\"asc\" | \"desc\" | \"_doc\" | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.fields",
            "type": "Array",
            "tags": [],
            "label": "fields",
            "description": [
              "\nAn array of fields to include in the results"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.search",
            "type": "string",
            "tags": [],
            "label": "search",
            "description": [
              "Search documents using the Elasticsearch Simple Query String syntax. See Elasticsearch Simple Query String `query` argument for more information"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.searchFields",
            "type": "Array",
            "tags": [],
            "label": "searchFields",
            "description": [
              "The fields to perform the parsed query against. See Elasticsearch Simple Query String `fields` argument for more information"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.searchAfter",
            "type": "Array",
            "tags": [],
            "label": "searchAfter",
            "description": [
              "\nUse the sort values from the previous page to retrieve the next page of results."
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.rootSearchFields",
            "type": "Array",
            "tags": [],
            "label": "rootSearchFields",
            "description": [
              "\nThe fields to perform the parsed query against. Unlike the `searchFields` argument, these are expected to be root fields and will not\nbe modified. If used in conjunction with `searchFields`, both are concatenated together."
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.hasReference",
            "type": "CompoundType",
            "tags": [],
            "label": "hasReference",
            "description": [
              "\nSearch for documents having a reference to the specified objects.\nUse `hasReferenceOperator` to specify the operator to use when searching for multiple references."
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsFindOptionsReference",
                "text": "SavedObjectsFindOptionsReference"
              },
              " | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsFindOptionsReference",
                "text": "SavedObjectsFindOptionsReference"
              },
              "[] | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.hasReferenceOperator",
            "type": "CompoundType",
            "tags": [],
            "label": "hasReferenceOperator",
            "description": [
              "\nThe operator to use when searching by multiple references using the `hasReference` option. Defaults to `OR`"
            ],
            "signature": [
              "\"AND\" | \"OR\" | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.defaultSearchOperator",
            "type": "CompoundType",
            "tags": [],
            "label": "defaultSearchOperator",
            "description": [
              "\nThe search operator to use with the provided filter. Defaults to `OR`"
            ],
            "signature": [
              "\"AND\" | \"OR\" | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.filter",
            "type": "Any",
            "tags": [],
            "label": "filter",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.aggs",
            "type": "Object",
            "tags": [
              "alpha"
            ],
            "label": "aggs",
            "description": [
              "\nA record of aggregations to perform.\nThe API currently only supports a limited set of metrics and bucket aggregation types.\nAdditional aggregation types can be contributed to Core.\n"
            ],
            "signature": [
              "Record<string, ",
              "AggregationsAggregationContainer",
              "> | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.namespaces",
            "type": "Array",
            "tags": [],
            "label": "namespaces",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.typeToNamespacesMap",
            "type": "Object",
            "tags": [],
            "label": "typeToNamespacesMap",
            "description": [
              "\nThis map defines each type to search for, and the namespace(s) to search for the type in; this is only intended to be used by a saved\nobject client wrapper.\nIf this is defined, it supersedes the `type` and `namespaces` fields when building the Elasticsearch query.\nAny types that are not included in this map will be excluded entirely.\nIf a type is included but its value is undefined, the operation will search for that type in the Default namespace."
            ],
            "signature": [
              "Map<string, string[] | undefined> | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.preference",
            "type": "string",
            "tags": [],
            "label": "preference",
            "description": [
              "An optional ES preference value to be used for the query"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptions.pit",
            "type": "Object",
            "tags": [],
            "label": "pit",
            "description": [
              "\nSearch against a specific Point In Time (PIT) that you've opened with {@link SavedObjectsClient.openPointInTimeForType}."
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsPitParams",
                "text": "SavedObjectsPitParams"
              },
              " | undefined"
            ],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsFindOptionsReference",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsFindOptionsReference",
        "description": [],
        "path": "src/core/server/saved_objects/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptionsReference.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsFindOptionsReference.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/core/server/saved_objects/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportActionRequiredWarning",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportActionRequiredWarning",
        "description": [
          "\nA warning meant to notify that a specific user action is required to finalize the import\nof some type of object.\n"
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportActionRequiredWarning.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"action_required\""
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportActionRequiredWarning.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [
              "The translated message to display to the user."
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportActionRequiredWarning.actionPath",
            "type": "string",
            "tags": [],
            "label": "actionPath",
            "description": [
              "The path (without the basePath) that the user should be redirect to address this warning."
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportActionRequiredWarning.buttonLabel",
            "type": "string",
            "tags": [],
            "label": "buttonLabel",
            "description": [
              "An optional label to use for the link button. If unspecified, a default label will be used."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportAmbiguousConflictError",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportAmbiguousConflictError",
        "description": [
          "\nRepresents a failure to import due to a conflict, which can be resolved in different ways with an overwrite."
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportAmbiguousConflictError.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"ambiguous_conflict\""
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportAmbiguousConflictError.destinations",
            "type": "Array",
            "tags": [],
            "label": "destinations",
            "description": [],
            "signature": [
              "{ id: string; title?: string | undefined; updatedAt?: string | undefined; }[]"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportConflictError",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportConflictError",
        "description": [
          "\nRepresents a failure to import due to a conflict."
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportConflictError.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"conflict\""
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportConflictError.destinationId",
            "type": "string",
            "tags": [],
            "label": "destinationId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportFailure",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportFailure",
        "description": [
          "\nRepresents a failure to import."
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportFailure.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportFailure.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportFailure.title",
            "type": "string",
            "tags": [
              "deprecated"
            ],
            "label": "title",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": true,
            "references": []
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportFailure.meta",
            "type": "Object",
            "tags": [],
            "label": "meta",
            "description": [],
            "signature": [
              "{ title?: string | undefined; icon?: string | undefined; }"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportFailure.overwrite",
            "type": "CompoundType",
            "tags": [],
            "label": "overwrite",
            "description": [
              "\nIf `overwrite` is specified, an attempt was made to overwrite an existing object."
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportFailure.error",
            "type": "CompoundType",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsImportConflictError",
                "text": "SavedObjectsImportConflictError"
              },
              " | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsImportAmbiguousConflictError",
                "text": "SavedObjectsImportAmbiguousConflictError"
              },
              " | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsImportUnsupportedTypeError",
                "text": "SavedObjectsImportUnsupportedTypeError"
              },
              " | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsImportMissingReferencesError",
                "text": "SavedObjectsImportMissingReferencesError"
              },
              " | ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsImportUnknownError",
                "text": "SavedObjectsImportUnknownError"
              }
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportMissingReferencesError",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportMissingReferencesError",
        "description": [
          "\nRepresents a failure to import due to missing references."
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportMissingReferencesError.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"missing_references\""
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportMissingReferencesError.references",
            "type": "Array",
            "tags": [],
            "label": "references",
            "description": [],
            "signature": [
              "{ type: string; id: string; }[]"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportResponse",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportResponse",
        "description": [
          "\nThe response describing the result of an import."
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportResponse.success",
            "type": "boolean",
            "tags": [],
            "label": "success",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportResponse.successCount",
            "type": "number",
            "tags": [],
            "label": "successCount",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportResponse.successResults",
            "type": "Array",
            "tags": [],
            "label": "successResults",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsImportSuccess",
                "text": "SavedObjectsImportSuccess"
              },
              "[] | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportResponse.warnings",
            "type": "Array",
            "tags": [],
            "label": "warnings",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsImportWarning",
                "text": "SavedObjectsImportWarning"
              },
              "[]"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportResponse.errors",
            "type": "Array",
            "tags": [],
            "label": "errors",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsImportFailure",
                "text": "SavedObjectsImportFailure"
              },
              "[] | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportRetry",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportRetry",
        "description": [
          "\nDescribes a retry operation for importing a saved object."
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportRetry.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportRetry.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportRetry.overwrite",
            "type": "boolean",
            "tags": [],
            "label": "overwrite",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportRetry.destinationId",
            "type": "string",
            "tags": [],
            "label": "destinationId",
            "description": [
              "\nThe object ID that will be created or overwritten. If not specified, the `id` field will be used."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportRetry.replaceReferences",
            "type": "Array",
            "tags": [],
            "label": "replaceReferences",
            "description": [],
            "signature": [
              "{ type: string; from: string; to: string; }[]"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportRetry.createNewCopy",
            "type": "CompoundType",
            "tags": [],
            "label": "createNewCopy",
            "description": [
              "\nIf `createNewCopy` is specified, the new object has a new (undefined) origin ID. This is only needed for the case where\n`createNewCopies` mode is disabled and ambiguous source conflicts are detected."
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportRetry.ignoreMissingReferences",
            "type": "CompoundType",
            "tags": [],
            "label": "ignoreMissingReferences",
            "description": [
              "\nIf `ignoreMissingReferences` is specified, reference validation will be skipped for this object."
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportSimpleWarning",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportSimpleWarning",
        "description": [
          "\nA simple informative warning that will be displayed to the user.\n"
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportSimpleWarning.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"simple\""
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportSimpleWarning.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [
              "The translated message to display to the user"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportSuccess",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportSuccess",
        "description": [
          "\nRepresents a successful import."
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportSuccess.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportSuccess.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportSuccess.destinationId",
            "type": "string",
            "tags": [],
            "label": "destinationId",
            "description": [
              "\nIf `destinationId` is specified, the new object has a new ID that is different from the import ID."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportSuccess.createNewCopy",
            "type": "CompoundType",
            "tags": [
              "deprecated"
            ],
            "label": "createNewCopy",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": true,
            "references": [
              {
                "plugin": "spaces",
                "path": "x-pack/plugins/spaces/public/copy_saved_objects_to_space/components/copy_to_space_flyout_internal.tsx"
              },
              {
                "plugin": "savedObjectsManagement",
                "path": "src/plugins/saved_objects_management/public/lib/resolve_import_errors.ts"
              }
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportSuccess.meta",
            "type": "Object",
            "tags": [],
            "label": "meta",
            "description": [],
            "signature": [
              "{ title?: string | undefined; icon?: string | undefined; }"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportSuccess.overwrite",
            "type": "CompoundType",
            "tags": [],
            "label": "overwrite",
            "description": [
              "\nIf `overwrite` is specified, this object overwrote an existing one (or will do so, in the case of a pending resolution)."
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportUnknownError",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportUnknownError",
        "description": [
          "\nRepresents a failure to import due to an unknown reason."
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportUnknownError.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"unknown\""
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportUnknownError.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportUnknownError.statusCode",
            "type": "number",
            "tags": [],
            "label": "statusCode",
            "description": [],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportUnsupportedTypeError",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsImportUnsupportedTypeError",
        "description": [
          "\nRepresents a failure to import due to having an unsupported saved object type."
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsImportUnsupportedTypeError.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"unsupported_type\""
            ],
            "path": "src/core/server/saved_objects/import/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsMigrationVersion",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsMigrationVersion",
        "description": [
          "\nInformation about the migrations that have been applied to this SavedObject.\nWhen Kibana starts up, KibanaMigrator detects outdated documents and\nmigrates them based on this value. For each migration that has been applied,\nthe plugin's name is used as a key and the latest migration version as the\nvalue.\n"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsMigrationVersion.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsResolveResponse",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsResolveResponse",
        "description": [
          "\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreSavedObjectsPluginApi",
            "section": "def-server.SavedObjectsResolveResponse",
            "text": "SavedObjectsResolveResponse"
          },
          "<T>"
        ],
        "path": "src/core/server/saved_objects/service/saved_objects_client.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsResolveResponse.saved_object",
            "type": "Object",
            "tags": [],
            "label": "saved_object",
            "description": [
              "\nThe saved object that was found."
            ],
            "signature": [
              "SavedObject",
              "<T>"
            ],
            "path": "src/core/server/saved_objects/service/saved_objects_client.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsResolveResponse.outcome",
            "type": "CompoundType",
            "tags": [],
            "label": "outcome",
            "description": [
              "\nThe outcome for a successful `resolve` call is one of the following values:\n\n * `'exactMatch'` -- One document exactly matched the given ID.\n * `'aliasMatch'` -- One document with a legacy URL alias matched the given ID; in this case the `saved_object.id` field is different\n   than the given ID.\n * `'conflict'` -- Two documents matched the given ID, one was an exact match and another with a legacy URL alias; in this case the\n   `saved_object` object is the exact match, and the `saved_object.id` field is the same as the given ID."
            ],
            "signature": [
              "\"conflict\" | \"aliasMatch\" | \"exactMatch\""
            ],
            "path": "src/core/server/saved_objects/service/saved_objects_client.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.SavedObjectsResolveResponse.alias_target_id",
            "type": "string",
            "tags": [],
            "label": "alias_target_id",
            "description": [
              "\nThe ID of the object that the legacy URL alias points to. This is only defined when the outcome is `'aliasMatch'` or `'conflict'`."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/saved_objects/service/saved_objects_client.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.ThemeServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "ThemeServiceSetup",
        "description": [],
        "path": "src/core/public/theme/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.ThemeServiceSetup.theme$",
            "type": "Object",
            "tags": [],
            "label": "theme$",
            "description": [],
            "signature": [
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreTheme",
                "text": "CoreTheme"
              },
              ">"
            ],
            "path": "src/core/public/theme/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.ThemeServiceStart",
        "type": "Interface",
        "tags": [],
        "label": "ThemeServiceStart",
        "description": [],
        "path": "src/core/public/theme/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.ThemeServiceStart.theme$",
            "type": "Object",
            "tags": [],
            "label": "theme$",
            "description": [],
            "signature": [
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreTheme",
                "text": "CoreTheme"
              },
              ">"
            ],
            "path": "src/core/public/theme/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.ToastOptions",
        "type": "Interface",
        "tags": [],
        "label": "ToastOptions",
        "description": [
          "\nOptions available for {@link IToasts} APIs."
        ],
        "path": "src/core/public/notifications/toasts/toasts_api.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.ToastOptions.toastLifeTimeMs",
            "type": "number",
            "tags": [],
            "label": "toastLifeTimeMs",
            "description": [
              "\nHow long should the toast remain on screen."
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/core/public/notifications/toasts/toasts_api.tsx",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.UiSettingsParams",
        "type": "Interface",
        "tags": [],
        "label": "UiSettingsParams",
        "description": [
          "\nUiSettings parameters defined by the plugins."
        ],
        "signature": [
          "UiSettingsParams",
          "<T>"
        ],
        "path": "src/core/types/ui_settings.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "title in the UI"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.value",
            "type": "Uncategorized",
            "tags": [],
            "label": "value",
            "description": [
              "default value to fall back to if a user doesn't provide any"
            ],
            "signature": [
              "T | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [
              "description provided to a user in UI"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.category",
            "type": "Array",
            "tags": [],
            "label": "category",
            "description": [
              "used to group the configured setting in the UI"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.options",
            "type": "Array",
            "tags": [],
            "label": "options",
            "description": [
              "array of permitted values for this setting"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.optionLabels",
            "type": "Object",
            "tags": [],
            "label": "optionLabels",
            "description": [
              "text labels for 'select' type UI element"
            ],
            "signature": [
              "Record<string, string> | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.requiresPageReload",
            "type": "CompoundType",
            "tags": [],
            "label": "requiresPageReload",
            "description": [
              "a flag indicating whether new value applying requires page reloading"
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.readonly",
            "type": "CompoundType",
            "tags": [],
            "label": "readonly",
            "description": [
              "a flag indicating that value cannot be changed"
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.sensitive",
            "type": "CompoundType",
            "tags": [],
            "label": "sensitive",
            "description": [
              "\na flag indicating that value might contain user sensitive data.\nused by telemetry to mask the value of the setting when sent."
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [
              "defines a type of UI element {@link UiSettingsType}"
            ],
            "signature": [
              "\"string\" | \"number\" | \"boolean\" | \"undefined\" | \"json\" | \"color\" | \"image\" | \"markdown\" | \"select\" | \"array\" | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.deprecation",
            "type": "Object",
            "tags": [],
            "label": "deprecation",
            "description": [
              "optional deprecation information. Used to generate a deprecation warning."
            ],
            "signature": [
              "DeprecationSettings",
              " | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.order",
            "type": "number",
            "tags": [],
            "label": "order",
            "description": [
              "\nindex of the settings within its category (ascending order, smallest will be displayed first).\nUsed for ordering in the UI.\n"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.schema",
            "type": "Object",
            "tags": [],
            "label": "schema",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/config-schema",
                "scope": "server",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-server.Type",
                "text": "Type"
              },
              "<T>"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsParams.metric",
            "type": "Object",
            "tags": [
              "deprecated"
            ],
            "label": "metric",
            "description": [
              "\nMetric to track once this property changes"
            ],
            "signature": [
              "{ type: ",
              {
                "pluginId": "@kbn/analytics",
                "scope": "common",
                "docId": "kibKbnAnalyticsPluginApi",
                "section": "def-common.UiCounterMetricType",
                "text": "UiCounterMetricType"
              },
              "; name: string; } | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": true,
            "references": [
              {
                "plugin": "advancedSettings",
                "path": "src/plugins/advanced_settings/public/management_app/lib/to_editable_config.ts"
              },
              {
                "plugin": "discover",
                "path": "src/plugins/discover/server/ui_settings.ts"
              },
              {
                "plugin": "discover",
                "path": "src/plugins/discover/server/ui_settings.ts"
              },
              {
                "plugin": "discover",
                "path": "src/plugins/discover/server/ui_settings.ts"
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.UiSettingsState",
        "type": "Interface",
        "tags": [],
        "label": "UiSettingsState",
        "description": [],
        "path": "src/core/public/ui_settings/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.UiSettingsState.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/core/public/ui_settings/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.UserProvidedValues",
        "type": "Interface",
        "tags": [],
        "label": "UserProvidedValues",
        "description": [
          "\nDescribes the values explicitly set by user."
        ],
        "signature": [
          "UserProvidedValues",
          "<T>"
        ],
        "path": "src/core/types/ui_settings.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.UserProvidedValues.userValue",
            "type": "Uncategorized",
            "tags": [],
            "label": "userValue",
            "description": [],
            "signature": [
              "T | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-public.UserProvidedValues.isOverridden",
            "type": "CompoundType",
            "tags": [],
            "label": "isOverridden",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "core",
        "id": "def-public.APP_WRAPPER_CLASS",
        "type": "string",
        "tags": [],
        "label": "APP_WRAPPER_CLASS",
        "description": [
          "\nThe class name for top level *and* nested application wrappers to ensure proper layout"
        ],
        "signature": [
          "\"kbnAppWrapper\""
        ],
        "path": "src/core/utils/app_wrapper_class.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.FatalErrorsStart",
        "type": "Type",
        "tags": [],
        "label": "FatalErrorsStart",
        "description": [
          "\nFatalErrors stop the Kibana Public Core and displays a fatal error screen\nwith details about the Kibana build and the error.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.FatalErrorsSetup",
            "text": "FatalErrorsSetup"
          }
        ],
        "path": "src/core/public/fatal_errors/fatal_errors_service.tsx",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.IToasts",
        "type": "Type",
        "tags": [],
        "label": "IToasts",
        "description": [
          "\nMethods for adding and removing global toast messages. See {@link ToastsApi}."
        ],
        "signature": [
          "{ add: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ") => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; get$: () => ",
          "Observable",
          "<",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "[]>; remove: (toastOrId: string | ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          ") => void; addSuccess: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addWarning: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addDanger: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addError: (error: Error, options: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ErrorToastOptions",
            "text": "ErrorToastOptions"
          },
          ") => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addInfo: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; }"
        ],
        "path": "src/core/public/notifications/toasts/toasts_api.tsx",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.KibanaExecutionContext",
        "type": "Type",
        "tags": [],
        "label": "KibanaExecutionContext",
        "description": [],
        "signature": [
          "{ readonly type: string; readonly name: string; readonly id: string; readonly description: string; readonly url?: string | undefined; parent?: ",
          "KibanaExecutionContext",
          " | undefined; }"
        ],
        "path": "src/core/types/execution_context.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.MountPoint",
        "type": "Type",
        "tags": [],
        "label": "MountPoint",
        "description": [
          "\nA function that should mount DOM content inside the provided container element\nand return a handler to unmount it.\n"
        ],
        "signature": [
          "(element: T) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.UnmountCallback",
            "text": "UnmountCallback"
          }
        ],
        "path": "src/core/public/types.ts",
        "deprecated": false,
        "returnComment": [
          "a {@link UnmountCallback} that unmount the element on call."
        ],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.MountPoint.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "element",
            "description": [
              "the container element to render into"
            ],
            "signature": [
              "T"
            ],
            "path": "src/core/public/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.PluginInitializer",
        "type": "Type",
        "tags": [],
        "label": "PluginInitializer",
        "description": [
          "\nThe `plugin` export at the root of a plugin's `public` directory should conform\nto this interface.\n"
        ],
        "signature": [
          "(core: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.PluginInitializerContext",
            "text": "PluginInitializerContext"
          },
          "<object>) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Plugin",
            "text": "Plugin"
          },
          "<TSetup, TStart, TPluginsSetup, TPluginsStart> | ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.AsyncPlugin",
            "text": "AsyncPlugin"
          },
          "<TSetup, TStart, TPluginsSetup, TPluginsStart>"
        ],
        "path": "src/core/public/plugins/plugin.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-public.PluginInitializer.$1",
            "type": "Object",
            "tags": [],
            "label": "core",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.PluginInitializerContext",
                "text": "PluginInitializerContext"
              },
              "<object>"
            ],
            "path": "src/core/public/plugins/plugin.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.PluginOpaqueId",
        "type": "Type",
        "tags": [],
        "label": "PluginOpaqueId",
        "description": [],
        "signature": [
          "symbol"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.PublicUiSettingsParams",
        "type": "Type",
        "tags": [],
        "label": "PublicUiSettingsParams",
        "description": [
          "\nA sub-set of {@link UiSettingsParams} exposed to the client-side."
        ],
        "signature": [
          "{ name?: string | undefined; type?: \"string\" | \"number\" | \"boolean\" | \"undefined\" | \"json\" | \"color\" | \"image\" | \"markdown\" | \"select\" | \"array\" | undefined; description?: string | undefined; options?: string[] | undefined; order?: number | undefined; value?: unknown; category?: string[] | undefined; optionLabels?: Record<string, string> | undefined; requiresPageReload?: boolean | undefined; readonly?: boolean | undefined; sensitive?: boolean | undefined; deprecation?: ",
          "DeprecationSettings",
          " | undefined; metric?: { type: ",
          {
            "pluginId": "@kbn/analytics",
            "scope": "common",
            "docId": "kibKbnAnalyticsPluginApi",
            "section": "def-common.UiCounterMetricType",
            "text": "UiCounterMetricType"
          },
          "; name: string; } | undefined; }"
        ],
        "path": "src/core/types/ui_settings.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.ResolveDeprecationResponse",
        "type": "Type",
        "tags": [],
        "label": "ResolveDeprecationResponse",
        "description": [],
        "signature": [
          "{ status: \"ok\"; } | { status: \"fail\"; reason: string; }"
        ],
        "path": "src/core/public/deprecations/deprecations_client.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectAttribute",
        "type": "Type",
        "tags": [],
        "label": "SavedObjectAttribute",
        "description": [
          "\nType definition for a Saved Object attribute value\n"
        ],
        "signature": [
          "string | number | boolean | ",
          "SavedObjectAttributes",
          " | ",
          "SavedObjectAttributeSingle",
          "[] | null | undefined"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectAttributeSingle",
        "type": "Type",
        "tags": [],
        "label": "SavedObjectAttributeSingle",
        "description": [
          "\nDon't use this type, it's simply a helper type for {@link SavedObjectAttribute}\n"
        ],
        "signature": [
          "string | number | boolean | ",
          "SavedObjectAttributes",
          " | null | undefined"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsImportWarning",
        "type": "Type",
        "tags": [],
        "label": "SavedObjectsImportWarning",
        "description": [
          "\nComposite type of all the possible types of import warnings.\n\nSee {@link SavedObjectsImportSimpleWarning} and {@link SavedObjectsImportActionRequiredWarning}\nfor more details.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreSavedObjectsPluginApi",
            "section": "def-server.SavedObjectsImportSimpleWarning",
            "text": "SavedObjectsImportSimpleWarning"
          },
          " | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreSavedObjectsPluginApi",
            "section": "def-server.SavedObjectsImportActionRequiredWarning",
            "text": "SavedObjectsImportActionRequiredWarning"
          }
        ],
        "path": "src/core/server/saved_objects/import/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.SavedObjectsNamespaceType",
        "type": "Type",
        "tags": [],
        "label": "SavedObjectsNamespaceType",
        "description": [
          "\nThe namespace type dictates how a saved object can be interacted in relation to namespaces. Each type is mutually exclusive:\n * single (default): This type of saved object is namespace-isolated, e.g., it exists in only one namespace.\n * multiple: This type of saved object is shareable, e.g., it can exist in one or more namespaces.\n * multiple-isolated: This type of saved object is namespace-isolated, e.g., it exists in only one namespace, but object IDs must be\n   unique across all namespaces. This is intended to be an intermediate step when objects with a \"single\" namespace type are being\n   converted to a \"multiple\" namespace type. In other words, objects with a \"multiple-isolated\" namespace type will be *share-capable*,\n   but will not actually be shareable until the namespace type is changed to \"multiple\".\n * agnostic: This type of saved object is global.\n"
        ],
        "signature": [
          "\"multiple\" | \"single\" | \"multiple-isolated\" | \"agnostic\""
        ],
        "path": "src/core/server/saved_objects/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.StartServicesAccessor",
        "type": "Type",
        "tags": [],
        "label": "StartServicesAccessor",
        "description": [
          "\nAllows plugins to get access to APIs available in start inside async\nhandlers, such as {@link App.mount}. Promise will not resolve until Core\nand plugin dependencies have completed `start`.\n"
        ],
        "signature": [
          "() => Promise<[",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.CoreStart",
            "text": "CoreStart"
          },
          ", TPluginsStart, TStart]>"
        ],
        "path": "src/core/public/index.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.Toast",
        "type": "Type",
        "tags": [],
        "label": "Toast",
        "description": [],
        "signature": [
          "Pick<",
          "Toast",
          ", \"onChange\" | \"defaultChecked\" | \"defaultValue\" | \"suppressContentEditableWarning\" | \"suppressHydrationWarning\" | \"accessKey\" | \"className\" | \"contentEditable\" | \"contextMenu\" | \"dir\" | \"draggable\" | \"hidden\" | \"lang\" | \"placeholder\" | \"slot\" | \"spellCheck\" | \"style\" | \"tabIndex\" | \"translate\" | \"radioGroup\" | \"role\" | \"about\" | \"datatype\" | \"inlist\" | \"prefix\" | \"property\" | \"resource\" | \"typeof\" | \"vocab\" | \"autoCapitalize\" | \"autoCorrect\" | \"autoSave\" | \"color\" | \"itemProp\" | \"itemScope\" | \"itemType\" | \"itemID\" | \"itemRef\" | \"results\" | \"security\" | \"unselectable\" | \"inputMode\" | \"is\" | \"aria-activedescendant\" | \"aria-atomic\" | \"aria-autocomplete\" | \"aria-busy\" | \"aria-checked\" | \"aria-colcount\" | \"aria-colindex\" | \"aria-colspan\" | \"aria-controls\" | \"aria-current\" | \"aria-describedby\" | \"aria-details\" | \"aria-disabled\" | \"aria-dropeffect\" | \"aria-errormessage\" | \"aria-expanded\" | \"aria-flowto\" | \"aria-grabbed\" | \"aria-haspopup\" | \"aria-hidden\" | \"aria-invalid\" | \"aria-keyshortcuts\" | \"aria-label\" | \"aria-labelledby\" | \"aria-level\" | \"aria-live\" | \"aria-modal\" | \"aria-multiline\" | \"aria-multiselectable\" | \"aria-orientation\" | \"aria-owns\" | \"aria-placeholder\" | \"aria-posinset\" | \"aria-pressed\" | \"aria-readonly\" | \"aria-relevant\" | \"aria-required\" | \"aria-roledescription\" | \"aria-rowcount\" | \"aria-rowindex\" | \"aria-rowspan\" | \"aria-selected\" | \"aria-setsize\" | \"aria-sort\" | \"aria-valuemax\" | \"aria-valuemin\" | \"aria-valuenow\" | \"aria-valuetext\" | \"children\" | \"dangerouslySetInnerHTML\" | \"onCopy\" | \"onCopyCapture\" | \"onCut\" | \"onCutCapture\" | \"onPaste\" | \"onPasteCapture\" | \"onCompositionEnd\" | \"onCompositionEndCapture\" | \"onCompositionStart\" | \"onCompositionStartCapture\" | \"onCompositionUpdate\" | \"onCompositionUpdateCapture\" | \"onFocus\" | \"onFocusCapture\" | \"onBlur\" | \"onBlurCapture\" | \"onChangeCapture\" | \"onBeforeInput\" | \"onBeforeInputCapture\" | \"onInput\" | \"onInputCapture\" | \"onReset\" | \"onResetCapture\" | \"onSubmit\" | \"onSubmitCapture\" | \"onInvalid\" | \"onInvalidCapture\" | \"onLoad\" | \"onLoadCapture\" | \"onError\" | \"onErrorCapture\" | \"onKeyDown\" | \"onKeyDownCapture\" | \"onKeyPress\" | \"onKeyPressCapture\" | \"onKeyUp\" | \"onKeyUpCapture\" | \"onAbort\" | \"onAbortCapture\" | \"onCanPlay\" | \"onCanPlayCapture\" | \"onCanPlayThrough\" | \"onCanPlayThroughCapture\" | \"onDurationChange\" | \"onDurationChangeCapture\" | \"onEmptied\" | \"onEmptiedCapture\" | \"onEncrypted\" | \"onEncryptedCapture\" | \"onEnded\" | \"onEndedCapture\" | \"onLoadedData\" | \"onLoadedDataCapture\" | \"onLoadedMetadata\" | \"onLoadedMetadataCapture\" | \"onLoadStart\" | \"onLoadStartCapture\" | \"onPause\" | \"onPauseCapture\" | \"onPlay\" | \"onPlayCapture\" | \"onPlaying\" | \"onPlayingCapture\" | \"onProgress\" | \"onProgressCapture\" | \"onRateChange\" | \"onRateChangeCapture\" | \"onSeeked\" | \"onSeekedCapture\" | \"onSeeking\" | \"onSeekingCapture\" | \"onStalled\" | \"onStalledCapture\" | \"onSuspend\" | \"onSuspendCapture\" | \"onTimeUpdate\" | \"onTimeUpdateCapture\" | \"onVolumeChange\" | \"onVolumeChangeCapture\" | \"onWaiting\" | \"onWaitingCapture\" | \"onAuxClick\" | \"onAuxClickCapture\" | \"onClick\" | \"onClickCapture\" | \"onContextMenu\" | \"onContextMenuCapture\" | \"onDoubleClick\" | \"onDoubleClickCapture\" | \"onDrag\" | \"onDragCapture\" | \"onDragEnd\" | \"onDragEndCapture\" | \"onDragEnter\" | \"onDragEnterCapture\" | \"onDragExit\" | \"onDragExitCapture\" | \"onDragLeave\" | \"onDragLeaveCapture\" | \"onDragOver\" | \"onDragOverCapture\" | \"onDragStart\" | \"onDragStartCapture\" | \"onDrop\" | \"onDropCapture\" | \"onMouseDown\" | \"onMouseDownCapture\" | \"onMouseEnter\" | \"onMouseLeave\" | \"onMouseMove\" | \"onMouseMoveCapture\" | \"onMouseOut\" | \"onMouseOutCapture\" | \"onMouseOver\" | \"onMouseOverCapture\" | \"onMouseUp\" | \"onMouseUpCapture\" | \"onSelect\" | \"onSelectCapture\" | \"onTouchCancel\" | \"onTouchCancelCapture\" | \"onTouchEnd\" | \"onTouchEndCapture\" | \"onTouchMove\" | \"onTouchMoveCapture\" | \"onTouchStart\" | \"onTouchStartCapture\" | \"onPointerDown\" | \"onPointerDownCapture\" | \"onPointerMove\" | \"onPointerMoveCapture\" | \"onPointerUp\" | \"onPointerUpCapture\" | \"onPointerCancel\" | \"onPointerCancelCapture\" | \"onPointerEnter\" | \"onPointerEnterCapture\" | \"onPointerLeave\" | \"onPointerLeaveCapture\" | \"onPointerOver\" | \"onPointerOverCapture\" | \"onPointerOut\" | \"onPointerOutCapture\" | \"onGotPointerCapture\" | \"onGotPointerCaptureCapture\" | \"onLostPointerCapture\" | \"onLostPointerCaptureCapture\" | \"onScroll\" | \"onScrollCapture\" | \"onWheel\" | \"onWheelCapture\" | \"onAnimationStart\" | \"onAnimationStartCapture\" | \"onAnimationEnd\" | \"onAnimationEndCapture\" | \"onAnimationIteration\" | \"onAnimationIterationCapture\" | \"onTransitionEnd\" | \"onTransitionEndCapture\" | \"data-test-subj\" | \"iconType\" | \"toastLifeTimeMs\" | \"onClose\"> & { title?: string | ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.MountPoint",
            "text": "MountPoint"
          },
          "<HTMLElement> | undefined; text?: string | ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.MountPoint",
            "text": "MountPoint"
          },
          "<HTMLElement> | undefined; } & { id: string; }"
        ],
        "path": "src/core/public/notifications/toasts/toasts_api.tsx",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.ToastInput",
        "type": "Type",
        "tags": [],
        "label": "ToastInput",
        "description": [
          "\nInputs for {@link IToasts} APIs."
        ],
        "signature": [
          "string | ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInputFields",
            "text": "ToastInputFields"
          }
        ],
        "path": "src/core/public/notifications/toasts/toasts_api.tsx",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.ToastInputFields",
        "type": "Type",
        "tags": [],
        "label": "ToastInputFields",
        "description": [
          "\nAllowed fields for {@link ToastInput}.\n"
        ],
        "signature": [
          "Pick<",
          "Toast",
          ", \"onChange\" | \"defaultChecked\" | \"defaultValue\" | \"suppressContentEditableWarning\" | \"suppressHydrationWarning\" | \"accessKey\" | \"className\" | \"contentEditable\" | \"contextMenu\" | \"dir\" | \"draggable\" | \"hidden\" | \"lang\" | \"placeholder\" | \"slot\" | \"spellCheck\" | \"style\" | \"tabIndex\" | \"translate\" | \"radioGroup\" | \"role\" | \"about\" | \"datatype\" | \"inlist\" | \"prefix\" | \"property\" | \"resource\" | \"typeof\" | \"vocab\" | \"autoCapitalize\" | \"autoCorrect\" | \"autoSave\" | \"color\" | \"itemProp\" | \"itemScope\" | \"itemType\" | \"itemID\" | \"itemRef\" | \"results\" | \"security\" | \"unselectable\" | \"inputMode\" | \"is\" | \"aria-activedescendant\" | \"aria-atomic\" | \"aria-autocomplete\" | \"aria-busy\" | \"aria-checked\" | \"aria-colcount\" | \"aria-colindex\" | \"aria-colspan\" | \"aria-controls\" | \"aria-current\" | \"aria-describedby\" | \"aria-details\" | \"aria-disabled\" | \"aria-dropeffect\" | \"aria-errormessage\" | \"aria-expanded\" | \"aria-flowto\" | \"aria-grabbed\" | \"aria-haspopup\" | \"aria-hidden\" | \"aria-invalid\" | \"aria-keyshortcuts\" | \"aria-label\" | \"aria-labelledby\" | \"aria-level\" | \"aria-live\" | \"aria-modal\" | \"aria-multiline\" | \"aria-multiselectable\" | \"aria-orientation\" | \"aria-owns\" | \"aria-placeholder\" | \"aria-posinset\" | \"aria-pressed\" | \"aria-readonly\" | \"aria-relevant\" | \"aria-required\" | \"aria-roledescription\" | \"aria-rowcount\" | \"aria-rowindex\" | \"aria-rowspan\" | \"aria-selected\" | \"aria-setsize\" | \"aria-sort\" | \"aria-valuemax\" | \"aria-valuemin\" | \"aria-valuenow\" | \"aria-valuetext\" | \"children\" | \"dangerouslySetInnerHTML\" | \"onCopy\" | \"onCopyCapture\" | \"onCut\" | \"onCutCapture\" | \"onPaste\" | \"onPasteCapture\" | \"onCompositionEnd\" | \"onCompositionEndCapture\" | \"onCompositionStart\" | \"onCompositionStartCapture\" | \"onCompositionUpdate\" | \"onCompositionUpdateCapture\" | \"onFocus\" | \"onFocusCapture\" | \"onBlur\" | \"onBlurCapture\" | \"onChangeCapture\" | \"onBeforeInput\" | \"onBeforeInputCapture\" | \"onInput\" | \"onInputCapture\" | \"onReset\" | \"onResetCapture\" | \"onSubmit\" | \"onSubmitCapture\" | \"onInvalid\" | \"onInvalidCapture\" | \"onLoad\" | \"onLoadCapture\" | \"onError\" | \"onErrorCapture\" | \"onKeyDown\" | \"onKeyDownCapture\" | \"onKeyPress\" | \"onKeyPressCapture\" | \"onKeyUp\" | \"onKeyUpCapture\" | \"onAbort\" | \"onAbortCapture\" | \"onCanPlay\" | \"onCanPlayCapture\" | \"onCanPlayThrough\" | \"onCanPlayThroughCapture\" | \"onDurationChange\" | \"onDurationChangeCapture\" | \"onEmptied\" | \"onEmptiedCapture\" | \"onEncrypted\" | \"onEncryptedCapture\" | \"onEnded\" | \"onEndedCapture\" | \"onLoadedData\" | \"onLoadedDataCapture\" | \"onLoadedMetadata\" | \"onLoadedMetadataCapture\" | \"onLoadStart\" | \"onLoadStartCapture\" | \"onPause\" | \"onPauseCapture\" | \"onPlay\" | \"onPlayCapture\" | \"onPlaying\" | \"onPlayingCapture\" | \"onProgress\" | \"onProgressCapture\" | \"onRateChange\" | \"onRateChangeCapture\" | \"onSeeked\" | \"onSeekedCapture\" | \"onSeeking\" | \"onSeekingCapture\" | \"onStalled\" | \"onStalledCapture\" | \"onSuspend\" | \"onSuspendCapture\" | \"onTimeUpdate\" | \"onTimeUpdateCapture\" | \"onVolumeChange\" | \"onVolumeChangeCapture\" | \"onWaiting\" | \"onWaitingCapture\" | \"onAuxClick\" | \"onAuxClickCapture\" | \"onClick\" | \"onClickCapture\" | \"onContextMenu\" | \"onContextMenuCapture\" | \"onDoubleClick\" | \"onDoubleClickCapture\" | \"onDrag\" | \"onDragCapture\" | \"onDragEnd\" | \"onDragEndCapture\" | \"onDragEnter\" | \"onDragEnterCapture\" | \"onDragExit\" | \"onDragExitCapture\" | \"onDragLeave\" | \"onDragLeaveCapture\" | \"onDragOver\" | \"onDragOverCapture\" | \"onDragStart\" | \"onDragStartCapture\" | \"onDrop\" | \"onDropCapture\" | \"onMouseDown\" | \"onMouseDownCapture\" | \"onMouseEnter\" | \"onMouseLeave\" | \"onMouseMove\" | \"onMouseMoveCapture\" | \"onMouseOut\" | \"onMouseOutCapture\" | \"onMouseOver\" | \"onMouseOverCapture\" | \"onMouseUp\" | \"onMouseUpCapture\" | \"onSelect\" | \"onSelectCapture\" | \"onTouchCancel\" | \"onTouchCancelCapture\" | \"onTouchEnd\" | \"onTouchEndCapture\" | \"onTouchMove\" | \"onTouchMoveCapture\" | \"onTouchStart\" | \"onTouchStartCapture\" | \"onPointerDown\" | \"onPointerDownCapture\" | \"onPointerMove\" | \"onPointerMoveCapture\" | \"onPointerUp\" | \"onPointerUpCapture\" | \"onPointerCancel\" | \"onPointerCancelCapture\" | \"onPointerEnter\" | \"onPointerEnterCapture\" | \"onPointerLeave\" | \"onPointerLeaveCapture\" | \"onPointerOver\" | \"onPointerOverCapture\" | \"onPointerOut\" | \"onPointerOutCapture\" | \"onGotPointerCapture\" | \"onGotPointerCaptureCapture\" | \"onLostPointerCapture\" | \"onLostPointerCaptureCapture\" | \"onScroll\" | \"onScrollCapture\" | \"onWheel\" | \"onWheelCapture\" | \"onAnimationStart\" | \"onAnimationStartCapture\" | \"onAnimationEnd\" | \"onAnimationEndCapture\" | \"onAnimationIteration\" | \"onAnimationIterationCapture\" | \"onTransitionEnd\" | \"onTransitionEndCapture\" | \"data-test-subj\" | \"iconType\" | \"toastLifeTimeMs\" | \"onClose\"> & { title?: string | ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.MountPoint",
            "text": "MountPoint"
          },
          "<HTMLElement> | undefined; text?: string | ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.MountPoint",
            "text": "MountPoint"
          },
          "<HTMLElement> | undefined; }"
        ],
        "path": "src/core/public/notifications/toasts/toasts_api.tsx",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.ToastsSetup",
        "type": "Type",
        "tags": [],
        "label": "ToastsSetup",
        "description": [
          "\n{@link IToasts}"
        ],
        "signature": [
          "{ add: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ") => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; get$: () => ",
          "Observable",
          "<",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "[]>; remove: (toastOrId: string | ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          ") => void; addSuccess: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addWarning: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addDanger: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addError: (error: Error, options: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ErrorToastOptions",
            "text": "ErrorToastOptions"
          },
          ") => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addInfo: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; }"
        ],
        "path": "src/core/public/notifications/toasts/toasts_service.tsx",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.ToastsStart",
        "type": "Type",
        "tags": [],
        "label": "ToastsStart",
        "description": [
          "\n{@link IToasts}"
        ],
        "signature": [
          "{ add: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ") => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; get$: () => ",
          "Observable",
          "<",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "[]>; remove: (toastOrId: string | ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          ") => void; addSuccess: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addWarning: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addDanger: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addError: (error: Error, options: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ErrorToastOptions",
            "text": "ErrorToastOptions"
          },
          ") => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; addInfo: (toastOrTitle: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastInput",
            "text": "ToastInput"
          },
          ", options?: ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.ToastOptions",
            "text": "ToastOptions"
          },
          " | undefined) => ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Toast",
            "text": "Toast"
          },
          "; }"
        ],
        "path": "src/core/public/notifications/toasts/toasts_service.tsx",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.UiSettingsType",
        "type": "Type",
        "tags": [],
        "label": "UiSettingsType",
        "description": [
          "\nUI element type to represent the settings."
        ],
        "signature": [
          "\"string\" | \"number\" | \"boolean\" | \"undefined\" | \"json\" | \"color\" | \"image\" | \"markdown\" | \"select\" | \"array\""
        ],
        "path": "src/core/types/ui_settings.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.UnmountCallback",
        "type": "Type",
        "tags": [],
        "label": "UnmountCallback",
        "description": [
          "\nA function that will unmount the element previously mounted by\nthe associated {@link MountPoint}\n"
        ],
        "signature": [
          "() => void"
        ],
        "path": "src/core/public/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-public.URL_MAX_LENGTH",
        "type": "CompoundType",
        "tags": [],
        "label": "URL_MAX_LENGTH",
        "description": [
          "\nThe max URL length allowed by the current browser. Should be used to display warnings to users when query parameters\ncause URL to exceed this limit."
        ],
        "signature": [
          "2000 | 25000"
        ],
        "path": "src/core/public/core_app/errors/url_overflow.tsx",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "core",
        "id": "def-server.CspConfig",
        "type": "Class",
        "tags": [],
        "label": "CspConfig",
        "description": [
          "\nCSP configuration for use in Kibana."
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.CspConfig",
            "text": "CspConfig"
          },
          " implements ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.ICspConfig",
            "text": "ICspConfig"
          }
        ],
        "path": "src/core/server/csp/csp_config.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.CspConfig.DEFAULT",
            "type": "Object",
            "tags": [],
            "label": "DEFAULT",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CspConfig",
                "text": "CspConfig"
              }
            ],
            "path": "src/core/server/csp/csp_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CspConfig.directives",
            "type": "Object",
            "tags": [],
            "label": "#directives",
            "description": [],
            "signature": [
              "CspDirectives"
            ],
            "path": "src/core/server/csp/csp_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CspConfig.strict",
            "type": "boolean",
            "tags": [],
            "label": "strict",
            "description": [],
            "path": "src/core/server/csp/csp_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CspConfig.warnLegacyBrowsers",
            "type": "boolean",
            "tags": [],
            "label": "warnLegacyBrowsers",
            "description": [],
            "path": "src/core/server/csp/csp_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CspConfig.disableEmbedding",
            "type": "boolean",
            "tags": [],
            "label": "disableEmbedding",
            "description": [],
            "path": "src/core/server/csp/csp_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CspConfig.header",
            "type": "string",
            "tags": [],
            "label": "header",
            "description": [],
            "path": "src/core/server/csp/csp_config.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ElasticsearchConfig",
        "type": "Class",
        "tags": [],
        "label": "ElasticsearchConfig",
        "description": [
          "\nWrapper of config schema."
        ],
        "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.healthCheckDelay",
            "type": "Object",
            "tags": [],
            "label": "healthCheckDelay",
            "description": [
              "\nThe interval between health check requests Kibana sends to the Elasticsearch."
            ],
            "signature": [
              "moment.Duration"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.ignoreVersionMismatch",
            "type": "boolean",
            "tags": [],
            "label": "ignoreVersionMismatch",
            "description": [
              "\nWhether to allow kibana to connect to a non-compatible elasticsearch node."
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.apiVersion",
            "type": "string",
            "tags": [],
            "label": "apiVersion",
            "description": [
              "\nVersion of the Elasticsearch (6.7, 7.1 or `master`) client will be connecting to."
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.hosts",
            "type": "Array",
            "tags": [],
            "label": "hosts",
            "description": [
              "\nHosts that the client will connect to. If sniffing is enabled, this list will\nbe used as seeds to discover the rest of your cluster."
            ],
            "signature": [
              "string[]"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.requestHeadersWhitelist",
            "type": "Array",
            "tags": [],
            "label": "requestHeadersWhitelist",
            "description": [
              "\nList of Kibana client-side headers to send to Elasticsearch when request\nscoped cluster client is used. If this is an empty array then *no* client-side\nwill be sent."
            ],
            "signature": [
              "string[]"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.pingTimeout",
            "type": "Object",
            "tags": [],
            "label": "pingTimeout",
            "description": [
              "\nTimeout after which PING HTTP request will be aborted and retried."
            ],
            "signature": [
              "moment.Duration"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.requestTimeout",
            "type": "Object",
            "tags": [],
            "label": "requestTimeout",
            "description": [
              "\nTimeout after which HTTP request will be aborted and retried."
            ],
            "signature": [
              "moment.Duration"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.shardTimeout",
            "type": "Object",
            "tags": [],
            "label": "shardTimeout",
            "description": [
              "\nTimeout for Elasticsearch to wait for responses from shards. Set to 0 to disable."
            ],
            "signature": [
              "moment.Duration"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.sniffOnStart",
            "type": "boolean",
            "tags": [],
            "label": "sniffOnStart",
            "description": [
              "\nSpecifies whether the client should attempt to detect the rest of the cluster\nwhen it is first instantiated."
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.sniffInterval",
            "type": "CompoundType",
            "tags": [],
            "label": "sniffInterval",
            "description": [
              "\nInterval to perform a sniff operation and make sure the list of nodes is complete.\nIf `false` then sniffing is disabled."
            ],
            "signature": [
              "false | moment.Duration"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.sniffOnConnectionFault",
            "type": "boolean",
            "tags": [],
            "label": "sniffOnConnectionFault",
            "description": [
              "\nSpecifies whether the client should immediately sniff for a more current list\nof nodes when a connection dies."
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.username",
            "type": "string",
            "tags": [],
            "label": "username",
            "description": [
              "\nIf Elasticsearch is protected with basic authentication, this setting provides\nthe username that the Kibana server uses to perform its administrative functions.\nCannot be used in conjunction with serviceAccountToken."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.password",
            "type": "string",
            "tags": [],
            "label": "password",
            "description": [
              "\nIf Elasticsearch is protected with basic authentication, this setting provides\nthe password that the Kibana server uses to perform its administrative functions."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.serviceAccountToken",
            "type": "string",
            "tags": [],
            "label": "serviceAccountToken",
            "description": [
              "\nIf Elasticsearch security features are enabled, this setting provides the service account\ntoken that the Kibana server users to perform its administrative functions.\n\nThis is an alternative to specifying a username and password."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.ssl",
            "type": "CompoundType",
            "tags": [],
            "label": "ssl",
            "description": [
              "\nSet of settings configure SSL connection between Kibana and Elasticsearch that\nare required when `xpack.ssl.verification_mode` in Elasticsearch is set to\neither `certificate` or `full`."
            ],
            "signature": [
              "Pick<Readonly<{ key?: string | undefined; certificate?: string | undefined; certificateAuthorities?: string | string[] | undefined; keyPassphrase?: string | undefined; } & { verificationMode: \"none\" | \"certificate\" | \"full\"; keystore: Readonly<{ path?: string | undefined; password?: string | undefined; } & {}>; truststore: Readonly<{ path?: string | undefined; password?: string | undefined; } & {}>; alwaysPresentCertificate: boolean; }>, \"key\" | \"certificate\" | \"verificationMode\" | \"keyPassphrase\" | \"alwaysPresentCertificate\"> & { certificateAuthorities?: string[] | undefined; }"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.customHeaders",
            "type": "Object",
            "tags": [],
            "label": "customHeaders",
            "description": [
              "\nHeader names and values to send to Elasticsearch with every request. These\nheaders cannot be overwritten by client-side headers and aren't affected by\n`requestHeadersWhitelist` configuration."
            ],
            "signature": [
              "{ [x: string]: string; }"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfig.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ElasticsearchConfig.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "rawConfig",
                "description": [],
                "signature": [
                  "Readonly<{ username?: string | undefined; password?: string | undefined; serviceAccountToken?: string | undefined; } & { ssl: Readonly<{ key?: string | undefined; certificate?: string | undefined; certificateAuthorities?: string | string[] | undefined; keyPassphrase?: string | undefined; } & { verificationMode: \"none\" | \"certificate\" | \"full\"; keystore: Readonly<{ path?: string | undefined; password?: string | undefined; } & {}>; truststore: Readonly<{ path?: string | undefined; password?: string | undefined; } & {}>; alwaysPresentCertificate: boolean; }>; hosts: string | string[]; requestTimeout: moment.Duration; sniffOnStart: boolean; sniffInterval: false | moment.Duration; sniffOnConnectionFault: boolean; requestHeadersWhitelist: string | string[]; customHeaders: Record<string, string>; shardTimeout: moment.Duration; pingTimeout: moment.Duration; logQueries: boolean; apiVersion: string; healthCheck: Readonly<{} & { delay: moment.Duration; }>; ignoreVersionMismatch: boolean; skipStartupConnectionCheck: boolean; }>"
                ],
                "path": "src/core/server/elasticsearch/elasticsearch_config.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.EventLoopDelaysMonitor",
        "type": "Class",
        "tags": [],
        "label": "EventLoopDelaysMonitor",
        "description": [],
        "path": "src/core/server/metrics/event_loop_delays/event_loop_delays_monitor.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.EventLoopDelaysMonitor.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [
              "\nCreating a new instance from EventLoopDelaysMonitor will\nautomatically start tracking event loop delays."
            ],
            "signature": [
              "any"
            ],
            "path": "src/core/server/metrics/event_loop_delays/event_loop_delays_monitor.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.EventLoopDelaysMonitor.collect",
            "type": "Function",
            "tags": [],
            "label": "collect",
            "description": [
              "\nCollect gathers event loop delays metrics from nodejs perf_hooks.monitorEventLoopDelay\nthe histogram calculations start from the last time `reset` was called or this\nEventLoopDelaysMonitor instance was created.\n\nReturns metrics in milliseconds."
            ],
            "signature": [
              "() => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IntervalHistogram",
                "text": "IntervalHistogram"
              }
            ],
            "path": "src/core/server/metrics/event_loop_delays/event_loop_delays_monitor.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.EventLoopDelaysMonitor.reset",
            "type": "Function",
            "tags": [],
            "label": "reset",
            "description": [
              "\nResets the collected histogram data."
            ],
            "signature": [
              "() => void"
            ],
            "path": "src/core/server/metrics/event_loop_delays/event_loop_delays_monitor.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.EventLoopDelaysMonitor.stop",
            "type": "Function",
            "tags": [],
            "label": "stop",
            "description": [
              "\nDisables updating the interval timer for collecting new data points."
            ],
            "signature": [
              "() => void"
            ],
            "path": "src/core/server/metrics/event_loop_delays/event_loop_delays_monitor.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "core",
        "id": "def-server.AppCategory",
        "type": "Interface",
        "tags": [],
        "label": "AppCategory",
        "description": [
          "\n\nA category definition for nav links to know where to sort them in the left hand nav"
        ],
        "path": "src/core/types/app_category.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.AppCategory.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nUnique identifier for the categories"
            ],
            "path": "src/core/types/app_category.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.AppCategory.label",
            "type": "string",
            "tags": [],
            "label": "label",
            "description": [
              "\nLabel used for category name.\nAlso used as aria-label if one isn't set."
            ],
            "path": "src/core/types/app_category.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.AppCategory.ariaLabel",
            "type": "string",
            "tags": [],
            "label": "ariaLabel",
            "description": [
              "\nIf the visual label isn't appropriate for screen readers,\ncan override it here"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/app_category.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.AppCategory.order",
            "type": "number",
            "tags": [],
            "label": "order",
            "description": [
              "\nThe order that categories will be sorted in\nPrefer large steps between categories to allow for further editing\n(Default categories are in steps of 1000)"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/core/types/app_category.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.AppCategory.euiIconType",
            "type": "string",
            "tags": [],
            "label": "euiIconType",
            "description": [
              "\nDefine an icon to be used for the category\nIf the category is only 1 item, and no icon is defined, will default to the product icon\nDefaults to initials if no icon is defined"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/app_category.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.AsyncPlugin",
        "type": "Interface",
        "tags": [
          "deprecated"
        ],
        "label": "AsyncPlugin",
        "description": [
          "\nA plugin with asynchronous lifecycle methods.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.AsyncPlugin",
            "text": "AsyncPlugin"
          },
          "<TSetup, TStart, TPluginsSetup, TPluginsStart>"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": true,
        "references": [
          {
            "plugin": "fleet",
            "path": "x-pack/plugins/fleet/server/plugin.ts"
          },
          {
            "plugin": "fleet",
            "path": "x-pack/plugins/fleet/server/plugin.ts"
          },
          {
            "plugin": "fleet",
            "path": "x-pack/plugins/fleet/target/types/server/plugin.d.ts"
          },
          {
            "plugin": "fleet",
            "path": "x-pack/plugins/fleet/target/types/server/plugin.d.ts"
          }
        ],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.AsyncPlugin.setup",
            "type": "Function",
            "tags": [],
            "label": "setup",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CoreSetup",
                "text": "CoreSetup"
              },
              "<object, unknown>, plugins: TPluginsSetup) => TSetup | Promise<TSetup>"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.AsyncPlugin.setup.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CoreSetup",
                    "text": "CoreSetup"
                  },
                  "<object, unknown>"
                ],
                "path": "src/core/server/plugins/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.AsyncPlugin.setup.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsSetup"
                ],
                "path": "src/core/server/plugins/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.AsyncPlugin.start",
            "type": "Function",
            "tags": [],
            "label": "start",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CoreStart",
                "text": "CoreStart"
              },
              ", plugins: TPluginsStart) => TStart | Promise<TStart>"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.AsyncPlugin.start.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CoreStart",
                    "text": "CoreStart"
                  }
                ],
                "path": "src/core/server/plugins/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.AsyncPlugin.start.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsStart"
                ],
                "path": "src/core/server/plugins/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.AsyncPlugin.stop",
            "type": "Function",
            "tags": [],
            "label": "stop",
            "description": [],
            "signature": [
              "(() => void) | undefined"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.BaseDeprecationDetails",
        "type": "Interface",
        "tags": [],
        "label": "BaseDeprecationDetails",
        "description": [
          "\nBase properties shared by all types of deprecations\n"
        ],
        "path": "src/core/server/deprecations/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.BaseDeprecationDetails.title",
            "type": "string",
            "tags": [],
            "label": "title",
            "description": [
              "\nThe title of the deprecation.\nCheck the README for writing deprecations in `src/core/server/deprecations/README.mdx`"
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.BaseDeprecationDetails.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [
              "\nThe description message to be displayed for the deprecation.\nCheck the README for writing deprecations in `src/core/server/deprecations/README.mdx`"
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.BaseDeprecationDetails.level",
            "type": "CompoundType",
            "tags": [],
            "label": "level",
            "description": [
              "\nlevels:\n- warning: will not break deployment upon upgrade\n- critical: needs to be addressed before upgrade.\n- fetch_error: Deprecations service failed to grab the deprecation details for the domain."
            ],
            "signature": [
              "\"warning\" | \"critical\" | \"fetch_error\""
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.BaseDeprecationDetails.deprecationType",
            "type": "CompoundType",
            "tags": [],
            "label": "deprecationType",
            "description": [
              "\n(optional) Used to identify between different deprecation types.\nExample use case: in Upgrade Assistant, we may want to allow the user to sort by\ndeprecation type or show each type in a separate tab.\n\nFeel free to add new types if necessary.\nPredefined types are necessary to reduce having similar definitions with different keywords\nacross kibana deprecations."
            ],
            "signature": [
              "\"config\" | \"feature\" | undefined"
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.BaseDeprecationDetails.documentationUrl",
            "type": "string",
            "tags": [],
            "label": "documentationUrl",
            "description": [
              "(optional) link to the documentation for more details on the deprecation."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.BaseDeprecationDetails.requireRestart",
            "type": "CompoundType",
            "tags": [],
            "label": "requireRestart",
            "description": [
              "(optional) specify the fix for this deprecation requires a full kibana restart."
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.BaseDeprecationDetails.correctiveActions",
            "type": "Object",
            "tags": [],
            "label": "correctiveActions",
            "description": [
              "corrective action needed to fix this deprecation."
            ],
            "signature": [
              "{ api?: { path: string; method: \"PUT\" | \"POST\"; body?: { [key: string]: any; } | undefined; omitContextFromBody?: boolean | undefined; } | undefined; manualSteps: string[]; }"
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.Capabilities",
        "type": "Interface",
        "tags": [],
        "label": "Capabilities",
        "description": [
          "\nThe read-only set of capabilities available for the current UI session.\nCapabilities are simple key-value pairs of (string, boolean), where the string denotes the capability ID,\nand the boolean is a flag indicating if the capability is enabled or disabled.\n"
        ],
        "path": "src/core/types/capabilities.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.Capabilities.navLinks",
            "type": "Object",
            "tags": [],
            "label": "navLinks",
            "description": [
              "Navigation link capabilities."
            ],
            "signature": [
              "{ [x: string]: boolean; }"
            ],
            "path": "src/core/types/capabilities.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Capabilities.management",
            "type": "Object",
            "tags": [],
            "label": "management",
            "description": [
              "Management section capabilities."
            ],
            "signature": [
              "{ [sectionId: string]: Record<string, boolean>; }"
            ],
            "path": "src/core/types/capabilities.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Capabilities.catalogue",
            "type": "Object",
            "tags": [],
            "label": "catalogue",
            "description": [
              "Catalogue capabilities. Catalogue entries drive the visibility of the Kibana homepage options."
            ],
            "signature": [
              "{ [x: string]: boolean; }"
            ],
            "path": "src/core/types/capabilities.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Capabilities.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [
              "Custom capabilities, registered by plugins."
            ],
            "signature": [
              "any"
            ],
            "path": "src/core/types/capabilities.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.CapabilitiesSetup",
        "type": "Interface",
        "tags": [],
        "label": "CapabilitiesSetup",
        "description": [
          "\nAPIs to manage the {@link Capabilities} that will be used by the application.\n\nPlugins relying on capabilities to toggle some of their features should register them during the setup phase\nusing the `registerProvider` method.\n\nPlugins having the responsibility to restrict capabilities depending on a given context should register\ntheir capabilities switcher using the `registerSwitcher` method.\n\nRefers to the methods documentation for complete description and examples.\n"
        ],
        "path": "src/core/server/capabilities/capabilities_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.CapabilitiesSetup.registerProvider",
            "type": "Function",
            "tags": [],
            "label": "registerProvider",
            "description": [
              "\nRegister a {@link CapabilitiesProvider} to be used to provide {@link Capabilities}\nwhen resolving them.\n"
            ],
            "signature": [
              "(provider: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CapabilitiesProvider",
                "text": "CapabilitiesProvider"
              },
              ") => void"
            ],
            "path": "src/core/server/capabilities/capabilities_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.CapabilitiesSetup.registerProvider.$1",
                "type": "Function",
                "tags": [],
                "label": "provider",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CapabilitiesProvider",
                    "text": "CapabilitiesProvider"
                  }
                ],
                "path": "src/core/server/capabilities/capabilities_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CapabilitiesSetup.registerSwitcher",
            "type": "Function",
            "tags": [],
            "label": "registerSwitcher",
            "description": [
              "\nRegister a {@link CapabilitiesSwitcher} to be used to change the default state\nof the {@link Capabilities} entries when resolving them.\n\nA capabilities switcher can only change the state of existing capabilities.\nCapabilities added or removed when invoking the switcher will be ignored.\n"
            ],
            "signature": [
              "(switcher: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CapabilitiesSwitcher",
                "text": "CapabilitiesSwitcher"
              },
              ") => void"
            ],
            "path": "src/core/server/capabilities/capabilities_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.CapabilitiesSetup.registerSwitcher.$1",
                "type": "Function",
                "tags": [],
                "label": "switcher",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CapabilitiesSwitcher",
                    "text": "CapabilitiesSwitcher"
                  }
                ],
                "path": "src/core/server/capabilities/capabilities_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.CapabilitiesStart",
        "type": "Interface",
        "tags": [],
        "label": "CapabilitiesStart",
        "description": [
          "\nAPIs to access the application {@link Capabilities}.\n"
        ],
        "path": "src/core/server/capabilities/capabilities_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.CapabilitiesStart.resolveCapabilities",
            "type": "Function",
            "tags": [],
            "label": "resolveCapabilities",
            "description": [
              "\nResolve the {@link Capabilities} to be used for given request"
            ],
            "signature": [
              "(request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>, options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ResolveCapabilitiesOptions",
                "text": "ResolveCapabilitiesOptions"
              },
              " | undefined) => Promise<",
              "Capabilities",
              ">"
            ],
            "path": "src/core/server/capabilities/capabilities_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.CapabilitiesStart.resolveCapabilities.$1",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any>"
                ],
                "path": "src/core/server/capabilities/capabilities_service.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.CapabilitiesStart.resolveCapabilities.$2",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.ResolveCapabilitiesOptions",
                    "text": "ResolveCapabilitiesOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/server/capabilities/capabilities_service.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ConfigDeprecationContext",
        "type": "Interface",
        "tags": [],
        "label": "ConfigDeprecationContext",
        "description": [
          "\nDeprecation context provided to {@link ConfigDeprecation | config deprecations}\n"
        ],
        "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationContext.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [
              "The current Kibana version, e.g `7.16.1`, `8.0.0`"
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationContext.branch",
            "type": "string",
            "tags": [],
            "label": "branch",
            "description": [
              "The current Kibana branch, e.g `7.x`, `7.16`, `master`"
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ConfigDeprecationDetails",
        "type": "Interface",
        "tags": [],
        "label": "ConfigDeprecationDetails",
        "description": [],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.ConfigDeprecationDetails",
            "text": "ConfigDeprecationDetails"
          },
          " extends ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.BaseDeprecationDetails",
            "text": "BaseDeprecationDetails"
          }
        ],
        "path": "src/core/server/deprecations/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationDetails.configPath",
            "type": "string",
            "tags": [],
            "label": "configPath",
            "description": [],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationDetails.deprecationType",
            "type": "string",
            "tags": [],
            "label": "deprecationType",
            "description": [],
            "signature": [
              "\"config\""
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ConfigDeprecationFactory",
        "type": "Interface",
        "tags": [],
        "label": "ConfigDeprecationFactory",
        "description": [
          "\nProvides helpers to generates the most commonly used {@link ConfigDeprecation}\nwhen invoking a {@link ConfigDeprecationProvider}.\n\nSee methods documentation for more detailed examples.\n"
        ],
        "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationFactory.deprecate",
            "type": "Function",
            "tags": [],
            "label": "deprecate",
            "description": [
              "\nDeprecate a configuration property from inside a plugin's configuration path.\nWill log a deprecation warning if the deprecatedKey was found.\n"
            ],
            "signature": [
              "(deprecatedKey: string, removeBy: string, details?: Partial<",
              "DeprecatedConfigDetails",
              "> | undefined) => ",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.ConfigDeprecation",
                "text": "ConfigDeprecation"
              }
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.deprecate.$1",
                "type": "string",
                "tags": [],
                "label": "deprecatedKey",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.deprecate.$2",
                "type": "string",
                "tags": [],
                "label": "removeBy",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.deprecate.$3",
                "type": "Object",
                "tags": [],
                "label": "details",
                "description": [],
                "signature": [
                  "Partial<",
                  "DeprecatedConfigDetails",
                  "> | undefined"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationFactory.deprecateFromRoot",
            "type": "Function",
            "tags": [],
            "label": "deprecateFromRoot",
            "description": [
              "\nDeprecate a configuration property from the root configuration.\nWill log a deprecation warning if the deprecatedKey was found.\n\nThis should be only used when deprecating properties from different configuration's path.\nTo deprecate properties from inside a plugin's configuration, use 'deprecate' instead.\n"
            ],
            "signature": [
              "(deprecatedKey: string, removeBy: string, details?: Partial<",
              "DeprecatedConfigDetails",
              "> | undefined) => ",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.ConfigDeprecation",
                "text": "ConfigDeprecation"
              }
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.deprecateFromRoot.$1",
                "type": "string",
                "tags": [],
                "label": "deprecatedKey",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.deprecateFromRoot.$2",
                "type": "string",
                "tags": [],
                "label": "removeBy",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.deprecateFromRoot.$3",
                "type": "Object",
                "tags": [],
                "label": "details",
                "description": [],
                "signature": [
                  "Partial<",
                  "DeprecatedConfigDetails",
                  "> | undefined"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationFactory.rename",
            "type": "Function",
            "tags": [],
            "label": "rename",
            "description": [
              "\nRename a configuration property from inside a plugin's configuration path.\nWill log a deprecation warning if the oldKey was found and deprecation applied.\n"
            ],
            "signature": [
              "(oldKey: string, newKey: string, details?: Partial<",
              "DeprecatedConfigDetails",
              "> | undefined) => ",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.ConfigDeprecation",
                "text": "ConfigDeprecation"
              }
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.rename.$1",
                "type": "string",
                "tags": [],
                "label": "oldKey",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.rename.$2",
                "type": "string",
                "tags": [],
                "label": "newKey",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.rename.$3",
                "type": "Object",
                "tags": [],
                "label": "details",
                "description": [],
                "signature": [
                  "Partial<",
                  "DeprecatedConfigDetails",
                  "> | undefined"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationFactory.renameFromRoot",
            "type": "Function",
            "tags": [],
            "label": "renameFromRoot",
            "description": [
              "\nRename a configuration property from the root configuration.\nWill log a deprecation warning if the oldKey was found and deprecation applied.\n\nThis should be only used when renaming properties from different configuration's path.\nTo rename properties from inside a plugin's configuration, use 'rename' instead.\n"
            ],
            "signature": [
              "(oldKey: string, newKey: string, details?: Partial<",
              "DeprecatedConfigDetails",
              "> | undefined) => ",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.ConfigDeprecation",
                "text": "ConfigDeprecation"
              }
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.renameFromRoot.$1",
                "type": "string",
                "tags": [],
                "label": "oldKey",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.renameFromRoot.$2",
                "type": "string",
                "tags": [],
                "label": "newKey",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.renameFromRoot.$3",
                "type": "Object",
                "tags": [],
                "label": "details",
                "description": [],
                "signature": [
                  "Partial<",
                  "DeprecatedConfigDetails",
                  "> | undefined"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationFactory.unused",
            "type": "Function",
            "tags": [],
            "label": "unused",
            "description": [
              "\nRemove a configuration property from inside a plugin's configuration path.\nWill log a deprecation warning if the unused key was found and deprecation applied.\n"
            ],
            "signature": [
              "(unusedKey: string, details?: Partial<",
              "DeprecatedConfigDetails",
              "> | undefined) => ",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.ConfigDeprecation",
                "text": "ConfigDeprecation"
              }
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.unused.$1",
                "type": "string",
                "tags": [],
                "label": "unusedKey",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.unused.$2",
                "type": "Object",
                "tags": [],
                "label": "details",
                "description": [],
                "signature": [
                  "Partial<",
                  "DeprecatedConfigDetails",
                  "> | undefined"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationFactory.unusedFromRoot",
            "type": "Function",
            "tags": [],
            "label": "unusedFromRoot",
            "description": [
              "\nRemove a configuration property from the root configuration.\nWill log a deprecation warning if the unused key was found and deprecation applied.\n\nThis should be only used when removing properties from outside of a plugin's configuration.\nTo remove properties from inside a plugin's configuration, use 'unused' instead.\n"
            ],
            "signature": [
              "(unusedKey: string, details?: Partial<",
              "DeprecatedConfigDetails",
              "> | undefined) => ",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.ConfigDeprecation",
                "text": "ConfigDeprecation"
              }
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.unusedFromRoot.$1",
                "type": "string",
                "tags": [],
                "label": "unusedKey",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecationFactory.unusedFromRoot.$2",
                "type": "Object",
                "tags": [],
                "label": "details",
                "description": [],
                "signature": [
                  "Partial<",
                  "DeprecatedConfigDetails",
                  "> | undefined"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ContextSetup",
        "type": "Interface",
        "tags": [],
        "label": "ContextSetup",
        "description": [
          "\n{@inheritdoc IContextContainer}\n"
        ],
        "path": "src/core/server/context/context_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ContextSetup.createContextContainer",
            "type": "Function",
            "tags": [],
            "label": "createContextContainer",
            "description": [
              "\nCreates a new {@link IContextContainer} for a service owner."
            ],
            "signature": [
              "() => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IContextContainer",
                "text": "IContextContainer"
              }
            ],
            "path": "src/core/server/context/context_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.CorePreboot",
        "type": "Interface",
        "tags": [],
        "label": "CorePreboot",
        "description": [
          "\nContext passed to the `setup` method of `preboot` plugins."
        ],
        "path": "src/core/server/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.CorePreboot.elasticsearch",
            "type": "Object",
            "tags": [],
            "label": "elasticsearch",
            "description": [
              "{@link ElasticsearchServicePreboot}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ElasticsearchServicePreboot",
                "text": "ElasticsearchServicePreboot"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CorePreboot.http",
            "type": "Object",
            "tags": [],
            "label": "http",
            "description": [
              "{@link HttpServicePreboot}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpServicePreboot",
                "text": "HttpServicePreboot"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CorePreboot.preboot",
            "type": "Object",
            "tags": [],
            "label": "preboot",
            "description": [
              "{@link PrebootServicePreboot}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.PrebootServicePreboot",
                "text": "PrebootServicePreboot"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.CoreSetup",
        "type": "Interface",
        "tags": [],
        "label": "CoreSetup",
        "description": [
          "\nContext passed to the `setup` method of `standard` plugins.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.CoreSetup",
            "text": "CoreSetup"
          },
          "<TPluginsStart, TStart>"
        ],
        "path": "src/core/server/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.capabilities",
            "type": "Object",
            "tags": [],
            "label": "capabilities",
            "description": [
              "{@link CapabilitiesSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CapabilitiesSetup",
                "text": "CapabilitiesSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.context",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [
              "{@link ContextSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ContextSetup",
                "text": "ContextSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.elasticsearch",
            "type": "Object",
            "tags": [],
            "label": "elasticsearch",
            "description": [
              "{@link ElasticsearchServiceSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ElasticsearchServiceSetup",
                "text": "ElasticsearchServiceSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.executionContext",
            "type": "Object",
            "tags": [],
            "label": "executionContext",
            "description": [
              "{@link ExecutionContextSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ExecutionContextSetup",
                "text": "ExecutionContextSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.http",
            "type": "CompoundType",
            "tags": [],
            "label": "http",
            "description": [
              "{@link HttpServiceSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpServiceSetup",
                "text": "HttpServiceSetup"
              },
              " & { resources: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.HttpResources",
                "text": "HttpResources"
              },
              "; }"
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.i18n",
            "type": "Object",
            "tags": [],
            "label": "i18n",
            "description": [
              "{@link I18nServiceSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.I18nServiceSetup",
                "text": "I18nServiceSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.logging",
            "type": "Object",
            "tags": [],
            "label": "logging",
            "description": [
              "{@link LoggingServiceSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.LoggingServiceSetup",
                "text": "LoggingServiceSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.metrics",
            "type": "Object",
            "tags": [],
            "label": "metrics",
            "description": [
              "{@link MetricsServiceSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.MetricsServiceSetup",
                "text": "MetricsServiceSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.savedObjects",
            "type": "Object",
            "tags": [],
            "label": "savedObjects",
            "description": [
              "{@link SavedObjectsServiceSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsServiceSetup",
                "text": "SavedObjectsServiceSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.status",
            "type": "Object",
            "tags": [],
            "label": "status",
            "description": [
              "{@link StatusServiceSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.StatusServiceSetup",
                "text": "StatusServiceSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.uiSettings",
            "type": "Object",
            "tags": [],
            "label": "uiSettings",
            "description": [
              "{@link UiSettingsServiceSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.UiSettingsServiceSetup",
                "text": "UiSettingsServiceSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.deprecations",
            "type": "Object",
            "tags": [],
            "label": "deprecations",
            "description": [
              "{@link DeprecationsServiceSetup}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.DeprecationsServiceSetup",
                "text": "DeprecationsServiceSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreSetup.getStartServices",
            "type": "Function",
            "tags": [],
            "label": "getStartServices",
            "description": [
              "{@link StartServicesAccessor}"
            ],
            "signature": [
              "() => Promise<[",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CoreStart",
                "text": "CoreStart"
              },
              ", TPluginsStart, TStart]>"
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false,
            "returnComment": [],
            "children": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.CoreStart",
        "type": "Interface",
        "tags": [],
        "label": "CoreStart",
        "description": [
          "\nContext passed to the plugins `start` method.\n"
        ],
        "path": "src/core/server/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.CoreStart.capabilities",
            "type": "Object",
            "tags": [],
            "label": "capabilities",
            "description": [
              "{@link CapabilitiesStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CapabilitiesStart",
                "text": "CapabilitiesStart"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreStart.elasticsearch",
            "type": "Object",
            "tags": [],
            "label": "elasticsearch",
            "description": [
              "{@link ElasticsearchServiceStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ElasticsearchServiceStart",
                "text": "ElasticsearchServiceStart"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreStart.executionContext",
            "type": "Object",
            "tags": [],
            "label": "executionContext",
            "description": [
              "{@link ExecutionContextStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ExecutionContextSetup",
                "text": "ExecutionContextSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreStart.http",
            "type": "Object",
            "tags": [],
            "label": "http",
            "description": [
              "{@link HttpServiceStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpServiceStart",
                "text": "HttpServiceStart"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreStart.metrics",
            "type": "Object",
            "tags": [],
            "label": "metrics",
            "description": [
              "{@link MetricsServiceStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.MetricsServiceSetup",
                "text": "MetricsServiceSetup"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreStart.savedObjects",
            "type": "Object",
            "tags": [],
            "label": "savedObjects",
            "description": [
              "{@link SavedObjectsServiceStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsServiceStart",
                "text": "SavedObjectsServiceStart"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreStart.uiSettings",
            "type": "Object",
            "tags": [],
            "label": "uiSettings",
            "description": [
              "{@link UiSettingsServiceStart}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.UiSettingsServiceStart",
                "text": "UiSettingsServiceStart"
              }
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.CoreStatus",
        "type": "Interface",
        "tags": [],
        "label": "CoreStatus",
        "description": [
          "\nStatus of core services.\n"
        ],
        "path": "src/core/server/status/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.CoreStatus.elasticsearch",
            "type": "Object",
            "tags": [],
            "label": "elasticsearch",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ServiceStatus",
                "text": "ServiceStatus"
              },
              "<unknown>"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CoreStatus.savedObjects",
            "type": "Object",
            "tags": [],
            "label": "savedObjects",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ServiceStatus",
                "text": "ServiceStatus"
              },
              "<unknown>"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.CountResponse",
        "type": "Interface",
        "tags": [],
        "label": "CountResponse",
        "description": [],
        "path": "src/core/server/elasticsearch/client/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.CountResponse._shards",
            "type": "Object",
            "tags": [],
            "label": "_shards",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ShardsInfo",
                "text": "ShardsInfo"
              }
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CountResponse.count",
            "type": "number",
            "tags": [],
            "label": "count",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.DeleteDocumentResponse",
        "type": "Interface",
        "tags": [],
        "label": "DeleteDocumentResponse",
        "description": [],
        "path": "src/core/server/elasticsearch/client/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.DeleteDocumentResponse._shards",
            "type": "Object",
            "tags": [],
            "label": "_shards",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ShardsResponse",
                "text": "ShardsResponse"
              }
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DeleteDocumentResponse.found",
            "type": "boolean",
            "tags": [],
            "label": "found",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DeleteDocumentResponse._index",
            "type": "string",
            "tags": [],
            "label": "_index",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DeleteDocumentResponse._type",
            "type": "string",
            "tags": [],
            "label": "_type",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DeleteDocumentResponse._id",
            "type": "string",
            "tags": [],
            "label": "_id",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DeleteDocumentResponse._version",
            "type": "number",
            "tags": [],
            "label": "_version",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DeleteDocumentResponse.result",
            "type": "string",
            "tags": [],
            "label": "result",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DeleteDocumentResponse.error",
            "type": "Object",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "{ type: string; } | undefined"
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.DeprecationsClient",
        "type": "Interface",
        "tags": [],
        "label": "DeprecationsClient",
        "description": [
          "\nServer-side client that provides access to fetch all Kibana deprecations\n"
        ],
        "path": "src/core/server/deprecations/deprecations_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.DeprecationsClient.getAllDeprecations",
            "type": "Function",
            "tags": [],
            "label": "getAllDeprecations",
            "description": [],
            "signature": [
              "() => Promise<",
              "DomainDeprecationDetails",
              "[]>"
            ],
            "path": "src/core/server/deprecations/deprecations_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.DeprecationSettings",
        "type": "Interface",
        "tags": [],
        "label": "DeprecationSettings",
        "description": [
          "\nUiSettings deprecation field options."
        ],
        "path": "src/core/types/ui_settings.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.DeprecationSettings.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [
              "Deprecation message"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DeprecationSettings.docLinksKey",
            "type": "string",
            "tags": [],
            "label": "docLinksKey",
            "description": [
              "Key to documentation links"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.DeprecationsServiceSetup",
        "type": "Interface",
        "tags": [
          "gmail"
        ],
        "label": "DeprecationsServiceSetup",
        "description": [
          "\nThe deprecations service provides a way for the Kibana platform to communicate deprecated\nfeatures and configs with its users. These deprecations are only communicated\nif the deployment is using these features. Allowing for a user tailored experience\nfor upgrading the stack version.\n\nThe Deprecation service is consumed by the upgrade assistant to assist with the upgrade\nexperience.\n\nIf a deprecated feature can be resolved without manual user intervention.\nUsing correctiveActions.api allows the Upgrade Assistant to use this api to correct the\ndeprecation upon a user trigger.\n"
        ],
        "path": "src/core/server/deprecations/deprecations_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.DeprecationsServiceSetup.registerDeprecations",
            "type": "Function",
            "tags": [],
            "label": "registerDeprecations",
            "description": [],
            "signature": [
              "(deprecationContext: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.RegisterDeprecationsConfig",
                "text": "RegisterDeprecationsConfig"
              },
              ") => void"
            ],
            "path": "src/core/server/deprecations/deprecations_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.DeprecationsServiceSetup.registerDeprecations.$1",
                "type": "Object",
                "tags": [],
                "label": "deprecationContext",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.RegisterDeprecationsConfig",
                    "text": "RegisterDeprecationsConfig"
                  }
                ],
                "path": "src/core/server/deprecations/deprecations_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.DiscoveredPlugin",
        "type": "Interface",
        "tags": [],
        "label": "DiscoveredPlugin",
        "description": [
          "\nSmall container object used to expose information about discovered plugins that may\nor may not have been started."
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.DiscoveredPlugin.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nIdentifier of the plugin."
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DiscoveredPlugin.configPath",
            "type": "CompoundType",
            "tags": [],
            "label": "configPath",
            "description": [
              "\nRoot configuration path used by the plugin, defaults to \"id\" in snake_case format."
            ],
            "signature": [
              "string | string[]"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DiscoveredPlugin.type",
            "type": "Enum",
            "tags": [],
            "label": "type",
            "description": [
              "\nType of the plugin, defaults to `standard`."
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.PluginType",
                "text": "PluginType"
              }
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DiscoveredPlugin.requiredPlugins",
            "type": "Object",
            "tags": [],
            "label": "requiredPlugins",
            "description": [
              "\nAn optional list of the other plugins that **must be** installed and enabled\nfor this plugin to function properly."
            ],
            "signature": [
              "readonly string[]"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DiscoveredPlugin.optionalPlugins",
            "type": "Object",
            "tags": [],
            "label": "optionalPlugins",
            "description": [
              "\nAn optional list of the other plugins that if installed and enabled **may be**\nleveraged by this plugin for some additional functionality but otherwise are\nnot required for this plugin to work properly."
            ],
            "signature": [
              "readonly string[]"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.DiscoveredPlugin.requiredBundles",
            "type": "Object",
            "tags": [],
            "label": "requiredBundles",
            "description": [
              "\nList of plugin ids that this plugin's UI code imports modules from that are\nnot in `requiredPlugins`.\n"
            ],
            "signature": [
              "readonly string[]"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ElasticsearchConfigPreboot",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchConfigPreboot",
        "description": [
          "\nA limited set of Elasticsearch configuration entries exposed to the `preboot` plugins at `setup`.\n"
        ],
        "path": "src/core/server/elasticsearch/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfigPreboot.hosts",
            "type": "Array",
            "tags": [],
            "label": "hosts",
            "description": [
              "\nHosts that the client will connect to. If sniffing is enabled, this list will\nbe used as seeds to discover the rest of your cluster."
            ],
            "signature": [
              "string[]"
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchConfigPreboot.credentialsSpecified",
            "type": "boolean",
            "tags": [],
            "label": "credentialsSpecified",
            "description": [
              "\nIndicates whether Elasticsearch configuration includes credentials (`username`, `password` or `serviceAccountToken`)."
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ElasticsearchErrorDetails",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchErrorDetails",
        "description": [],
        "path": "src/core/server/elasticsearch/client/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchErrorDetails.error",
            "type": "Object",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "{ type: string; reason?: string | undefined; } | undefined"
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ElasticsearchServicePreboot",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchServicePreboot",
        "description": [],
        "path": "src/core/server/elasticsearch/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchServicePreboot.config",
            "type": "Object",
            "tags": [],
            "label": "config",
            "description": [
              "\nA limited set of Elasticsearch configuration entries.\n"
            ],
            "signature": [
              "{ readonly hosts: string[]; readonly credentialsSpecified: boolean; }"
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchServicePreboot.createClient",
            "type": "Function",
            "tags": [],
            "label": "createClient",
            "description": [
              "\nCreate application specific Elasticsearch cluster API client with customized config. See {@link IClusterClient}.\n"
            ],
            "signature": [
              "(type: string, clientConfig?: Partial<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ElasticsearchClientConfig",
                "text": "ElasticsearchClientConfig"
              },
              "> | undefined) => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ICustomClusterClient",
                "text": "ICustomClusterClient"
              }
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ElasticsearchServicePreboot.createClient.$1",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [
                  "Unique identifier of the client"
                ],
                "signature": [
                  "string"
                ],
                "path": "src/core/server/elasticsearch/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ElasticsearchServicePreboot.createClient.$2",
                "type": "Object",
                "tags": [],
                "label": "clientConfig",
                "description": [
                  "A config consists of Elasticsearch JS client options and\nvalid sub-set of Elasticsearch service config.\nWe fill all the missing properties in the `clientConfig` using the default\nElasticsearch config so that we don't depend on default values set and\ncontrolled by underlying Elasticsearch JS client.\nWe don't run validation against the passed config and expect it to be valid."
                ],
                "signature": [
                  "Partial<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.ElasticsearchClientConfig",
                    "text": "ElasticsearchClientConfig"
                  },
                  "> | undefined"
                ],
                "path": "src/core/server/elasticsearch/types.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ElasticsearchServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchServiceSetup",
        "description": [],
        "path": "src/core/server/elasticsearch/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchServiceSetup.legacy",
            "type": "Object",
            "tags": [
              "deprecated"
            ],
            "label": "legacy",
            "description": [],
            "signature": [
              "{ readonly config$: ",
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ElasticsearchConfig",
                "text": "ElasticsearchConfig"
              },
              ">; }"
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": true,
            "references": [
              {
                "plugin": "console",
                "path": "src/plugins/console/server/plugin.ts"
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ElasticsearchServiceStart",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchServiceStart",
        "description": [],
        "path": "src/core/server/elasticsearch/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchServiceStart.client",
            "type": "Object",
            "tags": [],
            "label": "client",
            "description": [
              "\nA pre-configured {@link IClusterClient | Elasticsearch client}\n"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IClusterClient",
                "text": "IClusterClient"
              }
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchServiceStart.createClient",
            "type": "Function",
            "tags": [],
            "label": "createClient",
            "description": [
              "\nCreate application specific Elasticsearch cluster API client with customized config. See {@link IClusterClient}.\n"
            ],
            "signature": [
              "(type: string, clientConfig?: Partial<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ElasticsearchClientConfig",
                "text": "ElasticsearchClientConfig"
              },
              "> | undefined) => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ICustomClusterClient",
                "text": "ICustomClusterClient"
              }
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ElasticsearchServiceStart.createClient.$1",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [
                  "Unique identifier of the client"
                ],
                "signature": [
                  "string"
                ],
                "path": "src/core/server/elasticsearch/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ElasticsearchServiceStart.createClient.$2",
                "type": "Object",
                "tags": [],
                "label": "clientConfig",
                "description": [
                  "A config consists of Elasticsearch JS client options and\nvalid sub-set of Elasticsearch service config.\nWe fill all the missing properties in the `clientConfig` using the default\nElasticsearch config so that we don't depend on default values set and\ncontrolled by underlying Elasticsearch JS client.\nWe don't run validation against the passed config and expect it to be valid."
                ],
                "signature": [
                  "Partial<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.ElasticsearchClientConfig",
                    "text": "ElasticsearchClientConfig"
                  },
                  "> | undefined"
                ],
                "path": "src/core/server/elasticsearch/types.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchServiceStart.legacy",
            "type": "Object",
            "tags": [
              "deprecated"
            ],
            "label": "legacy",
            "description": [],
            "signature": [
              "{ readonly config$: ",
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ElasticsearchConfig",
                "text": "ElasticsearchConfig"
              },
              ">; }"
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": true,
            "references": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ElasticsearchStatusMeta",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchStatusMeta",
        "description": [],
        "path": "src/core/server/elasticsearch/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchStatusMeta.warningNodes",
            "type": "Array",
            "tags": [],
            "label": "warningNodes",
            "description": [],
            "signature": [
              "NodeInfo[]"
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchStatusMeta.incompatibleNodes",
            "type": "Array",
            "tags": [],
            "label": "incompatibleNodes",
            "description": [],
            "signature": [
              "NodeInfo[]"
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ElasticsearchStatusMeta.nodesInfoRequestError",
            "type": "Object",
            "tags": [],
            "label": "nodesInfoRequestError",
            "description": [],
            "signature": [
              "Error | undefined"
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.EnvironmentMode",
        "type": "Interface",
        "tags": [],
        "label": "EnvironmentMode",
        "description": [],
        "path": "node_modules/@kbn/config/target_types/types.d.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.EnvironmentMode.name",
            "type": "CompoundType",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "\"production\" | \"development\""
            ],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.EnvironmentMode.dev",
            "type": "boolean",
            "tags": [],
            "label": "dev",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.EnvironmentMode.prod",
            "type": "boolean",
            "tags": [],
            "label": "prod",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ExecutionContextSetup",
        "type": "Interface",
        "tags": [],
        "label": "ExecutionContextSetup",
        "description": [],
        "path": "src/core/server/execution_context/execution_context_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ExecutionContextSetup.withContext",
            "type": "Function",
            "tags": [],
            "label": "withContext",
            "description": [
              "\nKeeps track of execution context while the passed function is executed.\nData are carried over all async operations spawned by the passed function.\nThe nested calls stack the registered context on top of each other."
            ],
            "signature": [
              "<R>(context: ",
              "KibanaExecutionContext",
              " | undefined, fn: (...args: any[]) => R) => R"
            ],
            "path": "src/core/server/execution_context/execution_context_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ExecutionContextSetup.withContext.$1",
                "type": "Object",
                "tags": [],
                "label": "context",
                "description": [],
                "signature": [
                  "KibanaExecutionContext",
                  " | undefined"
                ],
                "path": "src/core/server/execution_context/execution_context_service.ts",
                "deprecated": false,
                "isRequired": false
              },
              {
                "parentPluginId": "core",
                "id": "def-server.ExecutionContextSetup.withContext.$2",
                "type": "Function",
                "tags": [],
                "label": "fn",
                "description": [],
                "signature": [
                  "(...args: any[]) => R"
                ],
                "path": "src/core/server/execution_context/execution_context_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.FakeRequest",
        "type": "Interface",
        "tags": [],
        "label": "FakeRequest",
        "description": [
          "\nFake request object created manually by Kibana plugins."
        ],
        "path": "src/core/server/elasticsearch/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.FakeRequest.headers",
            "type": "CompoundType",
            "tags": [],
            "label": "headers",
            "description": [
              "Headers used for authentication against Elasticsearch"
            ],
            "signature": [
              "{ from?: string | string[] | undefined; date?: string | string[] | undefined; origin?: string | string[] | undefined; range?: string | string[] | undefined; warning?: string | string[] | undefined; location?: string | string[] | undefined; allow?: string | string[] | undefined; accept?: string | string[] | undefined; \"accept-language\"?: string | string[] | undefined; \"accept-patch\"?: string | string[] | undefined; \"accept-ranges\"?: string | string[] | undefined; \"access-control-allow-credentials\"?: string | string[] | undefined; \"access-control-allow-headers\"?: string | string[] | undefined; \"access-control-allow-methods\"?: string | string[] | undefined; \"access-control-allow-origin\"?: string | string[] | undefined; \"access-control-expose-headers\"?: string | string[] | undefined; \"access-control-max-age\"?: string | string[] | undefined; \"access-control-request-headers\"?: string | string[] | undefined; \"access-control-request-method\"?: string | string[] | undefined; age?: string | string[] | undefined; \"alt-svc\"?: string | string[] | undefined; authorization?: string | string[] | undefined; \"cache-control\"?: string | string[] | undefined; connection?: string | string[] | undefined; \"content-disposition\"?: string | string[] | undefined; \"content-encoding\"?: string | string[] | undefined; \"content-language\"?: string | string[] | undefined; \"content-length\"?: string | string[] | undefined; \"content-location\"?: string | string[] | undefined; \"content-range\"?: string | string[] | undefined; \"content-type\"?: string | string[] | undefined; cookie?: string | string[] | undefined; etag?: string | string[] | undefined; expect?: string | string[] | undefined; expires?: string | string[] | undefined; forwarded?: string | string[] | undefined; host?: string | string[] | undefined; \"if-match\"?: string | string[] | undefined; \"if-modified-since\"?: string | string[] | undefined; \"if-none-match\"?: string | string[] | undefined; \"if-unmodified-since\"?: string | string[] | undefined; \"last-modified\"?: string | string[] | undefined; pragma?: string | string[] | undefined; \"proxy-authenticate\"?: string | string[] | undefined; \"proxy-authorization\"?: string | string[] | undefined; \"public-key-pins\"?: string | string[] | undefined; referer?: string | string[] | undefined; \"retry-after\"?: string | string[] | undefined; \"sec-websocket-accept\"?: string | string[] | undefined; \"sec-websocket-extensions\"?: string | string[] | undefined; \"sec-websocket-key\"?: string | string[] | undefined; \"sec-websocket-protocol\"?: string | string[] | undefined; \"sec-websocket-version\"?: string | string[] | undefined; \"set-cookie\"?: string | string[] | undefined; \"strict-transport-security\"?: string | string[] | undefined; tk?: string | string[] | undefined; trailer?: string | string[] | undefined; \"transfer-encoding\"?: string | string[] | undefined; upgrade?: string | string[] | undefined; \"user-agent\"?: string | string[] | undefined; vary?: string | string[] | undefined; via?: string | string[] | undefined; \"www-authenticate\"?: string | string[] | undefined; } & { [header: string]: string | string[] | undefined; }"
            ],
            "path": "src/core/server/elasticsearch/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.FeatureDeprecationDetails",
        "type": "Interface",
        "tags": [],
        "label": "FeatureDeprecationDetails",
        "description": [],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.FeatureDeprecationDetails",
            "text": "FeatureDeprecationDetails"
          },
          " extends ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.BaseDeprecationDetails",
            "text": "BaseDeprecationDetails"
          }
        ],
        "path": "src/core/server/deprecations/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.FeatureDeprecationDetails.deprecationType",
            "type": "string",
            "tags": [],
            "label": "deprecationType",
            "description": [],
            "signature": [
              "\"feature\" | undefined"
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.GetDeprecationsContext",
        "type": "Interface",
        "tags": [],
        "label": "GetDeprecationsContext",
        "description": [],
        "path": "src/core/server/deprecations/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.GetDeprecationsContext.esClient",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IScopedClusterClient",
                "text": "IScopedClusterClient"
              }
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.GetDeprecationsContext.savedObjectsClient",
            "type": "Object",
            "tags": [],
            "label": "savedObjectsClient",
            "description": [],
            "signature": [
              "{ create: <T = unknown>(type: string, attributes: T, options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsCreateOptions",
                "text": "SavedObjectsCreateOptions"
              },
              " | undefined) => Promise<",
              "SavedObject",
              "<T>>; bulkCreate: <T = unknown>(objects: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBulkCreateObject",
                "text": "SavedObjectsBulkCreateObject"
              },
              "<T>[], options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsCreateOptions",
                "text": "SavedObjectsCreateOptions"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBulkResponse",
                "text": "SavedObjectsBulkResponse"
              },
              "<T>>; checkConflicts: (objects?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsCheckConflictsObject",
                "text": "SavedObjectsCheckConflictsObject"
              },
              "[], options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBaseOptions",
                "text": "SavedObjectsBaseOptions"
              },
              ") => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsCheckConflictsResponse",
                "text": "SavedObjectsCheckConflictsResponse"
              },
              ">; delete: (type: string, id: string, options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsDeleteOptions",
                "text": "SavedObjectsDeleteOptions"
              },
              ") => Promise<{}>; find: <T = unknown, A = unknown>(options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsFindOptions",
                "text": "SavedObjectsFindOptions"
              },
              ") => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsFindResponse",
                "text": "SavedObjectsFindResponse"
              },
              "<T, A>>; bulkGet: <T = unknown>(objects?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBulkGetObject",
                "text": "SavedObjectsBulkGetObject"
              },
              "[], options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBaseOptions",
                "text": "SavedObjectsBaseOptions"
              },
              ") => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBulkResponse",
                "text": "SavedObjectsBulkResponse"
              },
              "<T>>; bulkResolve: <T = unknown>(objects: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBulkResolveObject",
                "text": "SavedObjectsBulkResolveObject"
              },
              "[], options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBaseOptions",
                "text": "SavedObjectsBaseOptions"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBulkResolveResponse",
                "text": "SavedObjectsBulkResolveResponse"
              },
              "<T>>; get: <T = unknown>(type: string, id: string, options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBaseOptions",
                "text": "SavedObjectsBaseOptions"
              },
              ") => Promise<",
              "SavedObject",
              "<T>>; resolve: <T = unknown>(type: string, id: string, options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBaseOptions",
                "text": "SavedObjectsBaseOptions"
              },
              ") => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsResolveResponse",
                "text": "SavedObjectsResolveResponse"
              },
              "<T>>; update: <T = unknown>(type: string, id: string, attributes: Partial<T>, options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsUpdateOptions",
                "text": "SavedObjectsUpdateOptions"
              },
              "<T>) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsUpdateResponse",
                "text": "SavedObjectsUpdateResponse"
              },
              "<T>>; collectMultiNamespaceReferences: (objects: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsCollectMultiNamespaceReferencesObject",
                "text": "SavedObjectsCollectMultiNamespaceReferencesObject"
              },
              "[], options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsCollectMultiNamespaceReferencesOptions",
                "text": "SavedObjectsCollectMultiNamespaceReferencesOptions"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsCollectMultiNamespaceReferencesResponse",
                "text": "SavedObjectsCollectMultiNamespaceReferencesResponse"
              },
              ">; updateObjectsSpaces: (objects: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsUpdateObjectsSpacesObject",
                "text": "SavedObjectsUpdateObjectsSpacesObject"
              },
              "[], spacesToAdd: string[], spacesToRemove: string[], options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsUpdateObjectsSpacesOptions",
                "text": "SavedObjectsUpdateObjectsSpacesOptions"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsUpdateObjectsSpacesResponse",
                "text": "SavedObjectsUpdateObjectsSpacesResponse"
              },
              ">; bulkUpdate: <T = unknown>(objects: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBulkUpdateObject",
                "text": "SavedObjectsBulkUpdateObject"
              },
              "<T>[], options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBulkUpdateOptions",
                "text": "SavedObjectsBulkUpdateOptions"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBulkUpdateResponse",
                "text": "SavedObjectsBulkUpdateResponse"
              },
              "<T>>; removeReferencesTo: (type: string, id: string, options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsRemoveReferencesToOptions",
                "text": "SavedObjectsRemoveReferencesToOptions"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsRemoveReferencesToResponse",
                "text": "SavedObjectsRemoveReferencesToResponse"
              },
              ">; openPointInTimeForType: (type: string | string[], options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsOpenPointInTimeOptions",
                "text": "SavedObjectsOpenPointInTimeOptions"
              },
              ") => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsOpenPointInTimeResponse",
                "text": "SavedObjectsOpenPointInTimeResponse"
              },
              ">; closePointInTime: (id: string, options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsBaseOptions",
                "text": "SavedObjectsBaseOptions"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsClosePointInTimeResponse",
                "text": "SavedObjectsClosePointInTimeResponse"
              },
              ">; createPointInTimeFinder: <T = unknown, A = unknown>(findOptions: Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsFindOptions",
                "text": "SavedObjectsFindOptions"
              },
              ", \"type\" | \"filter\" | \"aggs\" | \"fields\" | \"perPage\" | \"sortField\" | \"sortOrder\" | \"search\" | \"searchFields\" | \"rootSearchFields\" | \"hasReference\" | \"hasReferenceOperator\" | \"defaultSearchOperator\" | \"namespaces\" | \"typeToNamespacesMap\" | \"preference\">, dependencies?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsCreatePointInTimeFinderDependencies",
                "text": "SavedObjectsCreatePointInTimeFinderDependencies"
              },
              " | undefined) => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.ISavedObjectsPointInTimeFinder",
                "text": "ISavedObjectsPointInTimeFinder"
              },
              "<T, A>; errors: typeof ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsErrorHelpers",
                "text": "SavedObjectsErrorHelpers"
              },
              "; }"
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.GetResponse",
        "type": "Interface",
        "tags": [],
        "label": "GetResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.GetResponse",
            "text": "GetResponse"
          },
          "<T>"
        ],
        "path": "src/core/server/elasticsearch/client/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.GetResponse._index",
            "type": "string",
            "tags": [],
            "label": "_index",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.GetResponse._type",
            "type": "string",
            "tags": [],
            "label": "_type",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.GetResponse._id",
            "type": "string",
            "tags": [],
            "label": "_id",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.GetResponse._version",
            "type": "number",
            "tags": [],
            "label": "_version",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.GetResponse._routing",
            "type": "string",
            "tags": [],
            "label": "_routing",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.GetResponse.found",
            "type": "boolean",
            "tags": [],
            "label": "found",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.GetResponse._source",
            "type": "Uncategorized",
            "tags": [],
            "label": "_source",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.GetResponse._seq_no",
            "type": "number",
            "tags": [],
            "label": "_seq_no",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.GetResponse._primary_term",
            "type": "number",
            "tags": [],
            "label": "_primary_term",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.HttpResources",
        "type": "Interface",
        "tags": [],
        "label": "HttpResources",
        "description": [
          "\nHttpResources service is responsible for serving static & dynamic assets for Kibana application via HTTP.\nProvides API allowing plug-ins to respond with:\n- a pre-configured HTML page bootstrapping Kibana client app\n- custom HTML page\n- custom JS script file."
        ],
        "path": "src/core/server/http_resources/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.HttpResources.register",
            "type": "Function",
            "tags": [],
            "label": "register",
            "description": [
              "To register a route handler executing passed function to form response."
            ],
            "signature": [
              "<P, Q, B, Context extends ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " = ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              ">(route: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RouteConfig",
                "text": "RouteConfig"
              },
              "<P, Q, B, \"get\">, handler: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RequestHandler",
                "text": "RequestHandler"
              },
              "<P, Q, B, Context, \"get\", { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
              "Stream",
              " | undefined>(options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<T>) => ",
              "KibanaResponse",
              "<T>; badRequest: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; unauthorized: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; forbidden: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; notFound: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; conflict: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; customError: (options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">) => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; redirected: (options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RedirectResponseOptions",
                "text": "RedirectResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; ok: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; accepted: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; noContent: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<undefined>; } & ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.HttpResourcesServiceToolkit",
                "text": "HttpResourcesServiceToolkit"
              },
              ">) => void"
            ],
            "path": "src/core/server/http_resources/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.HttpResources.register.$1",
                "type": "Object",
                "tags": [],
                "label": "route",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.RouteConfig",
                    "text": "RouteConfig"
                  },
                  "<P, Q, B, \"get\">"
                ],
                "path": "src/core/server/http_resources/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.HttpResources.register.$2",
                "type": "Function",
                "tags": [],
                "label": "handler",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.RequestHandler",
                    "text": "RequestHandler"
                  },
                  "<P, Q, B, Context, \"get\", { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
                  "Stream",
                  " | undefined>(options: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.CustomHttpResponseOptions",
                    "text": "CustomHttpResponseOptions"
                  },
                  "<T>) => ",
                  "KibanaResponse",
                  "<T>; badRequest: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ErrorHttpResponseOptions",
                    "text": "ErrorHttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; unauthorized: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ErrorHttpResponseOptions",
                    "text": "ErrorHttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; forbidden: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ErrorHttpResponseOptions",
                    "text": "ErrorHttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; notFound: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ErrorHttpResponseOptions",
                    "text": "ErrorHttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; conflict: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ErrorHttpResponseOptions",
                    "text": "ErrorHttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; customError: (options: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.CustomHttpResponseOptions",
                    "text": "CustomHttpResponseOptions"
                  },
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">) => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; redirected: (options: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.RedirectResponseOptions",
                    "text": "RedirectResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<string | Record<string, any> | Buffer | ",
                  "Stream",
                  ">; ok: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.HttpResponseOptions",
                    "text": "HttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<string | Record<string, any> | Buffer | ",
                  "Stream",
                  ">; accepted: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.HttpResponseOptions",
                    "text": "HttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<string | Record<string, any> | Buffer | ",
                  "Stream",
                  ">; noContent: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.HttpResponseOptions",
                    "text": "HttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<undefined>; } & ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.HttpResourcesServiceToolkit",
                    "text": "HttpResourcesServiceToolkit"
                  },
                  ">"
                ],
                "path": "src/core/server/http_resources/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.HttpResourcesRenderOptions",
        "type": "Interface",
        "tags": [],
        "label": "HttpResourcesRenderOptions",
        "description": [
          "\nAllows to configure HTTP response parameters"
        ],
        "path": "src/core/server/http_resources/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.HttpResourcesRenderOptions.headers",
            "type": "CompoundType",
            "tags": [],
            "label": "headers",
            "description": [
              "\nHTTP Headers with additional information about response."
            ],
            "signature": [
              "Record<\"from\" | \"date\" | \"origin\" | \"range\" | \"warning\" | \"location\" | \"allow\" | \"accept\" | \"accept-language\" | \"accept-patch\" | \"accept-ranges\" | \"access-control-allow-credentials\" | \"access-control-allow-headers\" | \"access-control-allow-methods\" | \"access-control-allow-origin\" | \"access-control-expose-headers\" | \"access-control-max-age\" | \"access-control-request-headers\" | \"access-control-request-method\" | \"age\" | \"alt-svc\" | \"authorization\" | \"cache-control\" | \"connection\" | \"content-disposition\" | \"content-encoding\" | \"content-language\" | \"content-length\" | \"content-location\" | \"content-range\" | \"content-type\" | \"cookie\" | \"etag\" | \"expect\" | \"expires\" | \"forwarded\" | \"host\" | \"if-match\" | \"if-modified-since\" | \"if-none-match\" | \"if-unmodified-since\" | \"last-modified\" | \"pragma\" | \"proxy-authenticate\" | \"proxy-authorization\" | \"public-key-pins\" | \"referer\" | \"retry-after\" | \"sec-websocket-accept\" | \"sec-websocket-extensions\" | \"sec-websocket-key\" | \"sec-websocket-protocol\" | \"sec-websocket-version\" | \"set-cookie\" | \"strict-transport-security\" | \"tk\" | \"trailer\" | \"transfer-encoding\" | \"upgrade\" | \"user-agent\" | \"vary\" | \"via\" | \"www-authenticate\", string | string[]> | Record<string, string | string[]> | undefined"
            ],
            "path": "src/core/server/http_resources/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.HttpResourcesServiceToolkit",
        "type": "Interface",
        "tags": [],
        "label": "HttpResourcesServiceToolkit",
        "description": [
          "\nExtended set of {@link KibanaResponseFactory} helpers used to respond with HTML or JS resource."
        ],
        "path": "src/core/server/http_resources/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.HttpResourcesServiceToolkit.renderCoreApp",
            "type": "Function",
            "tags": [],
            "label": "renderCoreApp",
            "description": [
              "To respond with HTML page bootstrapping Kibana application."
            ],
            "signature": [
              "(options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.HttpResourcesRenderOptions",
                "text": "HttpResourcesRenderOptions"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.IKibanaResponse",
                "text": "IKibanaResponse"
              },
              "<any>>"
            ],
            "path": "src/core/server/http_resources/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.HttpResourcesServiceToolkit.renderCoreApp.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.HttpResourcesRenderOptions",
                    "text": "HttpResourcesRenderOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/server/http_resources/types.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.HttpResourcesServiceToolkit.renderAnonymousCoreApp",
            "type": "Function",
            "tags": [],
            "label": "renderAnonymousCoreApp",
            "description": [
              "To respond with HTML page bootstrapping Kibana application without retrieving user-specific information."
            ],
            "signature": [
              "(options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.HttpResourcesRenderOptions",
                "text": "HttpResourcesRenderOptions"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.IKibanaResponse",
                "text": "IKibanaResponse"
              },
              "<any>>"
            ],
            "path": "src/core/server/http_resources/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.HttpResourcesServiceToolkit.renderAnonymousCoreApp.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.HttpResourcesRenderOptions",
                    "text": "HttpResourcesRenderOptions"
                  },
                  " | undefined"
                ],
                "path": "src/core/server/http_resources/types.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.HttpResourcesServiceToolkit.renderHtml",
            "type": "Function",
            "tags": [],
            "label": "renderHtml",
            "description": [
              "To respond with a custom HTML page."
            ],
            "signature": [
              "(options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.IKibanaResponse",
                "text": "IKibanaResponse"
              },
              "<any>"
            ],
            "path": "src/core/server/http_resources/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.HttpResourcesServiceToolkit.renderHtml.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.HttpResponseOptions",
                    "text": "HttpResponseOptions"
                  }
                ],
                "path": "src/core/server/http_resources/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.HttpResourcesServiceToolkit.renderJs",
            "type": "Function",
            "tags": [],
            "label": "renderJs",
            "description": [
              "To respond with a custom JS script file."
            ],
            "signature": [
              "(options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.IKibanaResponse",
                "text": "IKibanaResponse"
              },
              "<any>"
            ],
            "path": "src/core/server/http_resources/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.HttpResourcesServiceToolkit.renderJs.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.HttpResponseOptions",
                    "text": "HttpResponseOptions"
                  }
                ],
                "path": "src/core/server/http_resources/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.I18nServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "I18nServiceSetup",
        "description": [],
        "path": "src/core/server/i18n/i18n_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.I18nServiceSetup.getLocale",
            "type": "Function",
            "tags": [],
            "label": "getLocale",
            "description": [
              "\nReturn the locale currently in use."
            ],
            "signature": [
              "() => string"
            ],
            "path": "src/core/server/i18n/i18n_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.I18nServiceSetup.getTranslationFiles",
            "type": "Function",
            "tags": [],
            "label": "getTranslationFiles",
            "description": [
              "\nReturn the absolute paths to translation files currently in use."
            ],
            "signature": [
              "() => string[]"
            ],
            "path": "src/core/server/i18n/i18n_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.IClusterClient",
        "type": "Interface",
        "tags": [],
        "label": "IClusterClient",
        "description": [
          "\nRepresents an Elasticsearch cluster API client created by the platform.\nIt allows to call API on behalf of the internal Kibana user and\nthe actual user that is derived from the request headers (via `asScoped(...)`).\n"
        ],
        "path": "src/core/server/elasticsearch/client/cluster_client.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.IClusterClient.asInternalUser",
            "type": "CompoundType",
            "tags": [],
            "label": "asInternalUser",
            "description": [
              "\nA {@link ElasticsearchClient | client} to be used to query the ES cluster on behalf of the Kibana internal user"
            ],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\"> & { transport: { request<TResponse = unknown>(params: ",
              "TransportRequestParams",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TransportResult",
              "<TResponse, unknown>>; }; }"
            ],
            "path": "src/core/server/elasticsearch/client/cluster_client.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IClusterClient.asScoped",
            "type": "Function",
            "tags": [],
            "label": "asScoped",
            "description": [
              "\nCreates a {@link IScopedClusterClient | scoped cluster client} bound to given {@link ScopeableRequest | request}"
            ],
            "signature": [
              "(request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ScopeableRequest",
                "text": "ScopeableRequest"
              },
              ") => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IScopedClusterClient",
                "text": "IScopedClusterClient"
              }
            ],
            "path": "src/core/server/elasticsearch/client/cluster_client.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.IClusterClient.asScoped.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.ScopeableRequest",
                    "text": "ScopeableRequest"
                  }
                ],
                "path": "src/core/server/elasticsearch/client/cluster_client.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.IContextContainer",
        "type": "Interface",
        "tags": [],
        "label": "IContextContainer",
        "description": [
          "\nAn object that handles registration of context providers and configuring handlers with context.\n"
        ],
        "path": "src/core/server/context/container/context.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.IContextContainer.registerContext",
            "type": "Function",
            "tags": [],
            "label": "registerContext",
            "description": [
              "\nRegister a new context provider.\n"
            ],
            "signature": [
              "<Context extends ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              ", ContextName extends keyof Context>(pluginOpaqueId: symbol, contextName: ContextName, provider: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IContextProvider",
                "text": "IContextProvider"
              },
              "<Context, ContextName>) => this"
            ],
            "path": "src/core/server/context/container/context.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.IContextContainer.registerContext.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "pluginOpaqueId",
                "description": [
                  "- The plugin opaque ID for the plugin that registers this context."
                ],
                "signature": [
                  "symbol"
                ],
                "path": "src/core/server/context/container/context.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.IContextContainer.registerContext.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "contextName",
                "description": [
                  "- The key of the `TContext` object this provider supplies the value for."
                ],
                "signature": [
                  "ContextName"
                ],
                "path": "src/core/server/context/container/context.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.IContextContainer.registerContext.$3",
                "type": "Function",
                "tags": [],
                "label": "provider",
                "description": [
                  "- A {@link IContextProvider} to be called each time a new context is created."
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.IContextProvider",
                    "text": "IContextProvider"
                  },
                  "<Context, ContextName>"
                ],
                "path": "src/core/server/context/container/context.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The {@link IContextContainer} for method chaining."
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IContextContainer.createHandler",
            "type": "Function",
            "tags": [],
            "label": "createHandler",
            "description": [
              "\nCreate a new handler function pre-wired to context for the plugin.\n"
            ],
            "signature": [
              "(pluginOpaqueId: symbol, handler: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RequestHandler",
                "text": "RequestHandler"
              },
              "<unknown, unknown, unknown, ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              ", any, { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
              "Stream",
              " | undefined>(options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<T>) => ",
              "KibanaResponse",
              "<T>; badRequest: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; unauthorized: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; forbidden: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; notFound: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; conflict: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; customError: (options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">) => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; redirected: (options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RedirectResponseOptions",
                "text": "RedirectResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; ok: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; accepted: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; noContent: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<undefined>; }>) => (request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>, response: { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
              "Stream",
              " | undefined>(options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<T>) => ",
              "KibanaResponse",
              "<T>; badRequest: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; unauthorized: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; forbidden: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; notFound: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; conflict: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; customError: (options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">) => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; redirected: (options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RedirectResponseOptions",
                "text": "RedirectResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; ok: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; accepted: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; noContent: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<undefined>; }) => Promise<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.IKibanaResponse",
                "text": "IKibanaResponse"
              },
              "<any>>"
            ],
            "path": "src/core/server/context/container/context.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.IContextContainer.createHandler.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "pluginOpaqueId",
                "description": [
                  "- The plugin opaque ID for the plugin that registers this handler."
                ],
                "signature": [
                  "symbol"
                ],
                "path": "src/core/server/context/container/context.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.IContextContainer.createHandler.$2",
                "type": "Function",
                "tags": [],
                "label": "handler",
                "description": [
                  "- Handler function to pass context object to."
                ],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.RequestHandler",
                    "text": "RequestHandler"
                  },
                  "<unknown, unknown, unknown, ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.RequestHandlerContext",
                    "text": "RequestHandlerContext"
                  },
                  ", any, { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
                  "Stream",
                  " | undefined>(options: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.CustomHttpResponseOptions",
                    "text": "CustomHttpResponseOptions"
                  },
                  "<T>) => ",
                  "KibanaResponse",
                  "<T>; badRequest: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ErrorHttpResponseOptions",
                    "text": "ErrorHttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; unauthorized: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ErrorHttpResponseOptions",
                    "text": "ErrorHttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; forbidden: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ErrorHttpResponseOptions",
                    "text": "ErrorHttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; notFound: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ErrorHttpResponseOptions",
                    "text": "ErrorHttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; conflict: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ErrorHttpResponseOptions",
                    "text": "ErrorHttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; customError: (options: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.CustomHttpResponseOptions",
                    "text": "CustomHttpResponseOptions"
                  },
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">) => ",
                  "KibanaResponse",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.ResponseError",
                    "text": "ResponseError"
                  },
                  ">; redirected: (options: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.RedirectResponseOptions",
                    "text": "RedirectResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<string | Record<string, any> | Buffer | ",
                  "Stream",
                  ">; ok: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.HttpResponseOptions",
                    "text": "HttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<string | Record<string, any> | Buffer | ",
                  "Stream",
                  ">; accepted: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.HttpResponseOptions",
                    "text": "HttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<string | Record<string, any> | Buffer | ",
                  "Stream",
                  ">; noContent: (options?: ",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.HttpResponseOptions",
                    "text": "HttpResponseOptions"
                  },
                  ") => ",
                  "KibanaResponse",
                  "<undefined>; }>"
                ],
                "path": "src/core/server/context/container/context.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "A function that takes `RequestHandler` parameters, calls `handler` with a new context, and returns a Promise of\nthe `handler` return value."
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ICspConfig",
        "type": "Interface",
        "tags": [],
        "label": "ICspConfig",
        "description": [
          "\nCSP configuration for use in Kibana."
        ],
        "path": "src/core/server/csp/csp_config.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ICspConfig.strict",
            "type": "boolean",
            "tags": [],
            "label": "strict",
            "description": [
              "\nSpecify whether browsers that do not support CSP should be\nable to use Kibana. Use `true` to block and `false` to allow."
            ],
            "path": "src/core/server/csp/csp_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ICspConfig.warnLegacyBrowsers",
            "type": "boolean",
            "tags": [],
            "label": "warnLegacyBrowsers",
            "description": [
              "\nSpecify whether users with legacy browsers should be warned\nabout their lack of Kibana security compliance."
            ],
            "path": "src/core/server/csp/csp_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ICspConfig.disableEmbedding",
            "type": "boolean",
            "tags": [],
            "label": "disableEmbedding",
            "description": [
              "\nWhether or not embedding (using iframes) should be allowed by the CSP. If embedding is disabled, a restrictive 'frame-ancestors' rule will be added to the default CSP rules."
            ],
            "path": "src/core/server/csp/csp_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ICspConfig.header",
            "type": "string",
            "tags": [],
            "label": "header",
            "description": [
              "\nThe CSP rules in a formatted directives string for use\nin a `Content-Security-Policy` header."
            ],
            "path": "src/core/server/csp/csp_config.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ICustomClusterClient",
        "type": "Interface",
        "tags": [],
        "label": "ICustomClusterClient",
        "description": [
          "\nSee {@link IClusterClient}\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.ICustomClusterClient",
            "text": "ICustomClusterClient"
          },
          " extends ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.IClusterClient",
            "text": "IClusterClient"
          }
        ],
        "path": "src/core/server/elasticsearch/client/cluster_client.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ICustomClusterClient.close",
            "type": "Function",
            "tags": [],
            "label": "close",
            "description": [
              "\nCloses the cluster client. After that client cannot be used and one should\ncreate a new client instance to be able to interact with Elasticsearch API."
            ],
            "signature": [
              "() => Promise<void>"
            ],
            "path": "src/core/server/elasticsearch/client/cluster_client.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.IExecutionContextContainer",
        "type": "Interface",
        "tags": [],
        "label": "IExecutionContextContainer",
        "description": [],
        "path": "src/core/server/execution_context/execution_context_container.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.IExecutionContextContainer.toString",
            "type": "Function",
            "tags": [],
            "label": "toString",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "src/core/server/execution_context/execution_context_container.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IExecutionContextContainer.toJSON",
            "type": "Function",
            "tags": [],
            "label": "toJSON",
            "description": [],
            "signature": [
              "() => Readonly<",
              "KibanaExecutionContext",
              ">"
            ],
            "path": "src/core/server/execution_context/execution_context_container.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.IExternalUrlConfig",
        "type": "Interface",
        "tags": [],
        "label": "IExternalUrlConfig",
        "description": [
          "\nExternal Url configuration for use in Kibana."
        ],
        "path": "src/core/server/external_url/external_url_config.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.IExternalUrlConfig.policy",
            "type": "Array",
            "tags": [],
            "label": "policy",
            "description": [
              "\nA set of policies describing which external urls are allowed."
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IExternalUrlPolicy",
                "text": "IExternalUrlPolicy"
              },
              "[]"
            ],
            "path": "src/core/server/external_url/external_url_config.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.IExternalUrlPolicy",
        "type": "Interface",
        "tags": [],
        "label": "IExternalUrlPolicy",
        "description": [
          "\nA policy describing whether access to an external destination is allowed."
        ],
        "path": "src/core/server/external_url/external_url_config.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.IExternalUrlPolicy.allow",
            "type": "boolean",
            "tags": [],
            "label": "allow",
            "description": [
              "\nIndicates if this policy allows or denies access to the described destination."
            ],
            "path": "src/core/server/external_url/external_url_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IExternalUrlPolicy.host",
            "type": "string",
            "tags": [],
            "label": "host",
            "description": [
              "\nOptional host describing the external destination.\nMay be combined with `protocol`.\n"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/external_url/external_url_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IExternalUrlPolicy.protocol",
            "type": "string",
            "tags": [],
            "label": "protocol",
            "description": [
              "\nOptional protocol describing the external destination.\nMay be combined with `host`.\n"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/external_url/external_url_config.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.IntervalHistogram",
        "type": "Interface",
        "tags": [],
        "label": "IntervalHistogram",
        "description": [
          "\nan IntervalHistogram object that samples and reports the event loop delay over time.\nThe delays will be reported in milliseconds.\n"
        ],
        "path": "src/core/server/metrics/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.IntervalHistogram.fromTimestamp",
            "type": "string",
            "tags": [],
            "label": "fromTimestamp",
            "description": [],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IntervalHistogram.lastUpdatedAt",
            "type": "string",
            "tags": [],
            "label": "lastUpdatedAt",
            "description": [],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IntervalHistogram.min",
            "type": "number",
            "tags": [],
            "label": "min",
            "description": [],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IntervalHistogram.max",
            "type": "number",
            "tags": [],
            "label": "max",
            "description": [],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IntervalHistogram.mean",
            "type": "number",
            "tags": [],
            "label": "mean",
            "description": [],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IntervalHistogram.exceeds",
            "type": "number",
            "tags": [],
            "label": "exceeds",
            "description": [],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IntervalHistogram.stddev",
            "type": "number",
            "tags": [],
            "label": "stddev",
            "description": [],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IntervalHistogram.percentiles",
            "type": "Object",
            "tags": [],
            "label": "percentiles",
            "description": [],
            "signature": [
              "{ 50: number; 75: number; 95: number; 99: number; }"
            ],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.IRenderOptions",
        "type": "Interface",
        "tags": [],
        "label": "IRenderOptions",
        "description": [],
        "path": "src/core/server/rendering/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.IRenderOptions.includeUserSettings",
            "type": "CompoundType",
            "tags": [],
            "label": "includeUserSettings",
            "description": [
              "\nSet whether to output user settings in the page metadata.\n`true` by default."
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/server/rendering/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.IScopedClusterClient",
        "type": "Interface",
        "tags": [],
        "label": "IScopedClusterClient",
        "description": [
          "\nServes the same purpose as the normal {@link IClusterClient | cluster client} but exposes\nan additional `asCurrentUser` method that doesn't use credentials of the Kibana internal\nuser (as `asInternalUser` does) to request Elasticsearch API, but rather passes HTTP headers\nextracted from the current user request to the API instead.\n"
        ],
        "path": "src/core/server/elasticsearch/client/scoped_cluster_client.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.IScopedClusterClient.asInternalUser",
            "type": "CompoundType",
            "tags": [],
            "label": "asInternalUser",
            "description": [
              "\nA {@link ElasticsearchClient | client} to be used to query the elasticsearch cluster\non behalf of the internal Kibana user."
            ],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\"> & { transport: { request<TResponse = unknown>(params: ",
              "TransportRequestParams",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TransportResult",
              "<TResponse, unknown>>; }; }"
            ],
            "path": "src/core/server/elasticsearch/client/scoped_cluster_client.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IScopedClusterClient.asCurrentUser",
            "type": "CompoundType",
            "tags": [],
            "label": "asCurrentUser",
            "description": [
              "\nA {@link ElasticsearchClient | client} to be used to query the elasticsearch cluster\non behalf of the user that initiated the request to the Kibana server."
            ],
            "signature": [
              "Pick<",
              "KibanaClient",
              ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\"> & { transport: { request<TResponse = unknown>(params: ",
              "TransportRequestParams",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TransportResult",
              "<TResponse, unknown>>; }; }"
            ],
            "path": "src/core/server/elasticsearch/client/scoped_cluster_client.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.IUiSettingsClient",
        "type": "Interface",
        "tags": [],
        "label": "IUiSettingsClient",
        "description": [
          "\nServer-side client that provides access to the advanced settings stored in elasticsearch.\nThe settings provide control over the behavior of the Kibana application.\nFor example, a user can specify how to display numeric or date fields.\nUsers can adjust the settings via Management UI.\n"
        ],
        "path": "src/core/server/ui_settings/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.IUiSettingsClient.getRegistered",
            "type": "Function",
            "tags": [],
            "label": "getRegistered",
            "description": [
              "\nReturns registered uiSettings values {@link UiSettingsParams}"
            ],
            "signature": [
              "() => Readonly<Record<string, Pick<",
              "UiSettingsParams",
              "<unknown>, \"name\" | \"type\" | \"description\" | \"options\" | \"order\" | \"value\" | \"category\" | \"optionLabels\" | \"requiresPageReload\" | \"readonly\" | \"sensitive\" | \"deprecation\" | \"metric\">>>"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IUiSettingsClient.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nRetrieves uiSettings values set by the user with fallbacks to default values if not specified."
            ],
            "signature": [
              "<T = any>(key: string) => Promise<T>"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.IUiSettingsClient.get.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/server/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IUiSettingsClient.getAll",
            "type": "Function",
            "tags": [],
            "label": "getAll",
            "description": [
              "\nRetrieves a set of all uiSettings values set by the user with fallbacks to default values if not specified."
            ],
            "signature": [
              "<T = any>() => Promise<Record<string, T>>"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IUiSettingsClient.getUserProvided",
            "type": "Function",
            "tags": [],
            "label": "getUserProvided",
            "description": [
              "\nRetrieves a set of all uiSettings values set by the user."
            ],
            "signature": [
              "<T = any>() => Promise<Record<string, ",
              "UserProvidedValues",
              "<T>>>"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IUiSettingsClient.setMany",
            "type": "Function",
            "tags": [],
            "label": "setMany",
            "description": [
              "\nWrites multiple uiSettings values and marks them as set by the user."
            ],
            "signature": [
              "(changes: Record<string, any>) => Promise<void>"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.IUiSettingsClient.setMany.$1",
                "type": "Object",
                "tags": [],
                "label": "changes",
                "description": [],
                "signature": [
                  "Record<string, any>"
                ],
                "path": "src/core/server/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IUiSettingsClient.set",
            "type": "Function",
            "tags": [],
            "label": "set",
            "description": [
              "\nWrites uiSettings value and marks it as set by the user."
            ],
            "signature": [
              "(key: string, value: any) => Promise<void>"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.IUiSettingsClient.set.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/server/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.IUiSettingsClient.set.$2",
                "type": "Any",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "src/core/server/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IUiSettingsClient.remove",
            "type": "Function",
            "tags": [],
            "label": "remove",
            "description": [
              "\nRemoves uiSettings value by key."
            ],
            "signature": [
              "(key: string) => Promise<void>"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.IUiSettingsClient.remove.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/server/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IUiSettingsClient.removeMany",
            "type": "Function",
            "tags": [],
            "label": "removeMany",
            "description": [
              "\nRemoves multiple uiSettings values by keys."
            ],
            "signature": [
              "(keys: string[]) => Promise<void>"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.IUiSettingsClient.removeMany.$1",
                "type": "Array",
                "tags": [],
                "label": "keys",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "src/core/server/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IUiSettingsClient.isOverridden",
            "type": "Function",
            "tags": [],
            "label": "isOverridden",
            "description": [
              "\nShows whether the uiSettings value set by the user."
            ],
            "signature": [
              "(key: string) => boolean"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.IUiSettingsClient.isOverridden.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/server/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IUiSettingsClient.isSensitive",
            "type": "Function",
            "tags": [],
            "label": "isSensitive",
            "description": [
              "\nShows whether the uiSetting is a sensitive value. Used by telemetry to not send sensitive values."
            ],
            "signature": [
              "(key: string) => boolean"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.IUiSettingsClient.isSensitive.$1",
                "type": "string",
                "tags": [],
                "label": "key",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/core/server/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.Logger",
        "type": "Interface",
        "tags": [],
        "label": "Logger",
        "description": [
          "\nLogger exposes all the necessary methods to log any type of information and\nthis is the interface used by the logging consumers including plugins.\n"
        ],
        "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.Logger.trace",
            "type": "Function",
            "tags": [],
            "label": "trace",
            "description": [
              "\nLog messages at the most detailed log level\n"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              ">(message: string, meta?: Meta | undefined) => void"
            ],
            "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.trace.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [
                  "- The log message"
                ],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.trace.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "-"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Logger.debug",
            "type": "Function",
            "tags": [],
            "label": "debug",
            "description": [
              "\nLog messages useful for debugging and interactive investigation"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              ">(message: string, meta?: Meta | undefined) => void"
            ],
            "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.debug.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [
                  "- The log message"
                ],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.debug.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "-"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Logger.info",
            "type": "Function",
            "tags": [],
            "label": "info",
            "description": [
              "\nLogs messages related to general application flow"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              ">(message: string, meta?: Meta | undefined) => void"
            ],
            "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.info.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [
                  "- The log message"
                ],
                "signature": [
                  "string"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.info.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "-"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Logger.warn",
            "type": "Function",
            "tags": [],
            "label": "warn",
            "description": [
              "\nLogs abnormal or unexpected errors or messages"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              ">(errorOrMessage: string | Error, meta?: Meta | undefined) => void"
            ],
            "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.warn.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "errorOrMessage",
                "description": [
                  "- An Error object or message string to log"
                ],
                "signature": [
                  "string | Error"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.warn.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "-"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Logger.error",
            "type": "Function",
            "tags": [],
            "label": "error",
            "description": [
              "\nLogs abnormal or unexpected errors or messages that caused a failure in the application flow\n"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              ">(errorOrMessage: string | Error, meta?: Meta | undefined) => void"
            ],
            "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.error.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "errorOrMessage",
                "description": [
                  "- An Error object or message string to log"
                ],
                "signature": [
                  "string | Error"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.error.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "-"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Logger.fatal",
            "type": "Function",
            "tags": [],
            "label": "fatal",
            "description": [
              "\nLogs abnormal or unexpected errors or messages that caused an unrecoverable failure\n"
            ],
            "signature": [
              "<Meta extends ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              " = ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LogMeta",
                "text": "LogMeta"
              },
              ">(errorOrMessage: string | Error, meta?: Meta | undefined) => void"
            ],
            "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.fatal.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "errorOrMessage",
                "description": [
                  "- An Error object or message string to log"
                ],
                "signature": [
                  "string | Error"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.fatal.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "meta",
                "description": [
                  "-"
                ],
                "signature": [
                  "Meta | undefined"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Logger.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nReturns a new {@link Logger} instance extending the current logger context.\n"
            ],
            "signature": [
              "(...childContextPaths: string[]) => ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.Logger",
                "text": "Logger"
              }
            ],
            "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.Logger.get.$1",
                "type": "Array",
                "tags": [],
                "label": "childContextPaths",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger.d.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.LoggerContextConfigInput",
        "type": "Interface",
        "tags": [],
        "label": "LoggerContextConfigInput",
        "description": [],
        "path": "src/core/server/logging/logging_config.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.LoggerContextConfigInput.appenders",
            "type": "CompoundType",
            "tags": [],
            "label": "appenders",
            "description": [],
            "signature": [
              "Record<string, ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.AppenderConfigType",
                "text": "AppenderConfigType"
              },
              "> | Map<string, ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.AppenderConfigType",
                "text": "AppenderConfigType"
              },
              "> | undefined"
            ],
            "path": "src/core/server/logging/logging_config.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.LoggerContextConfigInput.loggers",
            "type": "Array",
            "tags": [],
            "label": "loggers",
            "description": [],
            "signature": [
              "Readonly<{} & { name: string; level: ",
              "LogLevelId",
              "; appenders: string[]; }>[] | undefined"
            ],
            "path": "src/core/server/logging/logging_config.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.LoggerFactory",
        "type": "Interface",
        "tags": [],
        "label": "LoggerFactory",
        "description": [
          "\nThe single purpose of `LoggerFactory` interface is to define a way to\nretrieve a context-based logger instance.\n"
        ],
        "path": "node_modules/@kbn/logging/target_types/logger_factory.d.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.LoggerFactory.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [
              "\nReturns a `Logger` instance for the specified context.\n"
            ],
            "signature": [
              "(...contextParts: string[]) => ",
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.Logger",
                "text": "Logger"
              }
            ],
            "path": "node_modules/@kbn/logging/target_types/logger_factory.d.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.LoggerFactory.get.$1",
                "type": "Array",
                "tags": [],
                "label": "contextParts",
                "description": [
                  "- Parts of the context to return logger for. For example\nget('plugins', 'pid') will return a logger for the `plugins.pid` context."
                ],
                "signature": [
                  "string[]"
                ],
                "path": "node_modules/@kbn/logging/target_types/logger_factory.d.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.LoggingServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "LoggingServiceSetup",
        "description": [
          "\nProvides APIs to plugins for customizing the plugin's logger."
        ],
        "path": "src/core/server/logging/logging_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.LoggingServiceSetup.configure",
            "type": "Function",
            "tags": [],
            "label": "configure",
            "description": [
              "\nCustomizes the logging config for the plugin's context.\n"
            ],
            "signature": [
              "(config$: ",
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.LoggerContextConfigInput",
                "text": "LoggerContextConfigInput"
              },
              ">) => void"
            ],
            "path": "src/core/server/logging/logging_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.LoggingServiceSetup.configure.$1",
                "type": "Object",
                "tags": [],
                "label": "config$",
                "description": [],
                "signature": [
                  "Observable",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.LoggerContextConfigInput",
                    "text": "LoggerContextConfigInput"
                  },
                  ">"
                ],
                "path": "src/core/server/logging/logging_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.MetricsServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "MetricsServiceSetup",
        "description": [
          "\nAPIs to retrieves metrics gathered and exposed by the core platform.\n"
        ],
        "path": "src/core/server/metrics/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.MetricsServiceSetup.collectionInterval",
            "type": "number",
            "tags": [],
            "label": "collectionInterval",
            "description": [
              "Interval metrics are collected in milliseconds"
            ],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.MetricsServiceSetup.getOpsMetrics$",
            "type": "Function",
            "tags": [],
            "label": "getOpsMetrics$",
            "description": [
              "\nRetrieve an observable emitting the {@link OpsMetrics} gathered.\nThe observable will emit an initial value during core's `start` phase, and a new value every fixed interval of time,\nbased on the `opts.interval` configuration property.\n"
            ],
            "signature": [
              "() => ",
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.OpsMetrics",
                "text": "OpsMetrics"
              },
              ">"
            ],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.NodesVersionCompatibility",
        "type": "Interface",
        "tags": [],
        "label": "NodesVersionCompatibility",
        "description": [],
        "path": "src/core/server/elasticsearch/version_check/ensure_es_version.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.NodesVersionCompatibility.isCompatible",
            "type": "boolean",
            "tags": [],
            "label": "isCompatible",
            "description": [],
            "path": "src/core/server/elasticsearch/version_check/ensure_es_version.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.NodesVersionCompatibility.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/elasticsearch/version_check/ensure_es_version.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.NodesVersionCompatibility.incompatibleNodes",
            "type": "Array",
            "tags": [],
            "label": "incompatibleNodes",
            "description": [],
            "signature": [
              "NodeInfo[]"
            ],
            "path": "src/core/server/elasticsearch/version_check/ensure_es_version.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.NodesVersionCompatibility.warningNodes",
            "type": "Array",
            "tags": [],
            "label": "warningNodes",
            "description": [],
            "signature": [
              "NodeInfo[]"
            ],
            "path": "src/core/server/elasticsearch/version_check/ensure_es_version.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.NodesVersionCompatibility.kibanaVersion",
            "type": "string",
            "tags": [],
            "label": "kibanaVersion",
            "description": [],
            "path": "src/core/server/elasticsearch/version_check/ensure_es_version.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.NodesVersionCompatibility.nodesInfoRequestError",
            "type": "Object",
            "tags": [],
            "label": "nodesInfoRequestError",
            "description": [],
            "signature": [
              "Error | undefined"
            ],
            "path": "src/core/server/elasticsearch/version_check/ensure_es_version.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.OpsMetrics",
        "type": "Interface",
        "tags": [],
        "label": "OpsMetrics",
        "description": [
          "\nRegroups metrics gathered by all the collectors.\nThis contains metrics about the os/runtime, the kibana process and the http server.\n"
        ],
        "path": "src/core/server/metrics/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.OpsMetrics.collected_at",
            "type": "Object",
            "tags": [],
            "label": "collected_at",
            "description": [
              "Time metrics were recorded at."
            ],
            "signature": [
              "Date"
            ],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsMetrics.process",
            "type": "Object",
            "tags": [
              "deprecated"
            ],
            "label": "process",
            "description": [
              "\nProcess related metrics."
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.OpsProcessMetrics",
                "text": "OpsProcessMetrics"
              }
            ],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": true,
            "references": [
              {
                "plugin": "monitoring",
                "path": "x-pack/plugins/monitoring/server/kibana_monitoring/bulk_uploader.ts"
              },
              {
                "plugin": "kibanaUsageCollection",
                "path": "src/plugins/kibana_usage_collection/server/collectors/ops_stats/ops_stats_collector.ts"
              }
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsMetrics.processes",
            "type": "Array",
            "tags": [],
            "label": "processes",
            "description": [
              "Process related metrics. Reports an array of objects for each kibana pid."
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.OpsProcessMetrics",
                "text": "OpsProcessMetrics"
              },
              "[]"
            ],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsMetrics.os",
            "type": "Object",
            "tags": [],
            "label": "os",
            "description": [
              "OS related metrics"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.OpsOsMetrics",
                "text": "OpsOsMetrics"
              }
            ],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsMetrics.response_times",
            "type": "Object",
            "tags": [],
            "label": "response_times",
            "description": [
              "server response time stats"
            ],
            "signature": [
              "{ avg_in_millis: number; max_in_millis: number; }"
            ],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsMetrics.requests",
            "type": "Object",
            "tags": [],
            "label": "requests",
            "description": [
              "server requests stats"
            ],
            "signature": [
              "{ disconnects: number; total: number; statusCodes: Record<number, number>; }"
            ],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsMetrics.concurrent_connections",
            "type": "number",
            "tags": [],
            "label": "concurrent_connections",
            "description": [
              "number of current concurrent connections to the server"
            ],
            "path": "src/core/server/metrics/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.OpsOsMetrics",
        "type": "Interface",
        "tags": [],
        "label": "OpsOsMetrics",
        "description": [
          "\nOS related metrics"
        ],
        "path": "src/core/server/metrics/collectors/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.OpsOsMetrics.platform",
            "type": "CompoundType",
            "tags": [],
            "label": "platform",
            "description": [
              "The os platform"
            ],
            "signature": [
              "\"linux\" | \"aix\" | \"android\" | \"darwin\" | \"freebsd\" | \"haiku\" | \"openbsd\" | \"sunos\" | \"win32\" | \"cygwin\" | \"netbsd\""
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsOsMetrics.platformRelease",
            "type": "string",
            "tags": [],
            "label": "platformRelease",
            "description": [
              "The os platform release, prefixed by the platform name"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsOsMetrics.distro",
            "type": "string",
            "tags": [],
            "label": "distro",
            "description": [
              "The os distrib. Only present for linux platforms"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsOsMetrics.distroRelease",
            "type": "string",
            "tags": [],
            "label": "distroRelease",
            "description": [
              "The os distrib release, prefixed by the os distrib. Only present for linux platforms"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsOsMetrics.load",
            "type": "Object",
            "tags": [],
            "label": "load",
            "description": [
              "cpu load metrics"
            ],
            "signature": [
              "{ '1m': number; '5m': number; '15m': number; }"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsOsMetrics.memory",
            "type": "Object",
            "tags": [],
            "label": "memory",
            "description": [
              "system memory usage metrics"
            ],
            "signature": [
              "{ total_in_bytes: number; free_in_bytes: number; used_in_bytes: number; }"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsOsMetrics.uptime_in_millis",
            "type": "number",
            "tags": [],
            "label": "uptime_in_millis",
            "description": [
              "the OS uptime"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsOsMetrics.cpuacct",
            "type": "Object",
            "tags": [],
            "label": "cpuacct",
            "description": [
              "cpu accounting metrics, undefined when not running in a cgroup"
            ],
            "signature": [
              "{ control_group: string; usage_nanos: number; } | undefined"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsOsMetrics.cpu",
            "type": "Object",
            "tags": [],
            "label": "cpu",
            "description": [
              "cpu cgroup metrics, undefined when not running in a cgroup"
            ],
            "signature": [
              "{ control_group: string; cfs_period_micros: number; cfs_quota_micros: number; stat: { number_of_elapsed_periods: number; number_of_times_throttled: number; time_throttled_nanos: number; }; } | undefined"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.OpsProcessMetrics",
        "type": "Interface",
        "tags": [],
        "label": "OpsProcessMetrics",
        "description": [
          "\nProcess related metrics"
        ],
        "path": "src/core/server/metrics/collectors/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.OpsProcessMetrics.pid",
            "type": "number",
            "tags": [],
            "label": "pid",
            "description": [
              "pid of the kibana process"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsProcessMetrics.memory",
            "type": "Object",
            "tags": [],
            "label": "memory",
            "description": [
              "process memory usage"
            ],
            "signature": [
              "{ heap: { total_in_bytes: number; used_in_bytes: number; size_limit: number; }; resident_set_size_in_bytes: number; }"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsProcessMetrics.event_loop_delay",
            "type": "number",
            "tags": [],
            "label": "event_loop_delay",
            "description": [
              "mean event loop delay since last collection"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsProcessMetrics.event_loop_delay_histogram",
            "type": "Object",
            "tags": [],
            "label": "event_loop_delay_histogram",
            "description": [
              "node event loop delay histogram since last collection"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IntervalHistogram",
                "text": "IntervalHistogram"
              }
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsProcessMetrics.uptime_in_millis",
            "type": "number",
            "tags": [],
            "label": "uptime_in_millis",
            "description": [
              "uptime of the kibana process"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.OpsServerMetrics",
        "type": "Interface",
        "tags": [],
        "label": "OpsServerMetrics",
        "description": [
          "\nserver related metrics"
        ],
        "path": "src/core/server/metrics/collectors/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.OpsServerMetrics.response_times",
            "type": "Object",
            "tags": [],
            "label": "response_times",
            "description": [
              "server response time stats"
            ],
            "signature": [
              "{ avg_in_millis: number; max_in_millis: number; }"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsServerMetrics.requests",
            "type": "Object",
            "tags": [],
            "label": "requests",
            "description": [
              "server requests stats"
            ],
            "signature": [
              "{ disconnects: number; total: number; statusCodes: Record<number, number>; }"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.OpsServerMetrics.concurrent_connections",
            "type": "number",
            "tags": [],
            "label": "concurrent_connections",
            "description": [
              "number of current concurrent connections to the server"
            ],
            "path": "src/core/server/metrics/collectors/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PackageInfo",
        "type": "Interface",
        "tags": [],
        "label": "PackageInfo",
        "description": [],
        "path": "node_modules/@kbn/config/target_types/types.d.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.PackageInfo.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PackageInfo.branch",
            "type": "string",
            "tags": [],
            "label": "branch",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PackageInfo.buildNum",
            "type": "number",
            "tags": [],
            "label": "buildNum",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PackageInfo.buildSha",
            "type": "string",
            "tags": [],
            "label": "buildSha",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PackageInfo.dist",
            "type": "boolean",
            "tags": [],
            "label": "dist",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/types.d.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.Plugin",
        "type": "Interface",
        "tags": [],
        "label": "Plugin",
        "description": [
          "\nThe interface that should be returned by a `PluginInitializer` for a `standard` plugin.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.Plugin",
            "text": "Plugin"
          },
          "<TSetup, TStart, TPluginsSetup, TPluginsStart>"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.Plugin.setup",
            "type": "Function",
            "tags": [],
            "label": "setup",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CoreSetup",
                "text": "CoreSetup"
              },
              "<object, unknown>, plugins: TPluginsSetup) => TSetup"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.Plugin.setup.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CoreSetup",
                    "text": "CoreSetup"
                  },
                  "<object, unknown>"
                ],
                "path": "src/core/server/plugins/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.Plugin.setup.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsSetup"
                ],
                "path": "src/core/server/plugins/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Plugin.start",
            "type": "Function",
            "tags": [],
            "label": "start",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CoreStart",
                "text": "CoreStart"
              },
              ", plugins: TPluginsStart) => TStart"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.Plugin.start.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CoreStart",
                    "text": "CoreStart"
                  }
                ],
                "path": "src/core/server/plugins/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.Plugin.start.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsStart"
                ],
                "path": "src/core/server/plugins/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.Plugin.stop",
            "type": "Function",
            "tags": [],
            "label": "stop",
            "description": [],
            "signature": [
              "(() => void) | undefined"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PluginConfigDescriptor",
        "type": "Interface",
        "tags": [],
        "label": "PluginConfigDescriptor",
        "description": [
          "\nDescribes a plugin configuration properties.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.PluginConfigDescriptor",
            "text": "PluginConfigDescriptor"
          },
          "<T>"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.PluginConfigDescriptor.deprecations",
            "type": "Function",
            "tags": [],
            "label": "deprecations",
            "description": [
              "\nProvider for the {@link ConfigDeprecation} to apply to the plugin configuration."
            ],
            "signature": [
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.ConfigDeprecationProvider",
                "text": "ConfigDeprecationProvider"
              },
              " | undefined"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginConfigDescriptor.exposeToBrowser",
            "type": "Object",
            "tags": [],
            "label": "exposeToBrowser",
            "description": [
              "\nList of configuration properties that will be available on the client-side plugin."
            ],
            "signature": [
              "{ [P in keyof T]?: boolean | undefined; } | undefined"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginConfigDescriptor.schema",
            "type": "Object",
            "tags": [],
            "label": "schema",
            "description": [
              "\nSchema to use to validate the plugin configuration.\n\n{@link PluginConfigSchema}"
            ],
            "signature": [
              {
                "pluginId": "@kbn/config-schema",
                "scope": "server",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-server.Type",
                "text": "Type"
              },
              "<T>"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginConfigDescriptor.exposeToUsage",
            "type": "Object",
            "tags": [],
            "label": "exposeToUsage",
            "description": [
              "\nExpose non-default configs to usage collection to be sent via telemetry.\nset a config to `true` to report the actual changed config value.\nset a config to `false` to report the changed config value as [redacted].\n\nAll changed configs except booleans and numbers will be reported\nas [redacted] unless otherwise specified.\n\n{@link MakeUsageFromSchema}"
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.MakeUsageFromSchema",
                "text": "MakeUsageFromSchema"
              },
              "<T> | undefined"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PluginInitializerContext",
        "type": "Interface",
        "tags": [],
        "label": "PluginInitializerContext",
        "description": [
          "\nContext that's available to plugins during initialization stage.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.PluginInitializerContext",
            "text": "PluginInitializerContext"
          },
          "<ConfigSchema>"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.PluginInitializerContext.opaqueId",
            "type": "Uncategorized",
            "tags": [],
            "label": "opaqueId",
            "description": [],
            "signature": [
              "symbol"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginInitializerContext.env",
            "type": "Object",
            "tags": [],
            "label": "env",
            "description": [],
            "signature": [
              "{ mode: ",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.EnvironmentMode",
                "text": "EnvironmentMode"
              },
              "; packageInfo: Readonly<",
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.PackageInfo",
                "text": "PackageInfo"
              },
              ">; instanceUuid: string; configs: readonly string[]; }"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginInitializerContext.logger",
            "type": "Object",
            "tags": [],
            "label": "logger",
            "description": [
              "\n{@link LoggerFactory | logger factory} instance already bound to the plugin's logging context\n"
            ],
            "signature": [
              {
                "pluginId": "@kbn/logging",
                "scope": "server",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-server.LoggerFactory",
                "text": "LoggerFactory"
              }
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginInitializerContext.config",
            "type": "Object",
            "tags": [],
            "label": "config",
            "description": [
              "\nAccessors for the plugin's configuration"
            ],
            "signature": [
              "{ legacy: { globalConfig$: ",
              "Observable",
              "<Readonly<{ elasticsearch: Readonly<{ readonly requestTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; }>; readonly shardTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; }>; readonly pingTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; }>; }>; path: Readonly<{ readonly data: string; }>; savedObjects: Readonly<{ readonly maxImportPayloadBytes: Readonly<{ isGreaterThan: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "server",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-server.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; isLessThan: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "server",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-server.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; isEqualTo: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "server",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-server.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; getValueInBytes: () => number; toString: (returnUnit?: \"b\" | \"kb\" | \"mb\" | \"gb\" | undefined) => string; }>; }>; }>>; get: () => Readonly<{ elasticsearch: Readonly<{ readonly requestTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; }>; readonly shardTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; }>; readonly pingTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; }>; }>; path: Readonly<{ readonly data: string; }>; savedObjects: Readonly<{ readonly maxImportPayloadBytes: Readonly<{ isGreaterThan: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "server",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-server.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; isLessThan: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "server",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-server.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; isEqualTo: (other: ",
              {
                "pluginId": "@kbn/config-schema",
                "scope": "server",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-server.ByteSizeValue",
                "text": "ByteSizeValue"
              },
              ") => boolean; getValueInBytes: () => number; toString: (returnUnit?: \"b\" | \"kb\" | \"mb\" | \"gb\" | undefined) => string; }>; }>; }>; }; create: <T = ConfigSchema>() => ",
              "Observable",
              "<T>; get: <T = ConfigSchema>() => T; }"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PluginManifest",
        "type": "Interface",
        "tags": [],
        "label": "PluginManifest",
        "description": [
          "\nDescribes the set of required and optional properties plugin can define in its\nmandatory JSON manifest file.\n"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nIdentifier of the plugin. Must be a string in camelCase. Part of a plugin public contract.\nOther plugins leverage it to access plugin API, navigate to the plugin, etc."
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [
              "\nVersion of the plugin."
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.kibanaVersion",
            "type": "string",
            "tags": [],
            "label": "kibanaVersion",
            "description": [
              "\nThe version of Kibana the plugin is compatible with, defaults to \"version\"."
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.type",
            "type": "Enum",
            "tags": [],
            "label": "type",
            "description": [
              "\nType of the plugin, defaults to `standard`."
            ],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.PluginType",
                "text": "PluginType"
              }
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.configPath",
            "type": "CompoundType",
            "tags": [],
            "label": "configPath",
            "description": [
              "\nRoot {@link ConfigPath | configuration path} used by the plugin, defaults\nto \"id\" in snake_case format.\n"
            ],
            "signature": [
              "string | string[]"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.requiredPlugins",
            "type": "Object",
            "tags": [],
            "label": "requiredPlugins",
            "description": [
              "\nAn optional list of the other plugins that **must be** installed and enabled\nfor this plugin to function properly."
            ],
            "signature": [
              "readonly string[]"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.requiredBundles",
            "type": "Object",
            "tags": [],
            "label": "requiredBundles",
            "description": [
              "\nList of plugin ids that this plugin's UI code imports modules from that are\nnot in `requiredPlugins`.\n"
            ],
            "signature": [
              "readonly string[]"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.optionalPlugins",
            "type": "Object",
            "tags": [],
            "label": "optionalPlugins",
            "description": [
              "\nAn optional list of the other plugins that if installed and enabled **may be**\nleveraged by this plugin for some additional functionality but otherwise are\nnot required for this plugin to work properly."
            ],
            "signature": [
              "readonly string[]"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.ui",
            "type": "boolean",
            "tags": [],
            "label": "ui",
            "description": [
              "\nSpecifies whether plugin includes some client/browser specific functionality\nthat should be included into client bundle via `public/ui_plugin.js` file."
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.server",
            "type": "boolean",
            "tags": [],
            "label": "server",
            "description": [
              "\nSpecifies whether plugin includes some server-side specific functionality."
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.extraPublicDirs",
            "type": "Array",
            "tags": [
              "deprecated"
            ],
            "label": "extraPublicDirs",
            "description": [
              "\nSpecifies directory names that can be imported by other ui-plugins built\nusing the same instance of the @kbn/optimizer. A temporary measure we plan\nto replace with better mechanisms for sharing static code between plugins"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": true,
            "references": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.serviceFolders",
            "type": "Object",
            "tags": [],
            "label": "serviceFolders",
            "description": [
              "\nOnly used for the automatically generated API documentation. Specifying service\nfolders will cause your plugin API reference to be broken up into sub sections."
            ],
            "signature": [
              "readonly string[] | undefined"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.owner",
            "type": "Object",
            "tags": [],
            "label": "owner",
            "description": [],
            "signature": [
              "{ readonly name: string; readonly githubTeam?: string | undefined; }"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PluginManifest.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [
              "\nTODO: make required once all plugins specify this.\nA brief description of what this plugin does and any capabilities it provides."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PrebootPlugin",
        "type": "Interface",
        "tags": [],
        "label": "PrebootPlugin",
        "description": [
          "\nThe interface that should be returned by a `PluginInitializer` for a `preboot` plugin.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.PrebootPlugin",
            "text": "PrebootPlugin"
          },
          "<TSetup, TPluginsSetup>"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.PrebootPlugin.setup",
            "type": "Function",
            "tags": [],
            "label": "setup",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CorePreboot",
                "text": "CorePreboot"
              },
              ", plugins: TPluginsSetup) => TSetup"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.PrebootPlugin.setup.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CorePreboot",
                    "text": "CorePreboot"
                  }
                ],
                "path": "src/core/server/plugins/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.PrebootPlugin.setup.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "TPluginsSetup"
                ],
                "path": "src/core/server/plugins/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PrebootPlugin.stop",
            "type": "Function",
            "tags": [],
            "label": "stop",
            "description": [],
            "signature": [
              "(() => void) | undefined"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PrebootServicePreboot",
        "type": "Interface",
        "tags": [],
        "label": "PrebootServicePreboot",
        "description": [
          "\nKibana Preboot Service allows to control the boot flow of Kibana. Preboot plugins can use it to hold the boot until certain condition is met.\n"
        ],
        "path": "src/core/server/preboot/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.PrebootServicePreboot.isSetupOnHold",
            "type": "Function",
            "tags": [],
            "label": "isSetupOnHold",
            "description": [
              "\nIndicates whether Kibana is currently on hold and cannot proceed to `setup` yet."
            ],
            "signature": [
              "() => boolean"
            ],
            "path": "src/core/server/preboot/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.PrebootServicePreboot.holdSetupUntilResolved",
            "type": "Function",
            "tags": [],
            "label": "holdSetupUntilResolved",
            "description": [
              "\nRegisters a `Promise` as a precondition before Kibana can proceed to `setup`. This method can be invoked multiple\ntimes and from multiple `preboot` plugins. Kibana will proceed to `setup` only when all registered `Promises`\ninstances are resolved, or it will shut down if any of them is rejected."
            ],
            "signature": [
              "(reason: string, promise: Promise<{ shouldReloadConfig: boolean; } | undefined>) => void"
            ],
            "path": "src/core/server/preboot/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.PrebootServicePreboot.holdSetupUntilResolved.$1",
                "type": "string",
                "tags": [],
                "label": "reason",
                "description": [
                  "A string that explains the reason why this promise should hold `setup`. It's supposed to be a human\nreadable string that will be recorded in the logs or standard output."
                ],
                "signature": [
                  "string"
                ],
                "path": "src/core/server/preboot/types.ts",
                "deprecated": false,
                "isRequired": true
              },
              {
                "parentPluginId": "core",
                "id": "def-server.PrebootServicePreboot.holdSetupUntilResolved.$2",
                "type": "Object",
                "tags": [],
                "label": "promise",
                "description": [
                  "A `Promise` that should resolved before Kibana can proceed to `setup`."
                ],
                "signature": [
                  "Promise<{ shouldReloadConfig: boolean; } | undefined>"
                ],
                "path": "src/core/server/preboot/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.RegisterDeprecationsConfig",
        "type": "Interface",
        "tags": [],
        "label": "RegisterDeprecationsConfig",
        "description": [],
        "path": "src/core/server/deprecations/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.RegisterDeprecationsConfig.getDeprecations",
            "type": "Function",
            "tags": [],
            "label": "getDeprecations",
            "description": [],
            "signature": [
              "(context: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.GetDeprecationsContext",
                "text": "GetDeprecationsContext"
              },
              ") => ",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "server",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-server.MaybePromise",
                "text": "MaybePromise"
              },
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.DeprecationsDetails",
                "text": "DeprecationsDetails"
              },
              "[]>"
            ],
            "path": "src/core/server/deprecations/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.RegisterDeprecationsConfig.getDeprecations.$1",
                "type": "Object",
                "tags": [],
                "label": "context",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.GetDeprecationsContext",
                    "text": "GetDeprecationsContext"
                  }
                ],
                "path": "src/core/server/deprecations/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.RequestHandlerContext",
        "type": "Interface",
        "tags": [],
        "label": "RequestHandlerContext",
        "description": [
          "\nPlugin specific context passed to a route handler.\n\nProvides the following clients and services:\n   - {@link SavedObjectsClient | savedObjects.client} - Saved Objects client\n     which uses the credentials of the incoming request\n   - {@link ISavedObjectTypeRegistry | savedObjects.typeRegistry} - Type registry containing\n     all the registered types.\n   - {@link IScopedClusterClient | elasticsearch.client} - Elasticsearch\n     data client which uses the credentials of the incoming request\n   - {@link IUiSettingsClient | uiSettings.client} - uiSettings client\n     which uses the credentials of the incoming request\n"
        ],
        "path": "src/core/server/index.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.RequestHandlerContext.core",
            "type": "Object",
            "tags": [],
            "label": "core",
            "description": [],
            "signature": [
              "{ savedObjects: { client: Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsClient",
                "text": "SavedObjectsClient"
              },
              ", \"create\" | \"bulkCreate\" | \"checkConflicts\" | \"delete\" | \"find\" | \"bulkGet\" | \"bulkResolve\" | \"get\" | \"resolve\" | \"update\" | \"collectMultiNamespaceReferences\" | \"updateObjectsSpaces\" | \"bulkUpdate\" | \"removeReferencesTo\" | \"openPointInTimeForType\" | \"closePointInTime\" | \"createPointInTimeFinder\" | \"errors\">; typeRegistry: Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectTypeRegistry",
                "text": "SavedObjectTypeRegistry"
              },
              ", \"getType\" | \"getVisibleTypes\" | \"getAllTypes\" | \"getImportableAndExportableTypes\" | \"isNamespaceAgnostic\" | \"isSingleNamespace\" | \"isMultiNamespace\" | \"isShareable\" | \"isHidden\" | \"getIndex\" | \"isImportableAndExportable\">; getClient: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsClientProviderOptions",
                "text": "SavedObjectsClientProviderOptions"
              },
              " | undefined) => Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsClient",
                "text": "SavedObjectsClient"
              },
              ", \"create\" | \"bulkCreate\" | \"checkConflicts\" | \"delete\" | \"find\" | \"bulkGet\" | \"bulkResolve\" | \"get\" | \"resolve\" | \"update\" | \"collectMultiNamespaceReferences\" | \"updateObjectsSpaces\" | \"bulkUpdate\" | \"removeReferencesTo\" | \"openPointInTimeForType\" | \"closePointInTime\" | \"createPointInTimeFinder\" | \"errors\">; getExporter: (client: Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsClient",
                "text": "SavedObjectsClient"
              },
              ", \"create\" | \"bulkCreate\" | \"checkConflicts\" | \"delete\" | \"find\" | \"bulkGet\" | \"bulkResolve\" | \"get\" | \"resolve\" | \"update\" | \"collectMultiNamespaceReferences\" | \"updateObjectsSpaces\" | \"bulkUpdate\" | \"removeReferencesTo\" | \"openPointInTimeForType\" | \"closePointInTime\" | \"createPointInTimeFinder\" | \"errors\">) => Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsExporter",
                "text": "SavedObjectsExporter"
              },
              ", \"exportByTypes\" | \"exportByObjects\">; getImporter: (client: Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsClient",
                "text": "SavedObjectsClient"
              },
              ", \"create\" | \"bulkCreate\" | \"checkConflicts\" | \"delete\" | \"find\" | \"bulkGet\" | \"bulkResolve\" | \"get\" | \"resolve\" | \"update\" | \"collectMultiNamespaceReferences\" | \"updateObjectsSpaces\" | \"bulkUpdate\" | \"removeReferencesTo\" | \"openPointInTimeForType\" | \"closePointInTime\" | \"createPointInTimeFinder\" | \"errors\">) => Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsImporter",
                "text": "SavedObjectsImporter"
              },
              ", \"import\" | \"resolveImportErrors\">; }; elasticsearch: { client: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IScopedClusterClient",
                "text": "IScopedClusterClient"
              },
              "; }; uiSettings: { client: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IUiSettingsClient",
                "text": "IUiSettingsClient"
              },
              "; }; deprecations: { client: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.DeprecationsClient",
                "text": "DeprecationsClient"
              },
              "; }; }"
            ],
            "path": "src/core/server/index.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ResolveCapabilitiesOptions",
        "type": "Interface",
        "tags": [],
        "label": "ResolveCapabilitiesOptions",
        "description": [
          "\nDefines a set of additional options for the `resolveCapabilities` method of {@link CapabilitiesStart}.\n"
        ],
        "path": "src/core/server/capabilities/capabilities_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ResolveCapabilitiesOptions.useDefaultCapabilities",
            "type": "boolean",
            "tags": [],
            "label": "useDefaultCapabilities",
            "description": [
              "\nIndicates if capability switchers are supposed to return a default set of capabilities."
            ],
            "path": "src/core/server/capabilities/capabilities_service.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.SavedObject",
        "type": "Interface",
        "tags": [],
        "label": "SavedObject",
        "description": [],
        "signature": [
          "SavedObject",
          "<T>"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "The ID of this Saved Object, guaranteed to be unique for all objects of the same `type`"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [
              " The type of Saved Object. Each plugin can define it's own custom Saved Object types."
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.version",
            "type": "string",
            "tags": [],
            "label": "version",
            "description": [
              "An opaque version number which changes on each successful write operation. Can be used for implementing optimistic concurrency control."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.updated_at",
            "type": "string",
            "tags": [],
            "label": "updated_at",
            "description": [
              "Timestamp of the last time this document had been updated."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.error",
            "type": "Object",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "SavedObjectError",
              " | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.attributes",
            "type": "Uncategorized",
            "tags": [],
            "label": "attributes",
            "description": [
              "{@inheritdoc SavedObjectAttributes}"
            ],
            "signature": [
              "T"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.references",
            "type": "Array",
            "tags": [],
            "label": "references",
            "description": [
              "{@inheritdoc SavedObjectReference}"
            ],
            "signature": [
              "SavedObjectReference",
              "[]"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.migrationVersion",
            "type": "Object",
            "tags": [],
            "label": "migrationVersion",
            "description": [
              "{@inheritdoc SavedObjectsMigrationVersion}"
            ],
            "signature": [
              "SavedObjectsMigrationVersion",
              " | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.coreMigrationVersion",
            "type": "string",
            "tags": [],
            "label": "coreMigrationVersion",
            "description": [
              "A semver value that is used when upgrading objects between Kibana versions."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.namespaces",
            "type": "Array",
            "tags": [],
            "label": "namespaces",
            "description": [
              "\nSpace(s) that this saved object exists in. This attribute is not used for \"global\" saved object types which are registered with\n`namespaceType: 'agnostic'`."
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObject.originId",
            "type": "string",
            "tags": [],
            "label": "originId",
            "description": [
              "\nThe ID of the saved object this originated from. This is set if this object's `id` was regenerated; that can happen during migration\nfrom a legacy single-namespace type, or during import. It is only set during migration or create operations. This is used during import\nto ensure that ID regeneration is deterministic, so saved objects will be overwritten if they are imported multiple times into a given\nspace."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.SavedObjectAttributes",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectAttributes",
        "description": [
          "\nThe data for a Saved Object is stored as an object in the `attributes`\nproperty.\n"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObjectAttributes.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.SavedObjectReference",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectReference",
        "description": [
          "\nA reference to another saved object.\n"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObjectReference.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObjectReference.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObjectReference.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.SavedObjectsMigrationVersion",
        "type": "Interface",
        "tags": [],
        "label": "SavedObjectsMigrationVersion",
        "description": [
          "\nInformation about the migrations that have been applied to this SavedObject.\nWhen Kibana starts up, KibanaMigrator detects outdated documents and\nmigrates them based on this value. For each migration that has been applied,\nthe plugin's name is used as a key and the latest migration version as the\nvalue.\n"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.SavedObjectsMigrationVersion.Unnamed",
            "type": "Any",
            "tags": [],
            "label": "Unnamed",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/core/types/saved_objects.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.SearchResponse",
        "type": "Interface",
        "tags": [],
        "label": "SearchResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.SearchResponse",
            "text": "SearchResponse"
          },
          "<T>"
        ],
        "path": "src/core/server/elasticsearch/client/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.SearchResponse.took",
            "type": "number",
            "tags": [],
            "label": "took",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SearchResponse.timed_out",
            "type": "boolean",
            "tags": [],
            "label": "timed_out",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SearchResponse._scroll_id",
            "type": "string",
            "tags": [],
            "label": "_scroll_id",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SearchResponse._shards",
            "type": "Object",
            "tags": [],
            "label": "_shards",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ShardsResponse",
                "text": "ShardsResponse"
              }
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SearchResponse.hits",
            "type": "Object",
            "tags": [],
            "label": "hits",
            "description": [],
            "signature": [
              "{ total: number; max_score: number; hits: { _index: string; _type: string; _id: string; _score: number; _source: T; _version?: number | undefined; _explanation?: ",
              "Explanation",
              " | undefined; fields?: any; highlight?: any; inner_hits?: any; matched_queries?: string[] | undefined; sort?: unknown[] | undefined; }[]; }"
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SearchResponse.aggregations",
            "type": "Any",
            "tags": [],
            "label": "aggregations",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.SearchResponse.pit_id",
            "type": "string",
            "tags": [],
            "label": "pit_id",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ServiceStatus",
        "type": "Interface",
        "tags": [],
        "label": "ServiceStatus",
        "description": [
          "\nThe current status of a service at a point in time.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.ServiceStatus",
            "text": "ServiceStatus"
          },
          "<Meta>"
        ],
        "path": "src/core/server/status/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ServiceStatus.level",
            "type": "CompoundType",
            "tags": [],
            "label": "level",
            "description": [
              "\nThe current availability level of the service."
            ],
            "signature": [
              "Readonly<{ toString: () => \"available\"; valueOf: () => 0; toJSON: () => \"available\"; }> | Readonly<{ toString: () => \"degraded\"; valueOf: () => 1; toJSON: () => \"degraded\"; }> | Readonly<{ toString: () => \"unavailable\"; valueOf: () => 2; toJSON: () => \"unavailable\"; }> | Readonly<{ toString: () => \"critical\"; valueOf: () => 3; toJSON: () => \"critical\"; }>"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ServiceStatus.summary",
            "type": "string",
            "tags": [],
            "label": "summary",
            "description": [
              "\nA high-level summary of the service status."
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ServiceStatus.detail",
            "type": "string",
            "tags": [],
            "label": "detail",
            "description": [
              "\nA more detailed description of the service status."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ServiceStatus.documentationUrl",
            "type": "string",
            "tags": [],
            "label": "documentationUrl",
            "description": [
              "\nA URL to open in a new tab about how to resolve or troubleshoot the problem."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ServiceStatus.meta",
            "type": "Uncategorized",
            "tags": [],
            "label": "meta",
            "description": [
              "\nAny JSON-serializable data to be included in the HTTP API response. Useful for providing more fine-grained,\nmachine-readable information about the service status. May include status information for underlying features."
            ],
            "signature": [
              "Meta | undefined"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ShardsInfo",
        "type": "Interface",
        "tags": [],
        "label": "ShardsInfo",
        "description": [],
        "path": "src/core/server/elasticsearch/client/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ShardsInfo.total",
            "type": "number",
            "tags": [],
            "label": "total",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ShardsInfo.successful",
            "type": "number",
            "tags": [],
            "label": "successful",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ShardsInfo.skipped",
            "type": "number",
            "tags": [],
            "label": "skipped",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ShardsInfo.failed",
            "type": "number",
            "tags": [],
            "label": "failed",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ShardsResponse",
        "type": "Interface",
        "tags": [],
        "label": "ShardsResponse",
        "description": [
          "\nAll response typings are maintained until elasticsearch-js provides them out of the box\nhttps://github.com/elastic/elasticsearch-js/pull/970\n"
        ],
        "path": "src/core/server/elasticsearch/client/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ShardsResponse.total",
            "type": "number",
            "tags": [],
            "label": "total",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ShardsResponse.successful",
            "type": "number",
            "tags": [],
            "label": "successful",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ShardsResponse.failed",
            "type": "number",
            "tags": [],
            "label": "failed",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ShardsResponse.skipped",
            "type": "number",
            "tags": [],
            "label": "skipped",
            "description": [],
            "path": "src/core/server/elasticsearch/client/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.StatusServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "StatusServiceSetup",
        "description": [
          "\nAPI for accessing status of Core and this plugin's dependencies as well as for customizing this plugin's status.\n"
        ],
        "path": "src/core/server/status/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.StatusServiceSetup.core$",
            "type": "Object",
            "tags": [],
            "label": "core$",
            "description": [
              "\nCurrent status for all Core services."
            ],
            "signature": [
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CoreStatus",
                "text": "CoreStatus"
              },
              ">"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.StatusServiceSetup.overall$",
            "type": "Object",
            "tags": [],
            "label": "overall$",
            "description": [
              "\nOverall system status for all of Kibana.\n"
            ],
            "signature": [
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ServiceStatus",
                "text": "ServiceStatus"
              },
              "<unknown>>"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.StatusServiceSetup.set",
            "type": "Function",
            "tags": [],
            "label": "set",
            "description": [
              "\nAllows a plugin to specify a custom status dependent on its own criteria.\nCompletely overrides the default inherited status.\n"
            ],
            "signature": [
              "(status$: ",
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ServiceStatus",
                "text": "ServiceStatus"
              },
              "<unknown>>) => void"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.StatusServiceSetup.set.$1",
                "type": "Object",
                "tags": [],
                "label": "status$",
                "description": [],
                "signature": [
                  "Observable",
                  "<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.ServiceStatus",
                    "text": "ServiceStatus"
                  },
                  "<unknown>>"
                ],
                "path": "src/core/server/status/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "core",
            "id": "def-server.StatusServiceSetup.dependencies$",
            "type": "Object",
            "tags": [],
            "label": "dependencies$",
            "description": [
              "\nCurrent status for all plugins this plugin depends on.\nEach key of the `Record` is a plugin id."
            ],
            "signature": [
              "Observable",
              "<Record<string, ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ServiceStatus",
                "text": "ServiceStatus"
              },
              "<unknown>>>"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.StatusServiceSetup.derivedStatus$",
            "type": "Object",
            "tags": [],
            "label": "derivedStatus$",
            "description": [
              "\nThe status of this plugin as derived from its dependencies.\n"
            ],
            "signature": [
              "Observable",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.ServiceStatus",
                "text": "ServiceStatus"
              },
              "<unknown>>"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.StatusServiceSetup.isStatusPageAnonymous",
            "type": "Function",
            "tags": [],
            "label": "isStatusPageAnonymous",
            "description": [
              "\nWhether or not the status HTTP APIs are available to unauthenticated users when an authentication provider is\npresent."
            ],
            "signature": [
              "() => boolean"
            ],
            "path": "src/core/server/status/types.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.UiSettingsParams",
        "type": "Interface",
        "tags": [],
        "label": "UiSettingsParams",
        "description": [
          "\nUiSettings parameters defined by the plugins."
        ],
        "signature": [
          "UiSettingsParams",
          "<T>"
        ],
        "path": "src/core/types/ui_settings.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "title in the UI"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.value",
            "type": "Uncategorized",
            "tags": [],
            "label": "value",
            "description": [
              "default value to fall back to if a user doesn't provide any"
            ],
            "signature": [
              "T | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [
              "description provided to a user in UI"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.category",
            "type": "Array",
            "tags": [],
            "label": "category",
            "description": [
              "used to group the configured setting in the UI"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.options",
            "type": "Array",
            "tags": [],
            "label": "options",
            "description": [
              "array of permitted values for this setting"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.optionLabels",
            "type": "Object",
            "tags": [],
            "label": "optionLabels",
            "description": [
              "text labels for 'select' type UI element"
            ],
            "signature": [
              "Record<string, string> | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.requiresPageReload",
            "type": "CompoundType",
            "tags": [],
            "label": "requiresPageReload",
            "description": [
              "a flag indicating whether new value applying requires page reloading"
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.readonly",
            "type": "CompoundType",
            "tags": [],
            "label": "readonly",
            "description": [
              "a flag indicating that value cannot be changed"
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.sensitive",
            "type": "CompoundType",
            "tags": [],
            "label": "sensitive",
            "description": [
              "\na flag indicating that value might contain user sensitive data.\nused by telemetry to mask the value of the setting when sent."
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [
              "defines a type of UI element {@link UiSettingsType}"
            ],
            "signature": [
              "\"string\" | \"number\" | \"boolean\" | \"undefined\" | \"json\" | \"color\" | \"image\" | \"markdown\" | \"select\" | \"array\" | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.deprecation",
            "type": "Object",
            "tags": [],
            "label": "deprecation",
            "description": [
              "optional deprecation information. Used to generate a deprecation warning."
            ],
            "signature": [
              "DeprecationSettings",
              " | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.order",
            "type": "number",
            "tags": [],
            "label": "order",
            "description": [
              "\nindex of the settings within its category (ascending order, smallest will be displayed first).\nUsed for ordering in the UI.\n"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.schema",
            "type": "Object",
            "tags": [],
            "label": "schema",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/config-schema",
                "scope": "server",
                "docId": "kibKbnConfigSchemaPluginApi",
                "section": "def-server.Type",
                "text": "Type"
              },
              "<T>"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsParams.metric",
            "type": "Object",
            "tags": [
              "deprecated"
            ],
            "label": "metric",
            "description": [
              "\nMetric to track once this property changes"
            ],
            "signature": [
              "{ type: ",
              {
                "pluginId": "@kbn/analytics",
                "scope": "common",
                "docId": "kibKbnAnalyticsPluginApi",
                "section": "def-common.UiCounterMetricType",
                "text": "UiCounterMetricType"
              },
              "; name: string; } | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": true,
            "references": [
              {
                "plugin": "advancedSettings",
                "path": "src/plugins/advanced_settings/public/management_app/lib/to_editable_config.ts"
              },
              {
                "plugin": "discover",
                "path": "src/plugins/discover/server/ui_settings.ts"
              },
              {
                "plugin": "discover",
                "path": "src/plugins/discover/server/ui_settings.ts"
              },
              {
                "plugin": "discover",
                "path": "src/plugins/discover/server/ui_settings.ts"
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.UiSettingsServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "UiSettingsServiceSetup",
        "description": [],
        "path": "src/core/server/ui_settings/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsServiceSetup.register",
            "type": "Function",
            "tags": [],
            "label": "register",
            "description": [
              "\nSets settings with default values for the uiSettings."
            ],
            "signature": [
              "(settings: Record<string, ",
              "UiSettingsParams",
              "<unknown>>) => void"
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.UiSettingsServiceSetup.register.$1",
                "type": "Object",
                "tags": [],
                "label": "settings",
                "description": [],
                "signature": [
                  "Record<string, ",
                  "UiSettingsParams",
                  "<unknown>>"
                ],
                "path": "src/core/server/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.UiSettingsServiceStart",
        "type": "Interface",
        "tags": [],
        "label": "UiSettingsServiceStart",
        "description": [],
        "path": "src/core/server/ui_settings/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.UiSettingsServiceStart.asScopedToClient",
            "type": "Function",
            "tags": [],
            "label": "asScopedToClient",
            "description": [
              "\nCreates a {@link IUiSettingsClient} with provided *scoped* saved objects client.\n\nThis should only be used in the specific case where the client needs to be accessed\nfrom outside of the scope of a {@link RequestHandler}.\n"
            ],
            "signature": [
              "(savedObjectsClient: Pick<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreSavedObjectsPluginApi",
                "section": "def-server.SavedObjectsClient",
                "text": "SavedObjectsClient"
              },
              ", \"create\" | \"bulkCreate\" | \"checkConflicts\" | \"delete\" | \"find\" | \"bulkGet\" | \"bulkResolve\" | \"get\" | \"resolve\" | \"update\" | \"collectMultiNamespaceReferences\" | \"updateObjectsSpaces\" | \"bulkUpdate\" | \"removeReferencesTo\" | \"openPointInTimeForType\" | \"closePointInTime\" | \"createPointInTimeFinder\" | \"errors\">) => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.IUiSettingsClient",
                "text": "IUiSettingsClient"
              }
            ],
            "path": "src/core/server/ui_settings/types.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.UiSettingsServiceStart.asScopedToClient.$1",
                "type": "Object",
                "tags": [],
                "label": "savedObjectsClient",
                "description": [],
                "signature": [
                  "Pick<",
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreSavedObjectsPluginApi",
                    "section": "def-server.SavedObjectsClient",
                    "text": "SavedObjectsClient"
                  },
                  ", \"create\" | \"bulkCreate\" | \"checkConflicts\" | \"delete\" | \"find\" | \"bulkGet\" | \"bulkResolve\" | \"get\" | \"resolve\" | \"update\" | \"collectMultiNamespaceReferences\" | \"updateObjectsSpaces\" | \"bulkUpdate\" | \"removeReferencesTo\" | \"openPointInTimeForType\" | \"closePointInTime\" | \"createPointInTimeFinder\" | \"errors\">"
                ],
                "path": "src/core/server/ui_settings/types.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.UserProvidedValues",
        "type": "Interface",
        "tags": [],
        "label": "UserProvidedValues",
        "description": [
          "\nDescribes the values explicitly set by user."
        ],
        "signature": [
          "UserProvidedValues",
          "<T>"
        ],
        "path": "src/core/types/ui_settings.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.UserProvidedValues.userValue",
            "type": "Uncategorized",
            "tags": [],
            "label": "userValue",
            "description": [],
            "signature": [
              "T | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.UserProvidedValues.isOverridden",
            "type": "CompoundType",
            "tags": [],
            "label": "isOverridden",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/core/types/ui_settings.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "parentPluginId": "core",
        "id": "def-server.PluginType",
        "type": "Enum",
        "tags": [],
        "label": "PluginType",
        "description": [],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "core",
        "id": "def-server.AddConfigDeprecation",
        "type": "Type",
        "tags": [],
        "label": "AddConfigDeprecation",
        "description": [
          "\nConfig deprecation hook used when invoking a {@link ConfigDeprecation}\n"
        ],
        "signature": [
          "(details: ",
          "DeprecatedConfigDetails",
          ") => void"
        ],
        "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.AddConfigDeprecation.$1",
            "type": "Object",
            "tags": [],
            "label": "details",
            "description": [],
            "signature": [
              "DeprecatedConfigDetails"
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.APP_WRAPPER_CLASS",
        "type": "string",
        "tags": [],
        "label": "APP_WRAPPER_CLASS",
        "description": [
          "\nThe class name for top level *and* nested application wrappers to ensure proper layout"
        ],
        "signature": [
          "\"kbnAppWrapper\""
        ],
        "path": "src/core/utils/app_wrapper_class.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.AppenderConfigType",
        "type": "Type",
        "tags": [],
        "label": "AppenderConfigType",
        "description": [],
        "signature": [
          "ConsoleAppenderConfig",
          " | ",
          "FileAppenderConfig",
          " | ",
          "RewriteAppenderConfig",
          " | ",
          "RollingFileAppenderConfig"
        ],
        "path": "src/core/server/logging/appenders/appenders.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.CapabilitiesProvider",
        "type": "Type",
        "tags": [],
        "label": "CapabilitiesProvider",
        "description": [
          "\nSee {@link CapabilitiesSetup}"
        ],
        "signature": [
          "() => Partial<",
          "Capabilities",
          ">"
        ],
        "path": "src/core/server/capabilities/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.CapabilitiesSwitcher",
        "type": "Type",
        "tags": [],
        "label": "CapabilitiesSwitcher",
        "description": [
          "\nSee {@link CapabilitiesSetup}"
        ],
        "signature": [
          "(request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any>, uiCapabilities: ",
          "Capabilities",
          ", useDefaultCapabilities: boolean) => Partial<",
          "Capabilities",
          "> | Promise<Partial<",
          "Capabilities",
          ">>"
        ],
        "path": "src/core/server/capabilities/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.CapabilitiesSwitcher.$1",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>"
            ],
            "path": "src/core/server/capabilities/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CapabilitiesSwitcher.$2",
            "type": "Object",
            "tags": [],
            "label": "uiCapabilities",
            "description": [],
            "signature": [
              "Capabilities"
            ],
            "path": "src/core/server/capabilities/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.CapabilitiesSwitcher.$3",
            "type": "boolean",
            "tags": [],
            "label": "useDefaultCapabilities",
            "description": [],
            "path": "src/core/server/capabilities/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ConfigDeprecation",
        "type": "Type",
        "tags": [],
        "label": "ConfigDeprecation",
        "description": [
          "\nConfiguration deprecation returned from {@link ConfigDeprecationProvider} that handles a single deprecation from the configuration.\n"
        ],
        "signature": [
          "(config: Readonly<{ [x: string]: any; }>, fromPath: string, addDeprecation: ",
          {
            "pluginId": "@kbn/config",
            "scope": "server",
            "docId": "kibKbnConfigPluginApi",
            "section": "def-server.AddConfigDeprecation",
            "text": "AddConfigDeprecation"
          },
          ", context: ",
          {
            "pluginId": "@kbn/config",
            "scope": "server",
            "docId": "kibKbnConfigPluginApi",
            "section": "def-server.ConfigDeprecationContext",
            "text": "ConfigDeprecationContext"
          },
          ") => void | ",
          {
            "pluginId": "@kbn/config",
            "scope": "server",
            "docId": "kibKbnConfigPluginApi",
            "section": "def-server.ConfigDeprecationCommand",
            "text": "ConfigDeprecationCommand"
          }
        ],
        "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecation.$1",
            "type": "Object",
            "tags": [],
            "label": "config",
            "description": [
              "must not be mutated, return {@link ConfigDeprecationCommand} to change config shape."
            ],
            "signature": [
              "{ readonly [x: string]: any; }"
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecation.$2",
            "type": "string",
            "tags": [],
            "label": "fromPath",
            "description": [],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecation.$3",
            "type": "Function",
            "tags": [],
            "label": "addDeprecation",
            "description": [],
            "signature": [
              "(details: ",
              "DeprecatedConfigDetails",
              ") => void"
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "core",
                "id": "def-server.ConfigDeprecation.$3.$1",
                "type": "Object",
                "tags": [],
                "label": "details",
                "description": [],
                "signature": [
                  "DeprecatedConfigDetails"
                ],
                "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
                "deprecated": false
              }
            ]
          },
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecation.$4",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.ConfigDeprecationContext",
                "text": "ConfigDeprecationContext"
              }
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ConfigDeprecationProvider",
        "type": "Type",
        "tags": [],
        "label": "ConfigDeprecationProvider",
        "description": [
          "\nA provider that should returns a list of {@link ConfigDeprecation}.\n\nSee {@link ConfigDeprecationFactory} for more usage examples.\n"
        ],
        "signature": [
          "(factory: ",
          {
            "pluginId": "@kbn/config",
            "scope": "server",
            "docId": "kibKbnConfigPluginApi",
            "section": "def-server.ConfigDeprecationFactory",
            "text": "ConfigDeprecationFactory"
          },
          ") => ",
          {
            "pluginId": "@kbn/config",
            "scope": "server",
            "docId": "kibKbnConfigPluginApi",
            "section": "def-server.ConfigDeprecation",
            "text": "ConfigDeprecation"
          },
          "[]"
        ],
        "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.ConfigDeprecationProvider.$1",
            "type": "Object",
            "tags": [],
            "label": "factory",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/config",
                "scope": "server",
                "docId": "kibKbnConfigPluginApi",
                "section": "def-server.ConfigDeprecationFactory",
                "text": "ConfigDeprecationFactory"
              }
            ],
            "path": "node_modules/@kbn/config/target_types/deprecation/types.d.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ConfigPath",
        "type": "Type",
        "tags": [],
        "label": "ConfigPath",
        "description": [],
        "signature": [
          "string | string[]"
        ],
        "path": "node_modules/@kbn/config/target_types/config.d.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.DeprecationsDetails",
        "type": "Type",
        "tags": [],
        "label": "DeprecationsDetails",
        "description": [],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.ConfigDeprecationDetails",
            "text": "ConfigDeprecationDetails"
          },
          " | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.FeatureDeprecationDetails",
            "text": "FeatureDeprecationDetails"
          }
        ],
        "path": "src/core/server/deprecations/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.Ecs",
        "type": "Type",
        "tags": [],
        "label": "Ecs",
        "description": [
          "\nRepresents the full ECS schema.\n"
        ],
        "signature": [
          "EcsBase",
          " & ",
          "EcsTracing",
          " & { ecs: EcsField; agent?: ",
          "EcsAgent",
          " | undefined; as?: ",
          "EcsAutonomousSystem",
          " | undefined; client?: ",
          "EcsClient",
          " | undefined; cloud?: ",
          "EcsCloud",
          " | undefined; container?: ",
          "EcsContainer",
          " | undefined; data_stream?: ",
          "EcsDataStream",
          " | undefined; destination?: ",
          "EcsDestination",
          " | undefined; dns?: ",
          "EcsDns",
          " | undefined; email?: ",
          "EcsEmail",
          " | undefined; error?: ",
          "EcsError",
          " | undefined; event?: ",
          "EcsEvent",
          " | undefined; file?: ",
          "EcsFile",
          " | undefined; group?: ",
          "EcsGroup",
          " | undefined; host?: ",
          "EcsHost",
          " | undefined; http?: ",
          "EcsHttp",
          " | undefined; log?: ",
          "EcsLog",
          " | undefined; network?: ",
          "EcsNetwork",
          " | undefined; observer?: ",
          "EcsObserver",
          " | undefined; orchestrator?: ",
          "EcsOrchestrator",
          " | undefined; organization?: ",
          "EcsOrganization",
          " | undefined; package?: ",
          "EcsPackage",
          " | undefined; process?: ",
          "EcsProcess",
          " | undefined; registry?: ",
          "EcsRegistry",
          " | undefined; related?: ",
          "EcsRelated",
          " | undefined; rule?: ",
          "EcsRule",
          " | undefined; server?: ",
          "EcsServer",
          " | undefined; service?: ",
          "EcsService",
          " | undefined; source?: ",
          "EcsSource",
          " | undefined; threat?: ",
          "EcsThreat",
          " | undefined; tls?: ",
          "EcsTls",
          " | undefined; url?: ",
          "EcsUrl",
          " | undefined; user?: ",
          "EcsUser",
          " | undefined; user_agent?: ",
          "EcsUserAgent",
          " | undefined; vulnerability?: ",
          "EcsVulnerability",
          " | undefined; }"
        ],
        "path": "node_modules/@kbn/logging/target_types/ecs/index.d.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.EcsEventCategory",
        "type": "Type",
        "tags": [],
        "label": "EcsEventCategory",
        "description": [],
        "signature": [
          "\"database\" | \"package\" | \"host\" | \"session\" | \"file\" | \"registry\" | \"network\" | \"web\" | \"process\" | \"authentication\" | \"configuration\" | \"driver\" | \"iam\" | \"intrusion_detection\" | \"malware\""
        ],
        "path": "node_modules/@kbn/logging/target_types/ecs/event.d.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.EcsEventKind",
        "type": "Type",
        "tags": [],
        "label": "EcsEventKind",
        "description": [],
        "signature": [
          "\"alert\" | \"metric\" | \"event\" | \"state\" | \"signal\" | \"pipeline_error\""
        ],
        "path": "node_modules/@kbn/logging/target_types/ecs/event.d.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.EcsEventOutcome",
        "type": "Type",
        "tags": [],
        "label": "EcsEventOutcome",
        "description": [],
        "signature": [
          "\"unknown\" | \"success\" | \"failure\""
        ],
        "path": "node_modules/@kbn/logging/target_types/ecs/event.d.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.EcsEventType",
        "type": "Type",
        "tags": [],
        "label": "EcsEventType",
        "description": [],
        "signature": [
          "\"start\" | \"end\" | \"user\" | \"info\" | \"group\" | \"error\" | \"connection\" | \"protocol\" | \"access\" | \"admin\" | \"allowed\" | \"change\" | \"creation\" | \"deletion\" | \"denied\" | \"installation\""
        ],
        "path": "node_modules/@kbn/logging/target_types/ecs/event.d.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ElasticsearchClient",
        "type": "Type",
        "tags": [],
        "label": "ElasticsearchClient",
        "description": [
          "\nClient used to query the elasticsearch cluster.\n"
        ],
        "signature": [
          "Pick<",
          "KibanaClient",
          ", \"name\" | \"create\" | \"index\" | \"delete\" | \"get\" | \"update\" | \"closePointInTime\" | \"search\" | \"security\" | \"transform\" | \"eql\" | \"helpers\" | \"asyncSearch\" | \"autoscaling\" | \"bulk\" | \"cat\" | \"ccr\" | \"clearScroll\" | \"cluster\" | \"count\" | \"danglingIndices\" | \"deleteByQuery\" | \"deleteByQueryRethrottle\" | \"deleteScript\" | \"enrich\" | \"exists\" | \"existsSource\" | \"explain\" | \"features\" | \"fieldCaps\" | \"fleet\" | \"getScript\" | \"getScriptContext\" | \"getScriptLanguages\" | \"getSource\" | \"graph\" | \"ilm\" | \"indices\" | \"info\" | \"ingest\" | \"knnSearch\" | \"license\" | \"logstash\" | \"mget\" | \"migration\" | \"ml\" | \"monitoring\" | \"msearch\" | \"msearchTemplate\" | \"mtermvectors\" | \"nodes\" | \"openPointInTime\" | \"ping\" | \"putScript\" | \"rankEval\" | \"reindex\" | \"reindexRethrottle\" | \"renderSearchTemplate\" | \"rollup\" | \"scriptsPainlessExecute\" | \"scroll\" | \"searchMvt\" | \"searchShards\" | \"searchTemplate\" | \"searchableSnapshots\" | \"shutdown\" | \"slm\" | \"snapshot\" | \"sql\" | \"ssl\" | \"tasks\" | \"termsEnum\" | \"termvectors\" | \"textStructure\" | \"updateByQuery\" | \"updateByQueryRethrottle\" | \"watcher\" | \"xpack\"> & { transport: { request<TResponse = unknown>(params: ",
          "TransportRequestParams",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "TransportResult",
          "<TResponse, unknown>>; }; }"
        ],
        "path": "src/core/server/elasticsearch/client/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ElasticsearchClientConfig",
        "type": "Type",
        "tags": [],
        "label": "ElasticsearchClientConfig",
        "description": [
          "\nConfiguration options to be used to create a {@link IClusterClient | cluster client} using the\n{@link ElasticsearchServiceStart.createClient | createClient API}\n"
        ],
        "signature": [
          "Pick<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.ElasticsearchConfig",
            "text": "ElasticsearchConfig"
          },
          ", \"username\" | \"hosts\" | \"password\" | \"sniffOnStart\" | \"sniffInterval\" | \"sniffOnConnectionFault\" | \"serviceAccountToken\" | \"requestHeadersWhitelist\" | \"customHeaders\"> & { pingTimeout?: number | moment.Duration | undefined; requestTimeout?: number | moment.Duration | undefined; ssl?: Partial<Pick<Readonly<{ key?: string | undefined; certificate?: string | undefined; certificateAuthorities?: string | string[] | undefined; keyPassphrase?: string | undefined; } & { verificationMode: \"none\" | \"certificate\" | \"full\"; keystore: Readonly<{ path?: string | undefined; password?: string | undefined; } & {}>; truststore: Readonly<{ path?: string | undefined; password?: string | undefined; } & {}>; alwaysPresentCertificate: boolean; }>, \"key\" | \"certificate\" | \"verificationMode\" | \"keyPassphrase\" | \"alwaysPresentCertificate\"> & { certificateAuthorities?: string[] | undefined; }> | undefined; keepAlive?: boolean | undefined; caFingerprint?: string | undefined; }"
        ],
        "path": "src/core/server/elasticsearch/client/client_config.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ExecutionContextStart",
        "type": "Type",
        "tags": [],
        "label": "ExecutionContextStart",
        "description": [],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.ExecutionContextSetup",
            "text": "ExecutionContextSetup"
          }
        ],
        "path": "src/core/server/execution_context/execution_context_service.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.HandlerContextType",
        "type": "Type",
        "tags": [],
        "label": "HandlerContextType",
        "description": [
          "\nExtracts the type of the first argument of a {@link HandlerFunction} to represent the type of the context.\n"
        ],
        "signature": [
          "T extends ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.HandlerFunction",
            "text": "HandlerFunction"
          },
          "<infer U> ? U : never"
        ],
        "path": "src/core/server/context/container/context.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.HandlerFunction",
        "type": "Type",
        "tags": [],
        "label": "HandlerFunction",
        "description": [
          "\nA function that accepts a context object and an optional number of additional arguments. Used for the generic types\nin {@link IContextContainer}\n"
        ],
        "signature": [
          "(context: T, ...args: any[]) => any"
        ],
        "path": "src/core/server/context/container/context.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.HandlerFunction.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "src/core/server/context/container/context.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.HandlerFunction.$2",
            "type": "Array",
            "tags": [],
            "label": "args",
            "description": [],
            "signature": [
              "any[]"
            ],
            "path": "src/core/server/context/container/context.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.HandlerParameters",
        "type": "Type",
        "tags": [],
        "label": "HandlerParameters",
        "description": [
          "\nExtracts the types of the additional arguments of a {@link HandlerFunction}, excluding the\n{@link HandlerContextType}.\n"
        ],
        "signature": [
          "T extends (context: any, ...args: infer U) => any ? U : never"
        ],
        "path": "src/core/server/context/container/context.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.HttpResourcesRequestHandler",
        "type": "Type",
        "tags": [
          "libk"
        ],
        "label": "HttpResourcesRequestHandler",
        "description": [
          "\nExtended version of {@link RequestHandler} having access to {@link HttpResourcesServiceToolkit}\nto respond with HTML or JS resources."
        ],
        "signature": [
          "(context: Context, request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<P, Q, B, \"get\">, response: { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
          "Stream",
          " | undefined>(options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.CustomHttpResponseOptions",
            "text": "CustomHttpResponseOptions"
          },
          "<T>) => ",
          "KibanaResponse",
          "<T>; badRequest: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; unauthorized: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; forbidden: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; notFound: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; conflict: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; customError: (options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.CustomHttpResponseOptions",
            "text": "CustomHttpResponseOptions"
          },
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">) => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; redirected: (options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RedirectResponseOptions",
            "text": "RedirectResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<string | Record<string, any> | Buffer | ",
          "Stream",
          ">; ok: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.HttpResponseOptions",
            "text": "HttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<string | Record<string, any> | Buffer | ",
          "Stream",
          ">; accepted: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.HttpResponseOptions",
            "text": "HttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<string | Record<string, any> | Buffer | ",
          "Stream",
          ">; noContent: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.HttpResponseOptions",
            "text": "HttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<undefined>; } & ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.HttpResourcesServiceToolkit",
            "text": "HttpResourcesServiceToolkit"
          },
          ") => ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any> | Promise<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.IKibanaResponse",
            "text": "IKibanaResponse"
          },
          "<any>>"
        ],
        "path": "src/core/server/http_resources/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.HttpResourcesRequestHandler.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              "Context"
            ],
            "path": "src/core/server/http/router/router.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.HttpResourcesRequestHandler.$2",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<P, Q, B, Method>"
            ],
            "path": "src/core/server/http/router/router.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.HttpResourcesRequestHandler.$3",
            "type": "Uncategorized",
            "tags": [],
            "label": "response",
            "description": [],
            "signature": [
              "ResponseFactory"
            ],
            "path": "src/core/server/http/router/router.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.HttpResourcesResponseOptions",
        "type": "Type",
        "tags": [],
        "label": "HttpResourcesResponseOptions",
        "description": [
          "\nHTTP Resources response parameters"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.HttpResponseOptions",
            "text": "HttpResponseOptions"
          }
        ],
        "path": "src/core/server/http_resources/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.IContextProvider",
        "type": "Type",
        "tags": [],
        "label": "IContextProvider",
        "description": [
          "\nA function that returns a context value for a specific key of given context type.\n"
        ],
        "signature": [
          "(context: Pick<Context, Exclude<keyof Context, ContextName>>, request: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any>, response: { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
          "Stream",
          " | undefined>(options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.CustomHttpResponseOptions",
            "text": "CustomHttpResponseOptions"
          },
          "<T>) => ",
          "KibanaResponse",
          "<T>; badRequest: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; unauthorized: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; forbidden: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; notFound: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; conflict: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ErrorHttpResponseOptions",
            "text": "ErrorHttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; customError: (options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.CustomHttpResponseOptions",
            "text": "CustomHttpResponseOptions"
          },
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">) => ",
          "KibanaResponse",
          "<",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.ResponseError",
            "text": "ResponseError"
          },
          ">; redirected: (options: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.RedirectResponseOptions",
            "text": "RedirectResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<string | Record<string, any> | Buffer | ",
          "Stream",
          ">; ok: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.HttpResponseOptions",
            "text": "HttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<string | Record<string, any> | Buffer | ",
          "Stream",
          ">; accepted: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.HttpResponseOptions",
            "text": "HttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<string | Record<string, any> | Buffer | ",
          "Stream",
          ">; noContent: (options?: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.HttpResponseOptions",
            "text": "HttpResponseOptions"
          },
          ") => ",
          "KibanaResponse",
          "<undefined>; }) => Context[ContextName] | Promise<Context[ContextName]>"
        ],
        "path": "src/core/server/context/container/context.ts",
        "deprecated": false,
        "returnComment": [
          "The context value associated with this key. May also return a Promise which will be resolved before\nattaching to the context object."
        ],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.IContextProvider.$1",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [
              "- A partial context object containing only the keys for values provided by plugin dependencies"
            ],
            "signature": [
              "{ [P in Exclude<keyof Context, ContextName>]: Context[P]; }"
            ],
            "path": "src/core/server/context/container/context.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "core",
            "id": "def-server.IContextProvider.$2",
            "type": "Object",
            "tags": [],
            "label": "rest",
            "description": [
              "- Additional parameters provided by the service owner of this context"
            ],
            "signature": [
              "[request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>, response: { custom: <T extends string | Record<string, any> | Error | { message: string | Error; attributes?: Record<string, any> | undefined; } | Buffer | ",
              "Stream",
              " | undefined>(options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<T>) => ",
              "KibanaResponse",
              "<T>; badRequest: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; unauthorized: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; forbidden: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; notFound: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; conflict: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ErrorHttpResponseOptions",
                "text": "ErrorHttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; customError: (options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.CustomHttpResponseOptions",
                "text": "CustomHttpResponseOptions"
              },
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">) => ",
              "KibanaResponse",
              "<",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.ResponseError",
                "text": "ResponseError"
              },
              ">; redirected: (options: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.RedirectResponseOptions",
                "text": "RedirectResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; ok: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; accepted: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<string | Record<string, any> | Buffer | ",
              "Stream",
              ">; noContent: (options?: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.HttpResponseOptions",
                "text": "HttpResponseOptions"
              },
              ") => ",
              "KibanaResponse",
              "<undefined>; }]"
            ],
            "path": "src/core/server/context/container/context.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.KibanaExecutionContext",
        "type": "Type",
        "tags": [],
        "label": "KibanaExecutionContext",
        "description": [],
        "signature": [
          "{ readonly type: string; readonly name: string; readonly id: string; readonly description: string; readonly url?: string | undefined; parent?: ",
          "KibanaExecutionContext",
          " | undefined; }"
        ],
        "path": "src/core/types/execution_context.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.LoggerConfigType",
        "type": "Type",
        "tags": [],
        "label": "LoggerConfigType",
        "description": [],
        "signature": [
          "{ readonly name: string; readonly level: ",
          "LogLevelId",
          "; readonly appenders: string[]; }"
        ],
        "path": "src/core/server/logging/logging_config.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.LogMeta",
        "type": "Type",
        "tags": [],
        "label": "LogMeta",
        "description": [
          "\nRepresents the ECS schema with the following reserved keys excluded:\n- `ecs`\n- `@timestamp`\n- `message`\n- `log.level`\n- `log.logger`\n"
        ],
        "signature": [
          "Pick<",
          "EcsBase",
          ", \"tags\" | \"labels\"> & ",
          "EcsTracing",
          " & { agent?: ",
          "EcsAgent",
          " | undefined; as?: ",
          "EcsAutonomousSystem",
          " | undefined; client?: ",
          "EcsClient",
          " | undefined; cloud?: ",
          "EcsCloud",
          " | undefined; container?: ",
          "EcsContainer",
          " | undefined; destination?: ",
          "EcsDestination",
          " | undefined; dns?: ",
          "EcsDns",
          " | undefined; error?: ",
          "EcsError",
          " | undefined; event?: ",
          "EcsEvent",
          " | undefined; file?: ",
          "EcsFile",
          " | undefined; group?: ",
          "EcsGroup",
          " | undefined; host?: ",
          "EcsHost",
          " | undefined; http?: ",
          "EcsHttp",
          " | undefined; log?: Pick<",
          "EcsLog",
          ", \"origin\" | \"file\" | \"syslog\"> | undefined; network?: ",
          "EcsNetwork",
          " | undefined; observer?: ",
          "EcsObserver",
          " | undefined; organization?: ",
          "EcsOrganization",
          " | undefined; package?: ",
          "EcsPackage",
          " | undefined; process?: ",
          "EcsProcess",
          " | undefined; registry?: ",
          "EcsRegistry",
          " | undefined; related?: ",
          "EcsRelated",
          " | undefined; rule?: ",
          "EcsRule",
          " | undefined; server?: ",
          "EcsServer",
          " | undefined; service?: ",
          "EcsService",
          " | undefined; source?: ",
          "EcsSource",
          " | undefined; threat?: ",
          "EcsThreat",
          " | undefined; tls?: ",
          "EcsTls",
          " | undefined; url?: ",
          "EcsUrl",
          " | undefined; user?: ",
          "EcsUser",
          " | undefined; user_agent?: ",
          "EcsUserAgent",
          " | undefined; vulnerability?: ",
          "EcsVulnerability",
          " | undefined; }"
        ],
        "path": "node_modules/@kbn/logging/target_types/log_meta.d.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.MakeUsageFromSchema",
        "type": "Type",
        "tags": [],
        "label": "MakeUsageFromSchema",
        "description": [
          "\nList of configuration values that will be exposed to usage collection.\nIf parent node or actual config path is set to `true` then the actual value\nof these configs will be reoprted.\nIf parent node or actual config path is set to `false` then the config\nwill be reported as [redacted].\n"
        ],
        "signature": [
          "{ [Key in keyof T]?: (T[Key] extends Maybe<object[]> ? false : T[Key] extends any[] | undefined ? boolean : T[Key] extends object | undefined ? boolean | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.MakeUsageFromSchema",
            "text": "MakeUsageFromSchema"
          },
          "<T[Key]> : boolean) | undefined; }"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.MetricsServiceStart",
        "type": "Type",
        "tags": [],
        "label": "MetricsServiceStart",
        "description": [
          "\n{@inheritdoc MetricsServiceSetup}\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.MetricsServiceSetup",
            "text": "MetricsServiceSetup"
          }
        ],
        "path": "src/core/server/metrics/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PluginConfigSchema",
        "type": "Type",
        "tags": [],
        "label": "PluginConfigSchema",
        "description": [
          "\nDedicated type for plugin configuration schema.\n"
        ],
        "signature": [
          {
            "pluginId": "@kbn/config-schema",
            "scope": "server",
            "docId": "kibKbnConfigSchemaPluginApi",
            "section": "def-server.Type",
            "text": "Type"
          },
          "<T>"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PluginInitializer",
        "type": "Type",
        "tags": [],
        "label": "PluginInitializer",
        "description": [
          "\nThe `plugin` export at the root of a plugin's `server` directory should conform\nto this interface.\n"
        ],
        "signature": [
          "(core: ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.PluginInitializerContext",
            "text": "PluginInitializerContext"
          },
          "<unknown>) => ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.Plugin",
            "text": "Plugin"
          },
          "<TSetup, TStart, TPluginsSetup, TPluginsStart> | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.PrebootPlugin",
            "text": "PrebootPlugin"
          },
          "<TSetup, TPluginsSetup> | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.AsyncPlugin",
            "text": "AsyncPlugin"
          },
          "<TSetup, TStart, TPluginsSetup, TPluginsStart>"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "core",
            "id": "def-server.PluginInitializer.$1",
            "type": "Object",
            "tags": [],
            "label": "core",
            "description": [],
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.PluginInitializerContext",
                "text": "PluginInitializerContext"
              },
              "<unknown>"
            ],
            "path": "src/core/server/plugins/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PluginName",
        "type": "Type",
        "tags": [],
        "label": "PluginName",
        "description": [
          "\nDedicated type for plugin name/id that is supposed to make Map/Set/Arrays\nthat use it as a key or value more obvious.\n"
        ],
        "signature": [
          "string"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PluginOpaqueId",
        "type": "Type",
        "tags": [],
        "label": "PluginOpaqueId",
        "description": [],
        "signature": [
          "symbol"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.PublicUiSettingsParams",
        "type": "Type",
        "tags": [],
        "label": "PublicUiSettingsParams",
        "description": [
          "\nA sub-set of {@link UiSettingsParams} exposed to the client-side."
        ],
        "signature": [
          "{ name?: string | undefined; type?: \"string\" | \"number\" | \"boolean\" | \"undefined\" | \"json\" | \"color\" | \"image\" | \"markdown\" | \"select\" | \"array\" | undefined; description?: string | undefined; options?: string[] | undefined; order?: number | undefined; value?: unknown; category?: string[] | undefined; optionLabels?: Record<string, string> | undefined; requiresPageReload?: boolean | undefined; readonly?: boolean | undefined; sensitive?: boolean | undefined; deprecation?: ",
          "DeprecationSettings",
          " | undefined; metric?: { type: ",
          {
            "pluginId": "@kbn/analytics",
            "scope": "common",
            "docId": "kibKbnAnalyticsPluginApi",
            "section": "def-common.UiCounterMetricType",
            "text": "UiCounterMetricType"
          },
          "; name: string; } | undefined; }"
        ],
        "path": "src/core/types/ui_settings.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.SavedObjectAttribute",
        "type": "Type",
        "tags": [],
        "label": "SavedObjectAttribute",
        "description": [
          "\nType definition for a Saved Object attribute value\n"
        ],
        "signature": [
          "string | number | boolean | ",
          "SavedObjectAttributes",
          " | ",
          "SavedObjectAttributeSingle",
          "[] | null | undefined"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.SavedObjectAttributeSingle",
        "type": "Type",
        "tags": [],
        "label": "SavedObjectAttributeSingle",
        "description": [
          "\nDon't use this type, it's simply a helper type for {@link SavedObjectAttribute}\n"
        ],
        "signature": [
          "string | number | boolean | ",
          "SavedObjectAttributes",
          " | null | undefined"
        ],
        "path": "src/core/types/saved_objects.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ScopeableRequest",
        "type": "Type",
        "tags": [],
        "label": "ScopeableRequest",
        "description": [
          "\n A user credentials container.\nIt accommodates the necessary auth credentials to impersonate the current user.\n"
        ],
        "signature": [
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCoreHttpPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any> | ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.FakeRequest",
            "text": "FakeRequest"
          }
        ],
        "path": "src/core/server/elasticsearch/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.ServiceStatusLevel",
        "type": "Type",
        "tags": [],
        "label": "ServiceStatusLevel",
        "description": [
          "\nA convenience type that represents the union of each value in {@link ServiceStatusLevels}."
        ],
        "signature": [
          "Readonly<{ toString: () => \"available\"; valueOf: () => 0; toJSON: () => \"available\"; }> | Readonly<{ toString: () => \"degraded\"; valueOf: () => 1; toJSON: () => \"degraded\"; }> | Readonly<{ toString: () => \"unavailable\"; valueOf: () => 2; toJSON: () => \"unavailable\"; }> | Readonly<{ toString: () => \"critical\"; valueOf: () => 3; toJSON: () => \"critical\"; }>"
        ],
        "path": "src/core/server/status/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.SharedGlobalConfig",
        "type": "Type",
        "tags": [],
        "label": "SharedGlobalConfig",
        "description": [],
        "signature": [
          "{ readonly elasticsearch: Readonly<{ readonly requestTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; }>; readonly shardTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; }>; readonly pingTimeout: Readonly<{ clone: () => moment.Duration; humanize: { (argWithSuffix?: boolean | undefined, argThresholds?: moment.argThresholdOpts | undefined): string; (argThresholds?: moment.argThresholdOpts | undefined): string; }; abs: () => moment.Duration; as: (units: moment.unitOfTime.Base) => number; get: (units: moment.unitOfTime.Base) => number; milliseconds: () => number; asMilliseconds: () => number; seconds: () => number; asSeconds: () => number; minutes: () => number; asMinutes: () => number; hours: () => number; asHours: () => number; days: () => number; asDays: () => number; weeks: () => number; asWeeks: () => number; months: () => number; asMonths: () => number; years: () => number; asYears: () => number; add: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; subtract: (inp?: moment.DurationInputArg1, unit?: \"ms\" | \"s\" | \"m\" | \"h\" | \"d\" | \"w\" | \"M\" | \"y\" | \"year\" | \"years\" | \"month\" | \"months\" | \"week\" | \"weeks\" | \"day\" | \"days\" | \"hour\" | \"hours\" | \"minute\" | \"minutes\" | \"second\" | \"seconds\" | \"millisecond\" | \"milliseconds\" | \"quarter\" | \"quarters\" | \"Q\" | undefined) => moment.Duration; locale: { (): string; (locale: moment.LocaleSpecifier): moment.Duration; }; localeData: () => moment.Locale; toISOString: () => string; toJSON: () => string; isValid: () => boolean; lang: { (locale: moment.LocaleSpecifier): moment.Moment; (): moment.Locale; }; toIsoString: () => string; }>; }>; readonly path: Readonly<{ readonly data: string; }>; readonly savedObjects: Readonly<{ readonly maxImportPayloadBytes: Readonly<{ isGreaterThan: (other: ",
          {
            "pluginId": "@kbn/config-schema",
            "scope": "server",
            "docId": "kibKbnConfigSchemaPluginApi",
            "section": "def-server.ByteSizeValue",
            "text": "ByteSizeValue"
          },
          ") => boolean; isLessThan: (other: ",
          {
            "pluginId": "@kbn/config-schema",
            "scope": "server",
            "docId": "kibKbnConfigSchemaPluginApi",
            "section": "def-server.ByteSizeValue",
            "text": "ByteSizeValue"
          },
          ") => boolean; isEqualTo: (other: ",
          {
            "pluginId": "@kbn/config-schema",
            "scope": "server",
            "docId": "kibKbnConfigSchemaPluginApi",
            "section": "def-server.ByteSizeValue",
            "text": "ByteSizeValue"
          },
          ") => boolean; getValueInBytes: () => number; toString: (returnUnit?: \"b\" | \"kb\" | \"mb\" | \"gb\" | undefined) => string; }>; }>; }"
        ],
        "path": "src/core/server/plugins/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.StartServicesAccessor",
        "type": "Type",
        "tags": [],
        "label": "StartServicesAccessor",
        "description": [
          "\nAllows plugins to get access to APIs available in start inside async handlers.\nPromise will not resolve until Core and plugin dependencies have completed `start`.\nThis should only be used inside handlers registered during `setup` that will only be executed\nafter `start` lifecycle.\n"
        ],
        "signature": [
          "() => Promise<[",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.CoreStart",
            "text": "CoreStart"
          },
          ", TPluginsStart, TStart]>"
        ],
        "path": "src/core/server/index.ts",
        "deprecated": false,
        "returnComment": [],
        "children": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "core",
        "id": "def-server.UiSettingsType",
        "type": "Type",
        "tags": [],
        "label": "UiSettingsType",
        "description": [
          "\nUI element type to represent the settings."
        ],
        "signature": [
          "\"string\" | \"number\" | \"boolean\" | \"undefined\" | \"json\" | \"color\" | \"image\" | \"markdown\" | \"select\" | \"array\""
        ],
        "path": "src/core/types/ui_settings.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "core",
        "id": "def-server.ServiceStatusLevels",
        "type": "Object",
        "tags": [],
        "label": "ServiceStatusLevels",
        "description": [
          "\nThe current \"level\" of availability of a service.\n"
        ],
        "signature": [
          "{ readonly available: Readonly<{ toString: () => \"available\"; valueOf: () => 0; toJSON: () => \"available\"; }>; readonly degraded: Readonly<{ toString: () => \"degraded\"; valueOf: () => 1; toJSON: () => \"degraded\"; }>; readonly unavailable: Readonly<{ toString: () => \"unavailable\"; valueOf: () => 2; toJSON: () => \"unavailable\"; }>; readonly critical: Readonly<{ toString: () => \"critical\"; valueOf: () => 3; toJSON: () => \"critical\"; }>; }"
        ],
        "path": "src/core/server/status/types.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ]
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}