{
  "id": "@kbn/ml-agg-utils",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.buildSamplerAggregation",
        "type": "Function",
        "tags": [],
        "label": "buildSamplerAggregation",
        "description": [
          "\nWraps the supplied aggregations in a sampler aggregation.\nA supplied samplerShardSize (the shard_size parameter of the sampler aggregation)\nof less than 1 indicates no sampling, and the aggs are returned as-is.\n"
        ],
        "signature": [
          "(aggs: any, shardSize: number) => Record<string, ",
          "AggregationsAggregationContainer",
          ">"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/build_sampler_aggregation.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.buildSamplerAggregation.$1",
            "type": "Any",
            "tags": [],
            "label": "aggs",
            "description": [
              "- The aggregations to be wrapped in the sampler aggregation."
            ],
            "signature": [
              "any"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/build_sampler_aggregation.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.buildSamplerAggregation.$2",
            "type": "number",
            "tags": [],
            "label": "shardSize",
            "description": [
              "- The shard size parameter for the sampler aggregation.\n  A value less than 1 indicates no sampling."
            ],
            "signature": [
              "number"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/build_sampler_aggregation.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "The wrapped aggregations."
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.fetchAggIntervals",
        "type": "Function",
        "tags": [],
        "label": "fetchAggIntervals",
        "description": [
          "\nAsynchronously fetches aggregation intervals from an Elasticsearch client.\n"
        ],
        "signature": [
          "(params: ",
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.FetchAggIntervalsParams",
            "text": "FetchAggIntervalsParams"
          },
          ") => Promise<",
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.NumericColumnStatsMap",
            "text": "NumericColumnStatsMap"
          },
          ">"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/fetch_agg_intervals.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.fetchAggIntervals.$1",
            "type": "Object",
            "tags": [],
            "label": "params",
            "description": [
              "- The parameters for fetching aggregation intervals."
            ],
            "signature": [
              {
                "pluginId": "@kbn/ml-agg-utils",
                "scope": "common",
                "docId": "kibKbnMlAggUtilsPluginApi",
                "section": "def-common.FetchAggIntervalsParams",
                "text": "FetchAggIntervalsParams"
              }
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_agg_intervals.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "A promise that resolves to a map of numeric column statistics."
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.fetchHistogramsForFields",
        "type": "Function",
        "tags": [],
        "label": "fetchHistogramsForFields",
        "description": [
          "\nAsynchronously fetches histograms for specified fields from an Elasticsearch client.\n"
        ],
        "signature": [
          "(params: FetchHistogramsForFieldsParams) => Promise<(",
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.NumericChartData",
            "text": "NumericChartData"
          },
          " | OrdinalChartData | UnsupportedChartData)[]>"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.fetchHistogramsForFields.$1",
            "type": "Object",
            "tags": [],
            "label": "params",
            "description": [
              "The parameters for fetching histograms."
            ],
            "signature": [
              "FetchHistogramsForFieldsParams"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "A promise that resolves with the fetched histograms."
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.getSamplerAggregationsResponsePath",
        "type": "Function",
        "tags": [],
        "label": "getSamplerAggregationsResponsePath",
        "description": [
          "\nReturns the path of aggregations in the Elasticsearch response as an array,\ndepending on whether sampling is being used.\n"
        ],
        "signature": [
          "(samplerShardSize: number) => string[]"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/get_sampler_aggregations_response_path.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.getSamplerAggregationsResponsePath.$1",
            "type": "number",
            "tags": [],
            "label": "samplerShardSize",
            "description": [
              "- The shard size parameter of the sampler aggregation.\n  A value less than 1 indicates no sampling."
            ],
            "signature": [
              "number"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/get_sampler_aggregations_response_path.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "An array representing the path of aggregations in the response."
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.isCounterTimeSeriesMetric",
        "type": "Function",
        "tags": [],
        "label": "isCounterTimeSeriesMetric",
        "description": [
          "\nCheck if DataViewField is a 'counter' time series metric field"
        ],
        "signature": [
          "(field?: ",
          {
            "pluginId": "dataViews",
            "scope": "common",
            "docId": "kibDataViewsPluginApi",
            "section": "def-common.DataViewField",
            "text": "DataViewField"
          },
          " | undefined) => boolean"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/time_series_metric_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.isCounterTimeSeriesMetric.$1",
            "type": "Object",
            "tags": [],
            "label": "field",
            "description": [
              "optional DataViewField"
            ],
            "signature": [
              {
                "pluginId": "dataViews",
                "scope": "common",
                "docId": "kibDataViewsPluginApi",
                "section": "def-common.DataViewField",
                "text": "DataViewField"
              },
              " | undefined"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/time_series_metric_fields.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          }
        ],
        "returnComment": [
          "a boolean"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.isGaugeTimeSeriesMetric",
        "type": "Function",
        "tags": [],
        "label": "isGaugeTimeSeriesMetric",
        "description": [
          "\nCheck if DataViewField is a 'gauge' time series metric field"
        ],
        "signature": [
          "(field?: ",
          {
            "pluginId": "dataViews",
            "scope": "common",
            "docId": "kibDataViewsPluginApi",
            "section": "def-common.DataViewField",
            "text": "DataViewField"
          },
          " | undefined) => boolean"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/time_series_metric_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.isGaugeTimeSeriesMetric.$1",
            "type": "Object",
            "tags": [],
            "label": "field",
            "description": [
              "optional DataViewField"
            ],
            "signature": [
              {
                "pluginId": "dataViews",
                "scope": "common",
                "docId": "kibDataViewsPluginApi",
                "section": "def-common.DataViewField",
                "text": "DataViewField"
              },
              " | undefined"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/time_series_metric_fields.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          }
        ],
        "returnComment": [
          "a boolean"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.isMultiBucketAggregate",
        "type": "Function",
        "tags": [
          "template"
        ],
        "label": "isMultiBucketAggregate",
        "description": [
          "\nType guard to validate multi bucket aggregate format.\n"
        ],
        "signature": [
          "<TBucket = unknown>(arg: unknown) => arg is ",
          "AggregationsMultiBucketAggregateBase",
          "<TBucket>"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/is_multi_bucket_aggregate.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.isMultiBucketAggregate.$1",
            "type": "Unknown",
            "tags": [],
            "label": "arg",
            "description": [
              "- The item to be checked."
            ],
            "signature": [
              "unknown"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/is_multi_bucket_aggregate.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.isSignificantItem",
        "type": "Function",
        "tags": [],
        "label": "isSignificantItem",
        "description": [
          "\nType guard for a significant item.\nNote this is used as a custom type within Log Rate Analysis\nfor a p-value based variant, not a generic significant terms\naggregation type."
        ],
        "signature": [
          "(arg: unknown) => boolean"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.isSignificantItem.$1",
            "type": "Unknown",
            "tags": [],
            "label": "arg",
            "description": [
              "The unknown type to be evaluated"
            ],
            "signature": [
              "unknown"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "Return whether arg is of type SignificantItem"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.isSignificantItemGroup",
        "type": "Function",
        "tags": [],
        "label": "isSignificantItemGroup",
        "description": [
          "\nType guard to check if the given argument is a SignificantItemGroup."
        ],
        "signature": [
          "(arg: unknown) => boolean"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/type_guards.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.isSignificantItemGroup.$1",
            "type": "Unknown",
            "tags": [],
            "label": "arg",
            "description": [
              "The unknown type to be evaluated"
            ],
            "signature": [
              "unknown"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/type_guards.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [
          "Return whether arg is of type SignificantItemGroup"
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.numberValidator",
        "type": "Function",
        "tags": [
          "throws"
        ],
        "label": "numberValidator",
        "description": [
          "\nValidate if a number is within specified minimum and maximum bounds.\n"
        ],
        "signature": [
          "(conditions: NumberValidatorConditions | undefined) => ((value: number | undefined) => ",
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.NumberValidationResult",
            "text": "NumberValidationResult"
          },
          " | null) & ",
          "MemoizedFunction"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/validate_number.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.numberValidator.$1",
            "type": "Object",
            "tags": [],
            "label": "conditions",
            "description": [
              "- An optional object containing validation conditions."
            ],
            "signature": [
              "NumberValidatorConditions | undefined"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/validate_number.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          }
        ],
        "returnComment": [
          "validation results."
        ],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.AggCardinality",
        "type": "Interface",
        "tags": [
          "interface"
        ],
        "label": "AggCardinality",
        "description": [
          "\nInterface for cardinality aggregation."
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.AggCardinality.cardinality",
            "type": "CompoundType",
            "tags": [],
            "label": "cardinality",
            "description": [
              "The cardinality aggregation configuration"
            ],
            "signature": [
              "FieldAggCardinality | ScriptAggCardinality"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.FetchAggIntervalsParams",
        "type": "Interface",
        "tags": [],
        "label": "FetchAggIntervalsParams",
        "description": [
          "\nInterface for the parameters required to fetch aggregation intervals."
        ],
        "path": "x-pack/packages/ml/agg_utils/src/fetch_agg_intervals.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.FetchAggIntervalsParams.esClient",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [
              "The Elasticsearch client to use for the query."
            ],
            "signature": [
              "{ create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; helpers: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; asyncSearch: ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; capabilities: { (this: That, params?: ",
              "TODO",
              " | ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TODO",
              ">; (this: That, params?: ",
              "TODO",
              " | ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TODO",
              ", unknown>>; (this: That, params?: ",
              "TODO",
              " | ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TODO",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; cluster: ",
              "default",
              "; connector: ",
              "default",
              "; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; eql: ",
              "default",
              "; esql: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params?: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params?: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params?: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; healthReport: { (this: That, params?: ",
              "HealthReportRequest",
              " | ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "HealthReportResponse",
              ">; (this: That, params?: ",
              "HealthReportRequest",
              " | ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "HealthReportResponse",
              ", unknown>>; (this: That, params?: ",
              "HealthReportRequest",
              " | ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "HealthReportResponse",
              ">; }; ilm: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; indices: ",
              "default",
              "; inference: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; monitoring: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; profiling: ",
              "default",
              "; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; queryRules: ",
              "default",
              "; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchApplication: ",
              "default",
              "; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; security: ",
              "default",
              "; shutdown: ",
              "default",
              "; simulate: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; synonyms: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_agg_intervals.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.FetchAggIntervalsParams.abortSignal",
            "type": "Object",
            "tags": [],
            "label": "abortSignal",
            "description": [
              "An optional abort signal to cancel the request."
            ],
            "signature": [
              "AbortSignal | undefined"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_agg_intervals.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.FetchAggIntervalsParams.arguments",
            "type": "Object",
            "tags": [],
            "label": "arguments",
            "description": [
              "The arguments for the aggregation query."
            ],
            "signature": [
              "{ indexPattern: string; query: ",
              "QueryDslQueryContainer",
              "; fields: ",
              {
                "pluginId": "@kbn/ml-agg-utils",
                "scope": "common",
                "docId": "kibKbnMlAggUtilsPluginApi",
                "section": "def-common.HistogramField",
                "text": "HistogramField"
              },
              "[]; samplerShardSize: number; runtimeMappings?: ",
              "MappingRuntimeFields",
              " | undefined; randomSamplerProbability?: number | undefined; randomSamplerSeed?: number | undefined; }"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_agg_intervals.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.FieldValuePair",
        "type": "Interface",
        "tags": [],
        "label": "FieldValuePair",
        "description": [
          "\nField/value pair definition."
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.FieldValuePair.fieldName",
            "type": "string",
            "tags": [],
            "label": "fieldName",
            "description": [
              "The field name."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.FieldValuePair.fieldValue",
            "type": "CompoundType",
            "tags": [],
            "label": "fieldValue",
            "description": [
              "\nFor dynamic fieldValues we only identify fields as `string`,\nbut for example `http.response.status_code` which is part of\nof the list of predefined field candidates is of type long/number"
            ],
            "signature": [
              "string | number"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.HistogramField",
        "type": "Interface",
        "tags": [
          "interface"
        ],
        "label": "HistogramField",
        "description": [
          "\nRepresents parameters used to identify which histogram data needs to be generated for a field."
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.HistogramField.fieldName",
            "type": "string",
            "tags": [],
            "label": "fieldName",
            "description": [
              "\nThe name of the field for which histogram data is generated."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.HistogramField.type",
            "type": "Enum",
            "tags": [],
            "label": "type",
            "description": [
              "\nThe type of the field, using Kibana field types."
            ],
            "signature": [
              {
                "pluginId": "@kbn/field-types",
                "scope": "common",
                "docId": "kibKbnFieldTypesPluginApi",
                "section": "def-common.KBN_FIELD_TYPES",
                "text": "KBN_FIELD_TYPES"
              }
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.ItemSet",
        "type": "Interface",
        "tags": [],
        "label": "ItemSet",
        "description": [
          "\nRepresents an item set returned from `frequent_item_sets` augmented\nwith some metadata related to log rate analysis."
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.ItemSet.set",
            "type": "Array",
            "tags": [],
            "label": "set",
            "description": [
              "An array of field-value pairs representing the items in the set."
            ],
            "signature": [
              {
                "pluginId": "@kbn/ml-agg-utils",
                "scope": "common",
                "docId": "kibKbnMlAggUtilsPluginApi",
                "section": "def-common.FieldValuePair",
                "text": "FieldValuePair"
              },
              "[]"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.ItemSet.size",
            "type": "number",
            "tags": [],
            "label": "size",
            "description": [
              "The size of the item set."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.ItemSet.maxPValue",
            "type": "number",
            "tags": [],
            "label": "maxPValue",
            "description": [
              "The maximum p-value associated with the item set."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.ItemSet.doc_count",
            "type": "number",
            "tags": [],
            "label": "doc_count",
            "description": [
              "The document count of the item set."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.ItemSet.support",
            "type": "number",
            "tags": [],
            "label": "support",
            "description": [
              "The support value of the item set."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.ItemSet.total_doc_count",
            "type": "number",
            "tags": [],
            "label": "total_doc_count",
            "description": [
              "The total document count."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.NumericChartData",
        "type": "Interface",
        "tags": [
          "interface"
        ],
        "label": "NumericChartData",
        "description": [
          "\nInterface describing the data structure returned for numeric-based charts."
        ],
        "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericChartData.data",
            "type": "Array",
            "tags": [],
            "label": "data",
            "description": [
              "\nAn array of data points, each represented by a NumericDataItem."
            ],
            "signature": [
              {
                "pluginId": "@kbn/ml-agg-utils",
                "scope": "common",
                "docId": "kibKbnMlAggUtilsPluginApi",
                "section": "def-common.NumericDataItem",
                "text": "NumericDataItem"
              },
              "[]"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericChartData.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nThe identifier for the data set."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericChartData.interval",
            "type": "number",
            "tags": [],
            "label": "interval",
            "description": [
              "\nThe interval value for the data."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericChartData.stats",
            "type": "Object",
            "tags": [],
            "label": "stats",
            "description": [
              "\nAn array of statistics values, typically [min, max]."
            ],
            "signature": [
              "[number, number]"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericChartData.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [
              "\nThe type of chart, which is 'numeric'."
            ],
            "signature": [
              "\"numeric\""
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.NumericColumnStats",
        "type": "Interface",
        "tags": [
          "interface"
        ],
        "label": "NumericColumnStats",
        "description": [
          "\nInterface describing attributes used for numeric histograms."
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericColumnStats.interval",
            "type": "number",
            "tags": [],
            "label": "interval",
            "description": [
              "The interval value for the histogram."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericColumnStats.min",
            "type": "number",
            "tags": [],
            "label": "min",
            "description": [
              "The minimum value in the histogram."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericColumnStats.max",
            "type": "number",
            "tags": [],
            "label": "max",
            "description": [
              "The maximum value in the histogram."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.NumericDataItem",
        "type": "Interface",
        "tags": [
          "interface"
        ],
        "label": "NumericDataItem",
        "description": [
          "\nRepresents an item in numeric data."
        ],
        "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericDataItem.key",
            "type": "number",
            "tags": [],
            "label": "key",
            "description": [
              "\nThe numeric key."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericDataItem.key_as_string",
            "type": "string",
            "tags": [],
            "label": "key_as_string",
            "description": [
              "\nAn optional string representation of the key."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericDataItem.doc_count",
            "type": "number",
            "tags": [],
            "label": "doc_count",
            "description": [
              "\nThe document count associated with the key."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.NumericHistogramField",
        "type": "Interface",
        "tags": [],
        "label": "NumericHistogramField",
        "description": [
          "\nNumeric based histogram field interface, limited to `date` and `number`."
        ],
        "signature": [
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.NumericHistogramField",
            "text": "NumericHistogramField"
          },
          " extends ",
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.HistogramField",
            "text": "HistogramField"
          }
        ],
        "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.NumericHistogramField.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [
              "\nThe type of the numeric histogram field."
            ],
            "signature": [
              {
                "pluginId": "@kbn/field-types",
                "scope": "common",
                "docId": "kibKbnFieldTypesPluginApi",
                "section": "def-common.KBN_FIELD_TYPES",
                "text": "KBN_FIELD_TYPES"
              },
              ".DATE | ",
              {
                "pluginId": "@kbn/field-types",
                "scope": "common",
                "docId": "kibKbnFieldTypesPluginApi",
                "section": "def-common.KBN_FIELD_TYPES",
                "text": "KBN_FIELD_TYPES"
              },
              ".NUMBER"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.SignificantItem",
        "type": "Interface",
        "tags": [
          "interface",
          "extends"
        ],
        "label": "SignificantItem",
        "description": [
          "\nRepresents significant item metadata for a field/value pair.\nThis interface is used as a custom type within Log Rate Analysis\nfor a p-value based variant, not related to the generic\nsignificant terms aggregation type.\n"
        ],
        "signature": [
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.SignificantItem",
            "text": "SignificantItem"
          },
          " extends ",
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.FieldValuePair",
            "text": "FieldValuePair"
          }
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.key",
            "type": "string",
            "tags": [],
            "label": "key",
            "description": [
              "The key associated with the significant item."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [
              "The type of the significant item."
            ],
            "signature": [
              "\"keyword\" | \"log_pattern\""
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.doc_count",
            "type": "number",
            "tags": [],
            "label": "doc_count",
            "description": [
              "The document count for the significant item."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.bg_count",
            "type": "number",
            "tags": [],
            "label": "bg_count",
            "description": [
              "The background count for the significant item."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.total_doc_count",
            "type": "number",
            "tags": [],
            "label": "total_doc_count",
            "description": [
              "The total document count for all items."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.total_bg_count",
            "type": "number",
            "tags": [],
            "label": "total_bg_count",
            "description": [
              "The total background count for all items."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.score",
            "type": "number",
            "tags": [],
            "label": "score",
            "description": [
              "The score associated with the significant item."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.pValue",
            "type": "CompoundType",
            "tags": [],
            "label": "pValue",
            "description": [
              "The p-value for the significant item, or null if not available."
            ],
            "signature": [
              "number | null"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.normalizedScore",
            "type": "number",
            "tags": [],
            "label": "normalizedScore",
            "description": [
              "The normalized score for the significant item."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.histogram",
            "type": "Array",
            "tags": [],
            "label": "histogram",
            "description": [
              "An optional histogram for the significant item."
            ],
            "signature": [
              {
                "pluginId": "@kbn/ml-agg-utils",
                "scope": "common",
                "docId": "kibKbnMlAggUtilsPluginApi",
                "section": "def-common.SignificantItemHistogramItem",
                "text": "SignificantItemHistogramItem"
              },
              "[] | undefined"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.unique",
            "type": "CompoundType",
            "tags": [],
            "label": "unique",
            "description": [
              "Indicates if the significant item is unique within a group."
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItem.logRateChangeSort",
            "type": "number",
            "tags": [],
            "label": "logRateChangeSort",
            "description": [
              "Calculates a numerical value based on bg_count and doc_count for which to sort log rate change"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.SignificantItemGroup",
        "type": "Interface",
        "tags": [
          "interface"
        ],
        "label": "SignificantItemGroup",
        "description": [
          "\nRepresents a significant item group."
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroup.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "The identifier for the item."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroup.group",
            "type": "Array",
            "tags": [],
            "label": "group",
            "description": [
              "An array of significant item group items."
            ],
            "signature": [
              {
                "pluginId": "@kbn/ml-agg-utils",
                "scope": "common",
                "docId": "kibKbnMlAggUtilsPluginApi",
                "section": "def-common.SignificantItemGroupItem",
                "text": "SignificantItemGroupItem"
              },
              "[]"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroup.docCount",
            "type": "number",
            "tags": [],
            "label": "docCount",
            "description": [
              "The document count associated with this item."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroup.pValue",
            "type": "CompoundType",
            "tags": [],
            "label": "pValue",
            "description": [
              "The p-value for this item, or null if not available."
            ],
            "signature": [
              "number | null"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroup.histogram",
            "type": "Array",
            "tags": [],
            "label": "histogram",
            "description": [
              "An optional array of significant item histogram items."
            ],
            "signature": [
              {
                "pluginId": "@kbn/ml-agg-utils",
                "scope": "common",
                "docId": "kibKbnMlAggUtilsPluginApi",
                "section": "def-common.SignificantItemHistogramItem",
                "text": "SignificantItemHistogramItem"
              },
              "[] | undefined"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.SignificantItemGroupHistogram",
        "type": "Interface",
        "tags": [
          "interface"
        ],
        "label": "SignificantItemGroupHistogram",
        "description": [
          "\nRepresents histogram data for a group of field/value pairs."
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroupHistogram.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "The identifier for the group."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroupHistogram.histogram",
            "type": "Array",
            "tags": [],
            "label": "histogram",
            "description": [
              "An array of significant item histogram items."
            ],
            "signature": [
              {
                "pluginId": "@kbn/ml-agg-utils",
                "scope": "common",
                "docId": "kibKbnMlAggUtilsPluginApi",
                "section": "def-common.SignificantItemHistogramItem",
                "text": "SignificantItemHistogramItem"
              },
              "[]"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.SignificantItemGroupItem",
        "type": "Interface",
        "tags": [
          "interface"
        ],
        "label": "SignificantItemGroupItem",
        "description": [
          "\nRepresents an item in a significant item group."
        ],
        "signature": [
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.SignificantItemGroupItem",
            "text": "SignificantItemGroupItem"
          },
          " extends ",
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.FieldValuePair",
            "text": "FieldValuePair"
          }
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroupItem.key",
            "type": "string",
            "tags": [],
            "label": "key",
            "description": [
              "The key associated with the significant item."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroupItem.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [
              "The type of the significant item."
            ],
            "signature": [
              "\"keyword\" | \"log_pattern\""
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroupItem.docCount",
            "type": "number",
            "tags": [],
            "label": "docCount",
            "description": [
              "The document count associated with this item."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroupItem.pValue",
            "type": "CompoundType",
            "tags": [],
            "label": "pValue",
            "description": [
              "The p-value for this item, or null if not available."
            ],
            "signature": [
              "number | null"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemGroupItem.duplicate",
            "type": "number",
            "tags": [],
            "label": "duplicate",
            "description": [
              "An optional number of duplicates."
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.SignificantItemHistogram",
        "type": "Interface",
        "tags": [
          "interface"
        ],
        "label": "SignificantItemHistogram",
        "description": [
          "\nRepresents histogram data for a field/value pair."
        ],
        "signature": [
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.SignificantItemHistogram",
            "text": "SignificantItemHistogram"
          },
          " extends ",
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.FieldValuePair",
            "text": "FieldValuePair"
          }
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemHistogram.histogram",
            "type": "Array",
            "tags": [],
            "label": "histogram",
            "description": [
              "An array of significant item histogram items."
            ],
            "signature": [
              {
                "pluginId": "@kbn/ml-agg-utils",
                "scope": "common",
                "docId": "kibKbnMlAggUtilsPluginApi",
                "section": "def-common.SignificantItemHistogramItem",
                "text": "SignificantItemHistogramItem"
              },
              "[]"
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.SignificantItemHistogramItem",
        "type": "Interface",
        "tags": [],
        "label": "SignificantItemHistogramItem",
        "description": [
          "\nRepresents a data item in a significant term histogram."
        ],
        "signature": [
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.SignificantItemHistogramItem",
            "text": "SignificantItemHistogramItem"
          },
          " extends SignificantItemHistogramItemBase"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ml-agg-utils",
            "id": "def-common.SignificantItemHistogramItem.doc_count_significant_item",
            "type": "number",
            "tags": [],
            "label": "doc_count_significant_item",
            "description": [
              "The document count for this histogram item in the significant item context."
            ],
            "path": "x-pack/packages/ml/agg_utils/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.TIME_SERIES_METRIC_TYPES",
        "type": "Enum",
        "tags": [],
        "label": "TIME_SERIES_METRIC_TYPES",
        "description": [
          "\nAll available types for time series metric fields"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/time_series_metric_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.DEFAULT_SAMPLER_SHARD_SIZE",
        "type": "number",
        "tags": [],
        "label": "DEFAULT_SAMPLER_SHARD_SIZE",
        "description": [
          "\nDefault sampler shard size used for field histograms"
        ],
        "signature": [
          "5000"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/field_histograms.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.FieldsForHistograms",
        "type": "Type",
        "tags": [],
        "label": "FieldsForHistograms",
        "description": [
          "\nAll types of histogram field definitions for fetching histogram data."
        ],
        "signature": [
          "(",
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.NumericHistogramField",
            "text": "NumericHistogramField"
          },
          " | NumericHistogramFieldWithColumnStats | OrdinalHistogramField | UnsupportedHistogramField)[]"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/fetch_histograms_for_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.NumberValidationResult",
        "type": "Type",
        "tags": [
          "interface"
        ],
        "label": "NumberValidationResult",
        "description": [
          "\nRepresents the result of number validation."
        ],
        "signature": [
          "{ [key: string]: boolean; } & { min?: boolean | undefined; max?: boolean | undefined; integerOnly?: boolean | undefined; }"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/validate_number.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.NumericColumnStatsMap",
        "type": "Type",
        "tags": [],
        "label": "NumericColumnStatsMap",
        "description": [
          "\nRecord/Map of histogram attributes where the key is the aggregation name."
        ],
        "signature": [
          "{ [x: string]: ",
          {
            "pluginId": "@kbn/ml-agg-utils",
            "scope": "common",
            "docId": "kibKbnMlAggUtilsPluginApi",
            "section": "def-common.NumericColumnStats",
            "text": "NumericColumnStats"
          },
          "; }"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.SignificantItemType",
        "type": "Type",
        "tags": [],
        "label": "SignificantItemType",
        "description": [
          "\nRepresents the type of significant item as determined by the SIGNIFICANT_ITEM_TYPE enumeration."
        ],
        "signature": [
          "\"keyword\" | \"log_pattern\""
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/ml-agg-utils",
        "id": "def-common.SIGNIFICANT_ITEM_TYPE",
        "type": "Object",
        "tags": [],
        "label": "SIGNIFICANT_ITEM_TYPE",
        "description": [
          "\nEnumeration of significant item types."
        ],
        "signature": [
          "{ readonly KEYWORD: \"keyword\"; readonly LOG_PATTERN: \"log_pattern\"; }"
        ],
        "path": "x-pack/packages/ml/agg_utils/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ]
  }
}