{
  "id": "lists",
  "client": {
    "classes": [
      {
        "parentPluginId": "lists",
        "id": "def-public.Plugin",
        "type": "Class",
        "tags": [],
        "label": "Plugin",
        "description": [],
        "signature": [
          {
            "pluginId": "lists",
            "scope": "public",
            "docId": "kibListsPluginApi",
            "section": "def-public.Plugin",
            "text": "Plugin"
          },
          " implements ",
          {
            "pluginId": "@kbn/core-plugins-browser",
            "scope": "common",
            "docId": "kibKbnCorePluginsBrowserPluginApi",
            "section": "def-common.Plugin",
            "text": "Plugin"
          },
          "<",
          {
            "pluginId": "lists",
            "scope": "public",
            "docId": "kibListsPluginApi",
            "section": "def-public.PluginSetup",
            "text": "PluginSetup"
          },
          ", ",
          {
            "pluginId": "lists",
            "scope": "public",
            "docId": "kibListsPluginApi",
            "section": "def-public.PluginStart",
            "text": "PluginStart"
          },
          ", ",
          "SetupPlugins",
          ", ",
          "StartPlugins",
          ">"
        ],
        "path": "x-pack/plugins/lists/public/plugin.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-public.Plugin.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/lists/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-public.Plugin.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "initializerContext",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-plugins-browser",
                    "scope": "common",
                    "docId": "kibKbnCorePluginsBrowserPluginApi",
                    "section": "def-common.PluginInitializerContext",
                    "text": "PluginInitializerContext"
                  },
                  "<object>"
                ],
                "path": "x-pack/plugins/lists/public/plugin.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-public.Plugin.setup",
            "type": "Function",
            "tags": [],
            "label": "setup",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "@kbn/core-lifecycle-browser",
                "scope": "common",
                "docId": "kibKbnCoreLifecycleBrowserPluginApi",
                "section": "def-common.CoreSetup",
                "text": "CoreSetup"
              },
              "<",
              "StartPlugins",
              ", ",
              {
                "pluginId": "lists",
                "scope": "public",
                "docId": "kibListsPluginApi",
                "section": "def-public.PluginStart",
                "text": "PluginStart"
              },
              ">, plugins: ",
              "SetupPlugins",
              ") => ",
              {
                "pluginId": "lists",
                "scope": "public",
                "docId": "kibListsPluginApi",
                "section": "def-public.PluginSetup",
                "text": "PluginSetup"
              }
            ],
            "path": "x-pack/plugins/lists/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-public.Plugin.setup.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-lifecycle-browser",
                    "scope": "common",
                    "docId": "kibKbnCoreLifecycleBrowserPluginApi",
                    "section": "def-common.CoreSetup",
                    "text": "CoreSetup"
                  },
                  "<",
                  "StartPlugins",
                  ", ",
                  {
                    "pluginId": "lists",
                    "scope": "public",
                    "docId": "kibListsPluginApi",
                    "section": "def-public.PluginStart",
                    "text": "PluginStart"
                  },
                  ">"
                ],
                "path": "x-pack/plugins/lists/public/plugin.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "lists",
                "id": "def-public.Plugin.setup.$2",
                "type": "Object",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "SetupPlugins"
                ],
                "path": "x-pack/plugins/lists/public/plugin.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-public.Plugin.start",
            "type": "Function",
            "tags": [],
            "label": "start",
            "description": [],
            "signature": [
              "(core: ",
              {
                "pluginId": "@kbn/core-lifecycle-browser",
                "scope": "common",
                "docId": "kibKbnCoreLifecycleBrowserPluginApi",
                "section": "def-common.CoreStart",
                "text": "CoreStart"
              },
              ", plugins: ",
              "StartPlugins",
              ") => ",
              {
                "pluginId": "lists",
                "scope": "public",
                "docId": "kibListsPluginApi",
                "section": "def-public.PluginStart",
                "text": "PluginStart"
              }
            ],
            "path": "x-pack/plugins/lists/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-public.Plugin.start.$1",
                "type": "Object",
                "tags": [],
                "label": "core",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-lifecycle-browser",
                    "scope": "common",
                    "docId": "kibKbnCoreLifecycleBrowserPluginApi",
                    "section": "def-common.CoreStart",
                    "text": "CoreStart"
                  }
                ],
                "path": "x-pack/plugins/lists/public/plugin.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "lists",
                "id": "def-public.Plugin.start.$2",
                "type": "Object",
                "tags": [],
                "label": "plugins",
                "description": [],
                "signature": [
                  "StartPlugins"
                ],
                "path": "x-pack/plugins/lists/public/plugin.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "lists",
        "id": "def-public.getExceptionBuilderComponentLazy",
        "type": "Function",
        "tags": [],
        "label": "getExceptionBuilderComponentLazy",
        "description": [],
        "signature": [
          "(props: ",
          "ExceptionBuilderProps",
          " & ExtraProps) => JSX.Element"
        ],
        "path": "x-pack/plugins/lists/public/exceptions/components/builder/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-public.getExceptionBuilderComponentLazy.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "ExceptionBuilderProps",
              " & ExtraProps"
            ],
            "path": "x-pack/plugins/lists/public/exceptions/components/builder/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "lists",
        "id": "def-public.OnChangeProps",
        "type": "Interface",
        "tags": [],
        "label": "OnChangeProps",
        "description": [],
        "path": "x-pack/plugins/lists/public/exceptions/components/builder/exception_items_renderer.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-public.OnChangeProps.errorExists",
            "type": "boolean",
            "tags": [],
            "label": "errorExists",
            "description": [],
            "path": "x-pack/plugins/lists/public/exceptions/components/builder/exception_items_renderer.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-public.OnChangeProps.exceptionItems",
            "type": "Array",
            "tags": [],
            "label": "exceptionItems",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/securitysolution-list-utils",
                "scope": "common",
                "docId": "kibKbnSecuritysolutionListUtilsPluginApi",
                "section": "def-common.ExceptionsBuilderReturnExceptionItem",
                "text": "ExceptionsBuilderReturnExceptionItem"
              },
              "[]"
            ],
            "path": "x-pack/plugins/lists/public/exceptions/components/builder/exception_items_renderer.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-public.OnChangeProps.exceptionsToDelete",
            "type": "Array",
            "tags": [],
            "label": "exceptionsToDelete",
            "description": [],
            "signature": [
              "{ _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; }[]"
            ],
            "path": "x-pack/plugins/lists/public/exceptions/components/builder/exception_items_renderer.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-public.OnChangeProps.warningExists",
            "type": "boolean",
            "tags": [],
            "label": "warningExists",
            "description": [],
            "path": "x-pack/plugins/lists/public/exceptions/components/builder/exception_items_renderer.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [],
    "objects": [],
    "setup": {
      "parentPluginId": "lists",
      "id": "def-public.PluginSetup",
      "type": "Interface",
      "tags": [],
      "label": "PluginSetup",
      "description": [],
      "path": "x-pack/plugins/lists/public/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "lists",
      "id": "def-public.PluginStart",
      "type": "Interface",
      "tags": [],
      "label": "PluginStart",
      "description": [],
      "path": "x-pack/plugins/lists/public/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "lists",
        "id": "def-server.ErrorWithStatusCode",
        "type": "Class",
        "tags": [],
        "label": "ErrorWithStatusCode",
        "description": [],
        "signature": [
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ErrorWithStatusCode",
            "text": "ErrorWithStatusCode"
          },
          " extends Error"
        ],
        "path": "x-pack/plugins/lists/server/error_with_status_code.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-server.ErrorWithStatusCode.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/lists/server/error_with_status_code.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ErrorWithStatusCode.Unnamed.$1",
                "type": "string",
                "tags": [],
                "label": "message",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/lists/server/error_with_status_code.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "lists",
                "id": "def-server.ErrorWithStatusCode.Unnamed.$2",
                "type": "number",
                "tags": [],
                "label": "statusCode",
                "description": [],
                "signature": [
                  "number"
                ],
                "path": "x-pack/plugins/lists/server/error_with_status_code.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ErrorWithStatusCode.getStatusCode",
            "type": "Function",
            "tags": [],
            "label": "getStatusCode",
            "description": [],
            "signature": [
              "() => number"
            ],
            "path": "x-pack/plugins/lists/server/error_with_status_code.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExceptionListClient",
        "type": "Class",
        "tags": [],
        "label": "ExceptionListClient",
        "description": [
          "\nClass for use for exceptions that are with trusted applications or\nwith rules."
        ],
        "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [
              "\nConstructs the exception list"
            ],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    user,\n    savedObjectsClient,\n    serverExtensionsClient,\n    enableServerExtensionPoints = true,\n    request,\n  }",
                "description": [],
                "signature": [
                  "ConstructorOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.getExceptionList",
            "type": "Function",
            "tags": [],
            "label": "getExceptionList",
            "description": [
              "\nFetch an exception list parent container"
            ],
            "signature": [
              "({ listId, id, namespaceType, }: ",
              "GetExceptionListOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; id: string; immutable: boolean; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"endpoint\" | \"detection\" | \"rule_default\" | \"endpoint_trusted_apps\" | \"endpoint_events\" | \"endpoint_host_isolation_exceptions\" | \"endpoint_blocklists\"; updated_at: string; updated_by: string; version: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.getExceptionList.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    listId,\n    id,\n    namespaceType,\n  }",
                "description": [],
                "signature": [
                  "GetExceptionListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The found exception list or null if none exists"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.getExceptionListSummary",
            "type": "Function",
            "tags": [],
            "label": "getExceptionListSummary",
            "description": [
              "\nFetch an exception list parent container"
            ],
            "signature": [
              "({ filter, listId, id, namespaceType, }: ",
              "GetExceptionListSummaryOptions",
              ") => Promise<{ windows: number; linux: number; macos: number; total: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.getExceptionListSummary.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    filter,\n    listId,\n    id,\n    namespaceType,\n  }",
                "description": [],
                "signature": [
                  "GetExceptionListSummaryOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "Summary of exception list item os types"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.getExceptionListItem",
            "type": "Function",
            "tags": [],
            "label": "getExceptionListItem",
            "description": [
              "\nFetch an exception list item container"
            ],
            "signature": [
              "({ itemId, id, namespaceType, }: ",
              "GetExceptionListItemOptions",
              ") => Promise<{ _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.getExceptionListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    itemId,\n    id,\n    namespaceType,\n  }",
                "description": [],
                "signature": [
                  "GetExceptionListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "the found exception list item or null if none exists"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.createEndpointList",
            "type": "Function",
            "tags": [],
            "label": "createEndpointList",
            "description": [
              "\nThis creates an agnostic space endpoint list if it does not exist. This tries to be\nas fast as possible by ignoring conflict errors and not returning the contents of the\nlist if it already exists."
            ],
            "signature": [
              "() => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; id: string; immutable: boolean; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"endpoint\" | \"detection\" | \"rule_default\" | \"endpoint_trusted_apps\" | \"endpoint_events\" | \"endpoint_host_isolation_exceptions\" | \"endpoint_blocklists\"; updated_at: string; updated_by: string; version: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "ExceptionListSchema if it created the endpoint list, otherwise null if it already exists"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.createTrustedAppsList",
            "type": "Function",
            "tags": [],
            "label": "createTrustedAppsList",
            "description": [
              "\nCreate the Trusted Apps Agnostic list if it does not yet exist (`null` is returned if it does exist)"
            ],
            "signature": [
              "() => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; id: string; immutable: boolean; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"endpoint\" | \"detection\" | \"rule_default\" | \"endpoint_trusted_apps\" | \"endpoint_events\" | \"endpoint_host_isolation_exceptions\" | \"endpoint_blocklists\"; updated_at: string; updated_by: string; version: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The exception list schema or null if it does not exist"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.createEndpointListItem",
            "type": "Function",
            "tags": [],
            "label": "createEndpointListItem",
            "description": [
              "\nThis is the same as \"createListItem\" except it applies specifically to the agnostic endpoint list and will\nauto-call the \"createEndpointList\" for you so that you have the best chance of the agnostic endpoint\nbeing there and existing before the item is inserted into the agnostic endpoint list."
            ],
            "signature": [
              "({ comments, description, entries, expireTime, itemId, meta, name, osTypes, tags, type, }: ",
              "CreateEndpointListItemOptions",
              ") => Promise<{ _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; }>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.createEndpointListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    comments,\n    description,\n    entries,\n    expireTime,\n    itemId,\n    meta,\n    name,\n    osTypes,\n    tags,\n    type,\n  }",
                "description": [],
                "signature": [
                  "CreateEndpointListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The exception list item created, otherwise null if not created"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.duplicateExceptionListAndItems",
            "type": "Function",
            "tags": [],
            "label": "duplicateExceptionListAndItems",
            "description": [
              "\nCreate the Trusted Apps Agnostic list if it does not yet exist (`null` is returned if it does exist)"
            ],
            "signature": [
              "({ listId, namespaceType, }: ",
              "DuplicateExceptionListOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; id: string; immutable: boolean; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"endpoint\" | \"detection\" | \"rule_default\" | \"endpoint_trusted_apps\" | \"endpoint_events\" | \"endpoint_host_isolation_exceptions\" | \"endpoint_blocklists\"; updated_at: string; updated_by: string; version: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.duplicateExceptionListAndItems.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    listId,\n    namespaceType,\n  }",
                "description": [],
                "signature": [
                  "DuplicateExceptionListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The exception list schema or null if it does not exist"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.updateEndpointListItem",
            "type": "Function",
            "tags": [],
            "label": "updateEndpointListItem",
            "description": [
              "\nThis is the same as \"updateExceptionListItem\" except it applies specifically to the endpoint list and will\nauto-call the \"createEndpointList\" for you so that you have the best chance of the endpoint\nbeing there if it did not exist before. If the list did not exist before, then creating it here will still cause a\nreturn of null but at least the list exists again."
            ],
            "signature": [
              "({ _version, comments, description, entries, expireTime, id, itemId, meta, name, osTypes, tags, type, }: ",
              "UpdateEndpointListItemOptions",
              ") => Promise<{ _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.updateEndpointListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    _version,\n    comments,\n    description,\n    entries,\n    expireTime,\n    id,\n    itemId,\n    meta,\n    name,\n    osTypes,\n    tags,\n    type,\n  }",
                "description": [],
                "signature": [
                  "UpdateEndpointListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The exception list item updated, otherwise null if not updated"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.getEndpointListItem",
            "type": "Function",
            "tags": [],
            "label": "getEndpointListItem",
            "description": [
              "\nThis is the same as \"getExceptionListItem\" except it applies specifically to the endpoint list."
            ],
            "signature": [
              "({ itemId, id, }: ",
              "GetEndpointListItemOptions",
              ") => Promise<{ _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.getEndpointListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    itemId,\n    id,\n  }",
                "description": [],
                "signature": [
                  "GetEndpointListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The exception list item found, otherwise null"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.createExceptionList",
            "type": "Function",
            "tags": [],
            "label": "createExceptionList",
            "description": [
              "\nCreate an exception list container"
            ],
            "signature": [
              "({ description, immutable, listId, meta, name, namespaceType, tags, type, version, }: ",
              "CreateExceptionListOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; id: string; immutable: boolean; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"endpoint\" | \"detection\" | \"rule_default\" | \"endpoint_trusted_apps\" | \"endpoint_events\" | \"endpoint_host_isolation_exceptions\" | \"endpoint_blocklists\"; updated_at: string; updated_by: string; version: number; }>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.createExceptionList.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    description,\n    immutable,\n    listId,\n    meta,\n    name,\n    namespaceType,\n    tags,\n    type,\n    version,\n  }",
                "description": [],
                "signature": [
                  "CreateExceptionListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "the created exception list parent container"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.updateExceptionList",
            "type": "Function",
            "tags": [],
            "label": "updateExceptionList",
            "description": [
              "\nUpdate an existing exception list container"
            ],
            "signature": [
              "({ _version, id, description, listId, meta, name, namespaceType, tags, type, version, }: ",
              "UpdateExceptionListOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; id: string; immutable: boolean; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"endpoint\" | \"detection\" | \"rule_default\" | \"endpoint_trusted_apps\" | \"endpoint_events\" | \"endpoint_host_isolation_exceptions\" | \"endpoint_blocklists\"; updated_at: string; updated_by: string; version: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.updateExceptionList.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    _version,\n    id,\n    description,\n    listId,\n    meta,\n    name,\n    namespaceType,\n    tags,\n    type,\n    version,\n  }",
                "description": [],
                "signature": [
                  "UpdateExceptionListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "the updated exception list parent container"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.deleteExceptionList",
            "type": "Function",
            "tags": [],
            "label": "deleteExceptionList",
            "description": [
              "\nDelete an exception list container by either id or list_id"
            ],
            "signature": [
              "({ id, listId, namespaceType, }: ",
              "DeleteExceptionListOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; id: string; immutable: boolean; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"endpoint\" | \"detection\" | \"rule_default\" | \"endpoint_trusted_apps\" | \"endpoint_events\" | \"endpoint_host_isolation_exceptions\" | \"endpoint_blocklists\"; updated_at: string; updated_by: string; version: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.deleteExceptionList.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    id,\n    listId,\n    namespaceType,\n  }",
                "description": [],
                "signature": [
                  "DeleteExceptionListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "the deleted exception list or null if none exists"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.createExceptionListItem",
            "type": "Function",
            "tags": [],
            "label": "createExceptionListItem",
            "description": [
              "\nCreate an exception list item container"
            ],
            "signature": [
              "({ comments, description, entries, expireTime, itemId, listId, meta, name, namespaceType, osTypes, tags, type, }: ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.CreateExceptionListItemOptions",
                "text": "CreateExceptionListItemOptions"
              },
              ") => Promise<{ _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; }>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.createExceptionListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    comments,\n    description,\n    entries,\n    expireTime,\n    itemId,\n    listId,\n    meta,\n    name,\n    namespaceType,\n    osTypes,\n    tags,\n    type,\n  }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "lists",
                    "scope": "server",
                    "docId": "kibListsPluginApi",
                    "section": "def-server.CreateExceptionListItemOptions",
                    "text": "CreateExceptionListItemOptions"
                  }
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "the created exception list item container"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.updateExceptionListItem",
            "type": "Function",
            "tags": [],
            "label": "updateExceptionListItem",
            "description": [
              "\nUpdate an existing exception list item"
            ],
            "signature": [
              "({ _version, comments, description, entries, expireTime, id, itemId, meta, name, namespaceType, osTypes, tags, type, }: ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.UpdateExceptionListItemOptions",
                "text": "UpdateExceptionListItemOptions"
              },
              ") => Promise<{ _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.updateExceptionListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    _version,\n    comments,\n    description,\n    entries,\n    expireTime,\n    id,\n    itemId,\n    meta,\n    name,\n    namespaceType,\n    osTypes,\n    tags,\n    type,\n  }",
                "description": [],
                "signature": [
                  {
                    "pluginId": "lists",
                    "scope": "server",
                    "docId": "kibListsPluginApi",
                    "section": "def-server.UpdateExceptionListItemOptions",
                    "text": "UpdateExceptionListItemOptions"
                  }
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "the updated exception list item or null if none exists"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.deleteExceptionListItem",
            "type": "Function",
            "tags": [],
            "label": "deleteExceptionListItem",
            "description": [
              "\nDelete an exception list item by either id or item_id"
            ],
            "signature": [
              "({ id, itemId, namespaceType, }: ",
              "DeleteExceptionListItemOptions",
              ") => Promise<{ _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.deleteExceptionListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    id,\n    itemId,\n    namespaceType,\n  }",
                "description": [],
                "signature": [
                  "DeleteExceptionListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "the deleted exception list item or null if none exists"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.deleteExceptionListItemById",
            "type": "Function",
            "tags": [],
            "label": "deleteExceptionListItemById",
            "description": [
              "\nDelete an exception list item by id"
            ],
            "signature": [
              "({ id, namespaceType, }: ",
              "DeleteExceptionListItemByIdOptions",
              ") => Promise<void>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.deleteExceptionListItemById.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    id,\n    namespaceType,\n  }",
                "description": [],
                "signature": [
                  "DeleteExceptionListItemByIdOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.deleteEndpointListItem",
            "type": "Function",
            "tags": [],
            "label": "deleteEndpointListItem",
            "description": [
              "\nThis is the same as \"deleteExceptionListItem\" except it applies specifically to the endpoint list.\nEither id or itemId has to be defined to delete but not both is required. If both are provided, the id\nis preferred."
            ],
            "signature": [
              "({ id, itemId, }: ",
              "DeleteEndpointListItemOptions",
              ") => Promise<{ _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.deleteEndpointListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    id,\n    itemId,\n  }",
                "description": [],
                "signature": [
                  "DeleteEndpointListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.findExceptionListItem",
            "type": "Function",
            "tags": [],
            "label": "findExceptionListItem",
            "description": [
              "\nFinds an exception list item given a set of criteria."
            ],
            "signature": [
              "({ listId, filter, perPage, pit, page, search, searchAfter, sortField, sortOrder, namespaceType, }: ",
              "FindExceptionListItemOptions",
              ") => Promise<({ data: { _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; }[]; page: number; per_page: number; total: number; } & { pit?: string | undefined; }) | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.findExceptionListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    listId,\n    filter,\n    perPage,\n    pit,\n    page,\n    search,\n    searchAfter,\n    sortField,\n    sortOrder,\n    namespaceType,\n  }",
                "description": [],
                "signature": [
                  "FindExceptionListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The found exception list items or null if nothing is found"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.findExceptionListsItem",
            "type": "Function",
            "tags": [],
            "label": "findExceptionListsItem",
            "description": [
              "\nFinds exception lists items given a set of criteria."
            ],
            "signature": [
              "({ listId, filter, perPage, pit, page, search, searchAfter, sortField, sortOrder, namespaceType, }: ",
              "FindExceptionListsItemOptions",
              ") => Promise<({ data: { _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; }[]; page: number; per_page: number; total: number; } & { pit?: string | undefined; }) | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.findExceptionListsItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    listId,\n    filter,\n    perPage,\n    pit,\n    page,\n    search,\n    searchAfter,\n    sortField,\n    sortOrder,\n    namespaceType,\n  }",
                "description": [],
                "signature": [
                  "FindExceptionListsItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The found exception lists items or null if nothing is found"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.findValueListExceptionListItems",
            "type": "Function",
            "tags": [],
            "label": "findValueListExceptionListItems",
            "description": [
              "\nFinds value list exception items given a set of criteria."
            ],
            "signature": [
              "({ perPage, pit, page, searchAfter, sortField, sortOrder, valueListId, }: ",
              "FindValueListExceptionListsItems",
              ") => Promise<({ data: { _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; }[]; page: number; per_page: number; total: number; } & { pit?: string | undefined; }) | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.findValueListExceptionListItems.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    perPage,\n    pit,\n    page,\n    searchAfter,\n    sortField,\n    sortOrder,\n    valueListId,\n  }",
                "description": [],
                "signature": [
                  "FindValueListExceptionListsItems"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The found value list exception list item or null if nothing is found"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.findExceptionList",
            "type": "Function",
            "tags": [],
            "label": "findExceptionList",
            "description": [
              "\nFinds exception lists given a set of criteria."
            ],
            "signature": [
              "({ filter, perPage, page, pit, searchAfter, sortField, sortOrder, namespaceType, }: ",
              "FindExceptionListOptions",
              ") => Promise<{ data: { _version: string | undefined; created_at: string; created_by: string; description: string; id: string; immutable: boolean; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"endpoint\" | \"detection\" | \"rule_default\" | \"endpoint_trusted_apps\" | \"endpoint_events\" | \"endpoint_host_isolation_exceptions\" | \"endpoint_blocklists\"; updated_at: string; updated_by: string; version: number; }[]; page: number; per_page: number; total: number; } & { pit?: string | undefined; }>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.findExceptionList.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    filter,\n    perPage,\n    page,\n    pit,\n    searchAfter,\n    sortField,\n    sortOrder,\n    namespaceType,\n  }",
                "description": [],
                "signature": [
                  "FindExceptionListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The found exception lists or null if nothing is found"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.findEndpointListItem",
            "type": "Function",
            "tags": [],
            "label": "findEndpointListItem",
            "description": [
              "\nThis is the same as \"findExceptionList\" except it applies specifically to the  endpoint list and will\nauto-call the \"createEndpointList\" for you so that you have the best chance of the  endpoint\nbeing there if it did not exist before. If the list did not exist before, then creating it here should give you\na good guarantee that you will get an empty record set rather than null. I keep the null as the return value in\nthe off chance that you still might somehow not get into a race condition where the  endpoint list does\nnot exist because someone deleted it in-between the initial create and then the find."
            ],
            "signature": [
              "({ filter, perPage, page, pit, search, searchAfter, sortField, sortOrder, }: ",
              "FindEndpointListItemOptions",
              ") => Promise<({ data: { _version: string | undefined; comments: ({ comment: string; created_at: string; created_by: string; id: string; } & { updated_at?: string | undefined; updated_by?: string | undefined; })[]; created_at: string; created_by: string; description: string; entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]; expire_time: string | undefined; id: string; item_id: string; list_id: string; meta: object | undefined; name: string; namespace_type: \"single\" | \"agnostic\"; os_types: (\"windows\" | \"linux\" | \"macos\")[]; tags: string[]; tie_breaker_id: string; type: \"simple\"; updated_at: string; updated_by: string; }[]; page: number; per_page: number; total: number; } & { pit?: string | undefined; }) | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.findEndpointListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    filter,\n    perPage,\n    page,\n    pit,\n    search,\n    searchAfter,\n    sortField,\n    sortOrder,\n  }",
                "description": [],
                "signature": [
                  "FindEndpointListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The found exception list items or null if nothing is found"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.exportExceptionListAndItems",
            "type": "Function",
            "tags": [],
            "label": "exportExceptionListAndItems",
            "description": [
              "\nExport an exception list parent container and it's items"
            ],
            "signature": [
              "({ listId, id, namespaceType, includeExpiredExceptions, }: ",
              "ExportExceptionListAndItemsOptions",
              ") => Promise<",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExportExceptionListAndItemsReturn",
                "text": "ExportExceptionListAndItemsReturn"
              },
              " | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.exportExceptionListAndItems.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    listId,\n    id,\n    namespaceType,\n    includeExpiredExceptions,\n  }",
                "description": [],
                "signature": [
                  "ExportExceptionListAndItemsOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "the ndjson of the list and items to export or null if none exists"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.importExceptionListAndItems",
            "type": "Function",
            "tags": [],
            "label": "importExceptionListAndItems",
            "description": [
              "\nImport exception lists parent containers and items as stream"
            ],
            "signature": [
              "({ exceptionsToImport, maxExceptionsImportSize, overwrite, generateNewListId, }: ",
              "ImportExceptionListAndItemsOptions",
              ") => Promise<{ errors: ({ error: { status_code: number; message: string; }; } & { id?: string | undefined; list_id?: string | undefined; item_id?: string | undefined; })[]; success: boolean; success_count: number; success_exception_lists: boolean; success_count_exception_lists: number; success_exception_list_items: boolean; success_count_exception_list_items: number; }>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.importExceptionListAndItems.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    exceptionsToImport,\n    maxExceptionsImportSize,\n    overwrite,\n    generateNewListId,\n  }",
                "description": [],
                "signature": [
                  "ImportExceptionListAndItemsOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "summary of imported count and errors"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.importExceptionListAndItemsAsArray",
            "type": "Function",
            "tags": [],
            "label": "importExceptionListAndItemsAsArray",
            "description": [
              "\nImport exception lists parent containers and items as array"
            ],
            "signature": [
              "({ exceptionsToImport, maxExceptionsImportSize, overwrite, }: ",
              "ImportExceptionListAndItemsAsArrayOptions",
              ") => Promise<{ errors: ({ error: { status_code: number; message: string; }; } & { id?: string | undefined; list_id?: string | undefined; item_id?: string | undefined; })[]; success: boolean; success_count: number; success_exception_lists: boolean; success_count_exception_lists: number; success_exception_list_items: boolean; success_count_exception_list_items: number; }>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.importExceptionListAndItemsAsArray.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    exceptionsToImport,\n    maxExceptionsImportSize,\n    overwrite,\n  }",
                "description": [],
                "signature": [
                  "ImportExceptionListAndItemsAsArrayOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "summary of imported count and errors"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.openPointInTime",
            "type": "Function",
            "tags": [],
            "label": "openPointInTime",
            "description": [
              "\nOpens a point in time (PIT) for either exception lists or exception list items.\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/point-in-time-api.html"
            ],
            "signature": [
              "({ namespaceType, options, }: ",
              "OpenPointInTimeOptions",
              ") => Promise<",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsOpenPointInTimeResponse",
                "text": "SavedObjectsOpenPointInTimeResponse"
              },
              ">"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.openPointInTime.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    namespaceType,\n    options,\n  }",
                "description": [],
                "signature": [
                  "OpenPointInTimeOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The point in time (PIT)"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.closePointInTime",
            "type": "Function",
            "tags": [],
            "label": "closePointInTime",
            "description": [
              "\nCloses a point in time (PIT) for either exception lists or exception list items.\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/point-in-time-api.html"
            ],
            "signature": [
              "({ pit, }: ",
              "ClosePointInTimeOptions",
              ") => Promise<",
              {
                "pluginId": "@kbn/core-saved-objects-api-server",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                "section": "def-common.SavedObjectsClosePointInTimeResponse",
                "text": "SavedObjectsClosePointInTimeResponse"
              },
              ">"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.closePointInTime.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    pit,\n  }",
                "description": [],
                "signature": [
                  "ClosePointInTimeOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The point in time (PIT)"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.findExceptionListItemPointInTimeFinder",
            "type": "Function",
            "tags": [],
            "label": "findExceptionListItemPointInTimeFinder",
            "description": [
              "\nFinds an exception list item within a point in time (PIT) and then calls the function\n`executeFunctionOnStream` until the maxPerPage is reached and stops.\nNOTE: This is slightly different from the saved objects version in that it takes\nan injected function, so that we avoid doing additional plumbing with generators\nto try to keep the maintenance of this machinery simpler for now.\n\nIf you want to stream all results up to 10k into memory for correlation this would be:"
            ],
            "signature": [
              "({ executeFunctionOnStream, filter, listId, maxSize, namespaceType, perPage, sortField, sortOrder, }: ",
              "FindExceptionListItemPointInTimeFinderOptions",
              ") => Promise<void>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.findExceptionListItemPointInTimeFinder.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    executeFunctionOnStream,\n    filter,\n    listId,\n    maxSize,\n    namespaceType,\n    perPage,\n    sortField,\n    sortOrder,\n  }",
                "description": [],
                "signature": [
                  "FindExceptionListItemPointInTimeFinderOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.findExceptionListPointInTimeFinder",
            "type": "Function",
            "tags": [],
            "label": "findExceptionListPointInTimeFinder",
            "description": [
              "\nFinds an exception list within a point in time (PIT) and then calls the function\n`executeFunctionOnStream` until the maxPerPage is reached and stops.\nNOTE: This is slightly different from the saved objects version in that it takes\nan injected function, so that we avoid doing additional plumbing with generators\nto try to keep the maintenance of this machinery simpler for now.\n\nIf you want to stream all results up to 10k into memory for correlation this would be:"
            ],
            "signature": [
              "({ executeFunctionOnStream, filter, maxSize, namespaceType, perPage, sortField, sortOrder, }: ",
              "FindExceptionListPointInTimeFinderOptions",
              ") => Promise<void>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.findExceptionListPointInTimeFinder.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    executeFunctionOnStream,\n    filter,\n    maxSize,\n    namespaceType,\n    perPage,\n    sortField,\n    sortOrder,\n  }",
                "description": [],
                "signature": [
                  "FindExceptionListPointInTimeFinderOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.findExceptionListsItemPointInTimeFinder",
            "type": "Function",
            "tags": [],
            "label": "findExceptionListsItemPointInTimeFinder",
            "description": [
              "\nFinds exception list items within a point in time (PIT) and then calls the function\n`executeFunctionOnStream` until the maxPerPage is reached and stops.\nNOTE: This is slightly different from the saved objects version in that it takes\nan injected function, so that we avoid doing additional plumbing with generators\nto try to keep the maintenance of this machinery simpler for now.\n\nIf you want to stream all results up to 10k into memory for correlation this would be:"
            ],
            "signature": [
              "({ listId, namespaceType, executeFunctionOnStream, maxSize, filter, perPage, sortField, sortOrder, }: ",
              "FindExceptionListItemsPointInTimeFinderOptions",
              ") => Promise<void>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.findExceptionListsItemPointInTimeFinder.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    listId,\n    namespaceType,\n    executeFunctionOnStream,\n    maxSize,\n    filter,\n    perPage,\n    sortField,\n    sortOrder,\n  }",
                "description": [],
                "signature": [
                  "FindExceptionListItemsPointInTimeFinderOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExceptionListClient.findValueListExceptionListItemsPointInTimeFinder",
            "type": "Function",
            "tags": [],
            "label": "findValueListExceptionListItemsPointInTimeFinder",
            "description": [
              "\nFinds value lists within exception lists within a point in time (PIT) and then calls the function\n`executeFunctionOnStream` until the maxPerPage is reached and stops.\nNOTE: This is slightly different from the saved objects version in that it takes\nan injected function, so that we avoid doing additional plumbing with generators\nto try to keep the maintenance of this machinery simpler for now.\n\nIf you want to stream all results up to 10k into memory for correlation this would be:"
            ],
            "signature": [
              "({ valueListId, executeFunctionOnStream, perPage, maxSize, sortField, sortOrder, }: ",
              "FindValueListExceptionListsItemsPointInTimeFinder",
              ") => Promise<void>"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ExceptionListClient.findValueListExceptionListItemsPointInTimeFinder.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    valueListId,\n    executeFunctionOnStream,\n    perPage,\n    maxSize,\n    sortField,\n    sortOrder,\n  }",
                "description": [],
                "signature": [
                  "FindValueListExceptionListsItemsPointInTimeFinder"
                ],
                "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ListClient",
        "type": "Class",
        "tags": [],
        "label": "ListClient",
        "description": [
          "\nClass for use for value lists are are associated with exception lists.\nSee {@link https://www.elastic.co/guide/en/security/current/lists-api-create-container.html}"
        ],
        "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [
              "\nConstructs the value list"
            ],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "{ spaceId, user, config, esClient }",
                "description": [],
                "signature": [
                  "ConstructorOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListIndex",
            "type": "Function",
            "tags": [],
            "label": "getListIndex",
            "description": [
              "\nReturns the list index name"
            ],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The list index name"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListItemIndex",
            "type": "Function",
            "tags": [],
            "label": "getListItemIndex",
            "description": [
              "\nReturns the list item index name"
            ],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The list item index name"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getList",
            "type": "Function",
            "tags": [],
            "label": "getList",
            "description": [
              "\nGiven a list id, this will return the list container"
            ],
            "signature": [
              "({ id }: ",
              "GetListOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; deserializer: string | undefined; id: string; immutable: boolean; meta: object | undefined; name: string; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; version: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.getList.$1",
                "type": "Object",
                "tags": [],
                "label": "{ id }",
                "description": [],
                "signature": [
                  "GetListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The List container if found, otherwise null"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.createList",
            "type": "Function",
            "tags": [],
            "label": "createList",
            "description": [
              "\nCreates a list, if given at least the \"name\", \"description\", \"type\", and \"version\"\nSee {@link https://www.elastic.co/guide/en/security/current/lists-api-create-container.html}\nfor more information around formats of the deserializer and serializer"
            ],
            "signature": [
              "({ id, deserializer, immutable, serializer, name, description, type, meta, version, }: ",
              "CreateListOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; deserializer: string | undefined; id: string; immutable: boolean; meta: object | undefined; name: string; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; version: number; }>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.createList.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    id,\n    deserializer,\n    immutable,\n    serializer,\n    name,\n    description,\n    type,\n    meta,\n    version,\n  }",
                "description": [],
                "signature": [
                  "CreateListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The list created"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.createListIfItDoesNotExist",
            "type": "Function",
            "tags": [],
            "label": "createListIfItDoesNotExist",
            "description": [
              "\nCreates a list, if given at least the \"name\", \"description\", \"type\", and \"version\"\nSee {@link https://www.elastic.co/guide/en/security/current/lists-api-create-container.html}\nfor more information around formats of the deserializer and serializer.\nThis will create the list if it does not exist. If the list exists, this will ignore creating\nanything and just return the existing list."
            ],
            "signature": [
              "({ id, deserializer, serializer, name, description, immutable, type, meta, version, }: ",
              "CreateListIfItDoesNotExistOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; deserializer: string | undefined; id: string; immutable: boolean; meta: object | undefined; name: string; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; version: number; }>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.createListIfItDoesNotExist.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    id,\n    deserializer,\n    serializer,\n    name,\n    description,\n    immutable,\n    type,\n    meta,\n    version,\n  }",
                "description": [],
                "signature": [
                  "CreateListIfItDoesNotExistOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The list created"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListIndexExists",
            "type": "Function",
            "tags": [],
            "label": "getListIndexExists",
            "description": [
              "\nTrue if the list index exists, otherwise false"
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "True if the list index exists, otherwise false"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListItemIndexExists",
            "type": "Function",
            "tags": [],
            "label": "getListItemIndexExists",
            "description": [
              "\nTrue if the list index item exists, otherwise false"
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "True if the list item index exists, otherwise false"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.createListBootStrapIndex",
            "type": "Function",
            "tags": [],
            "label": "createListBootStrapIndex",
            "description": [
              "\nCreates the list boot strap index for ILM policies."
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the bootstrap response from Elasticsearch"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.createListItemBootStrapIndex",
            "type": "Function",
            "tags": [],
            "label": "createListItemBootStrapIndex",
            "description": [
              "\nCreates the list item boot strap index for ILM policies."
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the bootstrap response from Elasticsearch"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListPolicyExists",
            "type": "Function",
            "tags": [],
            "label": "getListPolicyExists",
            "description": [
              "\nReturns true if the list policy for ILM exists, otherwise false"
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "True if the list policy for ILM exists, otherwise false."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListItemPolicyExists",
            "type": "Function",
            "tags": [],
            "label": "getListItemPolicyExists",
            "description": [
              "\nReturns true if the list item policy for ILM exists, otherwise false"
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "True if the list item policy for ILM exists, otherwise false."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListTemplateExists",
            "type": "Function",
            "tags": [],
            "label": "getListTemplateExists",
            "description": [
              "\nReturns true if the list template for ILM exists, otherwise false"
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "True if the list template for ILM exists, otherwise false."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListItemTemplateExists",
            "type": "Function",
            "tags": [],
            "label": "getListItemTemplateExists",
            "description": [
              "\nReturns true if the list item template for ILM exists, otherwise false"
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "True if the list item template for ILM exists, otherwise false."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getLegacyListTemplateExists",
            "type": "Function",
            "tags": [],
            "label": "getLegacyListTemplateExists",
            "description": [
              "\nReturns true if the list template for ILM exists, otherwise false"
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "True if the list template for ILM exists, otherwise false."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getLegacyListItemTemplateExists",
            "type": "Function",
            "tags": [],
            "label": "getLegacyListItemTemplateExists",
            "description": [
              "\nReturns true if the list item template for ILM exists, otherwise false"
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "True if the list item template for ILM exists, otherwise false."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListTemplate",
            "type": "Function",
            "tags": [],
            "label": "getListTemplate",
            "description": [
              "\nReturns the list template for ILM."
            ],
            "signature": [
              "() => Record<string, unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the list template for ILM."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListItemTemplate",
            "type": "Function",
            "tags": [],
            "label": "getListItemTemplate",
            "description": [
              "\nReturns the list item template for ILM."
            ],
            "signature": [
              "() => Record<string, unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the list item template for ILM."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.setListTemplate",
            "type": "Function",
            "tags": [],
            "label": "setListTemplate",
            "description": [
              "\nSets the list template for ILM."
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the list template for ILM."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.setListItemTemplate",
            "type": "Function",
            "tags": [],
            "label": "setListItemTemplate",
            "description": [
              "\nSets the list item template for ILM."
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the list item template for ILM."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.setListPolicy",
            "type": "Function",
            "tags": [],
            "label": "setListPolicy",
            "description": [
              "\nSets the list policy"
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the list policy set"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.setListItemPolicy",
            "type": "Function",
            "tags": [],
            "label": "setListItemPolicy",
            "description": [
              "\nSets the list item policy"
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the list policy set"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteListIndex",
            "type": "Function",
            "tags": [],
            "label": "deleteListIndex",
            "description": [
              "\nDeletes the list index"
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "True if the list index was deleted, otherwise false"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteListItemIndex",
            "type": "Function",
            "tags": [],
            "label": "deleteListItemIndex",
            "description": [
              "\nDeletes the list item index"
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "True if the list item index was deleted, otherwise false"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteListPolicy",
            "type": "Function",
            "tags": [],
            "label": "deleteListPolicy",
            "description": [
              "\nDeletes the list policy"
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the list policy"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteListItemPolicy",
            "type": "Function",
            "tags": [],
            "label": "deleteListItemPolicy",
            "description": [
              "\nDeletes the list item policy"
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the list item policy"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteListTemplate",
            "type": "Function",
            "tags": [],
            "label": "deleteListTemplate",
            "description": [
              "\nDeletes the list template"
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the list template"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteListItemTemplate",
            "type": "Function",
            "tags": [],
            "label": "deleteListItemTemplate",
            "description": [
              "\nDeletes the list item template"
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the list item template"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteLegacyListTemplate",
            "type": "Function",
            "tags": [],
            "label": "deleteLegacyListTemplate",
            "description": [
              "\nDeletes the list boot strap index for ILM policies."
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the bootstrap response from Elasticsearch"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteLegacyListItemTemplate",
            "type": "Function",
            "tags": [],
            "label": "deleteLegacyListItemTemplate",
            "description": [
              "\nDelete the list item boot strap index for ILM policies."
            ],
            "signature": [
              "() => Promise<unknown>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": [
              "The contents of the bootstrap response from Elasticsearch"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteListItem",
            "type": "Function",
            "tags": [],
            "label": "deleteListItem",
            "description": [
              "\nGiven a list item id, this will delete the single list item"
            ],
            "signature": [
              "({ id }: ",
              "DeleteListItemOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; deserializer: string | undefined; id: string; list_id: string; meta: object | undefined; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; value: string; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.deleteListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{ id }",
                "description": [],
                "signature": [
                  "DeleteListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The list item if found, otherwise null"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteListItemByValue",
            "type": "Function",
            "tags": [],
            "label": "deleteListItemByValue",
            "description": [
              "\nGiven a list value, this will delete all list items that have that value"
            ],
            "signature": [
              "({ listId, value, type, }: ",
              "DeleteListItemByValueOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; deserializer: string | undefined; id: string; list_id: string; meta: object | undefined; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; value: string; }[]>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.deleteListItemByValue.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    listId,\n    value,\n    type,\n  }",
                "description": [],
                "signature": [
                  "DeleteListItemByValueOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The list items deleted."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.deleteList",
            "type": "Function",
            "tags": [],
            "label": "deleteList",
            "description": [
              "\nGiven a list id, this will delete the list from the id"
            ],
            "signature": [
              "({ id }: ",
              "DeleteListOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; deserializer: string | undefined; id: string; immutable: boolean; meta: object | undefined; name: string; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; version: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.deleteList.$1",
                "type": "Object",
                "tags": [],
                "label": "{ id }",
                "description": [],
                "signature": [
                  "DeleteListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The list deleted if found, otherwise null"
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.exportListItemsToStream",
            "type": "Function",
            "tags": [],
            "label": "exportListItemsToStream",
            "description": [
              "\nExports list items to a stream"
            ],
            "signature": [
              "({ stringToAppend, listId, stream, }: ",
              "ExportListItemsToStreamOptions",
              ") => void"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.exportListItemsToStream.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    stringToAppend,\n    listId,\n    stream,\n  }",
                "description": [],
                "signature": [
                  "ExportListItemsToStreamOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.importListItemsToStream",
            "type": "Function",
            "tags": [],
            "label": "importListItemsToStream",
            "description": [
              "\nImports list items to a stream. If the list already exists, this will append the list items to the existing list.\nIf the list does not exist, this will auto-create the list and then add the items to that list.\nSee {@link https://www.elastic.co/guide/en/security/current/lists-api-create-container.html}\nfor more information around formats of the deserializer and serializer."
            ],
            "signature": [
              "({ deserializer, serializer, type, listId, stream, meta, version, }: ",
              "ImportListItemsToStreamOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; deserializer: string | undefined; id: string; immutable: boolean; meta: object | undefined; name: string; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; version: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.importListItemsToStream.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    deserializer,\n    serializer,\n    type,\n    listId,\n    stream,\n    meta,\n    version,\n  }",
                "description": [],
                "signature": [
                  "ImportListItemsToStreamOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListItemByValue",
            "type": "Function",
            "tags": [],
            "label": "getListItemByValue",
            "description": [
              "\nReturns all list items found by value."
            ],
            "signature": [
              "({ listId, value, type, }: ",
              "GetListItemByValueOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; deserializer: string | undefined; id: string; list_id: string; meta: object | undefined; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; value: string; }[]>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.getListItemByValue.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    listId,\n    value,\n    type,\n  }",
                "description": [],
                "signature": [
                  "GetListItemByValueOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The list items by value found."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.createListItem",
            "type": "Function",
            "tags": [],
            "label": "createListItem",
            "description": [
              "\nCreates a list item given at least \"value\", \"type\", and a \"listId\" where \"listId\" is the parent container that this list\nitem belongs to.\nSee {@link https://www.elastic.co/guide/en/security/current/lists-api-create-container.html}\nfor more information around formats of the deserializer and serializer."
            ],
            "signature": [
              "({ id, deserializer, serializer, listId, value, type, meta, }: ",
              "CreateListItemOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; deserializer: string | undefined; id: string; list_id: string; meta: object | undefined; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; value: string; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.createListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    id,\n    deserializer,\n    serializer,\n    listId,\n    value,\n    type,\n    meta,\n  }",
                "description": [],
                "signature": [
                  "CreateListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.updateListItem",
            "type": "Function",
            "tags": [],
            "label": "updateListItem",
            "description": [
              "\nUpdates a list item's value given the id of the list item.\nSee {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/optimistic-concurrency-control.html}\nfor more information around optimistic concurrency control."
            ],
            "signature": [
              "({ _version, id, value, meta, }: ",
              "UpdateListItemOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; deserializer: string | undefined; id: string; list_id: string; meta: object | undefined; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; value: string; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.updateListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    _version,\n    id,\n    value,\n    meta,\n  }",
                "description": [],
                "signature": [
                  "UpdateListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.updateList",
            "type": "Function",
            "tags": [],
            "label": "updateList",
            "description": [
              "\nUpdates a list container's value given the id of the list.\nSee {@link https://www.elastic.co/guide/en/elasticsearch/reference/current/optimistic-concurrency-control.html}\nfor more information around optimistic concurrency control."
            ],
            "signature": [
              "({ _version, id, name, description, meta, version, }: ",
              "UpdateListOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; description: string; deserializer: string | undefined; id: string; immutable: boolean; meta: object | undefined; name: string; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; version: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.updateList.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    _version,\n    id,\n    name,\n    description,\n    meta,\n    version,\n  }",
                "description": [],
                "signature": [
                  "UpdateListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListItem",
            "type": "Function",
            "tags": [],
            "label": "getListItem",
            "description": [
              "\nGiven a list item id, this returns the list item if it exists, otherwise \"null\"."
            ],
            "signature": [
              "({ id }: ",
              "GetListItemOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; deserializer: string | undefined; id: string; list_id: string; meta: object | undefined; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; value: string; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.getListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{ id }",
                "description": [],
                "signature": [
                  "GetListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "The list item found if it exists, otherwise \"null\"."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.getListItemByValues",
            "type": "Function",
            "tags": [],
            "label": "getListItemByValues",
            "description": [
              "\nGiven a list item value, this returns all list items found with that value."
            ],
            "signature": [
              "({ type, listId, value, }: ",
              "GetListItemsByValueOptions",
              ") => Promise<{ _version: string | undefined; created_at: string; created_by: string; deserializer: string | undefined; id: string; list_id: string; meta: object | undefined; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; value: string; }[]>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.getListItemByValues.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    type,\n    listId,\n    value,\n  }",
                "description": [],
                "signature": [
                  "GetListItemsByValueOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "All list items that match the value sent in."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.searchListItemByValues",
            "type": "Function",
            "tags": [],
            "label": "searchListItemByValues",
            "description": [
              "\nGiven a list item value, this search for all list items found with that value."
            ],
            "signature": [
              "({ type, listId, value, }: ",
              "SearchListItemByValuesOptions",
              ") => Promise<{ items: { _version: string | undefined; created_at: string; created_by: string; deserializer: string | undefined; id: string; list_id: string; meta: object | undefined; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; value: string; }[]; value: unknown; }[]>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.searchListItemByValues.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    type,\n    listId,\n    value,\n  }",
                "description": [],
                "signature": [
                  "SearchListItemByValuesOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "All list items that match the value sent in."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.findList",
            "type": "Function",
            "tags": [],
            "label": "findList",
            "description": [
              "\nFinds lists based on a filter passed in. This is a bit complicated as it existed before\nPIT (Point in Time) and other mechanisms. This uses an older way of doing \"hops\" and\naccepting a \"currentIndexPosition\" which acts like a pointer to where the search should continue."
            ],
            "signature": [
              "({ filter, currentIndexPosition, perPage, page, sortField, sortOrder, searchAfter, runtimeMappings, }: ",
              "FindListOptions",
              ") => Promise<{ cursor: string; data: { _version: string | undefined; created_at: string; created_by: string; description: string; deserializer: string | undefined; id: string; immutable: boolean; meta: object | undefined; name: string; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; version: number; }[]; page: number; per_page: number; total: number; }>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.findList.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    filter,\n    currentIndexPosition,\n    perPage,\n    page,\n    sortField,\n    sortOrder,\n    searchAfter,\n    runtimeMappings,\n  }",
                "description": [],
                "signature": [
                  "FindListOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "All lists found based on the passed in filter."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.findListItem",
            "type": "Function",
            "tags": [],
            "label": "findListItem",
            "description": [
              "\nFinds list items based on a filter passed in. This is a bit complicated as it existed before\nPIT (Point in Time) and other mechanisms. This uses an older way of doing \"hops\" and\naccepting a \"currentIndexPosition\" which acts like a pointer to where the search should continue."
            ],
            "signature": [
              "({ listId, filter, currentIndexPosition, perPage, page, runtimeMappings, sortField, sortOrder, searchAfter, }: ",
              "FindListItemOptions",
              ") => Promise<{ cursor: string; data: { _version: string | undefined; created_at: string; created_by: string; deserializer: string | undefined; id: string; list_id: string; meta: object | undefined; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; value: string; }[]; page: number; per_page: number; total: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.findListItem.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    listId,\n    filter,\n    currentIndexPosition,\n    perPage,\n    page,\n    runtimeMappings,\n    sortField,\n    sortOrder,\n    searchAfter,\n  }",
                "description": [],
                "signature": [
                  "FindListItemOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "All list items found based on the passed in filter."
            ]
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListClient.findAllListItems",
            "type": "Function",
            "tags": [],
            "label": "findAllListItems",
            "description": [],
            "signature": [
              "({ listId, filter, sortField, sortOrder, }: ",
              "FindAllListItemsOptions",
              ") => Promise<{ data: { _version: string | undefined; created_at: string; created_by: string; deserializer: string | undefined; id: string; list_id: string; meta: object | undefined; serializer: string | undefined; tie_breaker_id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; updated_at: string; updated_by: string; value: string; }[]; total: number; } | null>"
            ],
            "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "lists",
                "id": "def-server.ListClient.findAllListItems.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    listId,\n    filter,\n    sortField,\n    sortOrder,\n  }",
                "description": [],
                "signature": [
                  "FindAllListItemsOptions"
                ],
                "path": "x-pack/plugins/lists/server/services/lists/list_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "lists",
        "id": "def-server.CreateExceptionListItemOptions",
        "type": "Interface",
        "tags": [],
        "label": "CreateExceptionListItemOptions",
        "description": [
          "\nExceptionListClient.createExceptionListItem\n{@link ExceptionListClient.createExceptionListItem}"
        ],
        "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.comments",
            "type": "Array",
            "tags": [],
            "label": "comments",
            "description": [
              "User comments for the exception list item"
            ],
            "signature": [
              "{ comment: string; }[]"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.entries",
            "type": "Array",
            "tags": [],
            "label": "entries",
            "description": [
              "an array with the exception list item entries"
            ],
            "signature": [
              "({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.expireTime",
            "type": "string",
            "tags": [],
            "label": "expireTime",
            "description": [
              "an optional datetime string with an expiration time"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.itemId",
            "type": "string",
            "tags": [],
            "label": "itemId",
            "description": [
              "the \"item_id\" of the exception list item"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.listId",
            "type": "string",
            "tags": [],
            "label": "listId",
            "description": [
              "the \"list_id\" of the parent exception list"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.namespaceType",
            "type": "CompoundType",
            "tags": [],
            "label": "namespaceType",
            "description": [
              "saved object namespace (single | agnostic)"
            ],
            "signature": [
              "\"single\" | \"agnostic\""
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "the \"name\" of the exception list"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.osTypes",
            "type": "Array",
            "tags": [],
            "label": "osTypes",
            "description": [
              "item os types to apply"
            ],
            "signature": [
              "(\"windows\" | \"linux\" | \"macos\")[]"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [
              "a description of the exception list"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.meta",
            "type": "Uncategorized",
            "tags": [],
            "label": "meta",
            "description": [
              "Optional meta data about the list item"
            ],
            "signature": [
              "object | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.tags",
            "type": "Array",
            "tags": [],
            "label": "tags",
            "description": [
              "user assigned tags of exception list"
            ],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.CreateExceptionListItemOptions.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [
              "container type"
            ],
            "signature": [
              "\"simple\""
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExportExceptionListAndItemsReturn",
        "type": "Interface",
        "tags": [],
        "label": "ExportExceptionListAndItemsReturn",
        "description": [],
        "path": "x-pack/plugins/lists/server/services/exception_lists/export_exception_list_and_items.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-server.ExportExceptionListAndItemsReturn.exportData",
            "type": "string",
            "tags": [],
            "label": "exportData",
            "description": [],
            "path": "x-pack/plugins/lists/server/services/exception_lists/export_exception_list_and_items.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ExportExceptionListAndItemsReturn.exportDetails",
            "type": "Object",
            "tags": [],
            "label": "exportDetails",
            "description": [],
            "signature": [
              "{ exported_exception_list_count: number; exported_exception_list_item_count: number; missing_exception_list_item_count: number; missing_exception_list_items: { item_id: string; }[]; missing_exception_lists: { list_id: string; }[]; missing_exception_lists_count: number; }"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/export_exception_list_and_items.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ListsApiRequestHandlerContext",
        "type": "Interface",
        "tags": [],
        "label": "ListsApiRequestHandlerContext",
        "description": [],
        "path": "x-pack/plugins/lists/server/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-server.ListsApiRequestHandlerContext.getListClient",
            "type": "Function",
            "tags": [],
            "label": "getListClient",
            "description": [],
            "signature": [
              "() => ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ListClient",
                "text": "ListClient"
              }
            ],
            "path": "x-pack/plugins/lists/server/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListsApiRequestHandlerContext.getExceptionListClient",
            "type": "Function",
            "tags": [],
            "label": "getExceptionListClient",
            "description": [],
            "signature": [
              "() => ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExceptionListClient",
                "text": "ExceptionListClient"
              }
            ],
            "path": "x-pack/plugins/lists/server/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.ListsApiRequestHandlerContext.getExtensionPointClient",
            "type": "Function",
            "tags": [],
            "label": "getExtensionPointClient",
            "description": [],
            "signature": [
              "() => ",
              "ExtensionPointStorageClientInterface"
            ],
            "path": "x-pack/plugins/lists/server/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.UpdateExceptionListItemOptions",
        "type": "Interface",
        "tags": [],
        "label": "UpdateExceptionListItemOptions",
        "description": [
          "\nExceptionListClient.updateExceptionListItem\n{@link ExceptionListClient.updateExceptionListItem}"
        ],
        "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions._version",
            "type": "string",
            "tags": [],
            "label": "_version",
            "description": [
              "document version"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.comments",
            "type": "Array",
            "tags": [],
            "label": "comments",
            "description": [
              "user comments attached to item"
            ],
            "signature": [
              "({ comment: string; } & { id?: string | undefined; })[]"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.entries",
            "type": "Array",
            "tags": [],
            "label": "entries",
            "description": [
              "item exception entries logic"
            ],
            "signature": [
              "({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; list: { id: string; type: \"boolean\" | \"geo_point\" | \"geo_shape\" | \"ip\" | \"binary\" | \"keyword\" | \"text\" | \"date\" | \"date_nanos\" | \"integer\" | \"long\" | \"short\" | \"byte\" | \"float\" | \"half_float\" | \"double\" | \"integer_range\" | \"float_range\" | \"long_range\" | \"double_range\" | \"date_range\" | \"ip_range\" | \"shape\"; }; operator: \"excluded\" | \"included\"; type: \"list\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; } | { entries: ({ field: string; operator: \"excluded\" | \"included\"; type: \"match\"; value: string; } | { field: string; operator: \"excluded\" | \"included\"; type: \"match_any\"; value: string[]; } | { field: string; operator: \"excluded\" | \"included\"; type: \"exists\"; })[]; field: string; type: \"nested\"; } | { field: string; operator: \"excluded\" | \"included\"; type: \"wildcard\"; value: string; })[]"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.expireTime",
            "type": "string",
            "tags": [],
            "label": "expireTime",
            "description": [
              "an optional datetime string with an expiration time"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "the \"id\" of the exception list item"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.itemId",
            "type": "string",
            "tags": [],
            "label": "itemId",
            "description": [
              "the \"item_id\" of the exception list item"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.namespaceType",
            "type": "CompoundType",
            "tags": [],
            "label": "namespaceType",
            "description": [
              "saved object namespace (single | agnostic)"
            ],
            "signature": [
              "\"single\" | \"agnostic\""
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "the \"name\" of the exception list"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.osTypes",
            "type": "Array",
            "tags": [],
            "label": "osTypes",
            "description": [
              "item os types to apply"
            ],
            "signature": [
              "(\"windows\" | \"linux\" | \"macos\")[]"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [
              "a description of the exception list"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.meta",
            "type": "Uncategorized",
            "tags": [],
            "label": "meta",
            "description": [
              "Optional meta data about the exception list item"
            ],
            "signature": [
              "object | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.tags",
            "type": "Array",
            "tags": [],
            "label": "tags",
            "description": [
              "user assigned tags of exception list"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "lists",
            "id": "def-server.UpdateExceptionListItemOptions.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [
              "container type"
            ],
            "signature": [
              "\"simple\" | undefined"
            ],
            "path": "x-pack/plugins/lists/server/services/exception_lists/exception_list_client_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "lists",
        "id": "def-server.ExceptionsListPreCreateItemServerExtension",
        "type": "Type",
        "tags": [],
        "label": "ExceptionsListPreCreateItemServerExtension",
        "description": [
          "\nExtension point is triggered prior to creating a new Exception List Item. Throw'ing will cause\nthe create operation to fail"
        ],
        "signature": [
          "ServerExtensionPointDefinition<\"exceptionsListPreCreateItem\", ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.CreateExceptionListItemOptions",
            "text": "CreateExceptionListItemOptions"
          },
          ", ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.CreateExceptionListItemOptions",
            "text": "CreateExceptionListItemOptions"
          },
          ">"
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExceptionsListPreDeleteItemServerExtension",
        "type": "Type",
        "tags": [],
        "label": "ExceptionsListPreDeleteItemServerExtension",
        "description": [
          "\nExtension point is triggered prior to performing a list item deletion. Note, this extension point\nis triggered by both `deleteExceptionListItem()` and `deleteExceptionListItemById()` methods of the\n`ExceptionListClient` class"
        ],
        "signature": [
          "ServerExtensionPointDefinition<\"exceptionsListPreDeleteItem\", ",
          "DeleteExceptionListItemOptions",
          ", ",
          "DeleteExceptionListItemOptions",
          ">"
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExceptionsListPreExportServerExtension",
        "type": "Type",
        "tags": [],
        "label": "ExceptionsListPreExportServerExtension",
        "description": [
          "\nExtension point is triggered prior to performing an `export` operation against exceptions list and items"
        ],
        "signature": [
          "ServerExtensionPointDefinition<\"exceptionsListPreExport\", ",
          "ExportExceptionListAndItemsOptions",
          ", ",
          "ExportExceptionListAndItemsOptions",
          ">"
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExceptionsListPreGetOneItemServerExtension",
        "type": "Type",
        "tags": [],
        "label": "ExceptionsListPreGetOneItemServerExtension",
        "description": [
          "\nExtension point is triggered prior to performing a `patch` operation on the exception item"
        ],
        "signature": [
          "ServerExtensionPointDefinition<\"exceptionsListPreGetOneItem\", ",
          "GetExceptionListItemOptions",
          ", ",
          "GetExceptionListItemOptions",
          ">"
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExceptionsListPreImportServerExtension",
        "type": "Type",
        "tags": [],
        "label": "ExceptionsListPreImportServerExtension",
        "description": [
          "\nExtension point is triggered prior processing an import of data into the Exceptions Lists. The callback\nin this extension will be called by both the `importExceptionListAndItems()` and\n`importExceptionListAndItemsAsArray()`"
        ],
        "signature": [
          "ServerExtensionPointDefinition<\"exceptionsListPreImport\", ",
          "PromiseFromStreams",
          ", ",
          "PromiseFromStreams",
          ">"
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExceptionsListPreMultiListFindServerExtension",
        "type": "Type",
        "tags": [],
        "label": "ExceptionsListPreMultiListFindServerExtension",
        "description": [
          "\nExtension point is triggered prior to performing a `find` operation against a multiple lists"
        ],
        "signature": [
          "ServerExtensionPointDefinition<\"exceptionsListPreMultiListFind\", ",
          "FindExceptionListsItemOptions",
          ", ",
          "FindExceptionListsItemOptions",
          ">"
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExceptionsListPreSingleListFindServerExtension",
        "type": "Type",
        "tags": [],
        "label": "ExceptionsListPreSingleListFindServerExtension",
        "description": [
          "\nExtension point is triggered prior to performing a `find` operation against a SINGLE list"
        ],
        "signature": [
          "ServerExtensionPointDefinition<\"exceptionsListPreSingleListFind\", ",
          "FindExceptionListItemOptions",
          ", ",
          "FindExceptionListItemOptions",
          ">"
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExceptionsListPreSummaryServerExtension",
        "type": "Type",
        "tags": [],
        "label": "ExceptionsListPreSummaryServerExtension",
        "description": [
          "\nExtension point is triggered prior to performing a list summary operation"
        ],
        "signature": [
          "ServerExtensionPointDefinition<\"exceptionsListPreSummary\", ",
          "GetExceptionListSummaryOptions",
          ", ",
          "GetExceptionListSummaryOptions",
          ">"
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExceptionsListPreUpdateItemServerExtension",
        "type": "Type",
        "tags": [],
        "label": "ExceptionsListPreUpdateItemServerExtension",
        "description": [
          "\nExtension point is triggered prior to updating the Exception List Item. Throw'ing will cause the\nupdate operation to fail"
        ],
        "signature": [
          "ServerExtensionPointDefinition<\"exceptionsListPreUpdateItem\", ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.UpdateExceptionListItemOptions",
            "text": "UpdateExceptionListItemOptions"
          },
          ", ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.UpdateExceptionListItemOptions",
            "text": "UpdateExceptionListItemOptions"
          },
          ">"
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ExtensionPoint",
        "type": "Type",
        "tags": [],
        "label": "ExtensionPoint",
        "description": [],
        "signature": [
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ExceptionsListPreImportServerExtension",
            "text": "ExceptionsListPreImportServerExtension"
          },
          " | ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ExceptionsListPreCreateItemServerExtension",
            "text": "ExceptionsListPreCreateItemServerExtension"
          },
          " | ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ExceptionsListPreUpdateItemServerExtension",
            "text": "ExceptionsListPreUpdateItemServerExtension"
          },
          " | ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ExceptionsListPreGetOneItemServerExtension",
            "text": "ExceptionsListPreGetOneItemServerExtension"
          },
          " | ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ExceptionsListPreSingleListFindServerExtension",
            "text": "ExceptionsListPreSingleListFindServerExtension"
          },
          " | ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ExceptionsListPreMultiListFindServerExtension",
            "text": "ExceptionsListPreMultiListFindServerExtension"
          },
          " | ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ExceptionsListPreExportServerExtension",
            "text": "ExceptionsListPreExportServerExtension"
          },
          " | ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ExceptionsListPreSummaryServerExtension",
            "text": "ExceptionsListPreSummaryServerExtension"
          },
          " | ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ExceptionsListPreDeleteItemServerExtension",
            "text": "ExceptionsListPreDeleteItemServerExtension"
          }
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "lists",
        "id": "def-server.ListsServerExtensionRegistrar",
        "type": "Type",
        "tags": [],
        "label": "ListsServerExtensionRegistrar",
        "description": [
          "\nA Map of extension point type and associated Set of callbacks\n\nRegistration function for server-side extension points"
        ],
        "signature": [
          "(extension: ",
          {
            "pluginId": "lists",
            "scope": "server",
            "docId": "kibListsPluginApi",
            "section": "def-server.ExtensionPoint",
            "text": "ExtensionPoint"
          },
          ") => void"
        ],
        "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "lists",
            "id": "def-server.ListsServerExtensionRegistrar.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "extension",
            "description": [],
            "signature": [
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExceptionsListPreImportServerExtension",
                "text": "ExceptionsListPreImportServerExtension"
              },
              " | ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExceptionsListPreCreateItemServerExtension",
                "text": "ExceptionsListPreCreateItemServerExtension"
              },
              " | ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExceptionsListPreUpdateItemServerExtension",
                "text": "ExceptionsListPreUpdateItemServerExtension"
              },
              " | ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExceptionsListPreGetOneItemServerExtension",
                "text": "ExceptionsListPreGetOneItemServerExtension"
              },
              " | ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExceptionsListPreSingleListFindServerExtension",
                "text": "ExceptionsListPreSingleListFindServerExtension"
              },
              " | ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExceptionsListPreMultiListFindServerExtension",
                "text": "ExceptionsListPreMultiListFindServerExtension"
              },
              " | ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExceptionsListPreExportServerExtension",
                "text": "ExceptionsListPreExportServerExtension"
              },
              " | ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExceptionsListPreSummaryServerExtension",
                "text": "ExceptionsListPreSummaryServerExtension"
              },
              " | ",
              {
                "pluginId": "lists",
                "scope": "server",
                "docId": "kibListsPluginApi",
                "section": "def-server.ExceptionsListPreDeleteItemServerExtension",
                "text": "ExceptionsListPreDeleteItemServerExtension"
              }
            ],
            "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "parentPluginId": "lists",
      "id": "def-server.ListPluginSetup",
      "type": "Interface",
      "tags": [],
      "label": "ListPluginSetup",
      "description": [],
      "path": "x-pack/plugins/lists/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "lists",
          "id": "def-server.ListPluginSetup.getExceptionListClient",
          "type": "Function",
          "tags": [],
          "label": "getExceptionListClient",
          "description": [],
          "signature": [
            "(savedObjectsClient: ",
            {
              "pluginId": "@kbn/core-saved-objects-api-server",
              "scope": "common",
              "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
              "section": "def-common.SavedObjectsClientContract",
              "text": "SavedObjectsClientContract"
            },
            ", user: string, enableServerExtensionPoints?: boolean | undefined) => ",
            {
              "pluginId": "lists",
              "scope": "server",
              "docId": "kibListsPluginApi",
              "section": "def-server.ExceptionListClient",
              "text": "ExceptionListClient"
            }
          ],
          "path": "x-pack/plugins/lists/server/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "returnComment": [],
          "children": [
            {
              "parentPluginId": "lists",
              "id": "def-server.ListPluginSetup.getExceptionListClient.$1",
              "type": "Object",
              "tags": [],
              "label": "savedObjectsClient",
              "description": [],
              "signature": [
                {
                  "pluginId": "@kbn/core-saved-objects-api-server",
                  "scope": "common",
                  "docId": "kibKbnCoreSavedObjectsApiServerPluginApi",
                  "section": "def-common.SavedObjectsClientContract",
                  "text": "SavedObjectsClientContract"
                }
              ],
              "path": "x-pack/plugins/lists/server/types.ts",
              "deprecated": false,
              "trackAdoption": false
            },
            {
              "parentPluginId": "lists",
              "id": "def-server.ListPluginSetup.getExceptionListClient.$2",
              "type": "string",
              "tags": [],
              "label": "user",
              "description": [],
              "path": "x-pack/plugins/lists/server/types.ts",
              "deprecated": false,
              "trackAdoption": false
            },
            {
              "parentPluginId": "lists",
              "id": "def-server.ListPluginSetup.getExceptionListClient.$3",
              "type": "CompoundType",
              "tags": [],
              "label": "enableServerExtensionPoints",
              "description": [],
              "signature": [
                "boolean | undefined"
              ],
              "path": "x-pack/plugins/lists/server/types.ts",
              "deprecated": false,
              "trackAdoption": false
            }
          ]
        },
        {
          "parentPluginId": "lists",
          "id": "def-server.ListPluginSetup.getListClient",
          "type": "Function",
          "tags": [],
          "label": "getListClient",
          "description": [],
          "signature": [
            "(esClient: ",
            {
              "pluginId": "@kbn/core-elasticsearch-server",
              "scope": "common",
              "docId": "kibKbnCoreElasticsearchServerPluginApi",
              "section": "def-common.ElasticsearchClient",
              "text": "ElasticsearchClient"
            },
            ", spaceId: string, user: string) => ",
            {
              "pluginId": "lists",
              "scope": "server",
              "docId": "kibListsPluginApi",
              "section": "def-server.ListClient",
              "text": "ListClient"
            }
          ],
          "path": "x-pack/plugins/lists/server/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "returnComment": [],
          "children": [
            {
              "parentPluginId": "lists",
              "id": "def-server.ListPluginSetup.getListClient.$1",
              "type": "Object",
              "tags": [],
              "label": "esClient",
              "description": [],
              "signature": [
                "{ create: { <TDocument = unknown>(this: That, params: ",
                "CreateRequest",
                "<TDocument> | ",
                "CreateRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "WriteResponseBase",
                ">; <TDocument = unknown>(this: That, params: ",
                "CreateRequest",
                "<TDocument> | ",
                "CreateRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "WriteResponseBase",
                ", unknown>>; <TDocument = unknown>(this: That, params: ",
                "CreateRequest",
                "<TDocument> | ",
                "CreateRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "WriteResponseBase",
                ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                "UpdateRequest",
                "<TDocument, TPartialDocument> | ",
                "UpdateRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "UpdateResponse",
                "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                "UpdateRequest",
                "<TDocument, TPartialDocument> | ",
                "UpdateRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "UpdateResponse",
                "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                "UpdateRequest",
                "<TDocument, TPartialDocument> | ",
                "UpdateRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "UpdateResponse",
                "<TDocumentR>>; }; get: { <TDocument = unknown>(this: That, params: ",
                "GetRequest",
                " | ",
                "GetRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "GetResponse",
                "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                "GetRequest",
                " | ",
                "GetRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "GetResponse",
                "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                "GetRequest",
                " | ",
                "GetRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "GetResponse",
                "<TDocument>>; }; delete: { (this: That, params: ",
                "DeleteRequest",
                " | ",
                "DeleteRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "WriteResponseBase",
                ">; (this: That, params: ",
                "DeleteRequest",
                " | ",
                "DeleteRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "WriteResponseBase",
                ", unknown>>; (this: That, params: ",
                "DeleteRequest",
                " | ",
                "DeleteRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "WriteResponseBase",
                ">; }; helpers: ",
                "default",
                "; search: { <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params?: ",
                "SearchRequest",
                " | ",
                "SearchRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "SearchResponse",
                "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params?: ",
                "SearchRequest",
                " | ",
                "SearchRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "SearchResponse",
                "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params?: ",
                "SearchRequest",
                " | ",
                "SearchRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "SearchResponse",
                "<TDocument, TAggregations>>; }; name: string | symbol; monitoring: ",
                "default",
                "; count: { (this: That, params?: ",
                "CountRequest",
                " | ",
                "CountRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "CountResponse",
                ">; (this: That, params?: ",
                "CountRequest",
                " | ",
                "CountRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "CountResponse",
                ", unknown>>; (this: That, params?: ",
                "CountRequest",
                " | ",
                "CountRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "CountResponse",
                ">; }; exists: { (this: That, params: ",
                "ExistsRequest",
                " | ",
                "ExistsRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<boolean>; (this: That, params: ",
                "ExistsRequest",
                " | ",
                "ExistsRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<boolean, unknown>>; (this: That, params: ",
                "ExistsRequest",
                " | ",
                "ExistsRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<boolean>; }; security: ",
                "default",
                "; ping: { (this: That, params?: ",
                "PingRequest",
                " | ",
                "PingRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<boolean>; (this: That, params?: ",
                "PingRequest",
                " | ",
                "PingRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<boolean, unknown>>; (this: That, params?: ",
                "PingRequest",
                " | ",
                "PingRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<boolean>; }; nodes: ",
                "default",
                "; indices: ",
                "default",
                "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
                "default",
                "; child: (opts: ",
                "ClientOptions",
                ") => ",
                "default",
                "; asyncSearch: ",
                "default",
                "; autoscaling: ",
                "default",
                "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                "BulkRequest",
                "<TDocument, TPartialDocument> | ",
                "BulkRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "BulkResponse",
                ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                "BulkRequest",
                "<TDocument, TPartialDocument> | ",
                "BulkRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "BulkResponse",
                ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                "BulkRequest",
                "<TDocument, TPartialDocument> | ",
                "BulkRequest",
                "<TDocument, TPartialDocument>, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "BulkResponse",
                ">; }; cat: ",
                "default",
                "; ccr: ",
                "default",
                "; clearScroll: { (this: That, params?: ",
                "ClearScrollRequest",
                " | ",
                "ClearScrollRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ClearScrollResponse",
                ">; (this: That, params?: ",
                "ClearScrollRequest",
                " | ",
                "ClearScrollRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ClearScrollResponse",
                ", unknown>>; (this: That, params?: ",
                "ClearScrollRequest",
                " | ",
                "ClearScrollRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ClearScrollResponse",
                ">; }; closePointInTime: { (this: That, params: ",
                "ClosePointInTimeRequest",
                " | ",
                "ClosePointInTimeRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ClosePointInTimeResponse",
                ">; (this: That, params: ",
                "ClosePointInTimeRequest",
                " | ",
                "ClosePointInTimeRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ClosePointInTimeResponse",
                ", unknown>>; (this: That, params: ",
                "ClosePointInTimeRequest",
                " | ",
                "ClosePointInTimeRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ClosePointInTimeResponse",
                ">; }; cluster: ",
                "default",
                "; danglingIndices: ",
                "default",
                "; deleteByQuery: { (this: That, params: ",
                "DeleteByQueryRequest",
                " | ",
                "DeleteByQueryRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "DeleteByQueryResponse",
                ">; (this: That, params: ",
                "DeleteByQueryRequest",
                " | ",
                "DeleteByQueryRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "DeleteByQueryResponse",
                ", unknown>>; (this: That, params: ",
                "DeleteByQueryRequest",
                " | ",
                "DeleteByQueryRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "DeleteByQueryResponse",
                ">; }; deleteByQueryRethrottle: { (this: That, params: ",
                "DeleteByQueryRethrottleRequest",
                " | ",
                "DeleteByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "TasksTaskListResponseBase",
                ">; (this: That, params: ",
                "DeleteByQueryRethrottleRequest",
                " | ",
                "DeleteByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "TasksTaskListResponseBase",
                ", unknown>>; (this: That, params: ",
                "DeleteByQueryRethrottleRequest",
                " | ",
                "DeleteByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "TasksTaskListResponseBase",
                ">; }; deleteScript: { (this: That, params: ",
                "DeleteScriptRequest",
                " | ",
                "DeleteScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "AcknowledgedResponseBase",
                ">; (this: That, params: ",
                "DeleteScriptRequest",
                " | ",
                "DeleteScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "AcknowledgedResponseBase",
                ", unknown>>; (this: That, params: ",
                "DeleteScriptRequest",
                " | ",
                "DeleteScriptRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "AcknowledgedResponseBase",
                ">; }; enrich: ",
                "default",
                "; eql: ",
                "default",
                "; existsSource: { (this: That, params: ",
                "ExistsSourceRequest",
                " | ",
                "ExistsSourceRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<boolean>; (this: That, params: ",
                "ExistsSourceRequest",
                " | ",
                "ExistsSourceRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<boolean, unknown>>; (this: That, params: ",
                "ExistsSourceRequest",
                " | ",
                "ExistsSourceRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
                "ExplainRequest",
                " | ",
                "ExplainRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ExplainResponse",
                "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                "ExplainRequest",
                " | ",
                "ExplainRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ExplainResponse",
                "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                "ExplainRequest",
                " | ",
                "ExplainRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ExplainResponse",
                "<TDocument>>; }; features: ",
                "default",
                "; fieldCaps: { (this: That, params: ",
                "FieldCapsRequest",
                " | ",
                "FieldCapsRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "FieldCapsResponse",
                ">; (this: That, params: ",
                "FieldCapsRequest",
                " | ",
                "FieldCapsRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "FieldCapsResponse",
                ", unknown>>; (this: That, params: ",
                "FieldCapsRequest",
                " | ",
                "FieldCapsRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "FieldCapsResponse",
                ">; }; fleet: ",
                "default",
                "; getScript: { (this: That, params: ",
                "GetScriptRequest",
                " | ",
                "GetScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "GetScriptResponse",
                ">; (this: That, params: ",
                "GetScriptRequest",
                " | ",
                "GetScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "GetScriptResponse",
                ", unknown>>; (this: That, params: ",
                "GetScriptRequest",
                " | ",
                "GetScriptRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "GetScriptResponse",
                ">; }; getScriptContext: { (this: That, params?: ",
                "GetScriptContextRequest",
                " | ",
                "GetScriptContextRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "GetScriptContextResponse",
                ">; (this: That, params?: ",
                "GetScriptContextRequest",
                " | ",
                "GetScriptContextRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "GetScriptContextResponse",
                ", unknown>>; (this: That, params?: ",
                "GetScriptContextRequest",
                " | ",
                "GetScriptContextRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "GetScriptContextResponse",
                ">; }; getScriptLanguages: { (this: That, params?: ",
                "GetScriptLanguagesRequest",
                " | ",
                "GetScriptLanguagesRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "GetScriptLanguagesResponse",
                ">; (this: That, params?: ",
                "GetScriptLanguagesRequest",
                " | ",
                "GetScriptLanguagesRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "GetScriptLanguagesResponse",
                ", unknown>>; (this: That, params?: ",
                "GetScriptLanguagesRequest",
                " | ",
                "GetScriptLanguagesRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "GetScriptLanguagesResponse",
                ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
                "GetSourceRequest",
                " | ",
                "GetSourceRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
                "GetSourceRequest",
                " | ",
                "GetSourceRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
                "GetSourceRequest",
                " | ",
                "GetSourceRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<TDocument>; }; graph: ",
                "default",
                "; ilm: ",
                "default",
                "; index: { <TDocument = unknown>(this: That, params: ",
                "IndexRequest",
                "<TDocument> | ",
                "IndexRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "WriteResponseBase",
                ">; <TDocument = unknown>(this: That, params: ",
                "IndexRequest",
                "<TDocument> | ",
                "IndexRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "WriteResponseBase",
                ", unknown>>; <TDocument = unknown>(this: That, params: ",
                "IndexRequest",
                "<TDocument> | ",
                "IndexRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "WriteResponseBase",
                ">; }; info: { (this: That, params?: ",
                "InfoRequest",
                " | ",
                "InfoRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "InfoResponse",
                ">; (this: That, params?: ",
                "InfoRequest",
                " | ",
                "InfoRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "InfoResponse",
                ", unknown>>; (this: That, params?: ",
                "InfoRequest",
                " | ",
                "InfoRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "InfoResponse",
                ">; }; ingest: ",
                "default",
                "; knnSearch: { <TDocument = unknown>(this: That, params: ",
                "KnnSearchRequest",
                " | ",
                "KnnSearchRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "KnnSearchResponse",
                "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                "KnnSearchRequest",
                " | ",
                "KnnSearchRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "KnnSearchResponse",
                "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                "KnnSearchRequest",
                " | ",
                "KnnSearchRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "KnnSearchResponse",
                "<TDocument>>; }; license: ",
                "default",
                "; logstash: ",
                "default",
                "; mget: { <TDocument = unknown>(this: That, params?: ",
                "MgetRequest",
                " | ",
                "MgetRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "MgetResponse",
                "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                "MgetRequest",
                " | ",
                "MgetRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "MgetResponse",
                "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                "MgetRequest",
                " | ",
                "MgetRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "MgetResponse",
                "<TDocument>>; }; migration: ",
                "default",
                "; ml: ",
                "default",
                "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchRequest",
                " | ",
                "MsearchRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "MsearchResponse",
                "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchRequest",
                " | ",
                "MsearchRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "MsearchResponse",
                "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchRequest",
                " | ",
                "MsearchRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "MsearchResponse",
                "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchTemplateRequest",
                " | ",
                "MsearchTemplateRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "MsearchTemplateResponse",
                "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchTemplateRequest",
                " | ",
                "MsearchTemplateRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "MsearchTemplateResponse",
                "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "MsearchTemplateRequest",
                " | ",
                "MsearchTemplateRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "MsearchTemplateResponse",
                "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
                "MtermvectorsRequest",
                " | ",
                "MtermvectorsRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "MtermvectorsResponse",
                ">; (this: That, params?: ",
                "MtermvectorsRequest",
                " | ",
                "MtermvectorsRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "MtermvectorsResponse",
                ", unknown>>; (this: That, params?: ",
                "MtermvectorsRequest",
                " | ",
                "MtermvectorsRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "MtermvectorsResponse",
                ">; }; openPointInTime: { (this: That, params: ",
                "OpenPointInTimeRequest",
                " | ",
                "OpenPointInTimeRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "OpenPointInTimeResponse",
                ">; (this: That, params: ",
                "OpenPointInTimeRequest",
                " | ",
                "OpenPointInTimeRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "OpenPointInTimeResponse",
                ", unknown>>; (this: That, params: ",
                "OpenPointInTimeRequest",
                " | ",
                "OpenPointInTimeRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "OpenPointInTimeResponse",
                ">; }; putScript: { (this: That, params: ",
                "PutScriptRequest",
                " | ",
                "PutScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "AcknowledgedResponseBase",
                ">; (this: That, params: ",
                "PutScriptRequest",
                " | ",
                "PutScriptRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "AcknowledgedResponseBase",
                ", unknown>>; (this: That, params: ",
                "PutScriptRequest",
                " | ",
                "PutScriptRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "AcknowledgedResponseBase",
                ">; }; rankEval: { (this: That, params: ",
                "RankEvalRequest",
                " | ",
                "RankEvalRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "RankEvalResponse",
                ">; (this: That, params: ",
                "RankEvalRequest",
                " | ",
                "RankEvalRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "RankEvalResponse",
                ", unknown>>; (this: That, params: ",
                "RankEvalRequest",
                " | ",
                "RankEvalRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "RankEvalResponse",
                ">; }; reindex: { (this: That, params: ",
                "ReindexRequest",
                " | ",
                "ReindexRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ReindexResponse",
                ">; (this: That, params: ",
                "ReindexRequest",
                " | ",
                "ReindexRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ReindexResponse",
                ", unknown>>; (this: That, params: ",
                "ReindexRequest",
                " | ",
                "ReindexRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ReindexResponse",
                ">; }; reindexRethrottle: { (this: That, params: ",
                "ReindexRethrottleRequest",
                " | ",
                "ReindexRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ReindexRethrottleResponse",
                ">; (this: That, params: ",
                "ReindexRethrottleRequest",
                " | ",
                "ReindexRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ReindexRethrottleResponse",
                ", unknown>>; (this: That, params: ",
                "ReindexRethrottleRequest",
                " | ",
                "ReindexRethrottleRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ReindexRethrottleResponse",
                ">; }; renderSearchTemplate: { (this: That, params?: ",
                "RenderSearchTemplateRequest",
                " | ",
                "RenderSearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "RenderSearchTemplateResponse",
                ">; (this: That, params?: ",
                "RenderSearchTemplateRequest",
                " | ",
                "RenderSearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "RenderSearchTemplateResponse",
                ", unknown>>; (this: That, params?: ",
                "RenderSearchTemplateRequest",
                " | ",
                "RenderSearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "RenderSearchTemplateResponse",
                ">; }; rollup: ",
                "default",
                "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
                "ScriptsPainlessExecuteRequest",
                " | ",
                "ScriptsPainlessExecuteRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ScriptsPainlessExecuteResponse",
                "<TResult>>; <TResult = unknown>(this: That, params?: ",
                "ScriptsPainlessExecuteRequest",
                " | ",
                "ScriptsPainlessExecuteRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ScriptsPainlessExecuteResponse",
                "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
                "ScriptsPainlessExecuteRequest",
                " | ",
                "ScriptsPainlessExecuteRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ScriptsPainlessExecuteResponse",
                "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "ScrollRequest",
                " | ",
                "ScrollRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "ScrollResponse",
                "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "ScrollRequest",
                " | ",
                "ScrollRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "ScrollResponse",
                "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                "AggregationsAggregate",
                ">>(this: That, params: ",
                "ScrollRequest",
                " | ",
                "ScrollRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "ScrollResponse",
                "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
                "SearchMvtRequest",
                " | ",
                "SearchMvtRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
                "SearchMvtRequest",
                " | ",
                "SearchMvtRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<ArrayBuffer, unknown>>; (this: That, params: ",
                "SearchMvtRequest",
                " | ",
                "SearchMvtRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
                "SearchShardsRequest",
                " | ",
                "SearchShardsRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "SearchShardsResponse",
                ">; (this: That, params?: ",
                "SearchShardsRequest",
                " | ",
                "SearchShardsRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "SearchShardsResponse",
                ", unknown>>; (this: That, params?: ",
                "SearchShardsRequest",
                " | ",
                "SearchShardsRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "SearchShardsResponse",
                ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
                "SearchTemplateRequest",
                " | ",
                "SearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "SearchTemplateResponse",
                "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                "SearchTemplateRequest",
                " | ",
                "SearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "SearchTemplateResponse",
                "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                "SearchTemplateRequest",
                " | ",
                "SearchTemplateRequest",
                " | undefined, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "SearchTemplateResponse",
                "<TDocument>>; }; searchableSnapshots: ",
                "default",
                "; shutdown: ",
                "default",
                "; slm: ",
                "default",
                "; snapshot: ",
                "default",
                "; sql: ",
                "default",
                "; ssl: ",
                "default",
                "; tasks: ",
                "default",
                "; termsEnum: { (this: That, params: ",
                "TermsEnumRequest",
                " | ",
                "TermsEnumRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "TermsEnumResponse",
                ">; (this: That, params: ",
                "TermsEnumRequest",
                " | ",
                "TermsEnumRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "TermsEnumResponse",
                ", unknown>>; (this: That, params: ",
                "TermsEnumRequest",
                " | ",
                "TermsEnumRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "TermsEnumResponse",
                ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
                "TermvectorsRequest",
                "<TDocument> | ",
                "TermvectorsRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "TermvectorsResponse",
                ">; <TDocument = unknown>(this: That, params: ",
                "TermvectorsRequest",
                "<TDocument> | ",
                "TermvectorsRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "TermvectorsResponse",
                ", unknown>>; <TDocument = unknown>(this: That, params: ",
                "TermvectorsRequest",
                "<TDocument> | ",
                "TermvectorsRequest",
                "<TDocument>, options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "TermvectorsResponse",
                ">; }; textStructure: ",
                "default",
                "; transform: ",
                "default",
                "; updateByQuery: { (this: That, params: ",
                "UpdateByQueryRequest",
                " | ",
                "UpdateByQueryRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "UpdateByQueryResponse",
                ">; (this: That, params: ",
                "UpdateByQueryRequest",
                " | ",
                "UpdateByQueryRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "UpdateByQueryResponse",
                ", unknown>>; (this: That, params: ",
                "UpdateByQueryRequest",
                " | ",
                "UpdateByQueryRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "UpdateByQueryResponse",
                ">; }; updateByQueryRethrottle: { (this: That, params: ",
                "UpdateByQueryRethrottleRequest",
                " | ",
                "UpdateByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithOutMeta",
                " | undefined): Promise<",
                "UpdateByQueryRethrottleResponse",
                ">; (this: That, params: ",
                "UpdateByQueryRethrottleRequest",
                " | ",
                "UpdateByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptionsWithMeta",
                " | undefined): Promise<",
                "TransportResult",
                "<",
                "UpdateByQueryRethrottleResponse",
                ", unknown>>; (this: That, params: ",
                "UpdateByQueryRethrottleRequest",
                " | ",
                "UpdateByQueryRethrottleRequest",
                ", options?: ",
                "TransportRequestOptions",
                " | undefined): Promise<",
                "UpdateByQueryRethrottleResponse",
                ">; }; watcher: ",
                "default",
                "; xpack: ",
                "default",
                "; }"
              ],
              "path": "x-pack/plugins/lists/server/types.ts",
              "deprecated": false,
              "trackAdoption": false
            },
            {
              "parentPluginId": "lists",
              "id": "def-server.ListPluginSetup.getListClient.$2",
              "type": "string",
              "tags": [],
              "label": "spaceId",
              "description": [],
              "path": "x-pack/plugins/lists/server/types.ts",
              "deprecated": false,
              "trackAdoption": false
            },
            {
              "parentPluginId": "lists",
              "id": "def-server.ListPluginSetup.getListClient.$3",
              "type": "string",
              "tags": [],
              "label": "user",
              "description": [],
              "path": "x-pack/plugins/lists/server/types.ts",
              "deprecated": false,
              "trackAdoption": false
            }
          ]
        },
        {
          "parentPluginId": "lists",
          "id": "def-server.ListPluginSetup.registerExtension",
          "type": "Function",
          "tags": [],
          "label": "registerExtension",
          "description": [],
          "signature": [
            "(extension: ",
            {
              "pluginId": "lists",
              "scope": "server",
              "docId": "kibListsPluginApi",
              "section": "def-server.ExtensionPoint",
              "text": "ExtensionPoint"
            },
            ") => void"
          ],
          "path": "x-pack/plugins/lists/server/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "returnComment": [],
          "children": [
            {
              "parentPluginId": "lists",
              "id": "def-server.ListPluginSetup.registerExtension.$1",
              "type": "CompoundType",
              "tags": [],
              "label": "extension",
              "description": [],
              "signature": [
                {
                  "pluginId": "lists",
                  "scope": "server",
                  "docId": "kibListsPluginApi",
                  "section": "def-server.ExceptionsListPreImportServerExtension",
                  "text": "ExceptionsListPreImportServerExtension"
                },
                " | ",
                {
                  "pluginId": "lists",
                  "scope": "server",
                  "docId": "kibListsPluginApi",
                  "section": "def-server.ExceptionsListPreCreateItemServerExtension",
                  "text": "ExceptionsListPreCreateItemServerExtension"
                },
                " | ",
                {
                  "pluginId": "lists",
                  "scope": "server",
                  "docId": "kibListsPluginApi",
                  "section": "def-server.ExceptionsListPreUpdateItemServerExtension",
                  "text": "ExceptionsListPreUpdateItemServerExtension"
                },
                " | ",
                {
                  "pluginId": "lists",
                  "scope": "server",
                  "docId": "kibListsPluginApi",
                  "section": "def-server.ExceptionsListPreGetOneItemServerExtension",
                  "text": "ExceptionsListPreGetOneItemServerExtension"
                },
                " | ",
                {
                  "pluginId": "lists",
                  "scope": "server",
                  "docId": "kibListsPluginApi",
                  "section": "def-server.ExceptionsListPreSingleListFindServerExtension",
                  "text": "ExceptionsListPreSingleListFindServerExtension"
                },
                " | ",
                {
                  "pluginId": "lists",
                  "scope": "server",
                  "docId": "kibListsPluginApi",
                  "section": "def-server.ExceptionsListPreMultiListFindServerExtension",
                  "text": "ExceptionsListPreMultiListFindServerExtension"
                },
                " | ",
                {
                  "pluginId": "lists",
                  "scope": "server",
                  "docId": "kibListsPluginApi",
                  "section": "def-server.ExceptionsListPreExportServerExtension",
                  "text": "ExceptionsListPreExportServerExtension"
                },
                " | ",
                {
                  "pluginId": "lists",
                  "scope": "server",
                  "docId": "kibListsPluginApi",
                  "section": "def-server.ExceptionsListPreSummaryServerExtension",
                  "text": "ExceptionsListPreSummaryServerExtension"
                },
                " | ",
                {
                  "pluginId": "lists",
                  "scope": "server",
                  "docId": "kibListsPluginApi",
                  "section": "def-server.ExceptionsListPreDeleteItemServerExtension",
                  "text": "ExceptionsListPreDeleteItemServerExtension"
                }
              ],
              "path": "x-pack/plugins/lists/server/services/extension_points/types.ts",
              "deprecated": false,
              "trackAdoption": false
            }
          ]
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}