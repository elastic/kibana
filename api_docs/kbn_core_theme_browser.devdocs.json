{
  "id": "@kbn/core-theme-browser",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "@kbn/core-theme-browser",
        "id": "def-public.CoreTheme",
        "type": "Interface",
        "tags": [],
        "label": "CoreTheme",
        "description": [
          "\nContains all the required information to apply Kibana's theme at the various levels it can be used.\n"
        ],
        "path": "packages/core/theme/core-theme-browser/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-theme-browser",
            "id": "def-public.CoreTheme.darkMode",
            "type": "boolean",
            "tags": [],
            "label": "darkMode",
            "description": [
              "is dark mode enabled or not"
            ],
            "path": "packages/core/theme/core-theme-browser/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-theme-browser",
        "id": "def-public.ThemeServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "ThemeServiceSetup",
        "description": [],
        "path": "packages/core/theme/core-theme-browser/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-theme-browser",
            "id": "def-public.ThemeServiceSetup.theme$",
            "type": "Object",
            "tags": [],
            "label": "theme$",
            "description": [
              "\nAn observable of the currently active theme.\nNote that the observable has a replay effect, so it will emit once during subscriptions."
            ],
            "signature": [
              "Observable",
              "<",
              {
                "pluginId": "@kbn/core-theme-browser",
                "scope": "public",
                "docId": "kibKbnCoreThemeBrowserPluginApi",
                "section": "def-public.CoreTheme",
                "text": "CoreTheme"
              },
              ">"
            ],
            "path": "packages/core/theme/core-theme-browser/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-theme-browser",
            "id": "def-public.ThemeServiceSetup.getTheme",
            "type": "Function",
            "tags": [],
            "label": "getTheme",
            "description": [
              "\nReturns the theme currently in use.\nNote that when possible, using the `theme$` observable instead is strongly encouraged, as\nit will allow to react to dynamic theme switch (even if those are not implemented at the moment)"
            ],
            "signature": [
              "() => ",
              {
                "pluginId": "@kbn/core-theme-browser",
                "scope": "public",
                "docId": "kibKbnCoreThemeBrowserPluginApi",
                "section": "def-public.CoreTheme",
                "text": "CoreTheme"
              }
            ],
            "path": "packages/core/theme/core-theme-browser/src/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/core-theme-browser",
        "id": "def-public.ThemeServiceStart",
        "type": "Type",
        "tags": [],
        "label": "ThemeServiceStart",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/core-theme-browser",
            "scope": "public",
            "docId": "kibKbnCoreThemeBrowserPluginApi",
            "section": "def-public.ThemeServiceSetup",
            "text": "ThemeServiceSetup"
          }
        ],
        "path": "packages/core/theme/core-theme-browser/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}