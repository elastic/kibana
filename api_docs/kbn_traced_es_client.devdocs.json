{
  "id": "@kbn/traced-es-client",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.createTracedEsClient",
        "type": "Function",
        "tags": [],
        "label": "createTracedEsClient",
        "description": [],
        "signature": [
          "({\n  client,\n  logger,\n  plugin,\n  labels,\n}: { client: ",
          "ElasticsearchClient",
          "; logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "common",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-common.Logger",
            "text": "Logger"
          },
          "; plugin?: string | undefined; labels?: Record<string, string> | undefined; }) => ",
          {
            "pluginId": "@kbn/traced-es-client",
            "scope": "server",
            "docId": "kibKbnTracedEsClientPluginApi",
            "section": "def-server.TracedElasticsearchClient",
            "text": "TracedElasticsearchClient"
          }
        ],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/traced-es-client",
            "id": "def-server.createTracedEsClient.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  client,\n  logger,\n  plugin,\n  labels,\n}",
            "description": [],
            "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.createTracedEsClient.$1.client",
                "type": "Object",
                "tags": [],
                "label": "client",
                "description": [],
                "signature": [
                  "{ create: { <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateResponse",
                  "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; }; get: { <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; }; delete: { (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; helpers: ",
                  "default",
                  "; search: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; }; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
                  "default",
                  "; child: (opts: ",
                  "ClientOptions",
                  ") => ",
                  "default",
                  "; asyncSearch: ",
                  "default",
                  "; autoscaling: ",
                  "default",
                  "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "BulkResponse",
                  ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; }; capabilities: { (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TODO",
                  ">; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TODO",
                  ", unknown>>; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TODO",
                  ">; }; cat: ",
                  "default",
                  "; ccr: ",
                  "default",
                  "; clearScroll: { (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClearScrollResponse",
                  ", unknown>>; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; }; closePointInTime: { (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClosePointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; }; cluster: ",
                  "default",
                  "; connector: ",
                  "default",
                  "; count: { (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "CountResponse",
                  ", unknown>>; (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; }; danglingIndices: ",
                  "default",
                  "; deleteByQuery: { (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "DeleteByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; }; deleteByQueryRethrottle: { (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TasksTaskListResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; }; deleteScript: { (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; enrich: ",
                  "default",
                  "; eql: ",
                  "default",
                  "; esql: ",
                  "default",
                  "; exists: { (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ExplainResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; }; features: ",
                  "default",
                  "; fieldCaps: { (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "FieldCapsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; }; fleet: ",
                  "default",
                  "; getScript: { (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptResponse",
                  ", unknown>>; (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; }; getScriptContext: { (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptContextResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; }; getScriptLanguages: { (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptLanguagesResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<TDocument>; }; graph: ",
                  "default",
                  "; healthReport: { (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "HealthReportResponse",
                  ">; (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "HealthReportResponse",
                  ", unknown>>; (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "HealthReportResponse",
                  ">; }; ilm: ",
                  "default",
                  "; index: { <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; indices: ",
                  "default",
                  "; inference: ",
                  "default",
                  "; info: { (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "InfoResponse",
                  ", unknown>>; (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; }; ingest: ",
                  "default",
                  "; knnSearch: { <TDocument = unknown>(this: That, params: ",
                  "KnnSearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "KnnSearchResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "KnnSearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "KnnSearchResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "KnnSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "KnnSearchResponse",
                  "<TDocument>>; }; license: ",
                  "default",
                  "; logstash: ",
                  "default",
                  "; mget: { <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MgetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; }; migration: ",
                  "default",
                  "; ml: ",
                  "default",
                  "; monitoring: ",
                  "default",
                  "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MtermvectorsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; }; nodes: ",
                  "default",
                  "; openPointInTime: { (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "OpenPointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; }; ping: { (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; profiling: ",
                  "default",
                  "; putScript: { (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; queryRules: ",
                  "default",
                  "; rankEval: { (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RankEvalResponse",
                  ", unknown>>; (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; }; reindex: { (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; }; reindexRethrottle: { (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; }; renderSearchTemplate: { (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RenderSearchTemplateResponse",
                  ", unknown>>; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; }; rollup: ",
                  "default",
                  "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; }; searchApplication: ",
                  "default",
                  "; searchMvt: { (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<ArrayBuffer, unknown>>; (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchShardsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchTemplateResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; }; searchableSnapshots: ",
                  "default",
                  "; security: ",
                  "default",
                  "; shutdown: ",
                  "default",
                  "; simulate: ",
                  "default",
                  "; slm: ",
                  "default",
                  "; snapshot: ",
                  "default",
                  "; sql: ",
                  "default",
                  "; ssl: ",
                  "default",
                  "; synonyms: ",
                  "default",
                  "; tasks: ",
                  "default",
                  "; termsEnum: { (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermsEnumResponse",
                  ", unknown>>; (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermvectorsResponse",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; }; textStructure: ",
                  "default",
                  "; transform: ",
                  "default",
                  "; updateByQuery: { (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; }; updateByQueryRethrottle: { (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; }; watcher: ",
                  "default",
                  "; xpack: ",
                  "default",
                  "; }"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.createTracedEsClient.$1.logger",
                "type": "Object",
                "tags": [],
                "label": "logger",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.Logger",
                    "text": "Logger"
                  }
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.createTracedEsClient.$1.plugin",
                "type": "string",
                "tags": [],
                "label": "plugin",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.createTracedEsClient.$1.labels",
                "type": "Object",
                "tags": [],
                "label": "labels",
                "description": [],
                "signature": [
                  "Record<string, string> | undefined"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.EsqlOptions",
        "type": "Interface",
        "tags": [],
        "label": "EsqlOptions",
        "description": [],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/traced-es-client",
            "id": "def-server.EsqlOptions.transform",
            "type": "CompoundType",
            "tags": [],
            "label": "transform",
            "description": [],
            "signature": [
              "\"none\" | \"plain\" | \"unflatten\" | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.TracedElasticsearchClient",
        "type": "Interface",
        "tags": [],
        "label": "TracedElasticsearchClient",
        "description": [
          "\nAn Elasticsearch Client with a fully typed `search` method and built-in\nAPM instrumentation."
        ],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/traced-es-client",
            "id": "def-server.TracedElasticsearchClient.search",
            "type": "Function",
            "tags": [],
            "label": "search",
            "description": [],
            "signature": [
              "<TDocument = unknown, TSearchRequest extends SearchRequest = SearchRequest>(operationName: string, parameters: TSearchRequest) => Promise<",
              {
                "pluginId": "@kbn/es-types",
                "scope": "common",
                "docId": "kibKbnEsTypesPluginApi",
                "section": "def-common.InferSearchResponseOf",
                "text": "InferSearchResponseOf"
              },
              "<TDocument, TSearchRequest, { restTotalHitsAsInt: false; }>>"
            ],
            "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.search.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.search.$2",
                "type": "Uncategorized",
                "tags": [],
                "label": "parameters",
                "description": [],
                "signature": [
                  "TSearchRequest"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/traced-es-client",
            "id": "def-server.TracedElasticsearchClient.msearch",
            "type": "Function",
            "tags": [],
            "label": "msearch",
            "description": [],
            "signature": [
              "<TDocument = unknown>(operationName: string, parameters: ",
              "MsearchRequest",
              ") => Promise<{ responses: ",
              "SearchResponse",
              "<TDocument, Record<string, ",
              "AggregationsAggregate",
              ">>[]; }>"
            ],
            "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.msearch.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.msearch.$2",
                "type": "Object",
                "tags": [],
                "label": "parameters",
                "description": [],
                "signature": [
                  "MsearchRequest"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/traced-es-client",
            "id": "def-server.TracedElasticsearchClient.fieldCaps",
            "type": "Function",
            "tags": [],
            "label": "fieldCaps",
            "description": [],
            "signature": [
              "(operationName: string, request: ",
              "AugmentedRequired",
              "<",
              "FieldCapsRequest",
              ", \"index\" | \"fields\" | \"index_filter\">) => Promise<",
              "FieldCapsResponse",
              ">"
            ],
            "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.fieldCaps.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.fieldCaps.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  "AugmentedRequired",
                  "<",
                  "FieldCapsRequest",
                  ", \"index\" | \"fields\" | \"index_filter\">"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/traced-es-client",
            "id": "def-server.TracedElasticsearchClient.esql",
            "type": "Function",
            "tags": [],
            "label": "esql",
            "description": [],
            "signature": [
              "{ <TOutput extends ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.EsqlOutput",
                "text": "EsqlOutput"
              },
              " = ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.EsqlOutput",
                "text": "EsqlOutput"
              },
              ">(operationName: string, parameters: ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.ObservabilityEsQueryRequest",
                "text": "ObservabilityEsQueryRequest"
              },
              "): Promise<UnparsedEsqlResponseOf<TOutput>>; <TOutput extends ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.EsqlOutput",
                "text": "EsqlOutput"
              },
              " = ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.EsqlOutput",
                "text": "EsqlOutput"
              },
              ", TEsqlOptions extends ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.EsqlOptions",
                "text": "EsqlOptions"
              },
              " = { transform: \"none\"; }>(operationName: string, parameters: ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.ObservabilityEsQueryRequest",
                "text": "ObservabilityEsQueryRequest"
              },
              ", options: TEsqlOptions): Promise<",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.InferEsqlResponseOf",
                "text": "InferEsqlResponseOf"
              },
              "<TOutput, TEsqlOptions>>; }"
            ],
            "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.esql.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.esql.$2",
                "type": "Object",
                "tags": [],
                "label": "parameters",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/traced-es-client",
                    "scope": "server",
                    "docId": "kibKbnTracedEsClientPluginApi",
                    "section": "def-server.ObservabilityEsQueryRequest",
                    "text": "ObservabilityEsQueryRequest"
                  }
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/traced-es-client",
            "id": "def-server.TracedElasticsearchClient.esql",
            "type": "Function",
            "tags": [],
            "label": "esql",
            "description": [],
            "signature": [
              "{ <TOutput extends ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.EsqlOutput",
                "text": "EsqlOutput"
              },
              " = ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.EsqlOutput",
                "text": "EsqlOutput"
              },
              ">(operationName: string, parameters: ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.ObservabilityEsQueryRequest",
                "text": "ObservabilityEsQueryRequest"
              },
              "): Promise<UnparsedEsqlResponseOf<TOutput>>; <TOutput extends ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.EsqlOutput",
                "text": "EsqlOutput"
              },
              " = ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.EsqlOutput",
                "text": "EsqlOutput"
              },
              ", TEsqlOptions extends ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.EsqlOptions",
                "text": "EsqlOptions"
              },
              " = { transform: \"none\"; }>(operationName: string, parameters: ",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.ObservabilityEsQueryRequest",
                "text": "ObservabilityEsQueryRequest"
              },
              ", options: TEsqlOptions): Promise<",
              {
                "pluginId": "@kbn/traced-es-client",
                "scope": "server",
                "docId": "kibKbnTracedEsClientPluginApi",
                "section": "def-server.InferEsqlResponseOf",
                "text": "InferEsqlResponseOf"
              },
              "<TOutput, TEsqlOptions>>; }"
            ],
            "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.esql.$1",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.esql.$2",
                "type": "Object",
                "tags": [],
                "label": "parameters",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/traced-es-client",
                    "scope": "server",
                    "docId": "kibKbnTracedEsClientPluginApi",
                    "section": "def-server.ObservabilityEsQueryRequest",
                    "text": "ObservabilityEsQueryRequest"
                  }
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/traced-es-client",
                "id": "def-server.TracedElasticsearchClient.esql.$3",
                "type": "Uncategorized",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "TEsqlOptions"
                ],
                "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/traced-es-client",
            "id": "def-server.TracedElasticsearchClient.client",
            "type": "Object",
            "tags": [],
            "label": "client",
            "description": [],
            "signature": [
              "{ create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; helpers: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; asyncSearch: ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; capabilities: { (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TODO",
              ">; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TODO",
              ", unknown>>; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TODO",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; cluster: ",
              "default",
              "; connector: ",
              "default",
              "; count: { (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; eql: ",
              "default",
              "; esql: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; healthReport: { (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "HealthReportResponse",
              ">; (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "HealthReportResponse",
              ", unknown>>; (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "HealthReportResponse",
              ">; }; ilm: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; indices: ",
              "default",
              "; inference: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; monitoring: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; profiling: ",
              "default",
              "; putScript: { (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; queryRules: ",
              "default",
              "; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchApplication: ",
              "default",
              "; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; security: ",
              "default",
              "; shutdown: ",
              "default",
              "; simulate: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; synonyms: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.EsqlOutput",
        "type": "Type",
        "tags": [],
        "label": "EsqlOutput",
        "description": [],
        "signature": [
          "{ [x: string]: ",
          {
            "pluginId": "@kbn/traced-es-client",
            "scope": "server",
            "docId": "kibKbnTracedEsClientPluginApi",
            "section": "def-server.EsqlValue",
            "text": "EsqlValue"
          },
          "; }"
        ],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.EsqlQueryResponse",
        "type": "Type",
        "tags": [],
        "label": "EsqlQueryResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/traced-es-client",
            "scope": "server",
            "docId": "kibKbnTracedEsClientPluginApi",
            "section": "def-server.UnparsedEsqlResponse",
            "text": "UnparsedEsqlResponse"
          },
          " | ",
          {
            "pluginId": "@kbn/traced-es-client",
            "scope": "server",
            "docId": "kibKbnTracedEsClientPluginApi",
            "section": "def-server.ParsedEsqlResponse",
            "text": "ParsedEsqlResponse"
          }
        ],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.EsqlValue",
        "type": "Type",
        "tags": [],
        "label": "EsqlValue",
        "description": [],
        "signature": [
          "ScalarValue",
          " | ",
          "ScalarValue",
          "[]"
        ],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.InferEsqlResponseOf",
        "type": "Type",
        "tags": [],
        "label": "InferEsqlResponseOf",
        "description": [],
        "signature": [
          "TOptions extends { transform: \"plain\" | \"unflatten\"; } ? ParsedEsqlResponseOf<TOutput, TOptions> : UnparsedEsqlResponseOf<TOutput>"
        ],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.ObservabilityEsQueryRequest",
        "type": "Type",
        "tags": [],
        "label": "ObservabilityEsQueryRequest",
        "description": [],
        "signature": [
          "{ params?: any[] | undefined; filter?: ",
          "QueryDslQueryContainer",
          " | undefined; query: string; profile?: boolean | undefined; body?: string | ({ [key: string]: any; } & { format?: undefined; delimiter?: undefined; drop_null_columns?: undefined; columnar?: undefined; filter?: undefined; locale?: undefined; params?: undefined; profile?: undefined; query?: undefined; tables?: undefined; }) | undefined; querystring?: ({ [key: string]: any; } & { format?: undefined; delimiter?: undefined; drop_null_columns?: undefined; columnar?: undefined; filter?: undefined; locale?: undefined; params?: undefined; profile?: undefined; query?: undefined; tables?: undefined; }) | undefined; error_trace?: boolean | undefined; filter_path?: string | string[] | undefined; human?: boolean | undefined; pretty?: boolean | undefined; locale?: string | undefined; delimiter?: string | undefined; tables?: Record<string, Record<string, ",
          "EsqlTableValuesContainer",
          ">> | undefined; drop_null_columns?: boolean | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.ObservabilityESSearchRequest",
        "type": "Type",
        "tags": [],
        "label": "ObservabilityESSearchRequest",
        "description": [],
        "signature": [
          "SearchRequest",
          " & { index: string | string[]; track_total_hits: number | boolean; size: number; }"
        ],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.ParsedEsqlResponse",
        "type": "Type",
        "tags": [],
        "label": "ParsedEsqlResponse",
        "description": [],
        "signature": [
          "ParsedEsqlResponseOf<",
          {
            "pluginId": "@kbn/traced-es-client",
            "scope": "server",
            "docId": "kibKbnTracedEsClientPluginApi",
            "section": "def-server.EsqlOutput",
            "text": "EsqlOutput"
          },
          ", ",
          {
            "pluginId": "@kbn/traced-es-client",
            "scope": "server",
            "docId": "kibKbnTracedEsClientPluginApi",
            "section": "def-server.EsqlOptions",
            "text": "EsqlOptions"
          },
          ">"
        ],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/traced-es-client",
        "id": "def-server.UnparsedEsqlResponse",
        "type": "Type",
        "tags": [],
        "label": "UnparsedEsqlResponse",
        "description": [],
        "signature": [
          "UnparsedEsqlResponseOf<",
          {
            "pluginId": "@kbn/traced-es-client",
            "scope": "server",
            "docId": "kibKbnTracedEsClientPluginApi",
            "section": "def-server.EsqlOutput",
            "text": "EsqlOutput"
          },
          ">"
        ],
        "path": "src/platform/packages/shared/kbn-traced-es-client/src/create_traced_es_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}