{
  "id": "@kbn/ai-assistant-icon",
  "client": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/ai-assistant-icon",
        "id": "def-public.AssistantAvatar",
        "type": "Function",
        "tags": [],
        "label": "AssistantAvatar",
        "description": [
          "\nA `EuiAvatar` component customized for the AI Assistant."
        ],
        "signature": [
          "({ css, color, size, ...props }: ",
          {
            "pluginId": "@kbn/ai-assistant-icon",
            "scope": "public",
            "docId": "kibKbnAiAssistantIconPluginApi",
            "section": "def-public.AssistantAvatarProps",
            "text": "AssistantAvatarProps"
          },
          ") => React.JSX.Element"
        ],
        "path": "x-pack/platform/packages/shared/ai-assistant/icon/avatar.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-assistant-icon",
            "id": "def-public.AssistantAvatar.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  css,\n  color = 'plain',\n  size = 'm',\n  ...props\n}",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/ai-assistant-icon",
                "scope": "public",
                "docId": "kibKbnAiAssistantIconPluginApi",
                "section": "def-public.AssistantAvatarProps",
                "text": "AssistantAvatarProps"
              }
            ],
            "path": "x-pack/platform/packages/shared/ai-assistant/icon/avatar.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-assistant-icon",
        "id": "def-public.AssistantBeacon",
        "type": "Function",
        "tags": [],
        "label": "AssistantBeacon",
        "description": [
          "\nAn AI Assistant icon with a pulsing ring around it, used in \"hero\" areas promoting functionality or prompting interaction."
        ],
        "signature": [
          "({ backgroundColor, size }: ",
          {
            "pluginId": "@kbn/ai-assistant-icon",
            "scope": "public",
            "docId": "kibKbnAiAssistantIconPluginApi",
            "section": "def-public.AssistantBeaconProps",
            "text": "AssistantBeaconProps"
          },
          ") => React.JSX.Element"
        ],
        "path": "x-pack/platform/packages/shared/ai-assistant/icon/beacon.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-assistant-icon",
            "id": "def-public.AssistantBeacon.$1",
            "type": "Object",
            "tags": [],
            "label": "{ backgroundColor, size = 'xxl' }",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/ai-assistant-icon",
                "scope": "public",
                "docId": "kibKbnAiAssistantIconPluginApi",
                "section": "def-public.AssistantBeaconProps",
                "text": "AssistantBeaconProps"
              }
            ],
            "path": "x-pack/platform/packages/shared/ai-assistant/icon/beacon.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-assistant-icon",
        "id": "def-public.AssistantIcon",
        "type": "Function",
        "tags": [],
        "label": "AssistantIcon",
        "description": [
          "\nDefault Elastic AI Assistant icon."
        ],
        "signature": [
          "({ size, ...rest }: ",
          {
            "pluginId": "@kbn/ai-assistant-icon",
            "scope": "public",
            "docId": "kibKbnAiAssistantIconPluginApi",
            "section": "def-public.AssistantIconProps",
            "text": "AssistantIconProps"
          },
          ") => React.JSX.Element"
        ],
        "path": "x-pack/platform/packages/shared/ai-assistant/icon/icon.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-assistant-icon",
            "id": "def-public.AssistantIcon.$1",
            "type": "Object",
            "tags": [],
            "label": "{ size = 'm', ...rest }",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/ai-assistant-icon",
                "scope": "public",
                "docId": "kibKbnAiAssistantIconPluginApi",
                "section": "def-public.AssistantIconProps",
                "text": "AssistantIconProps"
              }
            ],
            "path": "x-pack/platform/packages/shared/ai-assistant/icon/icon.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/ai-assistant-icon",
        "id": "def-public.AssistantBeaconProps",
        "type": "Interface",
        "tags": [],
        "label": "AssistantBeaconProps",
        "description": [
          "\nParameters for the styles for the AI Assistant beacon."
        ],
        "path": "x-pack/platform/packages/shared/ai-assistant/icon/beacon.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ai-assistant-icon",
            "id": "def-public.AssistantBeaconProps.backgroundColor",
            "type": "CompoundType",
            "tags": [],
            "label": "backgroundColor",
            "description": [
              "\nBackground color for the beacon."
            ],
            "signature": [
              "EuiThemeColorModeStandard",
              " | keyof ",
              "_EuiThemeBrandColors",
              " | keyof ",
              "_EuiThemeBrandTextColors",
              " | keyof ",
              "_EuiThemeShadeColors",
              " | keyof ",
              "_EuiThemeSpecialColors",
              " | keyof ",
              "_EuiThemeTextColors",
              " | keyof ",
              "_EuiThemeBackgroundColors",
              " | keyof ",
              "_EuiThemeTransparentBackgroundColors",
              " | keyof ",
              "_EuiThemeBorderColors",
              " | keyof ",
              "_EuiThemeConstantColors",
              " | undefined"
            ],
            "path": "x-pack/platform/packages/shared/ai-assistant/icon/beacon.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ai-assistant-icon",
            "id": "def-public.AssistantBeaconProps.size",
            "type": "CompoundType",
            "tags": [],
            "label": "size",
            "description": [
              "\nSize of the beacon."
            ],
            "signature": [
              "\"m\" | \"s\" | \"l\" | \"xl\" | \"xxl\" | undefined"
            ],
            "path": "x-pack/platform/packages/shared/ai-assistant/icon/beacon.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/ai-assistant-icon",
        "id": "def-public.AssistantAvatarProps",
        "type": "Type",
        "tags": [],
        "label": "AssistantAvatarProps",
        "description": [
          "\nAvatar component for the AI Assistant."
        ],
        "signature": [
          "{ id?: string | undefined; prefix?: string | undefined; type?: \"space\" | \"user\" | undefined; onError?: React.ReactEventHandler<HTMLDivElement> | undefined; defaultValue?: string | number | readonly string[] | undefined; name: string; security?: string | undefined; className?: string | undefined; \"aria-label\"?: string | undefined; 'data-test-subj'?: string | undefined; css?: ",
          "Interpolation",
          "<",
          "Theme",
          ">; defaultChecked?: boolean | undefined; suppressContentEditableWarning?: boolean | undefined; suppressHydrationWarning?: boolean | undefined; accessKey?: string | undefined; autoFocus?: boolean | undefined; contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\" | undefined; contextMenu?: string | undefined; dir?: string | undefined; draggable?: Booleanish | undefined; hidden?: boolean | undefined; lang?: string | undefined; nonce?: string | undefined; slot?: string | undefined; spellCheck?: Booleanish | undefined; style?: React.CSSProperties | undefined; tabIndex?: number | undefined; title?: string | undefined; translate?: \"yes\" | \"no\" | undefined; radioGroup?: string | undefined; role?: React.AriaRole | undefined; about?: string | undefined; content?: string | undefined; datatype?: string | undefined; inlist?: any; property?: string | undefined; rel?: string | undefined; resource?: string | undefined; rev?: string | undefined; typeof?: string | undefined; vocab?: string | undefined; autoCapitalize?: string | undefined; autoCorrect?: string | undefined; autoSave?: string | undefined; color?: string | null | undefined; itemProp?: string | undefined; itemScope?: boolean | undefined; itemType?: string | undefined; itemID?: string | undefined; itemRef?: string | undefined; results?: number | undefined; unselectable?: \"on\" | \"off\" | undefined; inputMode?: \"search\" | \"none\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | undefined; is?: string | undefined; \"aria-activedescendant\"?: string | undefined; \"aria-atomic\"?: Booleanish | undefined; \"aria-autocomplete\"?: \"none\" | \"list\" | \"inline\" | \"both\" | undefined; \"aria-braillelabel\"?: string | undefined; \"aria-brailleroledescription\"?: string | undefined; \"aria-busy\"?: Booleanish | undefined; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\" | undefined; \"aria-colcount\"?: number | undefined; \"aria-colindex\"?: number | undefined; \"aria-colindextext\"?: string | undefined; \"aria-colspan\"?: number | undefined; \"aria-controls\"?: string | undefined; \"aria-current\"?: boolean | \"page\" | \"date\" | \"location\" | \"true\" | \"false\" | \"time\" | \"step\" | undefined; \"aria-describedby\"?: string | undefined; \"aria-description\"?: string | undefined; \"aria-details\"?: string | undefined; \"aria-disabled\"?: Booleanish | undefined; \"aria-dropeffect\"?: \"execute\" | \"link\" | \"none\" | \"copy\" | \"move\" | \"popup\" | undefined; \"aria-errormessage\"?: string | undefined; \"aria-expanded\"?: Booleanish | undefined; \"aria-flowto\"?: string | undefined; \"aria-grabbed\"?: Booleanish | undefined; \"aria-haspopup\"?: boolean | \"grid\" | \"true\" | \"false\" | \"dialog\" | \"menu\" | \"listbox\" | \"tree\" | undefined; \"aria-hidden\"?: Booleanish | undefined; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\" | undefined; \"aria-keyshortcuts\"?: string | undefined; \"aria-labelledby\"?: string | undefined; \"aria-level\"?: number | undefined; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\" | undefined; \"aria-modal\"?: Booleanish | undefined; \"aria-multiline\"?: Booleanish | undefined; \"aria-multiselectable\"?: Booleanish | undefined; \"aria-orientation\"?: \"horizontal\" | \"vertical\" | undefined; \"aria-owns\"?: string | undefined; \"aria-placeholder\"?: string | undefined; \"aria-posinset\"?: number | undefined; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\" | undefined; \"aria-readonly\"?: Booleanish | undefined; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\" | undefined; \"aria-required\"?: Booleanish | undefined; \"aria-roledescription\"?: string | undefined; \"aria-rowcount\"?: number | undefined; \"aria-rowindex\"?: number | undefined; \"aria-rowindextext\"?: string | undefined; \"aria-rowspan\"?: number | undefined; \"aria-selected\"?: Booleanish | undefined; \"aria-setsize\"?: number | undefined; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\" | undefined; \"aria-valuemax\"?: number | undefined; \"aria-valuemin\"?: number | undefined; \"aria-valuenow\"?: number | undefined; \"aria-valuetext\"?: string | undefined; children?: React.ReactNode; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; } | undefined; onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined; onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined; onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined; onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined; onChange?: React.FormEventHandler<HTMLDivElement> | undefined; onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined; onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onInput?: React.FormEventHandler<HTMLDivElement> | undefined; onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onReset?: React.FormEventHandler<HTMLDivElement> | undefined; onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined; onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined; onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined; onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined; onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined; onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined; onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPause?: React.ReactEventHandler<HTMLDivElement> | undefined; onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined; onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onResize?: React.ReactEventHandler<HTMLDivElement> | undefined; onResizeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined; onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined; onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined; onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined; onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined; onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onClick?: React.MouseEventHandler<HTMLDivElement> | undefined; onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined; onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined; onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onDrag?: React.DragEventHandler<HTMLDivElement> | undefined; onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined; onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined; onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined; onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined; onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDrop?: React.DragEventHandler<HTMLDivElement> | undefined; onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined; onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onScroll?: React.UIEventHandler<HTMLDivElement> | undefined; onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined; onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined; onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined; onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined; onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined; size?: \"m\" | \"s\" | \"l\" | \"xl\" | undefined; iconColor?: string | null | undefined; isDisabled?: boolean | undefined; iconSize?: \"m\" | \"s\" | \"l\" | \"original\" | \"xl\" | \"xxl\" | undefined; casing?: \"none\" | \"lowercase\" | \"capitalize\" | \"uppercase\" | undefined; }"
        ],
        "path": "x-pack/platform/packages/shared/ai-assistant/icon/avatar.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ai-assistant-icon",
        "id": "def-public.AssistantIconProps",
        "type": "Type",
        "tags": [],
        "label": "AssistantIconProps",
        "description": [
          "\nProps for the AI Assistant icon."
        ],
        "signature": [
          "{ string?: string | number | undefined; id?: string | undefined; onError?: React.ReactEventHandler<SVGElement> | undefined; min?: string | number | undefined; end?: string | number | undefined; filter?: string | undefined; max?: string | number | undefined; in?: string | undefined; mode?: string | number | undefined; order?: string | number | undefined; version?: string | undefined; format?: string | number | undefined; fill?: string | undefined; values?: string | undefined; name?: string | undefined; transform?: string | undefined; className?: string | undefined; \"aria-label\"?: string | undefined; 'data-test-subj'?: string | undefined; css?: ",
          "Interpolation",
          "<",
          "Theme",
          ">; suppressHydrationWarning?: boolean | undefined; lang?: string | undefined; style?: React.CSSProperties | undefined; tabIndex?: number | undefined; title?: string | undefined; role?: React.AriaRole | undefined; color?: string | undefined; \"aria-activedescendant\"?: string | undefined; \"aria-atomic\"?: Booleanish | undefined; \"aria-autocomplete\"?: \"none\" | \"list\" | \"inline\" | \"both\" | undefined; \"aria-braillelabel\"?: string | undefined; \"aria-brailleroledescription\"?: string | undefined; \"aria-busy\"?: Booleanish | undefined; \"aria-checked\"?: boolean | \"true\" | \"false\" | \"mixed\" | undefined; \"aria-colcount\"?: number | undefined; \"aria-colindex\"?: number | undefined; \"aria-colindextext\"?: string | undefined; \"aria-colspan\"?: number | undefined; \"aria-controls\"?: string | undefined; \"aria-current\"?: boolean | \"page\" | \"date\" | \"location\" | \"true\" | \"false\" | \"time\" | \"step\" | undefined; \"aria-describedby\"?: string | undefined; \"aria-description\"?: string | undefined; \"aria-details\"?: string | undefined; \"aria-disabled\"?: Booleanish | undefined; \"aria-dropeffect\"?: \"execute\" | \"link\" | \"none\" | \"copy\" | \"move\" | \"popup\" | undefined; \"aria-errormessage\"?: string | undefined; \"aria-expanded\"?: Booleanish | undefined; \"aria-flowto\"?: string | undefined; \"aria-grabbed\"?: Booleanish | undefined; \"aria-haspopup\"?: boolean | \"grid\" | \"true\" | \"false\" | \"dialog\" | \"menu\" | \"listbox\" | \"tree\" | undefined; \"aria-hidden\"?: Booleanish | undefined; \"aria-invalid\"?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\" | undefined; \"aria-keyshortcuts\"?: string | undefined; \"aria-labelledby\"?: string | undefined; \"aria-level\"?: number | undefined; \"aria-live\"?: \"off\" | \"assertive\" | \"polite\" | undefined; \"aria-modal\"?: Booleanish | undefined; \"aria-multiline\"?: Booleanish | undefined; \"aria-multiselectable\"?: Booleanish | undefined; \"aria-orientation\"?: \"horizontal\" | \"vertical\" | undefined; \"aria-owns\"?: string | undefined; \"aria-placeholder\"?: string | undefined; \"aria-posinset\"?: number | undefined; \"aria-pressed\"?: boolean | \"true\" | \"false\" | \"mixed\" | undefined; \"aria-readonly\"?: Booleanish | undefined; \"aria-relevant\"?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\" | undefined; \"aria-required\"?: Booleanish | undefined; \"aria-roledescription\"?: string | undefined; \"aria-rowcount\"?: number | undefined; \"aria-rowindex\"?: number | undefined; \"aria-rowindextext\"?: string | undefined; \"aria-rowspan\"?: number | undefined; \"aria-selected\"?: Booleanish | undefined; \"aria-setsize\"?: number | undefined; \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\" | undefined; \"aria-valuemax\"?: number | undefined; \"aria-valuemin\"?: number | undefined; \"aria-valuenow\"?: number | undefined; \"aria-valuetext\"?: string | undefined; children?: React.ReactNode; dangerouslySetInnerHTML?: { __html: string | TrustedHTML; } | undefined; onCopy?: React.ClipboardEventHandler<SVGElement> | undefined; onCopyCapture?: React.ClipboardEventHandler<SVGElement> | undefined; onCut?: React.ClipboardEventHandler<SVGElement> | undefined; onCutCapture?: React.ClipboardEventHandler<SVGElement> | undefined; onPaste?: React.ClipboardEventHandler<SVGElement> | undefined; onPasteCapture?: React.ClipboardEventHandler<SVGElement> | undefined; onCompositionEnd?: React.CompositionEventHandler<SVGElement> | undefined; onCompositionEndCapture?: React.CompositionEventHandler<SVGElement> | undefined; onCompositionStart?: React.CompositionEventHandler<SVGElement> | undefined; onCompositionStartCapture?: React.CompositionEventHandler<SVGElement> | undefined; onCompositionUpdate?: React.CompositionEventHandler<SVGElement> | undefined; onCompositionUpdateCapture?: React.CompositionEventHandler<SVGElement> | undefined; onFocus?: React.FocusEventHandler<SVGElement> | undefined; onFocusCapture?: React.FocusEventHandler<SVGElement> | undefined; onBlur?: React.FocusEventHandler<SVGElement> | undefined; onBlurCapture?: React.FocusEventHandler<SVGElement> | undefined; onChange?: React.FormEventHandler<SVGElement> | undefined; onChangeCapture?: React.FormEventHandler<SVGElement> | undefined; onBeforeInput?: React.FormEventHandler<SVGElement> | undefined; onBeforeInputCapture?: React.FormEventHandler<SVGElement> | undefined; onInput?: React.FormEventHandler<SVGElement> | undefined; onInputCapture?: React.FormEventHandler<SVGElement> | undefined; onReset?: React.FormEventHandler<SVGElement> | undefined; onResetCapture?: React.FormEventHandler<SVGElement> | undefined; onSubmit?: React.FormEventHandler<SVGElement> | undefined; onSubmitCapture?: React.FormEventHandler<SVGElement> | undefined; onInvalid?: React.FormEventHandler<SVGElement> | undefined; onInvalidCapture?: React.FormEventHandler<SVGElement> | undefined; onLoad?: React.ReactEventHandler<SVGElement> | undefined; onLoadCapture?: React.ReactEventHandler<SVGElement> | undefined; onErrorCapture?: React.ReactEventHandler<SVGElement> | undefined; onKeyDown?: React.KeyboardEventHandler<SVGElement> | undefined; onKeyDownCapture?: React.KeyboardEventHandler<SVGElement> | undefined; onKeyPress?: React.KeyboardEventHandler<SVGElement> | undefined; onKeyPressCapture?: React.KeyboardEventHandler<SVGElement> | undefined; onKeyUp?: React.KeyboardEventHandler<SVGElement> | undefined; onKeyUpCapture?: React.KeyboardEventHandler<SVGElement> | undefined; onAbort?: React.ReactEventHandler<SVGElement> | undefined; onAbortCapture?: React.ReactEventHandler<SVGElement> | undefined; onCanPlay?: React.ReactEventHandler<SVGElement> | undefined; onCanPlayCapture?: React.ReactEventHandler<SVGElement> | undefined; onCanPlayThrough?: React.ReactEventHandler<SVGElement> | undefined; onCanPlayThroughCapture?: React.ReactEventHandler<SVGElement> | undefined; onDurationChange?: React.ReactEventHandler<SVGElement> | undefined; onDurationChangeCapture?: React.ReactEventHandler<SVGElement> | undefined; onEmptied?: React.ReactEventHandler<SVGElement> | undefined; onEmptiedCapture?: React.ReactEventHandler<SVGElement> | undefined; onEncrypted?: React.ReactEventHandler<SVGElement> | undefined; onEncryptedCapture?: React.ReactEventHandler<SVGElement> | undefined; onEnded?: React.ReactEventHandler<SVGElement> | undefined; onEndedCapture?: React.ReactEventHandler<SVGElement> | undefined; onLoadedData?: React.ReactEventHandler<SVGElement> | undefined; onLoadedDataCapture?: React.ReactEventHandler<SVGElement> | undefined; onLoadedMetadata?: React.ReactEventHandler<SVGElement> | undefined; onLoadedMetadataCapture?: React.ReactEventHandler<SVGElement> | undefined; onLoadStart?: React.ReactEventHandler<SVGElement> | undefined; onLoadStartCapture?: React.ReactEventHandler<SVGElement> | undefined; onPause?: React.ReactEventHandler<SVGElement> | undefined; onPauseCapture?: React.ReactEventHandler<SVGElement> | undefined; onPlay?: React.ReactEventHandler<SVGElement> | undefined; onPlayCapture?: React.ReactEventHandler<SVGElement> | undefined; onPlaying?: React.ReactEventHandler<SVGElement> | undefined; onPlayingCapture?: React.ReactEventHandler<SVGElement> | undefined; onProgress?: React.ReactEventHandler<SVGElement> | undefined; onProgressCapture?: React.ReactEventHandler<SVGElement> | undefined; onRateChange?: React.ReactEventHandler<SVGElement> | undefined; onRateChangeCapture?: React.ReactEventHandler<SVGElement> | undefined; onResize?: React.ReactEventHandler<SVGElement> | undefined; onResizeCapture?: React.ReactEventHandler<SVGElement> | undefined; onSeeked?: React.ReactEventHandler<SVGElement> | undefined; onSeekedCapture?: React.ReactEventHandler<SVGElement> | undefined; onSeeking?: React.ReactEventHandler<SVGElement> | undefined; onSeekingCapture?: React.ReactEventHandler<SVGElement> | undefined; onStalled?: React.ReactEventHandler<SVGElement> | undefined; onStalledCapture?: React.ReactEventHandler<SVGElement> | undefined; onSuspend?: React.ReactEventHandler<SVGElement> | undefined; onSuspendCapture?: React.ReactEventHandler<SVGElement> | undefined; onTimeUpdate?: React.ReactEventHandler<SVGElement> | undefined; onTimeUpdateCapture?: React.ReactEventHandler<SVGElement> | undefined; onVolumeChange?: React.ReactEventHandler<SVGElement> | undefined; onVolumeChangeCapture?: React.ReactEventHandler<SVGElement> | undefined; onWaiting?: React.ReactEventHandler<SVGElement> | undefined; onWaitingCapture?: React.ReactEventHandler<SVGElement> | undefined; onAuxClick?: React.MouseEventHandler<SVGElement> | undefined; onAuxClickCapture?: React.MouseEventHandler<SVGElement> | undefined; onClick?: React.MouseEventHandler<SVGElement> | undefined; onClickCapture?: React.MouseEventHandler<SVGElement> | undefined; onContextMenu?: React.MouseEventHandler<SVGElement> | undefined; onContextMenuCapture?: React.MouseEventHandler<SVGElement> | undefined; onDoubleClick?: React.MouseEventHandler<SVGElement> | undefined; onDoubleClickCapture?: React.MouseEventHandler<SVGElement> | undefined; onDrag?: React.DragEventHandler<SVGElement> | undefined; onDragCapture?: React.DragEventHandler<SVGElement> | undefined; onDragEnd?: React.DragEventHandler<SVGElement> | undefined; onDragEndCapture?: React.DragEventHandler<SVGElement> | undefined; onDragEnter?: React.DragEventHandler<SVGElement> | undefined; onDragEnterCapture?: React.DragEventHandler<SVGElement> | undefined; onDragExit?: React.DragEventHandler<SVGElement> | undefined; onDragExitCapture?: React.DragEventHandler<SVGElement> | undefined; onDragLeave?: React.DragEventHandler<SVGElement> | undefined; onDragLeaveCapture?: React.DragEventHandler<SVGElement> | undefined; onDragOver?: React.DragEventHandler<SVGElement> | undefined; onDragOverCapture?: React.DragEventHandler<SVGElement> | undefined; onDragStart?: React.DragEventHandler<SVGElement> | undefined; onDragStartCapture?: React.DragEventHandler<SVGElement> | undefined; onDrop?: React.DragEventHandler<SVGElement> | undefined; onDropCapture?: React.DragEventHandler<SVGElement> | undefined; onMouseDown?: React.MouseEventHandler<SVGElement> | undefined; onMouseDownCapture?: React.MouseEventHandler<SVGElement> | undefined; onMouseEnter?: React.MouseEventHandler<SVGElement> | undefined; onMouseLeave?: React.MouseEventHandler<SVGElement> | undefined; onMouseMove?: React.MouseEventHandler<SVGElement> | undefined; onMouseMoveCapture?: React.MouseEventHandler<SVGElement> | undefined; onMouseOut?: React.MouseEventHandler<SVGElement> | undefined; onMouseOutCapture?: React.MouseEventHandler<SVGElement> | undefined; onMouseOver?: React.MouseEventHandler<SVGElement> | undefined; onMouseOverCapture?: React.MouseEventHandler<SVGElement> | undefined; onMouseUp?: React.MouseEventHandler<SVGElement> | undefined; onMouseUpCapture?: React.MouseEventHandler<SVGElement> | undefined; onSelect?: React.ReactEventHandler<SVGElement> | undefined; onSelectCapture?: React.ReactEventHandler<SVGElement> | undefined; onTouchCancel?: React.TouchEventHandler<SVGElement> | undefined; onTouchCancelCapture?: React.TouchEventHandler<SVGElement> | undefined; onTouchEnd?: React.TouchEventHandler<SVGElement> | undefined; onTouchEndCapture?: React.TouchEventHandler<SVGElement> | undefined; onTouchMove?: React.TouchEventHandler<SVGElement> | undefined; onTouchMoveCapture?: React.TouchEventHandler<SVGElement> | undefined; onTouchStart?: React.TouchEventHandler<SVGElement> | undefined; onTouchStartCapture?: React.TouchEventHandler<SVGElement> | undefined; onPointerDown?: React.PointerEventHandler<SVGElement> | undefined; onPointerDownCapture?: React.PointerEventHandler<SVGElement> | undefined; onPointerMove?: React.PointerEventHandler<SVGElement> | undefined; onPointerMoveCapture?: React.PointerEventHandler<SVGElement> | undefined; onPointerUp?: React.PointerEventHandler<SVGElement> | undefined; onPointerUpCapture?: React.PointerEventHandler<SVGElement> | undefined; onPointerCancel?: React.PointerEventHandler<SVGElement> | undefined; onPointerCancelCapture?: React.PointerEventHandler<SVGElement> | undefined; onPointerEnter?: React.PointerEventHandler<SVGElement> | undefined; onPointerLeave?: React.PointerEventHandler<SVGElement> | undefined; onPointerOver?: React.PointerEventHandler<SVGElement> | undefined; onPointerOverCapture?: React.PointerEventHandler<SVGElement> | undefined; onPointerOut?: React.PointerEventHandler<SVGElement> | undefined; onPointerOutCapture?: React.PointerEventHandler<SVGElement> | undefined; onGotPointerCapture?: React.PointerEventHandler<SVGElement> | undefined; onGotPointerCaptureCapture?: React.PointerEventHandler<SVGElement> | undefined; onLostPointerCapture?: React.PointerEventHandler<SVGElement> | undefined; onLostPointerCaptureCapture?: React.PointerEventHandler<SVGElement> | undefined; onScroll?: React.UIEventHandler<SVGElement> | undefined; onScrollCapture?: React.UIEventHandler<SVGElement> | undefined; onWheel?: React.WheelEventHandler<SVGElement> | undefined; onWheelCapture?: React.WheelEventHandler<SVGElement> | undefined; onAnimationStart?: React.AnimationEventHandler<SVGElement> | undefined; onAnimationStartCapture?: React.AnimationEventHandler<SVGElement> | undefined; onAnimationEnd?: React.AnimationEventHandler<SVGElement> | undefined; onAnimationEndCapture?: React.AnimationEventHandler<SVGElement> | undefined; onAnimationIteration?: React.AnimationEventHandler<SVGElement> | undefined; onAnimationIterationCapture?: React.AnimationEventHandler<SVGElement> | undefined; onTransitionEnd?: React.TransitionEventHandler<SVGElement> | undefined; onTransitionEndCapture?: React.TransitionEventHandler<SVGElement> | undefined; size?: \"m\" | \"s\" | \"l\" | \"original\" | \"xl\" | \"xxl\" | undefined; path?: string | undefined; from?: string | number | undefined; to?: string | number | undefined; clipPath?: string | undefined; mask?: string | undefined; offset?: string | number | undefined; href?: string | undefined; media?: string | undefined; target?: string | undefined; direction?: string | number | undefined; width?: string | number | undefined; textDecoration?: string | number | undefined; operator?: string | number | undefined; result?: string | undefined; by?: string | number | undefined; scale?: string | number | undefined; y?: string | number | undefined; d?: string | undefined; fontSize?: string | number | undefined; fontFamily?: string | undefined; fontStyle?: string | number | undefined; stroke?: string | undefined; strokeWidth?: string | number | undefined; x?: string | number | undefined; stdDeviation?: string | number | undefined; display?: string | number | undefined; method?: string | undefined; cursor?: string | number | undefined; origin?: string | number | undefined; height?: string | number | undefined; overflow?: string | number | undefined; preserveAspectRatio?: string | undefined; vectorEffect?: string | number | undefined; strokeMiterlimit?: string | number | undefined; textAnchor?: string | undefined; dominantBaseline?: string | number | undefined; dx?: string | number | undefined; dy?: string | number | undefined; r?: string | number | undefined; cx?: string | number | undefined; cy?: string | number | undefined; strokeLinecap?: \"square\" | \"inherit\" | \"butt\" | \"round\" | undefined; points?: string | undefined; strokeLinejoin?: \"inherit\" | \"round\" | \"miter\" | \"bevel\" | undefined; opacity?: string | number | undefined; crossOrigin?: CrossOrigin; accentHeight?: string | number | undefined; accumulate?: \"sum\" | \"none\" | undefined; additive?: \"sum\" | \"replace\" | undefined; alignmentBaseline?: \"inherit\" | \"auto\" | \"middle\" | \"alphabetic\" | \"hanging\" | \"ideographic\" | \"mathematical\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"central\" | \"after-edge\" | \"text-after-edge\" | undefined; allowReorder?: \"yes\" | \"no\" | undefined; alphabetic?: string | number | undefined; amplitude?: string | number | undefined; arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\" | undefined; ascent?: string | number | undefined; attributeName?: string | undefined; attributeType?: string | undefined; autoReverse?: Booleanish | undefined; azimuth?: string | number | undefined; baseFrequency?: string | number | undefined; baselineShift?: string | number | undefined; baseProfile?: string | number | undefined; bbox?: string | number | undefined; begin?: string | number | undefined; bias?: string | number | undefined; calcMode?: string | number | undefined; capHeight?: string | number | undefined; clip?: string | number | undefined; clipPathUnits?: string | number | undefined; clipRule?: string | number | undefined; colorInterpolation?: string | number | undefined; colorInterpolationFilters?: \"inherit\" | \"auto\" | \"sRGB\" | \"linearRGB\" | undefined; colorProfile?: string | number | undefined; colorRendering?: string | number | undefined; contentScriptType?: string | number | undefined; contentStyleType?: string | number | undefined; decelerate?: string | number | undefined; descent?: string | number | undefined; diffuseConstant?: string | number | undefined; divisor?: string | number | undefined; dur?: string | number | undefined; edgeMode?: string | number | undefined; elevation?: string | number | undefined; enableBackground?: string | number | undefined; exponent?: string | number | undefined; externalResourcesRequired?: Booleanish | undefined; fillOpacity?: string | number | undefined; fillRule?: \"inherit\" | \"nonzero\" | \"evenodd\" | undefined; filterRes?: string | number | undefined; filterUnits?: string | number | undefined; floodColor?: string | number | undefined; floodOpacity?: string | number | undefined; focusable?: Booleanish | \"auto\" | undefined; fontSizeAdjust?: string | number | undefined; fontStretch?: string | number | undefined; fontVariant?: string | number | undefined; fontWeight?: string | number | undefined; fr?: string | number | undefined; fx?: string | number | undefined; fy?: string | number | undefined; g1?: string | number | undefined; g2?: string | number | undefined; glyphName?: string | number | undefined; glyphOrientationHorizontal?: string | number | undefined; glyphOrientationVertical?: string | number | undefined; glyphRef?: string | number | undefined; gradientTransform?: string | undefined; gradientUnits?: string | undefined; hanging?: string | number | undefined; horizAdvX?: string | number | undefined; horizOriginX?: string | number | undefined; ideographic?: string | number | undefined; imageRendering?: string | number | undefined; in2?: string | number | undefined; intercept?: string | number | undefined; k1?: string | number | undefined; k2?: string | number | undefined; k3?: string | number | undefined; k4?: string | number | undefined; k?: string | number | undefined; kernelMatrix?: string | number | undefined; kernelUnitLength?: string | number | undefined; kerning?: string | number | undefined; keyPoints?: string | number | undefined; keySplines?: string | number | undefined; keyTimes?: string | number | undefined; lengthAdjust?: string | number | undefined; letterSpacing?: string | number | undefined; lightingColor?: string | number | undefined; limitingConeAngle?: string | number | undefined; local?: string | number | undefined; markerEnd?: string | undefined; markerHeight?: string | number | undefined; markerMid?: string | undefined; markerStart?: string | undefined; markerUnits?: string | number | undefined; markerWidth?: string | number | undefined; maskContentUnits?: string | number | undefined; maskUnits?: string | number | undefined; mathematical?: string | number | undefined; numOctaves?: string | number | undefined; orient?: string | number | undefined; orientation?: string | number | undefined; overlinePosition?: string | number | undefined; overlineThickness?: string | number | undefined; paintOrder?: string | number | undefined; panose1?: string | number | undefined; pathLength?: string | number | undefined; patternContentUnits?: string | undefined; patternTransform?: string | number | undefined; patternUnits?: string | undefined; pointerEvents?: string | number | undefined; pointsAtX?: string | number | undefined; pointsAtY?: string | number | undefined; pointsAtZ?: string | number | undefined; preserveAlpha?: Booleanish | undefined; primitiveUnits?: string | number | undefined; radius?: string | number | undefined; refX?: string | number | undefined; refY?: string | number | undefined; renderingIntent?: string | number | undefined; repeatCount?: string | number | undefined; repeatDur?: string | number | undefined; requiredExtensions?: string | number | undefined; requiredFeatures?: string | number | undefined; restart?: string | number | undefined; rotate?: string | number | undefined; rx?: string | number | undefined; ry?: string | number | undefined; seed?: string | number | undefined; shapeRendering?: string | number | undefined; slope?: string | number | undefined; spacing?: string | number | undefined; specularConstant?: string | number | undefined; specularExponent?: string | number | undefined; speed?: string | number | undefined; spreadMethod?: string | undefined; startOffset?: string | number | undefined; stemh?: string | number | undefined; stemv?: string | number | undefined; stitchTiles?: string | number | undefined; stopColor?: string | undefined; stopOpacity?: string | number | undefined; strikethroughPosition?: string | number | undefined; strikethroughThickness?: string | number | undefined; strokeDasharray?: string | number | undefined; strokeDashoffset?: string | number | undefined; strokeOpacity?: string | number | undefined; surfaceScale?: string | number | undefined; systemLanguage?: string | number | undefined; tableValues?: string | number | undefined; targetX?: string | number | undefined; targetY?: string | number | undefined; textLength?: string | number | undefined; textRendering?: string | number | undefined; u1?: string | number | undefined; u2?: string | number | undefined; underlinePosition?: string | number | undefined; underlineThickness?: string | number | undefined; unicode?: string | number | undefined; unicodeBidi?: string | number | undefined; unicodeRange?: string | number | undefined; unitsPerEm?: string | number | undefined; vAlphabetic?: string | number | undefined; vertAdvY?: string | number | undefined; vertOriginX?: string | number | undefined; vertOriginY?: string | number | undefined; vHanging?: string | number | undefined; vIdeographic?: string | number | undefined; viewBox?: string | undefined; viewTarget?: string | number | undefined; visibility?: string | number | undefined; vMathematical?: string | number | undefined; widths?: string | number | undefined; wordSpacing?: string | number | undefined; writingMode?: string | number | undefined; x1?: string | number | undefined; x2?: string | number | undefined; xChannelSelector?: string | undefined; xHeight?: string | number | undefined; xlinkActuate?: string | undefined; xlinkArcrole?: string | undefined; xlinkHref?: string | undefined; xlinkRole?: string | undefined; xlinkShow?: string | undefined; xlinkTitle?: string | undefined; xlinkType?: string | undefined; xmlBase?: string | undefined; xmlLang?: string | undefined; xmlns?: string | undefined; xmlnsXlink?: string | undefined; xmlSpace?: string | undefined; y1?: string | number | undefined; y2?: string | number | undefined; yChannelSelector?: string | undefined; z?: string | number | undefined; zoomAndPan?: string | undefined; titleId?: string | undefined; onIconLoad?: (() => void) | undefined; }"
        ],
        "path": "x-pack/platform/packages/shared/ai-assistant/icon/icon.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}