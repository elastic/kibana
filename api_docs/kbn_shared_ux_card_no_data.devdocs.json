{
  "id": "@kbn/shared-ux-card-no-data",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/shared-ux-card-no-data",
        "id": "def-common.NoDataCard",
        "type": "Function",
        "tags": [],
        "label": "NoDataCard",
        "description": [],
        "signature": [
          "({ href: srcHref, category, description, ...props }: ",
          "NoDataCardProps",
          ") => JSX.Element"
        ],
        "path": "packages/shared-ux/card/no_data/impl/src/no_data_card.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/shared-ux-card-no-data",
            "id": "def-common.NoDataCard.$1",
            "type": "Object",
            "tags": [],
            "label": "{ href: srcHref, category, description, ...props }",
            "description": [],
            "signature": [
              "NoDataCardProps"
            ],
            "path": "packages/shared-ux/card/no_data/impl/src/no_data_card.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/shared-ux-card-no-data",
        "id": "def-common.NoDataCardKibanaProvider",
        "type": "Function",
        "tags": [],
        "label": "NoDataCardKibanaProvider",
        "description": [
          "\nKibana-specific Provider that maps dependencies to services."
        ],
        "signature": [
          "({ children, ...dependencies }: React.PropsWithChildren<",
          "NoDataCardKibanaDependencies",
          ">) => JSX.Element"
        ],
        "path": "packages/shared-ux/card/no_data/impl/src/services.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/shared-ux-card-no-data",
            "id": "def-common.NoDataCardKibanaProvider.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{\n  children,\n  ...dependencies\n}",
            "description": [],
            "signature": [
              "React.PropsWithChildren<",
              "NoDataCardKibanaDependencies",
              ">"
            ],
            "path": "packages/shared-ux/card/no_data/impl/src/services.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/shared-ux-card-no-data",
        "id": "def-common.NoDataCardProvider",
        "type": "Function",
        "tags": [],
        "label": "NoDataCardProvider",
        "description": [
          "\nA Context Provider that provides services to the component and its dependencies."
        ],
        "signature": [
          "({ children, ...services }: React.PropsWithChildren<",
          "NoDataCardServices",
          ">) => JSX.Element"
        ],
        "path": "packages/shared-ux/card/no_data/impl/src/services.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/shared-ux-card-no-data",
            "id": "def-common.NoDataCardProvider.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{ children, ...services }",
            "description": [],
            "signature": [
              "React.PropsWithChildren<",
              "NoDataCardServices",
              ">"
            ],
            "path": "packages/shared-ux/card/no_data/impl/src/services.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/shared-ux-card-no-data",
        "id": "def-common.NoDataCardComponentProps",
        "type": "Type",
        "tags": [],
        "label": "NoDataCardComponentProps",
        "description": [
          "\nProps for the `NoDataCard` pure component."
        ],
        "signature": [
          "Partial<Omit<",
          "EuiCardProps",
          ", \"description\" | \"button\" | \"onClick\" | \"isDisabled\" | \"layout\">> & { button?: React.ReactNode; onClick?: React.MouseEventHandler<HTMLElement> | undefined; description?: React.ReactNode; category?: string | undefined; canAccessFleet?: boolean | undefined; }"
        ],
        "path": "packages/shared-ux/card/no_data/types/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/shared-ux-card-no-data",
        "id": "def-common.NoDataCardKibanaDependencies",
        "type": "Type",
        "tags": [],
        "label": "NoDataCardKibanaDependencies",
        "description": [
          "\nAn interface containing a collection of Kibana plugins and services required to\nrender this component as well as any dependencies."
        ],
        "signature": [
          "KibanaDependencies",
          " & ",
          "RedirectAppLinksKibanaDependencies"
        ],
        "path": "packages/shared-ux/card/no_data/types/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/shared-ux-card-no-data",
        "id": "def-common.NoDataCardProps",
        "type": "Type",
        "tags": [],
        "label": "NoDataCardProps",
        "description": [
          "\nProps for the `NoDataCard` sevice-connected component."
        ],
        "signature": [
          "{ prefix?: string | undefined; id?: string | undefined; defaultValue?: string | number | readonly string[] | undefined; children?: React.ReactNode; description?: React.ReactNode; category?: string | undefined; is?: string | undefined; title?: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | undefined; button?: React.ReactNode; footer?: React.ReactNode; slot?: string | undefined; style?: React.CSSProperties | undefined; image?: string | React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined; className?: string | undefined; 'aria-label'?: string | undefined; 'data-test-subj'?: string | undefined; css?: ",
          "Interpolation",
          "<",
          "Theme",
          ">; defaultChecked?: boolean | undefined; suppressContentEditableWarning?: boolean | undefined; suppressHydrationWarning?: boolean | undefined; accessKey?: string | undefined; contentEditable?: Booleanish | \"inherit\" | undefined; contextMenu?: string | undefined; dir?: string | undefined; draggable?: Booleanish | undefined; hidden?: boolean | undefined; lang?: string | undefined; placeholder?: string | undefined; spellCheck?: Booleanish | undefined; tabIndex?: number | undefined; translate?: \"yes\" | \"no\" | undefined; radioGroup?: string | undefined; role?: React.AriaRole | undefined; about?: string | undefined; datatype?: string | undefined; inlist?: any; property?: string | undefined; resource?: string | undefined; typeof?: string | undefined; vocab?: string | undefined; autoCapitalize?: string | undefined; autoCorrect?: string | undefined; autoSave?: string | undefined; itemProp?: string | undefined; itemScope?: boolean | undefined; itemType?: string | undefined; itemID?: string | undefined; itemRef?: string | undefined; results?: number | undefined; security?: string | undefined; unselectable?: \"on\" | \"off\" | undefined; inputMode?: \"search\" | \"none\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | undefined; 'aria-activedescendant'?: string | undefined; 'aria-atomic'?: Booleanish | undefined; 'aria-autocomplete'?: \"none\" | \"list\" | \"inline\" | \"both\" | undefined; 'aria-busy'?: Booleanish | undefined; 'aria-checked'?: boolean | \"true\" | \"false\" | \"mixed\" | undefined; 'aria-colcount'?: number | undefined; 'aria-colindex'?: number | undefined; 'aria-colspan'?: number | undefined; 'aria-controls'?: string | undefined; 'aria-current'?: boolean | \"page\" | \"date\" | \"time\" | \"true\" | \"false\" | \"step\" | \"location\" | undefined; 'aria-describedby'?: string | undefined; 'aria-details'?: string | undefined; 'aria-disabled'?: Booleanish | undefined; 'aria-dropeffect'?: \"execute\" | \"link\" | \"none\" | \"copy\" | \"move\" | \"popup\" | undefined; 'aria-errormessage'?: string | undefined; 'aria-expanded'?: Booleanish | undefined; 'aria-flowto'?: string | undefined; 'aria-grabbed'?: Booleanish | undefined; 'aria-haspopup'?: boolean | \"dialog\" | \"menu\" | \"true\" | \"false\" | \"grid\" | \"listbox\" | \"tree\" | undefined; 'aria-hidden'?: Booleanish | undefined; 'aria-invalid'?: boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\" | undefined; 'aria-keyshortcuts'?: string | undefined; 'aria-labelledby'?: string | undefined; 'aria-level'?: number | undefined; 'aria-live'?: \"off\" | \"assertive\" | \"polite\" | undefined; 'aria-modal'?: Booleanish | undefined; 'aria-multiline'?: Booleanish | undefined; 'aria-multiselectable'?: Booleanish | undefined; 'aria-orientation'?: \"horizontal\" | \"vertical\" | undefined; 'aria-owns'?: string | undefined; 'aria-placeholder'?: string | undefined; 'aria-posinset'?: number | undefined; 'aria-pressed'?: boolean | \"true\" | \"false\" | \"mixed\" | undefined; 'aria-readonly'?: Booleanish | undefined; 'aria-relevant'?: \"text\" | \"all\" | \"additions\" | \"additions removals\" | \"additions text\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\" | undefined; 'aria-required'?: Booleanish | undefined; 'aria-roledescription'?: string | undefined; 'aria-rowcount'?: number | undefined; 'aria-rowindex'?: number | undefined; 'aria-rowspan'?: number | undefined; 'aria-selected'?: Booleanish | undefined; 'aria-setsize'?: number | undefined; 'aria-sort'?: \"none\" | \"ascending\" | \"descending\" | \"other\" | undefined; 'aria-valuemax'?: number | undefined; 'aria-valuemin'?: number | undefined; 'aria-valuenow'?: number | undefined; 'aria-valuetext'?: string | undefined; dangerouslySetInnerHTML?: { __html: string; } | undefined; onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined; onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined; onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined; onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined; onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined; onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined; onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined; onChange?: React.FormEventHandler<HTMLDivElement> | undefined; onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined; onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onInput?: React.FormEventHandler<HTMLDivElement> | undefined; onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onReset?: React.FormEventHandler<HTMLDivElement> | undefined; onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined; onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined; onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined; onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onError?: React.ReactEventHandler<HTMLDivElement> | undefined; onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined; onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined; onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined; onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined; onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined; onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined; onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined; onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPause?: React.ReactEventHandler<HTMLDivElement> | undefined; onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined; onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined; onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined; onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined; onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined; onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined; onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined; onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined; onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined; onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onClick?: React.MouseEventHandler<HTMLElement> | undefined; onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined; onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined; onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onDrag?: React.DragEventHandler<HTMLDivElement> | undefined; onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined; onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined; onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined; onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined; onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined; onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onDrop?: React.DragEventHandler<HTMLDivElement> | undefined; onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined; onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined; onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined; onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined; onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined; onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined; onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined; onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined; onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined; onScroll?: React.UIEventHandler<HTMLDivElement> | undefined; onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined; onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined; onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined; onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined; onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined; onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined; onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined; paddingSize?: \"m\" | \"none\" | \"s\" | \"xs\" | \"l\" | \"xl\" | undefined; href?: string | undefined; rel?: string | undefined; target?: string | undefined; icon?: React.ReactElement<",
          "EuiIconProps",
          ", string | React.JSXElementConstructor<any>> | null | undefined; hasBorder?: boolean | undefined; textAlign?: \"right\" | \"left\" | \"center\" | undefined; titleElement?: \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"p\" | \"span\" | undefined; titleSize?: \"s\" | \"xs\" | undefined; betaBadgeProps?: (",
          "CommonProps",
          " & ",
          "DisambiguateSet",
          "<(",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\">) | (",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\">), WithSpanProps> & WithSpanProps & { iconType?: ",
          "IconType",
          " | undefined; label: React.ReactNode; tooltipContent?: React.ReactNode; tooltipPosition?: ",
          "ToolTipPositions",
          " | undefined; anchorProps?: (",
          "CommonProps",
          " & React.HTMLAttributes<HTMLSpanElement>) | undefined; title?: string | undefined; color?: \"subdued\" | \"accent\" | \"hollow\" | undefined; size?: \"m\" | \"s\" | undefined; alignment?: \"middle\" | \"baseline\" | undefined; } & ",
          "DisambiguateSet",
          "<LabelAsNode, LabelAsString> & LabelAsString) | (",
          "CommonProps",
          " & ",
          "DisambiguateSet",
          "<(",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\">) | (",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\">), WithSpanProps> & WithSpanProps & { iconType?: ",
          "IconType",
          " | undefined; label: React.ReactNode; tooltipContent?: React.ReactNode; tooltipPosition?: ",
          "ToolTipPositions",
          " | undefined; anchorProps?: (",
          "CommonProps",
          " & React.HTMLAttributes<HTMLSpanElement>) | undefined; title?: string | undefined; color?: \"subdued\" | \"accent\" | \"hollow\" | undefined; size?: \"m\" | \"s\" | undefined; alignment?: \"middle\" | \"baseline\" | undefined; } & ",
          "DisambiguateSet",
          "<LabelAsString, LabelAsNode> & ",
          "DisambiguateSet",
          "<{ title: string; tooltipContent?: React.ReactNode; }, { tooltipContent: React.ReactNode; title?: string | undefined; }> & { tooltipContent: React.ReactNode; title?: string | undefined; } & { label: React.ReactNode; }) | (",
          "CommonProps",
          " & ",
          "DisambiguateSet",
          "<WithSpanProps, (",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\">) | (",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\">)> & ",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\"> & { iconType?: ",
          "IconType",
          " | undefined; label: React.ReactNode; tooltipContent?: React.ReactNode; tooltipPosition?: ",
          "ToolTipPositions",
          " | undefined; anchorProps?: (",
          "CommonProps",
          " & React.HTMLAttributes<HTMLSpanElement>) | undefined; title?: string | undefined; color?: \"subdued\" | \"accent\" | \"hollow\" | undefined; size?: \"m\" | \"s\" | undefined; alignment?: \"middle\" | \"baseline\" | undefined; } & ",
          "DisambiguateSet",
          "<LabelAsNode, LabelAsString> & LabelAsString) | (",
          "CommonProps",
          " & ",
          "DisambiguateSet",
          "<WithSpanProps, (",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\">) | (",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\">)> & ",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\"> & { iconType?: ",
          "IconType",
          " | undefined; label: React.ReactNode; tooltipContent?: React.ReactNode; tooltipPosition?: ",
          "ToolTipPositions",
          " | undefined; anchorProps?: (",
          "CommonProps",
          " & React.HTMLAttributes<HTMLSpanElement>) | undefined; title?: string | undefined; color?: \"subdued\" | \"accent\" | \"hollow\" | undefined; size?: \"m\" | \"s\" | undefined; alignment?: \"middle\" | \"baseline\" | undefined; } & ",
          "DisambiguateSet",
          "<LabelAsString, LabelAsNode> & ",
          "DisambiguateSet",
          "<{ title: string; tooltipContent?: React.ReactNode; }, { tooltipContent: React.ReactNode; title?: string | undefined; }> & { tooltipContent: React.ReactNode; title?: string | undefined; } & { label: React.ReactNode; }) | (",
          "CommonProps",
          " & ",
          "DisambiguateSet",
          "<WithSpanProps, (",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\">) | (",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\">)> & ",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\"> & { iconType?: ",
          "IconType",
          " | undefined; label: React.ReactNode; tooltipContent?: React.ReactNode; tooltipPosition?: ",
          "ToolTipPositions",
          " | undefined; anchorProps?: (",
          "CommonProps",
          " & React.HTMLAttributes<HTMLSpanElement>) | undefined; title?: string | undefined; color?: \"subdued\" | \"accent\" | \"hollow\" | undefined; size?: \"m\" | \"s\" | undefined; alignment?: \"middle\" | \"baseline\" | undefined; } & ",
          "DisambiguateSet",
          "<LabelAsString, LabelAsNode> & ",
          "DisambiguateSet",
          "<{ tooltipContent: React.ReactNode; title?: string | undefined; }, { title: string; tooltipContent?: React.ReactNode; }> & { title: string; tooltipContent?: React.ReactNode; } & { label: React.ReactNode; }) | (",
          "CommonProps",
          " & ",
          "DisambiguateSet",
          "<WithSpanProps, (",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\">) | (",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\">)> & ",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\"> & { iconType?: ",
          "IconType",
          " | undefined; label: React.ReactNode; tooltipContent?: React.ReactNode; tooltipPosition?: ",
          "ToolTipPositions",
          " | undefined; anchorProps?: (",
          "CommonProps",
          " & React.HTMLAttributes<HTMLSpanElement>) | undefined; title?: string | undefined; color?: \"subdued\" | \"accent\" | \"hollow\" | undefined; size?: \"m\" | \"s\" | undefined; alignment?: \"middle\" | \"baseline\" | undefined; } & ",
          "DisambiguateSet",
          "<LabelAsNode, LabelAsString> & LabelAsString) | (",
          "CommonProps",
          " & ",
          "DisambiguateSet",
          "<WithSpanProps, (",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\">) | (",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\">)> & ",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\"> & { iconType?: ",
          "IconType",
          " | undefined; label: React.ReactNode; tooltipContent?: React.ReactNode; tooltipPosition?: ",
          "ToolTipPositions",
          " | undefined; anchorProps?: (",
          "CommonProps",
          " & React.HTMLAttributes<HTMLSpanElement>) | undefined; title?: string | undefined; color?: \"subdued\" | \"accent\" | \"hollow\" | undefined; size?: \"m\" | \"s\" | undefined; alignment?: \"middle\" | \"baseline\" | undefined; } & ",
          "DisambiguateSet",
          "<LabelAsString, LabelAsNode> & ",
          "DisambiguateSet",
          "<{ title: string; tooltipContent?: React.ReactNode; }, { tooltipContent: React.ReactNode; title?: string | undefined; }> & { tooltipContent: React.ReactNode; title?: string | undefined; } & { label: React.ReactNode; }) | (",
          "CommonProps",
          " & ",
          "DisambiguateSet",
          "<WithSpanProps, (",
          "DisambiguateSet",
          "<WithButtonProps, WithAnchorProps> & { href: string; target?: string | undefined; rel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLAnchorElement>, \"color\" | \"onClick\" | \"href\">) | (",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\">)> & ",
          "DisambiguateSet",
          "<WithAnchorProps, WithButtonProps> & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; onClickAriaLabel?: string | undefined; } & Omit<React.HTMLAttributes<HTMLButtonElement>, \"color\" | \"onClick\"> & { iconType?: ",
          "IconType",
          " | undefined; label: React.ReactNode; tooltipContent?: React.ReactNode; tooltipPosition?: ",
          "ToolTipPositions",
          " | undefined; anchorProps?: (",
          "CommonProps",
          " & React.HTMLAttributes<HTMLSpanElement>) | undefined; title?: string | undefined; color?: \"subdued\" | \"accent\" | \"hollow\" | undefined; size?: \"m\" | \"s\" | undefined; alignment?: \"middle\" | \"baseline\" | undefined; } & ",
          "DisambiguateSet",
          "<LabelAsString, LabelAsNode> & ",
          "DisambiguateSet",
          "<{ tooltipContent: React.ReactNode; title?: string | undefined; }, { title: string; tooltipContent?: React.ReactNode; }> & { title: string; tooltipContent?: React.ReactNode; } & { label: React.ReactNode; }) | undefined; display?: \"warning\" | \"success\" | \"plain\" | \"subdued\" | \"primary\" | \"accent\" | \"danger\" | \"transparent\" | undefined; selectable?: (",
          "DisambiguateSet",
          "<",
          "EuiButtonPropsForAnchor",
          ", ",
          "EuiButtonPropsForButton",
          "> & ",
          "EuiButtonProps",
          " & { onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; } & React.ButtonHTMLAttributes<HTMLButtonElement> & { buttonRef?: React.Ref<HTMLButtonElement> | undefined; }) | (",
          "DisambiguateSet",
          "<",
          "EuiButtonPropsForButton",
          ", ",
          "EuiButtonPropsForAnchor",
          "> & ",
          "EuiButtonProps",
          " & { href?: string | undefined; onClick?: React.MouseEventHandler<HTMLAnchorElement> | undefined; } & React.AnchorHTMLAttributes<HTMLAnchorElement> & { buttonRef?: React.Ref<HTMLAnchorElement> | undefined; }) | undefined; }"
        ],
        "path": "packages/shared-ux/card/no_data/types/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/shared-ux-card-no-data",
        "id": "def-common.NoDataCardServices",
        "type": "Type",
        "tags": [],
        "label": "NoDataCardServices",
        "description": [
          "\nServices that are consumed by this component and any dependencies."
        ],
        "signature": [
          "Services",
          " & ",
          "RedirectAppLinksServices"
        ],
        "path": "packages/shared-ux/card/no_data/types/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  }
}