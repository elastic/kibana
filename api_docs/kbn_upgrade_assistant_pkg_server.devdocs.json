{
  "id": "@kbn/upgrade-assistant-pkg-server",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.esIndicesStateCheck",
        "type": "Function",
        "tags": [],
        "label": "esIndicesStateCheck",
        "description": [],
        "signature": [
          "(esClient: ",
          "ElasticsearchClient",
          ", indices: string[]) => Promise<StatusCheckResult>"
        ],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/es_indices_state_check.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.esIndicesStateCheck.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "ElasticsearchClient"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/es_indices_state_check.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.esIndicesStateCheck.$2",
            "type": "Array",
            "tags": [],
            "label": "indices",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/es_indices_state_check.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.getIndexState",
        "type": "Function",
        "tags": [],
        "label": "getIndexState",
        "description": [
          "\nThrows if the index name is not found in the resolved indices response\n"
        ],
        "signature": [
          "(indexName: string, resolvedResponse: ",
          {
            "pluginId": "@kbn/upgrade-assistant-pkg-server",
            "scope": "server",
            "docId": "kibKbnUpgradeAssistantPkgServerPluginApi",
            "section": "def-server.ResolveIndexResponseFromES",
            "text": "ResolveIndexResponseFromES"
          },
          ") => \"open\" | \"closed\""
        ],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/get_index_state.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.getIndexState.$1",
            "type": "string",
            "tags": [],
            "label": "indexName",
            "description": [
              "Assume this is an index name, not an alias"
            ],
            "signature": [
              "string"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/get_index_state.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.getIndexState.$2",
            "type": "Object",
            "tags": [],
            "label": "resolvedResponse",
            "description": [
              "The response from _resolve/index/<indices>"
            ],
            "signature": [
              {
                "pluginId": "@kbn/upgrade-assistant-pkg-server",
                "scope": "server",
                "docId": "kibKbnUpgradeAssistantPkgServerPluginApi",
                "section": "def-server.ResolveIndexResponseFromES",
                "text": "ResolveIndexResponseFromES"
              }
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/get_index_state.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.getReindexWarnings",
        "type": "Function",
        "tags": [],
        "label": "getReindexWarnings",
        "description": [
          "\nReturns an array of warnings that should be displayed to user before reindexing begins."
        ],
        "signature": [
          "(flatSettings: ",
          {
            "pluginId": "@kbn/upgrade-assistant-pkg-server",
            "scope": "server",
            "docId": "kibKbnUpgradeAssistantPkgServerPluginApi",
            "section": "def-server.FlatSettings",
            "text": "FlatSettings"
          },
          ", kibanaMajorVersion: number) => ",
          {
            "pluginId": "@kbn/upgrade-assistant-pkg-server",
            "scope": "server",
            "docId": "kibKbnUpgradeAssistantPkgServerPluginApi",
            "section": "def-server.IndexWarning",
            "text": "IndexWarning"
          },
          "[]"
        ],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/index_settings.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.getReindexWarnings.$1",
            "type": "Object",
            "tags": [],
            "label": "flatSettings",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/upgrade-assistant-pkg-server",
                "scope": "server",
                "docId": "kibKbnUpgradeAssistantPkgServerPluginApi",
                "section": "def-server.FlatSettings",
                "text": "FlatSettings"
              }
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/index_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.getReindexWarnings.$2",
            "type": "number",
            "tags": [],
            "label": "kibanaMajorVersion",
            "description": [],
            "signature": [
              "number"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/index_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.getRollupJobByIndexName",
        "type": "Function",
        "tags": [],
        "label": "getRollupJobByIndexName",
        "description": [],
        "signature": [
          "(esClient: ",
          "ElasticsearchClient",
          ", log: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "common",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-common.Logger",
            "text": "Logger"
          },
          ", index: string) => Promise<string | undefined>"
        ],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/rollup_job.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.getRollupJobByIndexName.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "ElasticsearchClient"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/rollup_job.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.getRollupJobByIndexName.$2",
            "type": "Object",
            "tags": [],
            "label": "log",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              }
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/rollup_job.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.getRollupJobByIndexName.$3",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/rollup_job.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.versionCheckHandlerWrapper",
        "type": "Function",
        "tags": [],
        "label": "versionCheckHandlerWrapper",
        "description": [],
        "signature": [
          "(kibanaMajorVersion: number) => <P, Q, B>(handler: ",
          "RequestHandler",
          "<P, Q, B, ",
          "RequestHandlerContext",
          ", any, ",
          "KibanaResponseFactory",
          ">) => (ctx: ",
          "RequestHandlerContext",
          ", request: ",
          "KibanaRequest",
          "<P, Q, B, any>, response: ",
          "KibanaResponseFactory",
          ") => Promise<",
          "IKibanaResponse",
          "<any>>"
        ],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/es_version_precheck.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.versionCheckHandlerWrapper.$1",
            "type": "number",
            "tags": [],
            "label": "kibanaMajorVersion",
            "description": [],
            "signature": [
              "number"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/es_version_precheck.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.FlatSettings",
        "type": "Interface",
        "tags": [],
        "label": "FlatSettings",
        "description": [],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.FlatSettings.settings",
            "type": "CompoundType",
            "tags": [],
            "label": "settings",
            "description": [],
            "signature": [
              "IndicesIndexSettings",
              " | undefined"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.FlatSettings.mappings",
            "type": "Object",
            "tags": [],
            "label": "mappings",
            "description": [],
            "signature": [
              "{ properties?: ",
              "MappingProperties",
              " | undefined; _meta?: MetaProperties | undefined; } | undefined"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.IndexWarning",
        "type": "Interface",
        "tags": [],
        "label": "IndexWarning",
        "description": [],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.IndexWarning.warningType",
            "type": "CompoundType",
            "tags": [],
            "label": "warningType",
            "description": [],
            "signature": [
              "\"indexSetting\" | \"replaceIndexWithAlias\" | \"makeIndexReadonly\""
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.IndexWarning.flow",
            "type": "CompoundType",
            "tags": [],
            "label": "flow",
            "description": [],
            "signature": [
              "\"reindex\" | \"all\" | \"readonly\""
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.IndexWarning.meta",
            "type": "Object",
            "tags": [],
            "label": "meta",
            "description": [
              "\nOptional metadata for deprecations\n"
            ],
            "signature": [
              "{ [key: string]: string | boolean | string[]; } | undefined"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.ResolveIndexResponseFromES",
        "type": "Interface",
        "tags": [],
        "label": "ResolveIndexResponseFromES",
        "description": [],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.ResolveIndexResponseFromES.indices",
            "type": "Array",
            "tags": [],
            "label": "indices",
            "description": [],
            "signature": [
              "{ name: string; attributes: (\"hidden\" | \"open\" | \"closed\" | \"frozen\")[]; aliases?: string[] | undefined; data_stream?: string | undefined; }[]"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.ResolveIndexResponseFromES.aliases",
            "type": "Array",
            "tags": [],
            "label": "aliases",
            "description": [],
            "signature": [
              "{ name: string; indices: string[]; }[]"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.ResolveIndexResponseFromES.data_streams",
            "type": "Array",
            "tags": [],
            "label": "data_streams",
            "description": [],
            "signature": [
              "{ name: string; backing_indices: string[]; timestamp_field: string; }[]"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.GetRollupJobByIndexNameType",
        "type": "Type",
        "tags": [],
        "label": "GetRollupJobByIndexNameType",
        "description": [],
        "signature": [
          "(esClient: ",
          "ElasticsearchClient",
          ", log: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "common",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-common.Logger",
            "text": "Logger"
          },
          ", index: string) => Promise<string | undefined>"
        ],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/rollup_job.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.GetRollupJobByIndexNameType.$1",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [],
            "signature": [
              "{ create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; helpers: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kStreams]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; asyncSearch: ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; capabilities: { (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TODO",
              ">; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TODO",
              ", unknown>>; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TODO",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; cluster: ",
              "default",
              "; connector: ",
              "default",
              "; count: { (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; eql: ",
              "default",
              "; esql: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params?: ",
              "FieldCapsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; healthReport: { (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "HealthReportResponse",
              ">; (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "HealthReportResponse",
              ", unknown>>; (this: That, params?: ",
              "HealthReportRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "HealthReportResponse",
              ">; }; ilm: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; indices: ",
              "default",
              "; inference: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TODO",
              ">; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TODO",
              ", unknown>>; (this: That, params?: ",
              "TODO",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TODO",
              ">; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; monitoring: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; profiling: ",
              "default",
              "; putScript: { (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; queryRules: ",
              "default",
              "; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchApplication: ",
              "default",
              "; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; security: ",
              "default",
              "; shutdown: ",
              "default",
              "; simulate: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; streams: ",
              "default",
              "; synonyms: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/rollup_job.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.GetRollupJobByIndexNameType.$2",
            "type": "Object",
            "tags": [],
            "label": "log",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              }
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/rollup_job.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.GetRollupJobByIndexNameType.$3",
            "type": "string",
            "tags": [],
            "label": "index",
            "description": [],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/rollup_job.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.IndexWarningType",
        "type": "Type",
        "tags": [],
        "label": "IndexWarningType",
        "description": [],
        "signature": [
          "\"indexSetting\" | \"replaceIndexWithAlias\" | \"makeIndexReadonly\""
        ],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.REINDEX_OP_TYPE",
        "type": "string",
        "tags": [],
        "label": "REINDEX_OP_TYPE",
        "description": [],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.mlSavedObjectType",
        "type": "Object",
        "tags": [],
        "label": "mlSavedObjectType",
        "description": [],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.mlSavedObjectType.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.mlSavedObjectType.hidden",
            "type": "boolean",
            "tags": [],
            "label": "hidden",
            "description": [],
            "signature": [
              "true"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.mlSavedObjectType.namespaceType",
            "type": "string",
            "tags": [],
            "label": "namespaceType",
            "description": [],
            "signature": [
              "\"agnostic\""
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.mlSavedObjectType.mappings",
            "type": "Object",
            "tags": [],
            "label": "mappings",
            "description": [],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                "id": "def-server.mlSavedObjectType.mappings.dynamic",
                "type": "boolean",
                "tags": [],
                "label": "dynamic",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                "id": "def-server.mlSavedObjectType.mappings.properties",
                "type": "Object",
                "tags": [],
                "label": "properties",
                "description": [],
                "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                    "id": "def-server.mlSavedObjectType.mappings.properties.snapshotId",
                    "type": "Object",
                    "tags": [],
                    "label": "snapshotId",
                    "description": [],
                    "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
                    "deprecated": false,
                    "trackAdoption": false,
                    "children": [
                      {
                        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                        "id": "def-server.mlSavedObjectType.mappings.properties.snapshotId.type",
                        "type": "string",
                        "tags": [],
                        "label": "type",
                        "description": [],
                        "signature": [
                          "\"text\""
                        ],
                        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
                        "deprecated": false,
                        "trackAdoption": false
                      },
                      {
                        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                        "id": "def-server.mlSavedObjectType.mappings.properties.snapshotId.fields",
                        "type": "Object",
                        "tags": [],
                        "label": "fields",
                        "description": [],
                        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
                        "deprecated": false,
                        "trackAdoption": false,
                        "children": [
                          {
                            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                            "id": "def-server.mlSavedObjectType.mappings.properties.snapshotId.fields.keyword",
                            "type": "Object",
                            "tags": [],
                            "label": "keyword",
                            "description": [],
                            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
                            "deprecated": false,
                            "trackAdoption": false,
                            "children": [
                              {
                                "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                                "id": "def-server.mlSavedObjectType.mappings.properties.snapshotId.fields.keyword.type",
                                "type": "string",
                                "tags": [],
                                "label": "type",
                                "description": [],
                                "signature": [
                                  "\"keyword\""
                                ],
                                "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
                                "deprecated": false,
                                "trackAdoption": false
                              },
                              {
                                "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                                "id": "def-server.mlSavedObjectType.mappings.properties.snapshotId.fields.keyword.ignore_above",
                                "type": "number",
                                "tags": [],
                                "label": "ignore_above",
                                "description": [],
                                "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/ml_upgrade_operation_saved_object_type.ts",
                                "deprecated": false,
                                "trackAdoption": false
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
        "id": "def-server.reindexOperationSavedObjectType",
        "type": "Object",
        "tags": [],
        "label": "reindexOperationSavedObjectType",
        "description": [],
        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.reindexOperationSavedObjectType.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.reindexOperationSavedObjectType.hidden",
            "type": "boolean",
            "tags": [],
            "label": "hidden",
            "description": [],
            "signature": [
              "true"
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.reindexOperationSavedObjectType.namespaceType",
            "type": "string",
            "tags": [],
            "label": "namespaceType",
            "description": [],
            "signature": [
              "\"agnostic\""
            ],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
            "id": "def-server.reindexOperationSavedObjectType.mappings",
            "type": "Object",
            "tags": [],
            "label": "mappings",
            "description": [],
            "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                "id": "def-server.reindexOperationSavedObjectType.mappings.dynamic",
                "type": "boolean",
                "tags": [],
                "label": "dynamic",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                "id": "def-server.reindexOperationSavedObjectType.mappings.properties",
                "type": "Object",
                "tags": [],
                "label": "properties",
                "description": [],
                "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                    "id": "def-server.reindexOperationSavedObjectType.mappings.properties.indexName",
                    "type": "Object",
                    "tags": [],
                    "label": "indexName",
                    "description": [],
                    "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
                    "deprecated": false,
                    "trackAdoption": false,
                    "children": [
                      {
                        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                        "id": "def-server.reindexOperationSavedObjectType.mappings.properties.indexName.type",
                        "type": "string",
                        "tags": [],
                        "label": "type",
                        "description": [],
                        "signature": [
                          "\"keyword\""
                        ],
                        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
                        "deprecated": false,
                        "trackAdoption": false
                      }
                    ]
                  },
                  {
                    "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                    "id": "def-server.reindexOperationSavedObjectType.mappings.properties.status",
                    "type": "Object",
                    "tags": [],
                    "label": "status",
                    "description": [],
                    "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
                    "deprecated": false,
                    "trackAdoption": false,
                    "children": [
                      {
                        "parentPluginId": "@kbn/upgrade-assistant-pkg-server",
                        "id": "def-server.reindexOperationSavedObjectType.mappings.properties.status.type",
                        "type": "string",
                        "tags": [],
                        "label": "type",
                        "description": [],
                        "signature": [
                          "\"integer\""
                        ],
                        "path": "x-pack/platform/packages/private/upgrade-assistant/server/src/saved_object_types/reindex_operation_saved_object_type.ts",
                        "deprecated": false,
                        "trackAdoption": false
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ]
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}