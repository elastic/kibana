{
  "id": "workflowsManagement",
  "client": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "workflowsManagement",
        "id": "def-public.WorkflowExecution",
        "type": "Function",
        "tags": [],
        "label": "WorkflowExecution",
        "description": [],
        "signature": [
          "({ workflowExecutionId, fields, }: WorkflowExecutionProps) => React.JSX.Element"
        ],
        "path": "src/platform/plugins/shared/workflows_management/public/features/workflow_detail/ui/workflow_execution.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "workflowsManagement",
            "id": "def-public.WorkflowExecution.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  workflowExecutionId,\n  fields = ['stepId', 'workflowId', 'status', 'executionTimeMs'],\n}",
            "description": [],
            "signature": [
              "WorkflowExecutionProps"
            ],
            "path": "src/platform/plugins/shared/workflows_management/public/features/workflow_detail/ui/workflow_execution.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": [],
    "setup": {
      "parentPluginId": "workflowsManagement",
      "id": "def-public.WorkflowsPluginSetup",
      "type": "Interface",
      "tags": [],
      "label": "WorkflowsPluginSetup",
      "description": [],
      "path": "src/platform/plugins/shared/workflows_management/public/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "workflowsManagement",
      "id": "def-public.WorkflowsPluginStart",
      "type": "Interface",
      "tags": [],
      "label": "WorkflowsPluginStart",
      "description": [],
      "path": "src/platform/plugins/shared/workflows_management/public/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": [],
    "setup": {
      "parentPluginId": "workflowsManagement",
      "id": "def-server.WorkflowsPluginSetup",
      "type": "Interface",
      "tags": [],
      "label": "WorkflowsPluginSetup",
      "description": [],
      "path": "src/platform/plugins/shared/workflows_management/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "workflowsManagement",
      "id": "def-server.WorkflowsPluginStart",
      "type": "Interface",
      "tags": [],
      "label": "WorkflowsPluginStart",
      "description": [],
      "path": "src/platform/plugins/shared/workflows_management/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "workflowsManagement",
          "id": "def-server.WorkflowsPluginStart.runWorkflow",
          "type": "Function",
          "tags": [],
          "label": "runWorkflow",
          "description": [],
          "signature": [
            "(workflow: ",
            {
              "pluginId": "@kbn/workflows",
              "scope": "common",
              "docId": "kibKbnWorkflowsPluginApi",
              "section": "def-common.WorkflowExecutionEngineModel",
              "text": "WorkflowExecutionEngineModel"
            },
            ", params: Record<string, any>) => Promise<string>"
          ],
          "path": "src/platform/plugins/shared/workflows_management/server/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "workflowsManagement",
              "id": "def-server.WorkflowsPluginStart.runWorkflow.$1",
              "type": "Object",
              "tags": [],
              "label": "workflow",
              "description": [],
              "signature": [
                {
                  "pluginId": "@kbn/workflows",
                  "scope": "common",
                  "docId": "kibKbnWorkflowsPluginApi",
                  "section": "def-common.WorkflowExecutionEngineModel",
                  "text": "WorkflowExecutionEngineModel"
                }
              ],
              "path": "src/platform/plugins/shared/workflows_management/server/types.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            },
            {
              "parentPluginId": "workflowsManagement",
              "id": "def-server.WorkflowsPluginStart.runWorkflow.$2",
              "type": "Object",
              "tags": [],
              "label": "params",
              "description": [],
              "signature": [
                "Record<string, any>"
              ],
              "path": "src/platform/plugins/shared/workflows_management/server/types.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "workflowsManagement",
        "id": "def-common.PLUGIN_ID",
        "type": "string",
        "tags": [],
        "label": "PLUGIN_ID",
        "description": [],
        "signature": [
          "\"workflows\""
        ],
        "path": "src/platform/plugins/shared/workflows_management/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "workflowsManagement",
        "id": "def-common.PLUGIN_NAME",
        "type": "string",
        "tags": [],
        "label": "PLUGIN_NAME",
        "description": [],
        "signature": [
          "\"Workflows\""
        ],
        "path": "src/platform/plugins/shared/workflows_management/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "workflowsManagement",
        "id": "def-common.WORKFLOW_ZOD_SCHEMA",
        "type": "CompoundType",
        "tags": [],
        "label": "WORKFLOW_ZOD_SCHEMA",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ version: Zod.ZodDefault<Zod.ZodLiteral<\"1\">>; workflow: Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodOptional<Zod.ZodString>; description: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodString>>; settings: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>>; enabled: Zod.ZodOptional<Zod.ZodDefault<Zod.ZodBoolean>>; tags: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>>; triggers: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.detectionRule\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; }, { type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.manual\"; enabled: boolean; }, { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; }>]>, \"many\">>; inputs: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>>; consts: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>>; steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }>]>>, \"many\">>; }, { steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { version: \"1\"; workflow: { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }, { workflow: { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; version?: \"1\" | undefined; }> | Zod.ZodObject<{ version: Zod.ZodDefault<Zod.ZodLiteral<\"1\">>; workflow: Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; settings: Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>; enabled: Zod.ZodDefault<Zod.ZodBoolean>; tags: Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>; triggers: Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.detectionRule\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; }, { type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.manual\"; enabled: boolean; }, { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; }>]>, \"many\">; inputs: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>; consts: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>; steps: Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }>]>>, \"many\">; }, { steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { name: string; enabled: boolean; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name: string; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[]; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { version: \"1\"; workflow: { name: string; enabled: boolean; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }, { workflow: { name: string; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[]; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; version?: \"1\" | undefined; }>"
        ],
        "path": "src/platform/plugins/shared/workflows_management/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "workflowsManagement",
        "id": "def-common.WORKFLOW_ZOD_SCHEMA_LOOSE",
        "type": "CompoundType",
        "tags": [],
        "label": "WORKFLOW_ZOD_SCHEMA_LOOSE",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ version: Zod.ZodDefault<Zod.ZodLiteral<\"1\">>; workflow: Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodOptional<Zod.ZodString>; description: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodString>>; settings: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>>; enabled: Zod.ZodOptional<Zod.ZodDefault<Zod.ZodBoolean>>; tags: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>>; triggers: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.detectionRule\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; }, { type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.manual\"; enabled: boolean; }, { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; }>]>, \"many\">>; inputs: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>>; consts: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>>; steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }>]>>, \"many\">>; }, { steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { version: \"1\"; workflow: { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }, { workflow: { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; version?: \"1\" | undefined; }> | Zod.ZodObject<{ version: Zod.ZodDefault<Zod.ZodLiteral<\"1\">>; workflow: Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; settings: Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>; enabled: Zod.ZodDefault<Zod.ZodBoolean>; tags: Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>; triggers: Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.detectionRule\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; }, { type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.manual\"; enabled: boolean; }, { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; }>]>, \"many\">; inputs: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>; consts: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>; steps: Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }>]>>, \"many\">; }, { steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { name: string; enabled: boolean; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name: string; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[]; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { version: \"1\"; workflow: { name: string; enabled: boolean; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }, { workflow: { name: string; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[]; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; version?: \"1\" | undefined; }>"
        ],
        "path": "src/platform/plugins/shared/workflows_management/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "workflowsManagement",
        "id": "def-common.WORKFLOWS_EXECUTION_LOGS_INDEX",
        "type": "string",
        "tags": [],
        "label": "WORKFLOWS_EXECUTION_LOGS_INDEX",
        "description": [],
        "signature": [
          "\".kibana-workflow-execution-logs\""
        ],
        "path": "src/platform/plugins/shared/workflows_management/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "workflowsManagement",
        "id": "def-common.WORKFLOWS_EXECUTIONS_INDEX",
        "type": "string",
        "tags": [],
        "label": "WORKFLOWS_EXECUTIONS_INDEX",
        "description": [],
        "signature": [
          "\".kibana-workflow-executions\""
        ],
        "path": "src/platform/plugins/shared/workflows_management/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "workflowsManagement",
        "id": "def-common.WORKFLOWS_STEP_EXECUTIONS_INDEX",
        "type": "string",
        "tags": [],
        "label": "WORKFLOWS_STEP_EXECUTIONS_INDEX",
        "description": [],
        "signature": [
          "\".kibana-workflow-step-executions\""
        ],
        "path": "src/platform/plugins/shared/workflows_management/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  }
}