{
  "id": "@kbn/core-elasticsearch-server",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ElasticsearchClientConfig",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchClientConfig",
        "description": [
          "\nConfiguration options to be used to create a {@link IClusterClient | cluster client}\n"
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.customHeaders",
            "type": "Object",
            "tags": [],
            "label": "customHeaders",
            "description": [],
            "signature": [
              "{ [x: string]: string; }"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.requestHeadersWhitelist",
            "type": "Array",
            "tags": [],
            "label": "requestHeadersWhitelist",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.maxSockets",
            "type": "number",
            "tags": [],
            "label": "maxSockets",
            "description": [],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.maxIdleSockets",
            "type": "number",
            "tags": [],
            "label": "maxIdleSockets",
            "description": [],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.idleSocketTimeout",
            "type": "Object",
            "tags": [],
            "label": "idleSocketTimeout",
            "description": [],
            "signature": [
              "moment.Duration"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.compression",
            "type": "boolean",
            "tags": [],
            "label": "compression",
            "description": [],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.sniffOnStart",
            "type": "boolean",
            "tags": [],
            "label": "sniffOnStart",
            "description": [],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.sniffOnConnectionFault",
            "type": "boolean",
            "tags": [],
            "label": "sniffOnConnectionFault",
            "description": [],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.sniffInterval",
            "type": "CompoundType",
            "tags": [],
            "label": "sniffInterval",
            "description": [],
            "signature": [
              "false | moment.Duration"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.username",
            "type": "string",
            "tags": [],
            "label": "username",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.password",
            "type": "string",
            "tags": [],
            "label": "password",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.serviceAccountToken",
            "type": "string",
            "tags": [],
            "label": "serviceAccountToken",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.hosts",
            "type": "Array",
            "tags": [],
            "label": "hosts",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.keepAlive",
            "type": "CompoundType",
            "tags": [],
            "label": "keepAlive",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.pingTimeout",
            "type": "CompoundType",
            "tags": [],
            "label": "pingTimeout",
            "description": [],
            "signature": [
              "number | moment.Duration | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.requestTimeout",
            "type": "CompoundType",
            "tags": [],
            "label": "requestTimeout",
            "description": [],
            "signature": [
              "number | moment.Duration | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.caFingerprint",
            "type": "string",
            "tags": [],
            "label": "caFingerprint",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientConfig.ssl",
            "type": "Object",
            "tags": [],
            "label": "ssl",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.ElasticsearchClientSslConfig",
                "text": "ElasticsearchClientSslConfig"
              },
              " | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ElasticsearchClientSslConfig",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchClientSslConfig",
        "description": [],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientSslConfig.verificationMode",
            "type": "CompoundType",
            "tags": [],
            "label": "verificationMode",
            "description": [],
            "signature": [
              "\"none\" | \"full\" | \"certificate\" | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientSslConfig.certificate",
            "type": "string",
            "tags": [],
            "label": "certificate",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientSslConfig.certificateAuthorities",
            "type": "Array",
            "tags": [],
            "label": "certificateAuthorities",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientSslConfig.key",
            "type": "string",
            "tags": [],
            "label": "key",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientSslConfig.keyPassphrase",
            "type": "string",
            "tags": [],
            "label": "keyPassphrase",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchClientSslConfig.alwaysPresentCertificate",
            "type": "CompoundType",
            "tags": [],
            "label": "alwaysPresentCertificate",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client_config.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ElasticsearchConfigPreboot",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchConfigPreboot",
        "description": [
          "\nA limited set of Elasticsearch configuration entries exposed to the `preboot` plugins at `setup`.\n"
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchConfigPreboot.hosts",
            "type": "Array",
            "tags": [],
            "label": "hosts",
            "description": [
              "\nHosts that the client will connect to. If sniffing is enabled, this list will\nbe used as seeds to discover the rest of your cluster."
            ],
            "signature": [
              "string[]"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchConfigPreboot.credentialsSpecified",
            "type": "boolean",
            "tags": [],
            "label": "credentialsSpecified",
            "description": [
              "\nIndicates whether Elasticsearch configuration includes credentials (`username`, `password` or `serviceAccountToken`)."
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ElasticsearchRequestHandlerContext",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchRequestHandlerContext",
        "description": [
          "\nCore's `elasticsearch` request handler context."
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/request_handler_context.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchRequestHandlerContext.client",
            "type": "Object",
            "tags": [],
            "label": "client",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.IScopedClusterClient",
                "text": "IScopedClusterClient"
              }
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/request_handler_context.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ElasticsearchServicePreboot",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchServicePreboot",
        "description": [],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchServicePreboot.config",
            "type": "Object",
            "tags": [],
            "label": "config",
            "description": [
              "\nA limited set of Elasticsearch configuration entries.\n"
            ],
            "signature": [
              "{ readonly hosts: string[]; readonly credentialsSpecified: boolean; }"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchServicePreboot.createClient",
            "type": "Function",
            "tags": [],
            "label": "createClient",
            "description": [
              "\nCreate application specific Elasticsearch cluster API client with customized config. See {@link IClusterClient}.\n"
            ],
            "signature": [
              "(type: string, clientConfig?: Partial<",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.ElasticsearchClientConfig",
                "text": "ElasticsearchClientConfig"
              },
              "> | undefined) => ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.ICustomClusterClient",
                "text": "ICustomClusterClient"
              }
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-server",
                "id": "def-server.ElasticsearchServicePreboot.createClient.$1",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [
                  "Unique identifier of the client"
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-elasticsearch-server",
                "id": "def-server.ElasticsearchServicePreboot.createClient.$2",
                "type": "Object",
                "tags": [],
                "label": "clientConfig",
                "description": [
                  "A config consists of Elasticsearch JS client options and\nvalid sub-set of Elasticsearch service config.\nWe fill all the missing properties in the `clientConfig` using the default\nElasticsearch config so that we don't depend on default values set and\ncontrolled by underlying Elasticsearch JS client.\nWe don't run validation against the passed config and expect it to be valid."
                ],
                "signature": [
                  "Partial<",
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "server",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-server.ElasticsearchClientConfig",
                    "text": "ElasticsearchClientConfig"
                  },
                  "> | undefined"
                ],
                "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ElasticsearchServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchServiceSetup",
        "description": [],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchServiceSetup.setUnauthorizedErrorHandler",
            "type": "Function",
            "tags": [],
            "label": "setUnauthorizedErrorHandler",
            "description": [
              "\nRegister a handler that will be called when unauthorized (401) errors are returned from any API\ncall to elasticsearch performed on behalf of a user via a {@link IScopedClusterClient | scoped cluster client}.\n"
            ],
            "signature": [
              "(handler: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.UnauthorizedErrorHandler",
                "text": "UnauthorizedErrorHandler"
              },
              ") => void"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-server",
                "id": "def-server.ElasticsearchServiceSetup.setUnauthorizedErrorHandler.$1",
                "type": "Function",
                "tags": [],
                "label": "handler",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "server",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-server.UnauthorizedErrorHandler",
                    "text": "UnauthorizedErrorHandler"
                  }
                ],
                "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchServiceSetup.legacy",
            "type": "Object",
            "tags": [
              "deprecated"
            ],
            "label": "legacy",
            "description": [],
            "signature": [
              "{ readonly config$: ",
              "Observable",
              "<",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.IElasticsearchConfig",
                "text": "IElasticsearchConfig"
              },
              ">; }"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
            "deprecated": true,
            "trackAdoption": false,
            "references": [
              {
                "plugin": "@kbn/core-elasticsearch-server-internal",
                "path": "packages/core/elasticsearch/core-elasticsearch-server-internal/src/elasticsearch_service.ts"
              },
              {
                "plugin": "@kbn/core-plugins-server-internal",
                "path": "packages/core/plugins/core-plugins-server-internal/src/plugin_context.ts"
              },
              {
                "plugin": "@kbn/core-plugins-server-internal",
                "path": "packages/core/plugins/core-plugins-server-internal/src/plugin_context.ts"
              },
              {
                "plugin": "console",
                "path": "src/plugins/console/server/plugin.ts"
              },
              {
                "plugin": "@kbn/core-elasticsearch-server-internal",
                "path": "packages/core/elasticsearch/core-elasticsearch-server-internal/src/elasticsearch_service.test.ts"
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ElasticsearchServiceStart",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchServiceStart",
        "description": [],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchServiceStart.client",
            "type": "Object",
            "tags": [],
            "label": "client",
            "description": [
              "\nA pre-configured {@link IClusterClient | Elasticsearch client}\n"
            ],
            "signature": [
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.IClusterClient",
                "text": "IClusterClient"
              }
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchServiceStart.createClient",
            "type": "Function",
            "tags": [],
            "label": "createClient",
            "description": [
              "\nCreate application specific Elasticsearch cluster API client with customized config. See {@link IClusterClient}.\n"
            ],
            "signature": [
              "(type: string, clientConfig?: Partial<",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.ElasticsearchClientConfig",
                "text": "ElasticsearchClientConfig"
              },
              "> | undefined) => ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.ICustomClusterClient",
                "text": "ICustomClusterClient"
              }
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-server",
                "id": "def-server.ElasticsearchServiceStart.createClient.$1",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [
                  "Unique identifier of the client"
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/core-elasticsearch-server",
                "id": "def-server.ElasticsearchServiceStart.createClient.$2",
                "type": "Object",
                "tags": [],
                "label": "clientConfig",
                "description": [
                  "A config consists of Elasticsearch JS client options and\nvalid sub-set of Elasticsearch service config.\nWe fill all the missing properties in the `clientConfig` using the default\nElasticsearch config so that we don't depend on default values set and\ncontrolled by underlying Elasticsearch JS client.\nWe don't run validation against the passed config and expect it to be valid."
                ],
                "signature": [
                  "Partial<",
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "server",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-server.ElasticsearchClientConfig",
                    "text": "ElasticsearchClientConfig"
                  },
                  "> | undefined"
                ],
                "path": "packages/core/elasticsearch/core-elasticsearch-server/src/contracts.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ElasticsearchSslConfig",
        "type": "Interface",
        "tags": [],
        "label": "ElasticsearchSslConfig",
        "description": [],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchSslConfig.verificationMode",
            "type": "CompoundType",
            "tags": [],
            "label": "verificationMode",
            "description": [],
            "signature": [
              "\"none\" | \"full\" | \"certificate\""
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchSslConfig.certificate",
            "type": "string",
            "tags": [],
            "label": "certificate",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchSslConfig.certificateAuthorities",
            "type": "Array",
            "tags": [],
            "label": "certificateAuthorities",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchSslConfig.key",
            "type": "string",
            "tags": [],
            "label": "key",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchSslConfig.keyPassphrase",
            "type": "string",
            "tags": [],
            "label": "keyPassphrase",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ElasticsearchSslConfig.alwaysPresentCertificate",
            "type": "boolean",
            "tags": [],
            "label": "alwaysPresentCertificate",
            "description": [],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.FakeRequest",
        "type": "Interface",
        "tags": [],
        "label": "FakeRequest",
        "description": [
          "\nFake request object created manually by Kibana plugins."
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/scopeable_request.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.FakeRequest.headers",
            "type": "CompoundType",
            "tags": [],
            "label": "headers",
            "description": [
              "Headers used for authentication against Elasticsearch"
            ],
            "signature": [
              "{ accept?: string | string[] | undefined; \"accept-language\"?: string | string[] | undefined; \"accept-patch\"?: string | string[] | undefined; \"accept-ranges\"?: string | string[] | undefined; \"access-control-allow-credentials\"?: string | string[] | undefined; \"access-control-allow-headers\"?: string | string[] | undefined; \"access-control-allow-methods\"?: string | string[] | undefined; \"access-control-allow-origin\"?: string | string[] | undefined; \"access-control-expose-headers\"?: string | string[] | undefined; \"access-control-max-age\"?: string | string[] | undefined; \"access-control-request-headers\"?: string | string[] | undefined; \"access-control-request-method\"?: string | string[] | undefined; age?: string | string[] | undefined; allow?: string | string[] | undefined; \"alt-svc\"?: string | string[] | undefined; authorization?: string | string[] | undefined; \"cache-control\"?: string | string[] | undefined; connection?: string | string[] | undefined; \"content-disposition\"?: string | string[] | undefined; \"content-encoding\"?: string | string[] | undefined; \"content-language\"?: string | string[] | undefined; \"content-length\"?: string | string[] | undefined; \"content-location\"?: string | string[] | undefined; \"content-range\"?: string | string[] | undefined; \"content-type\"?: string | string[] | undefined; cookie?: string | string[] | undefined; date?: string | string[] | undefined; etag?: string | string[] | undefined; expect?: string | string[] | undefined; expires?: string | string[] | undefined; forwarded?: string | string[] | undefined; from?: string | string[] | undefined; host?: string | string[] | undefined; \"if-match\"?: string | string[] | undefined; \"if-modified-since\"?: string | string[] | undefined; \"if-none-match\"?: string | string[] | undefined; \"if-unmodified-since\"?: string | string[] | undefined; \"last-modified\"?: string | string[] | undefined; location?: string | string[] | undefined; origin?: string | string[] | undefined; pragma?: string | string[] | undefined; \"proxy-authenticate\"?: string | string[] | undefined; \"proxy-authorization\"?: string | string[] | undefined; \"public-key-pins\"?: string | string[] | undefined; range?: string | string[] | undefined; referer?: string | string[] | undefined; \"retry-after\"?: string | string[] | undefined; \"sec-websocket-accept\"?: string | string[] | undefined; \"sec-websocket-extensions\"?: string | string[] | undefined; \"sec-websocket-key\"?: string | string[] | undefined; \"sec-websocket-protocol\"?: string | string[] | undefined; \"sec-websocket-version\"?: string | string[] | undefined; \"set-cookie\"?: string | string[] | undefined; \"strict-transport-security\"?: string | string[] | undefined; tk?: string | string[] | undefined; trailer?: string | string[] | undefined; \"transfer-encoding\"?: string | string[] | undefined; upgrade?: string | string[] | undefined; \"user-agent\"?: string | string[] | undefined; vary?: string | string[] | undefined; via?: string | string[] | undefined; warning?: string | string[] | undefined; \"www-authenticate\"?: string | string[] | undefined; } & { [header: string]: string | string[] | undefined; }"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/scopeable_request.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.IClusterClient",
        "type": "Interface",
        "tags": [],
        "label": "IClusterClient",
        "description": [
          "\nRepresents an Elasticsearch cluster API client created by the platform.\nIt allows to call API on behalf of the internal Kibana user and\nthe actual user that is derived from the request headers (via `asScoped(...)`).\n"
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/cluster_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IClusterClient.asInternalUser",
            "type": "Object",
            "tags": [],
            "label": "asInternalUser",
            "description": [
              "\nA {@link ElasticsearchClient | client} to be used to query the ES cluster on behalf of the Kibana internal user"
            ],
            "signature": [
              "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; cluster: ",
              "default",
              "; eql: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; monitoring: ",
              "default",
              "; security: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; asyncSearch: ",
              "default",
              "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; helpers: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; ilm: ",
              "default",
              "; indices: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; shutdown: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/cluster_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IClusterClient.asScoped",
            "type": "Function",
            "tags": [],
            "label": "asScoped",
            "description": [
              "\nCreates a {@link IScopedClusterClient | scoped cluster client} bound to given {@link ScopeableRequest | request}"
            ],
            "signature": [
              "(request: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.ScopeableRequest",
                "text": "ScopeableRequest"
              },
              ") => ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.IScopedClusterClient",
                "text": "IScopedClusterClient"
              }
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/cluster_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-server",
                "id": "def-server.IClusterClient.asScoped.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "server",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-server.ScopeableRequest",
                    "text": "ScopeableRequest"
                  }
                ],
                "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/cluster_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ICustomClusterClient",
        "type": "Interface",
        "tags": [],
        "label": "ICustomClusterClient",
        "description": [
          "\nSee {@link IClusterClient}\n"
        ],
        "signature": [
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "server",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-server.ICustomClusterClient",
            "text": "ICustomClusterClient"
          },
          " extends ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "server",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-server.IClusterClient",
            "text": "IClusterClient"
          }
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/cluster_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.ICustomClusterClient.close",
            "type": "Function",
            "tags": [],
            "label": "close",
            "description": [
              "\nCloses the cluster client. After that client cannot be used and one should\ncreate a new client instance to be able to interact with Elasticsearch API."
            ],
            "signature": [
              "() => Promise<void>"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/cluster_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.IElasticsearchConfig",
        "type": "Interface",
        "tags": [],
        "label": "IElasticsearchConfig",
        "description": [],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.healthCheckDelay",
            "type": "Object",
            "tags": [],
            "label": "healthCheckDelay",
            "description": [
              "\nThe interval between health check requests Kibana sends to the Elasticsearch."
            ],
            "signature": [
              "moment.Duration"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.ignoreVersionMismatch",
            "type": "boolean",
            "tags": [],
            "label": "ignoreVersionMismatch",
            "description": [
              "\nWhether to allow kibana to connect to a non-compatible elasticsearch node."
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.apiVersion",
            "type": "string",
            "tags": [],
            "label": "apiVersion",
            "description": [
              "\nVersion of the Elasticsearch (6.7, 7.1 or `master`) client will be connecting to."
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.maxSockets",
            "type": "number",
            "tags": [],
            "label": "maxSockets",
            "description": [
              "\nThe maximum number of sockets that can be used for communications with elasticsearch."
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.maxIdleSockets",
            "type": "number",
            "tags": [],
            "label": "maxIdleSockets",
            "description": [
              "\nThe maximum number of idle sockets to keep open between Kibana and Elasticsearch. If more sockets become idle, they will be closed."
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.idleSocketTimeout",
            "type": "Object",
            "tags": [],
            "label": "idleSocketTimeout",
            "description": [
              "\nThe timeout for idle sockets kept open between Kibana and Elasticsearch. If the socket is idle for longer than this timeout, it will be closed."
            ],
            "signature": [
              "moment.Duration"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.compression",
            "type": "boolean",
            "tags": [],
            "label": "compression",
            "description": [
              "\nWhether to use compression for communications with elasticsearch."
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.hosts",
            "type": "Array",
            "tags": [],
            "label": "hosts",
            "description": [
              "\nHosts that the client will connect to. If sniffing is enabled, this list will\nbe used as seeds to discover the rest of your cluster."
            ],
            "signature": [
              "string[]"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.requestHeadersWhitelist",
            "type": "Array",
            "tags": [],
            "label": "requestHeadersWhitelist",
            "description": [
              "\nList of Kibana client-side headers to send to Elasticsearch when request\nscoped cluster client is used. If this is an empty array then *no* client-side\nwill be sent."
            ],
            "signature": [
              "string[]"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.pingTimeout",
            "type": "Object",
            "tags": [],
            "label": "pingTimeout",
            "description": [
              "\nTimeout after which PING HTTP request will be aborted and retried."
            ],
            "signature": [
              "moment.Duration"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.requestTimeout",
            "type": "Object",
            "tags": [],
            "label": "requestTimeout",
            "description": [
              "\nTimeout after which HTTP request will be aborted and retried."
            ],
            "signature": [
              "moment.Duration"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.shardTimeout",
            "type": "Object",
            "tags": [],
            "label": "shardTimeout",
            "description": [
              "\nTimeout for Elasticsearch to wait for responses from shards. Set to 0 to disable."
            ],
            "signature": [
              "moment.Duration"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.sniffOnStart",
            "type": "boolean",
            "tags": [],
            "label": "sniffOnStart",
            "description": [
              "\nSpecifies whether the client should attempt to detect the rest of the cluster\nwhen it is first instantiated."
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.sniffInterval",
            "type": "CompoundType",
            "tags": [],
            "label": "sniffInterval",
            "description": [
              "\nInterval to perform a sniff operation and make sure the list of nodes is complete.\nIf `false` then sniffing is disabled."
            ],
            "signature": [
              "false | moment.Duration"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.sniffOnConnectionFault",
            "type": "boolean",
            "tags": [],
            "label": "sniffOnConnectionFault",
            "description": [
              "\nSpecifies whether the client should immediately sniff for a more current list\nof nodes when a connection dies."
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.username",
            "type": "string",
            "tags": [],
            "label": "username",
            "description": [
              "\nIf Elasticsearch is protected with basic authentication, this setting provides\nthe username that the Kibana server uses to perform its administrative functions.\nCannot be used in conjunction with serviceAccountToken."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.password",
            "type": "string",
            "tags": [],
            "label": "password",
            "description": [
              "\nIf Elasticsearch is protected with basic authentication, this setting provides\nthe password that the Kibana server uses to perform its administrative functions."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.serviceAccountToken",
            "type": "string",
            "tags": [],
            "label": "serviceAccountToken",
            "description": [
              "\nIf Elasticsearch security features are enabled, this setting provides the service account\ntoken that the Kibana server users to perform its administrative functions.\n\nThis is an alternative to specifying a username and password."
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.customHeaders",
            "type": "Object",
            "tags": [],
            "label": "customHeaders",
            "description": [
              "\nHeader names and values to send to Elasticsearch with every request. These\nheaders cannot be overwritten by client-side headers and aren't affected by\n`requestHeadersWhitelist` configuration."
            ],
            "signature": [
              "{ [x: string]: string; }"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IElasticsearchConfig.ssl",
            "type": "Object",
            "tags": [],
            "label": "ssl",
            "description": [
              "\nSet of settings configure SSL connection between Kibana and Elasticsearch that\nare required when `xpack.ssl.verification_mode` in Elasticsearch is set to\neither `certificate` or `full`."
            ],
            "signature": [
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.ElasticsearchSslConfig",
                "text": "ElasticsearchSslConfig"
              }
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/elasticsearch_config.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.IScopedClusterClient",
        "type": "Interface",
        "tags": [],
        "label": "IScopedClusterClient",
        "description": [
          "\nServes the same purpose as the normal {@link IClusterClient | cluster client} but exposes\nan additional `asCurrentUser` method that doesn't use credentials of the Kibana internal\nuser (as `asInternalUser` does) to request Elasticsearch API, but rather passes HTTP headers\nextracted from the current user request to the API instead.\n"
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/scoped_cluster_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IScopedClusterClient.asInternalUser",
            "type": "Object",
            "tags": [],
            "label": "asInternalUser",
            "description": [
              "\nA {@link ElasticsearchClient | client} to be used to query the elasticsearch cluster\non behalf of the internal Kibana user."
            ],
            "signature": [
              "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; cluster: ",
              "default",
              "; eql: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; monitoring: ",
              "default",
              "; security: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; asyncSearch: ",
              "default",
              "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; helpers: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; ilm: ",
              "default",
              "; indices: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; shutdown: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/scoped_cluster_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.IScopedClusterClient.asCurrentUser",
            "type": "Object",
            "tags": [],
            "label": "asCurrentUser",
            "description": [
              "\nA {@link ElasticsearchClient | client} to be used to query the elasticsearch cluster\non behalf of the user that initiated the request to the Kibana server."
            ],
            "signature": [
              "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; cluster: ",
              "default",
              "; eql: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; monitoring: ",
              "default",
              "; security: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; asyncSearch: ",
              "default",
              "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; helpers: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; ilm: ",
              "default",
              "; indices: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; shutdown: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/scoped_cluster_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.UnauthorizedErrorHandlerNotHandledResult",
        "type": "Interface",
        "tags": [],
        "label": "UnauthorizedErrorHandlerNotHandledResult",
        "description": [],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.UnauthorizedErrorHandlerNotHandledResult.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"notHandled\""
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.UnauthorizedErrorHandlerOptions",
        "type": "Interface",
        "tags": [],
        "label": "UnauthorizedErrorHandlerOptions",
        "description": [],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.UnauthorizedErrorHandlerOptions.error",
            "type": "CompoundType",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "ResponseError",
              " & { statusCode: 401; }"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.UnauthorizedErrorHandlerOptions.request",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "server",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.UnauthorizedErrorHandlerResultRetryParams",
        "type": "Interface",
        "tags": [],
        "label": "UnauthorizedErrorHandlerResultRetryParams",
        "description": [],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.UnauthorizedErrorHandlerResultRetryParams.authHeaders",
            "type": "Object",
            "tags": [],
            "label": "authHeaders",
            "description": [],
            "signature": [
              "{ [x: string]: string | string[]; }"
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.UnauthorizedErrorHandlerRetryResult",
        "type": "Interface",
        "tags": [],
        "label": "UnauthorizedErrorHandlerRetryResult",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "server",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-server.UnauthorizedErrorHandlerRetryResult",
            "text": "UnauthorizedErrorHandlerRetryResult"
          },
          " extends ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "server",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-server.UnauthorizedErrorHandlerResultRetryParams",
            "text": "UnauthorizedErrorHandlerResultRetryParams"
          }
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.UnauthorizedErrorHandlerRetryResult.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"retry\""
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.UnauthorizedErrorHandlerToolkit",
        "type": "Interface",
        "tags": [],
        "label": "UnauthorizedErrorHandlerToolkit",
        "description": [
          "\nToolkit passed to a {@link UnauthorizedErrorHandler} used to generate responses from the handler"
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.UnauthorizedErrorHandlerToolkit.notHandled",
            "type": "Function",
            "tags": [],
            "label": "notHandled",
            "description": [
              "\nThe handler cannot handle the error, or was not able to authenticate."
            ],
            "signature": [
              "() => ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.UnauthorizedErrorHandlerNotHandledResult",
                "text": "UnauthorizedErrorHandlerNotHandledResult"
              }
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.UnauthorizedErrorHandlerToolkit.retry",
            "type": "Function",
            "tags": [],
            "label": "retry",
            "description": [
              "\nThe handler was able to authenticate. Will retry the failed request with new auth headers"
            ],
            "signature": [
              "(params: ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.UnauthorizedErrorHandlerResultRetryParams",
                "text": "UnauthorizedErrorHandlerResultRetryParams"
              },
              ") => ",
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.UnauthorizedErrorHandlerRetryResult",
                "text": "UnauthorizedErrorHandlerRetryResult"
              }
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/core-elasticsearch-server",
                "id": "def-server.UnauthorizedErrorHandlerToolkit.retry.$1",
                "type": "Object",
                "tags": [],
                "label": "params",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-elasticsearch-server",
                    "scope": "server",
                    "docId": "kibKbnCoreElasticsearchServerPluginApi",
                    "section": "def-server.UnauthorizedErrorHandlerResultRetryParams",
                    "text": "UnauthorizedErrorHandlerResultRetryParams"
                  }
                ],
                "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ElasticsearchClient",
        "type": "Type",
        "tags": [],
        "label": "ElasticsearchClient",
        "description": [
          "\nClient used to query the elasticsearch cluster.\n"
        ],
        "signature": [
          "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
          "GetRequest",
          " | ",
          "GetRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "GetResponse",
          "<TDocument>>; <TDocument = unknown>(this: That, params: ",
          "GetRequest",
          " | ",
          "GetRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "GetResponse",
          "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
          "GetRequest",
          " | ",
          "GetRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "GetResponse",
          "<TDocument>>; }; delete: { (this: That, params: ",
          "DeleteRequest",
          " | ",
          "DeleteRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "WriteResponseBase",
          ">; (this: That, params: ",
          "DeleteRequest",
          " | ",
          "DeleteRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "WriteResponseBase",
          ", unknown>>; (this: That, params: ",
          "DeleteRequest",
          " | ",
          "DeleteRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "WriteResponseBase",
          ">; }; cluster: ",
          "default",
          "; eql: ",
          "default",
          "; search: { <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params?: ",
          "SearchRequest",
          " | ",
          "SearchRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "SearchResponse",
          "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params?: ",
          "SearchRequest",
          " | ",
          "SearchRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "SearchResponse",
          "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params?: ",
          "SearchRequest",
          " | ",
          "SearchRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "SearchResponse",
          "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
          "CreateRequest",
          "<TDocument> | ",
          "CreateRequest",
          "<TDocument>, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "WriteResponseBase",
          ">; <TDocument = unknown>(this: That, params: ",
          "CreateRequest",
          "<TDocument> | ",
          "CreateRequest",
          "<TDocument>, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "WriteResponseBase",
          ", unknown>>; <TDocument = unknown>(this: That, params: ",
          "CreateRequest",
          "<TDocument> | ",
          "CreateRequest",
          "<TDocument>, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "WriteResponseBase",
          ">; }; monitoring: ",
          "default",
          "; security: ",
          "default",
          "; index: { <TDocument = unknown>(this: That, params: ",
          "IndexRequest",
          "<TDocument> | ",
          "IndexRequest",
          "<TDocument>, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "WriteResponseBase",
          ">; <TDocument = unknown>(this: That, params: ",
          "IndexRequest",
          "<TDocument> | ",
          "IndexRequest",
          "<TDocument>, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "WriteResponseBase",
          ", unknown>>; <TDocument = unknown>(this: That, params: ",
          "IndexRequest",
          "<TDocument> | ",
          "IndexRequest",
          "<TDocument>, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "WriteResponseBase",
          ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
          "UpdateRequest",
          "<TDocument, TPartialDocument> | ",
          "UpdateRequest",
          "<TDocument, TPartialDocument>, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "UpdateResponse",
          "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
          "UpdateRequest",
          "<TDocument, TPartialDocument> | ",
          "UpdateRequest",
          "<TDocument, TPartialDocument>, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "UpdateResponse",
          "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
          "UpdateRequest",
          "<TDocument, TPartialDocument> | ",
          "UpdateRequest",
          "<TDocument, TPartialDocument>, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "UpdateResponse",
          "<TDocumentR>>; }; asyncSearch: ",
          "default",
          "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
          "default",
          "; helpers: ",
          "default",
          "; child: (opts: ",
          "ClientOptions",
          ") => ",
          "default",
          "; autoscaling: ",
          "default",
          "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
          "BulkRequest",
          "<TDocument, TPartialDocument> | ",
          "BulkRequest",
          "<TDocument, TPartialDocument>, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "BulkResponse",
          ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
          "BulkRequest",
          "<TDocument, TPartialDocument> | ",
          "BulkRequest",
          "<TDocument, TPartialDocument>, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "BulkResponse",
          ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
          "BulkRequest",
          "<TDocument, TPartialDocument> | ",
          "BulkRequest",
          "<TDocument, TPartialDocument>, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "BulkResponse",
          ">; }; cat: ",
          "default",
          "; ccr: ",
          "default",
          "; clearScroll: { (this: That, params?: ",
          "ClearScrollRequest",
          " | ",
          "ClearScrollRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "ClearScrollResponse",
          ">; (this: That, params?: ",
          "ClearScrollRequest",
          " | ",
          "ClearScrollRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "ClearScrollResponse",
          ", unknown>>; (this: That, params?: ",
          "ClearScrollRequest",
          " | ",
          "ClearScrollRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "ClearScrollResponse",
          ">; }; closePointInTime: { (this: That, params: ",
          "ClosePointInTimeRequest",
          " | ",
          "ClosePointInTimeRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "ClosePointInTimeResponse",
          ">; (this: That, params: ",
          "ClosePointInTimeRequest",
          " | ",
          "ClosePointInTimeRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "ClosePointInTimeResponse",
          ", unknown>>; (this: That, params: ",
          "ClosePointInTimeRequest",
          " | ",
          "ClosePointInTimeRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "ClosePointInTimeResponse",
          ">; }; count: { (this: That, params?: ",
          "CountRequest",
          " | ",
          "CountRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "CountResponse",
          ">; (this: That, params?: ",
          "CountRequest",
          " | ",
          "CountRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "CountResponse",
          ", unknown>>; (this: That, params?: ",
          "CountRequest",
          " | ",
          "CountRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "CountResponse",
          ">; }; danglingIndices: ",
          "default",
          "; deleteByQuery: { (this: That, params: ",
          "DeleteByQueryRequest",
          " | ",
          "DeleteByQueryRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "DeleteByQueryResponse",
          ">; (this: That, params: ",
          "DeleteByQueryRequest",
          " | ",
          "DeleteByQueryRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "DeleteByQueryResponse",
          ", unknown>>; (this: That, params: ",
          "DeleteByQueryRequest",
          " | ",
          "DeleteByQueryRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "DeleteByQueryResponse",
          ">; }; deleteByQueryRethrottle: { (this: That, params: ",
          "DeleteByQueryRethrottleRequest",
          " | ",
          "DeleteByQueryRethrottleRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "TasksTaskListResponseBase",
          ">; (this: That, params: ",
          "DeleteByQueryRethrottleRequest",
          " | ",
          "DeleteByQueryRethrottleRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "TasksTaskListResponseBase",
          ", unknown>>; (this: That, params: ",
          "DeleteByQueryRethrottleRequest",
          " | ",
          "DeleteByQueryRethrottleRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "TasksTaskListResponseBase",
          ">; }; deleteScript: { (this: That, params: ",
          "DeleteScriptRequest",
          " | ",
          "DeleteScriptRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "AcknowledgedResponseBase",
          ">; (this: That, params: ",
          "DeleteScriptRequest",
          " | ",
          "DeleteScriptRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "AcknowledgedResponseBase",
          ", unknown>>; (this: That, params: ",
          "DeleteScriptRequest",
          " | ",
          "DeleteScriptRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "AcknowledgedResponseBase",
          ">; }; enrich: ",
          "default",
          "; exists: { (this: That, params: ",
          "ExistsRequest",
          " | ",
          "ExistsRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<boolean>; (this: That, params: ",
          "ExistsRequest",
          " | ",
          "ExistsRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<boolean, unknown>>; (this: That, params: ",
          "ExistsRequest",
          " | ",
          "ExistsRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
          "ExistsSourceRequest",
          " | ",
          "ExistsSourceRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<boolean>; (this: That, params: ",
          "ExistsSourceRequest",
          " | ",
          "ExistsSourceRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<boolean, unknown>>; (this: That, params: ",
          "ExistsSourceRequest",
          " | ",
          "ExistsSourceRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
          "ExplainRequest",
          " | ",
          "ExplainRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "ExplainResponse",
          "<TDocument>>; <TDocument = unknown>(this: That, params: ",
          "ExplainRequest",
          " | ",
          "ExplainRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "ExplainResponse",
          "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
          "ExplainRequest",
          " | ",
          "ExplainRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "ExplainResponse",
          "<TDocument>>; }; features: ",
          "default",
          "; fieldCaps: { (this: That, params: ",
          "FieldCapsRequest",
          " | ",
          "FieldCapsRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "FieldCapsResponse",
          ">; (this: That, params: ",
          "FieldCapsRequest",
          " | ",
          "FieldCapsRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "FieldCapsResponse",
          ", unknown>>; (this: That, params: ",
          "FieldCapsRequest",
          " | ",
          "FieldCapsRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "FieldCapsResponse",
          ">; }; fleet: ",
          "default",
          "; getScript: { (this: That, params: ",
          "GetScriptRequest",
          " | ",
          "GetScriptRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "GetScriptResponse",
          ">; (this: That, params: ",
          "GetScriptRequest",
          " | ",
          "GetScriptRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "GetScriptResponse",
          ", unknown>>; (this: That, params: ",
          "GetScriptRequest",
          " | ",
          "GetScriptRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "GetScriptResponse",
          ">; }; getScriptContext: { (this: That, params?: ",
          "GetScriptContextRequest",
          " | ",
          "GetScriptContextRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "GetScriptContextResponse",
          ">; (this: That, params?: ",
          "GetScriptContextRequest",
          " | ",
          "GetScriptContextRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "GetScriptContextResponse",
          ", unknown>>; (this: That, params?: ",
          "GetScriptContextRequest",
          " | ",
          "GetScriptContextRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "GetScriptContextResponse",
          ">; }; getScriptLanguages: { (this: That, params?: ",
          "GetScriptLanguagesRequest",
          " | ",
          "GetScriptLanguagesRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "GetScriptLanguagesResponse",
          ">; (this: That, params?: ",
          "GetScriptLanguagesRequest",
          " | ",
          "GetScriptLanguagesRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "GetScriptLanguagesResponse",
          ", unknown>>; (this: That, params?: ",
          "GetScriptLanguagesRequest",
          " | ",
          "GetScriptLanguagesRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "GetScriptLanguagesResponse",
          ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
          "GetSourceRequest",
          " | ",
          "GetSourceRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
          "GetSourceRequest",
          " | ",
          "GetSourceRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
          "GetSourceRequest",
          " | ",
          "GetSourceRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<TDocument>; }; graph: ",
          "default",
          "; ilm: ",
          "default",
          "; indices: ",
          "default",
          "; info: { (this: That, params?: ",
          "InfoRequest",
          " | ",
          "InfoRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "InfoResponse",
          ">; (this: That, params?: ",
          "InfoRequest",
          " | ",
          "InfoRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "InfoResponse",
          ", unknown>>; (this: That, params?: ",
          "InfoRequest",
          " | ",
          "InfoRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "InfoResponse",
          ">; }; ingest: ",
          "default",
          "; knnSearch: { <TDocument = unknown>(this: That, params: ",
          "KnnSearchRequest",
          " | ",
          "KnnSearchRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "KnnSearchResponse",
          "<TDocument>>; <TDocument = unknown>(this: That, params: ",
          "KnnSearchRequest",
          " | ",
          "KnnSearchRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "KnnSearchResponse",
          "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
          "KnnSearchRequest",
          " | ",
          "KnnSearchRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "KnnSearchResponse",
          "<TDocument>>; }; license: ",
          "default",
          "; logstash: ",
          "default",
          "; mget: { <TDocument = unknown>(this: That, params?: ",
          "MgetRequest",
          " | ",
          "MgetRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "MgetResponse",
          "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
          "MgetRequest",
          " | ",
          "MgetRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "MgetResponse",
          "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
          "MgetRequest",
          " | ",
          "MgetRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "MgetResponse",
          "<TDocument>>; }; migration: ",
          "default",
          "; ml: ",
          "default",
          "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params: ",
          "MsearchRequest",
          " | ",
          "MsearchRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "MsearchResponse",
          "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params: ",
          "MsearchRequest",
          " | ",
          "MsearchRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "MsearchResponse",
          "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params: ",
          "MsearchRequest",
          " | ",
          "MsearchRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "MsearchResponse",
          "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params: ",
          "MsearchTemplateRequest",
          " | ",
          "MsearchTemplateRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "MsearchTemplateResponse",
          "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params: ",
          "MsearchTemplateRequest",
          " | ",
          "MsearchTemplateRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "MsearchTemplateResponse",
          "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params: ",
          "MsearchTemplateRequest",
          " | ",
          "MsearchTemplateRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "MsearchTemplateResponse",
          "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
          "MtermvectorsRequest",
          " | ",
          "MtermvectorsRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "MtermvectorsResponse",
          ">; (this: That, params?: ",
          "MtermvectorsRequest",
          " | ",
          "MtermvectorsRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "MtermvectorsResponse",
          ", unknown>>; (this: That, params?: ",
          "MtermvectorsRequest",
          " | ",
          "MtermvectorsRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "MtermvectorsResponse",
          ">; }; nodes: ",
          "default",
          "; openPointInTime: { (this: That, params: ",
          "OpenPointInTimeRequest",
          " | ",
          "OpenPointInTimeRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "OpenPointInTimeResponse",
          ">; (this: That, params: ",
          "OpenPointInTimeRequest",
          " | ",
          "OpenPointInTimeRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "OpenPointInTimeResponse",
          ", unknown>>; (this: That, params: ",
          "OpenPointInTimeRequest",
          " | ",
          "OpenPointInTimeRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "OpenPointInTimeResponse",
          ">; }; ping: { (this: That, params?: ",
          "PingRequest",
          " | ",
          "PingRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<boolean>; (this: That, params?: ",
          "PingRequest",
          " | ",
          "PingRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<boolean, unknown>>; (this: That, params?: ",
          "PingRequest",
          " | ",
          "PingRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
          "PutScriptRequest",
          " | ",
          "PutScriptRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "AcknowledgedResponseBase",
          ">; (this: That, params: ",
          "PutScriptRequest",
          " | ",
          "PutScriptRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "AcknowledgedResponseBase",
          ", unknown>>; (this: That, params: ",
          "PutScriptRequest",
          " | ",
          "PutScriptRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "AcknowledgedResponseBase",
          ">; }; rankEval: { (this: That, params: ",
          "RankEvalRequest",
          " | ",
          "RankEvalRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "RankEvalResponse",
          ">; (this: That, params: ",
          "RankEvalRequest",
          " | ",
          "RankEvalRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "RankEvalResponse",
          ", unknown>>; (this: That, params: ",
          "RankEvalRequest",
          " | ",
          "RankEvalRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "RankEvalResponse",
          ">; }; reindex: { (this: That, params: ",
          "ReindexRequest",
          " | ",
          "ReindexRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "ReindexResponse",
          ">; (this: That, params: ",
          "ReindexRequest",
          " | ",
          "ReindexRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "ReindexResponse",
          ", unknown>>; (this: That, params: ",
          "ReindexRequest",
          " | ",
          "ReindexRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "ReindexResponse",
          ">; }; reindexRethrottle: { (this: That, params: ",
          "ReindexRethrottleRequest",
          " | ",
          "ReindexRethrottleRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "ReindexRethrottleResponse",
          ">; (this: That, params: ",
          "ReindexRethrottleRequest",
          " | ",
          "ReindexRethrottleRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "ReindexRethrottleResponse",
          ", unknown>>; (this: That, params: ",
          "ReindexRethrottleRequest",
          " | ",
          "ReindexRethrottleRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "ReindexRethrottleResponse",
          ">; }; renderSearchTemplate: { (this: That, params?: ",
          "RenderSearchTemplateRequest",
          " | ",
          "RenderSearchTemplateRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "RenderSearchTemplateResponse",
          ">; (this: That, params?: ",
          "RenderSearchTemplateRequest",
          " | ",
          "RenderSearchTemplateRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "RenderSearchTemplateResponse",
          ", unknown>>; (this: That, params?: ",
          "RenderSearchTemplateRequest",
          " | ",
          "RenderSearchTemplateRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "RenderSearchTemplateResponse",
          ">; }; rollup: ",
          "default",
          "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
          "ScriptsPainlessExecuteRequest",
          " | ",
          "ScriptsPainlessExecuteRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "ScriptsPainlessExecuteResponse",
          "<TResult>>; <TResult = unknown>(this: That, params?: ",
          "ScriptsPainlessExecuteRequest",
          " | ",
          "ScriptsPainlessExecuteRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "ScriptsPainlessExecuteResponse",
          "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
          "ScriptsPainlessExecuteRequest",
          " | ",
          "ScriptsPainlessExecuteRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "ScriptsPainlessExecuteResponse",
          "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params: ",
          "ScrollRequest",
          " | ",
          "ScrollRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "ScrollResponse",
          "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params: ",
          "ScrollRequest",
          " | ",
          "ScrollRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "ScrollResponse",
          "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
          "AggregationsAggregate",
          ">>(this: That, params: ",
          "ScrollRequest",
          " | ",
          "ScrollRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "ScrollResponse",
          "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
          "SearchMvtRequest",
          " | ",
          "SearchMvtRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
          "SearchMvtRequest",
          " | ",
          "SearchMvtRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<ArrayBuffer, unknown>>; (this: That, params: ",
          "SearchMvtRequest",
          " | ",
          "SearchMvtRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
          "SearchShardsRequest",
          " | ",
          "SearchShardsRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "SearchShardsResponse",
          ">; (this: That, params?: ",
          "SearchShardsRequest",
          " | ",
          "SearchShardsRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "SearchShardsResponse",
          ", unknown>>; (this: That, params?: ",
          "SearchShardsRequest",
          " | ",
          "SearchShardsRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "SearchShardsResponse",
          ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
          "SearchTemplateRequest",
          " | ",
          "SearchTemplateRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "SearchTemplateResponse",
          "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
          "SearchTemplateRequest",
          " | ",
          "SearchTemplateRequest",
          " | undefined, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "SearchTemplateResponse",
          "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
          "SearchTemplateRequest",
          " | ",
          "SearchTemplateRequest",
          " | undefined, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "SearchTemplateResponse",
          "<TDocument>>; }; searchableSnapshots: ",
          "default",
          "; shutdown: ",
          "default",
          "; slm: ",
          "default",
          "; snapshot: ",
          "default",
          "; sql: ",
          "default",
          "; ssl: ",
          "default",
          "; tasks: ",
          "default",
          "; termsEnum: { (this: That, params: ",
          "TermsEnumRequest",
          " | ",
          "TermsEnumRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "TermsEnumResponse",
          ">; (this: That, params: ",
          "TermsEnumRequest",
          " | ",
          "TermsEnumRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "TermsEnumResponse",
          ", unknown>>; (this: That, params: ",
          "TermsEnumRequest",
          " | ",
          "TermsEnumRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "TermsEnumResponse",
          ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
          "TermvectorsRequest",
          "<TDocument> | ",
          "TermvectorsRequest",
          "<TDocument>, options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "TermvectorsResponse",
          ">; <TDocument = unknown>(this: That, params: ",
          "TermvectorsRequest",
          "<TDocument> | ",
          "TermvectorsRequest",
          "<TDocument>, options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "TermvectorsResponse",
          ", unknown>>; <TDocument = unknown>(this: That, params: ",
          "TermvectorsRequest",
          "<TDocument> | ",
          "TermvectorsRequest",
          "<TDocument>, options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "TermvectorsResponse",
          ">; }; textStructure: ",
          "default",
          "; transform: ",
          "default",
          "; updateByQuery: { (this: That, params: ",
          "UpdateByQueryRequest",
          " | ",
          "UpdateByQueryRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "UpdateByQueryResponse",
          ">; (this: That, params: ",
          "UpdateByQueryRequest",
          " | ",
          "UpdateByQueryRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "UpdateByQueryResponse",
          ", unknown>>; (this: That, params: ",
          "UpdateByQueryRequest",
          " | ",
          "UpdateByQueryRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "UpdateByQueryResponse",
          ">; }; updateByQueryRethrottle: { (this: That, params: ",
          "UpdateByQueryRethrottleRequest",
          " | ",
          "UpdateByQueryRethrottleRequest",
          ", options?: ",
          "TransportRequestOptionsWithOutMeta",
          " | undefined): Promise<",
          "UpdateByQueryRethrottleResponse",
          ">; (this: That, params: ",
          "UpdateByQueryRethrottleRequest",
          " | ",
          "UpdateByQueryRethrottleRequest",
          ", options?: ",
          "TransportRequestOptionsWithMeta",
          " | undefined): Promise<",
          "TransportResult",
          "<",
          "UpdateByQueryRethrottleResponse",
          ", unknown>>; (this: That, params: ",
          "UpdateByQueryRethrottleRequest",
          " | ",
          "UpdateByQueryRethrottleRequest",
          ", options?: ",
          "TransportRequestOptions",
          " | undefined): Promise<",
          "UpdateByQueryRethrottleResponse",
          ">; }; watcher: ",
          "default",
          "; xpack: ",
          "default",
          "; }"
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.ScopeableRequest",
        "type": "Type",
        "tags": [],
        "label": "ScopeableRequest",
        "description": [
          "\n A user credentials container.\nIt accommodates the necessary auth credentials to impersonate the current user.\n"
        ],
        "signature": [
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "server",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-server.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any> | ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "server",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-server.FakeRequest",
            "text": "FakeRequest"
          }
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/scopeable_request.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.UnauthorizedErrorHandler",
        "type": "Type",
        "tags": [],
        "label": "UnauthorizedErrorHandler",
        "description": [
          "\nA handler used to handle unauthorized error returned by elasticsearch\n"
        ],
        "signature": [
          "(options: ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "server",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-server.UnauthorizedErrorHandlerOptions",
            "text": "UnauthorizedErrorHandlerOptions"
          },
          ", toolkit: ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "server",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-server.UnauthorizedErrorHandlerToolkit",
            "text": "UnauthorizedErrorHandlerToolkit"
          },
          ") => ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "server",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-server.MaybePromise",
            "text": "MaybePromise"
          },
          "<",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "server",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-server.UnauthorizedErrorHandlerResult",
            "text": "UnauthorizedErrorHandlerResult"
          },
          ">"
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.UnauthorizedErrorHandler.$1",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.UnauthorizedErrorHandlerOptions",
                "text": "UnauthorizedErrorHandlerOptions"
              }
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/core-elasticsearch-server",
            "id": "def-server.UnauthorizedErrorHandler.$2",
            "type": "Object",
            "tags": [],
            "label": "toolkit",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-elasticsearch-server",
                "scope": "server",
                "docId": "kibKbnCoreElasticsearchServerPluginApi",
                "section": "def-server.UnauthorizedErrorHandlerToolkit",
                "text": "UnauthorizedErrorHandlerToolkit"
              }
            ],
            "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/core-elasticsearch-server",
        "id": "def-server.UnauthorizedErrorHandlerResult",
        "type": "Type",
        "tags": [],
        "label": "UnauthorizedErrorHandlerResult",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "server",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-server.UnauthorizedErrorHandlerRetryResult",
            "text": "UnauthorizedErrorHandlerRetryResult"
          },
          " | ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "server",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-server.UnauthorizedErrorHandlerNotHandledResult",
            "text": "UnauthorizedErrorHandlerNotHandledResult"
          }
        ],
        "path": "packages/core/elasticsearch/core-elasticsearch-server/src/client/unauthorized_error_handler.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}