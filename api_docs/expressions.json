{
  "id": "expressions",
  "client": {
    "classes": [
      {
        "id": "def-public.Execution",
        "type": "Class",
        "tags": [],
        "label": "Execution",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Execution",
            "text": "Execution"
          },
          "<Input, Output, InspectorAdapters>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.Execution.state",
            "type": "Object",
            "label": "state",
            "description": [
              "\nDynamic state of the execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 80
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContainer",
                "text": "ExecutionContainer"
              },
              "<Output | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueBoxed",
                "text": "ExpressionValueBoxed"
              },
              "<\"error\", { error: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ErrorLike",
                "text": "ErrorLike"
              },
              "; info?: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined; }>>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.Execution.input",
            "type": "Uncategorized",
            "label": "input",
            "description": [
              "\nInitial input of the execution.\n\nN.B. It is initialized to `null` rather than `undefined` for legacy reasons,\nbecause in legacy interpreter it was set to `null` by default."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 88
            },
            "signature": [
              "Input"
            ]
          },
          {
            "tags": [],
            "id": "def-public.Execution.context",
            "type": "Object",
            "label": "context",
            "description": [
              "\nExecution context - object that allows to do side-effects. Context is passed\nto every function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 94
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContext",
                "text": "ExecutionContext"
              },
              "<InspectorAdapters, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-public.Execution.contract",
            "type": "Object",
            "label": "contract",
            "description": [
              "\nContract is a public representation of `Execution` instances. Contract we\ncan return to other plugins for their consumption."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 134
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContract",
                "text": "ExecutionContract"
              },
              "<Input, Output, InspectorAdapters>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.Execution.expression",
            "type": "string",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 140
            }
          },
          {
            "id": "def-public.Execution.result",
            "type": "Object",
            "label": "result",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 142
            },
            "signature": [
              "Promise<Output | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueBoxed",
                "text": "ExpressionValueBoxed"
              },
              "<\"error\", { error: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ErrorLike",
                "text": "ErrorLike"
              },
              "; info?: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined; }>>"
            ]
          },
          {
            "id": "def-public.Execution.inspectorAdapters",
            "type": "Uncategorized",
            "label": "inspectorAdapters",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 146
            },
            "signature": [
              "InspectorAdapters"
            ]
          },
          {
            "id": "def-public.Execution.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "execution",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutionParams",
                    "text": "ExecutionParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 150
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 150
            }
          },
          {
            "id": "def-public.Execution.cancel",
            "type": "Function",
            "label": "cancel",
            "signature": [
              "() => void"
            ],
            "description": [
              "\nStop execution of expression."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 192
            }
          },
          {
            "id": "def-public.Execution.start",
            "type": "Function",
            "label": "start",
            "signature": [
              "(input?: Input) => void"
            ],
            "description": [
              "\nCall this method to start execution.\n\nN.B. `input` is initialized to `null` rather than `undefined` for legacy reasons,\nbecause in legacy interpreter it was set to `null` by default."
            ],
            "children": [
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 202
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 202
            }
          },
          {
            "id": "def-public.Execution.invokeChain",
            "type": "Function",
            "label": "invokeChain",
            "signature": [
              "(chainArr: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunction",
                "text": "ExpressionAstFunction"
              },
              "[], input: unknown) => Promise<any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Array",
                "label": "chainArr",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstFunction",
                    "text": "ExpressionAstFunction"
                  },
                  "[]"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 236
                }
              },
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 236
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 236
            }
          },
          {
            "id": "def-public.Execution.invokeFunction",
            "type": "Function",
            "label": "invokeFunction",
            "signature": [
              "(fn: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ", input: unknown, args: Record<string, unknown>) => Promise<any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "fn",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionFunction",
                    "text": "ExpressionFunction"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 317
                }
              },
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 318
                }
              },
              {
                "type": "Object",
                "label": "args",
                "isRequired": true,
                "signature": [
                  "Record<string, unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 319
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 316
            }
          },
          {
            "id": "def-public.Execution.cast",
            "type": "Function",
            "label": "cast",
            "signature": [
              "(value: any, toTypeNames?: string[] | undefined) => any"
            ],
            "description": [],
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 348
                }
              },
              {
                "type": "Array",
                "label": "toTypeNames",
                "isRequired": false,
                "signature": [
                  "string[] | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 348
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 348
            }
          },
          {
            "id": "def-public.Execution.resolveArgs",
            "type": "Function",
            "label": "resolveArgs",
            "signature": [
              "(fnDef: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ", input: unknown, argAsts: any) => Promise<any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "fnDef",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionFunction",
                    "text": "ExpressionFunction"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 374
                }
              },
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 374
                }
              },
              {
                "type": "Any",
                "label": "argAsts",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 374
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 374
            }
          },
          {
            "id": "def-public.Execution.interpret",
            "type": "Function",
            "label": "interpret",
            "signature": [
              "<T>(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstNode",
                "text": "ExpressionAstNode"
              },
              ", input: T) => Promise<unknown>"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstNode",
                    "text": "ExpressionAstNode"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 465
                }
              },
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "T"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 465
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 465
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/execution.ts",
          "lineNumber": 70
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExecutionContract",
        "type": "Class",
        "tags": [],
        "label": "ExecutionContract",
        "description": [
          "\n`ExecutionContract` is a wrapper around `Execution` class. It provides the\nsame functionality but does not expose Expressions plugin internals."
        ],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContract",
            "text": "ExecutionContract"
          },
          "<Input, Output, InspectorAdapters>"
        ],
        "children": [
          {
            "id": "def-public.ExecutionContract.isPending",
            "type": "boolean",
            "label": "isPending",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 18
            }
          },
          {
            "id": "def-public.ExecutionContract.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "execution",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Execution",
                    "text": "Execution"
                  },
                  "<Input, Output, InspectorAdapters>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution_contract.ts",
                  "lineNumber": 24
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 24
            }
          },
          {
            "id": "def-public.ExecutionContract.cancel",
            "type": "Function",
            "children": [],
            "signature": [
              "() => void"
            ],
            "description": [
              "\nCancel the execution of the expression. This will set abort signal\n(available in execution context) to aborted state, letting expression\nfunctions to stop their execution."
            ],
            "label": "cancel",
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 31
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExecutionContract.getData",
            "type": "Function",
            "children": [],
            "signature": [
              "() => Promise<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueBoxed",
                "text": "ExpressionValueBoxed"
              },
              "<\"error\", { error: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ErrorLike",
                "text": "ErrorLike"
              },
              "; info?: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined; }> | Output>"
            ],
            "description": [
              "\nReturns the final output of expression, if any error happens still\nwraps that error into `ExpressionValueError` type and returns that.\nThis function never throws."
            ],
            "label": "getData",
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 40
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExecutionContract.getExpression",
            "type": "Function",
            "children": [],
            "signature": [
              "() => string"
            ],
            "description": [
              "\nGet string representation of the expression. Returns the original string\nif execution was started from a string. If execution was started from an\nAST this method returns a string generated from AST."
            ],
            "label": "getExpression",
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 60
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExecutionContract.getAst",
            "type": "Function",
            "children": [],
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [
              "\nGet AST used to execute the expression."
            ],
            "label": "getAst",
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 67
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExecutionContract.inspect",
            "type": "Function",
            "children": [],
            "signature": [
              "() => InspectorAdapters"
            ],
            "description": [
              "\nGet Inspector adapters provided to all functions of expression through\nexecution context."
            ],
            "label": "inspect",
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 73
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/execution_contract.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.Executor",
        "type": "Class",
        "tags": [],
        "label": "Executor",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Executor",
            "text": "Executor"
          },
          "<Context> implements ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableStateService",
            "text": "PersistableStateService"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          ">"
        ],
        "children": [
          {
            "id": "def-public.Executor.createWithDefaults",
            "type": "Function",
            "label": "createWithDefaults",
            "signature": [
              "typeof ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              ".createWithDefaults"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": false,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Ctx> | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 83
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 82
            }
          },
          {
            "tags": [],
            "id": "def-public.Executor.state",
            "type": "Object",
            "label": "state",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 91
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorContainer",
                "text": "ExecutorContainer"
              },
              "<Context>"
            ]
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-public.Executor.functions",
            "type": "Object",
            "label": "functions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 96
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.FunctionsRegistry",
                "text": "FunctionsRegistry"
              }
            ]
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-public.Executor.types",
            "type": "Object",
            "label": "types",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 101
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.TypesRegistry",
                "text": "TypesRegistry"
              }
            ]
          },
          {
            "id": "def-public.Executor.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": false,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Context> | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 103
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 103
            }
          },
          {
            "id": "def-public.Executor.registerFunction",
            "type": "Function",
            "label": "registerFunction",
            "signature": [
              "(functionDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 110
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 109
            }
          },
          {
            "id": "def-public.Executor.getFunction",
            "type": "Function",
            "label": "getFunction",
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | undefined"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 118
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 118
            }
          },
          {
            "id": "def-public.Executor.getFunctions",
            "type": "Function",
            "label": "getFunctions",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 122
            }
          },
          {
            "id": "def-public.Executor.registerType",
            "type": "Function",
            "label": "registerType",
            "signature": [
              "(typeDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "typeDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 127
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 126
            }
          },
          {
            "id": "def-public.Executor.getType",
            "type": "Function",
            "label": "getType",
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | undefined"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 135
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 135
            }
          },
          {
            "id": "def-public.Executor.getTypes",
            "type": "Function",
            "label": "getTypes",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 139
            }
          },
          {
            "id": "def-public.Executor.extendContext",
            "type": "Function",
            "label": "extendContext",
            "signature": [
              "(extraContext: Record<string, unknown>) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "extraContext",
                "isRequired": true,
                "signature": [
                  "Record<string, unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 143
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 143
            }
          },
          {
            "id": "def-public.Executor.context",
            "type": "Object",
            "label": "context",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 147
            },
            "signature": [
              "Record<string, unknown>"
            ]
          },
          {
            "id": "def-public.Executor.run",
            "type": "Function",
            "label": "run",
            "signature": [
              "<Input, Output>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              ") => Promise<Output>"
            ],
            "description": [
              "\nExecute expression and return result.\n"
            ],
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  "string | ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [
                  "Expression AST or a string representing expression."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 160
                }
              },
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [
                  "Initial input to the first expression function."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 161
                }
              },
              {
                "type": "Object",
                "label": "params",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionExecutionParams",
                    "text": "ExpressionExecutionParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 162
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 159
            }
          },
          {
            "id": "def-public.Executor.createExecution",
            "type": "Function",
            "label": "createExecution",
            "signature": [
              "<Input = unknown, Output = unknown>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Execution",
                "text": "Execution"
              },
              "<Input, Output, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DefaultInspectorAdapters",
                "text": "DefaultInspectorAdapters"
              },
              ">"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  "string | ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 170
                }
              },
              {
                "type": "Object",
                "label": "params",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionExecutionParams",
                    "text": "ExpressionExecutionParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 171
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 169
            }
          },
          {
            "id": "def-public.Executor.inject",
            "type": "Function",
            "label": "inject",
            "signature": [
              "(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 217
                }
              },
              {
                "type": "Array",
                "label": "references",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "common",
                    "docId": "kibCorePluginApi",
                    "section": "def-common.SavedObjectReference",
                    "text": "SavedObjectReference"
                  },
                  "[]"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 217
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 217
            }
          },
          {
            "id": "def-public.Executor.extract",
            "type": "Function",
            "label": "extract",
            "signature": [
              "(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ") => { state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              "; references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]; }"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 223
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 223
            }
          },
          {
            "id": "def-public.Executor.telemetry",
            "type": "Function",
            "label": "telemetry",
            "signature": [
              "(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", telemetryData: Record<string, any>) => Record<string, any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 233
                }
              },
              {
                "type": "Object",
                "label": "telemetryData",
                "isRequired": true,
                "signature": [
                  "Record<string, any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 233
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 233
            }
          },
          {
            "id": "def-public.Executor.migrate",
            "type": "Function",
            "label": "migrate",
            "signature": [
              "(ast: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ", version: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.SerializableState",
                    "text": "SerializableState"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 241
                }
              },
              {
                "type": "string",
                "label": "version",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 241
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 241
            }
          },
          {
            "id": "def-public.Executor.fork",
            "type": "Function",
            "label": "fork",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              "<Context>"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 250
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/executor.ts",
          "lineNumber": 80
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionFunction",
        "type": "Class",
        "tags": [],
        "label": "ExpressionFunction",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunction",
            "text": "ExpressionFunction"
          },
          " implements ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableState",
            "text": "PersistableState"
          },
          "<Record<string, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstArgument",
            "text": "ExpressionAstArgument"
          },
          "[]>>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.name",
            "type": "string",
            "label": "name",
            "description": [
              "\nName of function"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 22
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [
              "\nAliases that can be used instead of `name`."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 27
            },
            "signature": [
              "string[]"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.type",
            "type": "string",
            "label": "type",
            "description": [
              "\nReturn type of function. This SHOULD be supplied. We use it for UI\nand autocomplete hinting. We may also use it for optimizations in\nthe future."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 34
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.fn",
            "type": "Function",
            "label": "fn",
            "description": [
              "\nFunction to run function (context, args)"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 39
            },
            "signature": [
              "(input: any, params: Record<string, any>, handlers: object) => any"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nA short help text."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 44
            }
          },
          {
            "id": "def-public.ExpressionFunction.args",
            "type": "Object",
            "tags": [],
            "children": [],
            "description": [
              "\nSpecification of expression function parameters."
            ],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 49
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [
              "\nType of inputs that this function supports."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 54
            },
            "signature": [
              "string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.disabled",
            "type": "boolean",
            "label": "disabled",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 56
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.telemetry",
            "type": "Function",
            "label": "telemetry",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 57
            },
            "signature": [
              "(state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>, telemetryData: Record<string, any>) => Record<string, any>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.extract",
            "type": "Function",
            "label": "extract",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 61
            },
            "signature": [
              "(state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>) => { state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>; references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]; }"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.inject",
            "type": "Function",
            "label": "inject",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 64
            },
            "signature": [
              "(state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>, references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]) => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunction.migrations",
            "type": "Object",
            "label": "migrations",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 68
            },
            "signature": [
              "{ [key: string]: (state: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ") => ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              "; }"
            ]
          },
          {
            "id": "def-public.ExpressionFunction.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
                  "lineNumber": 72
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 72
            }
          },
          {
            "id": "def-public.ExpressionFunction.accepts",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "type",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
                  "lineNumber": 107
                }
              }
            ],
            "signature": [
              "(type: string) => boolean"
            ],
            "description": [],
            "label": "accepts",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 107
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
          "lineNumber": 18
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionFunctionParameter",
        "type": "Class",
        "tags": [],
        "label": "ExpressionFunctionParameter",
        "description": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionParameter.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 12
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionParameter.required",
            "type": "boolean",
            "label": "required",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 13
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionParameter.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 14
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionParameter.types",
            "type": "Array",
            "label": "types",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 15
            },
            "signature": [
              "string[]"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionParameter.default",
            "type": "Any",
            "label": "default",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 16
            },
            "signature": [
              "any"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionParameter.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 17
            },
            "signature": [
              "string[]"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionParameter.multi",
            "type": "boolean",
            "label": "multi",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 18
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionParameter.resolve",
            "type": "boolean",
            "label": "resolve",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 19
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionParameter.options",
            "type": "Array",
            "label": "options",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 20
            },
            "signature": [
              "any[]"
            ]
          },
          {
            "id": "def-public.ExpressionFunctionParameter.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
                  "lineNumber": 22
                }
              },
              {
                "type": "CompoundType",
                "label": "arg",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ArgumentType",
                    "text": "ArgumentType"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
                  "lineNumber": 22
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 22
            }
          },
          {
            "id": "def-public.ExpressionFunctionParameter.accepts",
            "type": "Function",
            "label": "accepts",
            "signature": [
              "(type: string) => boolean"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "type",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
                  "lineNumber": 40
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 40
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
          "lineNumber": 11
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionRenderer",
        "type": "Class",
        "tags": [],
        "label": "ExpressionRenderer",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderer",
            "text": "ExpressionRenderer"
          },
          "<Config>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionRenderer.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 12
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderer.displayName",
            "type": "string",
            "label": "displayName",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 13
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderer.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 14
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderer.validate",
            "type": "Function",
            "label": "validate",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 15
            },
            "signature": [
              "() => void | Error"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderer.reuseDomNode",
            "type": "boolean",
            "label": "reuseDomNode",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderer.render",
            "type": "Function",
            "label": "render",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 17
            },
            "signature": [
              "(domNode: HTMLElement, config: Config, handlers: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.IInterpreterRenderHandlers",
                "text": "IInterpreterRenderHandlers"
              },
              ") => void | Promise<void>"
            ]
          },
          {
            "id": "def-public.ExpressionRenderer.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "config",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionRenderDefinition",
                    "text": "ExpressionRenderDefinition"
                  },
                  "<Config>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
                  "lineNumber": 19
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 19
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
          "lineNumber": 11
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionRendererRegistry",
        "type": "Class",
        "tags": [],
        "label": "ExpressionRendererRegistry",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRendererRegistry",
            "text": "ExpressionRendererRegistry"
          },
          " implements ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderer",
            "text": "ExpressionRenderer"
          },
          "<unknown>>"
        ],
        "children": [
          {
            "id": "def-public.ExpressionRendererRegistry.register",
            "type": "Function",
            "label": "register",
            "signature": [
              "(definition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionRenderDefinition",
                "text": "AnyExpressionRenderDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionRenderDefinition",
                "text": "AnyExpressionRenderDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "definition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionRenderDefinition",
                    "text": "AnyExpressionRenderDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionRenderDefinition",
                    "text": "AnyExpressionRenderDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
                  "lineNumber": 19
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 19
            }
          },
          {
            "id": "def-public.ExpressionRendererRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown> | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
                  "lineNumber": 25
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 25
            }
          },
          {
            "id": "def-public.ExpressionRendererRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown>>"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 29
            }
          },
          {
            "id": "def-public.ExpressionRendererRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown>[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 39
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
          "lineNumber": 13
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionRenderHandler",
        "type": "Class",
        "tags": [],
        "label": "ExpressionRenderHandler",
        "description": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionRenderHandler.render$",
            "type": "Object",
            "label": "render$",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/render.ts",
              "lineNumber": 38
            },
            "signature": [
              "Observable",
              "<number>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderHandler.update$",
            "type": "Object",
            "label": "update$",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/render.ts",
              "lineNumber": 39
            },
            "signature": [
              "Observable",
              "<UpdateValue | null>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderHandler.events$",
            "type": "Object",
            "label": "events$",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/render.ts",
              "lineNumber": 40
            },
            "signature": [
              "Observable",
              "<",
              {
                "pluginId": "expressions",
                "scope": "public",
                "docId": "kibExpressionsPluginApi",
                "section": "def-public.ExpressionRendererEvent",
                "text": "ExpressionRendererEvent"
              },
              ">"
            ]
          },
          {
            "id": "def-public.ExpressionRenderHandler.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "element",
                "isRequired": true,
                "signature": [
                  "HTMLElement"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/render.ts",
                  "lineNumber": 52
                }
              },
              {
                "type": "Object",
                "label": "{\n      onRenderError,\n      renderMode,\n      syncColors,\n      hasCompatibleActions = async () => false,\n    }",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "public",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-public.ExpressionRenderHandlerParams",
                    "text": "ExpressionRenderHandlerParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/render.ts",
                  "lineNumber": 53
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/public/render.ts",
              "lineNumber": 51
            }
          },
          {
            "id": "def-public.ExpressionRenderHandler.render",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/render.ts",
                  "lineNumber": 102
                }
              },
              {
                "type": "Any",
                "label": "uiState",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/render.ts",
                  "lineNumber": 102
                }
              }
            ],
            "signature": [
              "(value: any, uiState?: any) => Promise<void>"
            ],
            "description": [],
            "label": "render",
            "source": {
              "path": "src/plugins/expressions/public/render.ts",
              "lineNumber": 102
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionRenderHandler.destroy",
            "type": "Function",
            "children": [],
            "signature": [
              "() => void"
            ],
            "description": [],
            "label": "destroy",
            "source": {
              "path": "src/plugins/expressions/public/render.ts",
              "lineNumber": 134
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionRenderHandler.getElement",
            "type": "Function",
            "children": [],
            "signature": [
              "() => HTMLElement"
            ],
            "description": [],
            "label": "getElement",
            "source": {
              "path": "src/plugins/expressions/public/render.ts",
              "lineNumber": 143
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionRenderHandler.handleRenderError",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "error",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "public",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-public.ExpressionRenderError",
                    "text": "ExpressionRenderError"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/render.ts",
                  "lineNumber": 147
                }
              }
            ],
            "signature": [
              "(error: ",
              {
                "pluginId": "expressions",
                "scope": "public",
                "docId": "kibExpressionsPluginApi",
                "section": "def-public.ExpressionRenderError",
                "text": "ExpressionRenderError"
              },
              ") => void"
            ],
            "description": [],
            "label": "handleRenderError",
            "source": {
              "path": "src/plugins/expressions/public/render.ts",
              "lineNumber": 147
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "source": {
          "path": "src/plugins/expressions/public/render.ts",
          "lineNumber": 37
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionsInspectorAdapter",
        "type": "Class",
        "tags": [],
        "label": "ExpressionsInspectorAdapter",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionsInspectorAdapter",
            "text": "ExpressionsInspectorAdapter"
          },
          " extends ",
          "EventEmitter"
        ],
        "children": [
          {
            "id": "def-public.ExpressionsInspectorAdapter.logAST",
            "type": "Function",
            "label": "logAST",
            "signature": [
              "(ast: any) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "Any",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/util/expressions_inspector_adapter.ts",
                  "lineNumber": 14
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/util/expressions_inspector_adapter.ts",
              "lineNumber": 14
            }
          },
          {
            "id": "def-public.ExpressionsInspectorAdapter.ast",
            "type": "Any",
            "label": "ast",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/util/expressions_inspector_adapter.ts",
              "lineNumber": 19
            },
            "signature": [
              "any"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/util/expressions_inspector_adapter.ts",
          "lineNumber": 11
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionsPublicPlugin",
        "type": "Class",
        "tags": [],
        "label": "ExpressionsPublicPlugin",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.ExpressionsPublicPlugin",
            "text": "ExpressionsPublicPlugin"
          },
          " implements ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Plugin",
            "text": "Plugin"
          },
          "<Pick<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionsService",
            "text": "ExpressionsService"
          },
          ", \"getType\" | \"getFunction\" | \"getFunctions\" | \"getRenderer\" | \"getRenderers\" | \"getTypes\" | \"registerFunction\" | \"registerRenderer\" | \"registerType\" | \"run\" | \"fork\">, ",
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.ExpressionsStart",
            "text": "ExpressionsStart"
          },
          ", object, object>"
        ],
        "children": [
          {
            "id": "def-public.ExpressionsPublicPlugin.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "initializerContext",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.PluginInitializerContext",
                    "text": "PluginInitializerContext"
                  },
                  "<object>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/plugin.ts",
                  "lineNumber": 40
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/public/plugin.ts",
              "lineNumber": 40
            }
          },
          {
            "id": "def-public.ExpressionsPublicPlugin.setup",
            "type": "Function",
            "label": "setup",
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreSetup",
                "text": "CoreSetup"
              },
              "<object, unknown>) => Pick<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              },
              ", \"getType\" | \"getFunction\" | \"getFunctions\" | \"getRenderer\" | \"getRenderers\" | \"getTypes\" | \"registerFunction\" | \"registerRenderer\" | \"registerType\" | \"run\" | \"fork\">"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "core",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.CoreSetup",
                    "text": "CoreSetup"
                  },
                  "<object, unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/plugin.ts",
                  "lineNumber": 56
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/public/plugin.ts",
              "lineNumber": 56
            }
          },
          {
            "id": "def-public.ExpressionsPublicPlugin.start",
            "type": "Function",
            "label": "start",
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreStart",
                "text": "CoreStart"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "public",
                "docId": "kibExpressionsPluginApi",
                "section": "def-public.ExpressionsStart",
                "text": "ExpressionsStart"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "core",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.CoreStart",
                    "text": "CoreStart"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/plugin.ts",
                  "lineNumber": 70
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/public/plugin.ts",
              "lineNumber": 70
            }
          },
          {
            "id": "def-public.ExpressionsPublicPlugin.stop",
            "type": "Function",
            "label": "stop",
            "signature": [
              "() => void"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/public/plugin.ts",
              "lineNumber": 86
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/public/plugin.ts",
          "lineNumber": 37
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionsPublicPlugin",
        "type": "Class",
        "tags": [],
        "label": "ExpressionsPublicPlugin",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.ExpressionsPublicPlugin",
            "text": "ExpressionsPublicPlugin"
          },
          " implements ",
          {
            "pluginId": "core",
            "scope": "public",
            "docId": "kibCorePluginApi",
            "section": "def-public.Plugin",
            "text": "Plugin"
          },
          "<Pick<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionsService",
            "text": "ExpressionsService"
          },
          ", \"getType\" | \"getFunction\" | \"getFunctions\" | \"getRenderer\" | \"getRenderers\" | \"getTypes\" | \"registerFunction\" | \"registerRenderer\" | \"registerType\" | \"run\" | \"fork\">, ",
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.ExpressionsStart",
            "text": "ExpressionsStart"
          },
          ", object, object>"
        ],
        "children": [
          {
            "id": "def-public.ExpressionsPublicPlugin.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "initializerContext",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.PluginInitializerContext",
                    "text": "PluginInitializerContext"
                  },
                  "<object>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/plugin.ts",
                  "lineNumber": 40
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/public/plugin.ts",
              "lineNumber": 40
            }
          },
          {
            "id": "def-public.ExpressionsPublicPlugin.setup",
            "type": "Function",
            "label": "setup",
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreSetup",
                "text": "CoreSetup"
              },
              "<object, unknown>) => Pick<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              },
              ", \"getType\" | \"getFunction\" | \"getFunctions\" | \"getRenderer\" | \"getRenderers\" | \"getTypes\" | \"registerFunction\" | \"registerRenderer\" | \"registerType\" | \"run\" | \"fork\">"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "core",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.CoreSetup",
                    "text": "CoreSetup"
                  },
                  "<object, unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/plugin.ts",
                  "lineNumber": 56
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/public/plugin.ts",
              "lineNumber": 56
            }
          },
          {
            "id": "def-public.ExpressionsPublicPlugin.start",
            "type": "Function",
            "label": "start",
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "public",
                "docId": "kibCorePluginApi",
                "section": "def-public.CoreStart",
                "text": "CoreStart"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "public",
                "docId": "kibExpressionsPluginApi",
                "section": "def-public.ExpressionsStart",
                "text": "ExpressionsStart"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "core",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "public",
                    "docId": "kibCorePluginApi",
                    "section": "def-public.CoreStart",
                    "text": "CoreStart"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/public/plugin.ts",
                  "lineNumber": 70
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/public/plugin.ts",
              "lineNumber": 70
            }
          },
          {
            "id": "def-public.ExpressionsPublicPlugin.stop",
            "type": "Function",
            "label": "stop",
            "signature": [
              "() => void"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/public/plugin.ts",
              "lineNumber": 86
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/public/plugin.ts",
          "lineNumber": 37
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionsService",
        "type": "Class",
        "tags": [],
        "label": "ExpressionsService",
        "description": [
          "\n`ExpressionsService` class is used for multiple purposes:\n\n1. It implements the same Expressions service that can be used on both:\n   (1) server-side and (2) browser-side.\n2. It implements the same Expressions service that users can fork/clone,\n   thus have their own instance of the Expressions plugin.\n3. `ExpressionsService` defines the public contracts of *setup* and *start*\n   Kibana Platform life-cycles for ease-of-use on server-side and browser-side.\n4. `ExpressionsService` creates a bound version of all exported contract functions.\n5. Functions are bound the way there are:\n\n   ```ts\n   registerFunction = (...args: Parameters<Executor['registerFunction']>\n     ): ReturnType<Executor['registerFunction']> => this.executor.registerFunction(...args);\n   ```\n\n   so that JSDoc appears in developers IDE when they use those `plugins.expressions.registerFunction(`."
        ],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionsService",
            "text": "ExpressionsService"
          },
          " implements ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableStateService",
            "text": "PersistableStateService"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          ">"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionsService.executor",
            "type": "Object",
            "label": "executor",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 175
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              "<Record<string, unknown>>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionsService.renderers",
            "type": "Object",
            "label": "renderers",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 176
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRendererRegistry",
                "text": "ExpressionRendererRegistry"
              }
            ]
          },
          {
            "id": "def-public.ExpressionsService.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "{\n    executor = Executor.createWithDefaults(),\n    renderers = new ExpressionRendererRegistry(),\n  }",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionServiceParams",
                    "text": "ExpressionServiceParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 178
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 178
            }
          },
          {
            "id": "def-public.ExpressionsService.registerFunction",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 219
                }
              }
            ],
            "signature": [
              "(functionDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ")) => void"
            ],
            "description": [
              "\nRegister an expression function, which will be possible to execute as\npart of the expression pipeline.\n\nBelow we register a function which simply sleeps for given number of\nmilliseconds to delay the execution and outputs its input as-is.\n\n```ts\nexpressions.registerFunction({\n  name: 'sleep',\n  args: {\n    time: {\n      aliases: ['_'],\n      help: 'Time in milliseconds for how long to sleep',\n      types: ['number'],\n    },\n  },\n  help: '',\n  fn: async (input, args, context) => {\n    await new Promise(r => setTimeout(r, args.time));\n    return input;\n  },\n}\n```\n\nThe actual function is defined in the `fn` key. The function can be *async*.\nIt receives three arguments: (1) `input` is the output of the previous function\nor the initial input of the expression if the function is first in chain;\n(2) `args` are function arguments as defined in expression string, that can\nbe edited by user (e.g in case of Canvas); (3) `context` is a shared object\npassed to all functions that can be used for side-effects."
            ],
            "label": "registerFunction",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 218
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.registerType",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "typeDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 223
                }
              }
            ],
            "signature": [
              "(typeDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "label": "registerType",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 222
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.registerRenderer",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "definition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionRenderDefinition",
                    "text": "AnyExpressionRenderDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionRenderDefinition",
                    "text": "AnyExpressionRenderDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 227
                }
              }
            ],
            "signature": [
              "(definition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionRenderDefinition",
                "text": "AnyExpressionRenderDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionRenderDefinition",
                "text": "AnyExpressionRenderDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "label": "registerRenderer",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 226
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.run",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  "string | ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 230
                }
              },
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 230
                }
              },
              {
                "type": "Object",
                "label": "params",
                "isRequired": false,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionExecutionParams",
                    "text": "ExpressionExecutionParams"
                  },
                  " | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 230
                }
              }
            ],
            "signature": [
              "<Input, Output>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              " | undefined) => Promise<Output>"
            ],
            "description": [],
            "label": "run",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 230
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.getFunction",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 233
                }
              }
            ],
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | undefined"
            ],
            "description": [],
            "label": "getFunction",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 233
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.getFunctions",
            "type": "Function",
            "children": [],
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ],
            "description": [
              "\nReturns POJO map of all registered expression functions, where keys are\nnames of the functions and values are `ExpressionFunction` instances."
            ],
            "label": "getFunctions",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 240
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.getRenderer",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 243
                }
              }
            ],
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown> | null"
            ],
            "description": [],
            "label": "getRenderer",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 243
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.getRenderers",
            "type": "Function",
            "children": [],
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown>>"
            ],
            "description": [
              "\nReturns POJO map of all registered expression renderers, where keys are\nnames of the renderers and values are `ExpressionRenderer` instances."
            ],
            "label": "getRenderers",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 250
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.getType",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 253
                }
              }
            ],
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | undefined"
            ],
            "description": [],
            "label": "getType",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 253
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.getTypes",
            "type": "Function",
            "children": [],
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ],
            "description": [
              "\nReturns POJO map of all registered expression types, where keys are\nnames of the types and values are `ExpressionType` instances."
            ],
            "label": "getTypes",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 260
            },
            "tags": [],
            "returnComment": []
          },
          {
            "tags": [],
            "id": "def-public.ExpressionsService.execute",
            "type": "Function",
            "label": "execute",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 262
            },
            "signature": [
              "<Input = unknown, Output = unknown>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              " | undefined) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContract",
                "text": "ExecutionContract"
              },
              "<Input, Output, unknown>"
            ]
          },
          {
            "id": "def-public.ExpressionsService.fork",
            "type": "Function",
            "children": [],
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              }
            ],
            "description": [],
            "label": "fork",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 268
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.telemetry",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 281
                }
              },
              {
                "type": "Object",
                "label": "telemetryData",
                "isRequired": true,
                "signature": [
                  "Record<string, any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 282
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", telemetryData?: Record<string, any>) => Record<string, any>"
            ],
            "description": [
              "\nExtracts telemetry from expression AST"
            ],
            "label": "telemetry",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 280
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionsService.extract",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 292
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ") => { state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              "; references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]; }"
            ],
            "description": [
              "\nExtracts saved object references from expression AST"
            ],
            "label": "extract",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 292
            },
            "tags": [],
            "returnComment": [
              "new expression AST with references removed and array of references"
            ]
          },
          {
            "id": "def-public.ExpressionsService.inject",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 302
                }
              },
              {
                "type": "Array",
                "label": "references",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "common",
                    "docId": "kibCorePluginApi",
                    "section": "def-common.SavedObjectReference",
                    "text": "SavedObjectReference"
                  },
                  "[]"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 302
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [
              "\nInjects saved object references into expression AST"
            ],
            "label": "inject",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 302
            },
            "tags": [],
            "returnComment": [
              "new expression AST with references injected"
            ]
          },
          {
            "id": "def-public.ExpressionsService.migrate",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.SerializableState",
                    "text": "SerializableState"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 312
                }
              },
              {
                "type": "string",
                "label": "version",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 312
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ", version: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [
              "\nRuns the migration (if it exists) for specified version. This will run a single migration step (ie from 7.10.0 to 7.10.1)"
            ],
            "label": "migrate",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 312
            },
            "tags": [],
            "returnComment": [
              "new migrated expression AST"
            ]
          },
          {
            "id": "def-public.ExpressionsService.setup",
            "type": "Function",
            "label": "setup",
            "signature": [
              "() => Pick<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              },
              ", \"getType\" | \"getFunction\" | \"getFunctions\" | \"getRenderer\" | \"getRenderers\" | \"getTypes\" | \"registerFunction\" | \"registerRenderer\" | \"registerType\" | \"run\" | \"fork\">"
            ],
            "description": [
              "\nReturns Kibana Platform *setup* life-cycle contract. Useful to return the\nsame contract on server-side and browser-side."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 320
            }
          },
          {
            "id": "def-public.ExpressionsService.start",
            "type": "Function",
            "label": "start",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsServiceStart",
                "text": "ExpressionsServiceStart"
              }
            ],
            "description": [
              "\nReturns Kibana Platform *start* life-cycle contract. Useful to return the\nsame contract on server-side and browser-side."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 328
            }
          },
          {
            "id": "def-public.ExpressionsService.stop",
            "type": "Function",
            "label": "stop",
            "signature": [
              "() => void"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 332
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/service/expressions_services.ts",
          "lineNumber": 174
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionType",
        "type": "Class",
        "tags": [],
        "label": "ExpressionType",
        "description": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionType.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 13
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionType.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nA short help text."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 18
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionType.validate",
            "type": "Function",
            "label": "validate",
            "description": [
              "\nType validation, useful for checking function output."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 23
            },
            "signature": [
              "(type: any) => void | Error"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionType.create",
            "type": "Unknown",
            "label": "create",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 25
            },
            "signature": [
              "unknown"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionType.serialize",
            "type": "Function",
            "label": "serialize",
            "description": [
              "\nOptional serialization (used when passing context around client/server)."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 30
            },
            "signature": [
              "((value: any) => any) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionType.deserialize",
            "type": "Function",
            "label": "deserialize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 31
            },
            "signature": [
              "((serialized: any) => any) | undefined"
            ]
          },
          {
            "id": "def-public.ExpressionType.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "definition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 33
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 33
            }
          },
          {
            "id": "def-public.ExpressionType.getToFn",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "typeName",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 48
                }
              }
            ],
            "signature": [
              "(typeName: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<any, any> | undefined"
            ],
            "description": [],
            "label": "getToFn",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 47
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionType.getFromFn",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "typeName",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 53
                }
              }
            ],
            "signature": [
              "(typeName: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<any, any> | undefined"
            ],
            "description": [],
            "label": "getFromFn",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 52
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionType.castsTo",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 57
                }
              }
            ],
            "signature": [
              "(value: any) => boolean"
            ],
            "description": [],
            "label": "castsTo",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 57
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionType.castsFrom",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 59
                }
              }
            ],
            "signature": [
              "(value: any) => boolean"
            ],
            "description": [],
            "label": "castsFrom",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 59
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionType.to",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 61
                }
              },
              {
                "type": "string",
                "label": "toTypeName",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 61
                }
              },
              {
                "type": "Object",
                "label": "types",
                "isRequired": true,
                "signature": [
                  "Record<string, ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionType",
                    "text": "ExpressionType"
                  },
                  ">"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 61
                }
              }
            ],
            "signature": [
              "(value: any, toTypeName: string, types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">) => any"
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 61
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-public.ExpressionType.from",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 73
                }
              },
              {
                "type": "Object",
                "label": "types",
                "isRequired": true,
                "signature": [
                  "Record<string, ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionType",
                    "text": "ExpressionType"
                  },
                  ">"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 73
                }
              }
            ],
            "signature": [
              "(value: any, types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">) => any"
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 73
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
          "lineNumber": 12
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.FunctionsRegistry",
        "type": "Class",
        "tags": [],
        "label": "FunctionsRegistry",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.FunctionsRegistry",
            "text": "FunctionsRegistry"
          },
          " implements ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunction",
            "text": "ExpressionFunction"
          },
          ">"
        ],
        "children": [
          {
            "id": "def-public.FunctionsRegistry.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "executor",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Executor",
                    "text": "Executor"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 59
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 59
            }
          },
          {
            "id": "def-public.FunctionsRegistry.register",
            "type": "Function",
            "label": "register",
            "signature": [
              "(functionDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 62
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 61
            }
          },
          {
            "id": "def-public.FunctionsRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 67
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 67
            }
          },
          {
            "id": "def-public.FunctionsRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 71
            }
          },
          {
            "id": "def-public.FunctionsRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              "[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 75
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/executor.ts",
          "lineNumber": 58
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.TablesAdapter",
        "type": "Class",
        "tags": [],
        "label": "TablesAdapter",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.TablesAdapter",
            "text": "TablesAdapter"
          },
          " extends ",
          "EventEmitter"
        ],
        "children": [
          {
            "id": "def-public.TablesAdapter.logDatatable",
            "type": "Function",
            "label": "logDatatable",
            "signature": [
              "(name: string, datatable: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              ") => void"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/util/tables_adapter.ts",
                  "lineNumber": 15
                }
              },
              {
                "type": "Object",
                "label": "datatable",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/util/tables_adapter.ts",
                  "lineNumber": 15
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/util/tables_adapter.ts",
              "lineNumber": 15
            }
          },
          {
            "id": "def-public.TablesAdapter.tables",
            "type": "Object",
            "label": "tables",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/util/tables_adapter.ts",
              "lineNumber": 20
            },
            "signature": [
              "{ [key: string]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              "; }"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/util/tables_adapter.ts",
          "lineNumber": 12
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.TypesRegistry",
        "type": "Class",
        "tags": [],
        "label": "TypesRegistry",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.TypesRegistry",
            "text": "TypesRegistry"
          },
          " implements ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionType",
            "text": "ExpressionType"
          },
          ">"
        ],
        "children": [
          {
            "id": "def-public.TypesRegistry.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "executor",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Executor",
                    "text": "Executor"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 37
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 37
            }
          },
          {
            "id": "def-public.TypesRegistry.register",
            "type": "Function",
            "label": "register",
            "signature": [
              "(typeDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "typeDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 40
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 39
            }
          },
          {
            "id": "def-public.TypesRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 45
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 45
            }
          },
          {
            "id": "def-public.TypesRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 49
            }
          },
          {
            "id": "def-public.TypesRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              "[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 53
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/executor.ts",
          "lineNumber": 36
        },
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "id": "def-public.buildExpression",
        "type": "Function",
        "label": "buildExpression",
        "signature": [
          "(initialState: string | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          " | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunctionBuilder",
            "text": "ExpressionAstFunctionBuilder"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.AnyExpressionFunctionDefinition",
            "text": "AnyExpressionFunctionDefinition"
          },
          ">[] | undefined) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpressionBuilder",
            "text": "ExpressionAstExpressionBuilder"
          }
        ],
        "description": [
          "\nMakes it easy to progressively build, update, and traverse an\nexpression AST. You can either start with an empty AST, or\nprovide an expression string, AST, or array of expression\nfunction builders to use as initial state.\n"
        ],
        "children": [
          {
            "type": "CompoundType",
            "label": "initialState",
            "isRequired": false,
            "signature": [
              "string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              " | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunctionBuilder",
                "text": "ExpressionAstFunctionBuilder"
              },
              "<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ">[] | undefined"
            ],
            "description": [
              "Optional. An expression string, AST, or array of `ExpressionAstFunctionBuilder[]`."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 98
            }
          }
        ],
        "tags": [
          "return"
        ],
        "returnComment": [
          "`this`"
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_expression.ts",
          "lineNumber": 97
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.buildExpressionFunction",
        "type": "Function",
        "label": "buildExpressionFunction",
        "signature": [
          "(fnName: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.InferFunctionDefinition",
            "text": "InferFunctionDefinition"
          },
          "<FnDef>[\"name\"], initialArgs: { [K in keyof FunctionArgs<FnDef>]: FunctionArgs<FnDef>[K] | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpressionBuilder",
            "text": "ExpressionAstExpressionBuilder"
          },
          " | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpressionBuilder",
            "text": "ExpressionAstExpressionBuilder"
          },
          "[]; }) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunctionBuilder",
            "text": "ExpressionAstFunctionBuilder"
          },
          "<FnDef>"
        ],
        "description": [
          "\nManages an AST for a single expression function. The return value\ncan be provided to `buildExpression` to add this function to an\nexpression.\n\nNote that to preserve type safety and ensure no args are missing,\nall required arguments for the specified function must be provided\nup front. If desired, they can be changed or removed later.\n"
        ],
        "children": [
          {
            "type": "Uncategorized",
            "label": "fnName",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.InferFunctionDefinition",
                "text": "InferFunctionDefinition"
              },
              "<FnDef>[\"name\"]"
            ],
            "description": [
              "String representing the name of this expression function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 155
            }
          },
          {
            "type": "Object",
            "label": "initialArgs",
            "isRequired": true,
            "signature": [
              "{ [K in keyof FunctionArgs<FnDef>]: FunctionArgs<FnDef>[K] | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              "[]; }"
            ],
            "description": [
              "Object containing the arguments to this function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 163
            }
          }
        ],
        "tags": [
          "return"
        ],
        "returnComment": [
          "`this`"
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_function.ts",
          "lineNumber": 152
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.format",
        "type": "Function",
        "label": "format",
        "signature": [
          "(ast: T, type: T extends ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          " ? \"expression\" : \"argument\") => string"
        ],
        "description": [],
        "children": [
          {
            "type": "Uncategorized",
            "label": "ast",
            "isRequired": true,
            "signature": [
              "T"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/format.ts",
              "lineNumber": 15
            }
          },
          {
            "type": "Uncategorized",
            "label": "type",
            "isRequired": true,
            "signature": [
              "T extends ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              " ? \"expression\" : \"argument\""
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/format.ts",
              "lineNumber": 16
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/format.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.formatExpression",
        "type": "Function",
        "label": "formatExpression",
        "signature": [
          "(ast: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          ") => string"
        ],
        "description": [
          "\nGiven expression pipeline AST, returns formatted string.\n"
        ],
        "children": [
          {
            "type": "Object",
            "label": "ast",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [
              "Expression pipeline AST."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/format_expression.ts",
              "lineNumber": 17
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/format_expression.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.isExpressionAstBuilder",
        "type": "Function",
        "label": "isExpressionAstBuilder",
        "signature": [
          "(val: any) => boolean"
        ],
        "description": [
          "\nType guard that checks whether a given value is an\n`ExpressionAstExpressionBuilder`. This is useful when working\nwith subexpressions, where you might be retrieving a function\nargument, and need to know whether it is an expression builder\ninstance which you can perform operations on.\n"
        ],
        "children": [
          {
            "type": "Any",
            "label": "val",
            "isRequired": true,
            "signature": [
              "any"
            ],
            "description": [
              "Value you want to check."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 35
            }
          }
        ],
        "tags": [
          "return"
        ],
        "returnComment": [
          "boolean"
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_expression.ts",
          "lineNumber": 35
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.parse",
        "type": "Function",
        "label": "parse",
        "signature": [
          "(expression: E, startRule: S) => S extends \"expression\" ? ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          " : ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstArgument",
            "text": "ExpressionAstArgument"
          }
        ],
        "description": [],
        "children": [
          {
            "type": "Uncategorized",
            "label": "expression",
            "isRequired": true,
            "signature": [
              "E"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/parse.ts",
              "lineNumber": 15
            }
          },
          {
            "type": "Uncategorized",
            "label": "startRule",
            "isRequired": true,
            "signature": [
              "S"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/parse.ts",
              "lineNumber": 16
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/parse.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.parseExpression",
        "type": "Function",
        "label": "parseExpression",
        "signature": [
          "(expression: string) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          }
        ],
        "description": [
          "\nGiven expression pipeline string, returns parsed AST.\n"
        ],
        "children": [
          {
            "type": "string",
            "label": "expression",
            "isRequired": true,
            "signature": [
              "string"
            ],
            "description": [
              "Expression pipeline string."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/parse_expression.ts",
              "lineNumber": 17
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/parse_expression.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ReactExpressionRenderer",
        "type": "Function",
        "children": [
          {
            "type": "Object",
            "label": "{\n  className,\n  dataAttrs,\n  padding,\n  renderError,\n  expression,\n  onEvent,\n  onData$,\n  reload$,\n  debounce,\n  ...expressionLoaderOptions\n}",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "public",
                "docId": "kibExpressionsPluginApi",
                "section": "def-public.ReactExpressionRendererProps",
                "text": "ReactExpressionRendererProps"
              }
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
              "lineNumber": 57
            }
          }
        ],
        "signature": [
          "({ className, dataAttrs, padding, renderError, expression, onEvent, onData$, reload$, debounce, ...expressionLoaderOptions }: ",
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.ReactExpressionRendererProps",
            "text": "ReactExpressionRendererProps"
          },
          ") => JSX.Element"
        ],
        "description": [],
        "label": "ReactExpressionRenderer",
        "source": {
          "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
          "lineNumber": 57
        },
        "tags": [],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "id": "def-public.Datatable",
        "type": "Interface",
        "label": "Datatable",
        "description": [
          "\nA `Datatable` in Canvas is a unique structure that represents tabulated data."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.Datatable.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 99
            },
            "signature": [
              "\"datatable\""
            ]
          },
          {
            "tags": [],
            "id": "def-public.Datatable.columns",
            "type": "Array",
            "label": "columns",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 100
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DatatableColumn",
                "text": "DatatableColumn"
              },
              "[]"
            ]
          },
          {
            "tags": [],
            "id": "def-public.Datatable.rows",
            "type": "Array",
            "label": "rows",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 101
            },
            "signature": [
              "Record<string, any>[]"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 98
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.DatatableColumn",
        "type": "Interface",
        "label": "DatatableColumn",
        "description": [
          "\nThis type represents the shape of a column in a `Datatable`."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.DatatableColumn.id",
            "type": "string",
            "label": "id",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 90
            }
          },
          {
            "tags": [],
            "id": "def-public.DatatableColumn.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 91
            }
          },
          {
            "tags": [],
            "id": "def-public.DatatableColumn.meta",
            "type": "Object",
            "label": "meta",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 92
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DatatableColumnMeta",
                "text": "DatatableColumnMeta"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 89
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExecutionContext",
        "type": "Interface",
        "label": "ExecutionContext",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<InspectorAdapters, ExecutionContextSearch>"
        ],
        "description": [
          "\n`ExecutionContext` is an object available to all functions during a single execution;\nit provides various methods to perform side-effects."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExecutionContext.getSearchContext",
            "type": "Function",
            "label": "getSearchContext",
            "description": [
              "\nGet search context of the expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 28
            },
            "signature": [
              "() => ExecutionContextSearch"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionContext.variables",
            "type": "Object",
            "label": "variables",
            "description": [
              "\nContext variables that can be consumed using `var` and `var_set` functions."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 33
            },
            "signature": [
              "Record<string, unknown>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionContext.types",
            "type": "Object",
            "label": "types",
            "description": [
              "\nA map of available expression types."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 38
            },
            "signature": [
              "Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionContext.abortSignal",
            "type": "Object",
            "label": "abortSignal",
            "description": [
              "\nAdds ability to abort current execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 43
            },
            "signature": [
              "AbortSignal"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionContext.inspectorAdapters",
            "type": "Uncategorized",
            "label": "inspectorAdapters",
            "description": [
              "\nAdapters for `inspector` plugin."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 48
            },
            "signature": [
              "InspectorAdapters"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionContext.getSearchSessionId",
            "type": "Function",
            "label": "getSearchSessionId",
            "description": [
              "\nSearch context in which expression should operate."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 53
            },
            "signature": [
              "() => string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionContext.getKibanaRequest",
            "type": "Function",
            "label": "getKibanaRequest",
            "description": [
              "\nGetter to retrieve the `KibanaRequest` object inside an expression function.\nUseful for functions which are running on the server and need to perform\noperations that are scoped to a specific user."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 60
            },
            "signature": [
              "(() => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionContext.getSavedObject",
            "type": "Function",
            "label": "getSavedObject",
            "description": [
              "\nAllows to fetch saved objects from ElasticSearch. In browser `getSavedObject`\nfunction is provided automatically by the Expressions plugin. On the server\nthe caller of the expression has to provide this context function. The\nreason is because on the browser we always know the user who tries to\nfetch a saved object, thus saved object client is scoped automatically to\nthat user. However, on the server we can scope that saved object client to\nany user, or even not scope it at all and execute it as an \"internal\" user."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 71
            },
            "signature": [
              "(<T extends ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectAttributes",
                "text": "SavedObjectAttributes"
              },
              " = ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectAttributes",
                "text": "SavedObjectAttributes"
              },
              ">(type: string, id: string) => Promise<",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObject",
                "text": "SavedObject"
              },
              "<T>>) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionContext.isSyncColorsEnabled",
            "type": "Function",
            "label": "isSyncColorsEnabled",
            "description": [
              "\nReturns the state (true|false) of the sync colors across panels switch."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 79
            },
            "signature": [
              "(() => boolean) | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/types.ts",
          "lineNumber": 21
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExecutionParams",
        "type": "Interface",
        "label": "ExecutionParams",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExecutionParams.executor",
            "type": "Object",
            "label": "executor",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 58
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              "<any>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionParams.ast",
            "type": "Object",
            "label": "ast",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 59
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionParams.expression",
            "type": "string",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 60
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionParams.params",
            "type": "Object",
            "label": "params",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 61
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/execution.ts",
          "lineNumber": 57
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExecutionState",
        "type": "Interface",
        "label": "ExecutionState",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionState",
            "text": "ExecutionState"
          },
          "<Output> extends ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutorState",
            "text": "ExecutorState"
          },
          "<Record<string, unknown>>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExecutionState.ast",
            "type": "Object",
            "label": "ast",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 18
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionState.state",
            "type": "CompoundType",
            "label": "state",
            "description": [
              "\nTracks state of execution.\n\n- `not-started` - before .start() method was called.\n- `pending` - immediately after .start() method is called.\n- `result` - when expression execution completed.\n- `error` - when execution failed with error."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 28
            },
            "signature": [
              "\"result\" | \"error\" | \"not-started\" | \"pending\""
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionState.result",
            "type": "Uncategorized",
            "label": "result",
            "description": [
              "\nResult of the expression execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 33
            },
            "signature": [
              "Output | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutionState.error",
            "type": "Object",
            "label": "error",
            "description": [
              "\nError happened during the execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 38
            },
            "signature": [
              "Error | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/container.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExecutorState",
        "type": "Interface",
        "label": "ExecutorState",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutorState",
            "text": "ExecutorState"
          },
          "<Context>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExecutorState.functions",
            "type": "Object",
            "label": "functions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 17
            },
            "signature": [
              "Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutorState.types",
            "type": "Object",
            "label": "types",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 18
            },
            "signature": [
              "Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExecutorState.context",
            "type": "Uncategorized",
            "label": "context",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 19
            },
            "signature": [
              "Context"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 16
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionAstExpressionBuilder",
        "type": "Interface",
        "label": "ExpressionAstExpressionBuilder",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionAstExpressionBuilder.type",
            "type": "string",
            "label": "type",
            "description": [
              "\nUsed to identify expression builder objects."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 48
            },
            "signature": [
              "\"expression_builder\""
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionAstExpressionBuilder.functions",
            "type": "Array",
            "label": "functions",
            "description": [
              "\nArray of each of the `buildExpressionFunction()` instances\nin this expression. Use this to remove or reorder functions\nin the expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 54
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunctionBuilder",
                "text": "ExpressionAstFunctionBuilder"
              },
              "<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ">[]"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-public.ExpressionAstExpressionBuilder.findFunction",
            "type": "Function",
            "label": "findFunction",
            "description": [
              "\nRecursively searches expression for all ocurrences of the\nfunction, including in subexpressions.\n\nUseful when performing migrations on a specific function,\nas you can iterate over the array of references and update\nall functions at once.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 66
            },
            "signature": [
              "<FnDef extends ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " = ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ">(fnName: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.InferFunctionDefinition",
                "text": "InferFunctionDefinition"
              },
              "<FnDef>[\"name\"]) => [] | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunctionBuilder",
                "text": "ExpressionAstFunctionBuilder"
              },
              "<FnDef>[]"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-public.ExpressionAstExpressionBuilder.toAst",
            "type": "Function",
            "label": "toAst",
            "description": [
              "\nConverts expression to an AST.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 74
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-public.ExpressionAstExpressionBuilder.toString",
            "type": "Function",
            "label": "toString",
            "description": [
              "\nConverts expression to an expression string.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 80
            },
            "signature": [
              "() => string"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_expression.ts",
          "lineNumber": 44
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionAstFunctionBuilder",
        "type": "Interface",
        "label": "ExpressionAstFunctionBuilder",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunctionBuilder",
            "text": "ExpressionAstFunctionBuilder"
          },
          "<FnDef>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionAstFunctionBuilder.type",
            "type": "string",
            "label": "type",
            "description": [
              "\nUsed to identify expression function builder objects."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 63
            },
            "signature": [
              "\"expression_function_builder\""
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionAstFunctionBuilder.name",
            "type": "Uncategorized",
            "label": "name",
            "description": [
              "\nName of this expression function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 67
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.InferFunctionDefinition",
                "text": "InferFunctionDefinition"
              },
              "<FnDef>[\"name\"]"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionAstFunctionBuilder.arguments",
            "type": "Object",
            "label": "arguments",
            "description": [
              "\nObject of all args currently added to the function. This is\nstructured similarly to `ExpressionAstFunction['arguments']`,\nhowever any subexpressions are returned as expression builder\ninstances instead of expression ASTs."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 74
            },
            "signature": [
              "FunctionBuilderArguments<FnDef>"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-public.ExpressionAstFunctionBuilder.addArgument",
            "type": "Function",
            "label": "addArgument",
            "description": [
              "\nAdds an additional argument to the function. For multi-args,\nthis should be called once for each new arg. Note that TS\nwill not enforce whether multi-args are available, so only\nuse this to update an existing arg if you are certain it\nis a multi-arg.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 86
            },
            "signature": [
              "<A extends FunctionArgName<FnDef>>(name: A, value: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | FunctionArgs<FnDef>[A]) => this"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-public.ExpressionAstFunctionBuilder.getArgument",
            "type": "Function",
            "label": "getArgument",
            "description": [
              "\nRetrieves an existing argument by name.\nUseful when you want to retrieve the current array of args and add\nsomething to it before calling `replaceArgument`. Any subexpression\narguments will be returned as expression builder instances.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 99
            },
            "signature": [
              "<A extends FunctionArgName<FnDef>>(name: A) => (",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | FunctionArgs<FnDef>[A])[] | undefined"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-public.ExpressionAstFunctionBuilder.replaceArgument",
            "type": "Function",
            "label": "replaceArgument",
            "description": [
              "\nOverwrites an existing argument with a new value.\nIn order to support multi-args, the value given must always be\nan array.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 111
            },
            "signature": [
              "<A extends FunctionArgName<FnDef>>(name: A, value: (",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | FunctionArgs<FnDef>[A])[]) => this"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-public.ExpressionAstFunctionBuilder.removeArgument",
            "type": "Function",
            "label": "removeArgument",
            "description": [
              "\nRemoves an (optional) argument from the function.\n\nTypeScript will enforce that you only remove optional\narguments. For manipulating required args, use `replaceArgument`.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 124
            },
            "signature": [
              "<A extends OptionalKeys<FunctionArgs<FnDef>>>(name: A) => this"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-public.ExpressionAstFunctionBuilder.toAst",
            "type": "Function",
            "label": "toAst",
            "description": [
              "\nConverts function to an AST.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 130
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunction",
                "text": "ExpressionAstFunction"
              }
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-public.ExpressionAstFunctionBuilder.toString",
            "type": "Function",
            "label": "toString",
            "description": [
              "\nConverts function to an expression string.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 136
            },
            "signature": [
              "() => string"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_function.ts",
          "lineNumber": 57
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionExecutor",
        "type": "Interface",
        "label": "ExpressionExecutor",
        "description": [],
        "tags": [
          "deprecated"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionExecutor.interpreter",
            "type": "Object",
            "label": "interpreter",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 25
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "public",
                "docId": "kibExpressionsPluginApi",
                "section": "def-public.ExpressionInterpreter",
                "text": "ExpressionInterpreter"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/public/types/index.ts",
          "lineNumber": 24
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionFunctionDefinition",
        "type": "Interface",
        "label": "ExpressionFunctionDefinition",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunctionDefinition",
            "text": "ExpressionFunctionDefinition"
          },
          "<Name, Input, Arguments, Output, Context> extends Partial<",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableState",
            "text": "PersistableState"
          },
          "<Record<string, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstArgument",
            "text": "ExpressionAstArgument"
          },
          "[]>>>"
        ],
        "description": [
          "\n`ExpressionFunctionDefinition` is the interface plugins have to implement to\nregister a function in `expressions` plugin."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinition.name",
            "type": "Uncategorized",
            "label": "name",
            "description": [
              "\nThe name of the function, as will be used in expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 40
            },
            "signature": [
              "Name"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinition.disabled",
            "type": "CompoundType",
            "label": "disabled",
            "description": [
              "\nif set to true function will be disabled (but its migrate function will still be available)"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 45
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinition.type",
            "type": "CompoundType",
            "label": "type",
            "description": [
              "\nName of type of value this function outputs."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 50
            },
            "signature": [
              "\"date\" | \"filter\" | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.KnownTypeToString",
                "text": "KnownTypeToString"
              },
              "<",
              "UnwrapPromiseOrReturn",
              "<Output>> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinition.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [
              "\nList of allowed type names for input value of this function. If this\nproperty is set the input of function will be cast to the first possible\ntype in this list. If this property is missing the input will be provided\nto the function as-is."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 58
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.TypeToString",
                "text": "TypeToString"
              },
              "<Input>[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinition.args",
            "type": "Object",
            "label": "args",
            "description": [
              "\nSpecification of arguments that function supports. This list will also be\nused for autocomplete functionality when your function is being edited."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 64
            },
            "signature": [
              "{ [key in keyof Arguments]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ArgumentType",
                "text": "ArgumentType"
              },
              "<Arguments[key]>; }"
            ]
          },
          {
            "tags": [
              "todo"
            ],
            "id": "def-public.ExpressionFunctionDefinition.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 69
            },
            "signature": [
              "string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinition.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nHelp text displayed in the Expression editor. This text should be\ninternationalized."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 75
            }
          },
          {
            "id": "def-public.ExpressionFunctionDefinition.fn",
            "type": "Function",
            "label": "fn",
            "signature": [
              "(input: Input, args: Arguments, context: Context) => Output"
            ],
            "description": [
              "\nThe actual implementation of the function.\n"
            ],
            "children": [
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [
                  "Output of the previous function, or initial input."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/types.ts",
                  "lineNumber": 86
                }
              },
              {
                "type": "Uncategorized",
                "label": "args",
                "isRequired": true,
                "signature": [
                  "Arguments"
                ],
                "description": [
                  "Parameters set for this function in expression."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/types.ts",
                  "lineNumber": 86
                }
              },
              {
                "type": "Uncategorized",
                "label": "context",
                "isRequired": true,
                "signature": [
                  "Context"
                ],
                "description": [
                  "Object with functions to perform side effects. This object\nis created for the duration of the execution of expression and is the\nsame for all functions in expression chain."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/types.ts",
                  "lineNumber": 86
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 86
            }
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-public.ExpressionFunctionDefinition.context",
            "type": "Object",
            "label": "context",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 91
            },
            "signature": [
              "{ types: any[] | undefined; } | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/types.ts",
          "lineNumber": 30
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionFunctionDefinitions",
        "type": "Interface",
        "label": "ExpressionFunctionDefinitions",
        "description": [
          "\nA mapping of `ExpressionFunctionDefinition`s for functions which the\nExpressions services provides out-of-the-box. Any new functions registered\nby the Expressions plugin should have their types added here.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinitions.clog",
            "type": "Object",
            "label": "clog",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 117
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionClog",
                "text": "ExpressionFunctionClog"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinitions.font",
            "type": "Object",
            "label": "font",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 118
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionFont",
                "text": "ExpressionFunctionFont"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinitions.var_set",
            "type": "Object",
            "label": "var_set",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 119
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionVarSet",
                "text": "ExpressionFunctionVarSet"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinitions.var",
            "type": "Object",
            "label": "var",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 120
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionVar",
                "text": "ExpressionFunctionVar"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinitions.theme",
            "type": "Object",
            "label": "theme",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 121
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionTheme",
                "text": "ExpressionFunctionTheme"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinitions.cumulative_sum",
            "type": "Object",
            "label": "cumulative_sum",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 122
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionCumulativeSum",
                "text": "ExpressionFunctionCumulativeSum"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinitions.derivative",
            "type": "Object",
            "label": "derivative",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 123
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionDerivative",
                "text": "ExpressionFunctionDerivative"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionFunctionDefinitions.moving_average",
            "type": "Object",
            "label": "moving_average",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 124
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionMovingAverage",
                "text": "ExpressionFunctionMovingAverage"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/types.ts",
          "lineNumber": 116
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionImage",
        "type": "Interface",
        "label": "ExpressionImage",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionImage.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 15
            },
            "signature": [
              "\"image\""
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionImage.mode",
            "type": "string",
            "label": "mode",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionImage.dataurl",
            "type": "string",
            "label": "dataurl",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 17
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionRenderDefinition",
        "type": "Interface",
        "label": "ExpressionRenderDefinition",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderDefinition",
            "text": "ExpressionRenderDefinition"
          },
          "<Config>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionRenderDefinition.name",
            "type": "string",
            "label": "name",
            "description": [
              "\nTechnical name of the renderer, used as ID to identify renderer in\nexpression renderer registry. This must match the name of the expression\nfunction that is used to create the `type: render` object."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 15
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderDefinition.displayName",
            "type": "string",
            "label": "displayName",
            "description": [
              "\nA user friendly name of the renderer as will be displayed to user in UI."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 20
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderDefinition.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nHelp text as will be displayed to user. A sentence or few about what this\nelement does."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 26
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderDefinition.validate",
            "type": "Function",
            "label": "validate",
            "description": [
              "\nUsed to validate the data before calling the render function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 31
            },
            "signature": [
              "(() => Error | undefined) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderDefinition.reuseDomNode",
            "type": "boolean",
            "label": "reuseDomNode",
            "description": [
              "\nTell the renderer if the dom node should be reused, it's recreated each\ntime by default."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 37
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderDefinition.render",
            "type": "Function",
            "label": "render",
            "description": [
              "\nThe function called to render the output data of an expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 42
            },
            "signature": [
              "(domNode: HTMLElement, config: Config, handlers: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.IInterpreterRenderHandlers",
                "text": "IInterpreterRenderHandlers"
              },
              ") => void | Promise<void>"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/types.ts",
          "lineNumber": 9
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionRendererEvent",
        "type": "Interface",
        "label": "ExpressionRendererEvent",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionRendererEvent.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/render.ts",
              "lineNumber": 28
            }
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRendererEvent.data",
            "type": "Any",
            "label": "data",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/render.ts",
              "lineNumber": 29
            },
            "signature": [
              "any"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/public/render.ts",
          "lineNumber": 27
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionRenderError",
        "type": "Interface",
        "label": "ExpressionRenderError",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.ExpressionRenderError",
            "text": "ExpressionRenderError"
          },
          " extends Error"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionRenderError.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 54
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionRenderError.original",
            "type": "Object",
            "label": "original",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 55
            },
            "signature": [
              "Error | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/public/types/index.ts",
          "lineNumber": 53
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionsServiceStart",
        "type": "Interface",
        "label": "ExpressionsServiceStart",
        "description": [
          "\nThe public contract that `ExpressionsService` provides to other plugins\nin Kibana Platform in *start* life-cycle."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionsServiceStart.getFunction",
            "type": "Function",
            "label": "getFunction",
            "description": [
              "\nGet a registered `ExpressionFunction` by its name, which was registered\nusing the `registerFunction` method. The returned `ExpressionFunction`\ninstance is an internal representation of the function in Expressions\nservice - do not mutate that object."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 78
            },
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionsServiceStart.getRenderer",
            "type": "Function",
            "label": "getRenderer",
            "description": [
              "\nGet a registered `ExpressionRenderer` by its name, which was registered\nusing the `registerRenderer` method. The returned `ExpressionRenderer`\ninstance is an internal representation of the renderer in Expressions\nservice - do not mutate that object."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 86
            },
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown> | null"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionsServiceStart.getType",
            "type": "Function",
            "label": "getType",
            "description": [
              "\nGet a registered `ExpressionType` by its name, which was registered\nusing the `registerType` method. The returned `ExpressionType`\ninstance is an internal representation of the type in Expressions\nservice - do not mutate that object."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 94
            },
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionsServiceStart.run",
            "type": "Function",
            "label": "run",
            "description": [
              "\nExecutes expression string or a parsed expression AST and immediately\nreturns the result.\n\nBelow example will execute `sleep 100 | clog` expression with `123` initial\ninput to the first function.\n\n```ts\nexpressions.run('sleep 100 | clog', 123);\n```\n\n- `sleep 100` will delay execution by 100 milliseconds and pass the `123` input as\n  its output.\n- `clog` will print to console `123` and pass it as its output.\n- The final result of the execution will be `123`.\n\nOptionally, you can pass an object as the third argument which will be used\nto extend the `ExecutionContext`&mdash;an object passed to each function\nas the third argument, that allows functions to perform side-effects.\n\n```ts\nexpressions.run('...', null, { elasticsearchClient });\n```"
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 120
            },
            "signature": [
              "<Input, Output>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              " | undefined) => Promise<Output>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionsServiceStart.execute",
            "type": "Function",
            "label": "execute",
            "description": [
              "\nStarts expression execution and immediately returns `ExecutionContract`\ninstance that tracks the progress of the execution and can be used to\ninteract with the execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 131
            },
            "signature": [
              "<Input = unknown, Output = unknown>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              " | undefined) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContract",
                "text": "ExecutionContract"
              },
              "<Input, Output, unknown>"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionsServiceStart.fork",
            "type": "Function",
            "label": "fork",
            "description": [
              "\nCreate a new instance of `ExpressionsService`. The new instance inherits\nall state of the original `ExpressionsService`, including all expression\ntypes, expression functions and context. Also, all new types and functions\nregistered in the original services AFTER the forking event will be\navailable in the forked instance. However, all new types and functions\nregistered in the forked instances will NOT be available to the original\nservice."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 147
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/service/expressions_services.ts",
          "lineNumber": 71
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionTypeDefinition",
        "type": "Interface",
        "label": "ExpressionTypeDefinition",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionTypeDefinition",
            "text": "ExpressionTypeDefinition"
          },
          "<Name, Value, SerializedType>"
        ],
        "description": [
          "\nA generic type which represents a custom Expression Type Definition that's\nregistered to the Interpreter."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionTypeDefinition.name",
            "type": "Uncategorized",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 31
            },
            "signature": [
              "Name"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionTypeDefinition.validate",
            "type": "Function",
            "label": "validate",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 32
            },
            "signature": [
              "((type: any) => void | Error) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionTypeDefinition.serialize",
            "type": "Function",
            "label": "serialize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 33
            },
            "signature": [
              "((type: Value) => SerializedType) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionTypeDefinition.deserialize",
            "type": "Function",
            "label": "deserialize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 34
            },
            "signature": [
              "((type: SerializedType) => Value) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionTypeDefinition.from",
            "type": "Object",
            "label": "from",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 37
            },
            "signature": [
              "{ [type: string]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<any, Value>; } | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionTypeDefinition.to",
            "type": "Object",
            "label": "to",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 40
            },
            "signature": [
              "{ [type: string]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<Value, any>; } | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionTypeDefinition.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 43
            },
            "signature": [
              "string | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 26
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionTypeStyle",
        "type": "Interface",
        "label": "ExpressionTypeStyle",
        "description": [
          "\nAn object that represents style information, typically CSS."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ExpressionTypeStyle.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 121
            },
            "signature": [
              "\"style\""
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionTypeStyle.spec",
            "type": "Object",
            "label": "spec",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 122
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.CSSStyle",
                "text": "CSSStyle"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.ExpressionTypeStyle.css",
            "type": "string",
            "label": "css",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 123
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 120
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.Font",
        "type": "Interface",
        "label": "Font",
        "description": [
          "\nAn interface representing a font in Canvas, with a textual label and the CSS\n`font-value`."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.Font.label",
            "type": "CompoundType",
            "label": "label",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/fonts.ts",
              "lineNumber": 26
            },
            "signature": [
              "\"American Typewriter\" | \"Arial\" | \"Baskerville\" | \"Book Antiqua\" | \"Brush Script\" | \"Chalkboard\" | \"Didot\" | \"Futura\" | \"Gill Sans\" | \"Helvetica Neue\" | \"Hoefler Text\" | \"Lucida Grande\" | \"Myriad\" | \"Open Sans\" | \"Optima\" | \"Palatino\""
            ]
          },
          {
            "tags": [],
            "id": "def-public.Font.value",
            "type": "CompoundType",
            "label": "value",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/fonts.ts",
              "lineNumber": 27
            },
            "signature": [
              "\"'American Typewriter', 'Courier New', Courier, Monaco, mono\" | \"Arial, sans-serif\" | \"Baskerville, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Brush Script MT', 'Comic Sans', sans-serif\" | \"Chalkboard, 'Comic Sans', sans-serif\" | \"Didot, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"Futura, Impact, Helvetica, Arial, sans-serif\" | \"'Gill Sans', 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"'Helvetica Neue', Helvetica, Arial, sans-serif\" | \"'Hoefler Text', Garamond, Georgia, 'Times New Roman', Times, serif\" | \"'Lucida Grande', 'Lucida Sans Unicode', Lucida, Verdana, Helvetica, Arial, sans-serif\" | \"Myriad, Helvetica, Arial, sans-serif\" | \"'Open Sans', Helvetica, Arial, sans-serif\" | \"Optima, 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"Palatino, 'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\""
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 25
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.IExpressionLoaderParams",
        "type": "Interface",
        "label": "IExpressionLoaderParams",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.searchContext",
            "type": "Object",
            "label": "searchContext",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 36
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.context",
            "type": "Any",
            "label": "context",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 37
            },
            "signature": [
              "any"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.variables",
            "type": "Object",
            "label": "variables",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 38
            },
            "signature": [
              "Record<string, any> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.debug",
            "type": "CompoundType",
            "label": "debug",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 40
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.disableCaching",
            "type": "CompoundType",
            "label": "disableCaching",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 41
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.customFunctions",
            "type": "Object",
            "label": "customFunctions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 42
            },
            "signature": [
              "[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.customRenderers",
            "type": "Object",
            "label": "customRenderers",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 43
            },
            "signature": [
              "[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.uiState",
            "type": "Unknown",
            "label": "uiState",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 44
            },
            "signature": [
              "unknown"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.inspectorAdapters",
            "type": "Object",
            "label": "inspectorAdapters",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 45
            },
            "signature": [
              {
                "pluginId": "inspector",
                "scope": "common",
                "docId": "kibInspectorPluginApi",
                "section": "def-common.Adapters",
                "text": "Adapters"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.onRenderError",
            "type": "Function",
            "label": "onRenderError",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 46
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "public",
                "docId": "kibExpressionsPluginApi",
                "section": "def-public.RenderErrorHandlerFnType",
                "text": "RenderErrorHandlerFnType"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.searchSessionId",
            "type": "string",
            "label": "searchSessionId",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 47
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.renderMode",
            "type": "CompoundType",
            "label": "renderMode",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 48
            },
            "signature": [
              "\"display\" | \"noInteractivity\" | \"edit\" | \"preview\" | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.syncColors",
            "type": "CompoundType",
            "label": "syncColors",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 49
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IExpressionLoaderParams.hasCompatibleActions",
            "type": "Function",
            "label": "hasCompatibleActions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/types/index.ts",
              "lineNumber": 50
            },
            "signature": [
              "((event: ",
              {
                "pluginId": "expressions",
                "scope": "public",
                "docId": "kibExpressionsPluginApi",
                "section": "def-public.ExpressionRendererEvent",
                "text": "ExpressionRendererEvent"
              },
              ") => Promise<boolean>) | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/public/types/index.ts",
          "lineNumber": 35
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.IInterpreterRenderHandlers",
        "type": "Interface",
        "label": "IInterpreterRenderHandlers",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.IInterpreterRenderHandlers.done",
            "type": "Function",
            "label": "done",
            "description": [
              "\nDone increments the number of rendering successes"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 67
            },
            "signature": [
              "() => void"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IInterpreterRenderHandlers.onDestroy",
            "type": "Function",
            "label": "onDestroy",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 68
            },
            "signature": [
              "(fn: () => void) => void"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IInterpreterRenderHandlers.reload",
            "type": "Function",
            "label": "reload",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 69
            },
            "signature": [
              "() => void"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IInterpreterRenderHandlers.update",
            "type": "Function",
            "label": "update",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 70
            },
            "signature": [
              "(params: any) => void"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IInterpreterRenderHandlers.event",
            "type": "Function",
            "label": "event",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 71
            },
            "signature": [
              "(event: any) => void"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IInterpreterRenderHandlers.hasCompatibleActions",
            "type": "Function",
            "label": "hasCompatibleActions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 72
            },
            "signature": [
              "((event: any) => Promise<boolean>) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IInterpreterRenderHandlers.getRenderMode",
            "type": "Function",
            "label": "getRenderMode",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 73
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.RenderMode",
                "text": "RenderMode"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.IInterpreterRenderHandlers.isSyncColorsEnabled",
            "type": "Function",
            "label": "isSyncColorsEnabled",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 74
            },
            "signature": [
              "() => boolean"
            ]
          },
          {
            "tags": [],
            "id": "def-public.IInterpreterRenderHandlers.uiState",
            "type": "Unknown",
            "label": "uiState",
            "description": [
              "\nThis uiState interface is actually `PersistedState` from the visualizations plugin,\nbut expressions cannot know about vis or it creates a mess of circular dependencies.\nDownstream consumers of the uiState handler will need to cast for now."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 80
            },
            "signature": [
              "unknown"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/types.ts",
          "lineNumber": 63
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.IRegistry",
        "type": "Interface",
        "label": "IRegistry",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<T>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "id": "def-public.IRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => T | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/types/registry.ts",
                  "lineNumber": 10
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/types/registry.ts",
              "lineNumber": 10
            }
          },
          {
            "id": "def-public.IRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, T>"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/types/registry.ts",
              "lineNumber": 12
            }
          },
          {
            "id": "def-public.IRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => T[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/types/registry.ts",
              "lineNumber": 14
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/registry.ts",
          "lineNumber": 9
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.PointSeriesColumn",
        "type": "Interface",
        "label": "PointSeriesColumn",
        "description": [
          "\nColumn in a PointSeries"
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.PointSeriesColumn.type",
            "type": "CompoundType",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 24
            },
            "signature": [
              "\"string\" | \"number\""
            ]
          },
          {
            "tags": [],
            "id": "def-public.PointSeriesColumn.role",
            "type": "CompoundType",
            "label": "role",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 25
            },
            "signature": [
              "\"measure\" | \"dimension\""
            ]
          },
          {
            "tags": [],
            "id": "def-public.PointSeriesColumn.expression",
            "type": "string",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 26
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 23
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.Range",
        "type": "Interface",
        "label": "Range",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.Range.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 15
            },
            "signature": [
              "\"range\""
            ]
          },
          {
            "tags": [],
            "id": "def-public.Range.from",
            "type": "number",
            "label": "from",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-public.Range.to",
            "type": "number",
            "label": "to",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 17
            }
          },
          {
            "tags": [],
            "id": "def-public.Range.label",
            "type": "string",
            "label": "label",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 18
            },
            "signature": [
              "string | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.ReactExpressionRendererProps",
        "type": "Interface",
        "label": "ReactExpressionRendererProps",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.ReactExpressionRendererProps",
            "text": "ReactExpressionRendererProps"
          },
          " extends ",
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.IExpressionLoaderParams",
            "text": "IExpressionLoaderParams"
          }
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.ReactExpressionRendererProps.className",
            "type": "string",
            "label": "className",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
              "lineNumber": 24
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ReactExpressionRendererProps.dataAttrs",
            "type": "Array",
            "label": "dataAttrs",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
              "lineNumber": 25
            },
            "signature": [
              "string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ReactExpressionRendererProps.expression",
            "type": "CompoundType",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
              "lineNumber": 26
            },
            "signature": [
              "string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-public.ReactExpressionRendererProps.renderError",
            "type": "Function",
            "label": "renderError",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
              "lineNumber": 27
            },
            "signature": [
              "((message?: string | null | undefined, error?: ",
              {
                "pluginId": "expressions",
                "scope": "public",
                "docId": "kibExpressionsPluginApi",
                "section": "def-public.ExpressionRenderError",
                "text": "ExpressionRenderError"
              },
              " | null | undefined) => React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[]) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ReactExpressionRendererProps.padding",
            "type": "CompoundType",
            "label": "padding",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
              "lineNumber": 31
            },
            "signature": [
              "\"m\" | \"s\" | \"l\" | \"xs\" | \"xl\" | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ReactExpressionRendererProps.onEvent",
            "type": "Function",
            "label": "onEvent",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
              "lineNumber": 32
            },
            "signature": [
              "((event: ",
              {
                "pluginId": "expressions",
                "scope": "public",
                "docId": "kibExpressionsPluginApi",
                "section": "def-public.ExpressionRendererEvent",
                "text": "ExpressionRendererEvent"
              },
              ") => void) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ReactExpressionRendererProps.onData$",
            "type": "Function",
            "label": "onData$",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
              "lineNumber": 33
            },
            "signature": [
              "(<TData, TInspectorAdapters>(data: TData, adapters?: TInspectorAdapters | undefined) => void) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ReactExpressionRendererProps.reload$",
            "type": "Object",
            "label": "reload$",
            "description": [
              "\nAn observable which can be used to re-run the expression without destroying the component"
            ],
            "source": {
              "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
              "lineNumber": 37
            },
            "signature": [
              "Observable",
              "<unknown> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.ReactExpressionRendererProps.debounce",
            "type": "number",
            "label": "debounce",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
              "lineNumber": 38
            },
            "signature": [
              "number | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
          "lineNumber": 23
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.SerializedDatatable",
        "type": "Interface",
        "label": "SerializedDatatable",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.SerializedDatatable",
            "text": "SerializedDatatable"
          },
          " extends ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Datatable",
            "text": "Datatable"
          }
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.SerializedDatatable.rows",
            "type": "Array",
            "label": "rows",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 105
            },
            "signature": [
              "string[][]"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 104
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.SerializedFieldFormat",
        "type": "Interface",
        "label": "SerializedFieldFormat",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.SerializedFieldFormat",
            "text": "SerializedFieldFormat"
          },
          "<TParams>"
        ],
        "description": [
          "\nJSON representation of a field formatter configuration.\nIs used to carry information about how to format data in\na data table as part of the column definition."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-public.SerializedFieldFormat.id",
            "type": "string",
            "label": "id",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/common.ts",
              "lineNumber": 54
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-public.SerializedFieldFormat.params",
            "type": "Uncategorized",
            "label": "params",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/common.ts",
              "lineNumber": 55
            },
            "signature": [
              "TParams | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 53
        },
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "id": "def-public.FontStyle",
        "type": "Enum",
        "label": "FontStyle",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `font-style` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 35
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.FontWeight",
        "type": "Enum",
        "label": "FontWeight",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `font-weight` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 43
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.Overflow",
        "type": "Enum",
        "label": "Overflow",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `overflow` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 62
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.TextAlignment",
        "type": "Enum",
        "label": "TextAlignment",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `text-align` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 72
        },
        "initialIsOpen": false
      },
      {
        "id": "def-public.TextDecoration",
        "type": "Enum",
        "label": "TextDecoration",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `text-decoration` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 82
        },
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "id": "def-public.AnyExpressionFunctionDefinition",
        "type": "Type",
        "label": "AnyExpressionFunctionDefinition",
        "tags": [],
        "description": [
          "\nType to capture every possible expression function definition."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/types.ts",
          "lineNumber": 102
        },
        "signature": [
          "ExpressionFunctionDefinition<string, any, Record<string, any>, any, ExecutionContext<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.AnyExpressionTypeDefinition",
        "type": "Type",
        "label": "AnyExpressionTypeDefinition",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 46
        },
        "signature": [
          "ExpressionTypeDefinition<any, any, any>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ArgumentType",
        "type": "Type",
        "label": "ArgumentType",
        "tags": [],
        "description": [
          "\nThis type represents all of the possible combinations of properties of an\nArgument in an Expression Function. The presence or absence of certain fields\ninfluence the shape and presence of others within each `arg` in the specification."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/arguments.ts",
          "lineNumber": 16
        },
        "signature": [
          "SingleArgumentType<T> | MultipleArgumentType<T> | UnresolvedSingleArgumentType<T> | UnresolvedMultipleArgumentType<T>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.DatatableColumnType",
        "type": "Type",
        "label": "DatatableColumnType",
        "tags": [],
        "description": [
          "\nThis type represents the `type` of any `DatatableColumn` in a `Datatable`.\nits duplicated from KBN_FIELD_TYPES"
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 36
        },
        "signature": [
          "\"string\" | \"number\" | \"boolean\" | \"object\" | \"date\" | \"ip\" | \"_source\" | \"attachment\" | \"geo_point\" | \"geo_shape\" | \"murmur3\" | \"unknown\" | \"conflict\" | \"nested\" | \"histogram\" | \"null\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.DatatableRow",
        "type": "Type",
        "label": "DatatableRow",
        "tags": [],
        "description": [
          "\nThis type represents a row in a `Datatable`."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 57
        },
        "signature": [
          "{ [x: string]: any; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExecutionContainer",
        "type": "Type",
        "label": "ExecutionContainer",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/execution/container.ts",
          "lineNumber": 73
        },
        "signature": [
          "StateContainer<ExecutionState<Output>, ExecutionPureTransitions<Output>, {}>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExecutorContainer",
        "type": "Type",
        "label": "ExecutorContainer",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 55
        },
        "signature": [
          "StateContainer<ExecutorState<Context>, ExecutorPureTransitions, ExecutorPureSelectors>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionAstArgument",
        "type": "Type",
        "label": "ExpressionAstArgument",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 77
        },
        "signature": [
          "string | number | false | true | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionAstExpression",
        "type": "Type",
        "label": "ExpressionAstExpression",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 16
        },
        "signature": [
          "{ type: 'expression'; chain: ExpressionAstFunction[]; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionAstFunction",
        "type": "Type",
        "label": "ExpressionAstFunction",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 21
        },
        "signature": [
          "{ type: 'function'; function: string; arguments: Record<string, ExpressionAstArgument[]>; debug?: ExpressionAstFunctionDebug | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionAstNode",
        "type": "Type",
        "label": "ExpressionAstNode",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 11
        },
        "signature": [
          "string | number | false | true | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunction",
            "text": "ExpressionAstFunction"
          },
          " | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionRendererComponent",
        "type": "Type",
        "label": "ExpressionRendererComponent",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
          "lineNumber": 49
        },
        "signature": [
          "(props: React.PropsWithChildren<",
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.ReactExpressionRendererProps",
            "text": "ReactExpressionRendererProps"
          },
          ">, context: any) => React.ReactElement<any, any> | null"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionValue",
        "type": "Type",
        "label": "ExpressionValue",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 15
        },
        "signature": [
          "any"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionValueBoxed",
        "type": "Type",
        "label": "ExpressionValueBoxed",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 11
        },
        "signature": [
          "{ type: Type; } & Value"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionValueConverter",
        "type": "Type",
        "label": "ExpressionValueConverter",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 17
        },
        "signature": [
          "(input: I, availableTypes: Record<string, any>) => O"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionValueError",
        "type": "Type",
        "label": "ExpressionValueError",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
          "lineNumber": 17
        },
        "signature": [
          "{ type: \"error\"; } & { error: ErrorLike; info?: SerializableState | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionValueFilter",
        "type": "Type",
        "label": "ExpressionValueFilter",
        "tags": [],
        "description": [
          "\nRepresents an object that is a Filter."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/filter.ts",
          "lineNumber": 14
        },
        "signature": [
          "{ type: \"filter\"; } & { filterType?: string | undefined; value?: string | undefined; column?: string | undefined; and: ExpressionValueFilter[]; to?: string | undefined; from?: string | undefined; query?: string | null | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionValueNum",
        "type": "Type",
        "label": "ExpressionValueNum",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
          "lineNumber": 14
        },
        "signature": [
          "{ type: \"num\"; } & { value: number; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionValueRender",
        "type": "Type",
        "label": "ExpressionValueRender",
        "tags": [],
        "description": [
          "\nRepresents an object that is intended to be rendered."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
          "lineNumber": 16
        },
        "signature": [
          "{ type: \"render\"; } & { as: string; value: T; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionValueRender",
        "type": "Type",
        "label": "ExpressionValueRender",
        "tags": [],
        "description": [
          "\nRepresents an object that is intended to be rendered."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
          "lineNumber": 16
        },
        "signature": [
          "{ type: \"render\"; } & { as: string; value: T; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ExpressionValueUnboxed",
        "type": "Type",
        "label": "ExpressionValueUnboxed",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 9
        },
        "signature": [
          "any"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.FontLabel",
        "type": "Type",
        "label": "FontLabel",
        "tags": [],
        "description": [
          "\nThis type contains a unions of all supported font labels, or the the name of\nthe font the user would see in a UI."
        ],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 13
        },
        "signature": [
          "\"American Typewriter\" | \"Arial\" | \"Baskerville\" | \"Book Antiqua\" | \"Brush Script\" | \"Chalkboard\" | \"Didot\" | \"Futura\" | \"Gill Sans\" | \"Helvetica Neue\" | \"Hoefler Text\" | \"Lucida Grande\" | \"Myriad\" | \"Open Sans\" | \"Optima\" | \"Palatino\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.FontValue",
        "type": "Type",
        "label": "FontValue",
        "tags": [],
        "description": [
          "\nThis type contains a union of all supported font values, equivalent to the CSS\n`font-value` property."
        ],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 19
        },
        "signature": [
          "\"'American Typewriter', 'Courier New', Courier, Monaco, mono\" | \"Arial, sans-serif\" | \"Baskerville, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Brush Script MT', 'Comic Sans', sans-serif\" | \"Chalkboard, 'Comic Sans', sans-serif\" | \"Didot, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"Futura, Impact, Helvetica, Arial, sans-serif\" | \"'Gill Sans', 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"'Helvetica Neue', Helvetica, Arial, sans-serif\" | \"'Hoefler Text', Garamond, Georgia, 'Times New Roman', Times, serif\" | \"'Lucida Grande', 'Lucida Sans Unicode', Lucida, Verdana, Helvetica, Arial, sans-serif\" | \"Myriad, Helvetica, Arial, sans-serif\" | \"'Open Sans', Helvetica, Arial, sans-serif\" | \"Optima, 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"Palatino, 'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.InterpreterErrorType",
        "type": "Type",
        "label": "InterpreterErrorType",
        "tags": [
          "deprecated"
        ],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
          "lineNumber": 33
        },
        "signature": [
          "{ type: \"error\"; } & { error: ErrorLike; info?: SerializableState | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.KnownTypeToString",
        "type": "Type",
        "label": "KnownTypeToString",
        "tags": [],
        "description": [
          "\nMap the type of the generic to a string-based representation of the type.\n\nIf the provided generic is its own type interface, we use the value of\nthe `type` key as a string literal type for it."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 26
        },
        "signature": [
          "T extends string ? \"string\" : T extends boolean ? \"boolean\" : T extends number ? \"number\" : T extends null ? \"null\" : T extends { type: string; } ? T[\"type\"] : never"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.PointSeries",
        "type": "Type",
        "label": "PointSeries",
        "tags": [],
        "description": [
          "\nA `PointSeries` is a unique structure that represents dots on a chart."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 39
        },
        "signature": [
          "{ type: \"pointseries\"; } & { columns: PointSeriesColumns; rows: PointSeriesRow[]; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.PointSeriesColumnName",
        "type": "Type",
        "label": "PointSeriesColumnName",
        "tags": [],
        "description": [
          "\nAllowed column names in a PointSeries"
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 18
        },
        "signature": [
          "\"color\" | \"y\" | \"x\" | \"text\" | \"size\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.PointSeriesColumns",
        "type": "Type",
        "label": "PointSeriesColumns",
        "tags": [],
        "description": [
          "\nRepresents a collection of valid Columns in a PointSeries"
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 32
        },
        "signature": [
          "{} | Record<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.PointSeriesColumnName",
            "text": "PointSeriesColumnName"
          },
          ", ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.PointSeriesColumn",
            "text": "PointSeriesColumn"
          },
          ">"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.PointSeriesRow",
        "type": "Type",
        "label": "PointSeriesRow",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 34
        },
        "signature": [
          "{ [x: string]: any; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.ReactExpressionRendererType",
        "type": "Type",
        "label": "ReactExpressionRendererType",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/public/react_expression_renderer.tsx",
          "lineNumber": 41
        },
        "signature": [
          "React.ComponentClass<",
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.ReactExpressionRendererProps",
            "text": "ReactExpressionRendererProps"
          },
          ", any> | React.FunctionComponent<",
          {
            "pluginId": "expressions",
            "scope": "public",
            "docId": "kibExpressionsPluginApi",
            "section": "def-public.ReactExpressionRendererProps",
            "text": "ReactExpressionRendererProps"
          },
          ">"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.Style",
        "type": "Type",
        "label": "Style",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 126
        },
        "signature": [
          "ExpressionTypeStyle"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.TypeString",
        "type": "Type",
        "label": "TypeString",
        "tags": [],
        "description": [
          "\nIf the type extends a Promise, we still need to return the string representation:\n\n`someArgument: Promise<boolean | string>` results in `types: ['boolean', 'string']`"
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 39
        },
        "signature": [
          "UnwrapPromiseOrReturn<T> extends string ? \"string\" : UnwrapPromiseOrReturn<T> extends boolean ? \"boolean\" : UnwrapPromiseOrReturn<T> extends number ? \"number\" : UnwrapPromiseOrReturn<T> extends null ? \"null\" : UnwrapPromiseOrReturn<T> extends { type: string; } ? ({ type: string; } & UnwrapPromiseOrReturn<T>)[\"type\"] : never"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.TypeToString",
        "type": "Type",
        "label": "TypeToString",
        "tags": [],
        "description": [
          "\nThis can convert a type into a known Expression string representation of\nthat type. For example, `TypeToString<Datatable>` will resolve to `'datatable'`.\nThis allows Expression Functions to continue to specify their type in a\nsimple string format."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 17
        },
        "signature": [
          "\"date\" | \"filter\" | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.KnownTypeToString",
            "text": "KnownTypeToString"
          },
          "<T>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-public.UnmappedTypeStrings",
        "type": "Type",
        "label": "UnmappedTypeStrings",
        "tags": [],
        "description": [
          "\nTypes used in Expressions that don't map to a primitive cleanly:\n\n`date` is typed as a number or string, and represents a date"
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 46
        },
        "signature": [
          "\"date\" | \"filter\""
        ],
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "id": "def-public.ExpressionsSetup",
      "type": "Type",
      "label": "ExpressionsSetup",
      "tags": [],
      "description": [
        "\nExpressions public setup contract, extends {@link ExpressionsServiceSetup}"
      ],
      "source": {
        "path": "src/plugins/expressions/public/plugin.ts",
        "lineNumber": 24
      },
      "signature": [
        "{ readonly getType: (name: string) => ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionType",
          "text": "ExpressionType"
        },
        " | undefined; readonly getFunction: (name: string) => ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionFunction",
          "text": "ExpressionFunction"
        },
        " | undefined; readonly getFunctions: () => Record<string, ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionFunction",
          "text": "ExpressionFunction"
        },
        ">; readonly getRenderer: (name: string) => ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionRenderer",
          "text": "ExpressionRenderer"
        },
        "<unknown> | null; readonly getRenderers: () => Record<string, ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionRenderer",
          "text": "ExpressionRenderer"
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "id": "def-public.ExpressionsStart",
      "type": "Interface",
      "label": "ExpressionsStart",
      "signature": [
        {
          "pluginId": "expressions",
          "scope": "public",
          "docId": "kibExpressionsPluginApi",
          "section": "def-public.ExpressionsStart",
          "text": "ExpressionsStart"
        },
        " extends ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionsServiceStart",
          "text": "ExpressionsServiceStart"
        }
      ],
      "description": [
        "\nExpressions public start contrect, extends {@link ExpressionServiceStart}"
      ],
      "tags": [],
      "children": [
        {
          "tags": [],
          "id": "def-public.ExpressionsStart.ExpressionLoader",
          "type": "Object",
          "label": "ExpressionLoader",
          "description": [],
          "source": {
            "path": "src/plugins/expressions/public/plugin.ts",
            "lineNumber": 30
          },
          "signature": [
            "typeof ",
            {
              "pluginId": "expressions",
              "scope": "public",
              "docId": "kibExpressionsPluginApi",
              "section": "def-public.ExpressionLoader",
              "text": "ExpressionLoader"
            }
          ]
        },
        {
          "tags": [],
          "id": "def-public.ExpressionsStart.ExpressionRenderHandler",
          "type": "Object",
          "label": "ExpressionRenderHandler",
          "description": [],
          "source": {
            "path": "src/plugins/expressions/public/plugin.ts",
            "lineNumber": 31
          },
          "signature": [
            "typeof ",
            {
              "pluginId": "expressions",
              "scope": "public",
              "docId": "kibExpressionsPluginApi",
              "section": "def-public.ExpressionRenderHandler",
              "text": "ExpressionRenderHandler"
            }
          ]
        },
        {
          "tags": [],
          "id": "def-public.ExpressionsStart.loader",
          "type": "Function",
          "label": "loader",
          "description": [],
          "source": {
            "path": "src/plugins/expressions/public/plugin.ts",
            "lineNumber": 32
          },
          "signature": [
            {
              "pluginId": "expressions",
              "scope": "public",
              "docId": "kibExpressionsPluginApi",
              "section": "def-public.IExpressionLoader",
              "text": "IExpressionLoader"
            }
          ]
        },
        {
          "tags": [],
          "id": "def-public.ExpressionsStart.ReactExpressionRenderer",
          "type": "Function",
          "label": "ReactExpressionRenderer",
          "description": [],
          "source": {
            "path": "src/plugins/expressions/public/plugin.ts",
            "lineNumber": 33
          },
          "signature": [
            "({ className, dataAttrs, padding, renderError, expression, onEvent, onData$, reload$, debounce, ...expressionLoaderOptions }: ",
            {
              "pluginId": "expressions",
              "scope": "public",
              "docId": "kibExpressionsPluginApi",
              "section": "def-public.ReactExpressionRendererProps",
              "text": "ReactExpressionRendererProps"
            },
            ") => JSX.Element"
          ]
        },
        {
          "tags": [],
          "id": "def-public.ExpressionsStart.render",
          "type": "Function",
          "label": "render",
          "description": [],
          "source": {
            "path": "src/plugins/expressions/public/plugin.ts",
            "lineNumber": 34
          },
          "signature": [
            "typeof ",
            {
              "pluginId": "expressions",
              "scope": "public",
              "docId": "kibExpressionsPluginApi",
              "section": "def-public.render",
              "text": "render"
            }
          ]
        }
      ],
      "source": {
        "path": "src/plugins/expressions/public/plugin.ts",
        "lineNumber": 29
      },
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [
      {
        "id": "def-server.Execution",
        "type": "Class",
        "tags": [],
        "label": "Execution",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Execution",
            "text": "Execution"
          },
          "<Input, Output, InspectorAdapters>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.Execution.state",
            "type": "Object",
            "label": "state",
            "description": [
              "\nDynamic state of the execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 80
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContainer",
                "text": "ExecutionContainer"
              },
              "<Output | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueBoxed",
                "text": "ExpressionValueBoxed"
              },
              "<\"error\", { error: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ErrorLike",
                "text": "ErrorLike"
              },
              "; info?: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined; }>>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.Execution.input",
            "type": "Uncategorized",
            "label": "input",
            "description": [
              "\nInitial input of the execution.\n\nN.B. It is initialized to `null` rather than `undefined` for legacy reasons,\nbecause in legacy interpreter it was set to `null` by default."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 88
            },
            "signature": [
              "Input"
            ]
          },
          {
            "tags": [],
            "id": "def-server.Execution.context",
            "type": "Object",
            "label": "context",
            "description": [
              "\nExecution context - object that allows to do side-effects. Context is passed\nto every function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 94
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContext",
                "text": "ExecutionContext"
              },
              "<InspectorAdapters, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-server.Execution.contract",
            "type": "Object",
            "label": "contract",
            "description": [
              "\nContract is a public representation of `Execution` instances. Contract we\ncan return to other plugins for their consumption."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 134
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContract",
                "text": "ExecutionContract"
              },
              "<Input, Output, InspectorAdapters>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.Execution.expression",
            "type": "string",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 140
            }
          },
          {
            "id": "def-server.Execution.result",
            "type": "Object",
            "label": "result",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 142
            },
            "signature": [
              "Promise<Output | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueBoxed",
                "text": "ExpressionValueBoxed"
              },
              "<\"error\", { error: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ErrorLike",
                "text": "ErrorLike"
              },
              "; info?: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined; }>>"
            ]
          },
          {
            "id": "def-server.Execution.inspectorAdapters",
            "type": "Uncategorized",
            "label": "inspectorAdapters",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 146
            },
            "signature": [
              "InspectorAdapters"
            ]
          },
          {
            "id": "def-server.Execution.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "execution",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutionParams",
                    "text": "ExecutionParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 150
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 150
            }
          },
          {
            "id": "def-server.Execution.cancel",
            "type": "Function",
            "label": "cancel",
            "signature": [
              "() => void"
            ],
            "description": [
              "\nStop execution of expression."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 192
            }
          },
          {
            "id": "def-server.Execution.start",
            "type": "Function",
            "label": "start",
            "signature": [
              "(input?: Input) => void"
            ],
            "description": [
              "\nCall this method to start execution.\n\nN.B. `input` is initialized to `null` rather than `undefined` for legacy reasons,\nbecause in legacy interpreter it was set to `null` by default."
            ],
            "children": [
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 202
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 202
            }
          },
          {
            "id": "def-server.Execution.invokeChain",
            "type": "Function",
            "label": "invokeChain",
            "signature": [
              "(chainArr: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunction",
                "text": "ExpressionAstFunction"
              },
              "[], input: unknown) => Promise<any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Array",
                "label": "chainArr",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstFunction",
                    "text": "ExpressionAstFunction"
                  },
                  "[]"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 236
                }
              },
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 236
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 236
            }
          },
          {
            "id": "def-server.Execution.invokeFunction",
            "type": "Function",
            "label": "invokeFunction",
            "signature": [
              "(fn: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ", input: unknown, args: Record<string, unknown>) => Promise<any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "fn",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionFunction",
                    "text": "ExpressionFunction"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 317
                }
              },
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 318
                }
              },
              {
                "type": "Object",
                "label": "args",
                "isRequired": true,
                "signature": [
                  "Record<string, unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 319
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 316
            }
          },
          {
            "id": "def-server.Execution.cast",
            "type": "Function",
            "label": "cast",
            "signature": [
              "(value: any, toTypeNames?: string[] | undefined) => any"
            ],
            "description": [],
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 348
                }
              },
              {
                "type": "Array",
                "label": "toTypeNames",
                "isRequired": false,
                "signature": [
                  "string[] | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 348
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 348
            }
          },
          {
            "id": "def-server.Execution.resolveArgs",
            "type": "Function",
            "label": "resolveArgs",
            "signature": [
              "(fnDef: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ", input: unknown, argAsts: any) => Promise<any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "fnDef",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionFunction",
                    "text": "ExpressionFunction"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 374
                }
              },
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 374
                }
              },
              {
                "type": "Any",
                "label": "argAsts",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 374
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 374
            }
          },
          {
            "id": "def-server.Execution.interpret",
            "type": "Function",
            "label": "interpret",
            "signature": [
              "<T>(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstNode",
                "text": "ExpressionAstNode"
              },
              ", input: T) => Promise<unknown>"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstNode",
                    "text": "ExpressionAstNode"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 465
                }
              },
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "T"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 465
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 465
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/execution.ts",
          "lineNumber": 70
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.Executor",
        "type": "Class",
        "tags": [],
        "label": "Executor",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Executor",
            "text": "Executor"
          },
          "<Context> implements ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableStateService",
            "text": "PersistableStateService"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          ">"
        ],
        "children": [
          {
            "id": "def-server.Executor.createWithDefaults",
            "type": "Function",
            "label": "createWithDefaults",
            "signature": [
              "typeof ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              ".createWithDefaults"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": false,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Ctx> | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 83
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 82
            }
          },
          {
            "tags": [],
            "id": "def-server.Executor.state",
            "type": "Object",
            "label": "state",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 91
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorContainer",
                "text": "ExecutorContainer"
              },
              "<Context>"
            ]
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-server.Executor.functions",
            "type": "Object",
            "label": "functions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 96
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.FunctionsRegistry",
                "text": "FunctionsRegistry"
              }
            ]
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-server.Executor.types",
            "type": "Object",
            "label": "types",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 101
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.TypesRegistry",
                "text": "TypesRegistry"
              }
            ]
          },
          {
            "id": "def-server.Executor.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": false,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Context> | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 103
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 103
            }
          },
          {
            "id": "def-server.Executor.registerFunction",
            "type": "Function",
            "label": "registerFunction",
            "signature": [
              "(functionDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 110
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 109
            }
          },
          {
            "id": "def-server.Executor.getFunction",
            "type": "Function",
            "label": "getFunction",
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | undefined"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 118
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 118
            }
          },
          {
            "id": "def-server.Executor.getFunctions",
            "type": "Function",
            "label": "getFunctions",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 122
            }
          },
          {
            "id": "def-server.Executor.registerType",
            "type": "Function",
            "label": "registerType",
            "signature": [
              "(typeDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "typeDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 127
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 126
            }
          },
          {
            "id": "def-server.Executor.getType",
            "type": "Function",
            "label": "getType",
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | undefined"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 135
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 135
            }
          },
          {
            "id": "def-server.Executor.getTypes",
            "type": "Function",
            "label": "getTypes",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 139
            }
          },
          {
            "id": "def-server.Executor.extendContext",
            "type": "Function",
            "label": "extendContext",
            "signature": [
              "(extraContext: Record<string, unknown>) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "extraContext",
                "isRequired": true,
                "signature": [
                  "Record<string, unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 143
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 143
            }
          },
          {
            "id": "def-server.Executor.context",
            "type": "Object",
            "label": "context",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 147
            },
            "signature": [
              "Record<string, unknown>"
            ]
          },
          {
            "id": "def-server.Executor.run",
            "type": "Function",
            "label": "run",
            "signature": [
              "<Input, Output>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              ") => Promise<Output>"
            ],
            "description": [
              "\nExecute expression and return result.\n"
            ],
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  "string | ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [
                  "Expression AST or a string representing expression."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 160
                }
              },
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [
                  "Initial input to the first expression function."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 161
                }
              },
              {
                "type": "Object",
                "label": "params",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionExecutionParams",
                    "text": "ExpressionExecutionParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 162
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 159
            }
          },
          {
            "id": "def-server.Executor.createExecution",
            "type": "Function",
            "label": "createExecution",
            "signature": [
              "<Input = unknown, Output = unknown>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Execution",
                "text": "Execution"
              },
              "<Input, Output, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DefaultInspectorAdapters",
                "text": "DefaultInspectorAdapters"
              },
              ">"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  "string | ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 170
                }
              },
              {
                "type": "Object",
                "label": "params",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionExecutionParams",
                    "text": "ExpressionExecutionParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 171
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 169
            }
          },
          {
            "id": "def-server.Executor.inject",
            "type": "Function",
            "label": "inject",
            "signature": [
              "(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 217
                }
              },
              {
                "type": "Array",
                "label": "references",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "common",
                    "docId": "kibCorePluginApi",
                    "section": "def-common.SavedObjectReference",
                    "text": "SavedObjectReference"
                  },
                  "[]"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 217
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 217
            }
          },
          {
            "id": "def-server.Executor.extract",
            "type": "Function",
            "label": "extract",
            "signature": [
              "(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ") => { state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              "; references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]; }"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 223
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 223
            }
          },
          {
            "id": "def-server.Executor.telemetry",
            "type": "Function",
            "label": "telemetry",
            "signature": [
              "(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", telemetryData: Record<string, any>) => Record<string, any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 233
                }
              },
              {
                "type": "Object",
                "label": "telemetryData",
                "isRequired": true,
                "signature": [
                  "Record<string, any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 233
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 233
            }
          },
          {
            "id": "def-server.Executor.migrate",
            "type": "Function",
            "label": "migrate",
            "signature": [
              "(ast: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ", version: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.SerializableState",
                    "text": "SerializableState"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 241
                }
              },
              {
                "type": "string",
                "label": "version",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 241
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 241
            }
          },
          {
            "id": "def-server.Executor.fork",
            "type": "Function",
            "label": "fork",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              "<Context>"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 250
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/executor.ts",
          "lineNumber": 80
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionFunction",
        "type": "Class",
        "tags": [],
        "label": "ExpressionFunction",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunction",
            "text": "ExpressionFunction"
          },
          " implements ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableState",
            "text": "PersistableState"
          },
          "<Record<string, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstArgument",
            "text": "ExpressionAstArgument"
          },
          "[]>>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.name",
            "type": "string",
            "label": "name",
            "description": [
              "\nName of function"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 22
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [
              "\nAliases that can be used instead of `name`."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 27
            },
            "signature": [
              "string[]"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.type",
            "type": "string",
            "label": "type",
            "description": [
              "\nReturn type of function. This SHOULD be supplied. We use it for UI\nand autocomplete hinting. We may also use it for optimizations in\nthe future."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 34
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.fn",
            "type": "Function",
            "label": "fn",
            "description": [
              "\nFunction to run function (context, args)"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 39
            },
            "signature": [
              "(input: any, params: Record<string, any>, handlers: object) => any"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nA short help text."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 44
            }
          },
          {
            "id": "def-server.ExpressionFunction.args",
            "type": "Object",
            "tags": [],
            "children": [],
            "description": [
              "\nSpecification of expression function parameters."
            ],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 49
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [
              "\nType of inputs that this function supports."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 54
            },
            "signature": [
              "string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.disabled",
            "type": "boolean",
            "label": "disabled",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 56
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.telemetry",
            "type": "Function",
            "label": "telemetry",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 57
            },
            "signature": [
              "(state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>, telemetryData: Record<string, any>) => Record<string, any>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.extract",
            "type": "Function",
            "label": "extract",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 61
            },
            "signature": [
              "(state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>) => { state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>; references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]; }"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.inject",
            "type": "Function",
            "label": "inject",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 64
            },
            "signature": [
              "(state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>, references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]) => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunction.migrations",
            "type": "Object",
            "label": "migrations",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 68
            },
            "signature": [
              "{ [key: string]: (state: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ") => ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              "; }"
            ]
          },
          {
            "id": "def-server.ExpressionFunction.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
                  "lineNumber": 72
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 72
            }
          },
          {
            "id": "def-server.ExpressionFunction.accepts",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "type",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
                  "lineNumber": 107
                }
              }
            ],
            "signature": [
              "(type: string) => boolean"
            ],
            "description": [],
            "label": "accepts",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 107
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
          "lineNumber": 18
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionFunctionParameter",
        "type": "Class",
        "tags": [],
        "label": "ExpressionFunctionParameter",
        "description": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionParameter.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 12
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionParameter.required",
            "type": "boolean",
            "label": "required",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 13
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionParameter.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 14
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionParameter.types",
            "type": "Array",
            "label": "types",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 15
            },
            "signature": [
              "string[]"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionParameter.default",
            "type": "Any",
            "label": "default",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 16
            },
            "signature": [
              "any"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionParameter.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 17
            },
            "signature": [
              "string[]"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionParameter.multi",
            "type": "boolean",
            "label": "multi",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 18
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionParameter.resolve",
            "type": "boolean",
            "label": "resolve",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 19
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionParameter.options",
            "type": "Array",
            "label": "options",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 20
            },
            "signature": [
              "any[]"
            ]
          },
          {
            "id": "def-server.ExpressionFunctionParameter.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
                  "lineNumber": 22
                }
              },
              {
                "type": "CompoundType",
                "label": "arg",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ArgumentType",
                    "text": "ArgumentType"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
                  "lineNumber": 22
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 22
            }
          },
          {
            "id": "def-server.ExpressionFunctionParameter.accepts",
            "type": "Function",
            "label": "accepts",
            "signature": [
              "(type: string) => boolean"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "type",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
                  "lineNumber": 40
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 40
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
          "lineNumber": 11
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionRenderer",
        "type": "Class",
        "tags": [],
        "label": "ExpressionRenderer",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderer",
            "text": "ExpressionRenderer"
          },
          "<Config>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionRenderer.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 12
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionRenderer.displayName",
            "type": "string",
            "label": "displayName",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 13
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionRenderer.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 14
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionRenderer.validate",
            "type": "Function",
            "label": "validate",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 15
            },
            "signature": [
              "() => void | Error"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionRenderer.reuseDomNode",
            "type": "boolean",
            "label": "reuseDomNode",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionRenderer.render",
            "type": "Function",
            "label": "render",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 17
            },
            "signature": [
              "(domNode: HTMLElement, config: Config, handlers: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.IInterpreterRenderHandlers",
                "text": "IInterpreterRenderHandlers"
              },
              ") => void | Promise<void>"
            ]
          },
          {
            "id": "def-server.ExpressionRenderer.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "config",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionRenderDefinition",
                    "text": "ExpressionRenderDefinition"
                  },
                  "<Config>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
                  "lineNumber": 19
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 19
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
          "lineNumber": 11
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionRendererRegistry",
        "type": "Class",
        "tags": [],
        "label": "ExpressionRendererRegistry",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRendererRegistry",
            "text": "ExpressionRendererRegistry"
          },
          " implements ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderer",
            "text": "ExpressionRenderer"
          },
          "<unknown>>"
        ],
        "children": [
          {
            "id": "def-server.ExpressionRendererRegistry.register",
            "type": "Function",
            "label": "register",
            "signature": [
              "(definition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionRenderDefinition",
                "text": "AnyExpressionRenderDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionRenderDefinition",
                "text": "AnyExpressionRenderDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "definition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionRenderDefinition",
                    "text": "AnyExpressionRenderDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionRenderDefinition",
                    "text": "AnyExpressionRenderDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
                  "lineNumber": 19
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 19
            }
          },
          {
            "id": "def-server.ExpressionRendererRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown> | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
                  "lineNumber": 25
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 25
            }
          },
          {
            "id": "def-server.ExpressionRendererRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown>>"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 29
            }
          },
          {
            "id": "def-server.ExpressionRendererRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown>[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 39
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
          "lineNumber": 13
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionsServerPlugin",
        "type": "Class",
        "tags": [],
        "label": "ExpressionsServerPlugin",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "server",
            "docId": "kibExpressionsPluginApi",
            "section": "def-server.ExpressionsServerPlugin",
            "text": "ExpressionsServerPlugin"
          },
          " implements ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.Plugin",
            "text": "Plugin"
          },
          "<Pick<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionsService",
            "text": "ExpressionsService"
          },
          ", \"getType\" | \"getFunction\" | \"getFunctions\" | \"getRenderer\" | \"getRenderers\" | \"getTypes\" | \"registerFunction\" | \"registerRenderer\" | \"registerType\" | \"run\" | \"fork\">, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionsServiceStart",
            "text": "ExpressionsServiceStart"
          },
          ", object, object>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionsServerPlugin.expressions",
            "type": "Object",
            "label": "expressions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/server/plugin.ts",
              "lineNumber": 18
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              }
            ]
          },
          {
            "id": "def-server.ExpressionsServerPlugin.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "initializerContext",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.PluginInitializerContext",
                    "text": "PluginInitializerContext"
                  },
                  "<unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/server/plugin.ts",
                  "lineNumber": 20
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/server/plugin.ts",
              "lineNumber": 20
            }
          },
          {
            "id": "def-server.ExpressionsServerPlugin.setup",
            "type": "Function",
            "label": "setup",
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CoreSetup",
                "text": "CoreSetup"
              },
              "<object, unknown>) => Pick<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              },
              ", \"getType\" | \"getFunction\" | \"getFunctions\" | \"getRenderer\" | \"getRenderers\" | \"getTypes\" | \"registerFunction\" | \"registerRenderer\" | \"registerType\" | \"run\" | \"fork\">"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "core",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CoreSetup",
                    "text": "CoreSetup"
                  },
                  "<object, unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/server/plugin.ts",
                  "lineNumber": 22
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/server/plugin.ts",
              "lineNumber": 22
            }
          },
          {
            "id": "def-server.ExpressionsServerPlugin.start",
            "type": "Function",
            "label": "start",
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CoreStart",
                "text": "CoreStart"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsServiceStart",
                "text": "ExpressionsServiceStart"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "core",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CoreStart",
                    "text": "CoreStart"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/server/plugin.ts",
                  "lineNumber": 32
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/server/plugin.ts",
              "lineNumber": 32
            }
          },
          {
            "id": "def-server.ExpressionsServerPlugin.stop",
            "type": "Function",
            "label": "stop",
            "signature": [
              "() => void"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/server/plugin.ts",
              "lineNumber": 38
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/server/plugin.ts",
          "lineNumber": 16
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionsServerPlugin",
        "type": "Class",
        "tags": [],
        "label": "ExpressionsServerPlugin",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "server",
            "docId": "kibExpressionsPluginApi",
            "section": "def-server.ExpressionsServerPlugin",
            "text": "ExpressionsServerPlugin"
          },
          " implements ",
          {
            "pluginId": "core",
            "scope": "server",
            "docId": "kibCorePluginApi",
            "section": "def-server.Plugin",
            "text": "Plugin"
          },
          "<Pick<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionsService",
            "text": "ExpressionsService"
          },
          ", \"getType\" | \"getFunction\" | \"getFunctions\" | \"getRenderer\" | \"getRenderers\" | \"getTypes\" | \"registerFunction\" | \"registerRenderer\" | \"registerType\" | \"run\" | \"fork\">, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionsServiceStart",
            "text": "ExpressionsServiceStart"
          },
          ", object, object>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionsServerPlugin.expressions",
            "type": "Object",
            "label": "expressions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/server/plugin.ts",
              "lineNumber": 18
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              }
            ]
          },
          {
            "id": "def-server.ExpressionsServerPlugin.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "initializerContext",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.PluginInitializerContext",
                    "text": "PluginInitializerContext"
                  },
                  "<unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/server/plugin.ts",
                  "lineNumber": 20
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/server/plugin.ts",
              "lineNumber": 20
            }
          },
          {
            "id": "def-server.ExpressionsServerPlugin.setup",
            "type": "Function",
            "label": "setup",
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CoreSetup",
                "text": "CoreSetup"
              },
              "<object, unknown>) => Pick<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              },
              ", \"getType\" | \"getFunction\" | \"getFunctions\" | \"getRenderer\" | \"getRenderers\" | \"getTypes\" | \"registerFunction\" | \"registerRenderer\" | \"registerType\" | \"run\" | \"fork\">"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "core",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CoreSetup",
                    "text": "CoreSetup"
                  },
                  "<object, unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/server/plugin.ts",
                  "lineNumber": 22
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/server/plugin.ts",
              "lineNumber": 22
            }
          },
          {
            "id": "def-server.ExpressionsServerPlugin.start",
            "type": "Function",
            "label": "start",
            "signature": [
              "(core: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCorePluginApi",
                "section": "def-server.CoreStart",
                "text": "CoreStart"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsServiceStart",
                "text": "ExpressionsServiceStart"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "core",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCorePluginApi",
                    "section": "def-server.CoreStart",
                    "text": "CoreStart"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/server/plugin.ts",
                  "lineNumber": 32
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/server/plugin.ts",
              "lineNumber": 32
            }
          },
          {
            "id": "def-server.ExpressionsServerPlugin.stop",
            "type": "Function",
            "label": "stop",
            "signature": [
              "() => void"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/server/plugin.ts",
              "lineNumber": 38
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/server/plugin.ts",
          "lineNumber": 16
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionType",
        "type": "Class",
        "tags": [],
        "label": "ExpressionType",
        "description": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionType.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 13
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionType.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nA short help text."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 18
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionType.validate",
            "type": "Function",
            "label": "validate",
            "description": [
              "\nType validation, useful for checking function output."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 23
            },
            "signature": [
              "(type: any) => void | Error"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionType.create",
            "type": "Unknown",
            "label": "create",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 25
            },
            "signature": [
              "unknown"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionType.serialize",
            "type": "Function",
            "label": "serialize",
            "description": [
              "\nOptional serialization (used when passing context around client/server)."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 30
            },
            "signature": [
              "((value: any) => any) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionType.deserialize",
            "type": "Function",
            "label": "deserialize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 31
            },
            "signature": [
              "((serialized: any) => any) | undefined"
            ]
          },
          {
            "id": "def-server.ExpressionType.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "definition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 33
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 33
            }
          },
          {
            "id": "def-server.ExpressionType.getToFn",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "typeName",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 48
                }
              }
            ],
            "signature": [
              "(typeName: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<any, any> | undefined"
            ],
            "description": [],
            "label": "getToFn",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 47
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-server.ExpressionType.getFromFn",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "typeName",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 53
                }
              }
            ],
            "signature": [
              "(typeName: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<any, any> | undefined"
            ],
            "description": [],
            "label": "getFromFn",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 52
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-server.ExpressionType.castsTo",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 57
                }
              }
            ],
            "signature": [
              "(value: any) => boolean"
            ],
            "description": [],
            "label": "castsTo",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 57
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-server.ExpressionType.castsFrom",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 59
                }
              }
            ],
            "signature": [
              "(value: any) => boolean"
            ],
            "description": [],
            "label": "castsFrom",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 59
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-server.ExpressionType.to",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 61
                }
              },
              {
                "type": "string",
                "label": "toTypeName",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 61
                }
              },
              {
                "type": "Object",
                "label": "types",
                "isRequired": true,
                "signature": [
                  "Record<string, ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionType",
                    "text": "ExpressionType"
                  },
                  ">"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 61
                }
              }
            ],
            "signature": [
              "(value: any, toTypeName: string, types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">) => any"
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 61
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-server.ExpressionType.from",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 73
                }
              },
              {
                "type": "Object",
                "label": "types",
                "isRequired": true,
                "signature": [
                  "Record<string, ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionType",
                    "text": "ExpressionType"
                  },
                  ">"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 73
                }
              }
            ],
            "signature": [
              "(value: any, types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">) => any"
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 73
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
          "lineNumber": 12
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.FunctionsRegistry",
        "type": "Class",
        "tags": [],
        "label": "FunctionsRegistry",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.FunctionsRegistry",
            "text": "FunctionsRegistry"
          },
          " implements ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunction",
            "text": "ExpressionFunction"
          },
          ">"
        ],
        "children": [
          {
            "id": "def-server.FunctionsRegistry.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "executor",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Executor",
                    "text": "Executor"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 59
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 59
            }
          },
          {
            "id": "def-server.FunctionsRegistry.register",
            "type": "Function",
            "label": "register",
            "signature": [
              "(functionDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 62
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 61
            }
          },
          {
            "id": "def-server.FunctionsRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 67
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 67
            }
          },
          {
            "id": "def-server.FunctionsRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 71
            }
          },
          {
            "id": "def-server.FunctionsRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              "[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 75
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/executor.ts",
          "lineNumber": 58
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.TypesRegistry",
        "type": "Class",
        "tags": [],
        "label": "TypesRegistry",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.TypesRegistry",
            "text": "TypesRegistry"
          },
          " implements ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionType",
            "text": "ExpressionType"
          },
          ">"
        ],
        "children": [
          {
            "id": "def-server.TypesRegistry.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "executor",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Executor",
                    "text": "Executor"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 37
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 37
            }
          },
          {
            "id": "def-server.TypesRegistry.register",
            "type": "Function",
            "label": "register",
            "signature": [
              "(typeDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "typeDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 40
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 39
            }
          },
          {
            "id": "def-server.TypesRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 45
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 45
            }
          },
          {
            "id": "def-server.TypesRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 49
            }
          },
          {
            "id": "def-server.TypesRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              "[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 53
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/executor.ts",
          "lineNumber": 36
        },
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "id": "def-server.buildExpression",
        "type": "Function",
        "label": "buildExpression",
        "signature": [
          "(initialState: string | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          " | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunctionBuilder",
            "text": "ExpressionAstFunctionBuilder"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.AnyExpressionFunctionDefinition",
            "text": "AnyExpressionFunctionDefinition"
          },
          ">[] | undefined) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpressionBuilder",
            "text": "ExpressionAstExpressionBuilder"
          }
        ],
        "description": [
          "\nMakes it easy to progressively build, update, and traverse an\nexpression AST. You can either start with an empty AST, or\nprovide an expression string, AST, or array of expression\nfunction builders to use as initial state.\n"
        ],
        "children": [
          {
            "type": "CompoundType",
            "label": "initialState",
            "isRequired": false,
            "signature": [
              "string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              " | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunctionBuilder",
                "text": "ExpressionAstFunctionBuilder"
              },
              "<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ">[] | undefined"
            ],
            "description": [
              "Optional. An expression string, AST, or array of `ExpressionAstFunctionBuilder[]`."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 98
            }
          }
        ],
        "tags": [
          "return"
        ],
        "returnComment": [
          "`this`"
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_expression.ts",
          "lineNumber": 97
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.buildExpressionFunction",
        "type": "Function",
        "label": "buildExpressionFunction",
        "signature": [
          "(fnName: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.InferFunctionDefinition",
            "text": "InferFunctionDefinition"
          },
          "<FnDef>[\"name\"], initialArgs: { [K in keyof FunctionArgs<FnDef>]: FunctionArgs<FnDef>[K] | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpressionBuilder",
            "text": "ExpressionAstExpressionBuilder"
          },
          " | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpressionBuilder",
            "text": "ExpressionAstExpressionBuilder"
          },
          "[]; }) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunctionBuilder",
            "text": "ExpressionAstFunctionBuilder"
          },
          "<FnDef>"
        ],
        "description": [
          "\nManages an AST for a single expression function. The return value\ncan be provided to `buildExpression` to add this function to an\nexpression.\n\nNote that to preserve type safety and ensure no args are missing,\nall required arguments for the specified function must be provided\nup front. If desired, they can be changed or removed later.\n"
        ],
        "children": [
          {
            "type": "Uncategorized",
            "label": "fnName",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.InferFunctionDefinition",
                "text": "InferFunctionDefinition"
              },
              "<FnDef>[\"name\"]"
            ],
            "description": [
              "String representing the name of this expression function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 155
            }
          },
          {
            "type": "Object",
            "label": "initialArgs",
            "isRequired": true,
            "signature": [
              "{ [K in keyof FunctionArgs<FnDef>]: FunctionArgs<FnDef>[K] | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              "[]; }"
            ],
            "description": [
              "Object containing the arguments to this function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 163
            }
          }
        ],
        "tags": [
          "return"
        ],
        "returnComment": [
          "`this`"
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_function.ts",
          "lineNumber": 152
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.format",
        "type": "Function",
        "label": "format",
        "signature": [
          "(ast: T, type: T extends ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          " ? \"expression\" : \"argument\") => string"
        ],
        "description": [],
        "children": [
          {
            "type": "Uncategorized",
            "label": "ast",
            "isRequired": true,
            "signature": [
              "T"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/format.ts",
              "lineNumber": 15
            }
          },
          {
            "type": "Uncategorized",
            "label": "type",
            "isRequired": true,
            "signature": [
              "T extends ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              " ? \"expression\" : \"argument\""
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/format.ts",
              "lineNumber": 16
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/format.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.formatExpression",
        "type": "Function",
        "label": "formatExpression",
        "signature": [
          "(ast: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          ") => string"
        ],
        "description": [
          "\nGiven expression pipeline AST, returns formatted string.\n"
        ],
        "children": [
          {
            "type": "Object",
            "label": "ast",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [
              "Expression pipeline AST."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/format_expression.ts",
              "lineNumber": 17
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/format_expression.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.isExpressionAstBuilder",
        "type": "Function",
        "label": "isExpressionAstBuilder",
        "signature": [
          "(val: any) => boolean"
        ],
        "description": [
          "\nType guard that checks whether a given value is an\n`ExpressionAstExpressionBuilder`. This is useful when working\nwith subexpressions, where you might be retrieving a function\nargument, and need to know whether it is an expression builder\ninstance which you can perform operations on.\n"
        ],
        "children": [
          {
            "type": "Any",
            "label": "val",
            "isRequired": true,
            "signature": [
              "any"
            ],
            "description": [
              "Value you want to check."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 35
            }
          }
        ],
        "tags": [
          "return"
        ],
        "returnComment": [
          "boolean"
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_expression.ts",
          "lineNumber": 35
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.parse",
        "type": "Function",
        "label": "parse",
        "signature": [
          "(expression: E, startRule: S) => S extends \"expression\" ? ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          " : ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstArgument",
            "text": "ExpressionAstArgument"
          }
        ],
        "description": [],
        "children": [
          {
            "type": "Uncategorized",
            "label": "expression",
            "isRequired": true,
            "signature": [
              "E"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/parse.ts",
              "lineNumber": 15
            }
          },
          {
            "type": "Uncategorized",
            "label": "startRule",
            "isRequired": true,
            "signature": [
              "S"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/parse.ts",
              "lineNumber": 16
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/parse.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.parseExpression",
        "type": "Function",
        "label": "parseExpression",
        "signature": [
          "(expression: string) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          }
        ],
        "description": [
          "\nGiven expression pipeline string, returns parsed AST.\n"
        ],
        "children": [
          {
            "type": "string",
            "label": "expression",
            "isRequired": true,
            "signature": [
              "string"
            ],
            "description": [
              "Expression pipeline string."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/parse_expression.ts",
              "lineNumber": 17
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/parse_expression.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "id": "def-server.Datatable",
        "type": "Interface",
        "label": "Datatable",
        "description": [
          "\nA `Datatable` in Canvas is a unique structure that represents tabulated data."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.Datatable.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 99
            },
            "signature": [
              "\"datatable\""
            ]
          },
          {
            "tags": [],
            "id": "def-server.Datatable.columns",
            "type": "Array",
            "label": "columns",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 100
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DatatableColumn",
                "text": "DatatableColumn"
              },
              "[]"
            ]
          },
          {
            "tags": [],
            "id": "def-server.Datatable.rows",
            "type": "Array",
            "label": "rows",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 101
            },
            "signature": [
              "Record<string, any>[]"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 98
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.DatatableColumn",
        "type": "Interface",
        "label": "DatatableColumn",
        "description": [
          "\nThis type represents the shape of a column in a `Datatable`."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.DatatableColumn.id",
            "type": "string",
            "label": "id",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 90
            }
          },
          {
            "tags": [],
            "id": "def-server.DatatableColumn.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 91
            }
          },
          {
            "tags": [],
            "id": "def-server.DatatableColumn.meta",
            "type": "Object",
            "label": "meta",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 92
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DatatableColumnMeta",
                "text": "DatatableColumnMeta"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 89
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExecutionContext",
        "type": "Interface",
        "label": "ExecutionContext",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<InspectorAdapters, ExecutionContextSearch>"
        ],
        "description": [
          "\n`ExecutionContext` is an object available to all functions during a single execution;\nit provides various methods to perform side-effects."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExecutionContext.getSearchContext",
            "type": "Function",
            "label": "getSearchContext",
            "description": [
              "\nGet search context of the expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 28
            },
            "signature": [
              "() => ExecutionContextSearch"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionContext.variables",
            "type": "Object",
            "label": "variables",
            "description": [
              "\nContext variables that can be consumed using `var` and `var_set` functions."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 33
            },
            "signature": [
              "Record<string, unknown>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionContext.types",
            "type": "Object",
            "label": "types",
            "description": [
              "\nA map of available expression types."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 38
            },
            "signature": [
              "Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionContext.abortSignal",
            "type": "Object",
            "label": "abortSignal",
            "description": [
              "\nAdds ability to abort current execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 43
            },
            "signature": [
              "AbortSignal"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionContext.inspectorAdapters",
            "type": "Uncategorized",
            "label": "inspectorAdapters",
            "description": [
              "\nAdapters for `inspector` plugin."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 48
            },
            "signature": [
              "InspectorAdapters"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionContext.getSearchSessionId",
            "type": "Function",
            "label": "getSearchSessionId",
            "description": [
              "\nSearch context in which expression should operate."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 53
            },
            "signature": [
              "() => string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionContext.getKibanaRequest",
            "type": "Function",
            "label": "getKibanaRequest",
            "description": [
              "\nGetter to retrieve the `KibanaRequest` object inside an expression function.\nUseful for functions which are running on the server and need to perform\noperations that are scoped to a specific user."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 60
            },
            "signature": [
              "(() => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionContext.getSavedObject",
            "type": "Function",
            "label": "getSavedObject",
            "description": [
              "\nAllows to fetch saved objects from ElasticSearch. In browser `getSavedObject`\nfunction is provided automatically by the Expressions plugin. On the server\nthe caller of the expression has to provide this context function. The\nreason is because on the browser we always know the user who tries to\nfetch a saved object, thus saved object client is scoped automatically to\nthat user. However, on the server we can scope that saved object client to\nany user, or even not scope it at all and execute it as an \"internal\" user."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 71
            },
            "signature": [
              "(<T extends ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectAttributes",
                "text": "SavedObjectAttributes"
              },
              " = ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectAttributes",
                "text": "SavedObjectAttributes"
              },
              ">(type: string, id: string) => Promise<",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObject",
                "text": "SavedObject"
              },
              "<T>>) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionContext.isSyncColorsEnabled",
            "type": "Function",
            "label": "isSyncColorsEnabled",
            "description": [
              "\nReturns the state (true|false) of the sync colors across panels switch."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 79
            },
            "signature": [
              "(() => boolean) | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/types.ts",
          "lineNumber": 21
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExecutionParams",
        "type": "Interface",
        "label": "ExecutionParams",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExecutionParams.executor",
            "type": "Object",
            "label": "executor",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 58
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              "<any>"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionParams.ast",
            "type": "Object",
            "label": "ast",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 59
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionParams.expression",
            "type": "string",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 60
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionParams.params",
            "type": "Object",
            "label": "params",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 61
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/execution.ts",
          "lineNumber": 57
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExecutionState",
        "type": "Interface",
        "label": "ExecutionState",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionState",
            "text": "ExecutionState"
          },
          "<Output> extends ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutorState",
            "text": "ExecutorState"
          },
          "<Record<string, unknown>>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExecutionState.ast",
            "type": "Object",
            "label": "ast",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 18
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionState.state",
            "type": "CompoundType",
            "label": "state",
            "description": [
              "\nTracks state of execution.\n\n- `not-started` - before .start() method was called.\n- `pending` - immediately after .start() method is called.\n- `result` - when expression execution completed.\n- `error` - when execution failed with error."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 28
            },
            "signature": [
              "\"result\" | \"error\" | \"not-started\" | \"pending\""
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionState.result",
            "type": "Uncategorized",
            "label": "result",
            "description": [
              "\nResult of the expression execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 33
            },
            "signature": [
              "Output | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutionState.error",
            "type": "Object",
            "label": "error",
            "description": [
              "\nError happened during the execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 38
            },
            "signature": [
              "Error | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/container.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExecutorState",
        "type": "Interface",
        "label": "ExecutorState",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutorState",
            "text": "ExecutorState"
          },
          "<Context>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExecutorState.functions",
            "type": "Object",
            "label": "functions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 17
            },
            "signature": [
              "Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutorState.types",
            "type": "Object",
            "label": "types",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 18
            },
            "signature": [
              "Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExecutorState.context",
            "type": "Uncategorized",
            "label": "context",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 19
            },
            "signature": [
              "Context"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 16
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionAstExpressionBuilder",
        "type": "Interface",
        "label": "ExpressionAstExpressionBuilder",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionAstExpressionBuilder.type",
            "type": "string",
            "label": "type",
            "description": [
              "\nUsed to identify expression builder objects."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 48
            },
            "signature": [
              "\"expression_builder\""
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionAstExpressionBuilder.functions",
            "type": "Array",
            "label": "functions",
            "description": [
              "\nArray of each of the `buildExpressionFunction()` instances\nin this expression. Use this to remove or reorder functions\nin the expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 54
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunctionBuilder",
                "text": "ExpressionAstFunctionBuilder"
              },
              "<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ">[]"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-server.ExpressionAstExpressionBuilder.findFunction",
            "type": "Function",
            "label": "findFunction",
            "description": [
              "\nRecursively searches expression for all ocurrences of the\nfunction, including in subexpressions.\n\nUseful when performing migrations on a specific function,\nas you can iterate over the array of references and update\nall functions at once.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 66
            },
            "signature": [
              "<FnDef extends ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " = ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ">(fnName: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.InferFunctionDefinition",
                "text": "InferFunctionDefinition"
              },
              "<FnDef>[\"name\"]) => [] | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunctionBuilder",
                "text": "ExpressionAstFunctionBuilder"
              },
              "<FnDef>[]"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-server.ExpressionAstExpressionBuilder.toAst",
            "type": "Function",
            "label": "toAst",
            "description": [
              "\nConverts expression to an AST.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 74
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-server.ExpressionAstExpressionBuilder.toString",
            "type": "Function",
            "label": "toString",
            "description": [
              "\nConverts expression to an expression string.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 80
            },
            "signature": [
              "() => string"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_expression.ts",
          "lineNumber": 44
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionAstFunctionBuilder",
        "type": "Interface",
        "label": "ExpressionAstFunctionBuilder",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunctionBuilder",
            "text": "ExpressionAstFunctionBuilder"
          },
          "<FnDef>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionAstFunctionBuilder.type",
            "type": "string",
            "label": "type",
            "description": [
              "\nUsed to identify expression function builder objects."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 63
            },
            "signature": [
              "\"expression_function_builder\""
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionAstFunctionBuilder.name",
            "type": "Uncategorized",
            "label": "name",
            "description": [
              "\nName of this expression function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 67
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.InferFunctionDefinition",
                "text": "InferFunctionDefinition"
              },
              "<FnDef>[\"name\"]"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionAstFunctionBuilder.arguments",
            "type": "Object",
            "label": "arguments",
            "description": [
              "\nObject of all args currently added to the function. This is\nstructured similarly to `ExpressionAstFunction['arguments']`,\nhowever any subexpressions are returned as expression builder\ninstances instead of expression ASTs."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 74
            },
            "signature": [
              "FunctionBuilderArguments<FnDef>"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-server.ExpressionAstFunctionBuilder.addArgument",
            "type": "Function",
            "label": "addArgument",
            "description": [
              "\nAdds an additional argument to the function. For multi-args,\nthis should be called once for each new arg. Note that TS\nwill not enforce whether multi-args are available, so only\nuse this to update an existing arg if you are certain it\nis a multi-arg.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 86
            },
            "signature": [
              "<A extends FunctionArgName<FnDef>>(name: A, value: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | FunctionArgs<FnDef>[A]) => this"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-server.ExpressionAstFunctionBuilder.getArgument",
            "type": "Function",
            "label": "getArgument",
            "description": [
              "\nRetrieves an existing argument by name.\nUseful when you want to retrieve the current array of args and add\nsomething to it before calling `replaceArgument`. Any subexpression\narguments will be returned as expression builder instances.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 99
            },
            "signature": [
              "<A extends FunctionArgName<FnDef>>(name: A) => (",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | FunctionArgs<FnDef>[A])[] | undefined"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-server.ExpressionAstFunctionBuilder.replaceArgument",
            "type": "Function",
            "label": "replaceArgument",
            "description": [
              "\nOverwrites an existing argument with a new value.\nIn order to support multi-args, the value given must always be\nan array.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 111
            },
            "signature": [
              "<A extends FunctionArgName<FnDef>>(name: A, value: (",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | FunctionArgs<FnDef>[A])[]) => this"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-server.ExpressionAstFunctionBuilder.removeArgument",
            "type": "Function",
            "label": "removeArgument",
            "description": [
              "\nRemoves an (optional) argument from the function.\n\nTypeScript will enforce that you only remove optional\narguments. For manipulating required args, use `replaceArgument`.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 124
            },
            "signature": [
              "<A extends OptionalKeys<FunctionArgs<FnDef>>>(name: A) => this"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-server.ExpressionAstFunctionBuilder.toAst",
            "type": "Function",
            "label": "toAst",
            "description": [
              "\nConverts function to an AST.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 130
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunction",
                "text": "ExpressionAstFunction"
              }
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-server.ExpressionAstFunctionBuilder.toString",
            "type": "Function",
            "label": "toString",
            "description": [
              "\nConverts function to an expression string.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 136
            },
            "signature": [
              "() => string"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_function.ts",
          "lineNumber": 57
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionFunctionDefinition",
        "type": "Interface",
        "label": "ExpressionFunctionDefinition",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunctionDefinition",
            "text": "ExpressionFunctionDefinition"
          },
          "<Name, Input, Arguments, Output, Context> extends Partial<",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableState",
            "text": "PersistableState"
          },
          "<Record<string, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstArgument",
            "text": "ExpressionAstArgument"
          },
          "[]>>>"
        ],
        "description": [
          "\n`ExpressionFunctionDefinition` is the interface plugins have to implement to\nregister a function in `expressions` plugin."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinition.name",
            "type": "Uncategorized",
            "label": "name",
            "description": [
              "\nThe name of the function, as will be used in expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 40
            },
            "signature": [
              "Name"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinition.disabled",
            "type": "CompoundType",
            "label": "disabled",
            "description": [
              "\nif set to true function will be disabled (but its migrate function will still be available)"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 45
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinition.type",
            "type": "CompoundType",
            "label": "type",
            "description": [
              "\nName of type of value this function outputs."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 50
            },
            "signature": [
              "\"date\" | \"filter\" | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.KnownTypeToString",
                "text": "KnownTypeToString"
              },
              "<",
              "UnwrapPromiseOrReturn",
              "<Output>> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinition.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [
              "\nList of allowed type names for input value of this function. If this\nproperty is set the input of function will be cast to the first possible\ntype in this list. If this property is missing the input will be provided\nto the function as-is."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 58
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.TypeToString",
                "text": "TypeToString"
              },
              "<Input>[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinition.args",
            "type": "Object",
            "label": "args",
            "description": [
              "\nSpecification of arguments that function supports. This list will also be\nused for autocomplete functionality when your function is being edited."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 64
            },
            "signature": [
              "{ [key in keyof Arguments]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ArgumentType",
                "text": "ArgumentType"
              },
              "<Arguments[key]>; }"
            ]
          },
          {
            "tags": [
              "todo"
            ],
            "id": "def-server.ExpressionFunctionDefinition.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 69
            },
            "signature": [
              "string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinition.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nHelp text displayed in the Expression editor. This text should be\ninternationalized."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 75
            }
          },
          {
            "id": "def-server.ExpressionFunctionDefinition.fn",
            "type": "Function",
            "label": "fn",
            "signature": [
              "(input: Input, args: Arguments, context: Context) => Output"
            ],
            "description": [
              "\nThe actual implementation of the function.\n"
            ],
            "children": [
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [
                  "Output of the previous function, or initial input."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/types.ts",
                  "lineNumber": 86
                }
              },
              {
                "type": "Uncategorized",
                "label": "args",
                "isRequired": true,
                "signature": [
                  "Arguments"
                ],
                "description": [
                  "Parameters set for this function in expression."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/types.ts",
                  "lineNumber": 86
                }
              },
              {
                "type": "Uncategorized",
                "label": "context",
                "isRequired": true,
                "signature": [
                  "Context"
                ],
                "description": [
                  "Object with functions to perform side effects. This object\nis created for the duration of the execution of expression and is the\nsame for all functions in expression chain."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/types.ts",
                  "lineNumber": 86
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 86
            }
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-server.ExpressionFunctionDefinition.context",
            "type": "Object",
            "label": "context",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 91
            },
            "signature": [
              "{ types: any[] | undefined; } | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/types.ts",
          "lineNumber": 30
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionFunctionDefinitions",
        "type": "Interface",
        "label": "ExpressionFunctionDefinitions",
        "description": [
          "\nA mapping of `ExpressionFunctionDefinition`s for functions which the\nExpressions services provides out-of-the-box. Any new functions registered\nby the Expressions plugin should have their types added here.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinitions.clog",
            "type": "Object",
            "label": "clog",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 117
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionClog",
                "text": "ExpressionFunctionClog"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinitions.font",
            "type": "Object",
            "label": "font",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 118
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionFont",
                "text": "ExpressionFunctionFont"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinitions.var_set",
            "type": "Object",
            "label": "var_set",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 119
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionVarSet",
                "text": "ExpressionFunctionVarSet"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinitions.var",
            "type": "Object",
            "label": "var",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 120
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionVar",
                "text": "ExpressionFunctionVar"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinitions.theme",
            "type": "Object",
            "label": "theme",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 121
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionTheme",
                "text": "ExpressionFunctionTheme"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinitions.cumulative_sum",
            "type": "Object",
            "label": "cumulative_sum",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 122
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionCumulativeSum",
                "text": "ExpressionFunctionCumulativeSum"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinitions.derivative",
            "type": "Object",
            "label": "derivative",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 123
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionDerivative",
                "text": "ExpressionFunctionDerivative"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionFunctionDefinitions.moving_average",
            "type": "Object",
            "label": "moving_average",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 124
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionMovingAverage",
                "text": "ExpressionFunctionMovingAverage"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/types.ts",
          "lineNumber": 116
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionImage",
        "type": "Interface",
        "label": "ExpressionImage",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionImage.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 15
            },
            "signature": [
              "\"image\""
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionImage.mode",
            "type": "string",
            "label": "mode",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionImage.dataurl",
            "type": "string",
            "label": "dataurl",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 17
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionRenderDefinition",
        "type": "Interface",
        "label": "ExpressionRenderDefinition",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderDefinition",
            "text": "ExpressionRenderDefinition"
          },
          "<Config>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionRenderDefinition.name",
            "type": "string",
            "label": "name",
            "description": [
              "\nTechnical name of the renderer, used as ID to identify renderer in\nexpression renderer registry. This must match the name of the expression\nfunction that is used to create the `type: render` object."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 15
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionRenderDefinition.displayName",
            "type": "string",
            "label": "displayName",
            "description": [
              "\nA user friendly name of the renderer as will be displayed to user in UI."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 20
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionRenderDefinition.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nHelp text as will be displayed to user. A sentence or few about what this\nelement does."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 26
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionRenderDefinition.validate",
            "type": "Function",
            "label": "validate",
            "description": [
              "\nUsed to validate the data before calling the render function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 31
            },
            "signature": [
              "(() => Error | undefined) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionRenderDefinition.reuseDomNode",
            "type": "boolean",
            "label": "reuseDomNode",
            "description": [
              "\nTell the renderer if the dom node should be reused, it's recreated each\ntime by default."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 37
            }
          },
          {
            "tags": [],
            "id": "def-server.ExpressionRenderDefinition.render",
            "type": "Function",
            "label": "render",
            "description": [
              "\nThe function called to render the output data of an expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 42
            },
            "signature": [
              "(domNode: HTMLElement, config: Config, handlers: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.IInterpreterRenderHandlers",
                "text": "IInterpreterRenderHandlers"
              },
              ") => void | Promise<void>"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/types.ts",
          "lineNumber": 9
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionTypeDefinition",
        "type": "Interface",
        "label": "ExpressionTypeDefinition",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionTypeDefinition",
            "text": "ExpressionTypeDefinition"
          },
          "<Name, Value, SerializedType>"
        ],
        "description": [
          "\nA generic type which represents a custom Expression Type Definition that's\nregistered to the Interpreter."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionTypeDefinition.name",
            "type": "Uncategorized",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 31
            },
            "signature": [
              "Name"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionTypeDefinition.validate",
            "type": "Function",
            "label": "validate",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 32
            },
            "signature": [
              "((type: any) => void | Error) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionTypeDefinition.serialize",
            "type": "Function",
            "label": "serialize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 33
            },
            "signature": [
              "((type: Value) => SerializedType) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionTypeDefinition.deserialize",
            "type": "Function",
            "label": "deserialize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 34
            },
            "signature": [
              "((type: SerializedType) => Value) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionTypeDefinition.from",
            "type": "Object",
            "label": "from",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 37
            },
            "signature": [
              "{ [type: string]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<any, Value>; } | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionTypeDefinition.to",
            "type": "Object",
            "label": "to",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 40
            },
            "signature": [
              "{ [type: string]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<Value, any>; } | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionTypeDefinition.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 43
            },
            "signature": [
              "string | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 26
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionTypeStyle",
        "type": "Interface",
        "label": "ExpressionTypeStyle",
        "description": [
          "\nAn object that represents style information, typically CSS."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.ExpressionTypeStyle.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 121
            },
            "signature": [
              "\"style\""
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionTypeStyle.spec",
            "type": "Object",
            "label": "spec",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 122
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.CSSStyle",
                "text": "CSSStyle"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.ExpressionTypeStyle.css",
            "type": "string",
            "label": "css",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 123
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 120
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.Font",
        "type": "Interface",
        "label": "Font",
        "description": [
          "\nAn interface representing a font in Canvas, with a textual label and the CSS\n`font-value`."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.Font.label",
            "type": "CompoundType",
            "label": "label",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/fonts.ts",
              "lineNumber": 26
            },
            "signature": [
              "\"American Typewriter\" | \"Arial\" | \"Baskerville\" | \"Book Antiqua\" | \"Brush Script\" | \"Chalkboard\" | \"Didot\" | \"Futura\" | \"Gill Sans\" | \"Helvetica Neue\" | \"Hoefler Text\" | \"Lucida Grande\" | \"Myriad\" | \"Open Sans\" | \"Optima\" | \"Palatino\""
            ]
          },
          {
            "tags": [],
            "id": "def-server.Font.value",
            "type": "CompoundType",
            "label": "value",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/fonts.ts",
              "lineNumber": 27
            },
            "signature": [
              "\"'American Typewriter', 'Courier New', Courier, Monaco, mono\" | \"Arial, sans-serif\" | \"Baskerville, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Brush Script MT', 'Comic Sans', sans-serif\" | \"Chalkboard, 'Comic Sans', sans-serif\" | \"Didot, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"Futura, Impact, Helvetica, Arial, sans-serif\" | \"'Gill Sans', 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"'Helvetica Neue', Helvetica, Arial, sans-serif\" | \"'Hoefler Text', Garamond, Georgia, 'Times New Roman', Times, serif\" | \"'Lucida Grande', 'Lucida Sans Unicode', Lucida, Verdana, Helvetica, Arial, sans-serif\" | \"Myriad, Helvetica, Arial, sans-serif\" | \"'Open Sans', Helvetica, Arial, sans-serif\" | \"Optima, 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"Palatino, 'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\""
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 25
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.IInterpreterRenderHandlers",
        "type": "Interface",
        "label": "IInterpreterRenderHandlers",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.IInterpreterRenderHandlers.done",
            "type": "Function",
            "label": "done",
            "description": [
              "\nDone increments the number of rendering successes"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 67
            },
            "signature": [
              "() => void"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IInterpreterRenderHandlers.onDestroy",
            "type": "Function",
            "label": "onDestroy",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 68
            },
            "signature": [
              "(fn: () => void) => void"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IInterpreterRenderHandlers.reload",
            "type": "Function",
            "label": "reload",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 69
            },
            "signature": [
              "() => void"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IInterpreterRenderHandlers.update",
            "type": "Function",
            "label": "update",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 70
            },
            "signature": [
              "(params: any) => void"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IInterpreterRenderHandlers.event",
            "type": "Function",
            "label": "event",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 71
            },
            "signature": [
              "(event: any) => void"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IInterpreterRenderHandlers.hasCompatibleActions",
            "type": "Function",
            "label": "hasCompatibleActions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 72
            },
            "signature": [
              "((event: any) => Promise<boolean>) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IInterpreterRenderHandlers.getRenderMode",
            "type": "Function",
            "label": "getRenderMode",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 73
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.RenderMode",
                "text": "RenderMode"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-server.IInterpreterRenderHandlers.isSyncColorsEnabled",
            "type": "Function",
            "label": "isSyncColorsEnabled",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 74
            },
            "signature": [
              "() => boolean"
            ]
          },
          {
            "tags": [],
            "id": "def-server.IInterpreterRenderHandlers.uiState",
            "type": "Unknown",
            "label": "uiState",
            "description": [
              "\nThis uiState interface is actually `PersistedState` from the visualizations plugin,\nbut expressions cannot know about vis or it creates a mess of circular dependencies.\nDownstream consumers of the uiState handler will need to cast for now."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 80
            },
            "signature": [
              "unknown"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/types.ts",
          "lineNumber": 63
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.IRegistry",
        "type": "Interface",
        "label": "IRegistry",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<T>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "id": "def-server.IRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => T | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/types/registry.ts",
                  "lineNumber": 10
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/types/registry.ts",
              "lineNumber": 10
            }
          },
          {
            "id": "def-server.IRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, T>"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/types/registry.ts",
              "lineNumber": 12
            }
          },
          {
            "id": "def-server.IRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => T[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/types/registry.ts",
              "lineNumber": 14
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/registry.ts",
          "lineNumber": 9
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.PointSeriesColumn",
        "type": "Interface",
        "label": "PointSeriesColumn",
        "description": [
          "\nColumn in a PointSeries"
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.PointSeriesColumn.type",
            "type": "CompoundType",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 24
            },
            "signature": [
              "\"string\" | \"number\""
            ]
          },
          {
            "tags": [],
            "id": "def-server.PointSeriesColumn.role",
            "type": "CompoundType",
            "label": "role",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 25
            },
            "signature": [
              "\"measure\" | \"dimension\""
            ]
          },
          {
            "tags": [],
            "id": "def-server.PointSeriesColumn.expression",
            "type": "string",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 26
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 23
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.Range",
        "type": "Interface",
        "label": "Range",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.Range.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 15
            },
            "signature": [
              "\"range\""
            ]
          },
          {
            "tags": [],
            "id": "def-server.Range.from",
            "type": "number",
            "label": "from",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-server.Range.to",
            "type": "number",
            "label": "to",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 17
            }
          },
          {
            "tags": [],
            "id": "def-server.Range.label",
            "type": "string",
            "label": "label",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 18
            },
            "signature": [
              "string | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.SerializedDatatable",
        "type": "Interface",
        "label": "SerializedDatatable",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.SerializedDatatable",
            "text": "SerializedDatatable"
          },
          " extends ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Datatable",
            "text": "Datatable"
          }
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.SerializedDatatable.rows",
            "type": "Array",
            "label": "rows",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 105
            },
            "signature": [
              "string[][]"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 104
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.SerializedFieldFormat",
        "type": "Interface",
        "label": "SerializedFieldFormat",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.SerializedFieldFormat",
            "text": "SerializedFieldFormat"
          },
          "<TParams>"
        ],
        "description": [
          "\nJSON representation of a field formatter configuration.\nIs used to carry information about how to format data in\na data table as part of the column definition."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-server.SerializedFieldFormat.id",
            "type": "string",
            "label": "id",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/common.ts",
              "lineNumber": 54
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-server.SerializedFieldFormat.params",
            "type": "Uncategorized",
            "label": "params",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/common.ts",
              "lineNumber": 55
            },
            "signature": [
              "TParams | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 53
        },
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "id": "def-server.FontStyle",
        "type": "Enum",
        "label": "FontStyle",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `font-style` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 35
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.FontWeight",
        "type": "Enum",
        "label": "FontWeight",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `font-weight` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 43
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.Overflow",
        "type": "Enum",
        "label": "Overflow",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `overflow` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 62
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.TextAlignment",
        "type": "Enum",
        "label": "TextAlignment",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `text-align` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 72
        },
        "initialIsOpen": false
      },
      {
        "id": "def-server.TextDecoration",
        "type": "Enum",
        "label": "TextDecoration",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `text-decoration` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 82
        },
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "id": "def-server.AnyExpressionFunctionDefinition",
        "type": "Type",
        "label": "AnyExpressionFunctionDefinition",
        "tags": [],
        "description": [
          "\nType to capture every possible expression function definition."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/types.ts",
          "lineNumber": 102
        },
        "signature": [
          "ExpressionFunctionDefinition<string, any, Record<string, any>, any, ExecutionContext<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.AnyExpressionTypeDefinition",
        "type": "Type",
        "label": "AnyExpressionTypeDefinition",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 46
        },
        "signature": [
          "ExpressionTypeDefinition<any, any, any>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ArgumentType",
        "type": "Type",
        "label": "ArgumentType",
        "tags": [],
        "description": [
          "\nThis type represents all of the possible combinations of properties of an\nArgument in an Expression Function. The presence or absence of certain fields\ninfluence the shape and presence of others within each `arg` in the specification."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/arguments.ts",
          "lineNumber": 16
        },
        "signature": [
          "SingleArgumentType<T> | MultipleArgumentType<T> | UnresolvedSingleArgumentType<T> | UnresolvedMultipleArgumentType<T>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.DatatableColumnType",
        "type": "Type",
        "label": "DatatableColumnType",
        "tags": [],
        "description": [
          "\nThis type represents the `type` of any `DatatableColumn` in a `Datatable`.\nits duplicated from KBN_FIELD_TYPES"
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 36
        },
        "signature": [
          "\"string\" | \"number\" | \"boolean\" | \"object\" | \"date\" | \"ip\" | \"_source\" | \"attachment\" | \"geo_point\" | \"geo_shape\" | \"murmur3\" | \"unknown\" | \"conflict\" | \"nested\" | \"histogram\" | \"null\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.DatatableRow",
        "type": "Type",
        "label": "DatatableRow",
        "tags": [],
        "description": [
          "\nThis type represents a row in a `Datatable`."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 57
        },
        "signature": [
          "{ [x: string]: any; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExecutionContainer",
        "type": "Type",
        "label": "ExecutionContainer",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/execution/container.ts",
          "lineNumber": 73
        },
        "signature": [
          "StateContainer<ExecutionState<Output>, ExecutionPureTransitions<Output>, {}>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExecutorContainer",
        "type": "Type",
        "label": "ExecutorContainer",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 55
        },
        "signature": [
          "StateContainer<ExecutorState<Context>, ExecutorPureTransitions, ExecutorPureSelectors>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionAstArgument",
        "type": "Type",
        "label": "ExpressionAstArgument",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 77
        },
        "signature": [
          "string | number | false | true | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionAstExpression",
        "type": "Type",
        "label": "ExpressionAstExpression",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 16
        },
        "signature": [
          "{ type: 'expression'; chain: ExpressionAstFunction[]; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionAstFunction",
        "type": "Type",
        "label": "ExpressionAstFunction",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 21
        },
        "signature": [
          "{ type: 'function'; function: string; arguments: Record<string, ExpressionAstArgument[]>; debug?: ExpressionAstFunctionDebug | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionAstNode",
        "type": "Type",
        "label": "ExpressionAstNode",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 11
        },
        "signature": [
          "string | number | false | true | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunction",
            "text": "ExpressionAstFunction"
          },
          " | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionValue",
        "type": "Type",
        "label": "ExpressionValue",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 15
        },
        "signature": [
          "any"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionValueBoxed",
        "type": "Type",
        "label": "ExpressionValueBoxed",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 11
        },
        "signature": [
          "{ type: Type; } & Value"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionValueConverter",
        "type": "Type",
        "label": "ExpressionValueConverter",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 17
        },
        "signature": [
          "(input: I, availableTypes: Record<string, any>) => O"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionValueError",
        "type": "Type",
        "label": "ExpressionValueError",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
          "lineNumber": 17
        },
        "signature": [
          "{ type: \"error\"; } & { error: ErrorLike; info?: SerializableState | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionValueFilter",
        "type": "Type",
        "label": "ExpressionValueFilter",
        "tags": [],
        "description": [
          "\nRepresents an object that is a Filter."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/filter.ts",
          "lineNumber": 14
        },
        "signature": [
          "{ type: \"filter\"; } & { filterType?: string | undefined; value?: string | undefined; column?: string | undefined; and: ExpressionValueFilter[]; to?: string | undefined; from?: string | undefined; query?: string | null | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionValueNum",
        "type": "Type",
        "label": "ExpressionValueNum",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
          "lineNumber": 14
        },
        "signature": [
          "{ type: \"num\"; } & { value: number; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionValueRender",
        "type": "Type",
        "label": "ExpressionValueRender",
        "tags": [],
        "description": [
          "\nRepresents an object that is intended to be rendered."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
          "lineNumber": 16
        },
        "signature": [
          "{ type: \"render\"; } & { as: string; value: T; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionValueRender",
        "type": "Type",
        "label": "ExpressionValueRender",
        "tags": [],
        "description": [
          "\nRepresents an object that is intended to be rendered."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
          "lineNumber": 16
        },
        "signature": [
          "{ type: \"render\"; } & { as: string; value: T; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.ExpressionValueUnboxed",
        "type": "Type",
        "label": "ExpressionValueUnboxed",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 9
        },
        "signature": [
          "any"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.FontLabel",
        "type": "Type",
        "label": "FontLabel",
        "tags": [],
        "description": [
          "\nThis type contains a unions of all supported font labels, or the the name of\nthe font the user would see in a UI."
        ],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 13
        },
        "signature": [
          "\"American Typewriter\" | \"Arial\" | \"Baskerville\" | \"Book Antiqua\" | \"Brush Script\" | \"Chalkboard\" | \"Didot\" | \"Futura\" | \"Gill Sans\" | \"Helvetica Neue\" | \"Hoefler Text\" | \"Lucida Grande\" | \"Myriad\" | \"Open Sans\" | \"Optima\" | \"Palatino\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.FontValue",
        "type": "Type",
        "label": "FontValue",
        "tags": [],
        "description": [
          "\nThis type contains a union of all supported font values, equivalent to the CSS\n`font-value` property."
        ],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 19
        },
        "signature": [
          "\"'American Typewriter', 'Courier New', Courier, Monaco, mono\" | \"Arial, sans-serif\" | \"Baskerville, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Brush Script MT', 'Comic Sans', sans-serif\" | \"Chalkboard, 'Comic Sans', sans-serif\" | \"Didot, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"Futura, Impact, Helvetica, Arial, sans-serif\" | \"'Gill Sans', 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"'Helvetica Neue', Helvetica, Arial, sans-serif\" | \"'Hoefler Text', Garamond, Georgia, 'Times New Roman', Times, serif\" | \"'Lucida Grande', 'Lucida Sans Unicode', Lucida, Verdana, Helvetica, Arial, sans-serif\" | \"Myriad, Helvetica, Arial, sans-serif\" | \"'Open Sans', Helvetica, Arial, sans-serif\" | \"Optima, 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"Palatino, 'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.InterpreterErrorType",
        "type": "Type",
        "label": "InterpreterErrorType",
        "tags": [
          "deprecated"
        ],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
          "lineNumber": 33
        },
        "signature": [
          "{ type: \"error\"; } & { error: ErrorLike; info?: SerializableState | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.KnownTypeToString",
        "type": "Type",
        "label": "KnownTypeToString",
        "tags": [],
        "description": [
          "\nMap the type of the generic to a string-based representation of the type.\n\nIf the provided generic is its own type interface, we use the value of\nthe `type` key as a string literal type for it."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 26
        },
        "signature": [
          "T extends string ? \"string\" : T extends boolean ? \"boolean\" : T extends number ? \"number\" : T extends null ? \"null\" : T extends { type: string; } ? T[\"type\"] : never"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.PointSeries",
        "type": "Type",
        "label": "PointSeries",
        "tags": [],
        "description": [
          "\nA `PointSeries` is a unique structure that represents dots on a chart."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 39
        },
        "signature": [
          "{ type: \"pointseries\"; } & { columns: PointSeriesColumns; rows: PointSeriesRow[]; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.PointSeriesColumnName",
        "type": "Type",
        "label": "PointSeriesColumnName",
        "tags": [],
        "description": [
          "\nAllowed column names in a PointSeries"
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 18
        },
        "signature": [
          "\"color\" | \"y\" | \"x\" | \"text\" | \"size\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.PointSeriesColumns",
        "type": "Type",
        "label": "PointSeriesColumns",
        "tags": [],
        "description": [
          "\nRepresents a collection of valid Columns in a PointSeries"
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 32
        },
        "signature": [
          "{} | Record<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.PointSeriesColumnName",
            "text": "PointSeriesColumnName"
          },
          ", ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.PointSeriesColumn",
            "text": "PointSeriesColumn"
          },
          ">"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.PointSeriesRow",
        "type": "Type",
        "label": "PointSeriesRow",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 34
        },
        "signature": [
          "{ [x: string]: any; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.Style",
        "type": "Type",
        "label": "Style",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 126
        },
        "signature": [
          "ExpressionTypeStyle"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.TypeString",
        "type": "Type",
        "label": "TypeString",
        "tags": [],
        "description": [
          "\nIf the type extends a Promise, we still need to return the string representation:\n\n`someArgument: Promise<boolean | string>` results in `types: ['boolean', 'string']`"
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 39
        },
        "signature": [
          "UnwrapPromiseOrReturn<T> extends string ? \"string\" : UnwrapPromiseOrReturn<T> extends boolean ? \"boolean\" : UnwrapPromiseOrReturn<T> extends number ? \"number\" : UnwrapPromiseOrReturn<T> extends null ? \"null\" : UnwrapPromiseOrReturn<T> extends { type: string; } ? ({ type: string; } & UnwrapPromiseOrReturn<T>)[\"type\"] : never"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.TypeToString",
        "type": "Type",
        "label": "TypeToString",
        "tags": [],
        "description": [
          "\nThis can convert a type into a known Expression string representation of\nthat type. For example, `TypeToString<Datatable>` will resolve to `'datatable'`.\nThis allows Expression Functions to continue to specify their type in a\nsimple string format."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 17
        },
        "signature": [
          "\"date\" | \"filter\" | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.KnownTypeToString",
            "text": "KnownTypeToString"
          },
          "<T>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-server.UnmappedTypeStrings",
        "type": "Type",
        "label": "UnmappedTypeStrings",
        "tags": [],
        "description": [
          "\nTypes used in Expressions that don't map to a primitive cleanly:\n\n`date` is typed as a number or string, and represents a date"
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 46
        },
        "signature": [
          "\"date\" | \"filter\""
        ],
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "id": "def-server.ExpressionsServerSetup",
      "type": "Type",
      "label": "ExpressionsServerSetup",
      "tags": [],
      "description": [],
      "source": {
        "path": "src/plugins/expressions/server/plugin.ts",
        "lineNumber": 12
      },
      "signature": [
        "{ readonly getType: (name: string) => ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionType",
          "text": "ExpressionType"
        },
        " | undefined; readonly getFunction: (name: string) => ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionFunction",
          "text": "ExpressionFunction"
        },
        " | undefined; readonly getFunctions: () => Record<string, ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionFunction",
          "text": "ExpressionFunction"
        },
        ">; readonly getRenderer: (name: string) => ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionRenderer",
          "text": "ExpressionRenderer"
        },
        "<unknown> | null; readonly getRenderers: () => Record<string, ",
        {
          "pluginId": "expressions",
          "scope": "common",
          "docId": "kibExpressionsPluginApi",
          "section": "def-common.ExpressionRenderer",
          "text": "ExpressionRenderer"
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "id": "def-server.ExpressionsServerStart",
      "type": "Type",
      "label": "ExpressionsServerStart",
      "tags": [],
      "description": [],
      "source": {
        "path": "src/plugins/expressions/server/plugin.ts",
        "lineNumber": 14
      },
      "signature": [
        "ExpressionsServiceStart"
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [
      {
        "id": "def-common.Execution",
        "type": "Class",
        "tags": [],
        "label": "Execution",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Execution",
            "text": "Execution"
          },
          "<Input, Output, InspectorAdapters>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-common.Execution.state",
            "type": "Object",
            "label": "state",
            "description": [
              "\nDynamic state of the execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 80
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContainer",
                "text": "ExecutionContainer"
              },
              "<Output | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueBoxed",
                "text": "ExpressionValueBoxed"
              },
              "<\"error\", { error: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ErrorLike",
                "text": "ErrorLike"
              },
              "; info?: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined; }>>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.Execution.input",
            "type": "Uncategorized",
            "label": "input",
            "description": [
              "\nInitial input of the execution.\n\nN.B. It is initialized to `null` rather than `undefined` for legacy reasons,\nbecause in legacy interpreter it was set to `null` by default."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 88
            },
            "signature": [
              "Input"
            ]
          },
          {
            "tags": [],
            "id": "def-common.Execution.context",
            "type": "Object",
            "label": "context",
            "description": [
              "\nExecution context - object that allows to do side-effects. Context is passed\nto every function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 94
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContext",
                "text": "ExecutionContext"
              },
              "<InspectorAdapters, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-common.Execution.contract",
            "type": "Object",
            "label": "contract",
            "description": [
              "\nContract is a public representation of `Execution` instances. Contract we\ncan return to other plugins for their consumption."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 134
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContract",
                "text": "ExecutionContract"
              },
              "<Input, Output, InspectorAdapters>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.Execution.expression",
            "type": "string",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 140
            }
          },
          {
            "id": "def-common.Execution.result",
            "type": "Object",
            "label": "result",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 142
            },
            "signature": [
              "Promise<Output | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueBoxed",
                "text": "ExpressionValueBoxed"
              },
              "<\"error\", { error: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ErrorLike",
                "text": "ErrorLike"
              },
              "; info?: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined; }>>"
            ]
          },
          {
            "id": "def-common.Execution.inspectorAdapters",
            "type": "Uncategorized",
            "label": "inspectorAdapters",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 146
            },
            "signature": [
              "InspectorAdapters"
            ]
          },
          {
            "id": "def-common.Execution.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "execution",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutionParams",
                    "text": "ExecutionParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 150
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 150
            }
          },
          {
            "id": "def-common.Execution.cancel",
            "type": "Function",
            "label": "cancel",
            "signature": [
              "() => void"
            ],
            "description": [
              "\nStop execution of expression."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 192
            }
          },
          {
            "id": "def-common.Execution.start",
            "type": "Function",
            "label": "start",
            "signature": [
              "(input?: Input) => void"
            ],
            "description": [
              "\nCall this method to start execution.\n\nN.B. `input` is initialized to `null` rather than `undefined` for legacy reasons,\nbecause in legacy interpreter it was set to `null` by default."
            ],
            "children": [
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 202
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 202
            }
          },
          {
            "id": "def-common.Execution.invokeChain",
            "type": "Function",
            "label": "invokeChain",
            "signature": [
              "(chainArr: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunction",
                "text": "ExpressionAstFunction"
              },
              "[], input: unknown) => Promise<any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Array",
                "label": "chainArr",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstFunction",
                    "text": "ExpressionAstFunction"
                  },
                  "[]"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 236
                }
              },
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 236
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 236
            }
          },
          {
            "id": "def-common.Execution.invokeFunction",
            "type": "Function",
            "label": "invokeFunction",
            "signature": [
              "(fn: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ", input: unknown, args: Record<string, unknown>) => Promise<any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "fn",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionFunction",
                    "text": "ExpressionFunction"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 317
                }
              },
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 318
                }
              },
              {
                "type": "Object",
                "label": "args",
                "isRequired": true,
                "signature": [
                  "Record<string, unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 319
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 316
            }
          },
          {
            "id": "def-common.Execution.cast",
            "type": "Function",
            "label": "cast",
            "signature": [
              "(value: any, toTypeNames?: string[] | undefined) => any"
            ],
            "description": [],
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 348
                }
              },
              {
                "type": "Array",
                "label": "toTypeNames",
                "isRequired": false,
                "signature": [
                  "string[] | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 348
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 348
            }
          },
          {
            "id": "def-common.Execution.resolveArgs",
            "type": "Function",
            "label": "resolveArgs",
            "signature": [
              "(fnDef: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ", input: unknown, argAsts: any) => Promise<any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "fnDef",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionFunction",
                    "text": "ExpressionFunction"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 374
                }
              },
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 374
                }
              },
              {
                "type": "Any",
                "label": "argAsts",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 374
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 374
            }
          },
          {
            "id": "def-common.Execution.interpret",
            "type": "Function",
            "label": "interpret",
            "signature": [
              "<T>(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstNode",
                "text": "ExpressionAstNode"
              },
              ", input: T) => Promise<unknown>"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstNode",
                    "text": "ExpressionAstNode"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 465
                }
              },
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "T"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution.ts",
                  "lineNumber": 465
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 465
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/execution.ts",
          "lineNumber": 70
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExecutionContract",
        "type": "Class",
        "tags": [],
        "label": "ExecutionContract",
        "description": [
          "\n`ExecutionContract` is a wrapper around `Execution` class. It provides the\nsame functionality but does not expose Expressions plugin internals."
        ],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContract",
            "text": "ExecutionContract"
          },
          "<Input, Output, InspectorAdapters>"
        ],
        "children": [
          {
            "id": "def-common.ExecutionContract.isPending",
            "type": "boolean",
            "label": "isPending",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 18
            }
          },
          {
            "id": "def-common.ExecutionContract.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "execution",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Execution",
                    "text": "Execution"
                  },
                  "<Input, Output, InspectorAdapters>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/execution_contract.ts",
                  "lineNumber": 24
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 24
            }
          },
          {
            "id": "def-common.ExecutionContract.cancel",
            "type": "Function",
            "children": [],
            "signature": [
              "() => void"
            ],
            "description": [
              "\nCancel the execution of the expression. This will set abort signal\n(available in execution context) to aborted state, letting expression\nfunctions to stop their execution."
            ],
            "label": "cancel",
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 31
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExecutionContract.getData",
            "type": "Function",
            "children": [],
            "signature": [
              "() => Promise<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueBoxed",
                "text": "ExpressionValueBoxed"
              },
              "<\"error\", { error: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ErrorLike",
                "text": "ErrorLike"
              },
              "; info?: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined; }> | Output>"
            ],
            "description": [
              "\nReturns the final output of expression, if any error happens still\nwraps that error into `ExpressionValueError` type and returns that.\nThis function never throws."
            ],
            "label": "getData",
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 40
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExecutionContract.getExpression",
            "type": "Function",
            "children": [],
            "signature": [
              "() => string"
            ],
            "description": [
              "\nGet string representation of the expression. Returns the original string\nif execution was started from a string. If execution was started from an\nAST this method returns a string generated from AST."
            ],
            "label": "getExpression",
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 60
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExecutionContract.getAst",
            "type": "Function",
            "children": [],
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [
              "\nGet AST used to execute the expression."
            ],
            "label": "getAst",
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 67
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExecutionContract.inspect",
            "type": "Function",
            "children": [],
            "signature": [
              "() => InspectorAdapters"
            ],
            "description": [
              "\nGet Inspector adapters provided to all functions of expression through\nexecution context."
            ],
            "label": "inspect",
            "source": {
              "path": "src/plugins/expressions/common/execution/execution_contract.ts",
              "lineNumber": 73
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/execution_contract.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.Executor",
        "type": "Class",
        "tags": [],
        "label": "Executor",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Executor",
            "text": "Executor"
          },
          "<Context> implements ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableStateService",
            "text": "PersistableStateService"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          ">"
        ],
        "children": [
          {
            "id": "def-common.Executor.createWithDefaults",
            "type": "Function",
            "label": "createWithDefaults",
            "signature": [
              "typeof ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              ".createWithDefaults"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": false,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Ctx> | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 83
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 82
            }
          },
          {
            "tags": [],
            "id": "def-common.Executor.state",
            "type": "Object",
            "label": "state",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 91
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorContainer",
                "text": "ExecutorContainer"
              },
              "<Context>"
            ]
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-common.Executor.functions",
            "type": "Object",
            "label": "functions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 96
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.FunctionsRegistry",
                "text": "FunctionsRegistry"
              }
            ]
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-common.Executor.types",
            "type": "Object",
            "label": "types",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 101
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.TypesRegistry",
                "text": "TypesRegistry"
              }
            ]
          },
          {
            "id": "def-common.Executor.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": false,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Context> | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 103
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 103
            }
          },
          {
            "id": "def-common.Executor.registerFunction",
            "type": "Function",
            "label": "registerFunction",
            "signature": [
              "(functionDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 110
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 109
            }
          },
          {
            "id": "def-common.Executor.getFunction",
            "type": "Function",
            "label": "getFunction",
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | undefined"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 118
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 118
            }
          },
          {
            "id": "def-common.Executor.getFunctions",
            "type": "Function",
            "label": "getFunctions",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 122
            }
          },
          {
            "id": "def-common.Executor.registerType",
            "type": "Function",
            "label": "registerType",
            "signature": [
              "(typeDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "typeDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 127
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 126
            }
          },
          {
            "id": "def-common.Executor.getType",
            "type": "Function",
            "label": "getType",
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | undefined"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 135
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 135
            }
          },
          {
            "id": "def-common.Executor.getTypes",
            "type": "Function",
            "label": "getTypes",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 139
            }
          },
          {
            "id": "def-common.Executor.extendContext",
            "type": "Function",
            "label": "extendContext",
            "signature": [
              "(extraContext: Record<string, unknown>) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "extraContext",
                "isRequired": true,
                "signature": [
                  "Record<string, unknown>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 143
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 143
            }
          },
          {
            "id": "def-common.Executor.context",
            "type": "Object",
            "label": "context",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 147
            },
            "signature": [
              "Record<string, unknown>"
            ]
          },
          {
            "id": "def-common.Executor.run",
            "type": "Function",
            "label": "run",
            "signature": [
              "<Input, Output>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              ") => Promise<Output>"
            ],
            "description": [
              "\nExecute expression and return result.\n"
            ],
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  "string | ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [
                  "Expression AST or a string representing expression."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 160
                }
              },
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [
                  "Initial input to the first expression function."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 161
                }
              },
              {
                "type": "Object",
                "label": "params",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionExecutionParams",
                    "text": "ExpressionExecutionParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 162
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 159
            }
          },
          {
            "id": "def-common.Executor.createExecution",
            "type": "Function",
            "label": "createExecution",
            "signature": [
              "<Input = unknown, Output = unknown>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Execution",
                "text": "Execution"
              },
              "<Input, Output, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DefaultInspectorAdapters",
                "text": "DefaultInspectorAdapters"
              },
              ">"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  "string | ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 170
                }
              },
              {
                "type": "Object",
                "label": "params",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionExecutionParams",
                    "text": "ExpressionExecutionParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 171
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 169
            }
          },
          {
            "id": "def-common.Executor.inject",
            "type": "Function",
            "label": "inject",
            "signature": [
              "(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 217
                }
              },
              {
                "type": "Array",
                "label": "references",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "common",
                    "docId": "kibCorePluginApi",
                    "section": "def-common.SavedObjectReference",
                    "text": "SavedObjectReference"
                  },
                  "[]"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 217
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 217
            }
          },
          {
            "id": "def-common.Executor.extract",
            "type": "Function",
            "label": "extract",
            "signature": [
              "(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ") => { state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              "; references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]; }"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 223
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 223
            }
          },
          {
            "id": "def-common.Executor.telemetry",
            "type": "Function",
            "label": "telemetry",
            "signature": [
              "(ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", telemetryData: Record<string, any>) => Record<string, any>"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 233
                }
              },
              {
                "type": "Object",
                "label": "telemetryData",
                "isRequired": true,
                "signature": [
                  "Record<string, any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 233
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 233
            }
          },
          {
            "id": "def-common.Executor.migrate",
            "type": "Function",
            "label": "migrate",
            "signature": [
              "(ast: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ", version: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.SerializableState",
                    "text": "SerializableState"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 241
                }
              },
              {
                "type": "string",
                "label": "version",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 241
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 241
            }
          },
          {
            "id": "def-common.Executor.fork",
            "type": "Function",
            "label": "fork",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              "<Context>"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 250
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/executor.ts",
          "lineNumber": 80
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunction",
        "type": "Class",
        "tags": [],
        "label": "ExpressionFunction",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunction",
            "text": "ExpressionFunction"
          },
          " implements ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableState",
            "text": "PersistableState"
          },
          "<Record<string, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstArgument",
            "text": "ExpressionAstArgument"
          },
          "[]>>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.name",
            "type": "string",
            "label": "name",
            "description": [
              "\nName of function"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 22
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [
              "\nAliases that can be used instead of `name`."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 27
            },
            "signature": [
              "string[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.type",
            "type": "string",
            "label": "type",
            "description": [
              "\nReturn type of function. This SHOULD be supplied. We use it for UI\nand autocomplete hinting. We may also use it for optimizations in\nthe future."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 34
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.fn",
            "type": "Function",
            "label": "fn",
            "description": [
              "\nFunction to run function (context, args)"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 39
            },
            "signature": [
              "(input: any, params: Record<string, any>, handlers: object) => any"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nA short help text."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 44
            }
          },
          {
            "id": "def-common.ExpressionFunction.args",
            "type": "Object",
            "tags": [],
            "children": [],
            "description": [
              "\nSpecification of expression function parameters."
            ],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 49
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [
              "\nType of inputs that this function supports."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 54
            },
            "signature": [
              "string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.disabled",
            "type": "boolean",
            "label": "disabled",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 56
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.telemetry",
            "type": "Function",
            "label": "telemetry",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 57
            },
            "signature": [
              "(state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>, telemetryData: Record<string, any>) => Record<string, any>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.extract",
            "type": "Function",
            "label": "extract",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 61
            },
            "signature": [
              "(state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>) => { state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>; references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]; }"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.inject",
            "type": "Function",
            "label": "inject",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 64
            },
            "signature": [
              "(state: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>, references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]) => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstArgument",
                "text": "ExpressionAstArgument"
              },
              "[]>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunction.migrations",
            "type": "Object",
            "label": "migrations",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 68
            },
            "signature": [
              "{ [key: string]: (state: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ") => ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              "; }"
            ]
          },
          {
            "id": "def-common.ExpressionFunction.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
                  "lineNumber": 72
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 72
            }
          },
          {
            "id": "def-common.ExpressionFunction.accepts",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "type",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
                  "lineNumber": 107
                }
              }
            ],
            "signature": [
              "(type: string) => boolean"
            ],
            "description": [],
            "label": "accepts",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
              "lineNumber": 107
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/expression_function.ts",
          "lineNumber": 18
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionParameter",
        "type": "Class",
        "tags": [],
        "label": "ExpressionFunctionParameter",
        "description": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionParameter.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 12
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionParameter.required",
            "type": "boolean",
            "label": "required",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 13
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionParameter.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 14
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionParameter.types",
            "type": "Array",
            "label": "types",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 15
            },
            "signature": [
              "string[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionParameter.default",
            "type": "Any",
            "label": "default",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 16
            },
            "signature": [
              "any"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionParameter.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 17
            },
            "signature": [
              "string[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionParameter.multi",
            "type": "boolean",
            "label": "multi",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 18
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionParameter.resolve",
            "type": "boolean",
            "label": "resolve",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 19
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionParameter.options",
            "type": "Array",
            "label": "options",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 20
            },
            "signature": [
              "any[]"
            ]
          },
          {
            "id": "def-common.ExpressionFunctionParameter.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
                  "lineNumber": 22
                }
              },
              {
                "type": "CompoundType",
                "label": "arg",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ArgumentType",
                    "text": "ArgumentType"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
                  "lineNumber": 22
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 22
            }
          },
          {
            "id": "def-common.ExpressionFunctionParameter.accepts",
            "type": "Function",
            "label": "accepts",
            "signature": [
              "(type: string) => boolean"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "type",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
                  "lineNumber": 40
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
              "lineNumber": 40
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/expression_function_parameter.ts",
          "lineNumber": 11
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionRenderer",
        "type": "Class",
        "tags": [],
        "label": "ExpressionRenderer",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderer",
            "text": "ExpressionRenderer"
          },
          "<Config>"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionRenderer.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 12
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionRenderer.displayName",
            "type": "string",
            "label": "displayName",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 13
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionRenderer.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 14
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionRenderer.validate",
            "type": "Function",
            "label": "validate",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 15
            },
            "signature": [
              "() => void | Error"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionRenderer.reuseDomNode",
            "type": "boolean",
            "label": "reuseDomNode",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionRenderer.render",
            "type": "Function",
            "label": "render",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 17
            },
            "signature": [
              "(domNode: HTMLElement, config: Config, handlers: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.IInterpreterRenderHandlers",
                "text": "IInterpreterRenderHandlers"
              },
              ") => void | Promise<void>"
            ]
          },
          {
            "id": "def-common.ExpressionRenderer.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "config",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionRenderDefinition",
                    "text": "ExpressionRenderDefinition"
                  },
                  "<Config>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
                  "lineNumber": 19
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
              "lineNumber": 19
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/expression_renderer.ts",
          "lineNumber": 11
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionRendererRegistry",
        "type": "Class",
        "tags": [],
        "label": "ExpressionRendererRegistry",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRendererRegistry",
            "text": "ExpressionRendererRegistry"
          },
          " implements ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderer",
            "text": "ExpressionRenderer"
          },
          "<unknown>>"
        ],
        "children": [
          {
            "id": "def-common.ExpressionRendererRegistry.register",
            "type": "Function",
            "label": "register",
            "signature": [
              "(definition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionRenderDefinition",
                "text": "AnyExpressionRenderDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionRenderDefinition",
                "text": "AnyExpressionRenderDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "definition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionRenderDefinition",
                    "text": "AnyExpressionRenderDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionRenderDefinition",
                    "text": "AnyExpressionRenderDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
                  "lineNumber": 19
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 19
            }
          },
          {
            "id": "def-common.ExpressionRendererRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown> | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
                  "lineNumber": 25
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 25
            }
          },
          {
            "id": "def-common.ExpressionRendererRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown>>"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 29
            }
          },
          {
            "id": "def-common.ExpressionRendererRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown>[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
              "lineNumber": 39
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/expression_renderer_registry.ts",
          "lineNumber": 13
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionsInspectorAdapter",
        "type": "Class",
        "tags": [],
        "label": "ExpressionsInspectorAdapter",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionsInspectorAdapter",
            "text": "ExpressionsInspectorAdapter"
          },
          " extends ",
          "EventEmitter"
        ],
        "children": [
          {
            "id": "def-common.ExpressionsInspectorAdapter.logAST",
            "type": "Function",
            "label": "logAST",
            "signature": [
              "(ast: any) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "Any",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/util/expressions_inspector_adapter.ts",
                  "lineNumber": 14
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/util/expressions_inspector_adapter.ts",
              "lineNumber": 14
            }
          },
          {
            "id": "def-common.ExpressionsInspectorAdapter.ast",
            "type": "Any",
            "label": "ast",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/util/expressions_inspector_adapter.ts",
              "lineNumber": 19
            },
            "signature": [
              "any"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/util/expressions_inspector_adapter.ts",
          "lineNumber": 11
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionsService",
        "type": "Class",
        "tags": [],
        "label": "ExpressionsService",
        "description": [
          "\n`ExpressionsService` class is used for multiple purposes:\n\n1. It implements the same Expressions service that can be used on both:\n   (1) server-side and (2) browser-side.\n2. It implements the same Expressions service that users can fork/clone,\n   thus have their own instance of the Expressions plugin.\n3. `ExpressionsService` defines the public contracts of *setup* and *start*\n   Kibana Platform life-cycles for ease-of-use on server-side and browser-side.\n4. `ExpressionsService` creates a bound version of all exported contract functions.\n5. Functions are bound the way there are:\n\n   ```ts\n   registerFunction = (...args: Parameters<Executor['registerFunction']>\n     ): ReturnType<Executor['registerFunction']> => this.executor.registerFunction(...args);\n   ```\n\n   so that JSDoc appears in developers IDE when they use those `plugins.expressions.registerFunction(`."
        ],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionsService",
            "text": "ExpressionsService"
          },
          " implements ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableStateService",
            "text": "PersistableStateService"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          ">"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionsService.executor",
            "type": "Object",
            "label": "executor",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 175
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              "<Record<string, unknown>>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionsService.renderers",
            "type": "Object",
            "label": "renderers",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 176
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRendererRegistry",
                "text": "ExpressionRendererRegistry"
              }
            ]
          },
          {
            "id": "def-common.ExpressionsService.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "{\n    executor = Executor.createWithDefaults(),\n    renderers = new ExpressionRendererRegistry(),\n  }",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionServiceParams",
                    "text": "ExpressionServiceParams"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 178
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 178
            }
          },
          {
            "id": "def-common.ExpressionsService.registerFunction",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 219
                }
              }
            ],
            "signature": [
              "(functionDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ")) => void"
            ],
            "description": [
              "\nRegister an expression function, which will be possible to execute as\npart of the expression pipeline.\n\nBelow we register a function which simply sleeps for given number of\nmilliseconds to delay the execution and outputs its input as-is.\n\n```ts\nexpressions.registerFunction({\n  name: 'sleep',\n  args: {\n    time: {\n      aliases: ['_'],\n      help: 'Time in milliseconds for how long to sleep',\n      types: ['number'],\n    },\n  },\n  help: '',\n  fn: async (input, args, context) => {\n    await new Promise(r => setTimeout(r, args.time));\n    return input;\n  },\n}\n```\n\nThe actual function is defined in the `fn` key. The function can be *async*.\nIt receives three arguments: (1) `input` is the output of the previous function\nor the initial input of the expression if the function is first in chain;\n(2) `args` are function arguments as defined in expression string, that can\nbe edited by user (e.g in case of Canvas); (3) `context` is a shared object\npassed to all functions that can be used for side-effects."
            ],
            "label": "registerFunction",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 218
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.registerType",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "typeDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 223
                }
              }
            ],
            "signature": [
              "(typeDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "label": "registerType",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 222
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.registerRenderer",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "definition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionRenderDefinition",
                    "text": "AnyExpressionRenderDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionRenderDefinition",
                    "text": "AnyExpressionRenderDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 227
                }
              }
            ],
            "signature": [
              "(definition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionRenderDefinition",
                "text": "AnyExpressionRenderDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionRenderDefinition",
                "text": "AnyExpressionRenderDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "label": "registerRenderer",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 226
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.run",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "ast",
                "isRequired": true,
                "signature": [
                  "string | ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 230
                }
              },
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 230
                }
              },
              {
                "type": "Object",
                "label": "params",
                "isRequired": false,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionExecutionParams",
                    "text": "ExpressionExecutionParams"
                  },
                  " | undefined"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 230
                }
              }
            ],
            "signature": [
              "<Input, Output>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              " | undefined) => Promise<Output>"
            ],
            "description": [],
            "label": "run",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 230
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.getFunction",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 233
                }
              }
            ],
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | undefined"
            ],
            "description": [],
            "label": "getFunction",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 233
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.getFunctions",
            "type": "Function",
            "children": [],
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ],
            "description": [
              "\nReturns POJO map of all registered expression functions, where keys are\nnames of the functions and values are `ExpressionFunction` instances."
            ],
            "label": "getFunctions",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 240
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.getRenderer",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 243
                }
              }
            ],
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown> | null"
            ],
            "description": [],
            "label": "getRenderer",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 243
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.getRenderers",
            "type": "Function",
            "children": [],
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown>>"
            ],
            "description": [
              "\nReturns POJO map of all registered expression renderers, where keys are\nnames of the renderers and values are `ExpressionRenderer` instances."
            ],
            "label": "getRenderers",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 250
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.getType",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 253
                }
              }
            ],
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | undefined"
            ],
            "description": [],
            "label": "getType",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 253
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.getTypes",
            "type": "Function",
            "children": [],
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ],
            "description": [
              "\nReturns POJO map of all registered expression types, where keys are\nnames of the types and values are `ExpressionType` instances."
            ],
            "label": "getTypes",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 260
            },
            "tags": [],
            "returnComment": []
          },
          {
            "tags": [],
            "id": "def-common.ExpressionsService.execute",
            "type": "Function",
            "label": "execute",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 262
            },
            "signature": [
              "<Input = unknown, Output = unknown>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              " | undefined) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContract",
                "text": "ExecutionContract"
              },
              "<Input, Output, unknown>"
            ]
          },
          {
            "id": "def-common.ExpressionsService.fork",
            "type": "Function",
            "children": [],
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              }
            ],
            "description": [],
            "label": "fork",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 268
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.telemetry",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 281
                }
              },
              {
                "type": "Object",
                "label": "telemetryData",
                "isRequired": true,
                "signature": [
                  "Record<string, any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 282
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", telemetryData?: Record<string, any>) => Record<string, any>"
            ],
            "description": [
              "\nExtracts telemetry from expression AST"
            ],
            "label": "telemetry",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 280
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionsService.extract",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 292
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ") => { state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              "; references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]; }"
            ],
            "description": [
              "\nExtracts saved object references from expression AST"
            ],
            "label": "extract",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 292
            },
            "tags": [],
            "returnComment": [
              "new expression AST with references removed and array of references"
            ]
          },
          {
            "id": "def-common.ExpressionsService.inject",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionAstExpression",
                    "text": "ExpressionAstExpression"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 302
                }
              },
              {
                "type": "Array",
                "label": "references",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "common",
                    "docId": "kibCorePluginApi",
                    "section": "def-common.SavedObjectReference",
                    "text": "SavedObjectReference"
                  },
                  "[]"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 302
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", references: ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectReference",
                "text": "SavedObjectReference"
              },
              "[]) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [
              "\nInjects saved object references into expression AST"
            ],
            "label": "inject",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 302
            },
            "tags": [],
            "returnComment": [
              "new expression AST with references injected"
            ]
          },
          {
            "id": "def-common.ExpressionsService.migrate",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.SerializableState",
                    "text": "SerializableState"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 312
                }
              },
              {
                "type": "string",
                "label": "version",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/service/expressions_services.ts",
                  "lineNumber": 312
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ", version: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [
              "\nRuns the migration (if it exists) for specified version. This will run a single migration step (ie from 7.10.0 to 7.10.1)"
            ],
            "label": "migrate",
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 312
            },
            "tags": [],
            "returnComment": [
              "new migrated expression AST"
            ]
          },
          {
            "id": "def-common.ExpressionsService.setup",
            "type": "Function",
            "label": "setup",
            "signature": [
              "() => Pick<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              },
              ", \"getType\" | \"getFunction\" | \"getFunctions\" | \"getRenderer\" | \"getRenderers\" | \"getTypes\" | \"registerFunction\" | \"registerRenderer\" | \"registerType\" | \"run\" | \"fork\">"
            ],
            "description": [
              "\nReturns Kibana Platform *setup* life-cycle contract. Useful to return the\nsame contract on server-side and browser-side."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 320
            }
          },
          {
            "id": "def-common.ExpressionsService.start",
            "type": "Function",
            "label": "start",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsServiceStart",
                "text": "ExpressionsServiceStart"
              }
            ],
            "description": [
              "\nReturns Kibana Platform *start* life-cycle contract. Useful to return the\nsame contract on server-side and browser-side."
            ],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 328
            }
          },
          {
            "id": "def-common.ExpressionsService.stop",
            "type": "Function",
            "label": "stop",
            "signature": [
              "() => void"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 332
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/service/expressions_services.ts",
          "lineNumber": 174
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionType",
        "type": "Class",
        "tags": [],
        "label": "ExpressionType",
        "description": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionType.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 13
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionType.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nA short help text."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 18
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionType.validate",
            "type": "Function",
            "label": "validate",
            "description": [
              "\nType validation, useful for checking function output."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 23
            },
            "signature": [
              "(type: any) => void | Error"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionType.create",
            "type": "Unknown",
            "label": "create",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 25
            },
            "signature": [
              "unknown"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionType.serialize",
            "type": "Function",
            "label": "serialize",
            "description": [
              "\nOptional serialization (used when passing context around client/server)."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 30
            },
            "signature": [
              "((value: any) => any) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionType.deserialize",
            "type": "Function",
            "label": "deserialize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 31
            },
            "signature": [
              "((serialized: any) => any) | undefined"
            ]
          },
          {
            "id": "def-common.ExpressionType.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "definition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 33
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 33
            }
          },
          {
            "id": "def-common.ExpressionType.getToFn",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "typeName",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 48
                }
              }
            ],
            "signature": [
              "(typeName: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<any, any> | undefined"
            ],
            "description": [],
            "label": "getToFn",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 47
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionType.getFromFn",
            "type": "Function",
            "children": [
              {
                "type": "string",
                "label": "typeName",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 53
                }
              }
            ],
            "signature": [
              "(typeName: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<any, any> | undefined"
            ],
            "description": [],
            "label": "getFromFn",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 52
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionType.castsTo",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 57
                }
              }
            ],
            "signature": [
              "(value: any) => boolean"
            ],
            "description": [],
            "label": "castsTo",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 57
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionType.castsFrom",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 59
                }
              }
            ],
            "signature": [
              "(value: any) => boolean"
            ],
            "description": [],
            "label": "castsFrom",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 59
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionType.to",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 61
                }
              },
              {
                "type": "string",
                "label": "toTypeName",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 61
                }
              },
              {
                "type": "Object",
                "label": "types",
                "isRequired": true,
                "signature": [
                  "Record<string, ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionType",
                    "text": "ExpressionType"
                  },
                  ">"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 61
                }
              }
            ],
            "signature": [
              "(value: any, toTypeName: string, types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">) => any"
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 61
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.ExpressionType.from",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "value",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 73
                }
              },
              {
                "type": "Object",
                "label": "types",
                "isRequired": true,
                "signature": [
                  "Record<string, ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionType",
                    "text": "ExpressionType"
                  },
                  ">"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
                  "lineNumber": 73
                }
              }
            ],
            "signature": [
              "(value: any, types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">) => any"
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
              "lineNumber": 73
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/expression_type.ts",
          "lineNumber": 12
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.FunctionsRegistry",
        "type": "Class",
        "tags": [],
        "label": "FunctionsRegistry",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.FunctionsRegistry",
            "text": "FunctionsRegistry"
          },
          " implements ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunction",
            "text": "ExpressionFunction"
          },
          ">"
        ],
        "children": [
          {
            "id": "def-common.FunctionsRegistry.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "executor",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Executor",
                    "text": "Executor"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 59
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 59
            }
          },
          {
            "id": "def-common.FunctionsRegistry.register",
            "type": "Function",
            "label": "register",
            "signature": [
              "(functionDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "functionDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionFunctionDefinition",
                    "text": "AnyExpressionFunctionDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 62
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 61
            }
          },
          {
            "id": "def-common.FunctionsRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 67
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 67
            }
          },
          {
            "id": "def-common.FunctionsRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 71
            }
          },
          {
            "id": "def-common.FunctionsRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              "[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 75
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/executor.ts",
          "lineNumber": 58
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.TablesAdapter",
        "type": "Class",
        "tags": [],
        "label": "TablesAdapter",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.TablesAdapter",
            "text": "TablesAdapter"
          },
          " extends ",
          "EventEmitter"
        ],
        "children": [
          {
            "id": "def-common.TablesAdapter.logDatatable",
            "type": "Function",
            "label": "logDatatable",
            "signature": [
              "(name: string, datatable: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              ") => void"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "name",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/util/tables_adapter.ts",
                  "lineNumber": 15
                }
              },
              {
                "type": "Object",
                "label": "datatable",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/util/tables_adapter.ts",
                  "lineNumber": 15
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/util/tables_adapter.ts",
              "lineNumber": 15
            }
          },
          {
            "id": "def-common.TablesAdapter.tables",
            "type": "Object",
            "label": "tables",
            "tags": [],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/util/tables_adapter.ts",
              "lineNumber": 20
            },
            "signature": [
              "{ [key: string]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              "; }"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/util/tables_adapter.ts",
          "lineNumber": 12
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.TypesRegistry",
        "type": "Class",
        "tags": [],
        "label": "TypesRegistry",
        "description": [],
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.TypesRegistry",
            "text": "TypesRegistry"
          },
          " implements ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionType",
            "text": "ExpressionType"
          },
          ">"
        ],
        "children": [
          {
            "id": "def-common.TypesRegistry.Unnamed",
            "type": "Function",
            "label": "Constructor",
            "signature": [
              "any"
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "executor",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Executor",
                    "text": "Executor"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 37
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 37
            }
          },
          {
            "id": "def-common.TypesRegistry.register",
            "type": "Function",
            "label": "register",
            "signature": [
              "(typeDefinition: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              " | (() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionTypeDefinition",
                "text": "AnyExpressionTypeDefinition"
              },
              ")) => void"
            ],
            "description": [],
            "children": [
              {
                "type": "CompoundType",
                "label": "typeDefinition",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  " | (() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.AnyExpressionTypeDefinition",
                    "text": "AnyExpressionTypeDefinition"
                  },
                  ")"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 40
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 39
            }
          },
          {
            "id": "def-common.TypesRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/executor.ts",
                  "lineNumber": 45
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 45
            }
          },
          {
            "id": "def-common.TypesRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 49
            }
          },
          {
            "id": "def-common.TypesRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              "[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 53
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/executor.ts",
          "lineNumber": 36
        },
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "id": "def-common.buildExpression",
        "type": "Function",
        "label": "buildExpression",
        "signature": [
          "(initialState: string | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          " | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunctionBuilder",
            "text": "ExpressionAstFunctionBuilder"
          },
          "<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.AnyExpressionFunctionDefinition",
            "text": "AnyExpressionFunctionDefinition"
          },
          ">[] | undefined) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpressionBuilder",
            "text": "ExpressionAstExpressionBuilder"
          }
        ],
        "description": [
          "\nMakes it easy to progressively build, update, and traverse an\nexpression AST. You can either start with an empty AST, or\nprovide an expression string, AST, or array of expression\nfunction builders to use as initial state.\n"
        ],
        "children": [
          {
            "type": "CompoundType",
            "label": "initialState",
            "isRequired": false,
            "signature": [
              "string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              " | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunctionBuilder",
                "text": "ExpressionAstFunctionBuilder"
              },
              "<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ">[] | undefined"
            ],
            "description": [
              "Optional. An expression string, AST, or array of `ExpressionAstFunctionBuilder[]`."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 98
            }
          }
        ],
        "tags": [
          "return"
        ],
        "returnComment": [
          "`this`"
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_expression.ts",
          "lineNumber": 97
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.buildExpressionFunction",
        "type": "Function",
        "label": "buildExpressionFunction",
        "signature": [
          "(fnName: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.InferFunctionDefinition",
            "text": "InferFunctionDefinition"
          },
          "<FnDef>[\"name\"], initialArgs: { [K in keyof FunctionArgs<FnDef>]: FunctionArgs<FnDef>[K] | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpressionBuilder",
            "text": "ExpressionAstExpressionBuilder"
          },
          " | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpressionBuilder",
            "text": "ExpressionAstExpressionBuilder"
          },
          "[]; }) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunctionBuilder",
            "text": "ExpressionAstFunctionBuilder"
          },
          "<FnDef>"
        ],
        "description": [
          "\nManages an AST for a single expression function. The return value\ncan be provided to `buildExpression` to add this function to an\nexpression.\n\nNote that to preserve type safety and ensure no args are missing,\nall required arguments for the specified function must be provided\nup front. If desired, they can be changed or removed later.\n"
        ],
        "children": [
          {
            "type": "Uncategorized",
            "label": "fnName",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.InferFunctionDefinition",
                "text": "InferFunctionDefinition"
              },
              "<FnDef>[\"name\"]"
            ],
            "description": [
              "String representing the name of this expression function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 155
            }
          },
          {
            "type": "Object",
            "label": "initialArgs",
            "isRequired": true,
            "signature": [
              "{ [K in keyof FunctionArgs<FnDef>]: FunctionArgs<FnDef>[K] | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              "[]; }"
            ],
            "description": [
              "Object containing the arguments to this function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 163
            }
          }
        ],
        "tags": [
          "return"
        ],
        "returnComment": [
          "`this`"
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_function.ts",
          "lineNumber": 152
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.buildResultColumns",
        "type": "Function",
        "label": "buildResultColumns",
        "signature": [
          "(input: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Datatable",
            "text": "Datatable"
          },
          ", outputColumnId: string, inputColumnId: string, outputColumnName: string | undefined, options: { allowColumnOverwrite: boolean; }) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.DatatableColumn",
            "text": "DatatableColumn"
          },
          "[] | undefined"
        ],
        "description": [
          "\nChecks whether input and output columns are defined properly\nand builds column array of the output table if that's the case.\n\n* Throws an error if the output column exists already.\n* Returns undefined if the input column doesn't exist."
        ],
        "children": [
          {
            "type": "Object",
            "label": "input",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              }
            ],
            "description": [
              "Input datatable"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/series_calculation_helpers.ts",
              "lineNumber": 34
            }
          },
          {
            "type": "string",
            "label": "outputColumnId",
            "isRequired": true,
            "signature": [
              "string"
            ],
            "description": [
              "Id of the output column"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/series_calculation_helpers.ts",
              "lineNumber": 35
            }
          },
          {
            "type": "string",
            "label": "inputColumnId",
            "isRequired": true,
            "signature": [
              "string"
            ],
            "description": [
              "Id of the input column"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/series_calculation_helpers.ts",
              "lineNumber": 36
            }
          },
          {
            "type": "string",
            "label": "outputColumnName",
            "isRequired": false,
            "signature": [
              "string | undefined"
            ],
            "description": [
              "Optional name of the output column"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/series_calculation_helpers.ts",
              "lineNumber": 37
            }
          },
          {
            "id": "def-common.buildResultColumns.options",
            "type": "Object",
            "label": "options",
            "tags": [],
            "description": [],
            "children": [
              {
                "tags": [],
                "id": "def-common.buildResultColumns.options.allowColumnOverwrite",
                "type": "boolean",
                "label": "allowColumnOverwrite",
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/series_calculation_helpers.ts",
                  "lineNumber": 38
                }
              }
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/series_calculation_helpers.ts",
              "lineNumber": 38
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/series_calculation_helpers.ts",
          "lineNumber": 33
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.createError",
        "type": "Function",
        "children": [
          {
            "type": "CompoundType",
            "label": "err",
            "isRequired": true,
            "signature": [
              "string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ErrorLike",
                "text": "ErrorLike"
              }
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/util/create_error.ts",
              "lineNumber": 21
            }
          }
        ],
        "signature": [
          "(err: string | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ErrorLike",
            "text": "ErrorLike"
          },
          ") => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionValueBoxed",
            "text": "ExpressionValueBoxed"
          },
          "<\"error\", { error: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ErrorLike",
            "text": "ErrorLike"
          },
          "; info?: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SerializableState",
            "text": "SerializableState"
          },
          " | undefined; }>"
        ],
        "description": [],
        "label": "createError",
        "source": {
          "path": "src/plugins/expressions/common/util/create_error.ts",
          "lineNumber": 21
        },
        "tags": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "id": "def-common.createExecutionContainer",
        "type": "Function",
        "children": [
          {
            "type": "Object",
            "label": "state",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionState",
                "text": "ExecutionState"
              },
              "<Output>"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 81
            }
          }
        ],
        "signature": [
          "<Output = any>(state?: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionState",
            "text": "ExecutionState"
          },
          "<Output>) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContainer",
            "text": "ExecutionContainer"
          },
          "<Output>"
        ],
        "description": [],
        "label": "createExecutionContainer",
        "source": {
          "path": "src/plugins/expressions/common/execution/container.ts",
          "lineNumber": 80
        },
        "tags": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "id": "def-common.createExecutorContainer",
        "type": "Function",
        "children": [
          {
            "type": "Object",
            "label": "state",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Context>"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 62
            }
          }
        ],
        "signature": [
          "<Context extends Record<string, unknown> = Record<string, unknown>>(state?: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutorState",
            "text": "ExecutorState"
          },
          "<Context>) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutorContainer",
            "text": "ExecutorContainer"
          },
          "<Context>"
        ],
        "description": [],
        "label": "createExecutorContainer",
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 59
        },
        "tags": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "id": "def-common.createMockContext",
        "type": "Function",
        "children": [],
        "signature": [
          "() => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">"
        ],
        "description": [],
        "label": "createMockContext",
        "source": {
          "path": "src/plugins/expressions/common/util/test_utils.ts",
          "lineNumber": 11
        },
        "tags": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "id": "def-common.format",
        "type": "Function",
        "label": "format",
        "signature": [
          "(ast: T, type: T extends ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          " ? \"expression\" : \"argument\") => string"
        ],
        "description": [],
        "children": [
          {
            "type": "Uncategorized",
            "label": "ast",
            "isRequired": true,
            "signature": [
              "T"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/format.ts",
              "lineNumber": 15
            }
          },
          {
            "type": "Uncategorized",
            "label": "type",
            "isRequired": true,
            "signature": [
              "T extends ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              " ? \"expression\" : \"argument\""
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/format.ts",
              "lineNumber": 16
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/format.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.formatExpression",
        "type": "Function",
        "label": "formatExpression",
        "signature": [
          "(ast: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          ") => string"
        ],
        "description": [
          "\nGiven expression pipeline AST, returns formatted string.\n"
        ],
        "children": [
          {
            "type": "Object",
            "label": "ast",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ],
            "description": [
              "Expression pipeline AST."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/format_expression.ts",
              "lineNumber": 17
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/format_expression.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.getBucketIdentifier",
        "type": "Function",
        "label": "getBucketIdentifier",
        "signature": [
          "(row: Record<string, any>, groupColumns: string[] | undefined) => string"
        ],
        "description": [
          "\nReturns a string identifying the group of a row by a list of columns to group by"
        ],
        "children": [
          {
            "type": "Object",
            "label": "row",
            "isRequired": true,
            "signature": [
              "Record<string, any>"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/series_calculation_helpers.ts",
              "lineNumber": 15
            }
          },
          {
            "type": "Array",
            "label": "groupColumns",
            "isRequired": false,
            "signature": [
              "string[] | undefined"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/series_calculation_helpers.ts",
              "lineNumber": 15
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/series_calculation_helpers.ts",
          "lineNumber": 15
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.getByAlias",
        "type": "Function",
        "label": "getByAlias",
        "signature": [
          "(node: T[] | Record<string, T>, nodeName: string) => T | undefined"
        ],
        "description": [
          "\nThis is used for looking up function/argument definitions. It looks through\nthe given object/array for a case-insensitive match, which could be either the\n`name` itself, or something under the `aliases` property."
        ],
        "children": [
          {
            "type": "CompoundType",
            "label": "node",
            "isRequired": true,
            "signature": [
              "T[] | Record<string, T>"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/util/get_by_alias.ts",
              "lineNumber": 15
            }
          },
          {
            "type": "string",
            "label": "nodeName",
            "isRequired": true,
            "signature": [
              "string"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/util/get_by_alias.ts",
              "lineNumber": 16
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/util/get_by_alias.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.getType",
        "type": "Function",
        "label": "getType",
        "signature": [
          "(node: any) => any"
        ],
        "description": [],
        "children": [
          {
            "type": "Any",
            "label": "node",
            "isRequired": true,
            "signature": [
              "any"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/get_type.ts",
              "lineNumber": 9
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/get_type.ts",
          "lineNumber": 9
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.isDatatable",
        "type": "Function",
        "children": [
          {
            "type": "Unknown",
            "label": "datatable",
            "isRequired": true,
            "signature": [
              "unknown"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 29
            }
          }
        ],
        "signature": [
          "(datatable: unknown) => datatable is ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Datatable",
            "text": "Datatable"
          }
        ],
        "description": [
          "\nA Utility function that Typescript can use to determine if an object is a Datatable."
        ],
        "label": "isDatatable",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 29
        },
        "tags": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "id": "def-common.isExpressionAstBuilder",
        "type": "Function",
        "label": "isExpressionAstBuilder",
        "signature": [
          "(val: any) => boolean"
        ],
        "description": [
          "\nType guard that checks whether a given value is an\n`ExpressionAstExpressionBuilder`. This is useful when working\nwith subexpressions, where you might be retrieving a function\nargument, and need to know whether it is an expression builder\ninstance which you can perform operations on.\n"
        ],
        "children": [
          {
            "type": "Any",
            "label": "val",
            "isRequired": true,
            "signature": [
              "any"
            ],
            "description": [
              "Value you want to check."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 35
            }
          }
        ],
        "tags": [
          "return"
        ],
        "returnComment": [
          "boolean"
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_expression.ts",
          "lineNumber": 35
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.isExpressionValueError",
        "type": "Function",
        "children": [
          {
            "type": "Any",
            "label": "value",
            "isRequired": true,
            "signature": [
              "any"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
              "lineNumber": 25
            }
          }
        ],
        "signature": [
          "(value: any) => value is ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionValueBoxed",
            "text": "ExpressionValueBoxed"
          },
          "<\"error\", { error: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ErrorLike",
            "text": "ErrorLike"
          },
          "; info?: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SerializableState",
            "text": "SerializableState"
          },
          " | undefined; }>"
        ],
        "description": [],
        "label": "isExpressionValueError",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
          "lineNumber": 25
        },
        "tags": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "id": "def-common.parse",
        "type": "Function",
        "label": "parse",
        "signature": [
          "(expression: E, startRule: S) => S extends \"expression\" ? ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          },
          " : ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstArgument",
            "text": "ExpressionAstArgument"
          }
        ],
        "description": [],
        "children": [
          {
            "type": "Uncategorized",
            "label": "expression",
            "isRequired": true,
            "signature": [
              "E"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/parse.ts",
              "lineNumber": 15
            }
          },
          {
            "type": "Uncategorized",
            "label": "startRule",
            "isRequired": true,
            "signature": [
              "S"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/ast/parse.ts",
              "lineNumber": 16
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/parse.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.parseExpression",
        "type": "Function",
        "label": "parseExpression",
        "signature": [
          "(expression: string) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          }
        ],
        "description": [
          "\nGiven expression pipeline string, returns parsed AST.\n"
        ],
        "children": [
          {
            "type": "string",
            "label": "expression",
            "isRequired": true,
            "signature": [
              "string"
            ],
            "description": [
              "Expression pipeline string."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/parse_expression.ts",
              "lineNumber": 17
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/parse_expression.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.serializeProvider",
        "type": "Function",
        "children": [
          {
            "type": "Object",
            "label": "types",
            "isRequired": true,
            "signature": [
              "Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/serialize_provider.ts",
              "lineNumber": 15
            }
          }
        ],
        "signature": [
          "(types: Record<string, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionType",
            "text": "ExpressionType"
          },
          ">) => { serialize: (value: any) => any; deserialize: (value: any) => any; }"
        ],
        "description": [],
        "label": "serializeProvider",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/serialize_provider.ts",
          "lineNumber": 15
        },
        "tags": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "id": "def-common.unboxExpressionValue",
        "type": "Function",
        "label": "unboxExpressionValue",
        "signature": [
          "({\n  type,\n  ...value\n}: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionValueBoxed",
            "text": "ExpressionValueBoxed"
          },
          "<string, T>) => T"
        ],
        "description": [],
        "children": [
          {
            "type": "CompoundType",
            "label": "{\n  type,\n  ...value\n}",
            "isRequired": true,
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueBoxed",
                "text": "ExpressionValueBoxed"
              },
              "<string, T>"
            ],
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/unbox_expression_value.ts",
              "lineNumber": 11
            }
          }
        ],
        "tags": [],
        "returnComment": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/unbox_expression_value.ts",
          "lineNumber": 11
        },
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "id": "def-common.ContainerStyle",
        "type": "Interface",
        "label": "ContainerStyle",
        "description": [
          "\nRepresents an object containing style information for a Container."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ContainerStyle.border",
            "type": "CompoundType",
            "label": "border",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 106
            },
            "signature": [
              "string | null"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ContainerStyle.borderRadius",
            "type": "CompoundType",
            "label": "borderRadius",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 107
            },
            "signature": [
              "string | null"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ContainerStyle.padding",
            "type": "CompoundType",
            "label": "padding",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 108
            },
            "signature": [
              "string | null"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ContainerStyle.backgroundColor",
            "type": "CompoundType",
            "label": "backgroundColor",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 109
            },
            "signature": [
              "string | null"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ContainerStyle.backgroundImage",
            "type": "CompoundType",
            "label": "backgroundImage",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 110
            },
            "signature": [
              "string | null"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ContainerStyle.backgroundSize",
            "type": "Enum",
            "label": "backgroundSize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 111
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.BackgroundSize",
                "text": "BackgroundSize"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ContainerStyle.backgroundRepeat",
            "type": "Enum",
            "label": "backgroundRepeat",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 112
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.BackgroundRepeat",
                "text": "BackgroundRepeat"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ContainerStyle.opacity",
            "type": "CompoundType",
            "label": "opacity",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 113
            },
            "signature": [
              "number | null"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ContainerStyle.overflow",
            "type": "Enum",
            "label": "overflow",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 114
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Overflow",
                "text": "Overflow"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 105
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.CSSStyle",
        "type": "Interface",
        "label": "CSSStyle",
        "description": [
          "\nRepresents the various style properties that can be applied to an element."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.CSSStyle.color",
            "type": "string",
            "label": "color",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 91
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.CSSStyle.fill",
            "type": "string",
            "label": "fill",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 92
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.CSSStyle.fontFamily",
            "type": "CompoundType",
            "label": "fontFamily",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 93
            },
            "signature": [
              "\"American Typewriter\" | \"Arial\" | \"Baskerville\" | \"Book Antiqua\" | \"Brush Script\" | \"Chalkboard\" | \"Didot\" | \"Futura\" | \"Gill Sans\" | \"Helvetica Neue\" | \"Hoefler Text\" | \"Lucida Grande\" | \"Myriad\" | \"Open Sans\" | \"Optima\" | \"Palatino\" | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.CSSStyle.fontSize",
            "type": "string",
            "label": "fontSize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 94
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.CSSStyle.fontStyle",
            "type": "CompoundType",
            "label": "fontStyle",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 95
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.FontStyle",
                "text": "FontStyle"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.CSSStyle.fontWeight",
            "type": "CompoundType",
            "label": "fontWeight",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 96
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.FontWeight",
                "text": "FontWeight"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.CSSStyle.lineHeight",
            "type": "CompoundType",
            "label": "lineHeight",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 97
            },
            "signature": [
              "string | number | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.CSSStyle.textAlign",
            "type": "CompoundType",
            "label": "textAlign",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 98
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.TextAlignment",
                "text": "TextAlignment"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.CSSStyle.textDecoration",
            "type": "CompoundType",
            "label": "textDecoration",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 99
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.TextDecoration",
                "text": "TextDecoration"
              },
              " | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 90
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.CumulativeSumArgs",
        "type": "Interface",
        "label": "CumulativeSumArgs",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.CumulativeSumArgs.by",
            "type": "Array",
            "label": "by",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
              "lineNumber": 15
            },
            "signature": [
              "string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.CumulativeSumArgs.inputColumnId",
            "type": "string",
            "label": "inputColumnId",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-common.CumulativeSumArgs.outputColumnId",
            "type": "string",
            "label": "outputColumnId",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
              "lineNumber": 17
            }
          },
          {
            "tags": [],
            "id": "def-common.CumulativeSumArgs.outputColumnName",
            "type": "string",
            "label": "outputColumnName",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
              "lineNumber": 18
            },
            "signature": [
              "string | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.Datatable",
        "type": "Interface",
        "label": "Datatable",
        "description": [
          "\nA `Datatable` in Canvas is a unique structure that represents tabulated data."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.Datatable.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 99
            },
            "signature": [
              "\"datatable\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.Datatable.columns",
            "type": "Array",
            "label": "columns",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 100
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DatatableColumn",
                "text": "DatatableColumn"
              },
              "[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.Datatable.rows",
            "type": "Array",
            "label": "rows",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 101
            },
            "signature": [
              "Record<string, any>[]"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 98
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.DatatableColumn",
        "type": "Interface",
        "label": "DatatableColumn",
        "description": [
          "\nThis type represents the shape of a column in a `Datatable`."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.DatatableColumn.id",
            "type": "string",
            "label": "id",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 90
            }
          },
          {
            "tags": [],
            "id": "def-common.DatatableColumn.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 91
            }
          },
          {
            "tags": [],
            "id": "def-common.DatatableColumn.meta",
            "type": "Object",
            "label": "meta",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 92
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DatatableColumnMeta",
                "text": "DatatableColumnMeta"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 89
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.DatatableColumnMeta",
        "type": "Interface",
        "label": "DatatableColumnMeta",
        "description": [
          "\nDatatable column meta information"
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.DatatableColumnMeta.type",
            "type": "CompoundType",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 63
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DatatableColumnType",
                "text": "DatatableColumnType"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.DatatableColumnMeta.field",
            "type": "string",
            "label": "field",
            "description": [
              "\nfield this column is based on"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 67
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.DatatableColumnMeta.index",
            "type": "string",
            "label": "index",
            "description": [
              "\nindex/table this column is based on"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 71
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.DatatableColumnMeta.params",
            "type": "Object",
            "label": "params",
            "description": [
              "\nserialized field format"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 75
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.SerializedFieldFormat",
                "text": "SerializedFieldFormat"
              },
              "<Record<string, any>> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.DatatableColumnMeta.source",
            "type": "string",
            "label": "source",
            "description": [
              "\nsource function that produced this column"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 79
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.DatatableColumnMeta.sourceParams",
            "type": "Object",
            "label": "sourceParams",
            "description": [
              "\nany extra parameters for the source that produced this column"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 83
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 62
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.DefaultInspectorAdapters",
        "type": "Interface",
        "label": "DefaultInspectorAdapters",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.DefaultInspectorAdapters",
            "text": "DefaultInspectorAdapters"
          },
          " extends ",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          }
        ],
        "description": [
          "\nDefault inspector adapters created if inspector adapters are not set explicitly."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.DefaultInspectorAdapters.requests",
            "type": "Object",
            "label": "requests",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 86
            },
            "signature": [
              {
                "pluginId": "inspector",
                "scope": "common",
                "docId": "kibInspectorPluginApi",
                "section": "def-common.RequestAdapter",
                "text": "RequestAdapter"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.DefaultInspectorAdapters.tables",
            "type": "Object",
            "label": "tables",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 87
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.TablesAdapter",
                "text": "TablesAdapter"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/types.ts",
          "lineNumber": 85
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.DerivativeArgs",
        "type": "Interface",
        "label": "DerivativeArgs",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.DerivativeArgs.by",
            "type": "Array",
            "label": "by",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
              "lineNumber": 15
            },
            "signature": [
              "string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.DerivativeArgs.inputColumnId",
            "type": "string",
            "label": "inputColumnId",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-common.DerivativeArgs.outputColumnId",
            "type": "string",
            "label": "outputColumnId",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
              "lineNumber": 17
            }
          },
          {
            "tags": [],
            "id": "def-common.DerivativeArgs.outputColumnName",
            "type": "string",
            "label": "outputColumnName",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
              "lineNumber": 18
            },
            "signature": [
              "string | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExecutionContext",
        "type": "Interface",
        "label": "ExecutionContext",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<InspectorAdapters, ExecutionContextSearch>"
        ],
        "description": [
          "\n`ExecutionContext` is an object available to all functions during a single execution;\nit provides various methods to perform side-effects."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExecutionContext.getSearchContext",
            "type": "Function",
            "label": "getSearchContext",
            "description": [
              "\nGet search context of the expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 28
            },
            "signature": [
              "() => ExecutionContextSearch"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionContext.variables",
            "type": "Object",
            "label": "variables",
            "description": [
              "\nContext variables that can be consumed using `var` and `var_set` functions."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 33
            },
            "signature": [
              "Record<string, unknown>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionContext.types",
            "type": "Object",
            "label": "types",
            "description": [
              "\nA map of available expression types."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 38
            },
            "signature": [
              "Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionContext.abortSignal",
            "type": "Object",
            "label": "abortSignal",
            "description": [
              "\nAdds ability to abort current execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 43
            },
            "signature": [
              "AbortSignal"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionContext.inspectorAdapters",
            "type": "Uncategorized",
            "label": "inspectorAdapters",
            "description": [
              "\nAdapters for `inspector` plugin."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 48
            },
            "signature": [
              "InspectorAdapters"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionContext.getSearchSessionId",
            "type": "Function",
            "label": "getSearchSessionId",
            "description": [
              "\nSearch context in which expression should operate."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 53
            },
            "signature": [
              "() => string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionContext.getKibanaRequest",
            "type": "Function",
            "label": "getKibanaRequest",
            "description": [
              "\nGetter to retrieve the `KibanaRequest` object inside an expression function.\nUseful for functions which are running on the server and need to perform\noperations that are scoped to a specific user."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 60
            },
            "signature": [
              "(() => ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionContext.getSavedObject",
            "type": "Function",
            "label": "getSavedObject",
            "description": [
              "\nAllows to fetch saved objects from ElasticSearch. In browser `getSavedObject`\nfunction is provided automatically by the Expressions plugin. On the server\nthe caller of the expression has to provide this context function. The\nreason is because on the browser we always know the user who tries to\nfetch a saved object, thus saved object client is scoped automatically to\nthat user. However, on the server we can scope that saved object client to\nany user, or even not scope it at all and execute it as an \"internal\" user."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 71
            },
            "signature": [
              "(<T extends ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectAttributes",
                "text": "SavedObjectAttributes"
              },
              " = ",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObjectAttributes",
                "text": "SavedObjectAttributes"
              },
              ">(type: string, id: string) => Promise<",
              {
                "pluginId": "core",
                "scope": "common",
                "docId": "kibCorePluginApi",
                "section": "def-common.SavedObject",
                "text": "SavedObject"
              },
              "<T>>) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionContext.isSyncColorsEnabled",
            "type": "Function",
            "label": "isSyncColorsEnabled",
            "description": [
              "\nReturns the state (true|false) of the sync colors across panels switch."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/types.ts",
              "lineNumber": 79
            },
            "signature": [
              "(() => boolean) | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/types.ts",
          "lineNumber": 21
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExecutionParams",
        "type": "Interface",
        "label": "ExecutionParams",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExecutionParams.executor",
            "type": "Object",
            "label": "executor",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 58
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              "<any>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionParams.ast",
            "type": "Object",
            "label": "ast",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 59
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionParams.expression",
            "type": "string",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 60
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionParams.params",
            "type": "Object",
            "label": "params",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/execution.ts",
              "lineNumber": 61
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/execution.ts",
          "lineNumber": 57
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExecutionPureTransitions",
        "type": "Interface",
        "label": "ExecutionPureTransitions",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionPureTransitions",
            "text": "ExecutionPureTransitions"
          },
          "<Output>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExecutionPureTransitions.start",
            "type": "Function",
            "label": "start",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 51
            },
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionState",
                "text": "ExecutionState"
              },
              "<Output>) => () => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionState",
                "text": "ExecutionState"
              },
              "<Output>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionPureTransitions.setResult",
            "type": "Function",
            "label": "setResult",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 52
            },
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionState",
                "text": "ExecutionState"
              },
              "<Output>) => (result: Output) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionState",
                "text": "ExecutionState"
              },
              "<Output>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionPureTransitions.setError",
            "type": "Function",
            "label": "setError",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 53
            },
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionState",
                "text": "ExecutionState"
              },
              "<Output>) => (error: Error) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionState",
                "text": "ExecutionState"
              },
              "<Output>"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/container.ts",
          "lineNumber": 50
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExecutionState",
        "type": "Interface",
        "label": "ExecutionState",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionState",
            "text": "ExecutionState"
          },
          "<Output> extends ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutorState",
            "text": "ExecutorState"
          },
          "<Record<string, unknown>>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExecutionState.ast",
            "type": "Object",
            "label": "ast",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 18
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionState.state",
            "type": "CompoundType",
            "label": "state",
            "description": [
              "\nTracks state of execution.\n\n- `not-started` - before .start() method was called.\n- `pending` - immediately after .start() method is called.\n- `result` - when expression execution completed.\n- `error` - when execution failed with error."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 28
            },
            "signature": [
              "\"result\" | \"error\" | \"not-started\" | \"pending\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionState.result",
            "type": "Uncategorized",
            "label": "result",
            "description": [
              "\nResult of the expression execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 33
            },
            "signature": [
              "Output | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutionState.error",
            "type": "Object",
            "label": "error",
            "description": [
              "\nError happened during the execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 38
            },
            "signature": [
              "Error | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/execution/container.ts",
          "lineNumber": 17
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExecutorPureSelectors",
        "type": "Interface",
        "label": "ExecutorPureSelectors",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExecutorPureSelectors.getFunction",
            "type": "Function",
            "label": "getFunction",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 44
            },
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => (id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | null"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutorPureSelectors.getType",
            "type": "Function",
            "label": "getType",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 45
            },
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => (id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | null"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutorPureSelectors.getContext",
            "type": "Function",
            "label": "getContext",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 46
            },
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => () => Record<string, unknown>"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 43
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExecutorPureTransitions",
        "type": "Interface",
        "label": "ExecutorPureTransitions",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExecutorPureTransitions.addFunction",
            "type": "Function",
            "label": "addFunction",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 29
            },
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => (fn: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutorPureTransitions.addType",
            "type": "Function",
            "label": "addType",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 30
            },
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => (type: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutorPureTransitions.extendContext",
            "type": "Function",
            "label": "extendContext",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 31
            },
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => (extraContext: Record<string, unknown>) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 28
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExecutorState",
        "type": "Interface",
        "label": "ExecutorState",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutorState",
            "text": "ExecutorState"
          },
          "<Context>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExecutorState.functions",
            "type": "Object",
            "label": "functions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 17
            },
            "signature": [
              "Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutorState.types",
            "type": "Object",
            "label": "types",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 18
            },
            "signature": [
              "Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExecutorState.context",
            "type": "Uncategorized",
            "label": "context",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 19
            },
            "signature": [
              "Context"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 16
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionAstExpressionBuilder",
        "type": "Interface",
        "label": "ExpressionAstExpressionBuilder",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionAstExpressionBuilder.type",
            "type": "string",
            "label": "type",
            "description": [
              "\nUsed to identify expression builder objects."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 48
            },
            "signature": [
              "\"expression_builder\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionAstExpressionBuilder.functions",
            "type": "Array",
            "label": "functions",
            "description": [
              "\nArray of each of the `buildExpressionFunction()` instances\nin this expression. Use this to remove or reorder functions\nin the expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 54
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunctionBuilder",
                "text": "ExpressionAstFunctionBuilder"
              },
              "<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ">[]"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-common.ExpressionAstExpressionBuilder.findFunction",
            "type": "Function",
            "label": "findFunction",
            "description": [
              "\nRecursively searches expression for all ocurrences of the\nfunction, including in subexpressions.\n\nUseful when performing migrations on a specific function,\nas you can iterate over the array of references and update\nall functions at once.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 66
            },
            "signature": [
              "<FnDef extends ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              " = ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.AnyExpressionFunctionDefinition",
                "text": "AnyExpressionFunctionDefinition"
              },
              ">(fnName: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.InferFunctionDefinition",
                "text": "InferFunctionDefinition"
              },
              "<FnDef>[\"name\"]) => [] | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunctionBuilder",
                "text": "ExpressionAstFunctionBuilder"
              },
              "<FnDef>[]"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-common.ExpressionAstExpressionBuilder.toAst",
            "type": "Function",
            "label": "toAst",
            "description": [
              "\nConverts expression to an AST.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 74
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              }
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-common.ExpressionAstExpressionBuilder.toString",
            "type": "Function",
            "label": "toString",
            "description": [
              "\nConverts expression to an expression string.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_expression.ts",
              "lineNumber": 80
            },
            "signature": [
              "() => string"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_expression.ts",
          "lineNumber": 44
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionAstFunctionBuilder",
        "type": "Interface",
        "label": "ExpressionAstFunctionBuilder",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunctionBuilder",
            "text": "ExpressionAstFunctionBuilder"
          },
          "<FnDef>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionAstFunctionBuilder.type",
            "type": "string",
            "label": "type",
            "description": [
              "\nUsed to identify expression function builder objects."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 63
            },
            "signature": [
              "\"expression_function_builder\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionAstFunctionBuilder.name",
            "type": "Uncategorized",
            "label": "name",
            "description": [
              "\nName of this expression function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 67
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.InferFunctionDefinition",
                "text": "InferFunctionDefinition"
              },
              "<FnDef>[\"name\"]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionAstFunctionBuilder.arguments",
            "type": "Object",
            "label": "arguments",
            "description": [
              "\nObject of all args currently added to the function. This is\nstructured similarly to `ExpressionAstFunction['arguments']`,\nhowever any subexpressions are returned as expression builder\ninstances instead of expression ASTs."
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 74
            },
            "signature": [
              "FunctionBuilderArguments<FnDef>"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-common.ExpressionAstFunctionBuilder.addArgument",
            "type": "Function",
            "label": "addArgument",
            "description": [
              "\nAdds an additional argument to the function. For multi-args,\nthis should be called once for each new arg. Note that TS\nwill not enforce whether multi-args are available, so only\nuse this to update an existing arg if you are certain it\nis a multi-arg.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 86
            },
            "signature": [
              "<A extends FunctionArgName<FnDef>>(name: A, value: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | FunctionArgs<FnDef>[A]) => this"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-common.ExpressionAstFunctionBuilder.getArgument",
            "type": "Function",
            "label": "getArgument",
            "description": [
              "\nRetrieves an existing argument by name.\nUseful when you want to retrieve the current array of args and add\nsomething to it before calling `replaceArgument`. Any subexpression\narguments will be returned as expression builder instances.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 99
            },
            "signature": [
              "<A extends FunctionArgName<FnDef>>(name: A) => (",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | FunctionArgs<FnDef>[A])[] | undefined"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-common.ExpressionAstFunctionBuilder.replaceArgument",
            "type": "Function",
            "label": "replaceArgument",
            "description": [
              "\nOverwrites an existing argument with a new value.\nIn order to support multi-args, the value given must always be\nan array.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 111
            },
            "signature": [
              "<A extends FunctionArgName<FnDef>>(name: A, value: (",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpressionBuilder",
                "text": "ExpressionAstExpressionBuilder"
              },
              " | FunctionArgs<FnDef>[A])[]) => this"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-common.ExpressionAstFunctionBuilder.removeArgument",
            "type": "Function",
            "label": "removeArgument",
            "description": [
              "\nRemoves an (optional) argument from the function.\n\nTypeScript will enforce that you only remove optional\narguments. For manipulating required args, use `replaceArgument`.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 124
            },
            "signature": [
              "<A extends OptionalKeys<FunctionArgs<FnDef>>>(name: A) => this"
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-common.ExpressionAstFunctionBuilder.toAst",
            "type": "Function",
            "label": "toAst",
            "description": [
              "\nConverts function to an AST.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 130
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstFunction",
                "text": "ExpressionAstFunction"
              }
            ]
          },
          {
            "tags": [
              "return"
            ],
            "id": "def-common.ExpressionAstFunctionBuilder.toString",
            "type": "Function",
            "label": "toString",
            "description": [
              "\nConverts function to an expression string.\n"
            ],
            "source": {
              "path": "src/plugins/expressions/common/ast/build_function.ts",
              "lineNumber": 136
            },
            "signature": [
              "() => string"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_function.ts",
          "lineNumber": 57
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionExecOptions",
        "type": "Interface",
        "label": "ExpressionExecOptions",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionExecOptions.debug",
            "type": "CompoundType",
            "label": "debug",
            "description": [
              "\nWhether to execute expression in *debug mode*. In *debug mode* inputs and\noutputs as well as all resolved arguments and time it took to execute each\nfunction are saved and are available for introspection."
            ],
            "source": {
              "path": "src/plugins/expressions/common/executor/executor.ts",
              "lineNumber": 33
            },
            "signature": [
              "boolean | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/executor/executor.ts",
          "lineNumber": 27
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionExecutionParams",
        "type": "Interface",
        "label": "ExpressionExecutionParams",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionExecutionParams.searchContext",
            "type": "Object",
            "label": "searchContext",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 42
            },
            "signature": [
              {
                "pluginId": "kibanaUtils",
                "scope": "common",
                "docId": "kibKibanaUtilsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionExecutionParams.variables",
            "type": "Object",
            "label": "variables",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 44
            },
            "signature": [
              "Record<string, any> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionExecutionParams.debug",
            "type": "CompoundType",
            "label": "debug",
            "description": [
              "\nWhether to execute expression in *debug mode*. In *debug mode* inputs and\noutputs as well as all resolved arguments and time it took to execute each\nfunction are saved and are available for introspection."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 51
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionExecutionParams.kibanaRequest",
            "type": "Object",
            "label": "kibanaRequest",
            "description": [
              "\nMakes a `KibanaRequest` object available to expression functions. Useful for\nfunctions which are running on the server and need to perform operations that\nare scoped to a specific user."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 58
            },
            "signature": [
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionExecutionParams.searchSessionId",
            "type": "string",
            "label": "searchSessionId",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 60
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionExecutionParams.syncColors",
            "type": "CompoundType",
            "label": "syncColors",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 62
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionExecutionParams.inspectorAdapters",
            "type": "Object",
            "label": "inspectorAdapters",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 64
            },
            "signature": [
              {
                "pluginId": "inspector",
                "scope": "common",
                "docId": "kibInspectorPluginApi",
                "section": "def-common.Adapters",
                "text": "Adapters"
              },
              " | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/service/expressions_services.ts",
          "lineNumber": 41
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionDefinition",
        "type": "Interface",
        "label": "ExpressionFunctionDefinition",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunctionDefinition",
            "text": "ExpressionFunctionDefinition"
          },
          "<Name, Input, Arguments, Output, Context> extends Partial<",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.PersistableState",
            "text": "PersistableState"
          },
          "<Record<string, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstArgument",
            "text": "ExpressionAstArgument"
          },
          "[]>>>"
        ],
        "description": [
          "\n`ExpressionFunctionDefinition` is the interface plugins have to implement to\nregister a function in `expressions` plugin."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinition.name",
            "type": "Uncategorized",
            "label": "name",
            "description": [
              "\nThe name of the function, as will be used in expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 40
            },
            "signature": [
              "Name"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinition.disabled",
            "type": "CompoundType",
            "label": "disabled",
            "description": [
              "\nif set to true function will be disabled (but its migrate function will still be available)"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 45
            },
            "signature": [
              "boolean | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinition.type",
            "type": "CompoundType",
            "label": "type",
            "description": [
              "\nName of type of value this function outputs."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 50
            },
            "signature": [
              "\"date\" | \"filter\" | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.KnownTypeToString",
                "text": "KnownTypeToString"
              },
              "<",
              "UnwrapPromiseOrReturn",
              "<Output>> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinition.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [
              "\nList of allowed type names for input value of this function. If this\nproperty is set the input of function will be cast to the first possible\ntype in this list. If this property is missing the input will be provided\nto the function as-is."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 58
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.TypeToString",
                "text": "TypeToString"
              },
              "<Input>[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinition.args",
            "type": "Object",
            "label": "args",
            "description": [
              "\nSpecification of arguments that function supports. This list will also be\nused for autocomplete functionality when your function is being edited."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 64
            },
            "signature": [
              "{ [key in keyof Arguments]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ArgumentType",
                "text": "ArgumentType"
              },
              "<Arguments[key]>; }"
            ]
          },
          {
            "tags": [
              "todo"
            ],
            "id": "def-common.ExpressionFunctionDefinition.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 69
            },
            "signature": [
              "string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinition.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nHelp text displayed in the Expression editor. This text should be\ninternationalized."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 75
            }
          },
          {
            "id": "def-common.ExpressionFunctionDefinition.fn",
            "type": "Function",
            "label": "fn",
            "signature": [
              "(input: Input, args: Arguments, context: Context) => Output"
            ],
            "description": [
              "\nThe actual implementation of the function.\n"
            ],
            "children": [
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "Input"
                ],
                "description": [
                  "Output of the previous function, or initial input."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/types.ts",
                  "lineNumber": 86
                }
              },
              {
                "type": "Uncategorized",
                "label": "args",
                "isRequired": true,
                "signature": [
                  "Arguments"
                ],
                "description": [
                  "Parameters set for this function in expression."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/types.ts",
                  "lineNumber": 86
                }
              },
              {
                "type": "Uncategorized",
                "label": "context",
                "isRequired": true,
                "signature": [
                  "Context"
                ],
                "description": [
                  "Object with functions to perform side effects. This object\nis created for the duration of the execution of expression and is the\nsame for all functions in expression chain."
                ],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/types.ts",
                  "lineNumber": 86
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 86
            }
          },
          {
            "tags": [
              "deprecated"
            ],
            "id": "def-common.ExpressionFunctionDefinition.context",
            "type": "Object",
            "label": "context",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 91
            },
            "signature": [
              "{ types: any[] | undefined; } | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/types.ts",
          "lineNumber": 30
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionDefinitions",
        "type": "Interface",
        "label": "ExpressionFunctionDefinitions",
        "description": [
          "\nA mapping of `ExpressionFunctionDefinition`s for functions which the\nExpressions services provides out-of-the-box. Any new functions registered\nby the Expressions plugin should have their types added here.\n"
        ],
        "tags": [
          "public"
        ],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinitions.clog",
            "type": "Object",
            "label": "clog",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 117
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionClog",
                "text": "ExpressionFunctionClog"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinitions.font",
            "type": "Object",
            "label": "font",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 118
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionFont",
                "text": "ExpressionFunctionFont"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinitions.var_set",
            "type": "Object",
            "label": "var_set",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 119
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionVarSet",
                "text": "ExpressionFunctionVarSet"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinitions.var",
            "type": "Object",
            "label": "var",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 120
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionVar",
                "text": "ExpressionFunctionVar"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinitions.theme",
            "type": "Object",
            "label": "theme",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 121
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionTheme",
                "text": "ExpressionFunctionTheme"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinitions.cumulative_sum",
            "type": "Object",
            "label": "cumulative_sum",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 122
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionCumulativeSum",
                "text": "ExpressionFunctionCumulativeSum"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinitions.derivative",
            "type": "Object",
            "label": "derivative",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 123
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionDerivative",
                "text": "ExpressionFunctionDerivative"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionFunctionDefinitions.moving_average",
            "type": "Object",
            "label": "moving_average",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/types.ts",
              "lineNumber": 124
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunctionMovingAverage",
                "text": "ExpressionFunctionMovingAverage"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/types.ts",
          "lineNumber": 116
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionImage",
        "type": "Interface",
        "label": "ExpressionImage",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionImage.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 15
            },
            "signature": [
              "\"image\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionImage.mode",
            "type": "string",
            "label": "mode",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionImage.dataurl",
            "type": "string",
            "label": "dataurl",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 17
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionRenderDefinition",
        "type": "Interface",
        "label": "ExpressionRenderDefinition",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderDefinition",
            "text": "ExpressionRenderDefinition"
          },
          "<Config>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionRenderDefinition.name",
            "type": "string",
            "label": "name",
            "description": [
              "\nTechnical name of the renderer, used as ID to identify renderer in\nexpression renderer registry. This must match the name of the expression\nfunction that is used to create the `type: render` object."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 15
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionRenderDefinition.displayName",
            "type": "string",
            "label": "displayName",
            "description": [
              "\nA user friendly name of the renderer as will be displayed to user in UI."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 20
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionRenderDefinition.help",
            "type": "string",
            "label": "help",
            "description": [
              "\nHelp text as will be displayed to user. A sentence or few about what this\nelement does."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 26
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionRenderDefinition.validate",
            "type": "Function",
            "label": "validate",
            "description": [
              "\nUsed to validate the data before calling the render function."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 31
            },
            "signature": [
              "(() => Error | undefined) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionRenderDefinition.reuseDomNode",
            "type": "boolean",
            "label": "reuseDomNode",
            "description": [
              "\nTell the renderer if the dom node should be reused, it's recreated each\ntime by default."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 37
            }
          },
          {
            "tags": [],
            "id": "def-common.ExpressionRenderDefinition.render",
            "type": "Function",
            "label": "render",
            "description": [
              "\nThe function called to render the output data of an expression."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 42
            },
            "signature": [
              "(domNode: HTMLElement, config: Config, handlers: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.IInterpreterRenderHandlers",
                "text": "IInterpreterRenderHandlers"
              },
              ") => void | Promise<void>"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/types.ts",
          "lineNumber": 9
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionServiceParams",
        "type": "Interface",
        "label": "ExpressionServiceParams",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionServiceParams.executor",
            "type": "Object",
            "label": "executor",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 151
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Executor",
                "text": "Executor"
              },
              "<Record<string, unknown>> | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionServiceParams.renderers",
            "type": "Object",
            "label": "renderers",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 152
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRendererRegistry",
                "text": "ExpressionRendererRegistry"
              },
              " | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/service/expressions_services.ts",
          "lineNumber": 150
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionsServiceStart",
        "type": "Interface",
        "label": "ExpressionsServiceStart",
        "description": [
          "\nThe public contract that `ExpressionsService` provides to other plugins\nin Kibana Platform in *start* life-cycle."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionsServiceStart.getFunction",
            "type": "Function",
            "label": "getFunction",
            "description": [
              "\nGet a registered `ExpressionFunction` by its name, which was registered\nusing the `registerFunction` method. The returned `ExpressionFunction`\ninstance is an internal representation of the function in Expressions\nservice - do not mutate that object."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 78
            },
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionsServiceStart.getRenderer",
            "type": "Function",
            "label": "getRenderer",
            "description": [
              "\nGet a registered `ExpressionRenderer` by its name, which was registered\nusing the `registerRenderer` method. The returned `ExpressionRenderer`\ninstance is an internal representation of the renderer in Expressions\nservice - do not mutate that object."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 86
            },
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionRenderer",
                "text": "ExpressionRenderer"
              },
              "<unknown> | null"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionsServiceStart.getType",
            "type": "Function",
            "label": "getType",
            "description": [
              "\nGet a registered `ExpressionType` by its name, which was registered\nusing the `registerType` method. The returned `ExpressionType`\ninstance is an internal representation of the type in Expressions\nservice - do not mutate that object."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 94
            },
            "signature": [
              "(name: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              " | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionsServiceStart.run",
            "type": "Function",
            "label": "run",
            "description": [
              "\nExecutes expression string or a parsed expression AST and immediately\nreturns the result.\n\nBelow example will execute `sleep 100 | clog` expression with `123` initial\ninput to the first function.\n\n```ts\nexpressions.run('sleep 100 | clog', 123);\n```\n\n- `sleep 100` will delay execution by 100 milliseconds and pass the `123` input as\n  its output.\n- `clog` will print to console `123` and pass it as its output.\n- The final result of the execution will be `123`.\n\nOptionally, you can pass an object as the third argument which will be used\nto extend the `ExecutionContext`&mdash;an object passed to each function\nas the third argument, that allows functions to perform side-effects.\n\n```ts\nexpressions.run('...', null, { elasticsearchClient });\n```"
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 120
            },
            "signature": [
              "<Input, Output>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              " | undefined) => Promise<Output>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionsServiceStart.execute",
            "type": "Function",
            "label": "execute",
            "description": [
              "\nStarts expression execution and immediately returns `ExecutionContract`\ninstance that tracks the progress of the execution and can be used to\ninteract with the execution."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 131
            },
            "signature": [
              "<Input = unknown, Output = unknown>(ast: string | ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              ", input: Input, params?: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionExecutionParams",
                "text": "ExpressionExecutionParams"
              },
              " | undefined) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContract",
                "text": "ExecutionContract"
              },
              "<Input, Output, unknown>"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionsServiceStart.fork",
            "type": "Function",
            "label": "fork",
            "description": [
              "\nCreate a new instance of `ExpressionsService`. The new instance inherits\nall state of the original `ExpressionsService`, including all expression\ntypes, expression functions and context. Also, all new types and functions\nregistered in the original services AFTER the forking event will be\navailable in the forked instance. However, all new types and functions\nregistered in the forked instances will NOT be available to the original\nservice."
            ],
            "source": {
              "path": "src/plugins/expressions/common/service/expressions_services.ts",
              "lineNumber": 147
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionsService",
                "text": "ExpressionsService"
              }
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/service/expressions_services.ts",
          "lineNumber": 71
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionTypeDefinition",
        "type": "Interface",
        "label": "ExpressionTypeDefinition",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionTypeDefinition",
            "text": "ExpressionTypeDefinition"
          },
          "<Name, Value, SerializedType>"
        ],
        "description": [
          "\nA generic type which represents a custom Expression Type Definition that's\nregistered to the Interpreter."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionTypeDefinition.name",
            "type": "Uncategorized",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 31
            },
            "signature": [
              "Name"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionTypeDefinition.validate",
            "type": "Function",
            "label": "validate",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 32
            },
            "signature": [
              "((type: any) => void | Error) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionTypeDefinition.serialize",
            "type": "Function",
            "label": "serialize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 33
            },
            "signature": [
              "((type: Value) => SerializedType) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionTypeDefinition.deserialize",
            "type": "Function",
            "label": "deserialize",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 34
            },
            "signature": [
              "((type: SerializedType) => Value) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionTypeDefinition.from",
            "type": "Object",
            "label": "from",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 37
            },
            "signature": [
              "{ [type: string]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<any, Value>; } | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionTypeDefinition.to",
            "type": "Object",
            "label": "to",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 40
            },
            "signature": [
              "{ [type: string]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionValueConverter",
                "text": "ExpressionValueConverter"
              },
              "<Value, any>; } | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionTypeDefinition.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/types.ts",
              "lineNumber": 43
            },
            "signature": [
              "string | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 26
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionTypeStyle",
        "type": "Interface",
        "label": "ExpressionTypeStyle",
        "description": [
          "\nAn object that represents style information, typically CSS."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.ExpressionTypeStyle.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 121
            },
            "signature": [
              "\"style\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionTypeStyle.spec",
            "type": "Object",
            "label": "spec",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 122
            },
            "signature": [
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.CSSStyle",
                "text": "CSSStyle"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.ExpressionTypeStyle.css",
            "type": "string",
            "label": "css",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/style.ts",
              "lineNumber": 123
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 120
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.Font",
        "type": "Interface",
        "label": "Font",
        "description": [
          "\nAn interface representing a font in Canvas, with a textual label and the CSS\n`font-value`."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.Font.label",
            "type": "CompoundType",
            "label": "label",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/fonts.ts",
              "lineNumber": 26
            },
            "signature": [
              "\"American Typewriter\" | \"Arial\" | \"Baskerville\" | \"Book Antiqua\" | \"Brush Script\" | \"Chalkboard\" | \"Didot\" | \"Futura\" | \"Gill Sans\" | \"Helvetica Neue\" | \"Hoefler Text\" | \"Lucida Grande\" | \"Myriad\" | \"Open Sans\" | \"Optima\" | \"Palatino\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.Font.value",
            "type": "CompoundType",
            "label": "value",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/fonts.ts",
              "lineNumber": 27
            },
            "signature": [
              "\"'American Typewriter', 'Courier New', Courier, Monaco, mono\" | \"Arial, sans-serif\" | \"Baskerville, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Brush Script MT', 'Comic Sans', sans-serif\" | \"Chalkboard, 'Comic Sans', sans-serif\" | \"Didot, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"Futura, Impact, Helvetica, Arial, sans-serif\" | \"'Gill Sans', 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"'Helvetica Neue', Helvetica, Arial, sans-serif\" | \"'Hoefler Text', Garamond, Georgia, 'Times New Roman', Times, serif\" | \"'Lucida Grande', 'Lucida Sans Unicode', Lucida, Verdana, Helvetica, Arial, sans-serif\" | \"Myriad, Helvetica, Arial, sans-serif\" | \"'Open Sans', Helvetica, Arial, sans-serif\" | \"Optima, 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"Palatino, 'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\""
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 25
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.IInterpreterRenderHandlers",
        "type": "Interface",
        "label": "IInterpreterRenderHandlers",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.IInterpreterRenderHandlers.done",
            "type": "Function",
            "label": "done",
            "description": [
              "\nDone increments the number of rendering successes"
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 67
            },
            "signature": [
              "() => void"
            ]
          },
          {
            "tags": [],
            "id": "def-common.IInterpreterRenderHandlers.onDestroy",
            "type": "Function",
            "label": "onDestroy",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 68
            },
            "signature": [
              "(fn: () => void) => void"
            ]
          },
          {
            "tags": [],
            "id": "def-common.IInterpreterRenderHandlers.reload",
            "type": "Function",
            "label": "reload",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 69
            },
            "signature": [
              "() => void"
            ]
          },
          {
            "tags": [],
            "id": "def-common.IInterpreterRenderHandlers.update",
            "type": "Function",
            "label": "update",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 70
            },
            "signature": [
              "(params: any) => void"
            ]
          },
          {
            "tags": [],
            "id": "def-common.IInterpreterRenderHandlers.event",
            "type": "Function",
            "label": "event",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 71
            },
            "signature": [
              "(event: any) => void"
            ]
          },
          {
            "tags": [],
            "id": "def-common.IInterpreterRenderHandlers.hasCompatibleActions",
            "type": "Function",
            "label": "hasCompatibleActions",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 72
            },
            "signature": [
              "((event: any) => Promise<boolean>) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.IInterpreterRenderHandlers.getRenderMode",
            "type": "Function",
            "label": "getRenderMode",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 73
            },
            "signature": [
              "() => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.RenderMode",
                "text": "RenderMode"
              }
            ]
          },
          {
            "tags": [],
            "id": "def-common.IInterpreterRenderHandlers.isSyncColorsEnabled",
            "type": "Function",
            "label": "isSyncColorsEnabled",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 74
            },
            "signature": [
              "() => boolean"
            ]
          },
          {
            "tags": [],
            "id": "def-common.IInterpreterRenderHandlers.uiState",
            "type": "Unknown",
            "label": "uiState",
            "description": [
              "\nThis uiState interface is actually `PersistedState` from the visualizations plugin,\nbut expressions cannot know about vis or it creates a mess of circular dependencies.\nDownstream consumers of the uiState handler will need to cast for now."
            ],
            "source": {
              "path": "src/plugins/expressions/common/expression_renderers/types.ts",
              "lineNumber": 80
            },
            "signature": [
              "unknown"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/types.ts",
          "lineNumber": 63
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.IRegistry",
        "type": "Interface",
        "label": "IRegistry",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.IRegistry",
            "text": "IRegistry"
          },
          "<T>"
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "id": "def-common.IRegistry.get",
            "type": "Function",
            "label": "get",
            "signature": [
              "(id: string) => T | null"
            ],
            "description": [],
            "children": [
              {
                "type": "string",
                "label": "id",
                "isRequired": true,
                "signature": [
                  "string"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/types/registry.ts",
                  "lineNumber": 10
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/types/registry.ts",
              "lineNumber": 10
            }
          },
          {
            "id": "def-common.IRegistry.toJS",
            "type": "Function",
            "label": "toJS",
            "signature": [
              "() => Record<string, T>"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/types/registry.ts",
              "lineNumber": 12
            }
          },
          {
            "id": "def-common.IRegistry.toArray",
            "type": "Function",
            "label": "toArray",
            "signature": [
              "() => T[]"
            ],
            "description": [],
            "children": [],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/types/registry.ts",
              "lineNumber": 14
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/registry.ts",
          "lineNumber": 9
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.MapColumnArguments",
        "type": "Interface",
        "label": "MapColumnArguments",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.MapColumnArguments.id",
            "type": "CompoundType",
            "label": "id",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 14
            },
            "signature": [
              "string | null | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.MapColumnArguments.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 15
            }
          },
          {
            "tags": [],
            "id": "def-common.MapColumnArguments.expression",
            "type": "Function",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 16
            },
            "signature": [
              "((datatable: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              ") => Promise<string | number | boolean | null>) | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.MapColumnArguments.copyMetaFrom",
            "type": "CompoundType",
            "label": "copyMetaFrom",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 17
            },
            "signature": [
              "string | null | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
          "lineNumber": 13
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.MovingAverageArgs",
        "type": "Interface",
        "label": "MovingAverageArgs",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.MovingAverageArgs.by",
            "type": "Array",
            "label": "by",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 15
            },
            "signature": [
              "string[] | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.MovingAverageArgs.inputColumnId",
            "type": "string",
            "label": "inputColumnId",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-common.MovingAverageArgs.outputColumnId",
            "type": "string",
            "label": "outputColumnId",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 17
            }
          },
          {
            "tags": [],
            "id": "def-common.MovingAverageArgs.outputColumnName",
            "type": "string",
            "label": "outputColumnName",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 18
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.MovingAverageArgs.window",
            "type": "number",
            "label": "window",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 19
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.PointSeriesColumn",
        "type": "Interface",
        "label": "PointSeriesColumn",
        "description": [
          "\nColumn in a PointSeries"
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.PointSeriesColumn.type",
            "type": "CompoundType",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 24
            },
            "signature": [
              "\"string\" | \"number\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.PointSeriesColumn.role",
            "type": "CompoundType",
            "label": "role",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 25
            },
            "signature": [
              "\"measure\" | \"dimension\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.PointSeriesColumn.expression",
            "type": "string",
            "label": "expression",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 26
            }
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 23
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.Range",
        "type": "Interface",
        "label": "Range",
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.Range.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 15
            },
            "signature": [
              "\"range\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.Range.from",
            "type": "number",
            "label": "from",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 16
            }
          },
          {
            "tags": [],
            "id": "def-common.Range.to",
            "type": "number",
            "label": "to",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 17
            }
          },
          {
            "tags": [],
            "id": "def-common.Range.label",
            "type": "string",
            "label": "label",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 18
            },
            "signature": [
              "string | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.SerializedDatatable",
        "type": "Interface",
        "label": "SerializedDatatable",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.SerializedDatatable",
            "text": "SerializedDatatable"
          },
          " extends ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Datatable",
            "text": "Datatable"
          }
        ],
        "description": [],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.SerializedDatatable.rows",
            "type": "Array",
            "label": "rows",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 105
            },
            "signature": [
              "string[][]"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 104
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.SerializedFieldFormat",
        "type": "Interface",
        "label": "SerializedFieldFormat",
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.SerializedFieldFormat",
            "text": "SerializedFieldFormat"
          },
          "<TParams>"
        ],
        "description": [
          "\nJSON representation of a field formatter configuration.\nIs used to carry information about how to format data in\na data table as part of the column definition."
        ],
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.SerializedFieldFormat.id",
            "type": "string",
            "label": "id",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/common.ts",
              "lineNumber": 54
            },
            "signature": [
              "string | undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.SerializedFieldFormat.params",
            "type": "Uncategorized",
            "label": "params",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/types/common.ts",
              "lineNumber": 55
            },
            "signature": [
              "TParams | undefined"
            ]
          }
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 53
        },
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "id": "def-common.BackgroundRepeat",
        "type": "Enum",
        "label": "BackgroundRepeat",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `background-repeat` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.BackgroundSize",
        "type": "Enum",
        "label": "BackgroundSize",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `background-size` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 26
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.FontStyle",
        "type": "Enum",
        "label": "FontStyle",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `font-style` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 35
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.FontWeight",
        "type": "Enum",
        "label": "FontWeight",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `font-weight` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 43
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.Overflow",
        "type": "Enum",
        "label": "Overflow",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `overflow` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 62
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.TextAlignment",
        "type": "Enum",
        "label": "TextAlignment",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `text-align` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 72
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.TextDecoration",
        "type": "Enum",
        "label": "TextDecoration",
        "tags": [],
        "description": [
          "\nEnum of supported CSS `text-decoration` properties."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 82
        },
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "id": "def-common.AnyExpressionFunctionDefinition",
        "type": "Type",
        "label": "AnyExpressionFunctionDefinition",
        "tags": [],
        "description": [
          "\nType to capture every possible expression function definition."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/types.ts",
          "lineNumber": 102
        },
        "signature": [
          "ExpressionFunctionDefinition<string, any, Record<string, any>, any, ExecutionContext<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.AnyExpressionRenderDefinition",
        "type": "Type",
        "label": "AnyExpressionRenderDefinition",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/types.ts",
          "lineNumber": 49
        },
        "signature": [
          "ExpressionRenderDefinition<any>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.AnyExpressionTypeDefinition",
        "type": "Type",
        "label": "AnyExpressionTypeDefinition",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 46
        },
        "signature": [
          "ExpressionTypeDefinition<any, any, any>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ArgumentType",
        "type": "Type",
        "label": "ArgumentType",
        "tags": [],
        "description": [
          "\nThis type represents all of the possible combinations of properties of an\nArgument in an Expression Function. The presence or absence of certain fields\ninfluence the shape and presence of others within each `arg` in the specification."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/arguments.ts",
          "lineNumber": 16
        },
        "signature": [
          "SingleArgumentType<T> | MultipleArgumentType<T> | UnresolvedSingleArgumentType<T> | UnresolvedMultipleArgumentType<T>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.DatatableColumnType",
        "type": "Type",
        "label": "DatatableColumnType",
        "tags": [],
        "description": [
          "\nThis type represents the `type` of any `DatatableColumn` in a `Datatable`.\nits duplicated from KBN_FIELD_TYPES"
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 36
        },
        "signature": [
          "\"string\" | \"number\" | \"boolean\" | \"object\" | \"date\" | \"ip\" | \"_source\" | \"attachment\" | \"geo_point\" | \"geo_shape\" | \"murmur3\" | \"unknown\" | \"conflict\" | \"nested\" | \"histogram\" | \"null\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.DatatableRow",
        "type": "Type",
        "label": "DatatableRow",
        "tags": [],
        "description": [
          "\nThis type represents a row in a `Datatable`."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 57
        },
        "signature": [
          "{ [x: string]: any; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ErrorLike",
        "type": "Type",
        "label": "ErrorLike",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/util/create_error.ts",
          "lineNumber": 17
        },
        "signature": [
          "SerializedError & { original?: SerializedError | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExecutionContainer",
        "type": "Type",
        "label": "ExecutionContainer",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/execution/container.ts",
          "lineNumber": 73
        },
        "signature": [
          "StateContainer<ExecutionState<Output>, ExecutionPureTransitions<Output>, {}>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExecutorContainer",
        "type": "Type",
        "label": "ExecutorContainer",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 55
        },
        "signature": [
          "StateContainer<ExecutorState<Context>, ExecutorPureTransitions, ExecutorPureSelectors>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionAstArgument",
        "type": "Type",
        "label": "ExpressionAstArgument",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 77
        },
        "signature": [
          "string | number | false | true | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionAstExpression",
        "type": "Type",
        "label": "ExpressionAstExpression",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 16
        },
        "signature": [
          "{ type: 'expression'; chain: ExpressionAstFunction[]; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionAstFunction",
        "type": "Type",
        "label": "ExpressionAstFunction",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 21
        },
        "signature": [
          "{ type: 'function'; function: string; arguments: Record<string, ExpressionAstArgument[]>; debug?: ExpressionAstFunctionDebug | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionAstFunctionDebug",
        "type": "Type",
        "label": "ExpressionAstFunctionDebug",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 32
        },
        "signature": [
          "{ success: boolean; fn: string; input: ExpressionValue; args: Record<string, ExpressionValue>; output?: ExpressionValue; error?: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionValueBoxed",
            "text": "ExpressionValueBoxed"
          },
          "<\"error\", { error: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ErrorLike",
            "text": "ErrorLike"
          },
          "; info?: ",
          {
            "pluginId": "kibanaUtils",
            "scope": "common",
            "docId": "kibKibanaUtilsPluginApi",
            "section": "def-common.SerializableState",
            "text": "SerializableState"
          },
          " | undefined; }> | undefined; rawError?: any | Error; duration: number | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionAstNode",
        "type": "Type",
        "label": "ExpressionAstNode",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/types.ts",
          "lineNumber": 11
        },
        "signature": [
          "string | number | false | true | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstFunction",
            "text": "ExpressionAstFunction"
          },
          " | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionAstExpression",
            "text": "ExpressionAstExpression"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionClog",
        "type": "Type",
        "label": "ExpressionFunctionClog",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/clog.ts",
          "lineNumber": 11
        },
        "signature": [
          "ExpressionFunctionDefinition<\"clog\", unknown, {}, unknown, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionCumulativeSum",
        "type": "Type",
        "label": "ExpressionFunctionCumulativeSum",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
          "lineNumber": 21
        },
        "signature": [
          "ExpressionFunctionDefinition<\"cumulative_sum\", Datatable, CumulativeSumArgs, Datatable, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionDerivative",
        "type": "Type",
        "label": "ExpressionFunctionDerivative",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
          "lineNumber": 21
        },
        "signature": [
          "ExpressionFunctionDefinition<\"derivative\", Datatable, DerivativeArgs, Datatable, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionFont",
        "type": "Type",
        "label": "ExpressionFunctionFont",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
          "lineNumber": 44
        },
        "signature": [
          "ExpressionFunctionDefinition<\"font\", null, Arguments, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionTypeStyle",
            "text": "ExpressionTypeStyle"
          },
          ", ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionMovingAverage",
        "type": "Type",
        "label": "ExpressionFunctionMovingAverage",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
          "lineNumber": 22
        },
        "signature": [
          "ExpressionFunctionDefinition<\"moving_average\", Datatable, MovingAverageArgs, Datatable, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionTheme",
        "type": "Type",
        "label": "ExpressionFunctionTheme",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
          "lineNumber": 20
        },
        "signature": [
          "ExpressionFunctionDefinition<\"theme\", null, Arguments, any, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionVar",
        "type": "Type",
        "label": "ExpressionFunctionVar",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
          "lineNumber": 16
        },
        "signature": [
          "ExpressionFunctionDefinition<\"var\", unknown, Arguments, unknown, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionFunctionVarSet",
        "type": "Type",
        "label": "ExpressionFunctionVarSet",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
          "lineNumber": 17
        },
        "signature": [
          "ExpressionFunctionDefinition<\"var_set\", unknown, Arguments, unknown, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExecutionContext",
            "text": "ExecutionContext"
          },
          "<",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Adapters",
            "text": "Adapters"
          },
          ", ",
          "SerializableState",
          ">>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionsServiceSetup",
        "type": "Type",
        "label": "ExpressionsServiceSetup",
        "tags": [],
        "description": [
          "\nThe public contract that `ExpressionsService` provides to other plugins\nin Kibana Platform in *setup* life-cycle."
        ],
        "source": {
          "path": "src/plugins/expressions/common/service/expressions_services.ts",
          "lineNumber": 26
        },
        "signature": [
          "{ readonly getType: (name: string) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionType",
            "text": "ExpressionType"
          },
          " | undefined; readonly getFunction: (name: string) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunction",
            "text": "ExpressionFunction"
          },
          " | undefined; readonly getFunctions: () => Record<string, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionFunction",
            "text": "ExpressionFunction"
          },
          ">; readonly getRenderer: (name: string) => ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderer",
            "text": "ExpressionRenderer"
          },
          "<unknown> | null; readonly getRenderers: () => Record<string, ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.ExpressionRenderer",
            "text": "ExpressionRenderer"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionValue",
        "type": "Type",
        "label": "ExpressionValue",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 15
        },
        "signature": [
          "any"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionValueBoxed",
        "type": "Type",
        "label": "ExpressionValueBoxed",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 11
        },
        "signature": [
          "{ type: Type; } & Value"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionValueConverter",
        "type": "Type",
        "label": "ExpressionValueConverter",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 17
        },
        "signature": [
          "(input: I, availableTypes: Record<string, any>) => O"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionValueError",
        "type": "Type",
        "label": "ExpressionValueError",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
          "lineNumber": 17
        },
        "signature": [
          "{ type: \"error\"; } & { error: ErrorLike; info?: SerializableState | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionValueFilter",
        "type": "Type",
        "label": "ExpressionValueFilter",
        "tags": [],
        "description": [
          "\nRepresents an object that is a Filter."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/filter.ts",
          "lineNumber": 14
        },
        "signature": [
          "{ type: \"filter\"; } & { filterType?: string | undefined; value?: string | undefined; column?: string | undefined; and: ExpressionValueFilter[]; to?: string | undefined; from?: string | undefined; query?: string | null | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionValueNum",
        "type": "Type",
        "label": "ExpressionValueNum",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
          "lineNumber": 14
        },
        "signature": [
          "{ type: \"num\"; } & { value: number; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionValueRender",
        "type": "Type",
        "label": "ExpressionValueRender",
        "tags": [],
        "description": [
          "\nRepresents an object that is intended to be rendered."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
          "lineNumber": 16
        },
        "signature": [
          "{ type: \"render\"; } & { as: string; value: T; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.ExpressionValueUnboxed",
        "type": "Type",
        "label": "ExpressionValueUnboxed",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/types.ts",
          "lineNumber": 9
        },
        "signature": [
          "any"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.FontLabel",
        "type": "Type",
        "label": "FontLabel",
        "tags": [],
        "description": [
          "\nThis type contains a unions of all supported font labels, or the the name of\nthe font the user would see in a UI."
        ],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 13
        },
        "signature": [
          "\"American Typewriter\" | \"Arial\" | \"Baskerville\" | \"Book Antiqua\" | \"Brush Script\" | \"Chalkboard\" | \"Didot\" | \"Futura\" | \"Gill Sans\" | \"Helvetica Neue\" | \"Hoefler Text\" | \"Lucida Grande\" | \"Myriad\" | \"Open Sans\" | \"Optima\" | \"Palatino\""
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.fonts",
        "type": "Array",
        "label": "fonts",
        "description": [
          "\nA collection of supported fonts."
        ],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 123
        },
        "signature": [
          "({ label: \"American Typewriter\"; value: \"'American Typewriter', 'Courier New', Courier, Monaco, mono\"; } | { label: \"Arial\"; value: \"Arial, sans-serif\"; } | { label: \"Baskerville\"; value: \"Baskerville, Georgia, Garamond, 'Times New Roman', Times, serif\"; } | { label: \"Book Antiqua\"; value: \"'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\"; } | { label: \"Brush Script\"; value: \"'Brush Script MT', 'Comic Sans', sans-serif\"; } | { label: \"Chalkboard\"; value: \"Chalkboard, 'Comic Sans', sans-serif\"; } | { label: \"Didot\"; value: \"Didot, Georgia, Garamond, 'Times New Roman', Times, serif\"; } | { label: \"Futura\"; value: \"Futura, Impact, Helvetica, Arial, sans-serif\"; } | { label: \"Gill Sans\"; value: \"'Gill Sans', 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\"; } | { label: \"Helvetica Neue\"; value: \"'Helvetica Neue', Helvetica, Arial, sans-serif\"; } | { label: \"Hoefler Text\"; value: \"'Hoefler Text', Garamond, Georgia, 'Times New Roman', Times, serif\"; } | { label: \"Lucida Grande\"; value: \"'Lucida Grande', 'Lucida Sans Unicode', Lucida, Verdana, Helvetica, Arial, sans-serif\"; } | { label: \"Myriad\"; value: \"Myriad, Helvetica, Arial, sans-serif\"; } | { label: \"Open Sans\"; value: \"'Open Sans', Helvetica, Arial, sans-serif\"; } | { label: \"Optima\"; value: \"Optima, 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\"; } | { label: \"Palatino\"; value: \"Palatino, 'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\"; })[]"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.FontValue",
        "type": "Type",
        "label": "FontValue",
        "tags": [],
        "description": [
          "\nThis type contains a union of all supported font values, equivalent to the CSS\n`font-value` property."
        ],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 19
        },
        "signature": [
          "\"'American Typewriter', 'Courier New', Courier, Monaco, mono\" | \"Arial, sans-serif\" | \"Baskerville, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\" | \"'Brush Script MT', 'Comic Sans', sans-serif\" | \"Chalkboard, 'Comic Sans', sans-serif\" | \"Didot, Georgia, Garamond, 'Times New Roman', Times, serif\" | \"Futura, Impact, Helvetica, Arial, sans-serif\" | \"'Gill Sans', 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"'Helvetica Neue', Helvetica, Arial, sans-serif\" | \"'Hoefler Text', Garamond, Georgia, 'Times New Roman', Times, serif\" | \"'Lucida Grande', 'Lucida Sans Unicode', Lucida, Verdana, Helvetica, Arial, sans-serif\" | \"Myriad, Helvetica, Arial, sans-serif\" | \"'Open Sans', Helvetica, Arial, sans-serif\" | \"Optima, 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\" | \"Palatino, 'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\""
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.functionSpecs",
        "type": "Array",
        "label": "functionSpecs",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/index.ts",
          "lineNumber": 21
        },
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.AnyExpressionFunctionDefinition",
            "text": "AnyExpressionFunctionDefinition"
          },
          "[]"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.InferFunctionDefinition",
        "type": "Type",
        "label": "InferFunctionDefinition",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/ast/build_function.ts",
          "lineNumber": 24
        },
        "signature": [
          "FnDef extends ExpressionFunctionDefinition<infer Name, infer Input, infer Arguments, infer Output, infer Context> ? { name: Name; input: Input; arguments: Arguments; output: Output; context: Context; } : never"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.InterpreterErrorType",
        "type": "Type",
        "label": "InterpreterErrorType",
        "tags": [
          "deprecated"
        ],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
          "lineNumber": 33
        },
        "signature": [
          "{ type: \"error\"; } & { error: ErrorLike; info?: SerializableState | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.KnownTypeToString",
        "type": "Type",
        "label": "KnownTypeToString",
        "tags": [],
        "description": [
          "\nMap the type of the generic to a string-based representation of the type.\n\nIf the provided generic is its own type interface, we use the value of\nthe `type` key as a string literal type for it."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 26
        },
        "signature": [
          "T extends string ? \"string\" : T extends boolean ? \"boolean\" : T extends number ? \"number\" : T extends null ? \"null\" : T extends { type: string; } ? T[\"type\"] : never"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.MathArguments",
        "type": "Type",
        "label": "MathArguments",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
          "lineNumber": 15
        },
        "signature": [
          "{ expression: string; onError?: \"null\" | \"false\" | \"zero\" | \"throw\" | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.MathInput",
        "type": "Type",
        "label": "MathInput",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
          "lineNumber": 20
        },
        "signature": [
          "number | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.Datatable",
            "text": "Datatable"
          }
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.PointSeries",
        "type": "Type",
        "label": "PointSeries",
        "tags": [],
        "description": [
          "\nA `PointSeries` is a unique structure that represents dots on a chart."
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 39
        },
        "signature": [
          "{ type: \"pointseries\"; } & { columns: PointSeriesColumns; rows: PointSeriesRow[]; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.PointSeriesColumnName",
        "type": "Type",
        "label": "PointSeriesColumnName",
        "tags": [],
        "description": [
          "\nAllowed column names in a PointSeries"
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 18
        },
        "signature": [
          "\"color\" | \"y\" | \"x\" | \"text\" | \"size\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.PointSeriesColumns",
        "type": "Type",
        "label": "PointSeriesColumns",
        "tags": [],
        "description": [
          "\nRepresents a collection of valid Columns in a PointSeries"
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 32
        },
        "signature": [
          "{} | Record<",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.PointSeriesColumnName",
            "text": "PointSeriesColumnName"
          },
          ", ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.PointSeriesColumn",
            "text": "PointSeriesColumn"
          },
          ">"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.PointSeriesRow",
        "type": "Type",
        "label": "PointSeriesRow",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 34
        },
        "signature": [
          "{ [x: string]: any; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.Render",
        "type": "Type",
        "label": "Render",
        "tags": [
          "deprecated"
        ],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
          "lineNumber": 29
        },
        "signature": [
          "{ type: \"render\"; } & { as: string; value: T; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.RenderMode",
        "type": "Type",
        "label": "RenderMode",
        "tags": [],
        "description": [
          "\nMode of the expression render environment.\nThis value can be set from a consumer embedding an expression renderer and is accessible\nfrom within the active render function as part of the handlers.\nThe following modes are supported:\n* display (default): The chart is rendered in a container with the main purpose of viewing the chart (e.g. in a container like dashboard or canvas)\n* preview: The chart is rendered in very restricted space (below 100px width and height) and should only show a rough outline\n* edit: The chart is rendered within an editor and configuration elements within the chart should be displayed\n* noInteractivity: The chart is rendered in a non-interactive environment and should not provide any affordances for interaction like brushing"
        ],
        "source": {
          "path": "src/plugins/expressions/common/expression_renderers/types.ts",
          "lineNumber": 61
        },
        "signature": [
          "\"display\" | \"noInteractivity\" | \"edit\" | \"preview\""
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.SerializedError",
        "type": "Type",
        "label": "SerializedError",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/util/create_error.ts",
          "lineNumber": 11
        },
        "signature": [
          "{ name: string; message: string; stack?: string | undefined; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.Style",
        "type": "Type",
        "label": "Style",
        "tags": [],
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/types/style.ts",
          "lineNumber": 126
        },
        "signature": [
          "ExpressionTypeStyle"
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.typeSpecs",
        "type": "Array",
        "label": "typeSpecs",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/index.ts",
          "lineNumber": 25
        },
        "signature": [
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.AnyExpressionTypeDefinition",
            "text": "AnyExpressionTypeDefinition"
          },
          "[]"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.TypeString",
        "type": "Type",
        "label": "TypeString",
        "tags": [],
        "description": [
          "\nIf the type extends a Promise, we still need to return the string representation:\n\n`someArgument: Promise<boolean | string>` results in `types: ['boolean', 'string']`"
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 39
        },
        "signature": [
          "UnwrapPromiseOrReturn<T> extends string ? \"string\" : UnwrapPromiseOrReturn<T> extends boolean ? \"boolean\" : UnwrapPromiseOrReturn<T> extends number ? \"number\" : UnwrapPromiseOrReturn<T> extends null ? \"null\" : UnwrapPromiseOrReturn<T> extends { type: string; } ? ({ type: string; } & UnwrapPromiseOrReturn<T>)[\"type\"] : never"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.TypeToString",
        "type": "Type",
        "label": "TypeToString",
        "tags": [],
        "description": [
          "\nThis can convert a type into a known Expression string representation of\nthat type. For example, `TypeToString<Datatable>` will resolve to `'datatable'`.\nThis allows Expression Functions to continue to specify their type in a\nsimple string format."
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 17
        },
        "signature": [
          "\"date\" | \"filter\" | ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.KnownTypeToString",
            "text": "KnownTypeToString"
          },
          "<T>"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.UnmappedTypeStrings",
        "type": "Type",
        "label": "UnmappedTypeStrings",
        "tags": [],
        "description": [
          "\nTypes used in Expressions that don't map to a primitive cleanly:\n\n`date` is typed as a number or string, and represents a date"
        ],
        "source": {
          "path": "src/plugins/expressions/common/types/common.ts",
          "lineNumber": 46
        },
        "signature": [
          "\"date\" | \"filter\""
        ],
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "tags": [],
        "id": "def-common.americanTypewriter",
        "type": "Object",
        "label": "americanTypewriter",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 42
        },
        "signature": [
          "{ label: \"American Typewriter\"; value: \"'American Typewriter', 'Courier New', Courier, Monaco, mono\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.arial",
        "type": "Object",
        "label": "arial",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 47
        },
        "signature": [
          "{ label: \"Arial\"; value: \"Arial, sans-serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.baskerville",
        "type": "Object",
        "label": "baskerville",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 49
        },
        "signature": [
          "{ label: \"Baskerville\"; value: \"Baskerville, Georgia, Garamond, 'Times New Roman', Times, serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.bookAntiqua",
        "type": "Object",
        "label": "bookAntiqua",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 54
        },
        "signature": [
          "{ label: \"Book Antiqua\"; value: \"'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.boolean",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.boolean.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
              "lineNumber": 16
            },
            "signature": [
              "\"boolean\""
            ]
          },
          {
            "id": "def-common.boolean.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.boolean.from.null",
                "type": "Function",
                "children": [],
                "signature": [
                  "() => false"
                ],
                "description": [],
                "label": "null",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
                  "lineNumber": 18
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.boolean.from.number",
                "type": "Function",
                "children": [
                  {
                    "type": "Any",
                    "label": "n",
                    "isRequired": true,
                    "signature": [
                      "any"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
                      "lineNumber": 19
                    }
                  }
                ],
                "signature": [
                  "(n: any) => boolean"
                ],
                "description": [],
                "label": "number",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
                  "lineNumber": 19
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.boolean.from.string",
                "type": "Function",
                "children": [
                  {
                    "type": "Any",
                    "label": "s",
                    "isRequired": true,
                    "signature": [
                      "any"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
                      "lineNumber": 20
                    }
                  }
                ],
                "signature": [
                  "(s: any) => boolean"
                ],
                "description": [],
                "label": "string",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
                  "lineNumber": 20
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
              "lineNumber": 17
            }
          },
          {
            "id": "def-common.boolean.to",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.boolean.to.render",
                "type": "Function",
                "children": [
                  {
                    "type": "boolean",
                    "label": "value",
                    "isRequired": true,
                    "signature": [
                      "boolean"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
                      "lineNumber": 23
                    }
                  }
                ],
                "signature": [
                  "(value: boolean) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: { text: string; }; }>"
                ],
                "description": [],
                "label": "render",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
                  "lineNumber": 23
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.boolean.to.datatable",
                "type": "Function",
                "children": [
                  {
                    "type": "boolean",
                    "label": "value",
                    "isRequired": true,
                    "signature": [
                      "boolean"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
                      "lineNumber": 31
                    }
                  }
                ],
                "signature": [
                  "(value: boolean) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "label": "datatable",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
                  "lineNumber": 31
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
              "lineNumber": 22
            }
          }
        ],
        "description": [],
        "label": "boolean",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/boolean.ts",
          "lineNumber": 15
        },
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.brushScript",
        "type": "Object",
        "label": "brushScript",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 59
        },
        "signature": [
          "{ label: \"Brush Script\"; value: \"'Brush Script MT', 'Comic Sans', sans-serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.chalkboard",
        "type": "Object",
        "label": "chalkboard",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 64
        },
        "signature": [
          "{ label: \"Chalkboard\"; value: \"Chalkboard, 'Comic Sans', sans-serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.clog",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.clog.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/clog.ts",
              "lineNumber": 14
            },
            "signature": [
              "\"clog\""
            ]
          },
          {
            "id": "def-common.clog.args",
            "type": "Object",
            "tags": [],
            "children": [],
            "description": [],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/clog.ts",
              "lineNumber": 15
            }
          },
          {
            "tags": [],
            "id": "def-common.clog.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/clog.ts",
              "lineNumber": 16
            }
          },
          {
            "id": "def-common.clog.fn",
            "type": "Function",
            "children": [
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/clog.ts",
                  "lineNumber": 17
                }
              }
            ],
            "signature": [
              "(input: unknown) => unknown"
            ],
            "description": [],
            "label": "fn",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/clog.ts",
              "lineNumber": 17
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "description": [],
        "label": "clog",
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/clog.ts",
          "lineNumber": 13
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.cumulativeSum",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.cumulativeSum.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
              "lineNumber": 56
            },
            "signature": [
              "\"cumulative_sum\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.cumulativeSum.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
              "lineNumber": 57
            },
            "signature": [
              "\"datatable\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.cumulativeSum.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
              "lineNumber": 59
            },
            "signature": [
              "\"datatable\"[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.cumulativeSum.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
              "lineNumber": 61
            }
          },
          {
            "id": "def-common.cumulativeSum.args",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.cumulativeSum.args.by",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.by.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 67
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.by.multi",
                    "type": "boolean",
                    "label": "multi",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 70
                    },
                    "signature": [
                      "true"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.by.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 71
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.by.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 72
                    },
                    "signature": [
                      "false"
                    ]
                  }
                ],
                "description": [],
                "label": "by",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                  "lineNumber": 66
                }
              },
              {
                "id": "def-common.cumulativeSum.args.inputColumnId",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.inputColumnId.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 75
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.inputColumnId.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 78
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.inputColumnId.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 79
                    },
                    "signature": [
                      "true"
                    ]
                  }
                ],
                "description": [],
                "label": "inputColumnId",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                  "lineNumber": 74
                }
              },
              {
                "id": "def-common.cumulativeSum.args.outputColumnId",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.outputColumnId.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 82
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.outputColumnId.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 85
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.outputColumnId.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 86
                    },
                    "signature": [
                      "true"
                    ]
                  }
                ],
                "description": [],
                "label": "outputColumnId",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                  "lineNumber": 81
                }
              },
              {
                "id": "def-common.cumulativeSum.args.outputColumnName",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.outputColumnName.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 89
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.outputColumnName.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 92
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.cumulativeSum.args.outputColumnName.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                      "lineNumber": 93
                    },
                    "signature": [
                      "false"
                    ]
                  }
                ],
                "description": [],
                "label": "outputColumnName",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                  "lineNumber": 88
                }
              }
            ],
            "description": [],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
              "lineNumber": 65
            }
          },
          {
            "id": "def-common.cumulativeSum.fn",
            "type": "Function",
            "label": "fn",
            "signature": [
              "(input: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              ", { by, inputColumnId, outputColumnId, outputColumnName }: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.CumulativeSumArgs",
                "text": "CumulativeSumArgs"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "input",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                  "lineNumber": 97
                }
              },
              {
                "type": "Object",
                "label": "{ by, inputColumnId, outputColumnId, outputColumnName }",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.CumulativeSumArgs",
                    "text": "CumulativeSumArgs"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
                  "lineNumber": 97
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
              "lineNumber": 97
            }
          }
        ],
        "description": [
          "\nCalculates the cumulative sum of a specified column in the data table.\n\nAlso supports multiple series in a single data table - use the `by` argument\nto specify the columns to split the calculation by.\nFor each unique combination of all `by` columns a separate cumulative sum will be calculated.\nThe order of rows won't be changed - this function is not modifying any existing columns, it's only\nadding the specified `outputColumnId` column to every row of the table without adding or removing rows.\n\nBehavior:\n* Will write the cumulative sum of `inputColumnId` into `outputColumnId`\n* If provided will use `outputColumnName` as name for the newly created column. Otherwise falls back to `outputColumnId`\n* Cumulative sums always start with 0, a cell will contain its own value plus the values of\n  all cells of the same series further up in the table.\n\nEdge cases:\n* Will return the input table if `inputColumnId` does not exist\n* Will throw an error if `outputColumnId` exists already in provided data table\n* If the row value contains `null` or `undefined`, it will be ignored and overwritten with the cumulative sum of\n  all cells of the same series further up in the table.\n* For all values besides `null` and `undefined`, the value will be cast to a number before it's added to the\n  cumulative sum of the current series - if this results in `NaN` (like in case of objects), all cells of the\n  current series will be set to `NaN`.\n* To determine separate series defined by the `by` columns, the values of these columns will be cast to strings\n  before comparison. If the values are objects, the return value of their `toString` method will be used for comparison.\n  Missing values (`null` and `undefined`) will be treated as empty strings."
        ],
        "label": "cumulativeSum",
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/cumulative_sum.ts",
          "lineNumber": 55
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.datatable",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.datatable.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 116
            },
            "signature": [
              "\"datatable\""
            ]
          },
          {
            "id": "def-common.datatable.validate",
            "type": "Function",
            "children": [
              {
                "type": "Any",
                "label": "table",
                "isRequired": true,
                "signature": [
                  "any"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
                  "lineNumber": 117
                }
              }
            ],
            "signature": [
              "(table: any) => void"
            ],
            "description": [],
            "label": "validate",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 117
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.datatable.serialize",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "table",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
                  "lineNumber": 127
                }
              }
            ],
            "signature": [
              "(table: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              ") => { rows: any[][]; type: \"datatable\"; columns: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DatatableColumn",
                "text": "DatatableColumn"
              },
              "[]; }"
            ],
            "description": [],
            "label": "serialize",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 127
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.datatable.deserialize",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "table",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.SerializedDatatable",
                    "text": "SerializedDatatable"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
                  "lineNumber": 136
                }
              }
            ],
            "signature": [
              "(table: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.SerializedDatatable",
                "text": "SerializedDatatable"
              },
              ") => { rows: _.Dictionary<string>[]; type: \"datatable\"; columns: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DatatableColumn",
                "text": "DatatableColumn"
              },
              "[]; }"
            ],
            "description": [],
            "label": "deserialize",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 136
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.datatable.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.datatable.from.null",
                "type": "Function",
                "children": [],
                "signature": [
                  "() => { type: \"datatable\"; meta: {}; rows: never[]; columns: never[]; }"
                ],
                "description": [],
                "label": "null",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
                  "lineNumber": 146
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.datatable.from.pointseries",
                "type": "Function",
                "children": [
                  {
                    "type": "CompoundType",
                    "label": "value",
                    "isRequired": true,
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.ExpressionValueBoxed",
                        "text": "ExpressionValueBoxed"
                      },
                      "<\"pointseries\", { columns: ",
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.PointSeriesColumns",
                        "text": "PointSeriesColumns"
                      },
                      "; rows: Record<string, any>[]; }>"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
                      "lineNumber": 152
                    }
                  }
                ],
                "signature": [
                  "(value: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"pointseries\", { columns: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.PointSeriesColumns",
                    "text": "PointSeriesColumns"
                  },
                  "; rows: Record<string, any>[]; }>) => { type: \"datatable\"; meta: {}; rows: Record<string, any>[]; columns: { id: string; name: string; meta: { type: \"string\" | \"number\"; }; }[]; }"
                ],
                "description": [],
                "label": "pointseries",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
                  "lineNumber": 152
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 145
            }
          },
          {
            "id": "def-common.datatable.to",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.datatable.to.render",
                "type": "Function",
                "children": [
                  {
                    "type": "Object",
                    "label": "table",
                    "isRequired": true,
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.Datatable",
                        "text": "Datatable"
                      }
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
                      "lineNumber": 162
                    }
                  }
                ],
                "signature": [
                  "(table: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  },
                  ") => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: RenderedDatatable; }>"
                ],
                "description": [],
                "label": "render",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
                  "lineNumber": 162
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.datatable.to.pointseries",
                "type": "Function",
                "children": [
                  {
                    "type": "Object",
                    "label": "table",
                    "isRequired": true,
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.Datatable",
                        "text": "Datatable"
                      }
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
                      "lineNumber": 172
                    }
                  }
                ],
                "signature": [
                  "(table: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  },
                  ") => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"pointseries\", { columns: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.PointSeriesColumns",
                    "text": "PointSeriesColumns"
                  },
                  "; rows: Record<string, any>[]; }>"
                ],
                "description": [],
                "label": "pointseries",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
                  "lineNumber": 172
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
              "lineNumber": 161
            }
          }
        ],
        "description": [],
        "label": "datatable",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/datatable.ts",
          "lineNumber": 115
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.defaultState",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "id": "def-common.defaultState.functions",
            "type": "Object",
            "tags": [],
            "children": [],
            "description": [],
            "label": "functions",
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 23
            }
          },
          {
            "id": "def-common.defaultState.types",
            "type": "Object",
            "tags": [],
            "children": [],
            "description": [],
            "label": "types",
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 24
            }
          },
          {
            "id": "def-common.defaultState.context",
            "type": "Object",
            "tags": [],
            "children": [],
            "description": [],
            "label": "context",
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 25
            }
          }
        ],
        "description": [],
        "label": "defaultState",
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 22
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.derivative",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.derivative.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
              "lineNumber": 57
            },
            "signature": [
              "\"derivative\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.derivative.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
              "lineNumber": 58
            },
            "signature": [
              "\"datatable\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.derivative.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
              "lineNumber": 60
            },
            "signature": [
              "\"datatable\"[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.derivative.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
              "lineNumber": 62
            }
          },
          {
            "id": "def-common.derivative.args",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.derivative.args.by",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.by.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 68
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.by.multi",
                    "type": "boolean",
                    "label": "multi",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 71
                    },
                    "signature": [
                      "true"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.by.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 72
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.by.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 73
                    },
                    "signature": [
                      "false"
                    ]
                  }
                ],
                "description": [],
                "label": "by",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                  "lineNumber": 67
                }
              },
              {
                "id": "def-common.derivative.args.inputColumnId",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.inputColumnId.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 76
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.inputColumnId.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 79
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.inputColumnId.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 80
                    },
                    "signature": [
                      "true"
                    ]
                  }
                ],
                "description": [],
                "label": "inputColumnId",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                  "lineNumber": 75
                }
              },
              {
                "id": "def-common.derivative.args.outputColumnId",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.outputColumnId.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 83
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.outputColumnId.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 86
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.outputColumnId.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 87
                    },
                    "signature": [
                      "true"
                    ]
                  }
                ],
                "description": [],
                "label": "outputColumnId",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                  "lineNumber": 82
                }
              },
              {
                "id": "def-common.derivative.args.outputColumnName",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.outputColumnName.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 90
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.outputColumnName.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 93
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.derivative.args.outputColumnName.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                      "lineNumber": 94
                    },
                    "signature": [
                      "false"
                    ]
                  }
                ],
                "description": [],
                "label": "outputColumnName",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                  "lineNumber": 89
                }
              }
            ],
            "description": [],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
              "lineNumber": 66
            }
          },
          {
            "id": "def-common.derivative.fn",
            "type": "Function",
            "label": "fn",
            "signature": [
              "(input: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              ", { by, inputColumnId, outputColumnId, outputColumnName }: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.DerivativeArgs",
                "text": "DerivativeArgs"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "input",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                  "lineNumber": 98
                }
              },
              {
                "type": "Object",
                "label": "{ by, inputColumnId, outputColumnId, outputColumnName }",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.DerivativeArgs",
                    "text": "DerivativeArgs"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
                  "lineNumber": 98
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
              "lineNumber": 98
            }
          }
        ],
        "description": [
          "\nCalculates the derivative of a specified column in the data table.\n\nAlso supports multiple series in a single data table - use the `by` argument\nto specify the columns to split the calculation by.\nFor each unique combination of all `by` columns a separate derivative will be calculated.\nThe order of rows won't be changed - this function is not modifying any existing columns, it's only\nadding the specified `outputColumnId` column to every row of the table without adding or removing rows.\n\nBehavior:\n* Will write the derivative of `inputColumnId` into `outputColumnId`\n* If provided will use `outputColumnName` as name for the newly created column. Otherwise falls back to `outputColumnId`\n* Derivative always start with an undefined value for the first row of a series, a cell will contain its own value minus the\n  value of the previous cell of the same series.\n\nEdge cases:\n* Will return the input table if `inputColumnId` does not exist\n* Will throw an error if `outputColumnId` exists already in provided data table\n* If there is no previous row of the current series with a non `null` or `undefined` value, the output cell of the current row\n  will be set to `undefined`.\n* If the row value contains `null` or `undefined`, it will be ignored and the output cell will be set to `undefined`\n* If the value of the previous row of the same series contains `null` or `undefined`, the output cell of the current row will be set to `undefined` as well\n* For all values besides `null` and `undefined`, the value will be cast to a number before it's used in the\n  calculation of the current series even if this results in `NaN` (like in case of objects).\n* To determine separate series defined by the `by` columns, the values of these columns will be cast to strings\n  before comparison. If the values are objects, the return value of their `toString` method will be used for comparison.\n  Missing values (`null` and `undefined`) will be treated as empty strings."
        ],
        "label": "derivative",
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/derivative.ts",
          "lineNumber": 56
        },
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.didot",
        "type": "Object",
        "label": "didot",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 69
        },
        "signature": [
          "{ label: \"Didot\"; value: \"Didot, Georgia, Garamond, 'Times New Roman', Times, serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.error",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.error.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
              "lineNumber": 36
            },
            "signature": [
              "\"error\""
            ]
          },
          {
            "id": "def-common.error.to",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.error.to.render",
                "type": "Function",
                "children": [
                  {
                    "type": "CompoundType",
                    "label": "input",
                    "isRequired": true,
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.ExpressionValueBoxed",
                        "text": "ExpressionValueBoxed"
                      },
                      "<\"error\", { error: ",
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.ErrorLike",
                        "text": "ErrorLike"
                      },
                      "; info?: ",
                      {
                        "pluginId": "kibanaUtils",
                        "scope": "common",
                        "docId": "kibKibanaUtilsPluginApi",
                        "section": "def-common.SerializableState",
                        "text": "SerializableState"
                      },
                      " | undefined; }>"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
                      "lineNumber": 38
                    }
                  }
                ],
                "signature": [
                  "(input: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"error\", { error: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ErrorLike",
                    "text": "ErrorLike"
                  },
                  "; info?: ",
                  {
                    "pluginId": "kibanaUtils",
                    "scope": "common",
                    "docId": "kibKibanaUtilsPluginApi",
                    "section": "def-common.SerializableState",
                    "text": "SerializableState"
                  },
                  " | undefined; }>) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: Pick<",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  }
                ],
                "description": [],
                "label": "render",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
                  "lineNumber": 38
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
              "lineNumber": 37
            }
          }
        ],
        "description": [],
        "label": "error",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/error.ts",
          "lineNumber": 35
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.executionPureTransitions",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "id": "def-common.executionPureTransitions.start",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutionState",
                    "text": "ExecutionState"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/container.ts",
                  "lineNumber": 57
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionState",
                "text": "ExecutionState"
              },
              "<any>) => () => { state: \"pending\"; ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              "; result?: any; error?: Error | undefined; functions: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">; types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">; context: Record<string, unknown>; }"
            ],
            "description": [],
            "label": "start",
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 57
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.executionPureTransitions.setResult",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutionState",
                    "text": "ExecutionState"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/container.ts",
                  "lineNumber": 61
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionState",
                "text": "ExecutionState"
              },
              "<any>) => (result: any) => { state: \"result\"; result: any; ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              "; error?: Error | undefined; functions: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">; types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">; context: Record<string, unknown>; }"
            ],
            "description": [],
            "label": "setResult",
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 61
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.executionPureTransitions.setError",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutionState",
                    "text": "ExecutionState"
                  },
                  "<any>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/execution/container.ts",
                  "lineNumber": 66
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionState",
                "text": "ExecutionState"
              },
              "<any>) => (error: Error) => { state: \"error\"; error: Error; ast: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionAstExpression",
                "text": "ExpressionAstExpression"
              },
              "; result?: any; functions: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">; types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">; context: Record<string, unknown>; }"
            ],
            "description": [],
            "label": "setError",
            "source": {
              "path": "src/plugins/expressions/common/execution/container.ts",
              "lineNumber": 66
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "description": [],
        "label": "executionPureTransitions",
        "source": {
          "path": "src/plugins/expressions/common/execution/container.ts",
          "lineNumber": 56
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.filter",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.filter.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/filter.ts",
              "lineNumber": 28
            },
            "signature": [
              "\"filter\""
            ]
          },
          {
            "id": "def-common.filter.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.filter.from.null",
                "type": "Function",
                "children": [],
                "signature": [
                  "() => { type: \"filter\"; filterType: string; meta: {}; and: never[]; }"
                ],
                "description": [],
                "label": "null",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/filter.ts",
                  "lineNumber": 30
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/filter.ts",
              "lineNumber": 29
            }
          }
        ],
        "description": [],
        "label": "filter",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/filter.ts",
          "lineNumber": 27
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.font",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.font.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
              "lineNumber": 47
            },
            "signature": [
              "\"font\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.font.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
              "lineNumber": 48
            },
            "signature": [
              "never[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.font.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
              "lineNumber": 49
            },
            "signature": [
              "\"style\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.font.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
              "lineNumber": 50
            }
          },
          {
            "tags": [],
            "id": "def-common.font.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
              "lineNumber": 53
            },
            "signature": [
              "\"null\"[]"
            ]
          },
          {
            "id": "def-common.font.args",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.font.args.align",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.font.args.align.default",
                    "type": "string",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 56
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.align.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 57
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.align.options",
                    "type": "Array",
                    "label": "options",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 60
                    },
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.TextAlignment",
                        "text": "TextAlignment"
                      },
                      "[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.align.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 61
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  }
                ],
                "description": [],
                "label": "align",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                  "lineNumber": 55
                }
              },
              {
                "id": "def-common.font.args.color",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.font.args.color.default",
                    "type": "string",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 64
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.color.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 65
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.color.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 68
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  }
                ],
                "description": [],
                "label": "color",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                  "lineNumber": 63
                }
              },
              {
                "id": "def-common.font.args.family",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.font.args.family.default",
                    "type": "string",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 71
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.family.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 72
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.family.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 78
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  }
                ],
                "description": [],
                "label": "family",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                  "lineNumber": 70
                }
              },
              {
                "id": "def-common.font.args.italic",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.font.args.italic.default",
                    "type": "string",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 81
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.italic.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 82
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.italic.options",
                    "type": "Array",
                    "label": "options",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 85
                    },
                    "signature": [
                      "boolean[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.italic.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 86
                    },
                    "signature": [
                      "\"boolean\"[]"
                    ]
                  }
                ],
                "description": [],
                "label": "italic",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                  "lineNumber": 80
                }
              },
              {
                "id": "def-common.font.args.lHeight",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.font.args.lHeight.default",
                    "type": "string",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 89
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.lHeight.aliases",
                    "type": "Array",
                    "label": "aliases",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 90
                    },
                    "signature": [
                      "string[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.lHeight.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 91
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.lHeight.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 94
                    },
                    "signature": [
                      "(\"number\" | \"null\")[]"
                    ]
                  }
                ],
                "description": [],
                "label": "lHeight",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                  "lineNumber": 88
                }
              },
              {
                "id": "def-common.font.args.size",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.font.args.size.default",
                    "type": "string",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 97
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.size.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 98
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.size.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 101
                    },
                    "signature": [
                      "\"number\"[]"
                    ]
                  }
                ],
                "description": [],
                "label": "size",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                  "lineNumber": 96
                }
              },
              {
                "id": "def-common.font.args.underline",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.font.args.underline.default",
                    "type": "string",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 104
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.underline.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 105
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.underline.options",
                    "type": "Array",
                    "label": "options",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 108
                    },
                    "signature": [
                      "boolean[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.underline.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 109
                    },
                    "signature": [
                      "\"boolean\"[]"
                    ]
                  }
                ],
                "description": [],
                "label": "underline",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                  "lineNumber": 103
                }
              },
              {
                "id": "def-common.font.args.weight",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.font.args.weight.default",
                    "type": "string",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 112
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.weight.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 113
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.weight.options",
                    "type": "Array",
                    "label": "options",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 123
                    },
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.FontWeight",
                        "text": "FontWeight"
                      },
                      "[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.font.args.weight.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                      "lineNumber": 124
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  }
                ],
                "description": [],
                "label": "weight",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                  "lineNumber": 111
                }
              }
            ],
            "description": [],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
              "lineNumber": 54
            }
          },
          {
            "id": "def-common.font.fn",
            "type": "Function",
            "children": [
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "null"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                  "lineNumber": 127
                }
              },
              {
                "type": "Object",
                "label": "args",
                "isRequired": true,
                "signature": [
                  "Arguments"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
                  "lineNumber": 127
                }
              }
            ],
            "signature": [
              "(input: null, args: Arguments) => { type: \"style\"; spec: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.CSSStyle",
                "text": "CSSStyle"
              },
              "; css: string; }"
            ],
            "description": [],
            "label": "fn",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
              "lineNumber": 127
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "description": [],
        "label": "font",
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/font.ts",
          "lineNumber": 46
        },
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.futura",
        "type": "Object",
        "label": "futura",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 74
        },
        "signature": [
          "{ label: \"Futura\"; value: \"Futura, Impact, Helvetica, Arial, sans-serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.gillSans",
        "type": "Object",
        "label": "gillSans",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 79
        },
        "signature": [
          "{ label: \"Gill Sans\"; value: \"'Gill Sans', 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.helveticaNeue",
        "type": "Object",
        "label": "helveticaNeue",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 85
        },
        "signature": [
          "{ label: \"Helvetica Neue\"; value: \"'Helvetica Neue', Helvetica, Arial, sans-serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.hoeflerText",
        "type": "Object",
        "label": "hoeflerText",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 90
        },
        "signature": [
          "{ label: \"Hoefler Text\"; value: \"'Hoefler Text', Garamond, Georgia, 'Times New Roman', Times, serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.image",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.image.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 21
            },
            "signature": [
              "\"image\""
            ]
          },
          {
            "id": "def-common.image.to",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.image.to.render",
                "type": "Function",
                "children": [
                  {
                    "type": "Object",
                    "label": "input",
                    "isRequired": true,
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.ExpressionImage",
                        "text": "ExpressionImage"
                      }
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
                      "lineNumber": 23
                    }
                  }
                ],
                "signature": [
                  "(input: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionImage",
                    "text": "ExpressionImage"
                  },
                  ") => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: Pick<",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionImage",
                    "text": "ExpressionImage"
                  },
                  ", \"dataurl\" | \"mode\">; }>"
                ],
                "description": [],
                "label": "render",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
                  "lineNumber": 23
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
              "lineNumber": 22
            }
          }
        ],
        "description": [],
        "label": "image",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/image.ts",
          "lineNumber": 20
        },
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.lucidaGrande",
        "type": "Object",
        "label": "lucidaGrande",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 95
        },
        "signature": [
          "{ label: \"Lucida Grande\"; value: \"'Lucida Grande', 'Lucida Sans Unicode', Lucida, Verdana, Helvetica, Arial, sans-serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.mapColumn",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.mapColumn.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 26
            },
            "signature": [
              "\"mapColumn\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.mapColumn.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 27
            },
            "signature": [
              "string[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.mapColumn.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 28
            },
            "signature": [
              "\"datatable\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.mapColumn.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 29
            },
            "signature": [
              "\"datatable\"[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.mapColumn.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 30
            }
          },
          {
            "id": "def-common.mapColumn.args",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.mapColumn.args.id",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.id.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 42
                    },
                    "signature": [
                      "(\"string\" | \"null\")[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.id.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 43
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.id.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 47
                    },
                    "signature": [
                      "false"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.id.default",
                    "type": "Uncategorized",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 48
                    },
                    "signature": [
                      "null"
                    ]
                  }
                ],
                "description": [],
                "label": "id",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                  "lineNumber": 41
                }
              },
              {
                "id": "def-common.mapColumn.args.name",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.name.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 51
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.name.aliases",
                    "type": "Array",
                    "label": "aliases",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 52
                    },
                    "signature": [
                      "string[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.name.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 53
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.name.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 56
                    },
                    "signature": [
                      "true"
                    ]
                  }
                ],
                "description": [],
                "label": "name",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                  "lineNumber": 50
                }
              },
              {
                "id": "def-common.mapColumn.args.expression",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.expression.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 59
                    },
                    "signature": [
                      "(\"boolean\" | \"string\" | \"number\" | \"null\")[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.expression.resolve",
                    "type": "boolean",
                    "label": "resolve",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 60
                    },
                    "signature": [
                      "false"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.expression.aliases",
                    "type": "Array",
                    "label": "aliases",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 61
                    },
                    "signature": [
                      "string[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.expression.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 62
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.expression.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 69
                    },
                    "signature": [
                      "true"
                    ]
                  }
                ],
                "description": [],
                "label": "expression",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                  "lineNumber": 58
                }
              },
              {
                "id": "def-common.mapColumn.args.copyMetaFrom",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.copyMetaFrom.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 72
                    },
                    "signature": [
                      "(\"string\" | \"null\")[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.copyMetaFrom.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 73
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.copyMetaFrom.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 77
                    },
                    "signature": [
                      "false"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.mapColumn.args.copyMetaFrom.default",
                    "type": "Uncategorized",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                      "lineNumber": 78
                    },
                    "signature": [
                      "null"
                    ]
                  }
                ],
                "description": [],
                "label": "copyMetaFrom",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                  "lineNumber": 71
                }
              }
            ],
            "description": [],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 40
            }
          },
          {
            "id": "def-common.mapColumn.fn",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "input",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                  "lineNumber": 81
                }
              },
              {
                "type": "Object",
                "label": "args",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.MapColumnArguments",
                    "text": "MapColumnArguments"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
                  "lineNumber": 81
                }
              }
            ],
            "signature": [
              "(input: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              ", args: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.MapColumnArguments",
                "text": "MapColumnArguments"
              },
              ") => Promise<",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              ">"
            ],
            "description": [],
            "label": "fn",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
              "lineNumber": 81
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "description": [],
        "label": "mapColumn",
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/map_column.ts",
          "lineNumber": 20
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.math",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.math.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
              "lineNumber": 85
            },
            "signature": [
              "\"math\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.math.type",
            "type": "Uncategorized",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
              "lineNumber": 86
            },
            "signature": [
              "undefined"
            ]
          },
          {
            "tags": [],
            "id": "def-common.math.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
              "lineNumber": 87
            },
            "signature": [
              "(\"number\" | \"datatable\")[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.math.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
              "lineNumber": 88
            }
          },
          {
            "id": "def-common.math.args",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.math.args.expression",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.math.args.expression.aliases",
                    "type": "Array",
                    "label": "aliases",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
                      "lineNumber": 103
                    },
                    "signature": [
                      "string[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.math.args.expression.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
                      "lineNumber": 104
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.math.args.expression.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
                      "lineNumber": 105
                    }
                  }
                ],
                "description": [],
                "label": "expression",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
                  "lineNumber": 102
                }
              },
              {
                "id": "def-common.math.args.onError",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.math.args.onError.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
                      "lineNumber": 114
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.math.args.onError.options",
                    "type": "Array",
                    "label": "options",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
                      "lineNumber": 115
                    },
                    "signature": [
                      "(\"null\" | \"false\" | \"zero\" | \"throw\")[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.math.args.onError.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
                      "lineNumber": 116
                    }
                  }
                ],
                "description": [],
                "label": "onError",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
                  "lineNumber": 113
                }
              }
            ],
            "description": [],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
              "lineNumber": 101
            }
          },
          {
            "id": "def-common.math.fn",
            "type": "Function",
            "children": [
              {
                "type": "CompoundType",
                "label": "input",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.MathInput",
                    "text": "MathInput"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
                  "lineNumber": 125
                }
              },
              {
                "type": "Object",
                "label": "args",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.MathArguments",
                    "text": "MathArguments"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
                  "lineNumber": 125
                }
              }
            ],
            "signature": [
              "(input: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.MathInput",
                "text": "MathInput"
              },
              ", args: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.MathArguments",
                "text": "MathArguments"
              },
              ") => number | false | null"
            ],
            "description": [],
            "label": "fn",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
              "lineNumber": 125
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "description": [],
        "label": "math",
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/math.ts",
          "lineNumber": 79
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.movingAverage",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.movingAverage.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 55
            },
            "signature": [
              "\"moving_average\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.movingAverage.type",
            "type": "string",
            "label": "type",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 56
            },
            "signature": [
              "\"datatable\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.movingAverage.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 58
            },
            "signature": [
              "\"datatable\"[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.movingAverage.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 60
            }
          },
          {
            "id": "def-common.movingAverage.args",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.movingAverage.args.by",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.by.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 66
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.by.multi",
                    "type": "boolean",
                    "label": "multi",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 69
                    },
                    "signature": [
                      "true"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.by.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 70
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.by.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 71
                    },
                    "signature": [
                      "false"
                    ]
                  }
                ],
                "description": [],
                "label": "by",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                  "lineNumber": 65
                }
              },
              {
                "id": "def-common.movingAverage.args.inputColumnId",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.inputColumnId.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 74
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.inputColumnId.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 77
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.inputColumnId.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 78
                    },
                    "signature": [
                      "true"
                    ]
                  }
                ],
                "description": [],
                "label": "inputColumnId",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                  "lineNumber": 73
                }
              },
              {
                "id": "def-common.movingAverage.args.outputColumnId",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.outputColumnId.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 81
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.outputColumnId.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 84
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.outputColumnId.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 85
                    },
                    "signature": [
                      "true"
                    ]
                  }
                ],
                "description": [],
                "label": "outputColumnId",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                  "lineNumber": 80
                }
              },
              {
                "id": "def-common.movingAverage.args.outputColumnName",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.outputColumnName.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 88
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.outputColumnName.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 91
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.outputColumnName.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 92
                    },
                    "signature": [
                      "false"
                    ]
                  }
                ],
                "description": [],
                "label": "outputColumnName",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                  "lineNumber": 87
                }
              },
              {
                "id": "def-common.movingAverage.args.window",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.window.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 95
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.window.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 98
                    },
                    "signature": [
                      "\"number\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.movingAverage.args.window.default",
                    "type": "number",
                    "label": "default",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                      "lineNumber": 99
                    }
                  }
                ],
                "description": [],
                "label": "window",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                  "lineNumber": 94
                }
              }
            ],
            "description": [],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 64
            }
          },
          {
            "id": "def-common.movingAverage.fn",
            "type": "Function",
            "label": "fn",
            "signature": [
              "(input: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              },
              ", { by, inputColumnId, outputColumnId, outputColumnName, window }: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.MovingAverageArgs",
                "text": "MovingAverageArgs"
              },
              ") => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.Datatable",
                "text": "Datatable"
              }
            ],
            "description": [],
            "children": [
              {
                "type": "Object",
                "label": "input",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                  "lineNumber": 103
                }
              },
              {
                "type": "Object",
                "label": "{ by, inputColumnId, outputColumnId, outputColumnName, window }",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.MovingAverageArgs",
                    "text": "MovingAverageArgs"
                  }
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
                  "lineNumber": 103
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
              "lineNumber": 103
            }
          }
        ],
        "description": [
          "\nCalculates the moving average of a specified column in the data table.\n\nAlso supports multiple series in a single data table - use the `by` argument\nto specify the columns to split the calculation by.\nFor each unique combination of all `by` columns a separate moving average will be calculated.\nThe order of rows won't be changed - this function is not modifying any existing columns, it's only\nadding the specified `outputColumnId` column to every row of the table without adding or removing rows.\n\nBehavior:\n* Will write the moving average of `inputColumnId` into `outputColumnId`\n* If provided will use `outputColumnName` as name for the newly created column. Otherwise falls back to `outputColumnId`\n* Moving average always starts with an undefined value for the first row of a series. Each next cell will contain sum of the last\n* [window] of values divided by [window] excluding the current bucket.\nIf either of window edges moves outside the borders of data series, the window shrinks to include available values only.\n\nEdge cases:\n* Will return the input table if `inputColumnId` does not exist\n* Will throw an error if `outputColumnId` exists already in provided data table\n* If null or undefined value is encountered, skip the current row and do not change the window\n* For all values besides `null` and `undefined`, the value will be cast to a number before it's used in the\n  calculation of the current series even if this results in `NaN` (like in case of objects).\n* To determine separate series defined by the `by` columns, the values of these columns will be cast to strings\n  before comparison. If the values are objects, the return value of their `toString` method will be used for comparison."
        ],
        "label": "movingAverage",
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/moving_average.ts",
          "lineNumber": 54
        },
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.myriad",
        "type": "Object",
        "label": "myriad",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 100
        },
        "signature": [
          "{ label: \"Myriad\"; value: \"Myriad, Helvetica, Arial, sans-serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.nullType",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.nullType.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/null.ts",
              "lineNumber": 14
            },
            "signature": [
              "\"null\""
            ]
          },
          {
            "id": "def-common.nullType.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.nullType.from.'*'",
                "type": "Function",
                "children": [],
                "signature": [
                  "() => null"
                ],
                "description": [],
                "label": "'*'",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/null.ts",
                  "lineNumber": 16
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/null.ts",
              "lineNumber": 15
            }
          }
        ],
        "description": [],
        "label": "nullType",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/null.ts",
          "lineNumber": 13
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.num",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.num.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
              "lineNumber": 22
            },
            "signature": [
              "\"num\""
            ]
          },
          {
            "id": "def-common.num.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.num.from.null",
                "type": "Function",
                "children": [],
                "signature": [
                  "() => { type: \"num\"; value: number; }"
                ],
                "description": [],
                "label": "null",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                  "lineNumber": 24
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.num.from.boolean",
                "type": "Function",
                "children": [
                  {
                    "type": "Any",
                    "label": "b",
                    "isRequired": true,
                    "signature": [
                      "any"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                      "lineNumber": 28
                    }
                  }
                ],
                "signature": [
                  "(b: any) => { type: \"num\"; value: number; }"
                ],
                "description": [],
                "label": "boolean",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                  "lineNumber": 28
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.num.from.string",
                "type": "Function",
                "children": [
                  {
                    "type": "Any",
                    "label": "n",
                    "isRequired": true,
                    "signature": [
                      "any"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                      "lineNumber": 32
                    }
                  }
                ],
                "signature": [
                  "(n: any) => { type: \"num\"; value: number; }"
                ],
                "description": [],
                "label": "string",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                  "lineNumber": 32
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.num.from.'*'",
                "type": "Function",
                "children": [
                  {
                    "type": "Any",
                    "label": "value",
                    "isRequired": true,
                    "signature": [
                      "any"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                      "lineNumber": 49
                    }
                  }
                ],
                "signature": [
                  "(value: any) => { type: \"num\"; value: number; }"
                ],
                "description": [],
                "label": "'*'",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                  "lineNumber": 49
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
              "lineNumber": 23
            }
          },
          {
            "id": "def-common.num.to",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.num.to.render",
                "type": "Function",
                "children": [
                  {
                    "type": "CompoundType",
                    "label": "{ value }",
                    "isRequired": true,
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.ExpressionValueBoxed",
                        "text": "ExpressionValueBoxed"
                      },
                      "<\"num\", { value: number; }>"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                      "lineNumber": 55
                    }
                  }
                ],
                "signature": [
                  "({ value }: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"num\", { value: number; }>) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: { text: string; }; }>"
                ],
                "description": [],
                "label": "render",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                  "lineNumber": 55
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.num.to.datatable",
                "type": "Function",
                "children": [
                  {
                    "type": "CompoundType",
                    "label": "{ value }",
                    "isRequired": true,
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.ExpressionValueBoxed",
                        "text": "ExpressionValueBoxed"
                      },
                      "<\"num\", { value: number; }>"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                      "lineNumber": 63
                    }
                  }
                ],
                "signature": [
                  "({ value }: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"num\", { value: number; }>) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "label": "datatable",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
                  "lineNumber": 63
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
              "lineNumber": 54
            }
          }
        ],
        "description": [],
        "label": "num",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/num.ts",
          "lineNumber": 21
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.number",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.number.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
              "lineNumber": 17
            },
            "signature": [
              "\"number\""
            ]
          },
          {
            "id": "def-common.number.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.number.from.null",
                "type": "Function",
                "children": [],
                "signature": [
                  "() => number"
                ],
                "description": [],
                "label": "null",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
                  "lineNumber": 19
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.number.from.boolean",
                "type": "Function",
                "children": [
                  {
                    "type": "Any",
                    "label": "b",
                    "isRequired": true,
                    "signature": [
                      "any"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
                      "lineNumber": 20
                    }
                  }
                ],
                "signature": [
                  "(b: any) => number"
                ],
                "description": [],
                "label": "boolean",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
                  "lineNumber": 20
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.number.from.string",
                "type": "Function",
                "children": [
                  {
                    "type": "Any",
                    "label": "n",
                    "isRequired": true,
                    "signature": [
                      "any"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
                      "lineNumber": 21
                    }
                  }
                ],
                "signature": [
                  "(n: any) => number"
                ],
                "description": [],
                "label": "string",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
                  "lineNumber": 21
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
              "lineNumber": 18
            }
          },
          {
            "id": "def-common.number.to",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.number.to.render",
                "type": "Function",
                "children": [
                  {
                    "type": "number",
                    "label": "value",
                    "isRequired": true,
                    "signature": [
                      "number"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
                      "lineNumber": 37
                    }
                  }
                ],
                "signature": [
                  "(value: number) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: { text: string; }; }>"
                ],
                "description": [],
                "label": "render",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
                  "lineNumber": 37
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.number.to.datatable",
                "type": "Function",
                "children": [
                  {
                    "type": "number",
                    "label": "value",
                    "isRequired": true,
                    "signature": [
                      "number"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
                      "lineNumber": 45
                    }
                  }
                ],
                "signature": [
                  "(value: number) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "label": "datatable",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
                  "lineNumber": 45
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
              "lineNumber": 36
            }
          }
        ],
        "description": [],
        "label": "number",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/number.ts",
          "lineNumber": 16
        },
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.openSans",
        "type": "Object",
        "label": "openSans",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 105
        },
        "signature": [
          "{ label: \"Open Sans\"; value: \"'Open Sans', Helvetica, Arial, sans-serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.optima",
        "type": "Object",
        "label": "optima",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 110
        },
        "signature": [
          "{ label: \"Optima\"; value: \"Optima, 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Helvetica, Arial, sans-serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "tags": [],
        "id": "def-common.palatino",
        "type": "Object",
        "label": "palatino",
        "description": [],
        "source": {
          "path": "src/plugins/expressions/common/fonts.ts",
          "lineNumber": 115
        },
        "signature": [
          "{ label: \"Palatino\"; value: \"Palatino, 'Book Antiqua', Georgia, Garamond, 'Times New Roman', Times, serif\"; }"
        ],
        "initialIsOpen": false
      },
      {
        "id": "def-common.pointseries",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.pointseries.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 48
            },
            "signature": [
              "\"pointseries\""
            ]
          },
          {
            "id": "def-common.pointseries.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.pointseries.from.null",
                "type": "Function",
                "children": [],
                "signature": [
                  "() => { type: \"pointseries\"; rows: never[]; columns: {}; }"
                ],
                "description": [],
                "label": "null",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
                  "lineNumber": 50
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 49
            }
          },
          {
            "id": "def-common.pointseries.to",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.pointseries.to.render",
                "type": "Function",
                "children": [
                  {
                    "type": "CompoundType",
                    "label": "pseries",
                    "isRequired": true,
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.ExpressionValueBoxed",
                        "text": "ExpressionValueBoxed"
                      },
                      "<\"pointseries\", { columns: ",
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.PointSeriesColumns",
                        "text": "PointSeriesColumns"
                      },
                      "; rows: Record<string, any>[]; }>"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
                      "lineNumber": 60
                    }
                  },
                  {
                    "type": "Object",
                    "label": "types",
                    "isRequired": true,
                    "signature": [
                      "Record<string, any>"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
                      "lineNumber": 61
                    }
                  }
                ],
                "signature": [
                  "(pseries: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"pointseries\", { columns: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.PointSeriesColumns",
                    "text": "PointSeriesColumns"
                  },
                  "; rows: Record<string, any>[]; }>, types: Record<string, any>) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: { datatable: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  },
                  "; showHeader: boolean; }; }>"
                ],
                "description": [],
                "label": "render",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
                  "lineNumber": 59
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
              "lineNumber": 58
            }
          }
        ],
        "description": [],
        "label": "pointseries",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/pointseries.ts",
          "lineNumber": 47
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.pureSelectors",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "id": "def-common.pureSelectors.getFunction",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Record<string, unknown>>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/container.ts",
                  "lineNumber": 50
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => (id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              }
            ],
            "description": [],
            "label": "getFunction",
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 50
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.pureSelectors.getType",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Record<string, unknown>>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/container.ts",
                  "lineNumber": 51
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => (id: string) => ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              }
            ],
            "description": [],
            "label": "getType",
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 51
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.pureSelectors.getContext",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "{ context }",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Record<string, unknown>>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/container.ts",
                  "lineNumber": 52
                }
              }
            ],
            "signature": [
              "({ context }: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => () => Record<string, unknown>"
            ],
            "description": [],
            "label": "getContext",
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 52
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "description": [],
        "label": "pureSelectors",
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 49
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.pureTransitions",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "id": "def-common.pureTransitions.addFunction",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Record<string, unknown>>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/container.ts",
                  "lineNumber": 35
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => (fn: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ") => { functions: { [x: string]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              "; }; types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">; context: Record<string, unknown>; }"
            ],
            "description": [],
            "label": "addFunction",
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 35
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.pureTransitions.addType",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Record<string, unknown>>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/container.ts",
                  "lineNumber": 36
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => (type: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ") => { types: { [x: string]: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              "; }; functions: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">; context: Record<string, unknown>; }"
            ],
            "description": [],
            "label": "addType",
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 36
            },
            "tags": [],
            "returnComment": []
          },
          {
            "id": "def-common.pureTransitions.extendContext",
            "type": "Function",
            "children": [
              {
                "type": "Object",
                "label": "state",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutorState",
                    "text": "ExecutorState"
                  },
                  "<Record<string, unknown>>"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/executor/container.ts",
                  "lineNumber": 37
                }
              }
            ],
            "signature": [
              "(state: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutorState",
                "text": "ExecutorState"
              },
              "<Record<string, unknown>>) => (extraContext: Record<string, unknown>) => { context: { [x: string]: unknown; }; functions: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionFunction",
                "text": "ExpressionFunction"
              },
              ">; types: Record<string, ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExpressionType",
                "text": "ExpressionType"
              },
              ">; }"
            ],
            "description": [],
            "label": "extendContext",
            "source": {
              "path": "src/plugins/expressions/common/executor/container.ts",
              "lineNumber": 37
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "description": [],
        "label": "pureTransitions",
        "source": {
          "path": "src/plugins/expressions/common/executor/container.ts",
          "lineNumber": 34
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.range",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.range.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 22
            },
            "signature": [
              "\"range\""
            ]
          },
          {
            "id": "def-common.range.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.range.from.null",
                "type": "Function",
                "children": [],
                "signature": [
                  "() => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Range",
                    "text": "Range"
                  }
                ],
                "description": [],
                "label": "null",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
                  "lineNumber": 24
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 23
            }
          },
          {
            "id": "def-common.range.to",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.range.to.render",
                "type": "Function",
                "children": [
                  {
                    "type": "Object",
                    "label": "value",
                    "isRequired": true,
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.Range",
                        "text": "Range"
                      }
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
                      "lineNumber": 33
                    }
                  }
                ],
                "signature": [
                  "(value: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Range",
                    "text": "Range"
                  },
                  ") => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: { text: string; }; }>"
                ],
                "description": [],
                "label": "render",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
                  "lineNumber": 33
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
              "lineNumber": 32
            }
          }
        ],
        "description": [],
        "label": "range",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/range.ts",
          "lineNumber": 21
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.render",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.render.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
              "lineNumber": 32
            },
            "signature": [
              "\"render\""
            ]
          },
          {
            "id": "def-common.render.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.render.from.'*'",
                "type": "Function",
                "children": [
                  {
                    "type": "Uncategorized",
                    "label": "v",
                    "isRequired": true,
                    "signature": [
                      "T"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
                      "lineNumber": 34
                    }
                  }
                ],
                "signature": [
                  "<T>(v: T) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: T; }>"
                ],
                "description": [],
                "label": "'*'",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
                  "lineNumber": 34
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
              "lineNumber": 33
            }
          }
        ],
        "description": [],
        "label": "render",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/render.ts",
          "lineNumber": 31
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.shape",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.shape.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/shape.ts",
              "lineNumber": 15
            },
            "signature": [
              "\"shape\""
            ]
          },
          {
            "id": "def-common.shape.to",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.shape.to.render",
                "type": "Function",
                "children": [
                  {
                    "type": "CompoundType",
                    "label": "input",
                    "isRequired": true,
                    "signature": [
                      {
                        "pluginId": "expressions",
                        "scope": "common",
                        "docId": "kibExpressionsPluginApi",
                        "section": "def-common.ExpressionValueBoxed",
                        "text": "ExpressionValueBoxed"
                      },
                      "<\"render\", { as: string; value: any; }>"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/shape.ts",
                      "lineNumber": 17
                    }
                  }
                ],
                "signature": [
                  "(input: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: any; }>) => { type: string; as: string; value: ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: any; }>; }"
                ],
                "description": [],
                "label": "render",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/shape.ts",
                  "lineNumber": 17
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/shape.ts",
              "lineNumber": 16
            }
          }
        ],
        "description": [],
        "label": "shape",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/shape.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.string",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.string.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
              "lineNumber": 16
            },
            "signature": [
              "\"string\""
            ]
          },
          {
            "id": "def-common.string.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.string.from.null",
                "type": "Function",
                "children": [],
                "signature": [
                  "() => string"
                ],
                "description": [],
                "label": "null",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
                  "lineNumber": 18
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.string.from.boolean",
                "type": "Function",
                "children": [
                  {
                    "type": "Any",
                    "label": "b",
                    "isRequired": true,
                    "signature": [
                      "any"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
                      "lineNumber": 19
                    }
                  }
                ],
                "signature": [
                  "(b: any) => string"
                ],
                "description": [],
                "label": "boolean",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
                  "lineNumber": 19
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.string.from.number",
                "type": "Function",
                "children": [
                  {
                    "type": "Any",
                    "label": "n",
                    "isRequired": true,
                    "signature": [
                      "any"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
                      "lineNumber": 20
                    }
                  }
                ],
                "signature": [
                  "(n: any) => string"
                ],
                "description": [],
                "label": "number",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
                  "lineNumber": 20
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
              "lineNumber": 17
            }
          },
          {
            "id": "def-common.string.to",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.string.to.render",
                "type": "Function",
                "children": [
                  {
                    "type": "Uncategorized",
                    "label": "text",
                    "isRequired": true,
                    "signature": [
                      "T"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
                      "lineNumber": 23
                    }
                  }
                ],
                "signature": [
                  "<T>(text: T) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExpressionValueBoxed",
                    "text": "ExpressionValueBoxed"
                  },
                  "<\"render\", { as: string; value: { text: T; }; }>"
                ],
                "description": [],
                "label": "render",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
                  "lineNumber": 23
                },
                "tags": [],
                "returnComment": []
              },
              {
                "id": "def-common.string.to.datatable",
                "type": "Function",
                "children": [
                  {
                    "type": "string",
                    "label": "value",
                    "isRequired": true,
                    "signature": [
                      "string"
                    ],
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
                      "lineNumber": 30
                    }
                  }
                ],
                "signature": [
                  "(value: string) => ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.Datatable",
                    "text": "Datatable"
                  }
                ],
                "description": [],
                "label": "datatable",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
                  "lineNumber": 30
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "to",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
              "lineNumber": 22
            }
          }
        ],
        "description": [],
        "label": "string",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/string.ts",
          "lineNumber": 15
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.style",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.style.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/style.ts",
              "lineNumber": 15
            },
            "signature": [
              "\"style\""
            ]
          },
          {
            "id": "def-common.style.from",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.style.from.null",
                "type": "Function",
                "children": [],
                "signature": [
                  "() => { type: \"style\"; spec: {}; css: string; }"
                ],
                "description": [],
                "label": "null",
                "source": {
                  "path": "src/plugins/expressions/common/expression_types/specs/style.ts",
                  "lineNumber": 17
                },
                "tags": [],
                "returnComment": []
              }
            ],
            "description": [],
            "label": "from",
            "source": {
              "path": "src/plugins/expressions/common/expression_types/specs/style.ts",
              "lineNumber": 16
            }
          }
        ],
        "description": [],
        "label": "style",
        "source": {
          "path": "src/plugins/expressions/common/expression_types/specs/style.ts",
          "lineNumber": 14
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.theme",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.theme.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
              "lineNumber": 28
            },
            "signature": [
              "\"theme\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.theme.aliases",
            "type": "Array",
            "label": "aliases",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
              "lineNumber": 29
            },
            "signature": [
              "never[]"
            ]
          },
          {
            "tags": [],
            "id": "def-common.theme.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
              "lineNumber": 30
            }
          },
          {
            "tags": [],
            "id": "def-common.theme.inputTypes",
            "type": "Array",
            "label": "inputTypes",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
              "lineNumber": 33
            },
            "signature": [
              "\"null\"[]"
            ]
          },
          {
            "id": "def-common.theme.args",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.theme.args.variable",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.theme.args.variable.aliases",
                    "type": "Array",
                    "label": "aliases",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
                      "lineNumber": 36
                    },
                    "signature": [
                      "string[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.theme.args.variable.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
                      "lineNumber": 37
                    }
                  },
                  {
                    "tags": [],
                    "id": "def-common.theme.args.variable.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
                      "lineNumber": 40
                    },
                    "signature": [
                      "true"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.theme.args.variable.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
                      "lineNumber": 41
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  }
                ],
                "description": [],
                "label": "variable",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
                  "lineNumber": 35
                }
              },
              {
                "id": "def-common.theme.args.default",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.theme.args.default.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
                      "lineNumber": 44
                    }
                  }
                ],
                "description": [],
                "label": "default",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
                  "lineNumber": 43
                }
              }
            ],
            "description": [],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
              "lineNumber": 34
            }
          },
          {
            "id": "def-common.theme.fn",
            "type": "Function",
            "children": [
              {
                "type": "Uncategorized",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "null"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
                  "lineNumber": 49
                }
              },
              {
                "type": "Object",
                "label": "args",
                "isRequired": true,
                "signature": [
                  "Arguments"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
                  "lineNumber": 49
                }
              },
              {
                "type": "Object",
                "label": "handlers",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutionContext",
                    "text": "ExecutionContext"
                  },
                  "<",
                  {
                    "pluginId": "inspector",
                    "scope": "common",
                    "docId": "kibInspectorPluginApi",
                    "section": "def-common.Adapters",
                    "text": "Adapters"
                  },
                  ", ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.SerializableState",
                    "text": "SerializableState"
                  },
                  ">"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
                  "lineNumber": 49
                }
              }
            ],
            "signature": [
              "(input: null, args: Arguments, handlers: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContext",
                "text": "ExecutionContext"
              },
              "<",
              {
                "pluginId": "inspector",
                "scope": "common",
                "docId": "kibInspectorPluginApi",
                "section": "def-common.Adapters",
                "text": "Adapters"
              },
              ", ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ">) => any"
            ],
            "description": [],
            "label": "fn",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
              "lineNumber": 49
            },
            "tags": [],
            "returnComment": []
          }
        ],
        "description": [],
        "label": "theme",
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/theme.ts",
          "lineNumber": 27
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.variable",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.variable.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
              "lineNumber": 24
            },
            "signature": [
              "\"var\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.variable.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
              "lineNumber": 25
            }
          },
          {
            "id": "def-common.variable.args",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.variable.args.name",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.variable.args.name.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
                      "lineNumber": 30
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.variable.args.name.aliases",
                    "type": "Array",
                    "label": "aliases",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
                      "lineNumber": 31
                    },
                    "signature": [
                      "string[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.variable.args.name.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
                      "lineNumber": 32
                    },
                    "signature": [
                      "true"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.variable.args.name.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
                      "lineNumber": 33
                    }
                  }
                ],
                "description": [],
                "label": "name",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
                  "lineNumber": 29
                }
              }
            ],
            "description": [],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
              "lineNumber": 28
            }
          },
          {
            "id": "def-common.variable.fn",
            "type": "Function",
            "label": "fn",
            "signature": [
              "(input: unknown, args: Arguments, context: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContext",
                "text": "ExecutionContext"
              },
              "<",
              {
                "pluginId": "inspector",
                "scope": "common",
                "docId": "kibInspectorPluginApi",
                "section": "def-common.Adapters",
                "text": "Adapters"
              },
              ", ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ">) => any"
            ],
            "description": [],
            "children": [
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
                  "lineNumber": 38
                }
              },
              {
                "type": "Object",
                "label": "args",
                "isRequired": true,
                "signature": [
                  "Arguments"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
                  "lineNumber": 38
                }
              },
              {
                "type": "Object",
                "label": "context",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutionContext",
                    "text": "ExecutionContext"
                  },
                  "<",
                  {
                    "pluginId": "inspector",
                    "scope": "common",
                    "docId": "kibInspectorPluginApi",
                    "section": "def-common.Adapters",
                    "text": "Adapters"
                  },
                  ", ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.SerializableState",
                    "text": "SerializableState"
                  },
                  ">"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
                  "lineNumber": 38
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
              "lineNumber": 38
            }
          }
        ],
        "description": [],
        "label": "variable",
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/var.ts",
          "lineNumber": 23
        },
        "initialIsOpen": false
      },
      {
        "id": "def-common.variableSet",
        "type": "Object",
        "tags": [],
        "children": [
          {
            "tags": [],
            "id": "def-common.variableSet.name",
            "type": "string",
            "label": "name",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
              "lineNumber": 25
            },
            "signature": [
              "\"var_set\""
            ]
          },
          {
            "tags": [],
            "id": "def-common.variableSet.help",
            "type": "string",
            "label": "help",
            "description": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
              "lineNumber": 26
            }
          },
          {
            "id": "def-common.variableSet.args",
            "type": "Object",
            "tags": [],
            "children": [
              {
                "id": "def-common.variableSet.args.name",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.variableSet.args.name.types",
                    "type": "Array",
                    "label": "types",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                      "lineNumber": 31
                    },
                    "signature": [
                      "\"string\"[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.variableSet.args.name.aliases",
                    "type": "Array",
                    "label": "aliases",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                      "lineNumber": 32
                    },
                    "signature": [
                      "string[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.variableSet.args.name.required",
                    "type": "boolean",
                    "label": "required",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                      "lineNumber": 33
                    },
                    "signature": [
                      "true"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.variableSet.args.name.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                      "lineNumber": 34
                    }
                  }
                ],
                "description": [],
                "label": "name",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                  "lineNumber": 30
                }
              },
              {
                "id": "def-common.variableSet.args.value",
                "type": "Object",
                "tags": [],
                "children": [
                  {
                    "tags": [],
                    "id": "def-common.variableSet.args.value.aliases",
                    "type": "Array",
                    "label": "aliases",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                      "lineNumber": 39
                    },
                    "signature": [
                      "string[]"
                    ]
                  },
                  {
                    "tags": [],
                    "id": "def-common.variableSet.args.value.help",
                    "type": "string",
                    "label": "help",
                    "description": [],
                    "source": {
                      "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                      "lineNumber": 40
                    }
                  }
                ],
                "description": [],
                "label": "value",
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                  "lineNumber": 38
                }
              }
            ],
            "description": [],
            "label": "args",
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
              "lineNumber": 29
            }
          },
          {
            "id": "def-common.variableSet.fn",
            "type": "Function",
            "label": "fn",
            "signature": [
              "(input: unknown, args: Arguments, context: ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.ExecutionContext",
                "text": "ExecutionContext"
              },
              "<",
              {
                "pluginId": "inspector",
                "scope": "common",
                "docId": "kibInspectorPluginApi",
                "section": "def-common.Adapters",
                "text": "Adapters"
              },
              ", ",
              {
                "pluginId": "expressions",
                "scope": "common",
                "docId": "kibExpressionsPluginApi",
                "section": "def-common.SerializableState",
                "text": "SerializableState"
              },
              ">) => unknown"
            ],
            "description": [],
            "children": [
              {
                "type": "Unknown",
                "label": "input",
                "isRequired": true,
                "signature": [
                  "unknown"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                  "lineNumber": 46
                }
              },
              {
                "type": "Object",
                "label": "args",
                "isRequired": true,
                "signature": [
                  "Arguments"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                  "lineNumber": 46
                }
              },
              {
                "type": "Object",
                "label": "context",
                "isRequired": true,
                "signature": [
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.ExecutionContext",
                    "text": "ExecutionContext"
                  },
                  "<",
                  {
                    "pluginId": "inspector",
                    "scope": "common",
                    "docId": "kibInspectorPluginApi",
                    "section": "def-common.Adapters",
                    "text": "Adapters"
                  },
                  ", ",
                  {
                    "pluginId": "expressions",
                    "scope": "common",
                    "docId": "kibExpressionsPluginApi",
                    "section": "def-common.SerializableState",
                    "text": "SerializableState"
                  },
                  ">"
                ],
                "description": [],
                "source": {
                  "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
                  "lineNumber": 46
                }
              }
            ],
            "tags": [],
            "returnComment": [],
            "source": {
              "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
              "lineNumber": 46
            }
          }
        ],
        "description": [],
        "label": "variableSet",
        "source": {
          "path": "src/plugins/expressions/common/expression_functions/specs/var_set.ts",
          "lineNumber": 24
        },
        "initialIsOpen": false
      }
    ]
  }
}