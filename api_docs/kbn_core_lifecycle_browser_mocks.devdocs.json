{
  "id": "@kbn/core-lifecycle-browser-mocks",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": [
      {
        "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
        "id": "def-common.coreLifecycleMock",
        "type": "Object",
        "tags": [],
        "label": "coreLifecycleMock",
        "description": [],
        "path": "packages/core/lifecycle/core-lifecycle-browser-mocks/src/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
            "id": "def-common.coreLifecycleMock.createCoreSetup",
            "type": "Function",
            "tags": [],
            "label": "createCoreSetup",
            "description": [],
            "signature": [
              "({ basePath, pluginStartDeps, pluginStartContract, }?: { basePath?: string | undefined; pluginStartDeps?: object | undefined; pluginStartContract?: any; }) => { analytics: jest.Mocked<",
              {
                "pluginId": "@kbn/core-analytics-browser",
                "scope": "common",
                "docId": "kibKbnCoreAnalyticsBrowserPluginApi",
                "section": "def-common.AnalyticsServiceSetup",
                "text": "AnalyticsServiceSetup"
              },
              ">; application: jest.Mocked<",
              {
                "pluginId": "@kbn/core-application-browser",
                "scope": "common",
                "docId": "kibKbnCoreApplicationBrowserPluginApi",
                "section": "def-common.ApplicationSetup",
                "text": "ApplicationSetup"
              },
              ">; docLinks: jest.Mock<any, any>; executionContext: jest.Mocked<",
              {
                "pluginId": "@kbn/core-execution-context-browser",
                "scope": "common",
                "docId": "kibKbnCoreExecutionContextBrowserPluginApi",
                "section": "def-common.ExecutionContextSetup",
                "text": "ExecutionContextSetup"
              },
              ">; fatalErrors: jest.Mocked<",
              {
                "pluginId": "@kbn/core-fatal-errors-browser",
                "scope": "common",
                "docId": "kibKbnCoreFatalErrorsBrowserPluginApi",
                "section": "def-common.FatalErrorsSetup",
                "text": "FatalErrorsSetup"
              },
              ">; getStartServices: jest.Mock<Promise<[{ analytics: jest.Mocked<",
              {
                "pluginId": "@kbn/core-analytics-browser",
                "scope": "common",
                "docId": "kibKbnCoreAnalyticsBrowserPluginApi",
                "section": "def-common.AnalyticsServiceStart",
                "text": "AnalyticsServiceStart"
              },
              ">; application: jest.Mocked<",
              {
                "pluginId": "@kbn/core-application-browser",
                "scope": "common",
                "docId": "kibKbnCoreApplicationBrowserPluginApi",
                "section": "def-common.ApplicationStart",
                "text": "ApplicationStart"
              },
              ">; chrome: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "server",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-server.DeeplyMockedKeys",
                "text": "DeeplyMockedKeys"
              },
              "<",
              "InternalChromeStart",
              ">; docLinks: ",
              {
                "pluginId": "@kbn/core-doc-links-browser",
                "scope": "common",
                "docId": "kibKbnCoreDocLinksBrowserPluginApi",
                "section": "def-common.DocLinksStart",
                "text": "DocLinksStart"
              },
              "; executionContext: jest.Mocked<",
              {
                "pluginId": "@kbn/core-execution-context-browser",
                "scope": "common",
                "docId": "kibKbnCoreExecutionContextBrowserPluginApi",
                "section": "def-common.ExecutionContextSetup",
                "text": "ExecutionContextSetup"
              },
              ">; http: ",
              {
                "pluginId": "@kbn/core-http-browser-mocks",
                "scope": "common",
                "docId": "kibKbnCoreHttpBrowserMocksPluginApi",
                "section": "def-common.HttpSetupMock",
                "text": "HttpSetupMock"
              },
              "; i18n: jest.Mocked<",
              {
                "pluginId": "@kbn/core-i18n-browser",
                "scope": "common",
                "docId": "kibKbnCoreI18nBrowserPluginApi",
                "section": "def-common.I18nStart",
                "text": "I18nStart"
              },
              ">; notifications: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "server",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-server.MockedKeys",
                "text": "MockedKeys"
              },
              "<",
              {
                "pluginId": "@kbn/core-notifications-browser",
                "scope": "common",
                "docId": "kibKbnCoreNotificationsBrowserPluginApi",
                "section": "def-common.NotificationsStart",
                "text": "NotificationsStart"
              },
              ">; overlays: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "server",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-server.DeeplyMockedKeys",
                "text": "DeeplyMockedKeys"
              },
              "<",
              {
                "pluginId": "@kbn/core-overlays-browser",
                "scope": "common",
                "docId": "kibKbnCoreOverlaysBrowserPluginApi",
                "section": "def-common.OverlayStart",
                "text": "OverlayStart"
              },
              ">; uiSettings: jest.Mocked<",
              {
                "pluginId": "@kbn/core-ui-settings-browser",
                "scope": "common",
                "docId": "kibKbnCoreUiSettingsBrowserPluginApi",
                "section": "def-common.IUiSettingsClient",
                "text": "IUiSettingsClient"
              },
              ">; savedObjects: jest.Mocked<",
              {
                "pluginId": "@kbn/core-saved-objects-browser",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsBrowserPluginApi",
                "section": "def-common.SavedObjectsStart",
                "text": "SavedObjectsStart"
              },
              ">; deprecations: jest.Mocked<",
              {
                "pluginId": "@kbn/core-deprecations-browser",
                "scope": "common",
                "docId": "kibKbnCoreDeprecationsBrowserPluginApi",
                "section": "def-common.DeprecationsServiceStart",
                "text": "DeprecationsServiceStart"
              },
              ">; theme: jest.Mocked<",
              {
                "pluginId": "@kbn/core-theme-browser",
                "scope": "common",
                "docId": "kibKbnCoreThemeBrowserPluginApi",
                "section": "def-common.ThemeServiceStart",
                "text": "ThemeServiceStart"
              },
              ">; injectedMetadata: { getInjectedVar: jest.MockInstance<unknown, [name: string, defaultValue?: any]> & ((name: string, defaultValue?: any) => unknown); }; fatalErrors: jest.Mocked<",
              {
                "pluginId": "@kbn/core-fatal-errors-browser",
                "scope": "common",
                "docId": "kibKbnCoreFatalErrorsBrowserPluginApi",
                "section": "def-common.FatalErrorsSetup",
                "text": "FatalErrorsSetup"
              },
              ">; }, any, any]>, []>; http: ",
              {
                "pluginId": "@kbn/core-http-browser-mocks",
                "scope": "common",
                "docId": "kibKbnCoreHttpBrowserMocksPluginApi",
                "section": "def-common.HttpSetupMock",
                "text": "HttpSetupMock"
              },
              "; notifications: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "server",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-server.MockedKeys",
                "text": "MockedKeys"
              },
              "<",
              {
                "pluginId": "@kbn/core-notifications-browser",
                "scope": "common",
                "docId": "kibKbnCoreNotificationsBrowserPluginApi",
                "section": "def-common.NotificationsSetup",
                "text": "NotificationsSetup"
              },
              ">; uiSettings: jest.Mocked<",
              {
                "pluginId": "@kbn/core-ui-settings-browser",
                "scope": "common",
                "docId": "kibKbnCoreUiSettingsBrowserPluginApi",
                "section": "def-common.IUiSettingsClient",
                "text": "IUiSettingsClient"
              },
              ">; deprecations: undefined; injectedMetadata: { getInjectedVar: jest.MockInstance<unknown, [name: string, defaultValue?: any]> & ((name: string, defaultValue?: any) => unknown); }; theme: jest.Mocked<",
              {
                "pluginId": "@kbn/core-theme-browser",
                "scope": "common",
                "docId": "kibKbnCoreThemeBrowserPluginApi",
                "section": "def-common.ThemeServiceSetup",
                "text": "ThemeServiceSetup"
              },
              ">; }"
            ],
            "path": "packages/core/lifecycle/core-lifecycle-browser-mocks/src/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
                "id": "def-common.coreLifecycleMock.createCoreSetup.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ basePath?: string | undefined; pluginStartDeps?: object | undefined; pluginStartContract?: any; }"
                ],
                "path": "packages/core/lifecycle/core-lifecycle-browser-mocks/src/core_setup.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
            "id": "def-common.coreLifecycleMock.createCoreStart",
            "type": "Function",
            "tags": [],
            "label": "createCoreStart",
            "description": [],
            "signature": [
              "({ basePath }?: { basePath?: string | undefined; }) => { analytics: jest.Mocked<",
              {
                "pluginId": "@kbn/core-analytics-browser",
                "scope": "common",
                "docId": "kibKbnCoreAnalyticsBrowserPluginApi",
                "section": "def-common.AnalyticsServiceStart",
                "text": "AnalyticsServiceStart"
              },
              ">; application: jest.Mocked<",
              {
                "pluginId": "@kbn/core-application-browser",
                "scope": "common",
                "docId": "kibKbnCoreApplicationBrowserPluginApi",
                "section": "def-common.ApplicationStart",
                "text": "ApplicationStart"
              },
              ">; chrome: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "server",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-server.DeeplyMockedKeys",
                "text": "DeeplyMockedKeys"
              },
              "<",
              "InternalChromeStart",
              ">; docLinks: ",
              {
                "pluginId": "@kbn/core-doc-links-browser",
                "scope": "common",
                "docId": "kibKbnCoreDocLinksBrowserPluginApi",
                "section": "def-common.DocLinksStart",
                "text": "DocLinksStart"
              },
              "; executionContext: jest.Mocked<",
              {
                "pluginId": "@kbn/core-execution-context-browser",
                "scope": "common",
                "docId": "kibKbnCoreExecutionContextBrowserPluginApi",
                "section": "def-common.ExecutionContextSetup",
                "text": "ExecutionContextSetup"
              },
              ">; http: ",
              {
                "pluginId": "@kbn/core-http-browser-mocks",
                "scope": "common",
                "docId": "kibKbnCoreHttpBrowserMocksPluginApi",
                "section": "def-common.HttpSetupMock",
                "text": "HttpSetupMock"
              },
              "; i18n: jest.Mocked<",
              {
                "pluginId": "@kbn/core-i18n-browser",
                "scope": "common",
                "docId": "kibKbnCoreI18nBrowserPluginApi",
                "section": "def-common.I18nStart",
                "text": "I18nStart"
              },
              ">; notifications: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "server",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-server.MockedKeys",
                "text": "MockedKeys"
              },
              "<",
              {
                "pluginId": "@kbn/core-notifications-browser",
                "scope": "common",
                "docId": "kibKbnCoreNotificationsBrowserPluginApi",
                "section": "def-common.NotificationsStart",
                "text": "NotificationsStart"
              },
              ">; overlays: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "server",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-server.DeeplyMockedKeys",
                "text": "DeeplyMockedKeys"
              },
              "<",
              {
                "pluginId": "@kbn/core-overlays-browser",
                "scope": "common",
                "docId": "kibKbnCoreOverlaysBrowserPluginApi",
                "section": "def-common.OverlayStart",
                "text": "OverlayStart"
              },
              ">; uiSettings: jest.Mocked<",
              {
                "pluginId": "@kbn/core-ui-settings-browser",
                "scope": "common",
                "docId": "kibKbnCoreUiSettingsBrowserPluginApi",
                "section": "def-common.IUiSettingsClient",
                "text": "IUiSettingsClient"
              },
              ">; savedObjects: jest.Mocked<",
              {
                "pluginId": "@kbn/core-saved-objects-browser",
                "scope": "common",
                "docId": "kibKbnCoreSavedObjectsBrowserPluginApi",
                "section": "def-common.SavedObjectsStart",
                "text": "SavedObjectsStart"
              },
              ">; deprecations: jest.Mocked<",
              {
                "pluginId": "@kbn/core-deprecations-browser",
                "scope": "common",
                "docId": "kibKbnCoreDeprecationsBrowserPluginApi",
                "section": "def-common.DeprecationsServiceStart",
                "text": "DeprecationsServiceStart"
              },
              ">; theme: jest.Mocked<",
              {
                "pluginId": "@kbn/core-theme-browser",
                "scope": "common",
                "docId": "kibKbnCoreThemeBrowserPluginApi",
                "section": "def-common.ThemeServiceStart",
                "text": "ThemeServiceStart"
              },
              ">; injectedMetadata: { getInjectedVar: jest.MockInstance<unknown, [name: string, defaultValue?: any]> & ((name: string, defaultValue?: any) => unknown); }; fatalErrors: jest.Mocked<",
              {
                "pluginId": "@kbn/core-fatal-errors-browser",
                "scope": "common",
                "docId": "kibKbnCoreFatalErrorsBrowserPluginApi",
                "section": "def-common.FatalErrorsSetup",
                "text": "FatalErrorsSetup"
              },
              ">; }"
            ],
            "path": "packages/core/lifecycle/core-lifecycle-browser-mocks/src/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
                "id": "def-common.coreLifecycleMock.createCoreStart.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ basePath?: string | undefined; }"
                ],
                "path": "packages/core/lifecycle/core-lifecycle-browser-mocks/src/core_start.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ]
  }
}