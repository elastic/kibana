{
  "id": "@kbn/core-lifecycle-browser-mocks",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": [
      {
        "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
        "id": "def-public.coreLifecycleMock",
        "type": "Object",
        "tags": [],
        "label": "coreLifecycleMock",
        "description": [],
        "path": "src/core/packages/lifecycle/browser-mocks/src/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
            "id": "def-public.coreLifecycleMock.createCoreSetup",
            "type": "Function",
            "tags": [],
            "label": "createCoreSetup",
            "description": [],
            "signature": [
              "({ basePath, pluginStartDeps, pluginStartContract, }?: { basePath?: string | undefined; pluginStartDeps?: object | undefined; pluginStartContract?: any; }) => { analytics: jest.Mocked<",
              "AnalyticsServiceSetup",
              ">; application: jest.Mocked<",
              "ApplicationSetup",
              ">; customBranding: { customBranding$: ",
              "Observable",
              "<",
              "CustomBranding",
              ">; hasCustomBranding$: ",
              "Observable",
              "<boolean>; }; docLinks: jest.Mock<any, any, any>; executionContext: jest.Mocked<",
              "ExecutionContextSetup",
              ">; fatalErrors: jest.Mocked<",
              "FatalErrorsSetup",
              ">; featureFlags: jest.Mocked<",
              "FeatureFlagsSetup",
              ">; getStartServices: jest.Mock<Promise<[{ analytics: jest.Mocked<",
              "AnalyticsServiceStart",
              ">; application: jest.Mocked<",
              "ApplicationStart",
              ">; chrome: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "common",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-common.DeeplyMockedKeys",
                "text": "DeeplyMockedKeys"
              },
              "<",
              "InternalChromeStart",
              ">; customBranding: { customBranding$: ",
              "Observable",
              "<",
              "CustomBranding",
              ">; hasCustomBranding$: ",
              "Observable",
              "<boolean>; }; docLinks: ",
              "DocLinksStart",
              "; executionContext: jest.Mocked<",
              "ExecutionContextSetup",
              ">; featureFlags: jest.Mocked<",
              "FeatureFlagsStart",
              ">; http: ",
              "HttpSetupMock",
              "; i18n: jest.Mocked<",
              "I18nStart",
              ">; notifications: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "common",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-common.DeeplyMockedKeys",
                "text": "DeeplyMockedKeys"
              },
              "<",
              "NotificationsStart",
              ">; overlays: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "common",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-common.DeeplyMockedKeys",
                "text": "DeeplyMockedKeys"
              },
              "<",
              "OverlayStart",
              ">; uiSettings: jest.Mocked<",
              "IUiSettingsClient",
              ">; settings: { client: jest.Mocked<",
              "IUiSettingsClient",
              ">; globalClient: jest.Mocked<",
              "IUiSettingsClient",
              ">; }; savedObjects: jest.Mocked<",
              "SavedObjectsStart",
              ">; deprecations: jest.Mocked<",
              "DeprecationsServiceStart",
              ">; theme: jest.Mocked<",
              "ThemeServiceSetup",
              ">; fatalErrors: jest.Mocked<",
              "FatalErrorsSetup",
              ">; security: jest.MockedObjectDeep<",
              "SecurityServiceStart",
              ">; userProfile: jest.Mocked<",
              "UserProfileService",
              ">; plugins: { onStart: jest.Mock<any, any, any>; }; }, any, any]>, [], any>; http: ",
              "HttpSetupMock",
              "; notifications: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "common",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-common.MockedKeys",
                "text": "MockedKeys"
              },
              "<",
              "NotificationsSetup",
              ">; uiSettings: jest.Mocked<",
              "IUiSettingsClient",
              ">; settings: { client: jest.Mocked<",
              "IUiSettingsClient",
              ">; globalClient: jest.Mocked<",
              "IUiSettingsClient",
              ">; }; deprecations: undefined; theme: jest.Mocked<",
              "ThemeServiceSetup",
              ">; security: jest.Mocked<",
              "SecurityServiceSetup",
              ">; userProfile: jest.Mocked<",
              "UserProfileServiceSetup",
              ">; plugins: { onSetup: jest.Mock<any, any, any>; onStart: jest.Mock<any, any, any>; }; }"
            ],
            "path": "src/core/packages/lifecycle/browser-mocks/src/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
                "id": "def-public.coreLifecycleMock.createCoreSetup.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ basePath?: string | undefined; pluginStartDeps?: object | undefined; pluginStartContract?: any; }"
                ],
                "path": "src/core/packages/lifecycle/browser-mocks/src/core_setup.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
            "id": "def-public.coreLifecycleMock.createCoreStart",
            "type": "Function",
            "tags": [],
            "label": "createCoreStart",
            "description": [],
            "signature": [
              "({ basePath }?: { basePath?: string | undefined; }) => { analytics: jest.Mocked<",
              "AnalyticsServiceStart",
              ">; application: jest.Mocked<",
              "ApplicationStart",
              ">; chrome: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "common",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-common.DeeplyMockedKeys",
                "text": "DeeplyMockedKeys"
              },
              "<",
              "InternalChromeStart",
              ">; customBranding: { customBranding$: ",
              "Observable",
              "<",
              "CustomBranding",
              ">; hasCustomBranding$: ",
              "Observable",
              "<boolean>; }; docLinks: ",
              "DocLinksStart",
              "; executionContext: jest.Mocked<",
              "ExecutionContextSetup",
              ">; featureFlags: jest.Mocked<",
              "FeatureFlagsStart",
              ">; http: ",
              "HttpSetupMock",
              "; i18n: jest.Mocked<",
              "I18nStart",
              ">; notifications: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "common",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-common.DeeplyMockedKeys",
                "text": "DeeplyMockedKeys"
              },
              "<",
              "NotificationsStart",
              ">; overlays: ",
              {
                "pluginId": "@kbn/utility-types-jest",
                "scope": "common",
                "docId": "kibKbnUtilityTypesJestPluginApi",
                "section": "def-common.DeeplyMockedKeys",
                "text": "DeeplyMockedKeys"
              },
              "<",
              "OverlayStart",
              ">; uiSettings: jest.Mocked<",
              "IUiSettingsClient",
              ">; settings: { client: jest.Mocked<",
              "IUiSettingsClient",
              ">; globalClient: jest.Mocked<",
              "IUiSettingsClient",
              ">; }; savedObjects: jest.Mocked<",
              "SavedObjectsStart",
              ">; deprecations: jest.Mocked<",
              "DeprecationsServiceStart",
              ">; theme: jest.Mocked<",
              "ThemeServiceSetup",
              ">; fatalErrors: jest.Mocked<",
              "FatalErrorsSetup",
              ">; security: jest.MockedObjectDeep<",
              "SecurityServiceStart",
              ">; userProfile: jest.Mocked<",
              "UserProfileService",
              ">; plugins: { onStart: jest.Mock<any, any, any>; }; }"
            ],
            "path": "src/core/packages/lifecycle/browser-mocks/src/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
                "id": "def-public.coreLifecycleMock.createCoreStart.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ basePath?: string | undefined; }"
                ],
                "path": "src/core/packages/lifecycle/browser-mocks/src/core_start.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ]
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}