{
  "id": "@kbn/core-lifecycle-browser-mocks",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": [
      {
        "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
        "id": "def-common.coreLifecycleMock",
        "type": "Object",
        "tags": [],
        "label": "coreLifecycleMock",
        "description": [],
        "path": "packages/core/lifecycle/core-lifecycle-browser-mocks/src/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
            "id": "def-common.coreLifecycleMock.createCoreSetup",
            "type": "Function",
            "tags": [],
            "label": "createCoreSetup",
            "description": [],
            "signature": [
              "({ basePath, pluginStartDeps, pluginStartContract, }?: { basePath?: string | undefined; pluginStartDeps?: object | undefined; pluginStartContract?: any; }) => { analytics: jest.Mocked<",
              "AnalyticsServiceSetup",
              ">; application: jest.Mocked<",
              "ApplicationSetup",
              ">; docLinks: jest.Mock<any, any>; executionContext: jest.Mocked<",
              "ExecutionContextSetup",
              ">; fatalErrors: jest.Mocked<",
              "FatalErrorsSetup",
              ">; getStartServices: jest.Mock<Promise<[{ analytics: jest.Mocked<",
              "AnalyticsServiceStart",
              ">; application: jest.Mocked<",
              "ApplicationStart",
              ">; chrome: ",
              "DeeplyMockedKeys",
              "<",
              "InternalChromeStart",
              ">; docLinks: ",
              "DocLinksStart",
              "; executionContext: jest.Mocked<",
              "ExecutionContextSetup",
              ">; http: ",
              "HttpSetupMock",
              "; i18n: jest.Mocked<",
              "I18nStart",
              ">; notifications: ",
              "MockedKeys",
              "<",
              "NotificationsStart",
              ">; overlays: ",
              "DeeplyMockedKeys",
              "<",
              "OverlayStart",
              ">; uiSettings: jest.Mocked<",
              "IUiSettingsClient",
              ">; savedObjects: jest.Mocked<",
              "SavedObjectsStart",
              ">; deprecations: jest.Mocked<",
              "DeprecationsServiceStart",
              ">; theme: jest.Mocked<",
              "ThemeServiceStart",
              ">; injectedMetadata: { getInjectedVar: jest.MockInstance<unknown, [name: string, defaultValue?: any]> & ((name: string, defaultValue?: any) => unknown); }; fatalErrors: jest.Mocked<",
              "FatalErrorsSetup",
              ">; }, any, any]>, []>; http: ",
              "HttpSetupMock",
              "; notifications: ",
              "MockedKeys",
              "<",
              "NotificationsSetup",
              ">; uiSettings: jest.Mocked<",
              "IUiSettingsClient",
              ">; deprecations: undefined; injectedMetadata: { getInjectedVar: jest.MockInstance<unknown, [name: string, defaultValue?: any]> & ((name: string, defaultValue?: any) => unknown); }; theme: jest.Mocked<",
              "ThemeServiceSetup",
              ">; }"
            ],
            "path": "packages/core/lifecycle/core-lifecycle-browser-mocks/src/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
                "id": "def-common.coreLifecycleMock.createCoreSetup.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ basePath?: string | undefined; pluginStartDeps?: object | undefined; pluginStartContract?: any; }"
                ],
                "path": "packages/core/lifecycle/core-lifecycle-browser-mocks/src/core_setup.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
            "id": "def-common.coreLifecycleMock.createCoreStart",
            "type": "Function",
            "tags": [],
            "label": "createCoreStart",
            "description": [],
            "signature": [
              "({ basePath }?: { basePath?: string | undefined; }) => { analytics: jest.Mocked<",
              "AnalyticsServiceStart",
              ">; application: jest.Mocked<",
              "ApplicationStart",
              ">; chrome: ",
              "DeeplyMockedKeys",
              "<",
              "InternalChromeStart",
              ">; docLinks: ",
              "DocLinksStart",
              "; executionContext: jest.Mocked<",
              "ExecutionContextSetup",
              ">; http: ",
              "HttpSetupMock",
              "; i18n: jest.Mocked<",
              "I18nStart",
              ">; notifications: ",
              "MockedKeys",
              "<",
              "NotificationsStart",
              ">; overlays: ",
              "DeeplyMockedKeys",
              "<",
              "OverlayStart",
              ">; uiSettings: jest.Mocked<",
              "IUiSettingsClient",
              ">; savedObjects: jest.Mocked<",
              "SavedObjectsStart",
              ">; deprecations: jest.Mocked<",
              "DeprecationsServiceStart",
              ">; theme: jest.Mocked<",
              "ThemeServiceStart",
              ">; injectedMetadata: { getInjectedVar: jest.MockInstance<unknown, [name: string, defaultValue?: any]> & ((name: string, defaultValue?: any) => unknown); }; fatalErrors: jest.Mocked<",
              "FatalErrorsSetup",
              ">; }"
            ],
            "path": "packages/core/lifecycle/core-lifecycle-browser-mocks/src/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/core-lifecycle-browser-mocks",
                "id": "def-common.coreLifecycleMock.createCoreStart.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  "{ basePath?: string | undefined; }"
                ],
                "path": "packages/core/lifecycle/core-lifecycle-browser-mocks/src/core_start.mock.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ]
  }
}