{
  "id": "@kbn/ftr-common-functional-services",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [
      {
        "parentPluginId": "@kbn/ftr-common-functional-services",
        "id": "def-common.RetryService",
        "type": "Class",
        "tags": [],
        "label": "RetryService",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RetryService",
            "text": "RetryService"
          },
          " extends ",
          "FtrService"
        ],
        "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.RetryService.tryForTime",
            "type": "Function",
            "tags": [],
            "label": "tryForTime",
            "description": [
              "\nUse to retry block within {timeout} period and return block result."
            ],
            "signature": [
              "<T>(timeout: number, block: () => Promise<T>, onFailureBlock?: (() => Promise<T>) | undefined, retryDelay?: number | undefined) => Promise<T>"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.tryForTime.$1",
                "type": "number",
                "tags": [],
                "label": "timeout",
                "description": [
                  "retrying timeout"
                ],
                "signature": [
                  "number"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.tryForTime.$2",
                "type": "Function",
                "tags": [],
                "label": "block",
                "description": [
                  "retriable action"
                ],
                "signature": [
                  "() => Promise<T>"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.tryForTime.$3",
                "type": "Function",
                "tags": [],
                "label": "onFailureBlock",
                "description": [
                  "optional action to run before the new retriable action attempt"
                ],
                "signature": [
                  "(() => Promise<T>) | undefined"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.tryForTime.$4",
                "type": "number",
                "tags": [],
                "label": "retryDelay",
                "description": [
                  "optional delay before the new attempt"
                ],
                "signature": [
                  "number | undefined"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": [
              "result from retriable action"
            ]
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.RetryService.try",
            "type": "Function",
            "tags": [],
            "label": "try",
            "description": [],
            "signature": [
              "<T>(block: () => Promise<T>, onFailureBlock?: (() => Promise<T>) | undefined, retryDelay?: number | undefined) => Promise<T>"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.try.$1",
                "type": "Function",
                "tags": [],
                "label": "block",
                "description": [],
                "signature": [
                  "() => Promise<T>"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.try.$2",
                "type": "Function",
                "tags": [],
                "label": "onFailureBlock",
                "description": [],
                "signature": [
                  "(() => Promise<T>) | undefined"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.try.$3",
                "type": "number",
                "tags": [],
                "label": "retryDelay",
                "description": [],
                "signature": [
                  "number | undefined"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.RetryService.waitForWithTimeout",
            "type": "Function",
            "tags": [],
            "label": "waitForWithTimeout",
            "description": [
              "\nUse to wait for block condition to be true"
            ],
            "signature": [
              "(description: string, timeout: number, block: () => Promise<boolean>, onFailureBlock?: (() => Promise<any>) | undefined) => Promise<void>"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.waitForWithTimeout.$1",
                "type": "string",
                "tags": [],
                "label": "description",
                "description": [
                  "description for retriable action"
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.waitForWithTimeout.$2",
                "type": "number",
                "tags": [],
                "label": "timeout",
                "description": [
                  "retrying timeout"
                ],
                "signature": [
                  "number"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.waitForWithTimeout.$3",
                "type": "Function",
                "tags": [],
                "label": "block",
                "description": [
                  "retriable action"
                ],
                "signature": [
                  "() => Promise<boolean>"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.waitForWithTimeout.$4",
                "type": "Function",
                "tags": [],
                "label": "onFailureBlock",
                "description": [
                  "optional action to run before the new retriable action attempt"
                ],
                "signature": [
                  "(() => Promise<any>) | undefined"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.RetryService.waitFor",
            "type": "Function",
            "tags": [],
            "label": "waitFor",
            "description": [],
            "signature": [
              "(description: string, block: () => Promise<boolean>, onFailureBlock?: (() => Promise<any>) | undefined) => Promise<void>"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.waitFor.$1",
                "type": "string",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.waitFor.$2",
                "type": "Function",
                "tags": [],
                "label": "block",
                "description": [],
                "signature": [
                  "() => Promise<boolean>"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.waitFor.$3",
                "type": "Function",
                "tags": [],
                "label": "onFailureBlock",
                "description": [],
                "signature": [
                  "(() => Promise<any>) | undefined"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.RetryService.tryWithRetries",
            "type": "Function",
            "tags": [],
            "label": "tryWithRetries",
            "description": [
              "\nUse to retry block {options.retryCount} times within {options.timeout} period and return block result"
            ],
            "signature": [
              "<T>(description: string, block: () => Promise<T>, options: TryWithRetriesOptions, onFailureBlock?: (() => Promise<T>) | undefined) => Promise<T>"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.tryWithRetries.$1",
                "type": "string",
                "tags": [],
                "label": "description",
                "description": [
                  "description for retriable action"
                ],
                "signature": [
                  "string"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.tryWithRetries.$2",
                "type": "Function",
                "tags": [],
                "label": "block",
                "description": [
                  "retriable action"
                ],
                "signature": [
                  "() => Promise<T>"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.tryWithRetries.$3",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [
                  "options.retryCount for how many attempts to retry"
                ],
                "signature": [
                  "TryWithRetriesOptions"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.RetryService.tryWithRetries.$4",
                "type": "Function",
                "tags": [],
                "label": "onFailureBlock",
                "description": [
                  "optional action to run before the new retriable action attempt"
                ],
                "signature": [
                  "(() => Promise<T>) | undefined"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/retry/retry.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": [
              "result from retriable action"
            ]
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "@kbn/ftr-common-functional-services",
        "id": "def-common.RoleCredentials",
        "type": "Interface",
        "tags": [],
        "label": "RoleCredentials",
        "description": [],
        "path": "packages/kbn-ftr-common-functional-services/services/saml_auth/saml_auth_provider.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.RoleCredentials.apiKey",
            "type": "Object",
            "tags": [],
            "label": "apiKey",
            "description": [],
            "signature": [
              "{ id: string; name: string; }"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/saml_auth/saml_auth_provider.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.RoleCredentials.apiKeyHeader",
            "type": "Object",
            "tags": [],
            "label": "apiKeyHeader",
            "description": [],
            "signature": [
              "{ Authorization: string; }"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/saml_auth/saml_auth_provider.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.RoleCredentials.cookieHeader",
            "type": "Object",
            "tags": [],
            "label": "cookieHeader",
            "description": [],
            "signature": [
              "{ Cookie: string; }"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/saml_auth/saml_auth_provider.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "@kbn/ftr-common-functional-services",
        "id": "def-common.Es",
        "type": "Type",
        "tags": [],
        "label": "Es",
        "description": [],
        "signature": [
          "default"
        ],
        "path": "packages/kbn-ftr-common-functional-services/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ftr-common-functional-services",
        "id": "def-common.EsArchiver",
        "type": "Type",
        "tags": [],
        "label": "EsArchiver",
        "description": [],
        "path": "packages/kbn-ftr-common-functional-services/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ftr-common-functional-services",
        "id": "def-common.FtrProviderContext",
        "type": "Type",
        "tags": [],
        "label": "FtrProviderContext",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/test",
            "scope": "common",
            "docId": "kibKbnTestPluginApi",
            "section": "def-common.GenericFtrProviderContext",
            "text": "GenericFtrProviderContext"
          },
          "<{ es: ({ getService }: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.FtrProviderContext",
            "text": "FtrProviderContext"
          },
          ") => ",
          "default",
          "; kibanaServer: ({ getService }: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.FtrProviderContext",
            "text": "FtrProviderContext"
          },
          ") => ",
          {
            "pluginId": "@kbn/test",
            "scope": "common",
            "docId": "kibKbnTestPluginApi",
            "section": "def-common.KbnClient",
            "text": "KbnClient"
          },
          "; esArchiver: ({ getService }: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.FtrProviderContext",
            "text": "FtrProviderContext"
          },
          ") => ",
          {
            "pluginId": "@kbn/es-archiver",
            "scope": "common",
            "docId": "kibKbnEsArchiverPluginApi",
            "section": "def-common.EsArchiver",
            "text": "EsArchiver"
          },
          "; retry: typeof ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RetryService",
            "text": "RetryService"
          },
          "; supertestWithoutAuth: ({ getService }: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.FtrProviderContext",
            "text": "FtrProviderContext"
          },
          ") => ",
          "node_modules/@types/supertest/lib/agent",
          "<",
          "SuperTestStatic",
          ".Test>; samlAuth: ({ getService }: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.FtrProviderContext",
            "text": "FtrProviderContext"
          },
          ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
          "UserProfile",
          ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RoleCredentials",
            "text": "RoleCredentials"
          },
          ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RoleCredentials",
            "text": "RoleCredentials"
          },
          ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RoleCredentials",
            "text": "RoleCredentials"
          },
          "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.InternalRequestHeader",
            "text": "InternalRequestHeader"
          },
          "; DEFAULT_ROLE: string; }; }, {}, ProvidedTypeMap<{ es: ({ getService }: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.FtrProviderContext",
            "text": "FtrProviderContext"
          },
          ") => ",
          "default",
          "; kibanaServer: ({ getService }: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.FtrProviderContext",
            "text": "FtrProviderContext"
          },
          ") => ",
          {
            "pluginId": "@kbn/test",
            "scope": "common",
            "docId": "kibKbnTestPluginApi",
            "section": "def-common.KbnClient",
            "text": "KbnClient"
          },
          "; esArchiver: ({ getService }: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.FtrProviderContext",
            "text": "FtrProviderContext"
          },
          ") => ",
          {
            "pluginId": "@kbn/es-archiver",
            "scope": "common",
            "docId": "kibKbnEsArchiverPluginApi",
            "section": "def-common.EsArchiver",
            "text": "EsArchiver"
          },
          "; retry: typeof ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RetryService",
            "text": "RetryService"
          },
          "; supertestWithoutAuth: ({ getService }: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.FtrProviderContext",
            "text": "FtrProviderContext"
          },
          ") => ",
          "node_modules/@types/supertest/lib/agent",
          "<",
          "SuperTestStatic",
          ".Test>; samlAuth: ({ getService }: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.FtrProviderContext",
            "text": "FtrProviderContext"
          },
          ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
          "UserProfile",
          ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RoleCredentials",
            "text": "RoleCredentials"
          },
          ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RoleCredentials",
            "text": "RoleCredentials"
          },
          ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RoleCredentials",
            "text": "RoleCredentials"
          },
          "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.InternalRequestHeader",
            "text": "InternalRequestHeader"
          },
          "; DEFAULT_ROLE: string; }; }>, ProvidedTypeMap<{}>>"
        ],
        "path": "packages/kbn-ftr-common-functional-services/services/ftr_provider_context.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ftr-common-functional-services",
        "id": "def-common.InternalRequestHeader",
        "type": "Type",
        "tags": [],
        "label": "InternalRequestHeader",
        "description": [],
        "signature": [
          "{ 'kbn-xsrf': string; } | { 'x-elastic-internal-origin': string; 'kbn-xsrf': string; }"
        ],
        "path": "packages/kbn-ftr-common-functional-services/services/saml_auth/default_request_headers.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ftr-common-functional-services",
        "id": "def-common.KibanaServer",
        "type": "Type",
        "tags": [],
        "label": "KibanaServer",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/test",
            "scope": "common",
            "docId": "kibKbnTestPluginApi",
            "section": "def-common.KbnClient",
            "text": "KbnClient"
          }
        ],
        "path": "packages/kbn-ftr-common-functional-services/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ftr-common-functional-services",
        "id": "def-common.SamlAuthProviderType",
        "type": "Type",
        "tags": [],
        "label": "SamlAuthProviderType",
        "description": [],
        "signature": [
          "{ getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
          "UserProfile",
          ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RoleCredentials",
            "text": "RoleCredentials"
          },
          ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RoleCredentials",
            "text": "RoleCredentials"
          },
          ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.RoleCredentials",
            "text": "RoleCredentials"
          },
          "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
          {
            "pluginId": "@kbn/ftr-common-functional-services",
            "scope": "common",
            "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
            "section": "def-common.InternalRequestHeader",
            "text": "InternalRequestHeader"
          },
          "; DEFAULT_ROLE: string; }"
        ],
        "path": "packages/kbn-ftr-common-functional-services/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/ftr-common-functional-services",
        "id": "def-common.SupertestWithoutAuthProviderType",
        "type": "Type",
        "tags": [],
        "label": "SupertestWithoutAuthProviderType",
        "description": [],
        "signature": [
          "node_modules/@types/supertest/lib/agent",
          "<",
          "SuperTestStatic",
          ".Test>"
        ],
        "path": "packages/kbn-ftr-common-functional-services/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/ftr-common-functional-services",
        "id": "def-common.services",
        "type": "Object",
        "tags": [],
        "label": "services",
        "description": [],
        "path": "packages/kbn-ftr-common-functional-services/services/all.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.services.es",
            "type": "Function",
            "tags": [],
            "label": "es",
            "description": [],
            "signature": [
              "({ getService }: ",
              {
                "pluginId": "@kbn/ftr-common-functional-services",
                "scope": "common",
                "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                "section": "def-common.FtrProviderContext",
                "text": "FtrProviderContext"
              },
              ") => ",
              "default"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/all.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.services.es.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.GenericFtrProviderContext",
                    "text": "GenericFtrProviderContext"
                  },
                  "<{ es: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "default",
                  "; kibanaServer: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.KbnClient",
                    "text": "KbnClient"
                  },
                  "; esArchiver: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/es-archiver",
                    "scope": "common",
                    "docId": "kibKbnEsArchiverPluginApi",
                    "section": "def-common.EsArchiver",
                    "text": "EsArchiver"
                  },
                  "; retry: typeof ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RetryService",
                    "text": "RetryService"
                  },
                  "; supertestWithoutAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "node_modules/@types/supertest/lib/agent",
                  "<",
                  "SuperTestStatic",
                  ".Test>; samlAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
                  "UserProfile",
                  ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.InternalRequestHeader",
                    "text": "InternalRequestHeader"
                  },
                  "; DEFAULT_ROLE: string; }; }, {}, ProvidedTypeMap<{ es: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "default",
                  "; kibanaServer: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.KbnClient",
                    "text": "KbnClient"
                  },
                  "; esArchiver: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/es-archiver",
                    "scope": "common",
                    "docId": "kibKbnEsArchiverPluginApi",
                    "section": "def-common.EsArchiver",
                    "text": "EsArchiver"
                  },
                  "; retry: typeof ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RetryService",
                    "text": "RetryService"
                  },
                  "; supertestWithoutAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "node_modules/@types/supertest/lib/agent",
                  "<",
                  "SuperTestStatic",
                  ".Test>; samlAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
                  "UserProfile",
                  ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.InternalRequestHeader",
                    "text": "InternalRequestHeader"
                  },
                  "; DEFAULT_ROLE: string; }; }>, ProvidedTypeMap<{}>>"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/es.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.services.kibanaServer",
            "type": "Function",
            "tags": [],
            "label": "kibanaServer",
            "description": [],
            "signature": [
              "({ getService }: ",
              {
                "pluginId": "@kbn/ftr-common-functional-services",
                "scope": "common",
                "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                "section": "def-common.FtrProviderContext",
                "text": "FtrProviderContext"
              },
              ") => ",
              {
                "pluginId": "@kbn/test",
                "scope": "common",
                "docId": "kibKbnTestPluginApi",
                "section": "def-common.KbnClient",
                "text": "KbnClient"
              }
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/all.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.services.kibanaServer.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.GenericFtrProviderContext",
                    "text": "GenericFtrProviderContext"
                  },
                  "<{ es: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "default",
                  "; kibanaServer: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.KbnClient",
                    "text": "KbnClient"
                  },
                  "; esArchiver: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/es-archiver",
                    "scope": "common",
                    "docId": "kibKbnEsArchiverPluginApi",
                    "section": "def-common.EsArchiver",
                    "text": "EsArchiver"
                  },
                  "; retry: typeof ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RetryService",
                    "text": "RetryService"
                  },
                  "; supertestWithoutAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "node_modules/@types/supertest/lib/agent",
                  "<",
                  "SuperTestStatic",
                  ".Test>; samlAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
                  "UserProfile",
                  ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.InternalRequestHeader",
                    "text": "InternalRequestHeader"
                  },
                  "; DEFAULT_ROLE: string; }; }, {}, ProvidedTypeMap<{ es: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "default",
                  "; kibanaServer: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.KbnClient",
                    "text": "KbnClient"
                  },
                  "; esArchiver: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/es-archiver",
                    "scope": "common",
                    "docId": "kibKbnEsArchiverPluginApi",
                    "section": "def-common.EsArchiver",
                    "text": "EsArchiver"
                  },
                  "; retry: typeof ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RetryService",
                    "text": "RetryService"
                  },
                  "; supertestWithoutAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "node_modules/@types/supertest/lib/agent",
                  "<",
                  "SuperTestStatic",
                  ".Test>; samlAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
                  "UserProfile",
                  ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.InternalRequestHeader",
                    "text": "InternalRequestHeader"
                  },
                  "; DEFAULT_ROLE: string; }; }>, ProvidedTypeMap<{}>>"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/kibana_server/kibana_server.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.services.esArchiver",
            "type": "Function",
            "tags": [],
            "label": "esArchiver",
            "description": [],
            "signature": [
              "({ getService }: ",
              {
                "pluginId": "@kbn/ftr-common-functional-services",
                "scope": "common",
                "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                "section": "def-common.FtrProviderContext",
                "text": "FtrProviderContext"
              },
              ") => ",
              {
                "pluginId": "@kbn/es-archiver",
                "scope": "common",
                "docId": "kibKbnEsArchiverPluginApi",
                "section": "def-common.EsArchiver",
                "text": "EsArchiver"
              }
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/all.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.services.esArchiver.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.GenericFtrProviderContext",
                    "text": "GenericFtrProviderContext"
                  },
                  "<{ es: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "default",
                  "; kibanaServer: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.KbnClient",
                    "text": "KbnClient"
                  },
                  "; esArchiver: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/es-archiver",
                    "scope": "common",
                    "docId": "kibKbnEsArchiverPluginApi",
                    "section": "def-common.EsArchiver",
                    "text": "EsArchiver"
                  },
                  "; retry: typeof ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RetryService",
                    "text": "RetryService"
                  },
                  "; supertestWithoutAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "node_modules/@types/supertest/lib/agent",
                  "<",
                  "SuperTestStatic",
                  ".Test>; samlAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
                  "UserProfile",
                  ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.InternalRequestHeader",
                    "text": "InternalRequestHeader"
                  },
                  "; DEFAULT_ROLE: string; }; }, {}, ProvidedTypeMap<{ es: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "default",
                  "; kibanaServer: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.KbnClient",
                    "text": "KbnClient"
                  },
                  "; esArchiver: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/es-archiver",
                    "scope": "common",
                    "docId": "kibKbnEsArchiverPluginApi",
                    "section": "def-common.EsArchiver",
                    "text": "EsArchiver"
                  },
                  "; retry: typeof ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RetryService",
                    "text": "RetryService"
                  },
                  "; supertestWithoutAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "node_modules/@types/supertest/lib/agent",
                  "<",
                  "SuperTestStatic",
                  ".Test>; samlAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
                  "UserProfile",
                  ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.InternalRequestHeader",
                    "text": "InternalRequestHeader"
                  },
                  "; DEFAULT_ROLE: string; }; }>, ProvidedTypeMap<{}>>"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/es_archiver.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.services.retry",
            "type": "Object",
            "tags": [],
            "label": "retry",
            "description": [],
            "signature": [
              "typeof ",
              {
                "pluginId": "@kbn/ftr-common-functional-services",
                "scope": "common",
                "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                "section": "def-common.RetryService",
                "text": "RetryService"
              }
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/all.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.services.supertestWithoutAuth",
            "type": "Function",
            "tags": [],
            "label": "supertestWithoutAuth",
            "description": [],
            "signature": [
              "({ getService }: ",
              {
                "pluginId": "@kbn/ftr-common-functional-services",
                "scope": "common",
                "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                "section": "def-common.FtrProviderContext",
                "text": "FtrProviderContext"
              },
              ") => ",
              "node_modules/@types/supertest/lib/agent",
              "<",
              "SuperTestStatic",
              ".Test>"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/all.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.services.supertestWithoutAuth.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.GenericFtrProviderContext",
                    "text": "GenericFtrProviderContext"
                  },
                  "<{ es: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "default",
                  "; kibanaServer: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.KbnClient",
                    "text": "KbnClient"
                  },
                  "; esArchiver: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/es-archiver",
                    "scope": "common",
                    "docId": "kibKbnEsArchiverPluginApi",
                    "section": "def-common.EsArchiver",
                    "text": "EsArchiver"
                  },
                  "; retry: typeof ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RetryService",
                    "text": "RetryService"
                  },
                  "; supertestWithoutAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "node_modules/@types/supertest/lib/agent",
                  "<",
                  "SuperTestStatic",
                  ".Test>; samlAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
                  "UserProfile",
                  ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.InternalRequestHeader",
                    "text": "InternalRequestHeader"
                  },
                  "; DEFAULT_ROLE: string; }; }, {}, ProvidedTypeMap<{ es: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "default",
                  "; kibanaServer: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.KbnClient",
                    "text": "KbnClient"
                  },
                  "; esArchiver: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/es-archiver",
                    "scope": "common",
                    "docId": "kibKbnEsArchiverPluginApi",
                    "section": "def-common.EsArchiver",
                    "text": "EsArchiver"
                  },
                  "; retry: typeof ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RetryService",
                    "text": "RetryService"
                  },
                  "; supertestWithoutAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "node_modules/@types/supertest/lib/agent",
                  "<",
                  "SuperTestStatic",
                  ".Test>; samlAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
                  "UserProfile",
                  ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.InternalRequestHeader",
                    "text": "InternalRequestHeader"
                  },
                  "; DEFAULT_ROLE: string; }; }>, ProvidedTypeMap<{}>>"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/supertest_without_auth.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "@kbn/ftr-common-functional-services",
            "id": "def-common.services.samlAuth",
            "type": "Function",
            "tags": [],
            "label": "samlAuth",
            "description": [],
            "signature": [
              "({ getService }: ",
              {
                "pluginId": "@kbn/ftr-common-functional-services",
                "scope": "common",
                "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                "section": "def-common.FtrProviderContext",
                "text": "FtrProviderContext"
              },
              ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
              "UserProfile",
              ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
              {
                "pluginId": "@kbn/ftr-common-functional-services",
                "scope": "common",
                "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                "section": "def-common.RoleCredentials",
                "text": "RoleCredentials"
              },
              ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
              {
                "pluginId": "@kbn/ftr-common-functional-services",
                "scope": "common",
                "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                "section": "def-common.RoleCredentials",
                "text": "RoleCredentials"
              },
              ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
              {
                "pluginId": "@kbn/ftr-common-functional-services",
                "scope": "common",
                "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                "section": "def-common.RoleCredentials",
                "text": "RoleCredentials"
              },
              "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
              {
                "pluginId": "@kbn/ftr-common-functional-services",
                "scope": "common",
                "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                "section": "def-common.InternalRequestHeader",
                "text": "InternalRequestHeader"
              },
              "; DEFAULT_ROLE: string; }"
            ],
            "path": "packages/kbn-ftr-common-functional-services/services/all.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "@kbn/ftr-common-functional-services",
                "id": "def-common.services.samlAuth.$1",
                "type": "Object",
                "tags": [],
                "label": "__0",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.GenericFtrProviderContext",
                    "text": "GenericFtrProviderContext"
                  },
                  "<{ es: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "default",
                  "; kibanaServer: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.KbnClient",
                    "text": "KbnClient"
                  },
                  "; esArchiver: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/es-archiver",
                    "scope": "common",
                    "docId": "kibKbnEsArchiverPluginApi",
                    "section": "def-common.EsArchiver",
                    "text": "EsArchiver"
                  },
                  "; retry: typeof ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RetryService",
                    "text": "RetryService"
                  },
                  "; supertestWithoutAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "node_modules/@types/supertest/lib/agent",
                  "<",
                  "SuperTestStatic",
                  ".Test>; samlAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
                  "UserProfile",
                  ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.InternalRequestHeader",
                    "text": "InternalRequestHeader"
                  },
                  "; DEFAULT_ROLE: string; }; }, {}, ProvidedTypeMap<{ es: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "default",
                  "; kibanaServer: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/test",
                    "scope": "common",
                    "docId": "kibKbnTestPluginApi",
                    "section": "def-common.KbnClient",
                    "text": "KbnClient"
                  },
                  "; esArchiver: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  {
                    "pluginId": "@kbn/es-archiver",
                    "scope": "common",
                    "docId": "kibKbnEsArchiverPluginApi",
                    "section": "def-common.EsArchiver",
                    "text": "EsArchiver"
                  },
                  "; retry: typeof ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RetryService",
                    "text": "RetryService"
                  },
                  "; supertestWithoutAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => ",
                  "node_modules/@types/supertest/lib/agent",
                  "<",
                  "SuperTestStatic",
                  ".Test>; samlAuth: ({ getService }: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.FtrProviderContext",
                    "text": "FtrProviderContext"
                  },
                  ") => { getInteractiveUserSessionCookieWithRoleScope(role: string): Promise<string>; getM2MApiCredentialsWithRoleScope(role: string): Promise<{ Cookie: string; }>; getEmail(role: string): Promise<string>; getUserData(role: string): Promise<",
                  "UserProfile",
                  ">; createM2mApiKeyWithDefaultRoleScope(): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; createM2mApiKeyWithRoleScope(role: string): Promise<",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  ">; invalidateM2mApiKeyWithRoleScope(roleCredentials: ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.RoleCredentials",
                    "text": "RoleCredentials"
                  },
                  "): Promise<void>; getCommonRequestHeader(): { 'kbn-xsrf': string; }; getInternalRequestHeader(): ",
                  {
                    "pluginId": "@kbn/ftr-common-functional-services",
                    "scope": "common",
                    "docId": "kibKbnFtrCommonFunctionalServicesPluginApi",
                    "section": "def-common.InternalRequestHeader",
                    "text": "InternalRequestHeader"
                  },
                  "; DEFAULT_ROLE: string; }; }>, ProvidedTypeMap<{}>>"
                ],
                "path": "packages/kbn-ftr-common-functional-services/services/saml_auth/saml_auth_provider.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ]
  }
}