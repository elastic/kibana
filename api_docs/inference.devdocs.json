{
  "id": "inference",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": [],
    "setup": {
      "parentPluginId": "inference",
      "id": "def-public.InferencePublicSetup",
      "type": "Interface",
      "tags": [],
      "label": "InferencePublicSetup",
      "description": [],
      "path": "x-pack/platform/plugins/shared/inference/public/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "inference",
      "id": "def-public.InferencePublicStart",
      "type": "Interface",
      "tags": [],
      "label": "InferencePublicStart",
      "description": [],
      "path": "x-pack/platform/plugins/shared/inference/public/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "inference",
          "id": "def-public.InferencePublicStart.chatComplete",
          "type": "Function",
          "tags": [],
          "label": "chatComplete",
          "description": [],
          "signature": [
            "<TToolOptions extends ",
            {
              "pluginId": "@kbn/inference-common",
              "scope": "common",
              "docId": "kibKbnInferenceCommonPluginApi",
              "section": "def-common.ToolOptions",
              "text": "ToolOptions"
            },
            "<string> = ",
            {
              "pluginId": "@kbn/inference-common",
              "scope": "common",
              "docId": "kibKbnInferenceCommonPluginApi",
              "section": "def-common.ToolOptions",
              "text": "ToolOptions"
            },
            "<string>, TStream extends boolean = false>(options: ",
            {
              "pluginId": "@kbn/inference-common",
              "scope": "common",
              "docId": "kibKbnInferenceCommonPluginApi",
              "section": "def-common.ChatCompleteOptions",
              "text": "ChatCompleteOptions"
            },
            "<TToolOptions, TStream>) => ",
            {
              "pluginId": "@kbn/inference-common",
              "scope": "common",
              "docId": "kibKbnInferenceCommonPluginApi",
              "section": "def-common.ChatCompleteCompositeResponse",
              "text": "ChatCompleteCompositeResponse"
            },
            "<TToolOptions, TStream>"
          ],
          "path": "x-pack/platform/plugins/shared/inference/public/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "returnComment": [],
          "children": [
            {
              "parentPluginId": "inference",
              "id": "def-public.InferencePublicStart.chatComplete.$1",
              "type": "CompoundType",
              "tags": [],
              "label": "options",
              "description": [],
              "signature": [
                "{ connectorId: string; stream?: TStream | undefined; system?: string | undefined; messages: ",
                {
                  "pluginId": "@kbn/inference-common",
                  "scope": "common",
                  "docId": "kibKbnInferenceCommonPluginApi",
                  "section": "def-common.Message",
                  "text": "Message"
                },
                "[]; temperature?: number | undefined; modelName?: string | undefined; functionCalling?: ",
                {
                  "pluginId": "@kbn/inference-common",
                  "scope": "common",
                  "docId": "kibKbnInferenceCommonPluginApi",
                  "section": "def-common.FunctionCallingMode",
                  "text": "FunctionCallingMode"
                },
                " | undefined; abortSignal?: AbortSignal | undefined; metadata?: ",
                {
                  "pluginId": "@kbn/inference-common",
                  "scope": "common",
                  "docId": "kibKbnInferenceCommonPluginApi",
                  "section": "def-common.ChatCompleteMetadata",
                  "text": "ChatCompleteMetadata"
                },
                " | undefined; maxRetries?: number | undefined; retryConfiguration?: ",
                {
                  "pluginId": "@kbn/inference-common",
                  "scope": "common",
                  "docId": "kibKbnInferenceCommonPluginApi",
                  "section": "def-common.ChatCompleteRetryConfiguration",
                  "text": "ChatCompleteRetryConfiguration"
                },
                " | undefined; } & TToolOptions"
              ],
              "path": "x-pack/platform/packages/shared/ai-infra/inference-common/src/chat_complete/api.ts",
              "deprecated": false,
              "trackAdoption": false
            }
          ]
        },
        {
          "parentPluginId": "inference",
          "id": "def-public.InferencePublicStart.output",
          "type": "Function",
          "tags": [],
          "label": "output",
          "description": [],
          "signature": [
            "<TId extends string = string, TOutputSchema extends ",
            "ToolSchemaTypeObject",
            " | undefined = ",
            "ToolSchemaTypeObject",
            " | undefined, TStream extends boolean = false>(options: ",
            {
              "pluginId": "@kbn/inference-common",
              "scope": "common",
              "docId": "kibKbnInferenceCommonPluginApi",
              "section": "def-common.OutputOptions",
              "text": "OutputOptions"
            },
            "<TId, TOutputSchema, TStream>) => ",
            {
              "pluginId": "@kbn/inference-common",
              "scope": "common",
              "docId": "kibKbnInferenceCommonPluginApi",
              "section": "def-common.OutputCompositeResponse",
              "text": "OutputCompositeResponse"
            },
            "<TId, TOutputSchema, TStream>"
          ],
          "path": "x-pack/platform/plugins/shared/inference/public/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "returnComment": [],
          "children": [
            {
              "parentPluginId": "inference",
              "id": "def-public.InferencePublicStart.output.$1",
              "type": "Object",
              "tags": [],
              "label": "options",
              "description": [],
              "signature": [
                {
                  "pluginId": "@kbn/inference-common",
                  "scope": "common",
                  "docId": "kibKbnInferenceCommonPluginApi",
                  "section": "def-common.OutputOptions",
                  "text": "OutputOptions"
                },
                "<TId, TOutputSchema, TStream>"
              ],
              "path": "x-pack/platform/packages/shared/ai-infra/inference-common/src/output/api.ts",
              "deprecated": false,
              "trackAdoption": false
            }
          ]
        },
        {
          "parentPluginId": "inference",
          "id": "def-public.InferencePublicStart.getConnectors",
          "type": "Function",
          "tags": [],
          "label": "getConnectors",
          "description": [],
          "signature": [
            "() => Promise<",
            {
              "pluginId": "@kbn/inference-common",
              "scope": "common",
              "docId": "kibKbnInferenceCommonPluginApi",
              "section": "def-common.InferenceConnector",
              "text": "InferenceConnector"
            },
            "[]>"
          ],
          "path": "x-pack/platform/plugins/shared/inference/public/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [],
          "returnComment": []
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "inference",
        "id": "def-server.EsqlDocumentBase",
        "type": "Class",
        "tags": [],
        "label": "EsqlDocumentBase",
        "description": [],
        "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/doc_base/esql_doc_base.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-server.EsqlDocumentBase.load",
            "type": "Function",
            "tags": [],
            "label": "load",
            "description": [],
            "signature": [
              "() => Promise<",
              {
                "pluginId": "inference",
                "scope": "server",
                "docId": "kibInferencePluginApi",
                "section": "def-server.EsqlDocumentBase",
                "text": "EsqlDocumentBase"
              },
              ">"
            ],
            "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/doc_base/esql_doc_base.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "inference",
            "id": "def-server.EsqlDocumentBase.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/doc_base/esql_doc_base.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "inference",
                "id": "def-server.EsqlDocumentBase.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "rawData",
                "description": [],
                "signature": [
                  "EsqlDocData"
                ],
                "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/doc_base/esql_doc_base.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "inference",
            "id": "def-server.EsqlDocumentBase.getSystemMessage",
            "type": "Function",
            "tags": [],
            "label": "getSystemMessage",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/doc_base/esql_doc_base.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "inference",
            "id": "def-server.EsqlDocumentBase.getDocumentation",
            "type": "Function",
            "tags": [],
            "label": "getDocumentation",
            "description": [],
            "signature": [
              "(keywords: string[], { generateMissingKeywordDoc, addSuggestions, addOverview, resolveAliases, }?: ",
              "GetDocsOptions",
              ") => Record<string, string>"
            ],
            "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/doc_base/esql_doc_base.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "inference",
                "id": "def-server.EsqlDocumentBase.getDocumentation.$1",
                "type": "Array",
                "tags": [],
                "label": "keywords",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/doc_base/esql_doc_base.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "inference",
                "id": "def-server.EsqlDocumentBase.getDocumentation.$2",
                "type": "Object",
                "tags": [],
                "label": "{\n      generateMissingKeywordDoc = true,\n      addSuggestions = true,\n      addOverview = true,\n      resolveAliases = true,\n    }",
                "description": [],
                "signature": [
                  "GetDocsOptions"
                ],
                "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/doc_base/esql_doc_base.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "inference",
        "id": "def-server.naturalLanguageToEsql",
        "type": "Function",
        "tags": [],
        "label": "naturalLanguageToEsql",
        "description": [],
        "signature": [
          "({\n  client,\n  connectorId,\n  tools,\n  toolChoice,\n  logger,\n  functionCalling,\n  maxRetries,\n  retryConfiguration,\n  system,\n  metadata,\n  ...rest\n}: ",
          "NlToEsqlTaskParams",
          "<TToolOptions>) => ",
          "Observable",
          "<",
          "NlToEsqlTaskEvent",
          "<TToolOptions>>"
        ],
        "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/task.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-server.naturalLanguageToEsql.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{\n  client,\n  connectorId,\n  tools,\n  toolChoice,\n  logger,\n  functionCalling,\n  maxRetries,\n  retryConfiguration,\n  system,\n  metadata,\n  ...rest\n}",
            "description": [],
            "signature": [
              "NlToEsqlTaskParams",
              "<TToolOptions>"
            ],
            "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/task.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "inference",
        "id": "def-server.runAndValidateEsqlQuery",
        "type": "Function",
        "tags": [],
        "label": "runAndValidateEsqlQuery",
        "description": [],
        "signature": [
          "({\n  query,\n  client,\n}: { query: string; client: ",
          "ElasticsearchClient",
          "; }) => Promise<{ columns?: ",
          {
            "pluginId": "expressions",
            "scope": "common",
            "docId": "kibExpressionsPluginApi",
            "section": "def-common.DatatableColumn",
            "text": "DatatableColumn"
          },
          "[] | undefined; rows?: ",
          {
            "pluginId": "@kbn/es-types",
            "scope": "common",
            "docId": "kibKbnEsTypesPluginApi",
            "section": "def-common.ESQLRow",
            "text": "ESQLRow"
          },
          "[] | undefined; error?: Error | undefined; errorMessages?: string[] | undefined; }>"
        ],
        "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/validate_esql_query.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-server.runAndValidateEsqlQuery.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  query,\n  client,\n}",
            "description": [],
            "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/validate_esql_query.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "inference",
                "id": "def-server.runAndValidateEsqlQuery.$1.query",
                "type": "string",
                "tags": [],
                "label": "query",
                "description": [],
                "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/validate_esql_query.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "inference",
                "id": "def-server.runAndValidateEsqlQuery.$1.client",
                "type": "Object",
                "tags": [],
                "label": "client",
                "description": [],
                "signature": [
                  "{ create: { <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateResponse",
                  "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; }; get: { <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; }; delete: { (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; helpers: ",
                  "default",
                  "; search: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; }; name: string | symbol; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kConnector]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kEsql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kInference]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kProfiling]: symbol | null; [kQueryRules]: symbol | null; [kRollup]: symbol | null; [kSearchApplication]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSimulate]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kSynonyms]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
                  "default",
                  "; child: (opts: ",
                  "ClientOptions",
                  ") => ",
                  "default",
                  "; asyncSearch: ",
                  "default",
                  "; autoscaling: ",
                  "default",
                  "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "BulkResponse",
                  ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; }; capabilities: { (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TODO",
                  ">; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TODO",
                  ", unknown>>; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TODO",
                  ">; }; cat: ",
                  "default",
                  "; ccr: ",
                  "default",
                  "; clearScroll: { (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClearScrollResponse",
                  ", unknown>>; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; }; closePointInTime: { (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClosePointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; }; cluster: ",
                  "default",
                  "; connector: ",
                  "default",
                  "; count: { (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "CountResponse",
                  ", unknown>>; (this: That, params?: ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; }; danglingIndices: ",
                  "default",
                  "; deleteByQuery: { (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "DeleteByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; }; deleteByQueryRethrottle: { (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TasksTaskListResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; }; deleteScript: { (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; enrich: ",
                  "default",
                  "; eql: ",
                  "default",
                  "; esql: ",
                  "default",
                  "; exists: { (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ExplainResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; }; features: ",
                  "default",
                  "; fieldCaps: { (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "FieldCapsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "FieldCapsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; }; fleet: ",
                  "default",
                  "; getScript: { (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptResponse",
                  ", unknown>>; (this: That, params: ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; }; getScriptContext: { (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptContextResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; }; getScriptLanguages: { (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptLanguagesResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<TDocument>; }; graph: ",
                  "default",
                  "; healthReport: { (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "HealthReportResponse",
                  ">; (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "HealthReportResponse",
                  ", unknown>>; (this: That, params?: ",
                  "HealthReportRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "HealthReportResponse",
                  ">; }; ilm: ",
                  "default",
                  "; index: { <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; indices: ",
                  "default",
                  "; inference: ",
                  "default",
                  "; info: { (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "InfoResponse",
                  ", unknown>>; (this: That, params?: ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; }; ingest: ",
                  "default",
                  "; knnSearch: { (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TODO",
                  ">; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TODO",
                  ", unknown>>; (this: That, params?: ",
                  "TODO",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TODO",
                  ">; }; license: ",
                  "default",
                  "; logstash: ",
                  "default",
                  "; mget: { <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MgetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; }; migration: ",
                  "default",
                  "; ml: ",
                  "default",
                  "; monitoring: ",
                  "default",
                  "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MtermvectorsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; }; nodes: ",
                  "default",
                  "; openPointInTime: { (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "OpenPointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; }; ping: { (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params?: ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; profiling: ",
                  "default",
                  "; putScript: { (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; queryRules: ",
                  "default",
                  "; rankEval: { (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RankEvalResponse",
                  ", unknown>>; (this: That, params: ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; }; reindex: { (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; }; reindexRethrottle: { (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; }; renderSearchTemplate: { (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RenderSearchTemplateResponse",
                  ", unknown>>; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; }; rollup: ",
                  "default",
                  "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; }; searchApplication: ",
                  "default",
                  "; searchMvt: { (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<ArrayBuffer, unknown>>; (this: That, params: ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchShardsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchTemplateResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; }; searchableSnapshots: ",
                  "default",
                  "; security: ",
                  "default",
                  "; shutdown: ",
                  "default",
                  "; simulate: ",
                  "default",
                  "; slm: ",
                  "default",
                  "; snapshot: ",
                  "default",
                  "; sql: ",
                  "default",
                  "; ssl: ",
                  "default",
                  "; synonyms: ",
                  "default",
                  "; tasks: ",
                  "default",
                  "; termsEnum: { (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermsEnumResponse",
                  ", unknown>>; (this: That, params: ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermvectorsResponse",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; }; textStructure: ",
                  "default",
                  "; transform: ",
                  "default",
                  "; updateByQuery: { (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; }; updateByQueryRethrottle: { (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; }; watcher: ",
                  "default",
                  "; xpack: ",
                  "default",
                  "; }"
                ],
                "path": "x-pack/platform/plugins/shared/inference/server/tasks/nl_to_esql/validate_esql_query.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": [],
    "setup": {
      "parentPluginId": "inference",
      "id": "def-server.InferenceServerSetup",
      "type": "Interface",
      "tags": [],
      "label": "InferenceServerSetup",
      "description": [
        "\nSetup contract of the inference plugin."
      ],
      "path": "x-pack/platform/plugins/shared/inference/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "inference",
      "id": "def-server.InferenceServerStart",
      "type": "Interface",
      "tags": [],
      "label": "InferenceServerStart",
      "description": [
        "\nStart contract of the inference plugin, exposing APIs to interact with LLMs."
      ],
      "path": "x-pack/platform/plugins/shared/inference/server/types.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "inference",
          "id": "def-server.InferenceServerStart.getClient",
          "type": "Function",
          "tags": [],
          "label": "getClient",
          "description": [
            "\nCreates an {@link InferenceClient}, scoped to a request.\n"
          ],
          "signature": [
            "<T extends ",
            "InferenceClientCreateOptions",
            ">(options: T) => T extends ",
            "InferenceBoundClientCreateOptions",
            " ? ",
            {
              "pluginId": "@kbn/inference-common",
              "scope": "common",
              "docId": "kibKbnInferenceCommonPluginApi",
              "section": "def-common.BoundInferenceClient",
              "text": "BoundInferenceClient"
            },
            " : ",
            {
              "pluginId": "@kbn/inference-common",
              "scope": "common",
              "docId": "kibKbnInferenceCommonPluginApi",
              "section": "def-common.InferenceClient",
              "text": "InferenceClient"
            }
          ],
          "path": "x-pack/platform/plugins/shared/inference/server/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "inference",
              "id": "def-server.InferenceServerStart.getClient.$1",
              "type": "Uncategorized",
              "tags": [],
              "label": "options",
              "description": [],
              "signature": [
                "T"
              ],
              "path": "x-pack/platform/plugins/shared/inference/server/types.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        },
        {
          "parentPluginId": "inference",
          "id": "def-server.InferenceServerStart.getChatModel",
          "type": "Function",
          "tags": [],
          "label": "getChatModel",
          "description": [
            "\nCreates a langchain {@link InferenceChatModel} that will be using the inference framework\nunder the hood.\n"
          ],
          "signature": [
            "(options: ",
            "CreateChatModelOptions",
            ") => Promise<",
            {
              "pluginId": "@kbn/inference-langchain",
              "scope": "common",
              "docId": "kibKbnInferenceLangchainPluginApi",
              "section": "def-common.InferenceChatModel",
              "text": "InferenceChatModel"
            },
            ">"
          ],
          "path": "x-pack/platform/plugins/shared/inference/server/types.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "inference",
              "id": "def-server.InferenceServerStart.getChatModel.$1",
              "type": "Object",
              "tags": [],
              "label": "options",
              "description": [],
              "signature": [
                "CreateChatModelOptions"
              ],
              "path": "x-pack/platform/plugins/shared/inference/server/types.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "inference",
        "id": "def-common.correctCommonEsqlMistakes",
        "type": "Function",
        "tags": [],
        "label": "correctCommonEsqlMistakes",
        "description": [
          "\nCorrect some common ES|QL syntax and grammar mistakes that LLM can potentially do.\n\nCorrecting the query is done in two steps:\n1. we try to correct the *syntax*, without AST (given it requires a valid syntax)\n2. we try to correct the *grammar*, using AST this time."
        ],
        "signature": [
          "(query: string) => { input: string; output: string; isCorrection: boolean; }"
        ],
        "path": "x-pack/platform/plugins/shared/inference/common/tasks/nl_to_esql/correct_esql_query.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-common.correctCommonEsqlMistakes.$1",
            "type": "string",
            "tags": [],
            "label": "query",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/platform/plugins/shared/inference/common/tasks/nl_to_esql/correct_esql_query.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "inference",
        "id": "def-common.createOutputApi",
        "type": "Function",
        "tags": [],
        "label": "createOutputApi",
        "description": [],
        "signature": [
          "(chatCompleteApi: ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.ChatCompleteAPI",
            "text": "ChatCompleteAPI"
          },
          ") => ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.OutputAPI",
            "text": "OutputAPI"
          }
        ],
        "path": "x-pack/platform/plugins/shared/inference/common/output/create_output_api.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-common.createOutputApi.$1",
            "type": "Function",
            "tags": [],
            "label": "chatCompleteApi",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/inference-common",
                "scope": "common",
                "docId": "kibKbnInferenceCommonPluginApi",
                "section": "def-common.ChatCompleteAPI",
                "text": "ChatCompleteAPI"
              }
            ],
            "path": "x-pack/platform/plugins/shared/inference/common/output/create_output_api.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "inference",
        "id": "def-common.createOutputApi",
        "type": "Function",
        "tags": [],
        "label": "createOutputApi",
        "description": [],
        "signature": [
          "(chatCompleteApi: ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.ChatCompleteAPI",
            "text": "ChatCompleteAPI"
          },
          ") => ({ id, connectorId, input, schema, system, previousMessages, modelName, functionCalling, stream, abortSignal, maxRetries, retryConfiguration, metadata, retry, }: DefaultOutputOptions) => Promise<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.OutputResponse",
            "text": "OutputResponse"
          },
          "<string, ",
          "AugmentedRequired",
          "<{ [x: string]: string | number | boolean | ",
          "AugmentedRequired",
          "<any, never> | FromToolSchemaArray<ToolSchemaTypeArray> | undefined; }, never> | undefined>> | ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.OutputStreamResponse",
            "text": "OutputStreamResponse"
          },
          "<string, ",
          "ToolSchemaTypeObject",
          " | undefined>"
        ],
        "path": "x-pack/platform/plugins/shared/inference/common/output/create_output_api.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-common.createOutputApi.$1",
            "type": "Function",
            "tags": [],
            "label": "chatCompleteApi",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/inference-common",
                "scope": "common",
                "docId": "kibKbnInferenceCommonPluginApi",
                "section": "def-common.ChatCompleteAPI",
                "text": "ChatCompleteAPI"
              }
            ],
            "path": "x-pack/platform/plugins/shared/inference/common/output/create_output_api.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "inference",
        "id": "def-common.createRestClient",
        "type": "Function",
        "tags": [],
        "label": "createRestClient",
        "description": [],
        "signature": [
          "(options: UnboundOptions) => ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.InferenceClient",
            "text": "InferenceClient"
          }
        ],
        "path": "x-pack/platform/plugins/shared/inference/common/rest/create_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-common.createRestClient.$1",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "UnboundOptions"
            ],
            "path": "x-pack/platform/plugins/shared/inference/common/rest/create_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "inference",
        "id": "def-common.createRestClient",
        "type": "Function",
        "tags": [],
        "label": "createRestClient",
        "description": [],
        "signature": [
          "(options: BoundOptions) => ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.BoundInferenceClient",
            "text": "BoundInferenceClient"
          }
        ],
        "path": "x-pack/platform/plugins/shared/inference/common/rest/create_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-common.createRestClient.$1",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "BoundOptions"
            ],
            "path": "x-pack/platform/plugins/shared/inference/common/rest/create_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "inference",
        "id": "def-common.createRestClient",
        "type": "Function",
        "tags": [],
        "label": "createRestClient",
        "description": [],
        "signature": [
          "(options: UnboundOptions | BoundOptions) => ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.BoundInferenceClient",
            "text": "BoundInferenceClient"
          },
          " | ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.InferenceClient",
            "text": "InferenceClient"
          }
        ],
        "path": "x-pack/platform/plugins/shared/inference/common/rest/create_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-common.createRestClient.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "UnboundOptions | BoundOptions"
            ],
            "path": "x-pack/platform/plugins/shared/inference/common/rest/create_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "inference",
        "id": "def-common.generateFakeToolCallId",
        "type": "Function",
        "tags": [],
        "label": "generateFakeToolCallId",
        "description": [],
        "signature": [
          "() => string"
        ],
        "path": "x-pack/platform/plugins/shared/inference/common/utils/generate_fake_tool_call_id.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "inference",
        "id": "def-common.splitIntoCommands",
        "type": "Function",
        "tags": [],
        "label": "splitIntoCommands",
        "description": [],
        "signature": [
          "(query: string) => { name: string | undefined; command: string; }[]"
        ],
        "path": "x-pack/platform/plugins/shared/inference/common/tasks/nl_to_esql/non_ast/correct_common_esql_mistakes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-common.splitIntoCommands.$1",
            "type": "string",
            "tags": [],
            "label": "query",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/platform/plugins/shared/inference/common/tasks/nl_to_esql/non_ast/correct_common_esql_mistakes.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "inference",
        "id": "def-common.GetConnectorsResponseBody",
        "type": "Interface",
        "tags": [],
        "label": "GetConnectorsResponseBody",
        "description": [],
        "path": "x-pack/platform/plugins/shared/inference/common/http_apis.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "inference",
            "id": "def-common.GetConnectorsResponseBody.connectors",
            "type": "Array",
            "tags": [],
            "label": "connectors",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/inference-common",
                "scope": "common",
                "docId": "kibKbnInferenceCommonPluginApi",
                "section": "def-common.InferenceConnector",
                "text": "InferenceConnector"
              },
              "[]"
            ],
            "path": "x-pack/platform/plugins/shared/inference/common/http_apis.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "inference",
        "id": "def-common.ChatCompleteRequestBody",
        "type": "Type",
        "tags": [],
        "label": "ChatCompleteRequestBody",
        "description": [],
        "signature": [
          "ChatCompleteRequestBodyBase",
          " & { system?: string | undefined; messages: ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.Message",
            "text": "Message"
          },
          "[]; } & ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.ToolOptions",
            "text": "ToolOptions"
          },
          "<string>"
        ],
        "path": "x-pack/platform/plugins/shared/inference/common/http_apis.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "inference",
        "id": "def-common.PromptRequestBody",
        "type": "Type",
        "tags": [],
        "label": "PromptRequestBody",
        "description": [],
        "signature": [
          "ChatCompleteRequestBodyBase",
          " & { prompt: Omit<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.Prompt",
            "text": "Prompt"
          },
          "<any, ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.PromptVersion",
            "text": "PromptVersion"
          },
          "<",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.ToolOptions",
            "text": "ToolOptions"
          },
          "<string>>[]>, \"input\">; prevMessages?: ",
          {
            "pluginId": "@kbn/inference-common",
            "scope": "common",
            "docId": "kibKbnInferenceCommonPluginApi",
            "section": "def-common.Message",
            "text": "Message"
          },
          "[] | undefined; input?: unknown; }"
        ],
        "path": "x-pack/platform/plugins/shared/inference/common/http_apis.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  }
}