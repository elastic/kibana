{
  "id": "observability",
  "client": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "observability",
        "id": "def-public.ActionMenu",
        "type": "Function",
        "tags": [],
        "label": "ActionMenu",
        "description": [],
        "signature": [
          "(props: Props) => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ActionMenu.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "Props"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ActionMenuDivider",
        "type": "Function",
        "tags": [],
        "label": "ActionMenuDivider",
        "description": [],
        "signature": [
          "() => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.convertTo",
        "type": "Function",
        "tags": [],
        "label": "convertTo",
        "description": [
          "\nConverts a microseconds value into the unit defined."
        ],
        "signature": [
          "({\n  unit,\n  microseconds,\n  defaultValue = NOT_AVAILABLE_LABEL,\n  extended,\n}: { unit: DurationTimeUnit; microseconds: ",
          "Maybe",
          "<number>; defaultValue?: string | undefined; extended?: boolean | undefined; }) => ConvertedDuration"
        ],
        "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.convertTo.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  unit,\n  microseconds,\n  defaultValue = NOT_AVAILABLE_LABEL,\n  extended,\n}",
            "description": [],
            "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.convertTo.$1.unit",
                "type": "CompoundType",
                "tags": [],
                "label": "unit",
                "description": [],
                "signature": [
                  "\"microseconds\" | ",
                  "TimeUnit"
                ],
                "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-public.convertTo.$1.microseconds",
                "type": "CompoundType",
                "tags": [],
                "label": "microseconds",
                "description": [],
                "signature": [
                  "number | null | undefined"
                ],
                "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-public.convertTo.$1.defaultValue",
                "type": "string",
                "tags": [],
                "label": "defaultValue",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-public.convertTo.$1.extended",
                "type": "CompoundType",
                "tags": [],
                "label": "extended",
                "description": [],
                "signature": [
                  "boolean | undefined"
                ],
                "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.createEsParams",
        "type": "Function",
        "tags": [],
        "label": "createEsParams",
        "description": [],
        "signature": [
          "(params: T) => T"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_es_search.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.createEsParams.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "params",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_es_search.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.createExploratoryViewUrl",
        "type": "Function",
        "tags": [],
        "label": "createExploratoryViewUrl",
        "description": [],
        "signature": [
          "({ reportType, allSeries }: { reportType: ",
          "ReportViewType",
          "; allSeries: ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.AllSeries",
            "text": "AllSeries"
          },
          "; }, baseHref: string, appId: string) => string"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/exploratory_view_url.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.createExploratoryViewUrl.$1",
            "type": "Object",
            "tags": [],
            "label": "{ reportType, allSeries }",
            "description": [],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/exploratory_view_url.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.createExploratoryViewUrl.$1.reportType",
                "type": "CompoundType",
                "tags": [],
                "label": "reportType",
                "description": [],
                "signature": [
                  "\"heatmap\" | \"data-distribution\" | \"kpi-over-time\" | \"core-web-vitals\" | \"device-data-distribution\" | \"single-metric\""
                ],
                "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/exploratory_view_url.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-public.createExploratoryViewUrl.$1.allSeries",
                "type": "Array",
                "tags": [],
                "label": "allSeries",
                "description": [],
                "signature": [
                  {
                    "pluginId": "observability",
                    "scope": "public",
                    "docId": "kibObservabilityPluginApi",
                    "section": "def-public.SeriesUrl",
                    "text": "SeriesUrl"
                  },
                  "[]"
                ],
                "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/exploratory_view_url.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.createExploratoryViewUrl.$2",
            "type": "string",
            "tags": [],
            "label": "baseHref",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/exploratory_view_url.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.createExploratoryViewUrl.$3",
            "type": "string",
            "tags": [],
            "label": "appId",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/exploratory_view_url.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.createObservabilityRuleTypeRegistryMock",
        "type": "Function",
        "tags": [],
        "label": "createObservabilityRuleTypeRegistryMock",
        "description": [],
        "signature": [
          "() => { register: (type: ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.ObservabilityRuleTypeModel",
            "text": "ObservabilityRuleTypeModel"
          },
          "<any>) => void; getFormatter: (typeId: string) => ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.ObservabilityRuleTypeFormatter",
            "text": "ObservabilityRuleTypeFormatter"
          },
          " | undefined; list: () => string[]; } & { getFormatter: () => () => string; registerFormatter: () => void; list: () => string[]; }"
        ],
        "path": "x-pack/plugins/observability/public/rules/observability_rule_type_registry_mock.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.createUseRulesLink",
        "type": "Function",
        "tags": [],
        "label": "createUseRulesLink",
        "description": [],
        "signature": [
          "() => (options?: ",
          "Options",
          ") => ",
          "LinkProps"
        ],
        "path": "x-pack/plugins/observability/public/hooks/create_use_rules_link.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.DatePicker",
        "type": "Function",
        "tags": [],
        "label": "DatePicker",
        "description": [],
        "signature": [
          "(props: ",
          "DatePickerProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.DatePicker.$1",
            "type": "Object",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "DatePickerProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.DatePickerContextProvider",
        "type": "Function",
        "tags": [],
        "label": "DatePickerContextProvider",
        "description": [],
        "signature": [
          "({ children }: { children: React.ReactElement<any, string | React.JSXElementConstructor<any>>; }) => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/context/date_picker_context.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.DatePickerContextProvider.$1",
            "type": "Object",
            "tags": [],
            "label": "{ children }",
            "description": [],
            "path": "x-pack/plugins/observability/public/context/date_picker_context.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.DatePickerContextProvider.$1.children",
                "type": "Object",
                "tags": [],
                "label": "children",
                "description": [],
                "signature": [
                  "React.ReactElement<any, string | React.JSXElementConstructor<any>>"
                ],
                "path": "x-pack/plugins/observability/public/context/date_picker_context.tsx",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ExploratoryView",
        "type": "Function",
        "tags": [],
        "label": "ExploratoryView",
        "description": [],
        "signature": [
          "(props: ",
          "ExploratoryViewPageProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryView.$1",
            "type": "Object",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "ExploratoryViewPageProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ExploratoryViewContextProvider",
        "type": "Function",
        "tags": [],
        "label": "ExploratoryViewContextProvider",
        "description": [],
        "signature": [
          "({\n  children,\n  reportTypes,\n  dataTypes,\n  reportConfigMap,\n  setHeaderActionMenu,\n  asPanel = true,\n  theme$,\n}: { children: JSX.Element; } & ExploratoryViewContextValue) => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/contexts/exploratory_view_config.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryViewContextProvider.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{\n  children,\n  reportTypes,\n  dataTypes,\n  reportConfigMap,\n  setHeaderActionMenu,\n  asPanel = true,\n  theme$,\n}",
            "description": [],
            "signature": [
              "{ children: JSX.Element; } & ExploratoryViewContextValue"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/contexts/exploratory_view_config.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.FieldValueSelection",
        "type": "Function",
        "tags": [],
        "label": "FieldValueSelection",
        "description": [],
        "signature": [
          "(props: ",
          "FieldValueSelectionProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.FieldValueSelection.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "FieldValueSelectionProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.FieldValueSuggestions",
        "type": "Function",
        "tags": [],
        "label": "FieldValueSuggestions",
        "description": [],
        "signature": [
          "(props: ",
          "FieldValueSuggestionsProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.FieldValueSuggestions.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "FieldValueSuggestionsProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.FilterValueLabel",
        "type": "Function",
        "tags": [],
        "label": "FilterValueLabel",
        "description": [],
        "signature": [
          "(props: ",
          "FilterValueLabelProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.FilterValueLabel.$1",
            "type": "Object",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "FilterValueLabelProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.fromQuery",
        "type": "Function",
        "tags": [],
        "label": "fromQuery",
        "description": [],
        "signature": [
          "(query: Record<string, any>) => string"
        ],
        "path": "x-pack/plugins/observability/public/utils/url.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.fromQuery.$1",
            "type": "Object",
            "tags": [],
            "label": "query",
            "description": [],
            "signature": [
              "Record<string, any>"
            ],
            "path": "x-pack/plugins/observability/public/utils/url.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.getApmTraceUrl",
        "type": "Function",
        "tags": [],
        "label": "getApmTraceUrl",
        "description": [],
        "signature": [
          "({\n  traceId,\n  rangeFrom,\n  rangeTo,\n}: { traceId: string; rangeFrom: string; rangeTo: string; }) => string"
        ],
        "path": "x-pack/plugins/observability/public/utils/get_apm_trace_url.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.getApmTraceUrl.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  traceId,\n  rangeFrom,\n  rangeTo,\n}",
            "description": [],
            "path": "x-pack/plugins/observability/public/utils/get_apm_trace_url.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.getApmTraceUrl.$1.traceId",
                "type": "string",
                "tags": [],
                "label": "traceId",
                "description": [],
                "path": "x-pack/plugins/observability/public/utils/get_apm_trace_url.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-public.getApmTraceUrl.$1.rangeFrom",
                "type": "string",
                "tags": [],
                "label": "rangeFrom",
                "description": [],
                "path": "x-pack/plugins/observability/public/utils/get_apm_trace_url.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-public.getApmTraceUrl.$1.rangeTo",
                "type": "string",
                "tags": [],
                "label": "rangeTo",
                "description": [],
                "path": "x-pack/plugins/observability/public/utils/get_apm_trace_url.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.getCoreVitalsComponent",
        "type": "Function",
        "tags": [],
        "label": "getCoreVitalsComponent",
        "description": [],
        "signature": [
          "(props: ",
          "CoreVitalProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.getCoreVitalsComponent.$1",
            "type": "Object",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "CoreVitalProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.HeaderMenuPortal",
        "type": "Function",
        "tags": [],
        "label": "HeaderMenuPortal",
        "description": [],
        "signature": [
          "(props: ",
          "HeaderMenuPortalProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.HeaderMenuPortal.$1",
            "type": "Object",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "HeaderMenuPortalProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.InspectorContextProvider",
        "type": "Function",
        "tags": [],
        "label": "InspectorContextProvider",
        "description": [],
        "signature": [
          "({ children }: { children: React.ReactNode; }) => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/context/inspector/inspector_context.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.InspectorContextProvider.$1",
            "type": "Object",
            "tags": [],
            "label": "{ children }",
            "description": [],
            "path": "x-pack/plugins/observability/public/context/inspector/inspector_context.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.InspectorContextProvider.$1.children",
                "type": "CompoundType",
                "tags": [],
                "label": "children",
                "description": [],
                "signature": [
                  "boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined"
                ],
                "path": "x-pack/plugins/observability/public/context/inspector/inspector_context.tsx",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.LazyAlertsFlyout",
        "type": "Function",
        "tags": [],
        "label": "LazyAlertsFlyout",
        "description": [],
        "signature": [
          "React.ExoticComponent<Pick<{ alert?: ",
          "TopAlert",
          "<{}> | undefined; alerts?: Record<string, unknown>[] | undefined; isInApp?: boolean | undefined; observabilityRuleTypeRegistry: { register: (type: ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.ObservabilityRuleTypeModel",
            "text": "ObservabilityRuleTypeModel"
          },
          "<any>) => void; getFormatter: (typeId: string) => ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.ObservabilityRuleTypeFormatter",
            "text": "ObservabilityRuleTypeFormatter"
          },
          " | undefined; list: () => string[]; }; selectedAlertId?: string | undefined; } & ",
          "CommonProps",
          " & { as?: \"div\" | undefined; } & _EuiFlyoutProps & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, keyof _EuiFlyoutProps> & Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, \"key\" | keyof React.HTMLAttributes<HTMLDivElement> | \"css\"> & { ref?: React.RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined; }, \"children\" | \"ref\" | \"type\" | \"onError\" | \"hidden\" | \"color\" | \"id\" | \"className\" | \"size\" | \"title\" | \"onChange\" | \"onKeyDown\" | \"onClick\" | \"placeholder\" | \"security\" | \"key\" | \"defaultValue\" | \"lang\" | \"defaultChecked\" | \"suppressContentEditableWarning\" | \"suppressHydrationWarning\" | \"accessKey\" | \"contentEditable\" | \"contextMenu\" | \"dir\" | \"draggable\" | \"slot\" | \"spellCheck\" | \"style\" | \"tabIndex\" | \"translate\" | \"radioGroup\" | \"role\" | \"about\" | \"datatype\" | \"inlist\" | \"prefix\" | \"property\" | \"resource\" | \"typeof\" | \"vocab\" | \"autoCapitalize\" | \"autoCorrect\" | \"autoSave\" | \"itemProp\" | \"itemScope\" | \"itemType\" | \"itemID\" | \"itemRef\" | \"results\" | \"unselectable\" | \"inputMode\" | \"is\" | \"aria-activedescendant\" | \"aria-atomic\" | \"aria-autocomplete\" | \"aria-busy\" | \"aria-checked\" | \"aria-colcount\" | \"aria-colindex\" | \"aria-colspan\" | \"aria-controls\" | \"aria-current\" | \"aria-describedby\" | \"aria-details\" | \"aria-disabled\" | \"aria-dropeffect\" | \"aria-errormessage\" | \"aria-expanded\" | \"aria-flowto\" | \"aria-grabbed\" | \"aria-haspopup\" | \"aria-hidden\" | \"aria-invalid\" | \"aria-keyshortcuts\" | \"aria-label\" | \"aria-labelledby\" | \"aria-level\" | \"aria-live\" | \"aria-modal\" | \"aria-multiline\" | \"aria-multiselectable\" | \"aria-orientation\" | \"aria-owns\" | \"aria-placeholder\" | \"aria-posinset\" | \"aria-pressed\" | \"aria-readonly\" | \"aria-relevant\" | \"aria-required\" | \"aria-roledescription\" | \"aria-rowcount\" | \"aria-rowindex\" | \"aria-rowspan\" | \"aria-selected\" | \"aria-setsize\" | \"aria-sort\" | \"aria-valuemax\" | \"aria-valuemin\" | \"aria-valuenow\" | \"aria-valuetext\" | \"dangerouslySetInnerHTML\" | \"onCopy\" | \"onCopyCapture\" | \"onCut\" | \"onCutCapture\" | \"onPaste\" | \"onPasteCapture\" | \"onCompositionEnd\" | \"onCompositionEndCapture\" | \"onCompositionStart\" | \"onCompositionStartCapture\" | \"onCompositionUpdate\" | \"onCompositionUpdateCapture\" | \"onFocus\" | \"onFocusCapture\" | \"onBlur\" | \"onBlurCapture\" | \"onChangeCapture\" | \"onBeforeInput\" | \"onBeforeInputCapture\" | \"onInput\" | \"onInputCapture\" | \"onReset\" | \"onResetCapture\" | \"onSubmit\" | \"onSubmitCapture\" | \"onInvalid\" | \"onInvalidCapture\" | \"onLoad\" | \"onLoadCapture\" | \"onErrorCapture\" | \"onKeyDownCapture\" | \"onKeyPress\" | \"onKeyPressCapture\" | \"onKeyUp\" | \"onKeyUpCapture\" | \"onAbort\" | \"onAbortCapture\" | \"onCanPlay\" | \"onCanPlayCapture\" | \"onCanPlayThrough\" | \"onCanPlayThroughCapture\" | \"onDurationChange\" | \"onDurationChangeCapture\" | \"onEmptied\" | \"onEmptiedCapture\" | \"onEncrypted\" | \"onEncryptedCapture\" | \"onEnded\" | \"onEndedCapture\" | \"onLoadedData\" | \"onLoadedDataCapture\" | \"onLoadedMetadata\" | \"onLoadedMetadataCapture\" | \"onLoadStart\" | \"onLoadStartCapture\" | \"onPause\" | \"onPauseCapture\" | \"onPlay\" | \"onPlayCapture\" | \"onPlaying\" | \"onPlayingCapture\" | \"onProgress\" | \"onProgressCapture\" | \"onRateChange\" | \"onRateChangeCapture\" | \"onSeeked\" | \"onSeekedCapture\" | \"onSeeking\" | \"onSeekingCapture\" | \"onStalled\" | \"onStalledCapture\" | \"onSuspend\" | \"onSuspendCapture\" | \"onTimeUpdate\" | \"onTimeUpdateCapture\" | \"onVolumeChange\" | \"onVolumeChangeCapture\" | \"onWaiting\" | \"onWaitingCapture\" | \"onAuxClick\" | \"onAuxClickCapture\" | \"onClickCapture\" | \"onContextMenu\" | \"onContextMenuCapture\" | \"onDoubleClick\" | \"onDoubleClickCapture\" | \"onDrag\" | \"onDragCapture\" | \"onDragEnd\" | \"onDragEndCapture\" | \"onDragEnter\" | \"onDragEnterCapture\" | \"onDragExit\" | \"onDragExitCapture\" | \"onDragLeave\" | \"onDragLeaveCapture\" | \"onDragOver\" | \"onDragOverCapture\" | \"onDragStart\" | \"onDragStartCapture\" | \"onDrop\" | \"onDropCapture\" | \"onMouseDown\" | \"onMouseDownCapture\" | \"onMouseEnter\" | \"onMouseLeave\" | \"onMouseMove\" | \"onMouseMoveCapture\" | \"onMouseOut\" | \"onMouseOutCapture\" | \"onMouseOver\" | \"onMouseOverCapture\" | \"onMouseUp\" | \"onMouseUpCapture\" | \"onSelect\" | \"onSelectCapture\" | \"onTouchCancel\" | \"onTouchCancelCapture\" | \"onTouchEnd\" | \"onTouchEndCapture\" | \"onTouchMove\" | \"onTouchMoveCapture\" | \"onTouchStart\" | \"onTouchStartCapture\" | \"onPointerDown\" | \"onPointerDownCapture\" | \"onPointerMove\" | \"onPointerMoveCapture\" | \"onPointerUp\" | \"onPointerUpCapture\" | \"onPointerCancel\" | \"onPointerCancelCapture\" | \"onPointerEnter\" | \"onPointerEnterCapture\" | \"onPointerLeave\" | \"onPointerLeaveCapture\" | \"onPointerOver\" | \"onPointerOverCapture\" | \"onPointerOut\" | \"onPointerOutCapture\" | \"onGotPointerCapture\" | \"onGotPointerCaptureCapture\" | \"onLostPointerCapture\" | \"onLostPointerCaptureCapture\" | \"onScroll\" | \"onScrollCapture\" | \"onWheel\" | \"onWheelCapture\" | \"onAnimationStart\" | \"onAnimationStartCapture\" | \"onAnimationEnd\" | \"onAnimationEndCapture\" | \"onAnimationIteration\" | \"onAnimationIterationCapture\" | \"onTransitionEnd\" | \"onTransitionEndCapture\" | \"onClose\" | \"data-test-subj\" | \"css\" | \"as\" | \"paddingSize\" | \"focusTrapProps\" | \"ownFocus\" | \"maxWidth\" | \"hideCloseButton\" | \"closeButtonAriaLabel\" | \"closeButtonProps\" | \"closeButtonPosition\" | \"maskProps\" | \"outsideClickCloses\" | \"side\" | \"pushMinBreakpoint\">, \"children\" | \"type\" | \"onError\" | \"hidden\" | \"color\" | \"id\" | \"alert\" | \"className\" | \"size\" | \"title\" | \"onChange\" | \"onKeyDown\" | \"onClick\" | \"placeholder\" | \"security\" | \"key\" | \"defaultValue\" | \"lang\" | \"defaultChecked\" | \"suppressContentEditableWarning\" | \"suppressHydrationWarning\" | \"accessKey\" | \"contentEditable\" | \"contextMenu\" | \"dir\" | \"draggable\" | \"slot\" | \"spellCheck\" | \"style\" | \"tabIndex\" | \"translate\" | \"radioGroup\" | \"role\" | \"about\" | \"datatype\" | \"inlist\" | \"prefix\" | \"property\" | \"resource\" | \"typeof\" | \"vocab\" | \"autoCapitalize\" | \"autoCorrect\" | \"autoSave\" | \"itemProp\" | \"itemScope\" | \"itemType\" | \"itemID\" | \"itemRef\" | \"results\" | \"unselectable\" | \"inputMode\" | \"is\" | \"aria-activedescendant\" | \"aria-atomic\" | \"aria-autocomplete\" | \"aria-busy\" | \"aria-checked\" | \"aria-colcount\" | \"aria-colindex\" | \"aria-colspan\" | \"aria-controls\" | \"aria-current\" | \"aria-describedby\" | \"aria-details\" | \"aria-disabled\" | \"aria-dropeffect\" | \"aria-errormessage\" | \"aria-expanded\" | \"aria-flowto\" | \"aria-grabbed\" | \"aria-haspopup\" | \"aria-hidden\" | \"aria-invalid\" | \"aria-keyshortcuts\" | \"aria-label\" | \"aria-labelledby\" | \"aria-level\" | \"aria-live\" | \"aria-modal\" | \"aria-multiline\" | \"aria-multiselectable\" | \"aria-orientation\" | \"aria-owns\" | \"aria-placeholder\" | \"aria-posinset\" | \"aria-pressed\" | \"aria-readonly\" | \"aria-relevant\" | \"aria-required\" | \"aria-roledescription\" | \"aria-rowcount\" | \"aria-rowindex\" | \"aria-rowspan\" | \"aria-selected\" | \"aria-setsize\" | \"aria-sort\" | \"aria-valuemax\" | \"aria-valuemin\" | \"aria-valuenow\" | \"aria-valuetext\" | \"dangerouslySetInnerHTML\" | \"onCopy\" | \"onCopyCapture\" | \"onCut\" | \"onCutCapture\" | \"onPaste\" | \"onPasteCapture\" | \"onCompositionEnd\" | \"onCompositionEndCapture\" | \"onCompositionStart\" | \"onCompositionStartCapture\" | \"onCompositionUpdate\" | \"onCompositionUpdateCapture\" | \"onFocus\" | \"onFocusCapture\" | \"onBlur\" | \"onBlurCapture\" | \"onChangeCapture\" | \"onBeforeInput\" | \"onBeforeInputCapture\" | \"onInput\" | \"onInputCapture\" | \"onReset\" | \"onResetCapture\" | \"onSubmit\" | \"onSubmitCapture\" | \"onInvalid\" | \"onInvalidCapture\" | \"onLoad\" | \"onLoadCapture\" | \"onErrorCapture\" | \"onKeyDownCapture\" | \"onKeyPress\" | \"onKeyPressCapture\" | \"onKeyUp\" | \"onKeyUpCapture\" | \"onAbort\" | \"onAbortCapture\" | \"onCanPlay\" | \"onCanPlayCapture\" | \"onCanPlayThrough\" | \"onCanPlayThroughCapture\" | \"onDurationChange\" | \"onDurationChangeCapture\" | \"onEmptied\" | \"onEmptiedCapture\" | \"onEncrypted\" | \"onEncryptedCapture\" | \"onEnded\" | \"onEndedCapture\" | \"onLoadedData\" | \"onLoadedDataCapture\" | \"onLoadedMetadata\" | \"onLoadedMetadataCapture\" | \"onLoadStart\" | \"onLoadStartCapture\" | \"onPause\" | \"onPauseCapture\" | \"onPlay\" | \"onPlayCapture\" | \"onPlaying\" | \"onPlayingCapture\" | \"onProgress\" | \"onProgressCapture\" | \"onRateChange\" | \"onRateChangeCapture\" | \"onSeeked\" | \"onSeekedCapture\" | \"onSeeking\" | \"onSeekingCapture\" | \"onStalled\" | \"onStalledCapture\" | \"onSuspend\" | \"onSuspendCapture\" | \"onTimeUpdate\" | \"onTimeUpdateCapture\" | \"onVolumeChange\" | \"onVolumeChangeCapture\" | \"onWaiting\" | \"onWaitingCapture\" | \"onAuxClick\" | \"onAuxClickCapture\" | \"onClickCapture\" | \"onContextMenu\" | \"onContextMenuCapture\" | \"onDoubleClick\" | \"onDoubleClickCapture\" | \"onDrag\" | \"onDragCapture\" | \"onDragEnd\" | \"onDragEndCapture\" | \"onDragEnter\" | \"onDragEnterCapture\" | \"onDragExit\" | \"onDragExitCapture\" | \"onDragLeave\" | \"onDragLeaveCapture\" | \"onDragOver\" | \"onDragOverCapture\" | \"onDragStart\" | \"onDragStartCapture\" | \"onDrop\" | \"onDropCapture\" | \"onMouseDown\" | \"onMouseDownCapture\" | \"onMouseEnter\" | \"onMouseLeave\" | \"onMouseMove\" | \"onMouseMoveCapture\" | \"onMouseOut\" | \"onMouseOutCapture\" | \"onMouseOver\" | \"onMouseOverCapture\" | \"onMouseUp\" | \"onMouseUpCapture\" | \"onSelect\" | \"onSelectCapture\" | \"onTouchCancel\" | \"onTouchCancelCapture\" | \"onTouchEnd\" | \"onTouchEndCapture\" | \"onTouchMove\" | \"onTouchMoveCapture\" | \"onTouchStart\" | \"onTouchStartCapture\" | \"onPointerDown\" | \"onPointerDownCapture\" | \"onPointerMove\" | \"onPointerMoveCapture\" | \"onPointerUp\" | \"onPointerUpCapture\" | \"onPointerCancel\" | \"onPointerCancelCapture\" | \"onPointerEnter\" | \"onPointerEnterCapture\" | \"onPointerLeave\" | \"onPointerLeaveCapture\" | \"onPointerOver\" | \"onPointerOverCapture\" | \"onPointerOut\" | \"onPointerOutCapture\" | \"onGotPointerCapture\" | \"onGotPointerCaptureCapture\" | \"onLostPointerCapture\" | \"onLostPointerCaptureCapture\" | \"onScroll\" | \"onScrollCapture\" | \"onWheel\" | \"onWheelCapture\" | \"onAnimationStart\" | \"onAnimationStartCapture\" | \"onAnimationEnd\" | \"onAnimationEndCapture\" | \"onAnimationIteration\" | \"onAnimationIterationCapture\" | \"onTransitionEnd\" | \"onTransitionEndCapture\" | \"onClose\" | \"data-test-subj\" | \"css\" | \"as\" | \"paddingSize\" | \"focusTrapProps\" | \"ownFocus\" | \"alerts\" | \"maxWidth\" | \"hideCloseButton\" | \"closeButtonAriaLabel\" | \"closeButtonProps\" | \"closeButtonPosition\" | \"maskProps\" | \"outsideClickCloses\" | \"side\" | \"pushMinBreakpoint\" | \"isInApp\" | \"observabilityRuleTypeRegistry\" | \"selectedAlertId\"> & { ref?: React.RefObject<HTMLDivElement> | ((instance: HTMLDivElement | null) => void) | null | undefined; }> & { readonly _result: ({ alert, alerts, isInApp, observabilityRuleTypeRegistry, onClose, selectedAlertId, }: AlertsFlyoutProps) => JSX.Element | null; }"
        ],
        "path": "x-pack/plugins/observability/public/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.LazyAlertsFlyout.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "P"
            ],
            "path": "node_modules/@types/react/index.d.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.LoadWhenInView",
        "type": "Function",
        "tags": [],
        "label": "LoadWhenInView",
        "description": [],
        "signature": [
          "(props: ",
          "LoadWhenInViewProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.LoadWhenInView.$1",
            "type": "Object",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "LoadWhenInViewProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.NavigationWarningPromptProvider",
        "type": "Function",
        "tags": [],
        "label": "NavigationWarningPromptProvider",
        "description": [],
        "signature": [
          "({ children }: { children?: React.ReactNode; }) => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/utils/navigation_warning_prompt/context.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.NavigationWarningPromptProvider.$1",
            "type": "Object",
            "tags": [],
            "label": "{ children }",
            "description": [],
            "signature": [
              "{ children?: React.ReactNode; }"
            ],
            "path": "x-pack/plugins/observability/public/utils/navigation_warning_prompt/context.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ObservabilityAlertSearchBar",
        "type": "Function",
        "tags": [],
        "label": "ObservabilityAlertSearchBar",
        "description": [],
        "signature": [
          "(props: ",
          "ObservabilityAlertSearchBarProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityAlertSearchBar.$1",
            "type": "Object",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "ObservabilityAlertSearchBarProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.Prompt",
        "type": "Function",
        "tags": [],
        "label": "Prompt",
        "description": [],
        "signature": [
          "({ prompt }: React.PropsWithChildren<Props>) => null"
        ],
        "path": "x-pack/plugins/observability/public/utils/navigation_warning_prompt/prompt.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.Prompt.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{ prompt }",
            "description": [],
            "signature": [
              "React.PropsWithChildren<Props>"
            ],
            "path": "x-pack/plugins/observability/public/utils/navigation_warning_prompt/prompt.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.Section",
        "type": "Function",
        "tags": [],
        "label": "Section",
        "description": [],
        "signature": [
          "string & ",
          "StyledComponentBase",
          "<\"div\", any, {}, never> & ",
          "NonReactStatics",
          "<never, {}>"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.SectionLink",
        "type": "Function",
        "tags": [],
        "label": "SectionLink",
        "description": [],
        "signature": [
          "(props: ",
          "EuiListGroupItemProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.SectionLink.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "EuiListGroupItemProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.SectionLinks",
        "type": "Function",
        "tags": [],
        "label": "SectionLinks",
        "description": [],
        "signature": [
          "({ children, ...props }: { children?: React.ReactNode; } & ",
          "CommonProps",
          " & Omit<React.HTMLAttributes<HTMLUListElement>, \"color\"> & { bordered?: boolean | undefined; flush?: boolean | undefined; gutterSize?: \"none\" | \"m\" | \"s\" | undefined; listItems?: ",
          "EuiListGroupItemProps",
          "[] | undefined; color?: \"subdued\" | \"primary\" | \"text\" | undefined; size?: \"m\" | \"s\" | \"xs\" | \"l\" | undefined; maxWidth?: boolean | ",
          "Property",
          ".MaxWidth<string | number> | undefined; showToolTips?: boolean | undefined; wrapText?: boolean | undefined; ariaLabelledby?: string | undefined; }) => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.SectionLinks.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{ children, ...props }",
            "description": [],
            "signature": [
              "{ children?: React.ReactNode; } & ",
              "CommonProps",
              " & Omit<React.HTMLAttributes<HTMLUListElement>, \"color\"> & { bordered?: boolean | undefined; flush?: boolean | undefined; gutterSize?: \"none\" | \"m\" | \"s\" | undefined; listItems?: ",
              "EuiListGroupItemProps",
              "[] | undefined; color?: \"subdued\" | \"primary\" | \"text\" | undefined; size?: \"m\" | \"s\" | \"xs\" | \"l\" | undefined; maxWidth?: boolean | ",
              "Property",
              ".MaxWidth<string | number> | undefined; showToolTips?: boolean | undefined; wrapText?: boolean | undefined; ariaLabelledby?: string | undefined; }"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.SectionSpacer",
        "type": "Function",
        "tags": [],
        "label": "SectionSpacer",
        "description": [],
        "signature": [
          "() => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.SectionSubtitle",
        "type": "Function",
        "tags": [],
        "label": "SectionSubtitle",
        "description": [],
        "signature": [
          "({ children }: { children?: React.ReactNode; }) => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.SectionSubtitle.$1",
            "type": "Object",
            "tags": [],
            "label": "{ children }",
            "description": [],
            "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.SectionSubtitle.$1.children",
                "type": "CompoundType",
                "tags": [],
                "label": "children",
                "description": [],
                "signature": [
                  "boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined"
                ],
                "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.SectionTitle",
        "type": "Function",
        "tags": [],
        "label": "SectionTitle",
        "description": [],
        "signature": [
          "({ children }: { children?: React.ReactNode; }) => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.SectionTitle.$1",
            "type": "Object",
            "tags": [],
            "label": "{ children }",
            "description": [],
            "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.SectionTitle.$1.children",
                "type": "CompoundType",
                "tags": [],
                "label": "children",
                "description": [],
                "signature": [
                  "boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined"
                ],
                "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.SelectableUrlList",
        "type": "Function",
        "tags": [],
        "label": "SelectableUrlList",
        "description": [],
        "signature": [
          "(props: ",
          "SelectableUrlListProps",
          ") => JSX.Element"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.SelectableUrlList.$1",
            "type": "Object",
            "tags": [],
            "label": "props",
            "description": [],
            "signature": [
              "SelectableUrlListProps"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/index.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.shouldHandleLinkEvent",
        "type": "Function",
        "tags": [],
        "label": "shouldHandleLinkEvent",
        "description": [],
        "signature": [
          "(e: React.MouseEvent<Element, MouseEvent> | React.MouseEvent<HTMLAnchorElement | HTMLButtonElement, MouseEvent>) => boolean"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_link_props.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.shouldHandleLinkEvent.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "e",
            "description": [],
            "signature": [
              "React.MouseEvent<Element, MouseEvent> | React.MouseEvent<HTMLAnchorElement | HTMLButtonElement, MouseEvent>"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_link_props.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.toQuery",
        "type": "Function",
        "tags": [],
        "label": "toQuery",
        "description": [],
        "signature": [
          "(search: string | undefined) => ",
          "ParsedQuery",
          "<string>"
        ],
        "path": "x-pack/plugins/observability/public/utils/url.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.toQuery.$1",
            "type": "string",
            "tags": [],
            "label": "search",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/utils/url.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useBreadcrumbs",
        "type": "Function",
        "tags": [],
        "label": "useBreadcrumbs",
        "description": [],
        "signature": [
          "(extraCrumbs: ",
          "EuiBreadcrumbProps",
          "[], app?: { id: string; label: string; } | undefined) => void"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_breadcrumbs.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.useBreadcrumbs.$1",
            "type": "Array",
            "tags": [],
            "label": "extraCrumbs",
            "description": [],
            "signature": [
              "EuiBreadcrumbProps",
              "[]"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_breadcrumbs.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.useBreadcrumbs.$2",
            "type": "Object",
            "tags": [],
            "label": "app",
            "description": [],
            "path": "x-pack/plugins/observability/public/hooks/use_breadcrumbs.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.useBreadcrumbs.$2.id",
                "type": "string",
                "tags": [],
                "label": "id",
                "description": [],
                "path": "x-pack/plugins/observability/public/hooks/use_breadcrumbs.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-public.useBreadcrumbs.$2.label",
                "type": "string",
                "tags": [],
                "label": "label",
                "description": [],
                "path": "x-pack/plugins/observability/public/hooks/use_breadcrumbs.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useChartTheme",
        "type": "Function",
        "tags": [],
        "label": "useChartTheme",
        "description": [],
        "signature": [
          "() => ",
          "RecursivePartial",
          "<",
          "Theme",
          ">[]"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_chart_theme.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useEsSearch",
        "type": "Function",
        "tags": [],
        "label": "useEsSearch",
        "description": [],
        "signature": [
          "<DocumentSource extends unknown, TParams extends ",
          "SearchRequest",
          ">(params: TParams, fnDeps: any[], options: { inspector?: ",
          {
            "pluginId": "data",
            "scope": "common",
            "docId": "kibDataSearchPluginApi",
            "section": "def-common.IInspectorInfo",
            "text": "IInspectorInfo"
          },
          " | undefined; name: string; }) => { data: ",
          {
            "pluginId": "@kbn/es-types",
            "scope": "common",
            "docId": "kibKbnEsTypesPluginApi",
            "section": "def-common.ESSearchResponse",
            "text": "ESSearchResponse"
          },
          "<DocumentSource, TParams, { restTotalHitsAsInt: false; }>; loading: boolean; }"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_es_search.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.useEsSearch.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "params",
            "description": [],
            "signature": [
              "TParams"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_es_search.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.useEsSearch.$2",
            "type": "Array",
            "tags": [],
            "label": "fnDeps",
            "description": [],
            "signature": [
              "any[]"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_es_search.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.useEsSearch.$3",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "path": "x-pack/plugins/observability/public/hooks/use_es_search.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.useEsSearch.$3.inspector",
                "type": "Object",
                "tags": [],
                "label": "inspector",
                "description": [],
                "signature": [
                  {
                    "pluginId": "data",
                    "scope": "common",
                    "docId": "kibDataSearchPluginApi",
                    "section": "def-common.IInspectorInfo",
                    "text": "IInspectorInfo"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/observability/public/hooks/use_es_search.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-public.useEsSearch.$3.name",
                "type": "string",
                "tags": [],
                "label": "name",
                "description": [],
                "path": "x-pack/plugins/observability/public/hooks/use_es_search.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useFetcher",
        "type": "Function",
        "tags": [],
        "label": "useFetcher",
        "description": [],
        "signature": [
          "(fn: ({}: { signal: AbortSignal; }) => TReturn, fnDeps: any[], options: { preservePreviousData?: boolean | undefined; }) => ",
          "FetcherResult",
          "<InferResponseType<TReturn>> & { refetch: () => void; }"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_fetcher.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.useFetcher.$1",
            "type": "Function",
            "tags": [],
            "label": "fn",
            "description": [],
            "signature": [
              "({}: { signal: AbortSignal; }) => TReturn"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_fetcher.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.useFetcher.$2",
            "type": "Array",
            "tags": [],
            "label": "fnDeps",
            "description": [],
            "signature": [
              "any[]"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_fetcher.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.useFetcher.$3",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "path": "x-pack/plugins/observability/public/hooks/use_fetcher.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.useFetcher.$3.preservePreviousData",
                "type": "CompoundType",
                "tags": [],
                "label": "preservePreviousData",
                "description": [],
                "signature": [
                  "boolean | undefined"
                ],
                "path": "x-pack/plugins/observability/public/hooks/use_fetcher.tsx",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useInspectorContext",
        "type": "Function",
        "tags": [],
        "label": "useInspectorContext",
        "description": [],
        "signature": [
          "() => ",
          "InspectorContextValue"
        ],
        "path": "x-pack/plugins/observability/public/context/inspector/use_inspector_context.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useLinkProps",
        "type": "Function",
        "tags": [],
        "label": "useLinkProps",
        "description": [],
        "signature": [
          "({ app, pathname, hash, search }: ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.LinkDescriptor",
            "text": "LinkDescriptor"
          },
          ", options?: ",
          "Options",
          ") => ",
          "LinkProps"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_link_props.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.useLinkProps.$1",
            "type": "Object",
            "tags": [],
            "label": "{ app, pathname, hash, search }",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.LinkDescriptor",
                "text": "LinkDescriptor"
              }
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_link_props.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.useLinkProps.$2",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "Options"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_link_props.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useTheme",
        "type": "Function",
        "tags": [],
        "label": "useTheme",
        "description": [],
        "signature": [
          "() => ",
          {
            "pluginId": "kibanaReact",
            "scope": "common",
            "docId": "kibKibanaReactPluginApi",
            "section": "def-common.EuiTheme",
            "text": "EuiTheme"
          }
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_theme.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useTimeZone",
        "type": "Function",
        "tags": [],
        "label": "useTimeZone",
        "description": [],
        "signature": [
          "() => string"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_time_zone.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useTrackMetric",
        "type": "Function",
        "tags": [],
        "label": "useTrackMetric",
        "description": [],
        "signature": [
          "({ app, metric, metricType = METRIC_TYPE.COUNT, delay = 0 }: ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.TrackMetricOptions",
            "text": "TrackMetricOptions"
          },
          ", effectDependencies: EffectDeps) => void"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.useTrackMetric.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{ app, metric, metricType = METRIC_TYPE.COUNT, delay = 0 }",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.TrackMetricOptions",
                "text": "TrackMetricOptions"
              }
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.useTrackMetric.$2",
            "type": "Array",
            "tags": [],
            "label": "effectDependencies",
            "description": [],
            "signature": [
              "EffectDeps"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useTrackPageview",
        "type": "Function",
        "tags": [],
        "label": "useTrackPageview",
        "description": [],
        "signature": [
          "({ path, ...rest }: TrackPageviewProps, effectDependencies: EffectDeps) => void"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.useTrackPageview.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "{ path, ...rest }",
            "description": [],
            "signature": [
              "TrackPageviewProps"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.useTrackPageview.$2",
            "type": "Array",
            "tags": [],
            "label": "effectDependencies",
            "description": [],
            "signature": [
              "EffectDeps"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.useUiTracker",
        "type": "Function",
        "tags": [],
        "label": "useUiTracker",
        "description": [],
        "signature": [
          "({\n  app: defaultApp,\n}: { app?: ",
          "ObservabilityApp",
          " | undefined; }) => ",
          "TrackEvent"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.useUiTracker.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  app: defaultApp,\n}",
            "description": [],
            "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.useUiTracker.$1.app",
                "type": "CompoundType",
                "tags": [],
                "label": "app",
                "description": [],
                "signature": [
                  "ObservabilityApp",
                  " | undefined"
                ],
                "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "observability",
        "id": "def-public.ApmFetchDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "ApmFetchDataResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.ApmFetchDataResponse",
            "text": "ApmFetchDataResponse"
          },
          " extends ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.FetchDataResponse",
            "text": "FetchDataResponse"
          }
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ApmFetchDataResponse.stats",
            "type": "Object",
            "tags": [],
            "label": "stats",
            "description": [],
            "signature": [
              "{ services: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Stat",
                "text": "Stat"
              },
              "; transactions: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Stat",
                "text": "Stat"
              },
              "; }"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ApmFetchDataResponse.series",
            "type": "Object",
            "tags": [],
            "label": "series",
            "description": [],
            "signature": [
              "{ transactions: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Series",
                "text": "Series"
              },
              "; }"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.APMHasDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "APMHasDataResponse",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.APMHasDataResponse.hasData",
            "type": "boolean",
            "tags": [],
            "label": "hasData",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.APMHasDataResponse.indices",
            "type": "Object",
            "tags": [],
            "label": "indices",
            "description": [],
            "signature": [
              "ApmIndicesConfig"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.BurnRateRuleParams",
        "type": "Interface",
        "tags": [],
        "label": "BurnRateRuleParams",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.BurnRateRuleParams",
            "text": "BurnRateRuleParams"
          },
          " extends ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.RuleTypeParams",
            "text": "RuleTypeParams"
          }
        ],
        "path": "x-pack/plugins/observability/public/typings/slo/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.BurnRateRuleParams.sloId",
            "type": "string",
            "tags": [],
            "label": "sloId",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/slo/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.BurnRateRuleParams.burnRateThreshold",
            "type": "number",
            "tags": [],
            "label": "burnRateThreshold",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/slo/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.BurnRateRuleParams.maxBurnRateThreshold",
            "type": "number",
            "tags": [],
            "label": "maxBurnRateThreshold",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/slo/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.BurnRateRuleParams.longWindow",
            "type": "Object",
            "tags": [],
            "label": "longWindow",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Duration",
                "text": "Duration"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/slo/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.BurnRateRuleParams.shortWindow",
            "type": "Object",
            "tags": [],
            "label": "shortWindow",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Duration",
                "text": "Duration"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/slo/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ConfigProps",
        "type": "Interface",
        "tags": [],
        "label": "ConfigProps",
        "description": [],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ConfigProps.dataView",
            "type": "Object",
            "tags": [],
            "label": "dataView",
            "description": [],
            "signature": [
              {
                "pluginId": "dataViews",
                "scope": "common",
                "docId": "kibDataViewsPluginApi",
                "section": "def-common.DataView",
                "text": "DataView"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ConfigProps.series",
            "type": "Object",
            "tags": [],
            "label": "series",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.SeriesUrl",
                "text": "SeriesUrl"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ConfigProps.spaceId",
            "type": "string",
            "tags": [],
            "label": "spaceId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.Coordinates",
        "type": "Interface",
        "tags": [],
        "label": "Coordinates",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.Coordinates.x",
            "type": "number",
            "tags": [],
            "label": "x",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.Coordinates.y",
            "type": "CompoundType",
            "tags": [],
            "label": "y",
            "description": [],
            "signature": [
              "number | null | undefined"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.DataHandler",
        "type": "Interface",
        "tags": [],
        "label": "DataHandler",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.DataHandler",
            "text": "DataHandler"
          },
          "<T>"
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.DataHandler.fetchData",
            "type": "Function",
            "tags": [],
            "label": "fetchData",
            "description": [],
            "signature": [
              "(fetchDataParams: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.FetchDataParams",
                "text": "FetchDataParams"
              },
              ") => Promise<",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.ObservabilityFetchDataResponse",
                "text": "ObservabilityFetchDataResponse"
              },
              "[T]>"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.DataHandler.fetchData.$1",
                "type": "Object",
                "tags": [],
                "label": "fetchDataParams",
                "description": [],
                "signature": [
                  {
                    "pluginId": "observability",
                    "scope": "public",
                    "docId": "kibObservabilityPluginApi",
                    "section": "def-public.FetchDataParams",
                    "text": "FetchDataParams"
                  }
                ],
                "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.DataHandler.hasData",
            "type": "Function",
            "tags": [],
            "label": "hasData",
            "description": [],
            "signature": [
              "(params?: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.HasDataParams",
                "text": "HasDataParams"
              },
              " | undefined) => Promise<",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.ObservabilityHasDataResponse",
                "text": "ObservabilityHasDataResponse"
              },
              "[T]>"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.DataHandler.hasData.$1",
                "type": "Object",
                "tags": [],
                "label": "params",
                "description": [],
                "signature": [
                  {
                    "pluginId": "observability",
                    "scope": "public",
                    "docId": "kibObservabilityPluginApi",
                    "section": "def-public.HasDataParams",
                    "text": "HasDataParams"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.Duration",
        "type": "Interface",
        "tags": [],
        "label": "Duration",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/slo/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.Duration.value",
            "type": "number",
            "tags": [],
            "label": "value",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/slo/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.Duration.unit",
            "type": "CompoundType",
            "tags": [],
            "label": "unit",
            "description": [],
            "signature": [
              "\"M\" | \"w\" | \"d\" | \"h\" | \"m\" | \"Y\""
            ],
            "path": "x-pack/plugins/observability/public/typings/slo/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ExploratoryEmbeddableProps",
        "type": "Interface",
        "tags": [],
        "label": "ExploratoryEmbeddableProps",
        "description": [],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.appId",
            "type": "CompoundType",
            "tags": [],
            "label": "appId",
            "description": [],
            "signature": [
              "\"observability\" | \"securitySolutionUI\" | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.appendTitle",
            "type": "Object",
            "tags": [],
            "label": "appendTitle",
            "description": [],
            "signature": [
              "JSX.Element | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.attributes",
            "type": "Array",
            "tags": [],
            "label": "attributes",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.AllSeries",
                "text": "AllSeries"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.axisTitlesVisibility",
            "type": "Object",
            "tags": [],
            "label": "axisTitlesVisibility",
            "description": [],
            "signature": [
              {
                "pluginId": "lens",
                "scope": "public",
                "docId": "kibLensPluginApi",
                "section": "def-public.AxesSettingsConfig",
                "text": "AxesSettingsConfig"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.gridlinesVisibilitySettings",
            "type": "Object",
            "tags": [],
            "label": "gridlinesVisibilitySettings",
            "description": [],
            "signature": [
              {
                "pluginId": "lens",
                "scope": "public",
                "docId": "kibLensPluginApi",
                "section": "def-public.AxesSettingsConfig",
                "text": "AxesSettingsConfig"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.customHeight",
            "type": "string",
            "tags": [],
            "label": "customHeight",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.customLensAttrs",
            "type": "Any",
            "tags": [],
            "label": "customLensAttrs",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.customTimeRange",
            "type": "Object",
            "tags": [],
            "label": "customTimeRange",
            "description": [],
            "signature": [
              "{ from: string; to: string; } | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.dataTypesIndexPatterns",
            "type": "Object",
            "tags": [],
            "label": "dataTypesIndexPatterns",
            "description": [],
            "signature": [
              "Partial<Record<",
              "AppDataType",
              ", string>> | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.isSingleMetric",
            "type": "CompoundType",
            "tags": [],
            "label": "isSingleMetric",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.legendIsVisible",
            "type": "CompoundType",
            "tags": [],
            "label": "legendIsVisible",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.legendPosition",
            "type": "CompoundType",
            "tags": [],
            "label": "legendPosition",
            "description": [],
            "signature": [
              "Position",
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.hideTicks",
            "type": "CompoundType",
            "tags": [],
            "label": "hideTicks",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.onBrushEnd",
            "type": "Function",
            "tags": [],
            "label": "onBrushEnd",
            "description": [],
            "signature": [
              "((param: { range: number[]; }) => void) | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.ExploratoryEmbeddableProps.onBrushEnd.$1",
                "type": "Object",
                "tags": [],
                "label": "param",
                "description": [],
                "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "observability",
                    "id": "def-public.ExploratoryEmbeddableProps.onBrushEnd.$1.range",
                    "type": "Array",
                    "tags": [],
                    "label": "range",
                    "description": [],
                    "signature": [
                      "number[]"
                    ],
                    "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.caseOwner",
            "type": "string",
            "tags": [],
            "label": "caseOwner",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.reportConfigMap",
            "type": "Object",
            "tags": [],
            "label": "reportConfigMap",
            "description": [],
            "signature": [
              "ReportConfigMap",
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.reportType",
            "type": "CompoundType",
            "tags": [],
            "label": "reportType",
            "description": [],
            "signature": [
              "\"heatmap\" | \"data-distribution\" | \"kpi-over-time\" | \"core-web-vitals\" | \"device-data-distribution\" | \"single-metric\""
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.showCalculationMethod",
            "type": "CompoundType",
            "tags": [],
            "label": "showCalculationMethod",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.title",
            "type": "CompoundType",
            "tags": [],
            "label": "title",
            "description": [],
            "signature": [
              "string | JSX.Element | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.withActions",
            "type": "CompoundType",
            "tags": [],
            "label": "withActions",
            "description": [],
            "signature": [
              "boolean | ",
              "ActionTypes",
              "[] | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.align",
            "type": "CompoundType",
            "tags": [],
            "label": "align",
            "description": [],
            "signature": [
              "\"left\" | \"right\" | \"center\" | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.sparklineMode",
            "type": "CompoundType",
            "tags": [],
            "label": "sparklineMode",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.noLabel",
            "type": "CompoundType",
            "tags": [],
            "label": "noLabel",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.fontSize",
            "type": "number",
            "tags": [],
            "label": "fontSize",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.lineHeight",
            "type": "number",
            "tags": [],
            "label": "lineHeight",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ExploratoryEmbeddableProps.dataTestSubj",
            "type": "string",
            "tags": [],
            "label": "dataTestSubj",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/embeddable/embeddable.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.FetchDataParams",
        "type": "Interface",
        "tags": [],
        "label": "FetchDataParams",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.FetchDataParams.absoluteTime",
            "type": "Object",
            "tags": [],
            "label": "absoluteTime",
            "description": [],
            "signature": [
              "{ start: number; end: number; }"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.FetchDataParams.relativeTime",
            "type": "Object",
            "tags": [],
            "label": "relativeTime",
            "description": [],
            "signature": [
              "{ start: string; end: string; }"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.FetchDataParams.serviceName",
            "type": "string",
            "tags": [],
            "label": "serviceName",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.FetchDataParams.bucketSize",
            "type": "number",
            "tags": [],
            "label": "bucketSize",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.FetchDataParams.intervalString",
            "type": "string",
            "tags": [],
            "label": "intervalString",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.FetchDataParams.timeZone",
            "type": "string",
            "tags": [],
            "label": "timeZone",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.FetchDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "FetchDataResponse",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.FetchDataResponse.appLink",
            "type": "string",
            "tags": [],
            "label": "appLink",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.HasDataParams",
        "type": "Interface",
        "tags": [],
        "label": "HasDataParams",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.HasDataParams.absoluteTime",
            "type": "Object",
            "tags": [],
            "label": "absoluteTime",
            "description": [],
            "signature": [
              "{ start: number; end: number; }"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.HasDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "HasDataResponse",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.HasDataResponse.hasData",
            "type": "boolean",
            "tags": [],
            "label": "hasData",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.InfraLogsHasDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "InfraLogsHasDataResponse",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.InfraLogsHasDataResponse.hasData",
            "type": "boolean",
            "tags": [],
            "label": "hasData",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.InfraLogsHasDataResponse.indices",
            "type": "string",
            "tags": [],
            "label": "indices",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.InfraMetricsHasDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "InfraMetricsHasDataResponse",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.InfraMetricsHasDataResponse.hasData",
            "type": "boolean",
            "tags": [],
            "label": "hasData",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.InfraMetricsHasDataResponse.indices",
            "type": "string",
            "tags": [],
            "label": "indices",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.LinkDescriptor",
        "type": "Interface",
        "tags": [],
        "label": "LinkDescriptor",
        "description": [],
        "path": "x-pack/plugins/observability/public/hooks/use_link_props.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.LinkDescriptor.app",
            "type": "string",
            "tags": [],
            "label": "app",
            "description": [],
            "path": "x-pack/plugins/observability/public/hooks/use_link_props.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.LinkDescriptor.pathname",
            "type": "string",
            "tags": [],
            "label": "pathname",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_link_props.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.LinkDescriptor.hash",
            "type": "string",
            "tags": [],
            "label": "hash",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_link_props.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.LinkDescriptor.search",
            "type": "Object",
            "tags": [],
            "label": "search",
            "description": [],
            "signature": [
              "Search | undefined"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_link_props.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.LogsFetchDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "LogsFetchDataResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.LogsFetchDataResponse",
            "text": "LogsFetchDataResponse"
          },
          " extends ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.FetchDataResponse",
            "text": "FetchDataResponse"
          }
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.LogsFetchDataResponse.stats",
            "type": "Object",
            "tags": [],
            "label": "stats",
            "description": [],
            "signature": [
              "{ [x: string]: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Stat",
                "text": "Stat"
              },
              " & { label: string; }; }"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.LogsFetchDataResponse.series",
            "type": "Object",
            "tags": [],
            "label": "series",
            "description": [],
            "signature": [
              "{ [x: string]: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Series",
                "text": "Series"
              },
              " & { label: string; }; }"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.MetricsFetchDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "MetricsFetchDataResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.MetricsFetchDataResponse",
            "text": "MetricsFetchDataResponse"
          },
          " extends ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.FetchDataResponse",
            "text": "FetchDataResponse"
          }
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataResponse.sort",
            "type": "Function",
            "tags": [],
            "label": "sort",
            "description": [],
            "signature": [
              "(by: string, direction: string) => Promise<",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.MetricsFetchDataResponse",
                "text": "MetricsFetchDataResponse"
              },
              ">"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.MetricsFetchDataResponse.sort.$1",
                "type": "string",
                "tags": [],
                "label": "by",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "observability",
                "id": "def-public.MetricsFetchDataResponse.sort.$2",
                "type": "string",
                "tags": [],
                "label": "direction",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataResponse.series",
            "type": "Array",
            "tags": [],
            "label": "series",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.MetricsFetchDataSeries",
                "text": "MetricsFetchDataSeries"
              },
              "[]"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.MetricsFetchDataSeries",
        "type": "Interface",
        "tags": [],
        "label": "MetricsFetchDataSeries",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.name",
            "type": "CompoundType",
            "tags": [],
            "label": "name",
            "description": [],
            "signature": [
              "string | null"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.platform",
            "type": "CompoundType",
            "tags": [],
            "label": "platform",
            "description": [],
            "signature": [
              "string | null"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.provider",
            "type": "CompoundType",
            "tags": [],
            "label": "provider",
            "description": [],
            "signature": [
              "string | null"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.cpu",
            "type": "CompoundType",
            "tags": [],
            "label": "cpu",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.iowait",
            "type": "CompoundType",
            "tags": [],
            "label": "iowait",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.load",
            "type": "CompoundType",
            "tags": [],
            "label": "load",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.uptime",
            "type": "CompoundType",
            "tags": [],
            "label": "uptime",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.rx",
            "type": "CompoundType",
            "tags": [],
            "label": "rx",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.tx",
            "type": "CompoundType",
            "tags": [],
            "label": "tx",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.MetricsFetchDataSeries.timeseries",
            "type": "Array",
            "tags": [],
            "label": "timeseries",
            "description": [],
            "signature": [
              "{ timestamp: number; cpu: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.NumberOrNull",
                "text": "NumberOrNull"
              },
              "; iowait: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.NumberOrNull",
                "text": "NumberOrNull"
              },
              "; load: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.NumberOrNull",
                "text": "NumberOrNull"
              },
              "; rx: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.NumberOrNull",
                "text": "NumberOrNull"
              },
              "; tx: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.NumberOrNull",
                "text": "NumberOrNull"
              },
              "; }[]"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.NavigationSection",
        "type": "Interface",
        "tags": [],
        "label": "NavigationSection",
        "description": [],
        "path": "x-pack/plugins/observability/public/services/navigation_registry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.NavigationSection.label",
            "type": "string",
            "tags": [],
            "label": "label",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/services/navigation_registry.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.NavigationSection.sortKey",
            "type": "number",
            "tags": [],
            "label": "sortKey",
            "description": [],
            "path": "x-pack/plugins/observability/public/services/navigation_registry.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.NavigationSection.entries",
            "type": "Array",
            "tags": [],
            "label": "entries",
            "description": [],
            "signature": [
              "NavigationEntry",
              "[]"
            ],
            "path": "x-pack/plugins/observability/public/services/navigation_registry.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.NavigationSection.isBetaFeature",
            "type": "CompoundType",
            "tags": [],
            "label": "isBetaFeature",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/observability/public/services/navigation_registry.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ObservabilityFetchDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "ObservabilityFetchDataResponse",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityFetchDataResponse.apm",
            "type": "Object",
            "tags": [],
            "label": "apm",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.ApmFetchDataResponse",
                "text": "ApmFetchDataResponse"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityFetchDataResponse.infra_metrics",
            "type": "Object",
            "tags": [],
            "label": "infra_metrics",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.MetricsFetchDataResponse",
                "text": "MetricsFetchDataResponse"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityFetchDataResponse.infra_logs",
            "type": "Object",
            "tags": [],
            "label": "infra_logs",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.LogsFetchDataResponse",
                "text": "LogsFetchDataResponse"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityFetchDataResponse.synthetics",
            "type": "Object",
            "tags": [],
            "label": "synthetics",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.UptimeFetchDataResponse",
                "text": "UptimeFetchDataResponse"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityFetchDataResponse.ux",
            "type": "Object",
            "tags": [],
            "label": "ux",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.UxFetchDataResponse",
                "text": "UxFetchDataResponse"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ObservabilityHasDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "ObservabilityHasDataResponse",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityHasDataResponse.apm",
            "type": "Object",
            "tags": [],
            "label": "apm",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.APMHasDataResponse",
                "text": "APMHasDataResponse"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityHasDataResponse.infra_metrics",
            "type": "Object",
            "tags": [],
            "label": "infra_metrics",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.InfraMetricsHasDataResponse",
                "text": "InfraMetricsHasDataResponse"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityHasDataResponse.infra_logs",
            "type": "Object",
            "tags": [],
            "label": "infra_logs",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.InfraLogsHasDataResponse",
                "text": "InfraLogsHasDataResponse"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityHasDataResponse.synthetics",
            "type": "Object",
            "tags": [],
            "label": "synthetics",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.SyntheticsHasDataResponse",
                "text": "SyntheticsHasDataResponse"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityHasDataResponse.ux",
            "type": "Object",
            "tags": [],
            "label": "ux",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.UXHasDataResponse",
                "text": "UXHasDataResponse"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ObservabilityPublicPluginsSetup",
        "type": "Interface",
        "tags": [],
        "label": "ObservabilityPublicPluginsSetup",
        "description": [],
        "path": "x-pack/plugins/observability/public/plugin.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsSetup.data",
            "type": "Object",
            "tags": [],
            "label": "data",
            "description": [],
            "signature": [
              {
                "pluginId": "data",
                "scope": "public",
                "docId": "kibDataPluginApi",
                "section": "def-public.DataPublicPluginSetup",
                "text": "DataPublicPluginSetup"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsSetup.share",
            "type": "CompoundType",
            "tags": [],
            "label": "share",
            "description": [],
            "signature": [
              "{ register: (shareMenuProvider: ",
              {
                "pluginId": "share",
                "scope": "public",
                "docId": "kibSharePluginApi",
                "section": "def-public.ShareMenuProvider",
                "text": "ShareMenuProvider"
              },
              ") => void; } & { url: ",
              {
                "pluginId": "share",
                "scope": "public",
                "docId": "kibSharePluginApi",
                "section": "def-public.BrowserUrlService",
                "text": "BrowserUrlService"
              },
              "; navigate(options: ",
              "RedirectOptions",
              "<",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.SerializableRecord",
                "text": "SerializableRecord"
              },
              ">): void; setAnonymousAccessServiceProvider: (provider: () => ",
              {
                "pluginId": "share",
                "scope": "common",
                "docId": "kibSharePluginApi",
                "section": "def-common.AnonymousAccessServiceContract",
                "text": "AnonymousAccessServiceContract"
              },
              ") => void; }"
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsSetup.triggersActionsUi",
            "type": "Object",
            "tags": [],
            "label": "triggersActionsUi",
            "description": [],
            "signature": [
              {
                "pluginId": "triggersActionsUi",
                "scope": "public",
                "docId": "kibTriggersActionsUiPluginApi",
                "section": "def-public.TriggersAndActionsUIPublicPluginSetup",
                "text": "TriggersAndActionsUIPublicPluginSetup"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsSetup.home",
            "type": "Object",
            "tags": [],
            "label": "home",
            "description": [],
            "signature": [
              {
                "pluginId": "home",
                "scope": "public",
                "docId": "kibHomePluginApi",
                "section": "def-public.HomePublicPluginSetup",
                "text": "HomePublicPluginSetup"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsSetup.usageCollection",
            "type": "Object",
            "tags": [],
            "label": "usageCollection",
            "description": [],
            "signature": [
              {
                "pluginId": "usageCollection",
                "scope": "public",
                "docId": "kibUsageCollectionPluginApi",
                "section": "def-public.UsageCollectionSetup",
                "text": "UsageCollectionSetup"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ObservabilityPublicPluginsStart",
        "type": "Interface",
        "tags": [],
        "label": "ObservabilityPublicPluginsStart",
        "description": [],
        "path": "x-pack/plugins/observability/public/plugin.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.actionTypeRegistry",
            "type": "Object",
            "tags": [],
            "label": "actionTypeRegistry",
            "description": [],
            "signature": [
              "{ get: (id: string) => ",
              {
                "pluginId": "triggersActionsUi",
                "scope": "public",
                "docId": "kibTriggersActionsUiPluginApi",
                "section": "def-public.ActionTypeModel",
                "text": "ActionTypeModel"
              },
              "<unknown, unknown, any>; list: () => ",
              {
                "pluginId": "triggersActionsUi",
                "scope": "public",
                "docId": "kibTriggersActionsUiPluginApi",
                "section": "def-public.ActionTypeModel",
                "text": "ActionTypeModel"
              },
              "<unknown, unknown, any>[]; has: (id: string) => boolean; register: (objectType: ",
              {
                "pluginId": "triggersActionsUi",
                "scope": "public",
                "docId": "kibTriggersActionsUiPluginApi",
                "section": "def-public.ActionTypeModel",
                "text": "ActionTypeModel"
              },
              "<unknown, unknown, any>) => void; }"
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.cases",
            "type": "Object",
            "tags": [],
            "label": "cases",
            "description": [],
            "signature": [
              {
                "pluginId": "cases",
                "scope": "public",
                "docId": "kibCasesPluginApi",
                "section": "def-public.CasesUiStart",
                "text": "CasesUiStart"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.charts",
            "type": "CompoundType",
            "tags": [],
            "label": "charts",
            "description": [],
            "signature": [
              {
                "pluginId": "charts",
                "scope": "public",
                "docId": "kibChartsPluginApi",
                "section": "def-public.ChartsPluginSetup",
                "text": "ChartsPluginSetup"
              },
              " & { activeCursor: ",
              "ActiveCursor",
              "; }"
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.data",
            "type": "Object",
            "tags": [],
            "label": "data",
            "description": [],
            "signature": [
              {
                "pluginId": "data",
                "scope": "public",
                "docId": "kibDataPluginApi",
                "section": "def-public.DataPublicPluginStart",
                "text": "DataPublicPluginStart"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.dataViews",
            "type": "Object",
            "tags": [],
            "label": "dataViews",
            "description": [],
            "signature": [
              {
                "pluginId": "dataViews",
                "scope": "public",
                "docId": "kibDataViewsPluginApi",
                "section": "def-public.DataViewsServicePublic",
                "text": "DataViewsServicePublic"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.discover",
            "type": "Object",
            "tags": [],
            "label": "discover",
            "description": [],
            "signature": [
              {
                "pluginId": "discover",
                "scope": "public",
                "docId": "kibDiscoverPluginApi",
                "section": "def-public.DiscoverStart",
                "text": "DiscoverStart"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.embeddable",
            "type": "Object",
            "tags": [],
            "label": "embeddable",
            "description": [],
            "signature": [
              {
                "pluginId": "embeddable",
                "scope": "public",
                "docId": "kibEmbeddablePluginApi",
                "section": "def-public.EmbeddableStart",
                "text": "EmbeddableStart"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.guidedOnboarding",
            "type": "Object",
            "tags": [],
            "label": "guidedOnboarding",
            "description": [],
            "signature": [
              {
                "pluginId": "guidedOnboarding",
                "scope": "public",
                "docId": "kibGuidedOnboardingPluginApi",
                "section": "def-public.GuidedOnboardingPluginStart",
                "text": "GuidedOnboardingPluginStart"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.lens",
            "type": "Object",
            "tags": [],
            "label": "lens",
            "description": [],
            "signature": [
              {
                "pluginId": "lens",
                "scope": "public",
                "docId": "kibLensPluginApi",
                "section": "def-public.LensPublicStart",
                "text": "LensPublicStart"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.licensing",
            "type": "Object",
            "tags": [],
            "label": "licensing",
            "description": [],
            "signature": [
              {
                "pluginId": "licensing",
                "scope": "public",
                "docId": "kibLicensingPluginApi",
                "section": "def-public.LicensingPluginStart",
                "text": "LicensingPluginStart"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.ruleTypeRegistry",
            "type": "Object",
            "tags": [],
            "label": "ruleTypeRegistry",
            "description": [],
            "signature": [
              "{ get: (id: string) => ",
              {
                "pluginId": "triggersActionsUi",
                "scope": "public",
                "docId": "kibTriggersActionsUiPluginApi",
                "section": "def-public.RuleTypeModel",
                "text": "RuleTypeModel"
              },
              "<",
              {
                "pluginId": "alerting",
                "scope": "common",
                "docId": "kibAlertingPluginApi",
                "section": "def-common.RuleTypeParams",
                "text": "RuleTypeParams"
              },
              ">; list: () => ",
              {
                "pluginId": "triggersActionsUi",
                "scope": "public",
                "docId": "kibTriggersActionsUiPluginApi",
                "section": "def-public.RuleTypeModel",
                "text": "RuleTypeModel"
              },
              "<",
              {
                "pluginId": "alerting",
                "scope": "common",
                "docId": "kibAlertingPluginApi",
                "section": "def-common.RuleTypeParams",
                "text": "RuleTypeParams"
              },
              ">[]; has: (id: string) => boolean; register: (objectType: ",
              {
                "pluginId": "triggersActionsUi",
                "scope": "public",
                "docId": "kibTriggersActionsUiPluginApi",
                "section": "def-public.RuleTypeModel",
                "text": "RuleTypeModel"
              },
              "<",
              {
                "pluginId": "alerting",
                "scope": "common",
                "docId": "kibAlertingPluginApi",
                "section": "def-common.RuleTypeParams",
                "text": "RuleTypeParams"
              },
              ">) => void; }"
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.security",
            "type": "Object",
            "tags": [],
            "label": "security",
            "description": [],
            "signature": [
              {
                "pluginId": "security",
                "scope": "public",
                "docId": "kibSecurityPluginApi",
                "section": "def-public.SecurityPluginStart",
                "text": "SecurityPluginStart"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.share",
            "type": "CompoundType",
            "tags": [],
            "label": "share",
            "description": [],
            "signature": [
              "{ toggleShareContextMenu: (options: ",
              {
                "pluginId": "share",
                "scope": "public",
                "docId": "kibSharePluginApi",
                "section": "def-public.ShowShareMenuOptions",
                "text": "ShowShareMenuOptions"
              },
              ") => void; } & { url: ",
              {
                "pluginId": "share",
                "scope": "public",
                "docId": "kibSharePluginApi",
                "section": "def-public.BrowserUrlService",
                "text": "BrowserUrlService"
              },
              "; navigate(options: ",
              "RedirectOptions",
              "<",
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.SerializableRecord",
                "text": "SerializableRecord"
              },
              ">): void; }"
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.spaces",
            "type": "Object",
            "tags": [],
            "label": "spaces",
            "description": [],
            "signature": [
              {
                "pluginId": "spaces",
                "scope": "public",
                "docId": "kibSpacesPluginApi",
                "section": "def-public.SpacesApi",
                "text": "SpacesApi"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.triggersActionsUi",
            "type": "Object",
            "tags": [],
            "label": "triggersActionsUi",
            "description": [],
            "signature": [
              {
                "pluginId": "triggersActionsUi",
                "scope": "public",
                "docId": "kibTriggersActionsUiPluginApi",
                "section": "def-public.TriggersAndActionsUIPublicPluginStart",
                "text": "TriggersAndActionsUIPublicPluginStart"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.usageCollection",
            "type": "Object",
            "tags": [],
            "label": "usageCollection",
            "description": [],
            "signature": [
              {
                "pluginId": "usageCollection",
                "scope": "public",
                "docId": "kibUsageCollectionPluginApi",
                "section": "def-public.UsageCollectionSetup",
                "text": "UsageCollectionSetup"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.unifiedSearch",
            "type": "Object",
            "tags": [],
            "label": "unifiedSearch",
            "description": [],
            "signature": [
              {
                "pluginId": "unifiedSearch",
                "scope": "public",
                "docId": "kibUnifiedSearchPluginApi",
                "section": "def-public.UnifiedSearchPublicPluginStart",
                "text": "UnifiedSearchPublicPluginStart"
              }
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityPublicPluginsStart.home",
            "type": "Object",
            "tags": [],
            "label": "home",
            "description": [],
            "signature": [
              {
                "pluginId": "home",
                "scope": "public",
                "docId": "kibHomePluginApi",
                "section": "def-public.HomePublicPluginStart",
                "text": "HomePublicPluginStart"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/plugin.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ObservabilityRuleTypeModel",
        "type": "Interface",
        "tags": [],
        "label": "ObservabilityRuleTypeModel",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.ObservabilityRuleTypeModel",
            "text": "ObservabilityRuleTypeModel"
          },
          "<Params> extends ",
          {
            "pluginId": "triggersActionsUi",
            "scope": "public",
            "docId": "kibTriggersActionsUiPluginApi",
            "section": "def-public.RuleTypeModel",
            "text": "RuleTypeModel"
          },
          "<Params>"
        ],
        "path": "x-pack/plugins/observability/public/rules/create_observability_rule_type_registry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityRuleTypeModel.format",
            "type": "Function",
            "tags": [],
            "label": "format",
            "description": [],
            "signature": [
              "(options: { fields: OutputOf<SetOptional<{ readonly \"kibana.alert.rule.parameters\": { readonly type: \"flattened\"; readonly ignore_above: 4096; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; }; readonly \"kibana.alert.time_range\": { readonly type: \"date_range\"; readonly format: \"epoch_millis||strict_date_optional_time\"; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.flapping\": { readonly type: \"boolean\"; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.case_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.execution.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.field\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.terms.value\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.docs_count\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly '@timestamp': { readonly type: \"date\"; readonly array: false; readonly required: true; }; readonly 'event.action': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly 'event.kind': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; }>> & Record<string, any>; formatters: { asDuration: (value: ",
              "Maybe",
              "<number>, { defaultValue, extended }?: FormatterOptions) => string; asPercent: (numerator: ",
              "Maybe",
              "<number>, denominator: number | undefined, fallbackResult?: any) => any; }; }) => { reason: string; link: string; }"
            ],
            "path": "x-pack/plugins/observability/public/rules/create_observability_rule_type_registry.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-public.ObservabilityRuleTypeModel.format.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "{ fields: OutputOf<SetOptional<{ readonly \"kibana.alert.rule.parameters\": { readonly type: \"flattened\"; readonly ignore_above: 4096; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; }; readonly \"kibana.alert.time_range\": { readonly type: \"date_range\"; readonly format: \"epoch_millis||strict_date_optional_time\"; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.flapping\": { readonly type: \"boolean\"; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.case_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.execution.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.field\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.terms.value\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.docs_count\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly '@timestamp': { readonly type: \"date\"; readonly array: false; readonly required: true; }; readonly 'event.action': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly 'event.kind': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; }>> & Record<string, any>; formatters: { asDuration: (value: ",
                  "Maybe",
                  "<number>, { defaultValue, extended }?: FormatterOptions) => string; asPercent: (numerator: ",
                  "Maybe",
                  "<number>, denominator: number | undefined, fallbackResult?: any) => any; }; }"
                ],
                "path": "x-pack/plugins/observability/public/rules/create_observability_rule_type_registry.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.Series",
        "type": "Interface",
        "tags": [],
        "label": "Series",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.Series.coordinates",
            "type": "Array",
            "tags": [],
            "label": "coordinates",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Coordinates",
                "text": "Coordinates"
              },
              "[]"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.SeriesConfig",
        "type": "Interface",
        "tags": [],
        "label": "SeriesConfig",
        "description": [],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.reportType",
            "type": "string",
            "tags": [],
            "label": "reportType",
            "description": [],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.xAxisColumn",
            "type": "CompoundType",
            "tags": [],
            "label": "xAxisColumn",
            "description": [],
            "signature": [
              "Partial<",
              {
                "pluginId": "lens",
                "scope": "public",
                "docId": "kibLensPluginApi",
                "section": "def-public.LastValueIndexPatternColumn",
                "text": "LastValueIndexPatternColumn"
              },
              "> | Partial<",
              {
                "pluginId": "lens",
                "scope": "public",
                "docId": "kibLensPluginApi",
                "section": "def-public.DateHistogramIndexPatternColumn",
                "text": "DateHistogramIndexPatternColumn"
              },
              ">"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.yAxisColumns",
            "type": "Array",
            "tags": [],
            "label": "yAxisColumns",
            "description": [],
            "signature": [
              "Partial<",
              {
                "pluginId": "lens",
                "scope": "public",
                "docId": "kibLensPluginApi",
                "section": "def-public.FieldBasedIndexPatternColumn",
                "text": "FieldBasedIndexPatternColumn"
              },
              ">[]"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.breakdownFields",
            "type": "Array",
            "tags": [],
            "label": "breakdownFields",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.defaultSeriesType",
            "type": "CompoundType",
            "tags": [],
            "label": "defaultSeriesType",
            "description": [],
            "signature": [
              "\"bar\" | \"line\" | \"area\" | \"bar_stacked\" | \"area_stacked\" | \"bar_horizontal\" | \"bar_percentage_stacked\" | \"bar_horizontal_stacked\" | \"area_percentage_stacked\" | \"bar_horizontal_percentage_stacked\""
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.filterFields",
            "type": "Array",
            "tags": [],
            "label": "filterFields",
            "description": [],
            "signature": [
              "(string | { field: string; nested?: string | undefined; isNegated?: boolean | undefined; })[]"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.seriesTypes",
            "type": "Array",
            "tags": [],
            "label": "seriesTypes",
            "description": [],
            "signature": [
              {
                "pluginId": "lens",
                "scope": "public",
                "docId": "kibLensPluginApi",
                "section": "def-public.SeriesType",
                "text": "SeriesType"
              },
              "[]"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.baseFilters",
            "type": "Array",
            "tags": [],
            "label": "baseFilters",
            "description": [],
            "signature": [
              "(",
              {
                "pluginId": "@kbn/es-query",
                "scope": "common",
                "docId": "kibKbnEsQueryPluginApi",
                "section": "def-common.PhraseFilter",
                "text": "PhraseFilter"
              },
              " | ",
              {
                "pluginId": "@kbn/es-query",
                "scope": "common",
                "docId": "kibKbnEsQueryPluginApi",
                "section": "def-common.ExistsFilter",
                "text": "ExistsFilter"
              },
              " | ",
              {
                "pluginId": "lens",
                "scope": "common",
                "docId": "kibLensPluginApi",
                "section": "def-common.PersistableFilter",
                "text": "PersistableFilter"
              },
              ")[] | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.definitionFields",
            "type": "Array",
            "tags": [],
            "label": "definitionFields",
            "description": [],
            "signature": [
              "(string | { field: string; nested?: string | undefined; singleSelection?: boolean | undefined; filters?: (",
              {
                "pluginId": "@kbn/es-query",
                "scope": "common",
                "docId": "kibKbnEsQueryPluginApi",
                "section": "def-common.PhraseFilter",
                "text": "PhraseFilter"
              },
              " | ",
              {
                "pluginId": "@kbn/es-query",
                "scope": "common",
                "docId": "kibKbnEsQueryPluginApi",
                "section": "def-common.ExistsFilter",
                "text": "ExistsFilter"
              },
              " | ",
              {
                "pluginId": "lens",
                "scope": "common",
                "docId": "kibLensPluginApi",
                "section": "def-common.PersistableFilter",
                "text": "PersistableFilter"
              },
              ")[] | undefined; })[]"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.textDefinitionFields",
            "type": "Array",
            "tags": [],
            "label": "textDefinitionFields",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.metricOptions",
            "type": "Array",
            "tags": [],
            "label": "metricOptions",
            "description": [],
            "signature": [
              "(",
              "MetricOption",
              " | { id: string; field?: string | undefined; label: string; items: ",
              "MetricOption",
              "[]; columnType?: string | undefined; })[] | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.labels",
            "type": "Object",
            "tags": [],
            "label": "labels",
            "description": [],
            "signature": [
              "{ [x: string]: string; }"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.hasOperationType",
            "type": "boolean",
            "tags": [],
            "label": "hasOperationType",
            "description": [],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.palette",
            "type": "Object",
            "tags": [],
            "label": "palette",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/coloring",
                "scope": "common",
                "docId": "kibKbnColoringPluginApi",
                "section": "def-common.PaletteOutput",
                "text": "PaletteOutput"
              },
              "<{ [key: string]: unknown; }> | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.yTitle",
            "type": "string",
            "tags": [],
            "label": "yTitle",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.yConfig",
            "type": "Array",
            "tags": [],
            "label": "yConfig",
            "description": [],
            "signature": [
              {
                "pluginId": "lens",
                "scope": "public",
                "docId": "kibLensPluginApi",
                "section": "def-public.YConfig",
                "text": "YConfig"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesConfig.query",
            "type": "Object",
            "tags": [],
            "label": "query",
            "description": [],
            "signature": [
              "{ query: string; language: \"kuery\"; } | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.SeriesUrl",
        "type": "Interface",
        "tags": [],
        "label": "SeriesUrl",
        "description": [],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.time",
            "type": "Object",
            "tags": [],
            "label": "time",
            "description": [],
            "signature": [
              "{ to: string; from: string; }"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.breakdown",
            "type": "string",
            "tags": [],
            "label": "breakdown",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.filters",
            "type": "Array",
            "tags": [],
            "label": "filters",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.UrlFilter",
                "text": "UrlFilter"
              },
              "[] | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.seriesType",
            "type": "CompoundType",
            "tags": [],
            "label": "seriesType",
            "description": [],
            "signature": [
              {
                "pluginId": "lens",
                "scope": "public",
                "docId": "kibLensPluginApi",
                "section": "def-public.SeriesType",
                "text": "SeriesType"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.operationType",
            "type": "string",
            "tags": [],
            "label": "operationType",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.dataType",
            "type": "CompoundType",
            "tags": [],
            "label": "dataType",
            "description": [],
            "signature": [
              "\"mobile\" | \"apm\" | \"alerts\" | \"synthetics\" | \"ux\" | \"infra_logs\" | \"infra_metrics\""
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.reportDefinitions",
            "type": "Object",
            "tags": [],
            "label": "reportDefinitions",
            "description": [],
            "signature": [
              "URLReportDefinition",
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.textReportDefinitions",
            "type": "Object",
            "tags": [],
            "label": "textReportDefinitions",
            "description": [],
            "signature": [
              "URLTextReportDefinition",
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.selectedMetricField",
            "type": "string",
            "tags": [],
            "label": "selectedMetricField",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.hidden",
            "type": "CompoundType",
            "tags": [],
            "label": "hidden",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.showPercentileAnnotations",
            "type": "CompoundType",
            "tags": [],
            "label": "showPercentileAnnotations",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.SeriesUrl.color",
            "type": "string",
            "tags": [],
            "label": "color",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.Stat",
        "type": "Interface",
        "tags": [],
        "label": "Stat",
        "description": [],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.Stat.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"number\" | \"percent\" | \"bytesPerSecond\""
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.Stat.value",
            "type": "number",
            "tags": [],
            "label": "value",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.SyntheticsHasDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "SyntheticsHasDataResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.SyntheticsHasDataResponse",
            "text": "SyntheticsHasDataResponse"
          },
          " extends ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.HasDataResponse",
            "text": "HasDataResponse"
          }
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.SyntheticsHasDataResponse.indices",
            "type": "string",
            "tags": [],
            "label": "indices",
            "description": [],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.UptimeFetchDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "UptimeFetchDataResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.UptimeFetchDataResponse",
            "text": "UptimeFetchDataResponse"
          },
          " extends ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.FetchDataResponse",
            "text": "FetchDataResponse"
          }
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.UptimeFetchDataResponse.stats",
            "type": "Object",
            "tags": [],
            "label": "stats",
            "description": [],
            "signature": [
              "{ monitors: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Stat",
                "text": "Stat"
              },
              "; up: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Stat",
                "text": "Stat"
              },
              "; down: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Stat",
                "text": "Stat"
              },
              "; }"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UptimeFetchDataResponse.series",
            "type": "Object",
            "tags": [],
            "label": "series",
            "description": [],
            "signature": [
              "{ up: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Series",
                "text": "Series"
              },
              "; down: ",
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.Series",
                "text": "Series"
              },
              "; }"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.UrlFilter",
        "type": "Interface",
        "tags": [],
        "label": "UrlFilter",
        "description": [],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.UrlFilter.field",
            "type": "string",
            "tags": [],
            "label": "field",
            "description": [],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UrlFilter.values",
            "type": "Array",
            "tags": [],
            "label": "values",
            "description": [],
            "signature": [
              "(string | number)[] | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UrlFilter.notValues",
            "type": "Array",
            "tags": [],
            "label": "notValues",
            "description": [],
            "signature": [
              "(string | number)[] | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UrlFilter.wildcards",
            "type": "Array",
            "tags": [],
            "label": "wildcards",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UrlFilter.notWildcards",
            "type": "Array",
            "tags": [],
            "label": "notWildcards",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.UxFetchDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "UxFetchDataResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.UxFetchDataResponse",
            "text": "UxFetchDataResponse"
          },
          " extends ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.FetchDataResponse",
            "text": "FetchDataResponse"
          }
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.UxFetchDataResponse.coreWebVitals",
            "type": "Object",
            "tags": [],
            "label": "coreWebVitals",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.UXMetrics",
                "text": "UXMetrics"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.UXHasDataResponse",
        "type": "Interface",
        "tags": [],
        "label": "UXHasDataResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.UXHasDataResponse",
            "text": "UXHasDataResponse"
          },
          " extends ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.HasDataResponse",
            "text": "HasDataResponse"
          }
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.UXHasDataResponse.serviceName",
            "type": "CompoundType",
            "tags": [],
            "label": "serviceName",
            "description": [],
            "signature": [
              "string | number | undefined"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UXHasDataResponse.indices",
            "type": "string",
            "tags": [],
            "label": "indices",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.UXMetrics",
        "type": "Interface",
        "tags": [],
        "label": "UXMetrics",
        "description": [],
        "path": "x-pack/plugins/observability/public/components/shared/core_web_vitals/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.UXMetrics.cls",
            "type": "CompoundType",
            "tags": [],
            "label": "cls",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/core_web_vitals/index.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UXMetrics.fid",
            "type": "CompoundType",
            "tags": [],
            "label": "fid",
            "description": [],
            "signature": [
              "number | null | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/core_web_vitals/index.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UXMetrics.lcp",
            "type": "CompoundType",
            "tags": [],
            "label": "lcp",
            "description": [],
            "signature": [
              "number | null | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/core_web_vitals/index.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UXMetrics.tbt",
            "type": "number",
            "tags": [],
            "label": "tbt",
            "description": [],
            "path": "x-pack/plugins/observability/public/components/shared/core_web_vitals/index.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UXMetrics.fcp",
            "type": "CompoundType",
            "tags": [],
            "label": "fcp",
            "description": [],
            "signature": [
              "number | null | undefined"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/core_web_vitals/index.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UXMetrics.coreVitalPages",
            "type": "number",
            "tags": [],
            "label": "coreVitalPages",
            "description": [],
            "path": "x-pack/plugins/observability/public/components/shared/core_web_vitals/index.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UXMetrics.lcpRanks",
            "type": "Array",
            "tags": [],
            "label": "lcpRanks",
            "description": [],
            "signature": [
              "number[]"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/core_web_vitals/index.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UXMetrics.fidRanks",
            "type": "Array",
            "tags": [],
            "label": "fidRanks",
            "description": [],
            "signature": [
              "number[]"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/core_web_vitals/index.tsx",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-public.UXMetrics.clsRanks",
            "type": "Array",
            "tags": [],
            "label": "clsRanks",
            "description": [],
            "signature": [
              "number[]"
            ],
            "path": "x-pack/plugins/observability/public/components/shared/core_web_vitals/index.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "parentPluginId": "observability",
        "id": "def-public.FETCH_STATUS",
        "type": "Enum",
        "tags": [],
        "label": "FETCH_STATUS",
        "description": [],
        "path": "x-pack/plugins/observability/public/hooks/use_fetcher.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.METRIC_TYPE",
        "type": "Enum",
        "tags": [],
        "label": "METRIC_TYPE",
        "description": [],
        "path": "packages/kbn-analytics/src/metrics/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ReportTypes",
        "type": "Enum",
        "tags": [],
        "label": "ReportTypes",
        "description": [],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/constants/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "observability",
        "id": "def-public.AddInspectorRequest",
        "type": "Type",
        "tags": [],
        "label": "AddInspectorRequest",
        "description": [],
        "signature": [
          "(result: ",
          "FetcherResult",
          "<{ mainStatisticsData?: { _inspect?: ",
          "InspectResponse",
          " | undefined; } | undefined; _inspect?: ",
          "InspectResponse",
          " | undefined; }>) => void"
        ],
        "path": "x-pack/plugins/observability/public/context/inspector/inspector_context.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.AddInspectorRequest.$1",
            "type": "Object",
            "tags": [],
            "label": "result",
            "description": [],
            "signature": [
              "FetcherResult",
              "<{ mainStatisticsData?: { _inspect?: ",
              "InspectResponse",
              " | undefined; } | undefined; _inspect?: ",
              "InspectResponse",
              " | undefined; }>"
            ],
            "path": "x-pack/plugins/observability/public/context/inspector/inspector_context.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ALL_VALUES_SELECTED",
        "type": "string",
        "tags": [],
        "label": "ALL_VALUES_SELECTED",
        "description": [],
        "signature": [
          "\"ALL_VALUES\""
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/constants/url_constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.AllSeries",
        "type": "Type",
        "tags": [],
        "label": "AllSeries",
        "description": [],
        "signature": [
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.SeriesUrl",
            "text": "SeriesUrl"
          },
          "[]"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/hooks/use_series_storage.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.apmServiceGroupMaxNumberOfServices",
        "type": "string",
        "tags": [],
        "label": "apmServiceGroupMaxNumberOfServices",
        "description": [],
        "signature": [
          "\"observability:apmServiceGroupMaxNumberOfServices\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.DragHandleProps",
        "type": "Type",
        "tags": [],
        "label": "DragHandleProps",
        "description": [],
        "signature": [
          "DraggableProvidedDragHandleProps",
          " | undefined"
        ],
        "path": "x-pack/plugins/observability/public/typings/eui_draggable/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.DropResult",
        "type": "Type",
        "tags": [],
        "label": "DropResult",
        "description": [],
        "signature": [
          "DropResult"
        ],
        "path": "x-pack/plugins/observability/public/typings/eui_draggable/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.DurationUnit",
        "type": "Type",
        "tags": [],
        "label": "DurationUnit",
        "description": [],
        "signature": [
          "\"M\" | \"w\" | \"d\" | \"h\" | \"m\" | \"Y\""
        ],
        "path": "x-pack/plugins/observability/public/typings/slo/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.enableAgentExplorerView",
        "type": "string",
        "tags": [],
        "label": "enableAgentExplorerView",
        "description": [],
        "signature": [
          "\"observability:apmAgentExplorerView\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.enableComparisonByDefault",
        "type": "string",
        "tags": [],
        "label": "enableComparisonByDefault",
        "description": [],
        "signature": [
          "\"observability:enableComparisonByDefault\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.enableInfrastructureHostsView",
        "type": "string",
        "tags": [],
        "label": "enableInfrastructureHostsView",
        "description": [],
        "signature": [
          "\"observability:enableInfrastructureHostsView\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.enableInspectEsQueries",
        "type": "string",
        "tags": [],
        "label": "enableInspectEsQueries",
        "description": [],
        "signature": [
          "\"observability:enableInspectEsQueries\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ENVIRONMENT_ALL",
        "type": "string",
        "tags": [],
        "label": "ENVIRONMENT_ALL",
        "description": [],
        "signature": [
          "\"ENVIRONMENT_ALL\""
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/constants/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.FetchData",
        "type": "Type",
        "tags": [],
        "label": "FetchData",
        "description": [],
        "signature": [
          "(fetchDataParams: ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.FetchDataParams",
            "text": "FetchDataParams"
          },
          ") => Promise<T>"
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.FetchData.$1",
            "type": "Object",
            "tags": [],
            "label": "fetchDataParams",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.FetchDataParams",
                "text": "FetchDataParams"
              }
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.FILTER_RECORDS",
        "type": "string",
        "tags": [],
        "label": "FILTER_RECORDS",
        "description": [],
        "signature": [
          "\"FILTER_RECORDS\""
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/constants/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.HasData",
        "type": "Type",
        "tags": [],
        "label": "HasData",
        "description": [],
        "signature": [
          "(params?: ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.HasDataParams",
            "text": "HasDataParams"
          },
          " | undefined) => Promise<",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.ObservabilityHasDataResponse",
            "text": "ObservabilityHasDataResponse"
          },
          "[T]>"
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.HasData.$1",
            "type": "Object",
            "tags": [],
            "label": "params",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "public",
                "docId": "kibObservabilityPluginApi",
                "section": "def-public.HasDataParams",
                "text": "HasDataParams"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.LazyObservabilityPageTemplateProps",
        "type": "Type",
        "tags": [],
        "label": "LazyObservabilityPageTemplateProps",
        "description": [],
        "signature": [
          "Pick<",
          "KibanaPageTemplateProps",
          ", \"children\" | \"data-test-subj\" | \"paddingSize\" | \"restrictWidth\" | \"noDataConfig\" | \"pageHeader\" | \"isEmptyState\"> & { showSolutionNav?: boolean | undefined; isPageDataLoaded?: boolean | undefined; pageSectionProps?: ",
          "EuiPageSectionProps",
          " | undefined; bottomBar?: React.ReactNode; bottomBarProps?: ",
          "_EuiPageBottomBarProps",
          " | undefined; }"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/page_template/lazy_page_template.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.NumberOrNull",
        "type": "Type",
        "tags": [],
        "label": "NumberOrNull",
        "description": [],
        "signature": [
          "number | null"
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ObservabilityFetchDataPlugins",
        "type": "Type",
        "tags": [],
        "label": "ObservabilityFetchDataPlugins",
        "description": [],
        "signature": [
          "\"apm\" | \"synthetics\" | \"ux\" | \"infra_logs\" | \"infra_metrics\""
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ObservabilityRuleTypeFormatter",
        "type": "Type",
        "tags": [],
        "label": "ObservabilityRuleTypeFormatter",
        "description": [],
        "signature": [
          "(options: { fields: OutputOf<SetOptional<{ readonly \"kibana.alert.rule.parameters\": { readonly type: \"flattened\"; readonly ignore_above: 4096; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; }; readonly \"kibana.alert.time_range\": { readonly type: \"date_range\"; readonly format: \"epoch_millis||strict_date_optional_time\"; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.flapping\": { readonly type: \"boolean\"; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.case_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.execution.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.field\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.terms.value\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.docs_count\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly '@timestamp': { readonly type: \"date\"; readonly array: false; readonly required: true; }; readonly 'event.action': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly 'event.kind': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; }>> & Record<string, any>; formatters: { asDuration: (value: ",
          "Maybe",
          "<number>, { defaultValue, extended }?: FormatterOptions) => string; asPercent: (numerator: ",
          "Maybe",
          "<number>, denominator: number | undefined, fallbackResult?: any) => any; }; }) => { reason: string; link: string; }"
        ],
        "path": "x-pack/plugins/observability/public/rules/create_observability_rule_type_registry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.ObservabilityRuleTypeFormatter.$1",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "{ fields: OutputOf<SetOptional<{ readonly \"kibana.alert.rule.parameters\": { readonly type: \"flattened\"; readonly ignore_above: 4096; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; }; readonly \"kibana.alert.time_range\": { readonly type: \"date_range\"; readonly format: \"epoch_millis||strict_date_optional_time\"; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly required: true; }; readonly \"kibana.alert.flapping\": { readonly type: \"boolean\"; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.case_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.execution.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.field\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.terms.value\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.docs_count\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly '@timestamp': { readonly type: \"date\"; readonly array: false; readonly required: true; }; readonly 'event.action': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly 'event.kind': { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; }>> & Record<string, any>; formatters: { asDuration: (value: ",
              "Maybe",
              "<number>, { defaultValue, extended }?: FormatterOptions) => string; asPercent: (numerator: ",
              "Maybe",
              "<number>, denominator: number | undefined, fallbackResult?: any) => any; }; }"
            ],
            "path": "x-pack/plugins/observability/public/rules/create_observability_rule_type_registry.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.ObservabilityRuleTypeRegistry",
        "type": "Type",
        "tags": [],
        "label": "ObservabilityRuleTypeRegistry",
        "description": [],
        "signature": [
          "{ register: (type: ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.ObservabilityRuleTypeModel",
            "text": "ObservabilityRuleTypeModel"
          },
          "<any>) => void; getFormatter: (typeId: string) => ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.ObservabilityRuleTypeFormatter",
            "text": "ObservabilityRuleTypeFormatter"
          },
          " | undefined; list: () => string[]; }"
        ],
        "path": "x-pack/plugins/observability/public/rules/create_observability_rule_type_registry.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.OPERATION_COLUMN",
        "type": "string",
        "tags": [],
        "label": "OPERATION_COLUMN",
        "description": [],
        "signature": [
          "\"operation\""
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/constants/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.RECORDS_FIELD",
        "type": "string",
        "tags": [],
        "label": "RECORDS_FIELD",
        "description": [],
        "signature": [
          "\"___records___\""
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/constants/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.RECORDS_PERCENTAGE_FIELD",
        "type": "string",
        "tags": [],
        "label": "RECORDS_PERCENTAGE_FIELD",
        "description": [],
        "signature": [
          "\"RecordsPercentage\""
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/constants/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.REPORT_METRIC_FIELD",
        "type": "string",
        "tags": [],
        "label": "REPORT_METRIC_FIELD",
        "description": [],
        "signature": [
          "\"REPORT_METRIC_FIELD\""
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/constants/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.SectionLinkProps",
        "type": "Type",
        "tags": [],
        "label": "SectionLinkProps",
        "description": [],
        "signature": [
          "CommonProps",
          " & Omit<(",
          "DisambiguateSet",
          "<(",
          "DisambiguateSet",
          "<React.ButtonHTMLAttributes<HTMLButtonElement>, Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">> & Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">) | (",
          "DisambiguateSet",
          "<Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">, React.ButtonHTMLAttributes<HTMLButtonElement>> & React.ButtonHTMLAttributes<HTMLButtonElement>), React.HTMLAttributes<HTMLSpanElement>> & React.HTMLAttributes<HTMLSpanElement>) | (",
          "DisambiguateSet",
          "<React.HTMLAttributes<HTMLSpanElement>, (",
          "DisambiguateSet",
          "<React.ButtonHTMLAttributes<HTMLButtonElement>, Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">> & Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">) | (",
          "DisambiguateSet",
          "<Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">, React.ButtonHTMLAttributes<HTMLButtonElement>> & React.ButtonHTMLAttributes<HTMLButtonElement>)> & ((",
          "DisambiguateSet",
          "<React.ButtonHTMLAttributes<HTMLButtonElement>, Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">> & Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">) | (",
          "DisambiguateSet",
          "<Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\">, React.ButtonHTMLAttributes<HTMLButtonElement>> & React.ButtonHTMLAttributes<HTMLButtonElement>))), \"color\" | \"onClick\" | \"rel\" | \"target\"> & { size?: \"m\" | \"s\" | \"xs\" | \"l\" | undefined; color?: \"subdued\" | \"primary\" | \"text\" | undefined; label: React.ReactNode; isActive?: boolean | undefined; isDisabled?: boolean | undefined; href?: string | undefined; target?: string | undefined; rel?: string | undefined; iconType?: ",
          "IconType",
          " | undefined; iconProps?: Omit<",
          "EuiIconProps",
          ", \"type\"> | undefined; icon?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined; showToolTip?: boolean | undefined; extraAction?: ",
          "EuiListGroupItemExtraActionProps",
          " | undefined; onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined; wrapText?: boolean | undefined; buttonRef?: React.Ref<HTMLButtonElement> | undefined; toolTipText?: string | undefined; }"
        ],
        "path": "x-pack/plugins/observability/public/components/shared/action_menu/index.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.StringOrNull",
        "type": "Type",
        "tags": [],
        "label": "StringOrNull",
        "description": [],
        "signature": [
          "string | null"
        ],
        "path": "x-pack/plugins/observability/public/typings/fetch_overview_data/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.Subset",
        "type": "Type",
        "tags": [],
        "label": "Subset",
        "description": [
          "\nAllow partial of nested object"
        ],
        "signature": [
          "{ [attr in keyof K]?: (K[attr] extends object ? ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.Subset",
            "text": "Subset"
          },
          "<K[attr]> : K[attr]) | undefined; }"
        ],
        "path": "x-pack/plugins/observability/public/typings/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.TERMS_COLUMN",
        "type": "string",
        "tags": [],
        "label": "TERMS_COLUMN",
        "description": [],
        "signature": [
          "\"TERMS_COLUMN\""
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/constants/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.TrackMetricOptions",
        "type": "Type",
        "tags": [],
        "label": "TrackMetricOptions",
        "description": [],
        "signature": [
          "TrackOptions & { metric: string; }"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.UiTracker",
        "type": "Type",
        "tags": [],
        "label": "UiTracker",
        "description": [],
        "signature": [
          "(options: ",
          {
            "pluginId": "observability",
            "scope": "public",
            "docId": "kibObservabilityPluginApi",
            "section": "def-public.TrackMetricOptions",
            "text": "TrackMetricOptions"
          },
          ") => void"
        ],
        "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-public.UiTracker.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "TrackOptions & { metric: string; }"
            ],
            "path": "x-pack/plugins/observability/public/hooks/use_track_metric.tsx",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.uptimeOverviewLocatorID",
        "type": "string",
        "tags": [],
        "label": "uptimeOverviewLocatorID",
        "description": [],
        "signature": [
          "\"UPTIME_OVERVIEW_LOCATOR\""
        ],
        "path": "x-pack/plugins/observability/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-public.USE_BREAK_DOWN_COLUMN",
        "type": "string",
        "tags": [],
        "label": "USE_BREAK_DOWN_COLUMN",
        "description": [],
        "signature": [
          "\"USE_BREAK_DOWN_COLUMN\""
        ],
        "path": "x-pack/plugins/observability/public/components/shared/exploratory_view/configurations/constants/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "parentPluginId": "observability",
      "id": "def-public.ObservabilityPublicSetup",
      "type": "Type",
      "tags": [],
      "label": "ObservabilityPublicSetup",
      "description": [],
      "signature": [
        "{ dashboard: { register: <T extends ",
        {
          "pluginId": "observability",
          "scope": "public",
          "docId": "kibObservabilityPluginApi",
          "section": "def-public.ObservabilityFetchDataPlugins",
          "text": "ObservabilityFetchDataPlugins"
        },
        ">({ appName, fetchData, hasData, }: { appName: T; } & ",
        {
          "pluginId": "observability",
          "scope": "public",
          "docId": "kibObservabilityPluginApi",
          "section": "def-public.DataHandler",
          "text": "DataHandler"
        },
        "<T>) => void; }; observabilityRuleTypeRegistry: { register: (type: ",
        {
          "pluginId": "observability",
          "scope": "public",
          "docId": "kibObservabilityPluginApi",
          "section": "def-public.ObservabilityRuleTypeModel",
          "text": "ObservabilityRuleTypeModel"
        },
        "<any>) => void; getFormatter: (typeId: string) => ",
        {
          "pluginId": "observability",
          "scope": "public",
          "docId": "kibObservabilityPluginApi",
          "section": "def-public.ObservabilityRuleTypeFormatter",
          "text": "ObservabilityRuleTypeFormatter"
        },
        " | undefined; list: () => string[]; }; navigation: { registerSections: (sections$: ",
        "Observable",
        "<",
        {
          "pluginId": "observability",
          "scope": "public",
          "docId": "kibObservabilityPluginApi",
          "section": "def-public.NavigationSection",
          "text": "NavigationSection"
        },
        "[]>) => void; }; useRulesLink: (options?: ",
        "Options",
        ") => ",
        "LinkProps",
        "; }"
      ],
      "path": "x-pack/plugins/observability/public/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "observability",
      "id": "def-public.ObservabilityPublicStart",
      "type": "Type",
      "tags": [],
      "label": "ObservabilityPublicStart",
      "description": [],
      "signature": [
        "{ observabilityRuleTypeRegistry: { register: (type: ",
        {
          "pluginId": "observability",
          "scope": "public",
          "docId": "kibObservabilityPluginApi",
          "section": "def-public.ObservabilityRuleTypeModel",
          "text": "ObservabilityRuleTypeModel"
        },
        "<any>) => void; getFormatter: (typeId: string) => ",
        {
          "pluginId": "observability",
          "scope": "public",
          "docId": "kibObservabilityPluginApi",
          "section": "def-public.ObservabilityRuleTypeFormatter",
          "text": "ObservabilityRuleTypeFormatter"
        },
        " | undefined; list: () => string[]; }; navigation: { PageTemplate: (pageTemplateProps: ",
        "WrappedPageTemplateProps",
        ") => JSX.Element; }; createExploratoryViewUrl: ({ reportType, allSeries }: { reportType: ",
        "ReportViewType",
        "; allSeries: ",
        {
          "pluginId": "observability",
          "scope": "public",
          "docId": "kibObservabilityPluginApi",
          "section": "def-public.AllSeries",
          "text": "AllSeries"
        },
        "; }, baseHref?: string, appId?: string) => string; getAppDataView: (appId: ",
        "AppDataType",
        ", indexPattern?: string | undefined) => Promise<",
        {
          "pluginId": "dataViews",
          "scope": "common",
          "docId": "kibDataViewsPluginApi",
          "section": "def-common.DataView",
          "text": "DataView"
        },
        " | null | undefined>; ExploratoryViewEmbeddable: (props: ",
        {
          "pluginId": "observability",
          "scope": "public",
          "docId": "kibObservabilityPluginApi",
          "section": "def-public.ExploratoryEmbeddableProps",
          "text": "ExploratoryEmbeddableProps"
        },
        ") => JSX.Element | null; useRulesLink: (options?: ",
        "Options",
        ") => ",
        "LinkProps",
        "; }"
      ],
      "path": "x-pack/plugins/observability/public/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "observability",
        "id": "def-server.WrappedElasticsearchClientError",
        "type": "Class",
        "tags": [],
        "label": "WrappedElasticsearchClientError",
        "description": [],
        "signature": [
          "WrappedElasticsearchClientError",
          " extends Error"
        ],
        "path": "x-pack/plugins/observability/common/utils/unwrap_es_response.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.WrappedElasticsearchClientError.originalError",
            "type": "Object",
            "tags": [],
            "label": "originalError",
            "description": [],
            "signature": [
              "ElasticsearchClientError"
            ],
            "path": "x-pack/plugins/observability/common/utils/unwrap_es_response.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.WrappedElasticsearchClientError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/observability/common/utils/unwrap_es_response.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.WrappedElasticsearchClientError.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "originalError",
                "description": [],
                "signature": [
                  "ElasticsearchClientError"
                ],
                "path": "x-pack/plugins/observability/common/utils/unwrap_es_response.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "observability",
        "id": "def-server.createOrUpdateIndex",
        "type": "Function",
        "tags": [],
        "label": "createOrUpdateIndex",
        "description": [],
        "signature": [
          "({\n  index,\n  mappings,\n  client,\n  logger,\n}: { index: string; mappings: ",
          "MappingTypeMapping",
          " & { date_detection?: boolean | undefined; dynamic?: ",
          "MappingDynamicMapping",
          " | undefined; dynamic_date_formats?: string[] | undefined; dynamic_templates?: Record<string, ",
          "MappingDynamicTemplate",
          "> | Record<string, ",
          "MappingDynamicTemplate",
          ">[] | undefined; _field_names?: ",
          "MappingFieldNamesField",
          " | undefined; _meta?: ",
          "Metadata",
          " | undefined; numeric_detection?: boolean | undefined; properties?: Record<string, ",
          "MappingProperty",
          "> | undefined; _routing?: ",
          "MappingRoutingField",
          " | undefined; _source?: ",
          "MappingSourceField",
          " | undefined; runtime?: ",
          "MappingRuntimeFields",
          " | undefined; }; client: ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "common",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-common.ElasticsearchClient",
            "text": "ElasticsearchClient"
          },
          "; logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "common",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-common.Logger",
            "text": "Logger"
          },
          "; }) => Promise<void>"
        ],
        "path": "x-pack/plugins/observability/server/utils/create_or_update_index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.createOrUpdateIndex.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  index,\n  mappings,\n  client,\n  logger,\n}",
            "description": [],
            "path": "x-pack/plugins/observability/server/utils/create_or_update_index.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.createOrUpdateIndex.$1.index",
                "type": "string",
                "tags": [],
                "label": "index",
                "description": [],
                "path": "x-pack/plugins/observability/server/utils/create_or_update_index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.createOrUpdateIndex.$1.mappings",
                "type": "CompoundType",
                "tags": [],
                "label": "mappings",
                "description": [],
                "signature": [
                  "MappingTypeMapping",
                  " & { date_detection?: boolean | undefined; dynamic?: ",
                  "MappingDynamicMapping",
                  " | undefined; dynamic_date_formats?: string[] | undefined; dynamic_templates?: Record<string, ",
                  "MappingDynamicTemplate",
                  "> | Record<string, ",
                  "MappingDynamicTemplate",
                  ">[] | undefined; _field_names?: ",
                  "MappingFieldNamesField",
                  " | undefined; _meta?: ",
                  "Metadata",
                  " | undefined; numeric_detection?: boolean | undefined; properties?: Record<string, ",
                  "MappingProperty",
                  "> | undefined; _routing?: ",
                  "MappingRoutingField",
                  " | undefined; _source?: ",
                  "MappingSourceField",
                  " | undefined; runtime?: ",
                  "MappingRuntimeFields",
                  " | undefined; }"
                ],
                "path": "x-pack/plugins/observability/server/utils/create_or_update_index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.createOrUpdateIndex.$1.client",
                "type": "Object",
                "tags": [],
                "label": "client",
                "description": [],
                "signature": [
                  "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  " | ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  " | ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  " | ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; }; delete: { (this: That, params: ",
                  "DeleteRequest",
                  " | ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; (this: That, params: ",
                  "DeleteRequest",
                  " | ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteRequest",
                  " | ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; cluster: ",
                  "default",
                  "; eql: ",
                  "default",
                  "; search: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument> | ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument> | ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument> | ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; monitoring: ",
                  "default",
                  "; security: ",
                  "default",
                  "; index: { <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument> | ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument> | ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument> | ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument> | ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument> | ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateResponse",
                  "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument> | ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; }; asyncSearch: ",
                  "default",
                  "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
                  "default",
                  "; helpers: ",
                  "default",
                  "; child: (opts: ",
                  "ClientOptions",
                  ") => ",
                  "default",
                  "; autoscaling: ",
                  "default",
                  "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument> | ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument> | ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "BulkResponse",
                  ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument> | ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; }; cat: ",
                  "default",
                  "; ccr: ",
                  "default",
                  "; clearScroll: { (this: That, params?: ",
                  "ClearScrollRequest",
                  " | ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClearScrollResponse",
                  ", unknown>>; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; }; closePointInTime: { (this: That, params: ",
                  "ClosePointInTimeRequest",
                  " | ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  " | ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClosePointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  " | ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; }; count: { (this: That, params?: ",
                  "CountRequest",
                  " | ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; (this: That, params?: ",
                  "CountRequest",
                  " | ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "CountResponse",
                  ", unknown>>; (this: That, params?: ",
                  "CountRequest",
                  " | ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; }; danglingIndices: ",
                  "default",
                  "; deleteByQuery: { (this: That, params: ",
                  "DeleteByQueryRequest",
                  " | ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; (this: That, params: ",
                  "DeleteByQueryRequest",
                  " | ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "DeleteByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRequest",
                  " | ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; }; deleteByQueryRethrottle: { (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  " | ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  " | ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TasksTaskListResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  " | ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; }; deleteScript: { (this: That, params: ",
                  "DeleteScriptRequest",
                  " | ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "DeleteScriptRequest",
                  " | ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteScriptRequest",
                  " | ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; enrich: ",
                  "default",
                  "; exists: { (this: That, params: ",
                  "ExistsRequest",
                  " | ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsRequest",
                  " | ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsRequest",
                  " | ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
                  "ExistsSourceRequest",
                  " | ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsSourceRequest",
                  " | ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsSourceRequest",
                  " | ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  " | ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  " | ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ExplainResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  " | ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; }; features: ",
                  "default",
                  "; fieldCaps: { (this: That, params: ",
                  "FieldCapsRequest",
                  " | ",
                  "FieldCapsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; (this: That, params: ",
                  "FieldCapsRequest",
                  " | ",
                  "FieldCapsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "FieldCapsResponse",
                  ", unknown>>; (this: That, params: ",
                  "FieldCapsRequest",
                  " | ",
                  "FieldCapsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; }; fleet: ",
                  "default",
                  "; getScript: { (this: That, params: ",
                  "GetScriptRequest",
                  " | ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; (this: That, params: ",
                  "GetScriptRequest",
                  " | ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptResponse",
                  ", unknown>>; (this: That, params: ",
                  "GetScriptRequest",
                  " | ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; }; getScriptContext: { (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptContextResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; }; getScriptLanguages: { (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptLanguagesResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  " | ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  " | ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  " | ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<TDocument>; }; graph: ",
                  "default",
                  "; ilm: ",
                  "default",
                  "; indices: ",
                  "default",
                  "; info: { (this: That, params?: ",
                  "InfoRequest",
                  " | ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; (this: That, params?: ",
                  "InfoRequest",
                  " | ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "InfoResponse",
                  ", unknown>>; (this: That, params?: ",
                  "InfoRequest",
                  " | ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; }; ingest: ",
                  "default",
                  "; knnSearch: { <TDocument = unknown>(this: That, params: ",
                  "KnnSearchRequest",
                  " | ",
                  "KnnSearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "KnnSearchResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "KnnSearchRequest",
                  " | ",
                  "KnnSearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "KnnSearchResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "KnnSearchRequest",
                  " | ",
                  "KnnSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "KnnSearchResponse",
                  "<TDocument>>; }; license: ",
                  "default",
                  "; logstash: ",
                  "default",
                  "; mget: { <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MgetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; }; migration: ",
                  "default",
                  "; ml: ",
                  "default",
                  "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  " | ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  " | ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  " | ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  " | ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  " | ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  " | ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MtermvectorsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; }; nodes: ",
                  "default",
                  "; openPointInTime: { (this: That, params: ",
                  "OpenPointInTimeRequest",
                  " | ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  " | ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "OpenPointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  " | ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; }; ping: { (this: That, params?: ",
                  "PingRequest",
                  " | ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params?: ",
                  "PingRequest",
                  " | ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params?: ",
                  "PingRequest",
                  " | ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
                  "PutScriptRequest",
                  " | ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "PutScriptRequest",
                  " | ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "PutScriptRequest",
                  " | ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; rankEval: { (this: That, params: ",
                  "RankEvalRequest",
                  " | ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; (this: That, params: ",
                  "RankEvalRequest",
                  " | ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RankEvalResponse",
                  ", unknown>>; (this: That, params: ",
                  "RankEvalRequest",
                  " | ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; }; reindex: { (this: That, params: ",
                  "ReindexRequest",
                  " | ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; (this: That, params: ",
                  "ReindexRequest",
                  " | ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRequest",
                  " | ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; }; reindexRethrottle: { (this: That, params: ",
                  "ReindexRethrottleRequest",
                  " | ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  " | ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  " | ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; }; renderSearchTemplate: { (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RenderSearchTemplateResponse",
                  ", unknown>>; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; }; rollup: ",
                  "default",
                  "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  " | ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  " | ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  " | ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
                  "SearchMvtRequest",
                  " | ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
                  "SearchMvtRequest",
                  " | ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<ArrayBuffer, unknown>>; (this: That, params: ",
                  "SearchMvtRequest",
                  " | ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
                  "SearchShardsRequest",
                  " | ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchShardsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchTemplateResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; }; searchableSnapshots: ",
                  "default",
                  "; shutdown: ",
                  "default",
                  "; slm: ",
                  "default",
                  "; snapshot: ",
                  "default",
                  "; sql: ",
                  "default",
                  "; ssl: ",
                  "default",
                  "; tasks: ",
                  "default",
                  "; termsEnum: { (this: That, params: ",
                  "TermsEnumRequest",
                  " | ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; (this: That, params: ",
                  "TermsEnumRequest",
                  " | ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermsEnumResponse",
                  ", unknown>>; (this: That, params: ",
                  "TermsEnumRequest",
                  " | ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument> | ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument> | ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermvectorsResponse",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument> | ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; }; textStructure: ",
                  "default",
                  "; transform: ",
                  "default",
                  "; updateByQuery: { (this: That, params: ",
                  "UpdateByQueryRequest",
                  " | ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRequest",
                  " | ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRequest",
                  " | ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; }; updateByQueryRethrottle: { (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  " | ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  " | ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  " | ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; }; watcher: ",
                  "default",
                  "; xpack: ",
                  "default",
                  "; }"
                ],
                "path": "x-pack/plugins/observability/server/utils/create_or_update_index.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.createOrUpdateIndex.$1.logger",
                "type": "Object",
                "tags": [],
                "label": "logger",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.Logger",
                    "text": "Logger"
                  }
                ],
                "path": "x-pack/plugins/observability/server/utils/create_or_update_index.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.createOrUpdateIndexTemplate",
        "type": "Function",
        "tags": [],
        "label": "createOrUpdateIndexTemplate",
        "description": [],
        "signature": [
          "({\n  indexTemplate,\n  client,\n  logger,\n}: { indexTemplate: ",
          "IndicesPutIndexTemplateRequest",
          "; client: ",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "common",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-common.ElasticsearchClient",
            "text": "ElasticsearchClient"
          },
          "; logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "common",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-common.Logger",
            "text": "Logger"
          },
          "; }) => Promise<",
          "AcknowledgedResponseBase",
          " | undefined>"
        ],
        "path": "x-pack/plugins/observability/server/utils/create_or_update_index_template.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.createOrUpdateIndexTemplate.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  indexTemplate,\n  client,\n  logger,\n}",
            "description": [],
            "path": "x-pack/plugins/observability/server/utils/create_or_update_index_template.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.createOrUpdateIndexTemplate.$1.indexTemplate",
                "type": "Object",
                "tags": [],
                "label": "indexTemplate",
                "description": [],
                "signature": [
                  "IndicesPutIndexTemplateRequest"
                ],
                "path": "x-pack/plugins/observability/server/utils/create_or_update_index_template.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.createOrUpdateIndexTemplate.$1.client",
                "type": "Object",
                "tags": [],
                "label": "client",
                "description": [],
                "signature": [
                  "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  " | ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  " | ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetRequest",
                  " | ",
                  "GetRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetResponse",
                  "<TDocument>>; }; delete: { (this: That, params: ",
                  "DeleteRequest",
                  " | ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; (this: That, params: ",
                  "DeleteRequest",
                  " | ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteRequest",
                  " | ",
                  "DeleteRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; cluster: ",
                  "default",
                  "; eql: ",
                  "default",
                  "; search: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params?: ",
                  "SearchRequest",
                  " | ",
                  "SearchRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchResponse",
                  "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument> | ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument> | ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "CreateRequest",
                  "<TDocument> | ",
                  "CreateRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; monitoring: ",
                  "default",
                  "; security: ",
                  "default",
                  "; index: { <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument> | ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument> | ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "WriteResponseBase",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "IndexRequest",
                  "<TDocument> | ",
                  "IndexRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "WriteResponseBase",
                  ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument> | ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument> | ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateResponse",
                  "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument> | ",
                  "UpdateRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateResponse",
                  "<TDocumentR>>; }; asyncSearch: ",
                  "default",
                  "; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
                  "default",
                  "; helpers: ",
                  "default",
                  "; child: (opts: ",
                  "ClientOptions",
                  ") => ",
                  "default",
                  "; autoscaling: ",
                  "default",
                  "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument> | ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument> | ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "BulkResponse",
                  ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument> | ",
                  "BulkRequest",
                  "<TDocument, TPartialDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "BulkResponse",
                  ">; }; cat: ",
                  "default",
                  "; ccr: ",
                  "default",
                  "; clearScroll: { (this: That, params?: ",
                  "ClearScrollRequest",
                  " | ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClearScrollResponse",
                  ", unknown>>; (this: That, params?: ",
                  "ClearScrollRequest",
                  " | ",
                  "ClearScrollRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClearScrollResponse",
                  ">; }; closePointInTime: { (this: That, params: ",
                  "ClosePointInTimeRequest",
                  " | ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  " | ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ClosePointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "ClosePointInTimeRequest",
                  " | ",
                  "ClosePointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ClosePointInTimeResponse",
                  ">; }; count: { (this: That, params?: ",
                  "CountRequest",
                  " | ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; (this: That, params?: ",
                  "CountRequest",
                  " | ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "CountResponse",
                  ", unknown>>; (this: That, params?: ",
                  "CountRequest",
                  " | ",
                  "CountRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "CountResponse",
                  ">; }; danglingIndices: ",
                  "default",
                  "; deleteByQuery: { (this: That, params: ",
                  "DeleteByQueryRequest",
                  " | ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; (this: That, params: ",
                  "DeleteByQueryRequest",
                  " | ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "DeleteByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRequest",
                  " | ",
                  "DeleteByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "DeleteByQueryResponse",
                  ">; }; deleteByQueryRethrottle: { (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  " | ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  " | ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TasksTaskListResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteByQueryRethrottleRequest",
                  " | ",
                  "DeleteByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TasksTaskListResponseBase",
                  ">; }; deleteScript: { (this: That, params: ",
                  "DeleteScriptRequest",
                  " | ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "DeleteScriptRequest",
                  " | ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "DeleteScriptRequest",
                  " | ",
                  "DeleteScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; enrich: ",
                  "default",
                  "; exists: { (this: That, params: ",
                  "ExistsRequest",
                  " | ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsRequest",
                  " | ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsRequest",
                  " | ",
                  "ExistsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
                  "ExistsSourceRequest",
                  " | ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params: ",
                  "ExistsSourceRequest",
                  " | ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params: ",
                  "ExistsSourceRequest",
                  " | ",
                  "ExistsSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  " | ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  " | ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ExplainResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "ExplainRequest",
                  " | ",
                  "ExplainRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ExplainResponse",
                  "<TDocument>>; }; features: ",
                  "default",
                  "; fieldCaps: { (this: That, params: ",
                  "FieldCapsRequest",
                  " | ",
                  "FieldCapsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; (this: That, params: ",
                  "FieldCapsRequest",
                  " | ",
                  "FieldCapsRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "FieldCapsResponse",
                  ", unknown>>; (this: That, params: ",
                  "FieldCapsRequest",
                  " | ",
                  "FieldCapsRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "FieldCapsResponse",
                  ">; }; fleet: ",
                  "default",
                  "; getScript: { (this: That, params: ",
                  "GetScriptRequest",
                  " | ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; (this: That, params: ",
                  "GetScriptRequest",
                  " | ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptResponse",
                  ", unknown>>; (this: That, params: ",
                  "GetScriptRequest",
                  " | ",
                  "GetScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptResponse",
                  ">; }; getScriptContext: { (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptContextResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptContextRequest",
                  " | ",
                  "GetScriptContextRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptContextResponse",
                  ">; }; getScriptLanguages: { (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "GetScriptLanguagesResponse",
                  ", unknown>>; (this: That, params?: ",
                  "GetScriptLanguagesRequest",
                  " | ",
                  "GetScriptLanguagesRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "GetScriptLanguagesResponse",
                  ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  " | ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  " | ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "GetSourceRequest",
                  " | ",
                  "GetSourceRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<TDocument>; }; graph: ",
                  "default",
                  "; ilm: ",
                  "default",
                  "; indices: ",
                  "default",
                  "; info: { (this: That, params?: ",
                  "InfoRequest",
                  " | ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; (this: That, params?: ",
                  "InfoRequest",
                  " | ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "InfoResponse",
                  ", unknown>>; (this: That, params?: ",
                  "InfoRequest",
                  " | ",
                  "InfoRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "InfoResponse",
                  ">; }; ingest: ",
                  "default",
                  "; knnSearch: { <TDocument = unknown>(this: That, params: ",
                  "KnnSearchRequest",
                  " | ",
                  "KnnSearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "KnnSearchResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params: ",
                  "KnnSearchRequest",
                  " | ",
                  "KnnSearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "KnnSearchResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
                  "KnnSearchRequest",
                  " | ",
                  "KnnSearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "KnnSearchResponse",
                  "<TDocument>>; }; license: ",
                  "default",
                  "; logstash: ",
                  "default",
                  "; mget: { <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MgetResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "MgetRequest",
                  " | ",
                  "MgetRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MgetResponse",
                  "<TDocument>>; }; migration: ",
                  "default",
                  "; ml: ",
                  "default",
                  "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  " | ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  " | ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchRequest",
                  " | ",
                  "MsearchRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchResponse",
                  "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  " | ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  " | ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "MsearchTemplateRequest",
                  " | ",
                  "MsearchTemplateRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MsearchTemplateResponse",
                  "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "MtermvectorsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "MtermvectorsRequest",
                  " | ",
                  "MtermvectorsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "MtermvectorsResponse",
                  ">; }; nodes: ",
                  "default",
                  "; openPointInTime: { (this: That, params: ",
                  "OpenPointInTimeRequest",
                  " | ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  " | ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "OpenPointInTimeResponse",
                  ", unknown>>; (this: That, params: ",
                  "OpenPointInTimeRequest",
                  " | ",
                  "OpenPointInTimeRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "OpenPointInTimeResponse",
                  ">; }; ping: { (this: That, params?: ",
                  "PingRequest",
                  " | ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<boolean>; (this: That, params?: ",
                  "PingRequest",
                  " | ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<boolean, unknown>>; (this: That, params?: ",
                  "PingRequest",
                  " | ",
                  "PingRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
                  "PutScriptRequest",
                  " | ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; (this: That, params: ",
                  "PutScriptRequest",
                  " | ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "AcknowledgedResponseBase",
                  ", unknown>>; (this: That, params: ",
                  "PutScriptRequest",
                  " | ",
                  "PutScriptRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "AcknowledgedResponseBase",
                  ">; }; rankEval: { (this: That, params: ",
                  "RankEvalRequest",
                  " | ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; (this: That, params: ",
                  "RankEvalRequest",
                  " | ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RankEvalResponse",
                  ", unknown>>; (this: That, params: ",
                  "RankEvalRequest",
                  " | ",
                  "RankEvalRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RankEvalResponse",
                  ">; }; reindex: { (this: That, params: ",
                  "ReindexRequest",
                  " | ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; (this: That, params: ",
                  "ReindexRequest",
                  " | ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRequest",
                  " | ",
                  "ReindexRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexResponse",
                  ">; }; reindexRethrottle: { (this: That, params: ",
                  "ReindexRethrottleRequest",
                  " | ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  " | ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ReindexRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "ReindexRethrottleRequest",
                  " | ",
                  "ReindexRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ReindexRethrottleResponse",
                  ">; }; renderSearchTemplate: { (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "RenderSearchTemplateResponse",
                  ", unknown>>; (this: That, params?: ",
                  "RenderSearchTemplateRequest",
                  " | ",
                  "RenderSearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "RenderSearchTemplateResponse",
                  ">; }; rollup: ",
                  "default",
                  "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
                  "ScriptsPainlessExecuteRequest",
                  " | ",
                  "ScriptsPainlessExecuteRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScriptsPainlessExecuteResponse",
                  "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  " | ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  " | ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
                  "AggregationsAggregate",
                  ">>(this: That, params: ",
                  "ScrollRequest",
                  " | ",
                  "ScrollRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "ScrollResponse",
                  "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
                  "SearchMvtRequest",
                  " | ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
                  "SearchMvtRequest",
                  " | ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<ArrayBuffer, unknown>>; (this: That, params: ",
                  "SearchMvtRequest",
                  " | ",
                  "SearchMvtRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
                  "SearchShardsRequest",
                  " | ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchShardsResponse",
                  ", unknown>>; (this: That, params?: ",
                  "SearchShardsRequest",
                  " | ",
                  "SearchShardsRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchShardsResponse",
                  ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "SearchTemplateResponse",
                  "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
                  "SearchTemplateRequest",
                  " | ",
                  "SearchTemplateRequest",
                  " | undefined, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "SearchTemplateResponse",
                  "<TDocument>>; }; searchableSnapshots: ",
                  "default",
                  "; shutdown: ",
                  "default",
                  "; slm: ",
                  "default",
                  "; snapshot: ",
                  "default",
                  "; sql: ",
                  "default",
                  "; ssl: ",
                  "default",
                  "; tasks: ",
                  "default",
                  "; termsEnum: { (this: That, params: ",
                  "TermsEnumRequest",
                  " | ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; (this: That, params: ",
                  "TermsEnumRequest",
                  " | ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermsEnumResponse",
                  ", unknown>>; (this: That, params: ",
                  "TermsEnumRequest",
                  " | ",
                  "TermsEnumRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermsEnumResponse",
                  ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument> | ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument> | ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "TermvectorsResponse",
                  ", unknown>>; <TDocument = unknown>(this: That, params: ",
                  "TermvectorsRequest",
                  "<TDocument> | ",
                  "TermvectorsRequest",
                  "<TDocument>, options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "TermvectorsResponse",
                  ">; }; textStructure: ",
                  "default",
                  "; transform: ",
                  "default",
                  "; updateByQuery: { (this: That, params: ",
                  "UpdateByQueryRequest",
                  " | ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRequest",
                  " | ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRequest",
                  " | ",
                  "UpdateByQueryRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryResponse",
                  ">; }; updateByQueryRethrottle: { (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  " | ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithOutMeta",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  " | ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptionsWithMeta",
                  " | undefined): Promise<",
                  "TransportResult",
                  "<",
                  "UpdateByQueryRethrottleResponse",
                  ", unknown>>; (this: That, params: ",
                  "UpdateByQueryRethrottleRequest",
                  " | ",
                  "UpdateByQueryRethrottleRequest",
                  ", options?: ",
                  "TransportRequestOptions",
                  " | undefined): Promise<",
                  "UpdateByQueryRethrottleResponse",
                  ">; }; watcher: ",
                  "default",
                  "; xpack: ",
                  "default",
                  "; }"
                ],
                "path": "x-pack/plugins/observability/server/utils/create_or_update_index_template.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.createOrUpdateIndexTemplate.$1.logger",
                "type": "Object",
                "tags": [],
                "label": "logger",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.Logger",
                    "text": "Logger"
                  }
                ],
                "path": "x-pack/plugins/observability/server/utils/create_or_update_index_template.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.getInspectResponse",
        "type": "Function",
        "tags": [],
        "label": "getInspectResponse",
        "description": [
          "\nCreate a formatted response to be sent in the _inspect key for use in the\ninspector."
        ],
        "signature": [
          "({\n  esError,\n  esRequestParams,\n  esRequestStatus,\n  esResponse,\n  kibanaRequest,\n  operationName,\n  startTime,\n}: { esError: ",
          "WrappedElasticsearchClientError",
          " | null; esRequestParams: Record<string, any>; esRequestStatus: ",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.RequestStatus",
            "text": "RequestStatus"
          },
          "; esResponse: any; kibanaRequest: ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-common.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any>; operationName: string; startTime: number; }) => ",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Request",
            "text": "Request"
          }
        ],
        "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.getInspectResponse.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  esError,\n  esRequestParams,\n  esRequestStatus,\n  esResponse,\n  kibanaRequest,\n  operationName,\n  startTime,\n}",
            "description": [],
            "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.getInspectResponse.$1.esError",
                "type": "CompoundType",
                "tags": [],
                "label": "esError",
                "description": [],
                "signature": [
                  "WrappedElasticsearchClientError",
                  " | null"
                ],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.getInspectResponse.$1.esRequestParams",
                "type": "Object",
                "tags": [],
                "label": "esRequestParams",
                "description": [],
                "signature": [
                  "{ [x: string]: any; }"
                ],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.getInspectResponse.$1.esRequestStatus",
                "type": "Enum",
                "tags": [],
                "label": "esRequestStatus",
                "description": [],
                "signature": [
                  {
                    "pluginId": "inspector",
                    "scope": "common",
                    "docId": "kibInspectorPluginApi",
                    "section": "def-common.RequestStatus",
                    "text": "RequestStatus"
                  }
                ],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.getInspectResponse.$1.esResponse",
                "type": "Any",
                "tags": [],
                "label": "esResponse",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.getInspectResponse.$1.kibanaRequest",
                "type": "Object",
                "tags": [],
                "label": "kibanaRequest",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpServerPluginApi",
                    "section": "def-common.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any>"
                ],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.getInspectResponse.$1.operationName",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.getInspectResponse.$1.startTime",
                "type": "number",
                "tags": [],
                "label": "startTime",
                "description": [],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.kqlQuery",
        "type": "Function",
        "tags": [],
        "label": "kqlQuery",
        "description": [],
        "signature": [
          "(kql: string | undefined) => ",
          "QueryDslQueryContainer",
          "[]"
        ],
        "path": "x-pack/plugins/observability/server/utils/queries.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.kqlQuery.$1",
            "type": "string",
            "tags": [],
            "label": "kql",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/observability/server/utils/queries.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.rangeQuery",
        "type": "Function",
        "tags": [],
        "label": "rangeQuery",
        "description": [],
        "signature": [
          "(start: number | undefined, end: number | undefined, field: string) => ",
          "QueryDslQueryContainer",
          "[]"
        ],
        "path": "x-pack/plugins/observability/server/utils/queries.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.rangeQuery.$1",
            "type": "number",
            "tags": [],
            "label": "start",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/observability/server/utils/queries.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.rangeQuery.$2",
            "type": "number",
            "tags": [],
            "label": "end",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/observability/server/utils/queries.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.rangeQuery.$3",
            "type": "string",
            "tags": [],
            "label": "field",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/plugins/observability/server/utils/queries.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.termQuery",
        "type": "Function",
        "tags": [],
        "label": "termQuery",
        "description": [],
        "signature": [
          "(field: T, value: string | number | boolean | null | undefined, opts: TermQueryOpts) => ",
          "QueryDslQueryContainer",
          "[]"
        ],
        "path": "x-pack/plugins/observability/server/utils/queries.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.termQuery.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "field",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "x-pack/plugins/observability/server/utils/queries.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.termQuery.$2",
            "type": "CompoundType",
            "tags": [],
            "label": "value",
            "description": [],
            "signature": [
              "string | number | boolean | null | undefined"
            ],
            "path": "x-pack/plugins/observability/server/utils/queries.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.termQuery.$3",
            "type": "Object",
            "tags": [],
            "label": "opts",
            "description": [],
            "signature": [
              "TermQueryOpts"
            ],
            "path": "x-pack/plugins/observability/server/utils/queries.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.termsQuery",
        "type": "Function",
        "tags": [],
        "label": "termsQuery",
        "description": [],
        "signature": [
          "(field: string, values: (string | number | boolean | null | undefined)[]) => ",
          "QueryDslQueryContainer",
          "[]"
        ],
        "path": "x-pack/plugins/observability/server/utils/queries.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.termsQuery.$1",
            "type": "string",
            "tags": [],
            "label": "field",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "x-pack/plugins/observability/server/utils/queries.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.termsQuery.$2",
            "type": "Array",
            "tags": [],
            "label": "values",
            "description": [],
            "signature": [
              "(string | number | boolean | null | undefined)[]"
            ],
            "path": "x-pack/plugins/observability/server/utils/queries.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.unwrapEsResponse",
        "type": "Function",
        "tags": [],
        "label": "unwrapEsResponse",
        "description": [],
        "signature": [
          "(responsePromise: T) => Promise<Awaited<T>[\"body\"]>"
        ],
        "path": "x-pack/plugins/observability/common/utils/unwrap_es_response.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.unwrapEsResponse.$1",
            "type": "Uncategorized",
            "tags": [],
            "label": "responsePromise",
            "description": [],
            "signature": [
              "T"
            ],
            "path": "x-pack/plugins/observability/common/utils/unwrap_es_response.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "observability",
        "id": "def-server.ObservabilityRouteCreateOptions",
        "type": "Interface",
        "tags": [],
        "label": "ObservabilityRouteCreateOptions",
        "description": [],
        "path": "x-pack/plugins/observability/server/routes/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.ObservabilityRouteCreateOptions.options",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "{ tags: string[]; }"
            ],
            "path": "x-pack/plugins/observability/server/routes/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.ObservabilityRouteHandlerResources",
        "type": "Interface",
        "tags": [],
        "label": "ObservabilityRouteHandlerResources",
        "description": [],
        "path": "x-pack/plugins/observability/server/routes/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.ObservabilityRouteHandlerResources.core",
            "type": "Object",
            "tags": [],
            "label": "core",
            "description": [],
            "signature": [
              "{ start: () => Promise<",
              {
                "pluginId": "@kbn/core-lifecycle-server",
                "scope": "common",
                "docId": "kibKbnCoreLifecycleServerPluginApi",
                "section": "def-common.CoreStart",
                "text": "CoreStart"
              },
              ">; setup: ",
              {
                "pluginId": "@kbn/core-lifecycle-server",
                "scope": "common",
                "docId": "kibKbnCoreLifecycleServerPluginApi",
                "section": "def-common.CoreSetup",
                "text": "CoreSetup"
              },
              "<object, unknown>; }"
            ],
            "path": "x-pack/plugins/observability/server/routes/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.ObservabilityRouteHandlerResources.ruleDataService",
            "type": "Object",
            "tags": [],
            "label": "ruleDataService",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataService",
                "text": "IRuleDataService"
              }
            ],
            "path": "x-pack/plugins/observability/server/routes/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.ObservabilityRouteHandlerResources.spacesService",
            "type": "Object",
            "tags": [],
            "label": "spacesService",
            "description": [],
            "signature": [
              {
                "pluginId": "spaces",
                "scope": "server",
                "docId": "kibSpacesPluginApi",
                "section": "def-server.SpacesServiceStart",
                "text": "SpacesServiceStart"
              }
            ],
            "path": "x-pack/plugins/observability/server/routes/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.ObservabilityRouteHandlerResources.request",
            "type": "Object",
            "tags": [],
            "label": "request",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpServerPluginApi",
                "section": "def-common.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>"
            ],
            "path": "x-pack/plugins/observability/server/routes/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.ObservabilityRouteHandlerResources.context",
            "type": "CompoundType",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.RequestHandlerContext",
                "text": "RequestHandlerContext"
              },
              " & { licensing: Promise<",
              {
                "pluginId": "licensing",
                "scope": "server",
                "docId": "kibLicensingPluginApi",
                "section": "def-server.LicensingApiRequestHandlerContext",
                "text": "LicensingApiRequestHandlerContext"
              },
              ">; alerting: Promise<",
              {
                "pluginId": "alerting",
                "scope": "server",
                "docId": "kibAlertingPluginApi",
                "section": "def-server.AlertingApiRequestHandlerContext",
                "text": "AlertingApiRequestHandlerContext"
              },
              ">; core: Promise<",
              {
                "pluginId": "@kbn/core-http-request-handler-context-server",
                "scope": "common",
                "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
                "section": "def-common.CoreRequestHandlerContext",
                "text": "CoreRequestHandlerContext"
              },
              ">; }"
            ],
            "path": "x-pack/plugins/observability/server/routes/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.ObservabilityRouteHandlerResources.logger",
            "type": "Object",
            "tags": [],
            "label": "logger",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              }
            ],
            "path": "x-pack/plugins/observability/server/routes/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "observability",
        "id": "def-server.AbstractObservabilityServerRouteRepository",
        "type": "Type",
        "tags": [],
        "label": "AbstractObservabilityServerRouteRepository",
        "description": [],
        "signature": [
          "{ [x: string]: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<string, ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.RouteParamsRT",
            "text": "RouteParamsRT"
          },
          " | undefined, any, any, Record<string, any>>; }"
        ],
        "path": "x-pack/plugins/observability/server/routes/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.Mappings",
        "type": "Type",
        "tags": [],
        "label": "Mappings",
        "description": [],
        "signature": [
          "MappingTypeMapping",
          " & { date_detection?: boolean | undefined; dynamic?: ",
          "MappingDynamicMapping",
          " | undefined; dynamic_date_formats?: string[] | undefined; dynamic_templates?: Record<string, ",
          "MappingDynamicTemplate",
          "> | Record<string, ",
          "MappingDynamicTemplate",
          ">[] | undefined; _field_names?: ",
          "MappingFieldNamesField",
          " | undefined; _meta?: ",
          "Metadata",
          " | undefined; numeric_detection?: boolean | undefined; properties?: Record<string, ",
          "MappingProperty",
          "> | undefined; _routing?: ",
          "MappingRoutingField",
          " | undefined; _source?: ",
          "MappingSourceField",
          " | undefined; runtime?: ",
          "MappingRuntimeFields",
          " | undefined; }"
        ],
        "path": "x-pack/plugins/observability/server/utils/create_or_update_index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.ObservabilityAPIReturnType",
        "type": "Type",
        "tags": [],
        "label": "ObservabilityAPIReturnType",
        "description": [],
        "signature": [
          "{ \"PUT /api/observability/slos/{id}\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"PUT /api/observability/slos/{id}\", ",
          "TypeC",
          "<{ path: ",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>; body: ",
          "PartialC",
          "<{ name: ",
          "StringC",
          "; description: ",
          "StringC",
          "; indicator: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.apm.transactionDuration\">; params: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ environment: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; service: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionType: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionName: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; 'threshold.us': ",
          "NumberC",
          "; }>, ",
          "PartialC",
          "<{ index: ",
          "StringC",
          "; }>]>; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.apm.transactionErrorRate\">; params: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ environment: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; service: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionType: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionName: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; }>, ",
          "PartialC",
          "<{ goodStatusCodes: ",
          "ArrayC",
          "<",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"2xx\">, ",
          "LiteralC",
          "<\"3xx\">, ",
          "LiteralC",
          "<\"4xx\">, ",
          "LiteralC",
          "<\"5xx\">]>>; index: ",
          "StringC",
          "; }>]>; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.kql.custom\">; params: ",
          "TypeC",
          "<{ index: ",
          "StringC",
          "; filter: ",
          "StringC",
          "; good: ",
          "StringC",
          "; total: ",
          "StringC",
          "; }>; }>]>; timeWindow: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ duration: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; isRolling: ",
          "LiteralC",
          "<boolean>; }>, ",
          "TypeC",
          "<{ duration: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; calendar: ",
          "TypeC",
          "<{ startTime: ",
          "Type",
          "<Date, string, unknown>; }>; }>]>; budgetingMethod: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"occurrences\">, ",
          "LiteralC",
          "<\"timeslices\">]>; objective: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ target: ",
          "NumberC",
          "; }>, ",
          "PartialC",
          "<{ timesliceTarget: ",
          "NumberC",
          "; timesliceWindow: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; }>]>; settings: ",
          "PartialC",
          "<{ timestampField: ",
          "StringC",
          "; syncDelay: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; frequency: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; }>; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", { id: string; name: string; description: string; indicator: { type: \"sli.apm.transactionDuration\"; params: { environment: string; service: string; transactionType: string; transactionName: string; 'threshold.us': number; } & { index?: string | undefined; }; } | { type: \"sli.apm.transactionErrorRate\"; params: { environment: string; service: string; transactionType: string; transactionName: string; } & { goodStatusCodes?: (\"2xx\" | \"3xx\" | \"4xx\" | \"5xx\")[] | undefined; index?: string | undefined; }; } | { type: \"sli.kql.custom\"; params: { index: string; filter: string; good: string; total: string; }; }; timeWindow: { duration: string; isRolling: boolean; } | { duration: string; calendar: { startTime: string; }; }; budgetingMethod: \"occurrences\" | \"timeslices\"; objective: { target: number; } & { timesliceTarget?: number | undefined; timesliceWindow?: string | undefined; }; revision: number; settings: { timestampField: string; syncDelay: string; frequency: string; }; enabled: boolean; createdAt: string; updatedAt: string; }, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"GET /api/observability/slos/{id}\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"GET /api/observability/slos/{id}\", ",
          "TypeC",
          "<{ path: ",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", { id: string; name: string; description: string; indicator: { type: \"sli.apm.transactionDuration\"; params: { environment: string; service: string; transactionType: string; transactionName: string; 'threshold.us': number; } & { index?: string | undefined; }; } | { type: \"sli.apm.transactionErrorRate\"; params: { environment: string; service: string; transactionType: string; transactionName: string; } & { goodStatusCodes?: (\"2xx\" | \"3xx\" | \"4xx\" | \"5xx\")[] | undefined; index?: string | undefined; }; } | { type: \"sli.kql.custom\"; params: { index: string; filter: string; good: string; total: string; }; }; timeWindow: { duration: string; isRolling: boolean; } | { duration: string; calendar: { startTime: string; }; }; budgetingMethod: \"occurrences\" | \"timeslices\"; objective: { target: number; } & { timesliceTarget?: number | undefined; timesliceWindow?: string | undefined; }; revision: number; settings: { timestampField: string; syncDelay: string; frequency: string; }; enabled: boolean; createdAt: string; updatedAt: string; } & { summary: { status: \"NO_DATA\" | \"HEALTHY\" | \"DEGRADING\" | \"VIOLATED\"; sliValue: number; errorBudget: { initial: number; consumed: number; remaining: number; isEstimated: boolean; }; }; }, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"GET /api/observability/slos\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"GET /api/observability/slos\", ",
          "PartialC",
          "<{ query: ",
          "PartialC",
          "<{ name: ",
          "StringC",
          "; indicatorTypes: ",
          "Type",
          "<string[], string, unknown>; page: ",
          "StringC",
          "; perPage: ",
          "StringC",
          "; sortBy: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"name\">, ",
          "LiteralC",
          "<\"indicatorType\">]>; sortDirection: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"asc\">, ",
          "LiteralC",
          "<\"desc\">]>; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", { page: number; perPage: number; total: number; results: ({ id: string; name: string; description: string; indicator: { type: \"sli.apm.transactionDuration\"; params: { environment: string; service: string; transactionType: string; transactionName: string; 'threshold.us': number; } & { index?: string | undefined; }; } | { type: \"sli.apm.transactionErrorRate\"; params: { environment: string; service: string; transactionType: string; transactionName: string; } & { goodStatusCodes?: (\"2xx\" | \"3xx\" | \"4xx\" | \"5xx\")[] | undefined; index?: string | undefined; }; } | { type: \"sli.kql.custom\"; params: { index: string; filter: string; good: string; total: string; }; }; timeWindow: { duration: string; isRolling: boolean; } | { duration: string; calendar: { startTime: string; }; }; budgetingMethod: \"occurrences\" | \"timeslices\"; objective: { target: number; } & { timesliceTarget?: number | undefined; timesliceWindow?: string | undefined; }; revision: number; settings: { timestampField: string; syncDelay: string; frequency: string; }; enabled: boolean; createdAt: string; updatedAt: string; } & { summary: { status: \"NO_DATA\" | \"HEALTHY\" | \"DEGRADING\" | \"VIOLATED\"; sliValue: number; errorBudget: { initial: number; consumed: number; remaining: number; isEstimated: boolean; }; }; })[]; }, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"POST /internal/observability/slos/_historical_summary\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /internal/observability/slos/_historical_summary\", ",
          "TypeC",
          "<{ body: ",
          "TypeC",
          "<{ sloIds: ",
          "ArrayC",
          "<",
          "StringC",
          ">; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", { [x: string]: ({ date: string; } & { status: \"NO_DATA\" | \"HEALTHY\" | \"DEGRADING\" | \"VIOLATED\"; sliValue: number; errorBudget: { initial: number; consumed: number; remaining: number; isEstimated: boolean; }; })[]; }, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"POST /api/observability/slos/{id}/enable\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /api/observability/slos/{id}/enable\", ",
          "TypeC",
          "<{ path: ",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", void, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"POST /api/observability/slos/{id}/disable\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /api/observability/slos/{id}/disable\", ",
          "TypeC",
          "<{ path: ",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", void, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"DELETE /api/observability/slos/{id}\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"DELETE /api/observability/slos/{id}\", ",
          "TypeC",
          "<{ path: ",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", void, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"POST /api/observability/slos\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /api/observability/slos\", ",
          "TypeC",
          "<{ body: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ name: ",
          "StringC",
          "; description: ",
          "StringC",
          "; indicator: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.apm.transactionDuration\">; params: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ environment: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; service: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionType: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionName: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; 'threshold.us': ",
          "NumberC",
          "; }>, ",
          "PartialC",
          "<{ index: ",
          "StringC",
          "; }>]>; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.apm.transactionErrorRate\">; params: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ environment: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; service: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionType: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionName: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; }>, ",
          "PartialC",
          "<{ goodStatusCodes: ",
          "ArrayC",
          "<",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"2xx\">, ",
          "LiteralC",
          "<\"3xx\">, ",
          "LiteralC",
          "<\"4xx\">, ",
          "LiteralC",
          "<\"5xx\">]>>; index: ",
          "StringC",
          "; }>]>; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.kql.custom\">; params: ",
          "TypeC",
          "<{ index: ",
          "StringC",
          "; filter: ",
          "StringC",
          "; good: ",
          "StringC",
          "; total: ",
          "StringC",
          "; }>; }>]>; timeWindow: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ duration: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; isRolling: ",
          "LiteralC",
          "<boolean>; }>, ",
          "TypeC",
          "<{ duration: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; calendar: ",
          "TypeC",
          "<{ startTime: ",
          "Type",
          "<Date, string, unknown>; }>; }>]>; budgetingMethod: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"occurrences\">, ",
          "LiteralC",
          "<\"timeslices\">]>; objective: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ target: ",
          "NumberC",
          "; }>, ",
          "PartialC",
          "<{ timesliceTarget: ",
          "NumberC",
          "; timesliceWindow: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; }>]>; }>, ",
          "PartialC",
          "<{ settings: ",
          "PartialC",
          "<{ timestampField: ",
          "StringC",
          "; syncDelay: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; frequency: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; }>; }>]>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", { id: string; }, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"GET /api/observability/rules/alerts/dynamic_index_pattern\": ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"GET /api/observability/rules/alerts/dynamic_index_pattern\", ",
          "TypeC",
          "<{ query: ",
          "TypeC",
          "<{ registrationContexts: ",
          "ArrayC",
          "<",
          "StringC",
          ">; namespace: ",
          "StringC",
          "; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", string[], ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          ">; }[TEndpoint] extends ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<any, any, any, infer TReturnType, ",
          "ServerRouteCreateOptions",
          "> ? TReturnType : never"
        ],
        "path": "x-pack/plugins/observability/server/routes/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.ObservabilityConfig",
        "type": "Type",
        "tags": [],
        "label": "ObservabilityConfig",
        "description": [],
        "signature": [
          "{ readonly unsafe: Readonly<{} & { slo: Readonly<{} & { enabled: boolean; }>; alertDetails: Readonly<{} & { metrics: Readonly<{} & { enabled: boolean; }>; apm: Readonly<{} & { enabled: boolean; }>; logs: Readonly<{} & { enabled: boolean; }>; uptime: Readonly<{} & { enabled: boolean; }>; }>; }>; readonly annotations: Readonly<{} & { enabled: boolean; index: string; }>; }"
        ],
        "path": "x-pack/plugins/observability/server/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.ObservabilityServerRouteRepository",
        "type": "Type",
        "tags": [],
        "label": "ObservabilityServerRouteRepository",
        "description": [],
        "signature": [
          "{ \"PUT /api/observability/slos/{id}\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"PUT /api/observability/slos/{id}\", ",
          "TypeC",
          "<{ path: ",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>; body: ",
          "PartialC",
          "<{ name: ",
          "StringC",
          "; description: ",
          "StringC",
          "; indicator: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.apm.transactionDuration\">; params: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ environment: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; service: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionType: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionName: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; 'threshold.us': ",
          "NumberC",
          "; }>, ",
          "PartialC",
          "<{ index: ",
          "StringC",
          "; }>]>; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.apm.transactionErrorRate\">; params: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ environment: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; service: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionType: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionName: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; }>, ",
          "PartialC",
          "<{ goodStatusCodes: ",
          "ArrayC",
          "<",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"2xx\">, ",
          "LiteralC",
          "<\"3xx\">, ",
          "LiteralC",
          "<\"4xx\">, ",
          "LiteralC",
          "<\"5xx\">]>>; index: ",
          "StringC",
          "; }>]>; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.kql.custom\">; params: ",
          "TypeC",
          "<{ index: ",
          "StringC",
          "; filter: ",
          "StringC",
          "; good: ",
          "StringC",
          "; total: ",
          "StringC",
          "; }>; }>]>; timeWindow: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ duration: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; isRolling: ",
          "LiteralC",
          "<boolean>; }>, ",
          "TypeC",
          "<{ duration: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; calendar: ",
          "TypeC",
          "<{ startTime: ",
          "Type",
          "<Date, string, unknown>; }>; }>]>; budgetingMethod: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"occurrences\">, ",
          "LiteralC",
          "<\"timeslices\">]>; objective: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ target: ",
          "NumberC",
          "; }>, ",
          "PartialC",
          "<{ timesliceTarget: ",
          "NumberC",
          "; timesliceWindow: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; }>]>; settings: ",
          "PartialC",
          "<{ timestampField: ",
          "StringC",
          "; syncDelay: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; frequency: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; }>; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", { id: string; name: string; description: string; indicator: { type: \"sli.apm.transactionDuration\"; params: { environment: string; service: string; transactionType: string; transactionName: string; 'threshold.us': number; } & { index?: string | undefined; }; } | { type: \"sli.apm.transactionErrorRate\"; params: { environment: string; service: string; transactionType: string; transactionName: string; } & { goodStatusCodes?: (\"2xx\" | \"3xx\" | \"4xx\" | \"5xx\")[] | undefined; index?: string | undefined; }; } | { type: \"sli.kql.custom\"; params: { index: string; filter: string; good: string; total: string; }; }; timeWindow: { duration: string; isRolling: boolean; } | { duration: string; calendar: { startTime: string; }; }; budgetingMethod: \"occurrences\" | \"timeslices\"; objective: { target: number; } & { timesliceTarget?: number | undefined; timesliceWindow?: string | undefined; }; revision: number; settings: { timestampField: string; syncDelay: string; frequency: string; }; enabled: boolean; createdAt: string; updatedAt: string; }, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"GET /api/observability/slos/{id}\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"GET /api/observability/slos/{id}\", ",
          "TypeC",
          "<{ path: ",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", { id: string; name: string; description: string; indicator: { type: \"sli.apm.transactionDuration\"; params: { environment: string; service: string; transactionType: string; transactionName: string; 'threshold.us': number; } & { index?: string | undefined; }; } | { type: \"sli.apm.transactionErrorRate\"; params: { environment: string; service: string; transactionType: string; transactionName: string; } & { goodStatusCodes?: (\"2xx\" | \"3xx\" | \"4xx\" | \"5xx\")[] | undefined; index?: string | undefined; }; } | { type: \"sli.kql.custom\"; params: { index: string; filter: string; good: string; total: string; }; }; timeWindow: { duration: string; isRolling: boolean; } | { duration: string; calendar: { startTime: string; }; }; budgetingMethod: \"occurrences\" | \"timeslices\"; objective: { target: number; } & { timesliceTarget?: number | undefined; timesliceWindow?: string | undefined; }; revision: number; settings: { timestampField: string; syncDelay: string; frequency: string; }; enabled: boolean; createdAt: string; updatedAt: string; } & { summary: { status: \"NO_DATA\" | \"HEALTHY\" | \"DEGRADING\" | \"VIOLATED\"; sliValue: number; errorBudget: { initial: number; consumed: number; remaining: number; isEstimated: boolean; }; }; }, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"GET /api/observability/slos\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"GET /api/observability/slos\", ",
          "PartialC",
          "<{ query: ",
          "PartialC",
          "<{ name: ",
          "StringC",
          "; indicatorTypes: ",
          "Type",
          "<string[], string, unknown>; page: ",
          "StringC",
          "; perPage: ",
          "StringC",
          "; sortBy: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"name\">, ",
          "LiteralC",
          "<\"indicatorType\">]>; sortDirection: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"asc\">, ",
          "LiteralC",
          "<\"desc\">]>; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", { page: number; perPage: number; total: number; results: ({ id: string; name: string; description: string; indicator: { type: \"sli.apm.transactionDuration\"; params: { environment: string; service: string; transactionType: string; transactionName: string; 'threshold.us': number; } & { index?: string | undefined; }; } | { type: \"sli.apm.transactionErrorRate\"; params: { environment: string; service: string; transactionType: string; transactionName: string; } & { goodStatusCodes?: (\"2xx\" | \"3xx\" | \"4xx\" | \"5xx\")[] | undefined; index?: string | undefined; }; } | { type: \"sli.kql.custom\"; params: { index: string; filter: string; good: string; total: string; }; }; timeWindow: { duration: string; isRolling: boolean; } | { duration: string; calendar: { startTime: string; }; }; budgetingMethod: \"occurrences\" | \"timeslices\"; objective: { target: number; } & { timesliceTarget?: number | undefined; timesliceWindow?: string | undefined; }; revision: number; settings: { timestampField: string; syncDelay: string; frequency: string; }; enabled: boolean; createdAt: string; updatedAt: string; } & { summary: { status: \"NO_DATA\" | \"HEALTHY\" | \"DEGRADING\" | \"VIOLATED\"; sliValue: number; errorBudget: { initial: number; consumed: number; remaining: number; isEstimated: boolean; }; }; })[]; }, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"POST /internal/observability/slos/_historical_summary\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /internal/observability/slos/_historical_summary\", ",
          "TypeC",
          "<{ body: ",
          "TypeC",
          "<{ sloIds: ",
          "ArrayC",
          "<",
          "StringC",
          ">; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", { [x: string]: ({ date: string; } & { status: \"NO_DATA\" | \"HEALTHY\" | \"DEGRADING\" | \"VIOLATED\"; sliValue: number; errorBudget: { initial: number; consumed: number; remaining: number; isEstimated: boolean; }; })[]; }, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"POST /api/observability/slos/{id}/enable\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /api/observability/slos/{id}/enable\", ",
          "TypeC",
          "<{ path: ",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", void, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"POST /api/observability/slos/{id}/disable\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /api/observability/slos/{id}/disable\", ",
          "TypeC",
          "<{ path: ",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", void, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"DELETE /api/observability/slos/{id}\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"DELETE /api/observability/slos/{id}\", ",
          "TypeC",
          "<{ path: ",
          "TypeC",
          "<{ id: ",
          "StringC",
          "; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", void, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"POST /api/observability/slos\"?: ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"POST /api/observability/slos\", ",
          "TypeC",
          "<{ body: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ name: ",
          "StringC",
          "; description: ",
          "StringC",
          "; indicator: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.apm.transactionDuration\">; params: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ environment: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; service: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionType: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionName: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; 'threshold.us': ",
          "NumberC",
          "; }>, ",
          "PartialC",
          "<{ index: ",
          "StringC",
          "; }>]>; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.apm.transactionErrorRate\">; params: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ environment: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; service: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionType: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; transactionName: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"*\">, ",
          "StringC",
          "]>; }>, ",
          "PartialC",
          "<{ goodStatusCodes: ",
          "ArrayC",
          "<",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"2xx\">, ",
          "LiteralC",
          "<\"3xx\">, ",
          "LiteralC",
          "<\"4xx\">, ",
          "LiteralC",
          "<\"5xx\">]>>; index: ",
          "StringC",
          "; }>]>; }>, ",
          "TypeC",
          "<{ type: ",
          "LiteralC",
          "<\"sli.kql.custom\">; params: ",
          "TypeC",
          "<{ index: ",
          "StringC",
          "; filter: ",
          "StringC",
          "; good: ",
          "StringC",
          "; total: ",
          "StringC",
          "; }>; }>]>; timeWindow: ",
          "UnionC",
          "<[",
          "TypeC",
          "<{ duration: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; isRolling: ",
          "LiteralC",
          "<boolean>; }>, ",
          "TypeC",
          "<{ duration: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; calendar: ",
          "TypeC",
          "<{ startTime: ",
          "Type",
          "<Date, string, unknown>; }>; }>]>; budgetingMethod: ",
          "UnionC",
          "<[",
          "LiteralC",
          "<\"occurrences\">, ",
          "LiteralC",
          "<\"timeslices\">]>; objective: ",
          "IntersectionC",
          "<[",
          "TypeC",
          "<{ target: ",
          "NumberC",
          "; }>, ",
          "PartialC",
          "<{ timesliceTarget: ",
          "NumberC",
          "; timesliceWindow: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; }>]>; }>, ",
          "PartialC",
          "<{ settings: ",
          "PartialC",
          "<{ timestampField: ",
          "StringC",
          "; syncDelay: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; frequency: ",
          "Type",
          "<",
          {
            "pluginId": "@kbn/slo-schema",
            "scope": "common",
            "docId": "kibKbnSloSchemaPluginApi",
            "section": "def-common.Duration",
            "text": "Duration"
          },
          ", string, unknown>; }>; }>]>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", { id: string; }, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          "> | undefined; \"GET /api/observability/rules/alerts/dynamic_index_pattern\": ",
          {
            "pluginId": "@kbn/server-route-repository",
            "scope": "public",
            "docId": "kibKbnServerRouteRepositoryPluginApi",
            "section": "def-public.ServerRoute",
            "text": "ServerRoute"
          },
          "<\"GET /api/observability/rules/alerts/dynamic_index_pattern\", ",
          "TypeC",
          "<{ query: ",
          "TypeC",
          "<{ registrationContexts: ",
          "ArrayC",
          "<",
          "StringC",
          ">; namespace: ",
          "StringC",
          "; }>; }>, ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteHandlerResources",
            "text": "ObservabilityRouteHandlerResources"
          },
          ", string[], ",
          {
            "pluginId": "observability",
            "scope": "server",
            "docId": "kibObservabilityPluginApi",
            "section": "def-server.ObservabilityRouteCreateOptions",
            "text": "ObservabilityRouteCreateOptions"
          },
          ">; }"
        ],
        "path": "x-pack/plugins/observability/server/routes/get_global_observability_server_route_repository.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-server.ScopedAnnotationsClient",
        "type": "Type",
        "tags": [],
        "label": "ScopedAnnotationsClient",
        "description": [],
        "signature": [
          "{ readonly index: string; create: (createParams: { annotation: { type: string; }; '@timestamp': string; message: string; } & { tags?: string[] | undefined; service?: { name?: string | undefined; environment?: string | undefined; version?: string | undefined; } | undefined; }) => Promise<{ _id: string; _index: string; _source: ",
          "Annotation",
          "; }>; getById: (getByIdParams: { id: string; }) => Promise<",
          "GetResponse",
          "<unknown>>; delete: (deleteParams: { id: string; }) => Promise<",
          "WriteResponseBase",
          ">; }"
        ],
        "path": "x-pack/plugins/observability/server/lib/annotations/bootstrap_annotations.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "observability",
        "id": "def-server.uiSettings",
        "type": "Object",
        "tags": [],
        "label": "uiSettings",
        "description": [
          "\nuiSettings definitions for Observability."
        ],
        "path": "x-pack/plugins/observability/server/ui_settings.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.enableInspectEsQueries",
            "type": "Object",
            "tags": [],
            "label": "[enableInspectEsQueries]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInspectEsQueries.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInspectEsQueries.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInspectEsQueries.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInspectEsQueries.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInspectEsQueries.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInspectEsQueries.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.maxSuggestions",
            "type": "Object",
            "tags": [],
            "label": "[maxSuggestions]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.maxSuggestions.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.maxSuggestions.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.maxSuggestions.value",
                "type": "number",
                "tags": [],
                "label": "value",
                "description": [],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.maxSuggestions.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.maxSuggestions.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<number>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.enableComparisonByDefault",
            "type": "Object",
            "tags": [],
            "label": "[enableComparisonByDefault]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableComparisonByDefault.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableComparisonByDefault.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableComparisonByDefault.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableComparisonByDefault.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableComparisonByDefault.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.defaultApmServiceEnvironment",
            "type": "Object",
            "tags": [],
            "label": "[defaultApmServiceEnvironment]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.defaultApmServiceEnvironment.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.defaultApmServiceEnvironment.sensitive",
                "type": "boolean",
                "tags": [],
                "label": "sensitive",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.defaultApmServiceEnvironment.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.defaultApmServiceEnvironment.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.defaultApmServiceEnvironment.value",
                "type": "string",
                "tags": [],
                "label": "value",
                "description": [],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.defaultApmServiceEnvironment.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<string>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.apmProgressiveLoading",
            "type": "Object",
            "tags": [],
            "label": "[apmProgressiveLoading]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmProgressiveLoading.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmProgressiveLoading.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmProgressiveLoading.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmProgressiveLoading.value",
                "type": "Enum",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  {
                    "pluginId": "observability",
                    "scope": "common",
                    "docId": "kibObservabilityPluginApi",
                    "section": "def-common.ProgressiveLoadingQuality",
                    "text": "ProgressiveLoadingQuality"
                  }
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmProgressiveLoading.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<",
                  {
                    "pluginId": "observability",
                    "scope": "common",
                    "docId": "kibObservabilityPluginApi",
                    "section": "def-common.ProgressiveLoadingQuality",
                    "text": "ProgressiveLoadingQuality"
                  },
                  ">"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmProgressiveLoading.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmProgressiveLoading.type",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "\"select\""
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmProgressiveLoading.options",
                "type": "Array",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "observability",
                    "scope": "common",
                    "docId": "kibObservabilityPluginApi",
                    "section": "def-common.ProgressiveLoadingQuality",
                    "text": "ProgressiveLoadingQuality"
                  },
                  "[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmProgressiveLoading.optionLabels",
                "type": "Object",
                "tags": [],
                "label": "optionLabels",
                "description": [],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "observability",
                    "id": "def-server.uiSettings.apmProgressiveLoading.optionLabels.ProgressiveLoadingQuality.off",
                    "type": "Any",
                    "tags": [],
                    "label": "[ProgressiveLoadingQuality.off]",
                    "description": [],
                    "signature": [
                      "any"
                    ],
                    "path": "x-pack/plugins/observability/server/ui_settings.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "observability",
                    "id": "def-server.uiSettings.apmProgressiveLoading.optionLabels.ProgressiveLoadingQuality.low",
                    "type": "Any",
                    "tags": [],
                    "label": "[ProgressiveLoadingQuality.low]",
                    "description": [],
                    "signature": [
                      "any"
                    ],
                    "path": "x-pack/plugins/observability/server/ui_settings.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "observability",
                    "id": "def-server.uiSettings.apmProgressiveLoading.optionLabels.ProgressiveLoadingQuality.medium",
                    "type": "Any",
                    "tags": [],
                    "label": "[ProgressiveLoadingQuality.medium]",
                    "description": [],
                    "signature": [
                      "any"
                    ],
                    "path": "x-pack/plugins/observability/server/ui_settings.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "observability",
                    "id": "def-server.uiSettings.apmProgressiveLoading.optionLabels.ProgressiveLoadingQuality.high",
                    "type": "Any",
                    "tags": [],
                    "label": "[ProgressiveLoadingQuality.high]",
                    "description": [],
                    "signature": [
                      "any"
                    ],
                    "path": "x-pack/plugins/observability/server/ui_settings.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmProgressiveLoading.showInLabs",
                "type": "boolean",
                "tags": [],
                "label": "showInLabs",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.apmServiceInventoryOptimizedSorting",
            "type": "Object",
            "tags": [],
            "label": "[apmServiceInventoryOptimizedSorting]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceInventoryOptimizedSorting.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceInventoryOptimizedSorting.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceInventoryOptimizedSorting.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceInventoryOptimizedSorting.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceInventoryOptimizedSorting.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceInventoryOptimizedSorting.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceInventoryOptimizedSorting.type",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "\"boolean\""
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceInventoryOptimizedSorting.showInLabs",
                "type": "boolean",
                "tags": [],
                "label": "showInLabs",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.apmServiceGroupMaxNumberOfServices",
            "type": "Object",
            "tags": [],
            "label": "[apmServiceGroupMaxNumberOfServices]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceGroupMaxNumberOfServices.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceGroupMaxNumberOfServices.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceGroupMaxNumberOfServices.value",
                "type": "number",
                "tags": [],
                "label": "value",
                "description": [],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceGroupMaxNumberOfServices.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmServiceGroupMaxNumberOfServices.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<number>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.apmTraceExplorerTab",
            "type": "Object",
            "tags": [],
            "label": "[apmTraceExplorerTab]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmTraceExplorerTab.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmTraceExplorerTab.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmTraceExplorerTab.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmTraceExplorerTab.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmTraceExplorerTab.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmTraceExplorerTab.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmTraceExplorerTab.type",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "\"boolean\""
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmTraceExplorerTab.showInLabs",
                "type": "boolean",
                "tags": [],
                "label": "showInLabs",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.apmLabsButton",
            "type": "Object",
            "tags": [],
            "label": "[apmLabsButton]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmLabsButton.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmLabsButton.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmLabsButton.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmLabsButton.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmLabsButton.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmLabsButton.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmLabsButton.type",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "\"boolean\""
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.enableInfrastructureHostsView",
            "type": "Object",
            "tags": [],
            "label": "[enableInfrastructureHostsView]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInfrastructureHostsView.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInfrastructureHostsView.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInfrastructureHostsView.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInfrastructureHostsView.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableInfrastructureHostsView.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.enableAwsLambdaMetrics",
            "type": "Object",
            "tags": [],
            "label": "[enableAwsLambdaMetrics]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAwsLambdaMetrics.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAwsLambdaMetrics.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAwsLambdaMetrics.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAwsLambdaMetrics.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAwsLambdaMetrics.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAwsLambdaMetrics.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAwsLambdaMetrics.type",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "\"boolean\""
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAwsLambdaMetrics.showInLabs",
                "type": "boolean",
                "tags": [],
                "label": "showInLabs",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.enableAgentExplorerView",
            "type": "Object",
            "tags": [],
            "label": "[enableAgentExplorerView]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAgentExplorerView.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAgentExplorerView.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAgentExplorerView.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAgentExplorerView.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAgentExplorerView.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAgentExplorerView.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAgentExplorerView.type",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "\"boolean\""
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableAgentExplorerView.showInLabs",
                "type": "boolean",
                "tags": [],
                "label": "showInLabs",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.apmAWSLambdaPriceFactor",
            "type": "Object",
            "tags": [],
            "label": "[apmAWSLambdaPriceFactor]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmAWSLambdaPriceFactor.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmAWSLambdaPriceFactor.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmAWSLambdaPriceFactor.type",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "\"json\""
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmAWSLambdaPriceFactor.value",
                "type": "string",
                "tags": [],
                "label": "value",
                "description": [],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmAWSLambdaPriceFactor.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmAWSLambdaPriceFactor.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.ObjectType",
                    "text": "ObjectType"
                  },
                  "<{ arm: ",
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<number>; x86_64: ",
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<number>; }>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.apmAWSLambdaRequestCostPerMillion",
            "type": "Object",
            "tags": [],
            "label": "[apmAWSLambdaRequestCostPerMillion]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmAWSLambdaRequestCostPerMillion.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmAWSLambdaRequestCostPerMillion.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmAWSLambdaRequestCostPerMillion.value",
                "type": "number",
                "tags": [],
                "label": "value",
                "description": [],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmAWSLambdaRequestCostPerMillion.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<number>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.apmEnableServiceMetrics",
            "type": "Object",
            "tags": [],
            "label": "[apmEnableServiceMetrics]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableServiceMetrics.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableServiceMetrics.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableServiceMetrics.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableServiceMetrics.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableServiceMetrics.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableServiceMetrics.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.apmEnableContinuousRollups",
            "type": "Object",
            "tags": [],
            "label": "[apmEnableContinuousRollups]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableContinuousRollups.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableContinuousRollups.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableContinuousRollups.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableContinuousRollups.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableContinuousRollups.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.apmEnableContinuousRollups.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.enableCriticalPath",
            "type": "Object",
            "tags": [],
            "label": "[enableCriticalPath]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableCriticalPath.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableCriticalPath.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableCriticalPath.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableCriticalPath.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableCriticalPath.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "false"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableCriticalPath.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableCriticalPath.type",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "\"boolean\""
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.enableCriticalPath.showInLabs",
                "type": "boolean",
                "tags": [],
                "label": "showInLabs",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "observability",
            "id": "def-server.uiSettings.profilingElasticsearchPlugin",
            "type": "Object",
            "tags": [],
            "label": "[profilingElasticsearchPlugin]",
            "description": [],
            "path": "x-pack/plugins/observability/server/ui_settings.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.profilingElasticsearchPlugin.category",
                "type": "Array",
                "tags": [],
                "label": "category",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.profilingElasticsearchPlugin.name",
                "type": "Any",
                "tags": [],
                "label": "name",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.profilingElasticsearchPlugin.description",
                "type": "Any",
                "tags": [],
                "label": "description",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.profilingElasticsearchPlugin.schema",
                "type": "Object",
                "tags": [],
                "label": "schema",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/config-schema",
                    "scope": "common",
                    "docId": "kibKbnConfigSchemaPluginApi",
                    "section": "def-common.Type",
                    "text": "Type"
                  },
                  "<boolean>"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.profilingElasticsearchPlugin.value",
                "type": "boolean",
                "tags": [],
                "label": "value",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.profilingElasticsearchPlugin.requiresPageReload",
                "type": "boolean",
                "tags": [],
                "label": "requiresPageReload",
                "description": [],
                "signature": [
                  "true"
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-server.uiSettings.profilingElasticsearchPlugin.type",
                "type": "string",
                "tags": [],
                "label": "type",
                "description": [],
                "signature": [
                  "\"boolean\""
                ],
                "path": "x-pack/plugins/observability/server/ui_settings.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      }
    ],
    "setup": {
      "parentPluginId": "observability",
      "id": "def-server.ObservabilityPluginSetup",
      "type": "Type",
      "tags": [],
      "label": "ObservabilityPluginSetup",
      "description": [],
      "signature": [
        "{ getAlertDetailsConfig(): Readonly<{} & { metrics: Readonly<{} & { enabled: boolean; }>; apm: Readonly<{} & { enabled: boolean; }>; logs: Readonly<{} & { enabled: boolean; }>; uptime: Readonly<{} & { enabled: boolean; }>; }>; getScopedAnnotationsClient: (requestContext: ",
        {
          "pluginId": "@kbn/core-http-request-handler-context-server",
          "scope": "common",
          "docId": "kibKbnCoreHttpRequestHandlerContextServerPluginApi",
          "section": "def-common.RequestHandlerContext",
          "text": "RequestHandlerContext"
        },
        " & { licensing: Promise<",
        {
          "pluginId": "licensing",
          "scope": "server",
          "docId": "kibLicensingPluginApi",
          "section": "def-server.LicensingApiRequestHandlerContext",
          "text": "LicensingApiRequestHandlerContext"
        },
        ">; }, request: ",
        {
          "pluginId": "@kbn/core-http-server",
          "scope": "common",
          "docId": "kibKbnCoreHttpServerPluginApi",
          "section": "def-common.KibanaRequest",
          "text": "KibanaRequest"
        },
        "<unknown, unknown, unknown, any>) => Promise<{ readonly index: string; create: (createParams: { annotation: { type: string; }; '@timestamp': string; message: string; } & { tags?: string[] | undefined; service?: { name?: string | undefined; environment?: string | undefined; version?: string | undefined; } | undefined; }) => Promise<{ _id: string; _index: string; _source: ",
        "Annotation",
        "; }>; getById: (getByIdParams: { id: string; }) => Promise<",
        "GetResponse",
        "<unknown>>; delete: (deleteParams: { id: string; }) => Promise<",
        "WriteResponseBase",
        ">; } | undefined>; }"
      ],
      "path": "x-pack/plugins/observability/server/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "lifecycle": "setup",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "observability",
        "id": "def-common.formatDurationFromTimeUnitChar",
        "type": "Function",
        "tags": [],
        "label": "formatDurationFromTimeUnitChar",
        "description": [],
        "signature": [
          "(time: number, unit: ",
          {
            "pluginId": "observability",
            "scope": "common",
            "docId": "kibObservabilityPluginApi",
            "section": "def-common.TimeUnitChar",
            "text": "TimeUnitChar"
          },
          ") => string"
        ],
        "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-common.formatDurationFromTimeUnitChar.$1",
            "type": "number",
            "tags": [],
            "label": "time",
            "description": [],
            "signature": [
              "number"
            ],
            "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "observability",
            "id": "def-common.formatDurationFromTimeUnitChar.$2",
            "type": "CompoundType",
            "tags": [],
            "label": "unit",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "common",
                "docId": "kibObservabilityPluginApi",
                "section": "def-common.TimeUnitChar",
                "text": "TimeUnitChar"
              }
            ],
            "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.getInspectResponse",
        "type": "Function",
        "tags": [],
        "label": "getInspectResponse",
        "description": [
          "\nCreate a formatted response to be sent in the _inspect key for use in the\ninspector."
        ],
        "signature": [
          "({\n  esError,\n  esRequestParams,\n  esRequestStatus,\n  esResponse,\n  kibanaRequest,\n  operationName,\n  startTime,\n}: { esError: ",
          "WrappedElasticsearchClientError",
          " | null; esRequestParams: Record<string, any>; esRequestStatus: ",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.RequestStatus",
            "text": "RequestStatus"
          },
          "; esResponse: any; kibanaRequest: ",
          {
            "pluginId": "@kbn/core-http-server",
            "scope": "common",
            "docId": "kibKbnCoreHttpServerPluginApi",
            "section": "def-common.KibanaRequest",
            "text": "KibanaRequest"
          },
          "<unknown, unknown, unknown, any>; operationName: string; startTime: number; }) => ",
          {
            "pluginId": "inspector",
            "scope": "common",
            "docId": "kibInspectorPluginApi",
            "section": "def-common.Request",
            "text": "Request"
          }
        ],
        "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-common.getInspectResponse.$1",
            "type": "Object",
            "tags": [],
            "label": "{\n  esError,\n  esRequestParams,\n  esRequestStatus,\n  esResponse,\n  kibanaRequest,\n  operationName,\n  startTime,\n}",
            "description": [],
            "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "observability",
                "id": "def-common.getInspectResponse.$1.esError",
                "type": "CompoundType",
                "tags": [],
                "label": "esError",
                "description": [],
                "signature": [
                  "WrappedElasticsearchClientError",
                  " | null"
                ],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-common.getInspectResponse.$1.esRequestParams",
                "type": "Object",
                "tags": [],
                "label": "esRequestParams",
                "description": [],
                "signature": [
                  "{ [x: string]: any; }"
                ],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-common.getInspectResponse.$1.esRequestStatus",
                "type": "Enum",
                "tags": [],
                "label": "esRequestStatus",
                "description": [],
                "signature": [
                  {
                    "pluginId": "inspector",
                    "scope": "common",
                    "docId": "kibInspectorPluginApi",
                    "section": "def-common.RequestStatus",
                    "text": "RequestStatus"
                  }
                ],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-common.getInspectResponse.$1.esResponse",
                "type": "Any",
                "tags": [],
                "label": "esResponse",
                "description": [],
                "signature": [
                  "any"
                ],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-common.getInspectResponse.$1.kibanaRequest",
                "type": "Object",
                "tags": [],
                "label": "kibanaRequest",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/core-http-server",
                    "scope": "common",
                    "docId": "kibKbnCoreHttpServerPluginApi",
                    "section": "def-common.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any>"
                ],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-common.getInspectResponse.$1.operationName",
                "type": "string",
                "tags": [],
                "label": "operationName",
                "description": [],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "observability",
                "id": "def-common.getInspectResponse.$1.startTime",
                "type": "number",
                "tags": [],
                "label": "startTime",
                "description": [],
                "path": "x-pack/plugins/observability/common/utils/get_inspect_response.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.getProbabilityFromProgressiveLoadingQuality",
        "type": "Function",
        "tags": [],
        "label": "getProbabilityFromProgressiveLoadingQuality",
        "description": [],
        "signature": [
          "(quality: ",
          {
            "pluginId": "observability",
            "scope": "common",
            "docId": "kibObservabilityPluginApi",
            "section": "def-common.ProgressiveLoadingQuality",
            "text": "ProgressiveLoadingQuality"
          },
          ") => number"
        ],
        "path": "x-pack/plugins/observability/common/progressive_loading.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-common.getProbabilityFromProgressiveLoadingQuality.$1",
            "type": "Enum",
            "tags": [],
            "label": "quality",
            "description": [],
            "signature": [
              {
                "pluginId": "observability",
                "scope": "common",
                "docId": "kibObservabilityPluginApi",
                "section": "def-common.ProgressiveLoadingQuality",
                "text": "ProgressiveLoadingQuality"
              }
            ],
            "path": "x-pack/plugins/observability/common/progressive_loading.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [],
    "enums": [
      {
        "parentPluginId": "observability",
        "id": "def-common.ProcessorEvent",
        "type": "Enum",
        "tags": [],
        "label": "ProcessorEvent",
        "description": [],
        "path": "x-pack/plugins/observability/common/processor_event.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.ProgressiveLoadingQuality",
        "type": "Enum",
        "tags": [],
        "label": "ProgressiveLoadingQuality",
        "description": [],
        "path": "x-pack/plugins/observability/common/progressive_loading.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "observability",
        "id": "def-common.apmAWSLambdaPriceFactor",
        "type": "string",
        "tags": [],
        "label": "apmAWSLambdaPriceFactor",
        "description": [],
        "signature": [
          "\"observability:apmAWSLambdaPriceFactor\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.apmAWSLambdaRequestCostPerMillion",
        "type": "string",
        "tags": [],
        "label": "apmAWSLambdaRequestCostPerMillion",
        "description": [],
        "signature": [
          "\"observability:apmAWSLambdaRequestCostPerMillion\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.apmEnableContinuousRollups",
        "type": "string",
        "tags": [],
        "label": "apmEnableContinuousRollups",
        "description": [],
        "signature": [
          "\"observability:apmEnableContinuousRollups\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.apmEnableServiceMetrics",
        "type": "string",
        "tags": [],
        "label": "apmEnableServiceMetrics",
        "description": [],
        "signature": [
          "\"observability:apmEnableServiceMetrics\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.apmLabsButton",
        "type": "string",
        "tags": [],
        "label": "apmLabsButton",
        "description": [],
        "signature": [
          "\"observability:apmLabsButton\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.apmProgressiveLoading",
        "type": "string",
        "tags": [],
        "label": "apmProgressiveLoading",
        "description": [],
        "signature": [
          "\"observability:apmProgressiveLoading\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.apmServiceGroupMaxNumberOfServices",
        "type": "string",
        "tags": [],
        "label": "apmServiceGroupMaxNumberOfServices",
        "description": [],
        "signature": [
          "\"observability:apmServiceGroupMaxNumberOfServices\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.apmServiceInventoryOptimizedSorting",
        "type": "string",
        "tags": [],
        "label": "apmServiceInventoryOptimizedSorting",
        "description": [],
        "signature": [
          "\"observability:apmServiceInventoryOptimizedSorting\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.apmTraceExplorerTab",
        "type": "string",
        "tags": [],
        "label": "apmTraceExplorerTab",
        "description": [],
        "signature": [
          "\"observability:apmTraceExplorerTab\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.AsDuration",
        "type": "Type",
        "tags": [],
        "label": "AsDuration",
        "description": [],
        "signature": [
          "(value: ",
          "Maybe",
          "<number>, { defaultValue, extended }?: FormatterOptions) => string"
        ],
        "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-common.AsDuration.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "value",
            "description": [],
            "signature": [
              "number | null | undefined"
            ],
            "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-common.AsDuration.$2",
            "type": "Object",
            "tags": [],
            "label": "__1",
            "description": [],
            "signature": [
              "FormatterOptions"
            ],
            "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.AsPercent",
        "type": "Type",
        "tags": [],
        "label": "AsPercent",
        "description": [],
        "signature": [
          "(numerator: ",
          "Maybe",
          "<number>, denominator: number | undefined, fallbackResult?: any) => any"
        ],
        "path": "x-pack/plugins/observability/common/utils/formatters/formatters.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "observability",
            "id": "def-common.AsPercent.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "numerator",
            "description": [],
            "signature": [
              "number | null | undefined"
            ],
            "path": "x-pack/plugins/observability/common/utils/formatters/formatters.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-common.AsPercent.$2",
            "type": "number",
            "tags": [],
            "label": "denominator",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/observability/common/utils/formatters/formatters.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "observability",
            "id": "def-common.AsPercent.$3",
            "type": "Any",
            "tags": [],
            "label": "fallbackResult",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/observability/common/utils/formatters/formatters.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.casesFeatureId",
        "type": "string",
        "tags": [],
        "label": "casesFeatureId",
        "description": [],
        "signature": [
          "\"observabilityCases\""
        ],
        "path": "x-pack/plugins/observability/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.casesPath",
        "type": "string",
        "tags": [],
        "label": "casesPath",
        "description": [],
        "signature": [
          "\"/cases\""
        ],
        "path": "x-pack/plugins/observability/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.defaultApmServiceEnvironment",
        "type": "string",
        "tags": [],
        "label": "defaultApmServiceEnvironment",
        "description": [],
        "signature": [
          "\"observability:apmDefaultServiceEnvironment\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.enableAgentExplorerView",
        "type": "string",
        "tags": [],
        "label": "enableAgentExplorerView",
        "description": [],
        "signature": [
          "\"observability:apmAgentExplorerView\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.enableAwsLambdaMetrics",
        "type": "string",
        "tags": [],
        "label": "enableAwsLambdaMetrics",
        "description": [],
        "signature": [
          "\"observability:enableAwsLambdaMetrics\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.enableComparisonByDefault",
        "type": "string",
        "tags": [],
        "label": "enableComparisonByDefault",
        "description": [],
        "signature": [
          "\"observability:enableComparisonByDefault\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.enableCriticalPath",
        "type": "string",
        "tags": [],
        "label": "enableCriticalPath",
        "description": [],
        "signature": [
          "\"observability:apmEnableCriticalPath\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.enableInfrastructureHostsView",
        "type": "string",
        "tags": [],
        "label": "enableInfrastructureHostsView",
        "description": [],
        "signature": [
          "\"observability:enableInfrastructureHostsView\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.enableInspectEsQueries",
        "type": "string",
        "tags": [],
        "label": "enableInspectEsQueries",
        "description": [],
        "signature": [
          "\"observability:enableInspectEsQueries\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.maxSuggestions",
        "type": "string",
        "tags": [],
        "label": "maxSuggestions",
        "description": [],
        "signature": [
          "\"observability:maxSuggestions\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.NETWORK_TIMINGS_FIELDS",
        "type": "Array",
        "tags": [],
        "label": "NETWORK_TIMINGS_FIELDS",
        "description": [],
        "signature": [
          "string[]"
        ],
        "path": "x-pack/plugins/observability/common/field_names/synthetics.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.observabilityAppId",
        "type": "string",
        "tags": [],
        "label": "observabilityAppId",
        "description": [],
        "signature": [
          "\"observability-overview\""
        ],
        "path": "x-pack/plugins/observability/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.observabilityFeatureId",
        "type": "string",
        "tags": [],
        "label": "observabilityFeatureId",
        "description": [],
        "signature": [
          "\"observability\""
        ],
        "path": "x-pack/plugins/observability/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.profilingElasticsearchPlugin",
        "type": "string",
        "tags": [],
        "label": "profilingElasticsearchPlugin",
        "description": [],
        "signature": [
          "\"observability:profilingElasticsearchPlugin\""
        ],
        "path": "x-pack/plugins/observability/common/ui_settings_keys.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.ruleDetailsLocatorID",
        "type": "string",
        "tags": [],
        "label": "ruleDetailsLocatorID",
        "description": [],
        "signature": [
          "\"RULE_DETAILS_LOCATOR\""
        ],
        "path": "x-pack/plugins/observability/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.SYNTHETICS_BLOCKED_TIMINGS",
        "type": "string",
        "tags": [],
        "label": "SYNTHETICS_BLOCKED_TIMINGS",
        "description": [],
        "signature": [
          "\"synthetics.payload.timings.blocked\""
        ],
        "path": "x-pack/plugins/observability/common/field_names/synthetics.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.SYNTHETICS_CONNECT_TIMINGS",
        "type": "string",
        "tags": [],
        "label": "SYNTHETICS_CONNECT_TIMINGS",
        "description": [],
        "signature": [
          "\"synthetics.payload.timings.connect\""
        ],
        "path": "x-pack/plugins/observability/common/field_names/synthetics.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.SYNTHETICS_DNS_TIMINGS",
        "type": "string",
        "tags": [],
        "label": "SYNTHETICS_DNS_TIMINGS",
        "description": [],
        "signature": [
          "\"synthetics.payload.timings.dns\""
        ],
        "path": "x-pack/plugins/observability/common/field_names/synthetics.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.SYNTHETICS_RECEIVE_TIMINGS",
        "type": "string",
        "tags": [],
        "label": "SYNTHETICS_RECEIVE_TIMINGS",
        "description": [],
        "signature": [
          "\"synthetics.payload.timings.receive\""
        ],
        "path": "x-pack/plugins/observability/common/field_names/synthetics.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.SYNTHETICS_SEND_TIMINGS",
        "type": "string",
        "tags": [],
        "label": "SYNTHETICS_SEND_TIMINGS",
        "description": [],
        "signature": [
          "\"synthetics.payload.timings.send\""
        ],
        "path": "x-pack/plugins/observability/common/field_names/synthetics.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.SYNTHETICS_SSL_TIMINGS",
        "type": "string",
        "tags": [],
        "label": "SYNTHETICS_SSL_TIMINGS",
        "description": [],
        "signature": [
          "\"synthetics.payload.timings.ssl\""
        ],
        "path": "x-pack/plugins/observability/common/field_names/synthetics.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.SYNTHETICS_STEP_DURATION",
        "type": "string",
        "tags": [],
        "label": "SYNTHETICS_STEP_DURATION",
        "description": [],
        "signature": [
          "\"synthetics.step.duration.us\""
        ],
        "path": "x-pack/plugins/observability/common/field_names/synthetics.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.SYNTHETICS_TOTAL_TIMINGS",
        "type": "string",
        "tags": [],
        "label": "SYNTHETICS_TOTAL_TIMINGS",
        "description": [],
        "signature": [
          "\"synthetics.payload.timings.total\""
        ],
        "path": "x-pack/plugins/observability/common/field_names/synthetics.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.SYNTHETICS_WAIT_TIMINGS",
        "type": "string",
        "tags": [],
        "label": "SYNTHETICS_WAIT_TIMINGS",
        "description": [],
        "signature": [
          "\"synthetics.payload.timings.wait\""
        ],
        "path": "x-pack/plugins/observability/common/field_names/synthetics.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.syntheticsEditMonitorLocatorID",
        "type": "string",
        "tags": [],
        "label": "syntheticsEditMonitorLocatorID",
        "description": [],
        "signature": [
          "\"SYNTHETICS_EDIT_MONITOR_LOCATOR\""
        ],
        "path": "x-pack/plugins/observability/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.syntheticsMonitorDetailLocatorID",
        "type": "string",
        "tags": [],
        "label": "syntheticsMonitorDetailLocatorID",
        "description": [],
        "signature": [
          "\"SYNTHETICS_MONITOR_DETAIL_LOCATOR\""
        ],
        "path": "x-pack/plugins/observability/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.TimeUnitChar",
        "type": "Type",
        "tags": [],
        "label": "TimeUnitChar",
        "description": [],
        "signature": [
          "\"d\" | \"h\" | \"m\" | \"s\""
        ],
        "path": "x-pack/plugins/observability/common/utils/formatters/duration.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "observability",
        "id": "def-common.uptimeOverviewLocatorID",
        "type": "string",
        "tags": [],
        "label": "uptimeOverviewLocatorID",
        "description": [],
        "signature": [
          "\"UPTIME_OVERVIEW_LOCATOR\""
        ],
        "path": "x-pack/plugins/observability/common/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  }
}