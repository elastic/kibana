{
  "id": "security",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "security",
        "id": "def-public.AuthenticatedUser",
        "type": "Interface",
        "tags": [],
        "label": "AuthenticatedUser",
        "description": [
          "\nRepresents the currently authenticated user."
        ],
        "signature": [
          {
            "pluginId": "security",
            "scope": "common",
            "docId": "kibSecurityPluginApi",
            "section": "def-common.AuthenticatedUser",
            "text": "AuthenticatedUser"
          },
          " extends ",
          "User"
        ],
        "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-public.AuthenticatedUser.authentication_realm",
            "type": "Object",
            "tags": [],
            "label": "authentication_realm",
            "description": [
              "\nThe name and type of the Realm that has authenticated the user."
            ],
            "signature": [
              "UserRealm"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.AuthenticatedUser.lookup_realm",
            "type": "Object",
            "tags": [],
            "label": "lookup_realm",
            "description": [
              "\nThe name and type of the Realm where the user information were retrieved from."
            ],
            "signature": [
              "UserRealm"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.AuthenticatedUser.authentication_provider",
            "type": "Object",
            "tags": [],
            "label": "authentication_provider",
            "description": [
              "\nThe authentication provider that used to authenticate user."
            ],
            "signature": [
              "AuthenticationProvider"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.AuthenticatedUser.authentication_type",
            "type": "string",
            "tags": [],
            "label": "authentication_type",
            "description": [
              "\nThe AuthenticationType used by ES to authenticate the user.\n"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-public.AuthenticationServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "AuthenticationServiceSetup",
        "description": [],
        "path": "x-pack/plugins/security/public/authentication/authentication_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-public.AuthenticationServiceSetup.getCurrentUser",
            "type": "Function",
            "tags": [],
            "label": "getCurrentUser",
            "description": [
              "\nReturns currently authenticated user and throws if current user isn't authenticated."
            ],
            "signature": [
              "() => Promise<",
              {
                "pluginId": "security",
                "scope": "common",
                "docId": "kibSecurityPluginApi",
                "section": "def-common.AuthenticatedUser",
                "text": "AuthenticatedUser"
              },
              ">"
            ],
            "path": "x-pack/plugins/security/public/authentication/authentication_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "security",
            "id": "def-public.AuthenticationServiceSetup.areAPIKeysEnabled",
            "type": "Function",
            "tags": [],
            "label": "areAPIKeysEnabled",
            "description": [
              "\nDetermines if API Keys are currently enabled."
            ],
            "signature": [
              "() => Promise<boolean>"
            ],
            "path": "x-pack/plugins/security/public/authentication/authentication_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-public.SecurityLicense",
        "type": "Interface",
        "tags": [],
        "label": "SecurityLicense",
        "description": [],
        "path": "x-pack/plugins/security/common/licensing/license_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicense.isLicenseAvailable",
            "type": "Function",
            "tags": [],
            "label": "isLicenseAvailable",
            "description": [],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicense.isEnabled",
            "type": "Function",
            "tags": [],
            "label": "isEnabled",
            "description": [],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicense.getFeatures",
            "type": "Function",
            "tags": [],
            "label": "getFeatures",
            "description": [],
            "signature": [
              "() => ",
              "SecurityLicenseFeatures"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicense.hasAtLeast",
            "type": "Function",
            "tags": [],
            "label": "hasAtLeast",
            "description": [],
            "signature": [
              "(licenseType: \"basic\" | \"standard\" | \"gold\" | \"platinum\" | \"enterprise\" | \"trial\") => boolean | undefined"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "security",
                "id": "def-public.SecurityLicense.hasAtLeast.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "licenseType",
                "description": [],
                "signature": [
                  "\"basic\" | \"standard\" | \"gold\" | \"platinum\" | \"enterprise\" | \"trial\""
                ],
                "path": "x-pack/plugins/security/common/licensing/license_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicense.features$",
            "type": "Object",
            "tags": [],
            "label": "features$",
            "description": [],
            "signature": [
              "Observable",
              "<",
              "SecurityLicenseFeatures",
              ">"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_service.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-public.SecurityLicenseFeatures",
        "type": "Interface",
        "tags": [],
        "label": "SecurityLicenseFeatures",
        "description": [
          "\nDescribes Security plugin features that depend on license."
        ],
        "path": "x-pack/plugins/security/common/licensing/license_features.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.showLogin",
            "type": "boolean",
            "tags": [],
            "label": "showLogin",
            "description": [
              "\nIndicates whether we show login page or skip it."
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.allowLogin",
            "type": "boolean",
            "tags": [],
            "label": "allowLogin",
            "description": [
              "\nIndicates whether we allow login or disable it on the login page."
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.showLinks",
            "type": "boolean",
            "tags": [],
            "label": "showLinks",
            "description": [
              "\nIndicates whether we show security links throughout the kibana app."
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.showRoleMappingsManagement",
            "type": "boolean",
            "tags": [],
            "label": "showRoleMappingsManagement",
            "description": [
              "\nIndicates whether we show the Role Mappings UI."
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.allowAccessAgreement",
            "type": "boolean",
            "tags": [],
            "label": "allowAccessAgreement",
            "description": [
              "\nIndicates whether we allow users to access agreement UI and acknowledge it."
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.allowAuditLogging",
            "type": "boolean",
            "tags": [],
            "label": "allowAuditLogging",
            "description": [
              "\nIndicates whether we allow logging of audit events."
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.allowRoleDocumentLevelSecurity",
            "type": "boolean",
            "tags": [],
            "label": "allowRoleDocumentLevelSecurity",
            "description": [
              "\nIndicates whether we allow users to define document level security in roles."
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.allowRoleFieldLevelSecurity",
            "type": "boolean",
            "tags": [],
            "label": "allowRoleFieldLevelSecurity",
            "description": [
              "\nIndicates whether we allow users to define field level security in roles."
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.allowRbac",
            "type": "boolean",
            "tags": [],
            "label": "allowRbac",
            "description": [
              "\nIndicates whether we allow Role-based access control (RBAC)."
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.allowSubFeaturePrivileges",
            "type": "boolean",
            "tags": [],
            "label": "allowSubFeaturePrivileges",
            "description": [
              "\nIndicates whether we allow sub-feature privileges."
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityLicenseFeatures.layout",
            "type": "CompoundType",
            "tags": [],
            "label": "layout",
            "description": [
              "\nDescribes the layout of the login form if it's displayed."
            ],
            "signature": [
              "\"form\" | \"error-es-unavailable\" | \"error-xpack-unavailable\" | undefined"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_features.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-public.SecurityNavControlServiceStart",
        "type": "Interface",
        "tags": [],
        "label": "SecurityNavControlServiceStart",
        "description": [],
        "path": "x-pack/plugins/security/public/nav_control/nav_control_service.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityNavControlServiceStart.getUserMenuLinks$",
            "type": "Function",
            "tags": [],
            "label": "getUserMenuLinks$",
            "description": [
              "\nReturns an Observable of the array of user menu links (the links that show up under the user's Avatar in the UI) registered by other plugins"
            ],
            "signature": [
              "() => ",
              "Observable",
              "<",
              {
                "pluginId": "security",
                "scope": "public",
                "docId": "kibSecurityPluginApi",
                "section": "def-public.UserMenuLink",
                "text": "UserMenuLink"
              },
              "[]>"
            ],
            "path": "x-pack/plugins/security/public/nav_control/nav_control_service.tsx",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "security",
            "id": "def-public.SecurityNavControlServiceStart.addUserMenuLinks",
            "type": "Function",
            "tags": [],
            "label": "addUserMenuLinks",
            "description": [
              "\nRegisters the provided user menu links to be displayed in the user menu (the links that show up under the user's Avatar in the UI)."
            ],
            "signature": [
              "(newUserMenuLink: ",
              {
                "pluginId": "security",
                "scope": "public",
                "docId": "kibSecurityPluginApi",
                "section": "def-public.UserMenuLink",
                "text": "UserMenuLink"
              },
              "[]) => void"
            ],
            "path": "x-pack/plugins/security/public/nav_control/nav_control_service.tsx",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "security",
                "id": "def-public.SecurityNavControlServiceStart.addUserMenuLinks.$1",
                "type": "Array",
                "tags": [],
                "label": "newUserMenuLink",
                "description": [],
                "signature": [
                  {
                    "pluginId": "security",
                    "scope": "public",
                    "docId": "kibSecurityPluginApi",
                    "section": "def-public.UserMenuLink",
                    "text": "UserMenuLink"
                  },
                  "[]"
                ],
                "path": "x-pack/plugins/security/public/nav_control/nav_control_service.tsx",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-public.UserMenuLink",
        "type": "Interface",
        "tags": [],
        "label": "UserMenuLink",
        "description": [],
        "path": "x-pack/plugins/security/public/nav_control/nav_control_component.tsx",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-public.UserMenuLink.label",
            "type": "string",
            "tags": [],
            "label": "label",
            "description": [],
            "path": "x-pack/plugins/security/public/nav_control/nav_control_component.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.UserMenuLink.iconType",
            "type": "CompoundType",
            "tags": [],
            "label": "iconType",
            "description": [],
            "signature": [
              "string | React.ComponentClass<{}, any> | React.FunctionComponent<{}>"
            ],
            "path": "x-pack/plugins/security/public/nav_control/nav_control_component.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.UserMenuLink.href",
            "type": "string",
            "tags": [],
            "label": "href",
            "description": [],
            "path": "x-pack/plugins/security/public/nav_control/nav_control_component.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.UserMenuLink.order",
            "type": "number",
            "tags": [],
            "label": "order",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/security/public/nav_control/nav_control_component.tsx",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-public.UserMenuLink.setAsProfile",
            "type": "CompoundType",
            "tags": [],
            "label": "setAsProfile",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "x-pack/plugins/security/public/nav_control/nav_control_component.tsx",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "security",
        "id": "def-public.AuthenticationServiceStart",
        "type": "Type",
        "tags": [],
        "label": "AuthenticationServiceStart",
        "description": [
          "\nStart has the same contract as Setup for now."
        ],
        "signature": [
          {
            "pluginId": "security",
            "scope": "public",
            "docId": "kibSecurityPluginApi",
            "section": "def-public.AuthenticationServiceSetup",
            "text": "AuthenticationServiceSetup"
          }
        ],
        "path": "x-pack/plugins/security/public/authentication/authentication_service.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "parentPluginId": "security",
      "id": "def-public.SecurityPluginSetup",
      "type": "Interface",
      "tags": [],
      "label": "SecurityPluginSetup",
      "description": [],
      "path": "x-pack/plugins/security/public/plugin.tsx",
      "deprecated": false,
      "children": [
        {
          "parentPluginId": "security",
          "id": "def-public.SecurityPluginSetup.authc",
          "type": "Object",
          "tags": [],
          "label": "authc",
          "description": [
            "\nExposes authentication information about the currently logged in user."
          ],
          "signature": [
            {
              "pluginId": "security",
              "scope": "public",
              "docId": "kibSecurityPluginApi",
              "section": "def-public.AuthenticationServiceSetup",
              "text": "AuthenticationServiceSetup"
            }
          ],
          "path": "x-pack/plugins/security/public/plugin.tsx",
          "deprecated": false
        },
        {
          "parentPluginId": "security",
          "id": "def-public.SecurityPluginSetup.license",
          "type": "Object",
          "tags": [],
          "label": "license",
          "description": [
            "\nExposes information about the available security features under the current license."
          ],
          "signature": [
            {
              "pluginId": "security",
              "scope": "common",
              "docId": "kibSecurityPluginApi",
              "section": "def-common.SecurityLicense",
              "text": "SecurityLicense"
            }
          ],
          "path": "x-pack/plugins/security/public/plugin.tsx",
          "deprecated": false
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "security",
      "id": "def-public.SecurityPluginStart",
      "type": "Interface",
      "tags": [],
      "label": "SecurityPluginStart",
      "description": [],
      "path": "x-pack/plugins/security/public/plugin.tsx",
      "deprecated": false,
      "children": [
        {
          "parentPluginId": "security",
          "id": "def-public.SecurityPluginStart.navControlService",
          "type": "Object",
          "tags": [],
          "label": "navControlService",
          "description": [
            "\nExposes the ability to add custom links to the dropdown menu in the top right, where the user's Avatar is."
          ],
          "signature": [
            {
              "pluginId": "security",
              "scope": "public",
              "docId": "kibSecurityPluginApi",
              "section": "def-public.SecurityNavControlServiceStart",
              "text": "SecurityNavControlServiceStart"
            }
          ],
          "path": "x-pack/plugins/security/public/plugin.tsx",
          "deprecated": false
        },
        {
          "parentPluginId": "security",
          "id": "def-public.SecurityPluginStart.authc",
          "type": "Object",
          "tags": [],
          "label": "authc",
          "description": [
            "\nExposes authentication information about the currently logged in user."
          ],
          "signature": [
            {
              "pluginId": "security",
              "scope": "public",
              "docId": "kibSecurityPluginApi",
              "section": "def-public.AuthenticationServiceSetup",
              "text": "AuthenticationServiceSetup"
            }
          ],
          "path": "x-pack/plugins/security/public/plugin.tsx",
          "deprecated": false
        },
        {
          "parentPluginId": "security",
          "id": "def-public.SecurityPluginStart.uiApi",
          "type": "Object",
          "tags": [],
          "label": "uiApi",
          "description": [
            "\nExposes UI components that will be loaded asynchronously."
          ],
          "signature": [
            "UiApi"
          ],
          "path": "x-pack/plugins/security/public/plugin.tsx",
          "deprecated": false
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "security",
        "id": "def-server.AuditEvent",
        "type": "Interface",
        "tags": [],
        "label": "AuditEvent",
        "description": [
          "\nAudit event schema using ECS format: https://www.elastic.co/guide/en/ecs/1.12/index.html\n\nIf you add additional fields to the schema ensure you update the Kibana Filebeat module:\nhttps://github.com/elastic/beats/tree/master/filebeat/module/kibana\n"
        ],
        "signature": [
          {
            "pluginId": "security",
            "scope": "server",
            "docId": "kibSecurityPluginApi",
            "section": "def-server.AuditEvent",
            "text": "AuditEvent"
          },
          " extends ",
          {
            "pluginId": "@kbn/logging",
            "scope": "server",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-server.LogMeta",
            "text": "LogMeta"
          }
        ],
        "path": "x-pack/plugins/security/server/audit/audit_events.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-server.AuditEvent.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "x-pack/plugins/security/server/audit/audit_events.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.AuditEvent.kibana",
            "type": "Object",
            "tags": [],
            "label": "kibana",
            "description": [],
            "signature": [
              "{ space_id?: string | undefined; session_id?: string | undefined; saved_object?: { type: string; id: string; } | undefined; authentication_provider?: string | undefined; authentication_type?: string | undefined; authentication_realm?: string | undefined; lookup_realm?: string | undefined; add_to_spaces?: readonly string[] | undefined; delete_from_spaces?: readonly string[] | undefined; } | undefined"
            ],
            "path": "x-pack/plugins/security/server/audit/audit_events.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-server.AuditLogger",
        "type": "Interface",
        "tags": [],
        "label": "AuditLogger",
        "description": [],
        "path": "x-pack/plugins/security/server/audit/audit_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-server.AuditLogger.log",
            "type": "Function",
            "tags": [],
            "label": "log",
            "description": [],
            "signature": [
              "(event: ",
              {
                "pluginId": "security",
                "scope": "server",
                "docId": "kibSecurityPluginApi",
                "section": "def-server.AuditEvent",
                "text": "AuditEvent"
              },
              " | undefined) => void"
            ],
            "path": "x-pack/plugins/security/server/audit/audit_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "security",
                "id": "def-server.AuditLogger.log.$1",
                "type": "Object",
                "tags": [],
                "label": "event",
                "description": [],
                "signature": [
                  {
                    "pluginId": "security",
                    "scope": "server",
                    "docId": "kibSecurityPluginApi",
                    "section": "def-server.AuditEvent",
                    "text": "AuditEvent"
                  },
                  " | undefined"
                ],
                "path": "x-pack/plugins/security/server/audit/audit_service.ts",
                "deprecated": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-server.AuditServiceSetup",
        "type": "Interface",
        "tags": [],
        "label": "AuditServiceSetup",
        "description": [],
        "path": "x-pack/plugins/security/server/audit/audit_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-server.AuditServiceSetup.asScoped",
            "type": "Function",
            "tags": [],
            "label": "asScoped",
            "description": [],
            "signature": [
              "(request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>) => ",
              {
                "pluginId": "security",
                "scope": "server",
                "docId": "kibSecurityPluginApi",
                "section": "def-server.AuditLogger",
                "text": "AuditLogger"
              }
            ],
            "path": "x-pack/plugins/security/server/audit/audit_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "security",
                "id": "def-server.AuditServiceSetup.asScoped.$1",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any>"
                ],
                "path": "x-pack/plugins/security/server/audit/audit_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-server.AuthenticatedUser",
        "type": "Interface",
        "tags": [],
        "label": "AuthenticatedUser",
        "description": [
          "\nRepresents the currently authenticated user."
        ],
        "signature": [
          {
            "pluginId": "security",
            "scope": "common",
            "docId": "kibSecurityPluginApi",
            "section": "def-common.AuthenticatedUser",
            "text": "AuthenticatedUser"
          },
          " extends ",
          "User"
        ],
        "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-server.AuthenticatedUser.authentication_realm",
            "type": "Object",
            "tags": [],
            "label": "authentication_realm",
            "description": [
              "\nThe name and type of the Realm that has authenticated the user."
            ],
            "signature": [
              "UserRealm"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.AuthenticatedUser.lookup_realm",
            "type": "Object",
            "tags": [],
            "label": "lookup_realm",
            "description": [
              "\nThe name and type of the Realm where the user information were retrieved from."
            ],
            "signature": [
              "UserRealm"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.AuthenticatedUser.authentication_provider",
            "type": "Object",
            "tags": [],
            "label": "authentication_provider",
            "description": [
              "\nThe authentication provider that used to authenticate user."
            ],
            "signature": [
              "AuthenticationProvider"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.AuthenticatedUser.authentication_type",
            "type": "string",
            "tags": [],
            "label": "authentication_type",
            "description": [
              "\nThe AuthenticationType used by ES to authenticate the user.\n"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-server.AuthenticationServiceStart",
        "type": "Interface",
        "tags": [],
        "label": "AuthenticationServiceStart",
        "description": [
          "\nAuthentication services available on the security plugin's start contract."
        ],
        "path": "x-pack/plugins/security/server/authentication/authentication_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-server.AuthenticationServiceStart.apiKeys",
            "type": "Object",
            "tags": [],
            "label": "apiKeys",
            "description": [],
            "signature": [
              "{ create: (request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>, params: ",
              "CreateAPIKeyParams",
              ") => Promise<",
              {
                "pluginId": "security",
                "scope": "server",
                "docId": "kibSecurityPluginApi",
                "section": "def-server.CreateAPIKeyResult",
                "text": "CreateAPIKeyResult"
              },
              " | null>; areAPIKeysEnabled: () => Promise<boolean>; invalidate: (request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>, params: ",
              {
                "pluginId": "security",
                "scope": "server",
                "docId": "kibSecurityPluginApi",
                "section": "def-server.InvalidateAPIKeysParams",
                "text": "InvalidateAPIKeysParams"
              },
              ") => Promise<",
              {
                "pluginId": "security",
                "scope": "server",
                "docId": "kibSecurityPluginApi",
                "section": "def-server.InvalidateAPIKeyResult",
                "text": "InvalidateAPIKeyResult"
              },
              " | null>; grantAsInternalUser: (request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>, createParams: ",
              "CreateAPIKeyParams",
              ") => Promise<",
              {
                "pluginId": "security",
                "scope": "server",
                "docId": "kibSecurityPluginApi",
                "section": "def-server.GrantAPIKeyResult",
                "text": "GrantAPIKeyResult"
              },
              " | null>; invalidateAsInternalUser: (params: ",
              {
                "pluginId": "security",
                "scope": "server",
                "docId": "kibSecurityPluginApi",
                "section": "def-server.InvalidateAPIKeysParams",
                "text": "InvalidateAPIKeysParams"
              },
              ") => Promise<",
              {
                "pluginId": "security",
                "scope": "server",
                "docId": "kibSecurityPluginApi",
                "section": "def-server.InvalidateAPIKeyResult",
                "text": "InvalidateAPIKeyResult"
              },
              " | null>; }"
            ],
            "path": "x-pack/plugins/security/server/authentication/authentication_service.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.AuthenticationServiceStart.getCurrentUser",
            "type": "Function",
            "tags": [],
            "label": "getCurrentUser",
            "description": [],
            "signature": [
              "(request: ",
              {
                "pluginId": "core",
                "scope": "server",
                "docId": "kibCoreHttpPluginApi",
                "section": "def-server.KibanaRequest",
                "text": "KibanaRequest"
              },
              "<unknown, unknown, unknown, any>) => ",
              {
                "pluginId": "security",
                "scope": "common",
                "docId": "kibSecurityPluginApi",
                "section": "def-common.AuthenticatedUser",
                "text": "AuthenticatedUser"
              },
              " | null"
            ],
            "path": "x-pack/plugins/security/server/authentication/authentication_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "security",
                "id": "def-server.AuthenticationServiceStart.getCurrentUser.$1",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  {
                    "pluginId": "core",
                    "scope": "server",
                    "docId": "kibCoreHttpPluginApi",
                    "section": "def-server.KibanaRequest",
                    "text": "KibanaRequest"
                  },
                  "<unknown, unknown, unknown, any>"
                ],
                "path": "x-pack/plugins/security/server/authentication/authentication_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-server.CheckPrivilegesPayload",
        "type": "Interface",
        "tags": [],
        "label": "CheckPrivilegesPayload",
        "description": [],
        "path": "x-pack/plugins/security/server/authorization/types.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-server.CheckPrivilegesPayload.kibana",
            "type": "CompoundType",
            "tags": [],
            "label": "kibana",
            "description": [],
            "signature": [
              "string | string[] | undefined"
            ],
            "path": "x-pack/plugins/security/server/authorization/types.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.CheckPrivilegesPayload.elasticsearch",
            "type": "Object",
            "tags": [],
            "label": "elasticsearch",
            "description": [],
            "signature": [
              "{ cluster: string[]; index: Record<string, string[]>; } | undefined"
            ],
            "path": "x-pack/plugins/security/server/authorization/types.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-server.CreateAPIKeyResult",
        "type": "Interface",
        "tags": [],
        "label": "CreateAPIKeyResult",
        "description": [
          "\nThe return value when creating an API key in Elasticsearch. The API key returned by this API\ncan then be used by sending a request with a Authorization header with a value having the\nprefix ApiKey `{token}` where token is id and api_key joined by a colon `{id}:{api_key}` and\nthen encoded to base64."
        ],
        "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-server.CreateAPIKeyResult.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nUnique id for this API key"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.CreateAPIKeyResult.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "\nName for this API key"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.CreateAPIKeyResult.expiration",
            "type": "number",
            "tags": [],
            "label": "expiration",
            "description": [
              "\nOptional expiration in milliseconds for this API key"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.CreateAPIKeyResult.api_key",
            "type": "string",
            "tags": [],
            "label": "api_key",
            "description": [
              "\nGenerated API key"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-server.GrantAPIKeyResult",
        "type": "Interface",
        "tags": [],
        "label": "GrantAPIKeyResult",
        "description": [],
        "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-server.GrantAPIKeyResult.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [
              "\nUnique id for this API key"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.GrantAPIKeyResult.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [
              "\nName for this API key"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.GrantAPIKeyResult.api_key",
            "type": "string",
            "tags": [],
            "label": "api_key",
            "description": [
              "\nGenerated API key"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-server.InvalidateAPIKeyResult",
        "type": "Interface",
        "tags": [],
        "label": "InvalidateAPIKeyResult",
        "description": [
          "\nThe return value when invalidating an API key in Elasticsearch."
        ],
        "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-server.InvalidateAPIKeyResult.invalidated_api_keys",
            "type": "Array",
            "tags": [],
            "label": "invalidated_api_keys",
            "description": [
              "\nThe IDs of the API keys that were invalidated as part of the request."
            ],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.InvalidateAPIKeyResult.previously_invalidated_api_keys",
            "type": "Array",
            "tags": [],
            "label": "previously_invalidated_api_keys",
            "description": [
              "\nThe IDs of the API keys that were already invalidated."
            ],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.InvalidateAPIKeyResult.error_count",
            "type": "number",
            "tags": [],
            "label": "error_count",
            "description": [
              "\nThe number of errors that were encountered when invalidating the API keys."
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-server.InvalidateAPIKeyResult.error_details",
            "type": "Array",
            "tags": [],
            "label": "error_details",
            "description": [
              "\nDetails about these errors. This field is not present in the response when error_count is 0."
            ],
            "signature": [
              "{ type?: string | undefined; reason?: string | undefined; caused_by?: { type?: string | undefined; reason?: string | undefined; } | undefined; }[] | undefined"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-server.InvalidateAPIKeysParams",
        "type": "Interface",
        "tags": [],
        "label": "InvalidateAPIKeysParams",
        "description": [
          "\nRepresents the params for invalidating multiple API keys"
        ],
        "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-server.InvalidateAPIKeysParams.ids",
            "type": "Array",
            "tags": [],
            "label": "ids",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/plugins/security/server/authentication/api_keys/api_keys.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "security",
        "id": "def-server.AuthorizationServiceSetup",
        "type": "Type",
        "tags": [],
        "label": "AuthorizationServiceSetup",
        "description": [],
        "path": "x-pack/plugins/security/server/index.ts",
        "deprecated": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-server.ROUTE_TAG_CAN_REDIRECT",
        "type": "string",
        "tags": [],
        "label": "ROUTE_TAG_CAN_REDIRECT",
        "description": [
          "\nIf the route is marked with this tag Security can safely assume that the calling party that sends\nrequest to this route can handle redirect responses. It's particularly important if we want the\nspecific route to be able to initiate or participate in the authentication handshake that may\ninvolve redirects and will eventually redirect authenticated user to this route."
        ],
        "signature": [
          "\"security:canRedirect\""
        ],
        "path": "x-pack/plugins/security/server/routes/tags.ts",
        "deprecated": false,
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "parentPluginId": "security",
      "id": "def-server.SecurityPluginSetup",
      "type": "Interface",
      "tags": [],
      "label": "SecurityPluginSetup",
      "description": [
        "\nDescribes public Security plugin contract returned at the `setup` stage."
      ],
      "path": "x-pack/plugins/security/server/plugin.ts",
      "deprecated": false,
      "children": [
        {
          "parentPluginId": "security",
          "id": "def-server.SecurityPluginSetup.authc",
          "type": "Object",
          "tags": [
            "deprecated"
          ],
          "label": "authc",
          "description": [],
          "signature": [
            "{ getCurrentUser: (request: ",
            {
              "pluginId": "core",
              "scope": "server",
              "docId": "kibCoreHttpPluginApi",
              "section": "def-server.KibanaRequest",
              "text": "KibanaRequest"
            },
            "<unknown, unknown, unknown, any>) => ",
            {
              "pluginId": "security",
              "scope": "common",
              "docId": "kibSecurityPluginApi",
              "section": "def-common.AuthenticatedUser",
              "text": "AuthenticatedUser"
            },
            " | null; }"
          ],
          "path": "x-pack/plugins/security/server/plugin.ts",
          "deprecated": true,
          "references": [
            {
              "plugin": "reporting",
              "path": "x-pack/plugins/reporting/server/routes/lib/get_user.ts"
            },
            {
              "plugin": "encryptedSavedObjects",
              "path": "x-pack/plugins/encrypted_saved_objects/server/crypto/encryption_key_rotation_service.ts"
            },
            {
              "plugin": "encryptedSavedObjects",
              "path": "x-pack/plugins/encrypted_saved_objects/server/saved_objects/index.ts"
            },
            {
              "plugin": "actions",
              "path": "x-pack/plugins/actions/server/plugin.ts"
            },
            {
              "plugin": "ml",
              "path": "x-pack/plugins/ml/server/routes/annotations.ts"
            },
            {
              "plugin": "dataEnhanced",
              "path": "x-pack/plugins/data_enhanced/server/search/session/session_service.ts"
            },
            {
              "plugin": "logstash",
              "path": "x-pack/plugins/logstash/server/routes/pipeline/save.ts"
            },
            {
              "plugin": "securitySolution",
              "path": "x-pack/plugins/security_solution/server/request_context_factory.ts"
            },
            {
              "plugin": "securitySolution",
              "path": "x-pack/plugins/security_solution/server/lib/detection_engine/routes/signals/create_signals_migration_route.ts"
            },
            {
              "plugin": "securitySolution",
              "path": "x-pack/plugins/security_solution/server/lib/detection_engine/routes/signals/delete_signals_migration_route.ts"
            },
            {
              "plugin": "securitySolution",
              "path": "x-pack/plugins/security_solution/server/lib/detection_engine/routes/signals/finalize_signals_migration_route.ts"
            },
            {
              "plugin": "securitySolution",
              "path": "x-pack/plugins/security_solution/server/lib/detection_engine/routes/signals/open_close_signals_route.ts"
            },
            {
              "plugin": "securitySolution",
              "path": "x-pack/plugins/security_solution/server/lib/detection_engine/routes/rules/preview_rules_route.ts"
            },
            {
              "plugin": "securitySolution",
              "path": "x-pack/plugins/security_solution/server/lib/timeline/utils/common.ts"
            }
          ]
        },
        {
          "parentPluginId": "security",
          "id": "def-server.SecurityPluginSetup.authz",
          "type": "Object",
          "tags": [
            "deprecated"
          ],
          "label": "authz",
          "description": [],
          "signature": [
            {
              "pluginId": "security",
              "scope": "server",
              "docId": "kibSecurityPluginApi",
              "section": "def-server.AuthorizationServiceSetup",
              "text": "AuthorizationServiceSetup"
            }
          ],
          "path": "x-pack/plugins/security/server/plugin.ts",
          "deprecated": true,
          "references": [
            {
              "plugin": "actions",
              "path": "x-pack/plugins/actions/server/plugin.ts"
            },
            {
              "plugin": "ml",
              "path": "x-pack/plugins/ml/server/saved_objects/initialization/initialization.ts"
            },
            {
              "plugin": "ml",
              "path": "x-pack/plugins/ml/server/plugin.ts"
            },
            {
              "plugin": "ml",
              "path": "x-pack/plugins/ml/server/plugin.ts"
            },
            {
              "plugin": "enterpriseSearch",
              "path": "x-pack/plugins/enterprise_search/server/lib/check_access.ts"
            },
            {
              "plugin": "enterpriseSearch",
              "path": "x-pack/plugins/enterprise_search/server/lib/check_access.ts"
            },
            {
              "plugin": "enterpriseSearch",
              "path": "x-pack/plugins/enterprise_search/server/lib/check_access.ts"
            },
            {
              "plugin": "savedObjectsTagging",
              "path": "x-pack/plugins/saved_objects_tagging/server/request_handler_context.ts"
            }
          ]
        },
        {
          "parentPluginId": "security",
          "id": "def-server.SecurityPluginSetup.license",
          "type": "Object",
          "tags": [],
          "label": "license",
          "description": [
            "\nExposes information about the available security features under the current license."
          ],
          "signature": [
            {
              "pluginId": "security",
              "scope": "common",
              "docId": "kibSecurityPluginApi",
              "section": "def-common.SecurityLicense",
              "text": "SecurityLicense"
            }
          ],
          "path": "x-pack/plugins/security/server/plugin.ts",
          "deprecated": false
        },
        {
          "parentPluginId": "security",
          "id": "def-server.SecurityPluginSetup.audit",
          "type": "Object",
          "tags": [],
          "label": "audit",
          "description": [
            "\nExposes services for audit logging."
          ],
          "signature": [
            {
              "pluginId": "security",
              "scope": "server",
              "docId": "kibSecurityPluginApi",
              "section": "def-server.AuditServiceSetup",
              "text": "AuditServiceSetup"
            }
          ],
          "path": "x-pack/plugins/security/server/plugin.ts",
          "deprecated": false
        },
        {
          "parentPluginId": "security",
          "id": "def-server.SecurityPluginSetup.privilegeDeprecationsService",
          "type": "Object",
          "tags": [],
          "label": "privilegeDeprecationsService",
          "description": [
            "\nExposes services to access kibana roles per feature id with the GetDeprecationsContext"
          ],
          "signature": [
            {
              "pluginId": "security",
              "scope": "common",
              "docId": "kibSecurityPluginApi",
              "section": "def-common.PrivilegeDeprecationsService",
              "text": "PrivilegeDeprecationsService"
            }
          ],
          "path": "x-pack/plugins/security/server/plugin.ts",
          "deprecated": false
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "security",
      "id": "def-server.SecurityPluginStart",
      "type": "Interface",
      "tags": [],
      "label": "SecurityPluginStart",
      "description": [
        "\nDescribes public Security plugin contract returned at the `start` stage."
      ],
      "path": "x-pack/plugins/security/server/plugin.ts",
      "deprecated": false,
      "children": [
        {
          "parentPluginId": "security",
          "id": "def-server.SecurityPluginStart.authc",
          "type": "Object",
          "tags": [],
          "label": "authc",
          "description": [
            "\nAuthentication services to confirm the user is who they say they are."
          ],
          "signature": [
            {
              "pluginId": "security",
              "scope": "server",
              "docId": "kibSecurityPluginApi",
              "section": "def-server.AuthenticationServiceStart",
              "text": "AuthenticationServiceStart"
            }
          ],
          "path": "x-pack/plugins/security/server/plugin.ts",
          "deprecated": false
        },
        {
          "parentPluginId": "security",
          "id": "def-server.SecurityPluginStart.authz",
          "type": "Object",
          "tags": [],
          "label": "authz",
          "description": [
            "\nAuthorization services to manage and access the permissions a particular user has."
          ],
          "signature": [
            {
              "pluginId": "security",
              "scope": "server",
              "docId": "kibSecurityPluginApi",
              "section": "def-server.AuthorizationServiceSetup",
              "text": "AuthorizationServiceSetup"
            }
          ],
          "path": "x-pack/plugins/security/server/plugin.ts",
          "deprecated": false
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "security",
        "id": "def-common.AuthenticatedUser",
        "type": "Interface",
        "tags": [],
        "label": "AuthenticatedUser",
        "description": [
          "\nRepresents the currently authenticated user."
        ],
        "signature": [
          {
            "pluginId": "security",
            "scope": "common",
            "docId": "kibSecurityPluginApi",
            "section": "def-common.AuthenticatedUser",
            "text": "AuthenticatedUser"
          },
          " extends ",
          "User"
        ],
        "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-common.AuthenticatedUser.authentication_realm",
            "type": "Object",
            "tags": [],
            "label": "authentication_realm",
            "description": [
              "\nThe name and type of the Realm that has authenticated the user."
            ],
            "signature": [
              "UserRealm"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-common.AuthenticatedUser.lookup_realm",
            "type": "Object",
            "tags": [],
            "label": "lookup_realm",
            "description": [
              "\nThe name and type of the Realm where the user information were retrieved from."
            ],
            "signature": [
              "UserRealm"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-common.AuthenticatedUser.authentication_provider",
            "type": "Object",
            "tags": [],
            "label": "authentication_provider",
            "description": [
              "\nThe authentication provider that used to authenticate user."
            ],
            "signature": [
              "AuthenticationProvider"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          },
          {
            "parentPluginId": "security",
            "id": "def-common.AuthenticatedUser.authentication_type",
            "type": "string",
            "tags": [],
            "label": "authentication_type",
            "description": [
              "\nThe AuthenticationType used by ES to authenticate the user.\n"
            ],
            "path": "x-pack/plugins/security/common/model/authenticated_user.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-common.PrivilegeDeprecationsService",
        "type": "Interface",
        "tags": [],
        "label": "PrivilegeDeprecationsService",
        "description": [],
        "path": "x-pack/plugins/security/common/model/deprecations.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-common.PrivilegeDeprecationsService.getKibanaRolesByFeatureId",
            "type": "Function",
            "tags": [],
            "label": "getKibanaRolesByFeatureId",
            "description": [],
            "signature": [
              "(args: ",
              "PrivilegeDeprecationsRolesByFeatureIdRequest",
              ") => Promise<",
              "PrivilegeDeprecationsRolesByFeatureIdResponse",
              ">"
            ],
            "path": "x-pack/plugins/security/common/model/deprecations.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "security",
                "id": "def-common.PrivilegeDeprecationsService.getKibanaRolesByFeatureId.$1",
                "type": "Object",
                "tags": [],
                "label": "args",
                "description": [],
                "signature": [
                  "PrivilegeDeprecationsRolesByFeatureIdRequest"
                ],
                "path": "x-pack/plugins/security/common/model/deprecations.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "security",
        "id": "def-common.SecurityLicense",
        "type": "Interface",
        "tags": [],
        "label": "SecurityLicense",
        "description": [],
        "path": "x-pack/plugins/security/common/licensing/license_service.ts",
        "deprecated": false,
        "children": [
          {
            "parentPluginId": "security",
            "id": "def-common.SecurityLicense.isLicenseAvailable",
            "type": "Function",
            "tags": [],
            "label": "isLicenseAvailable",
            "description": [],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "security",
            "id": "def-common.SecurityLicense.isEnabled",
            "type": "Function",
            "tags": [],
            "label": "isEnabled",
            "description": [],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "security",
            "id": "def-common.SecurityLicense.getFeatures",
            "type": "Function",
            "tags": [],
            "label": "getFeatures",
            "description": [],
            "signature": [
              "() => ",
              "SecurityLicenseFeatures"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_service.ts",
            "deprecated": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "security",
            "id": "def-common.SecurityLicense.hasAtLeast",
            "type": "Function",
            "tags": [],
            "label": "hasAtLeast",
            "description": [],
            "signature": [
              "(licenseType: \"basic\" | \"standard\" | \"gold\" | \"platinum\" | \"enterprise\" | \"trial\") => boolean | undefined"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_service.ts",
            "deprecated": false,
            "children": [
              {
                "parentPluginId": "security",
                "id": "def-common.SecurityLicense.hasAtLeast.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "licenseType",
                "description": [],
                "signature": [
                  "\"basic\" | \"standard\" | \"gold\" | \"platinum\" | \"enterprise\" | \"trial\""
                ],
                "path": "x-pack/plugins/security/common/licensing/license_service.ts",
                "deprecated": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "security",
            "id": "def-common.SecurityLicense.features$",
            "type": "Object",
            "tags": [],
            "label": "features$",
            "description": [],
            "signature": [
              "Observable",
              "<",
              "SecurityLicenseFeatures",
              ">"
            ],
            "path": "x-pack/plugins/security/common/licensing/license_service.ts",
            "deprecated": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [],
    "objects": []
  }
}