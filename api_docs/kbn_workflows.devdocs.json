{
  "id": "@kbn/workflows",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.generateYamlSchemaFromConnectors",
        "type": "Function",
        "tags": [],
        "label": "generateYamlSchemaFromConnectors",
        "description": [],
        "signature": [
          "(connectors: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ConnectorContract",
            "text": "ConnectorContract"
          },
          "[], loose: boolean) => Zod.ZodObject<{ version: Zod.ZodDefault<Zod.ZodLiteral<\"1\">>; workflow: Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodOptional<Zod.ZodString>; description: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodString>>; settings: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>>; enabled: Zod.ZodOptional<Zod.ZodDefault<Zod.ZodBoolean>>; tags: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>>; triggers: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.detectionRule\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; }, { type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.manual\"; enabled: boolean; }, { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; }>]>, \"many\">>; inputs: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>>; consts: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>>; steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }>]>>, \"many\">>; }, { steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { version: \"1\"; workflow: { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }, { workflow: { name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; version?: \"1\" | undefined; }> | Zod.ZodObject<{ version: Zod.ZodDefault<Zod.ZodLiteral<\"1\">>; workflow: Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; settings: Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>; enabled: Zod.ZodDefault<Zod.ZodBoolean>; tags: Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>; triggers: Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.detectionRule\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; }, { type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.manual\"; enabled: boolean; }, { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; }>]>, \"many\">; inputs: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>; consts: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>; steps: Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }>]>>, \"many\">; }, { steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { name: string; enabled: boolean; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name: string; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[]; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { version: \"1\"; workflow: { name: string; enabled: boolean; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }, { workflow: { name: string; steps: any[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[]; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; version?: \"1\" | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.generateYamlSchemaFromConnectors.$1",
            "type": "Array",
            "tags": [],
            "label": "connectors",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ConnectorContract",
                "text": "ConnectorContract"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.generateYamlSchemaFromConnectors.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getForEachStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getForEachStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>) => Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: any[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: any[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getForEachStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getIfStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getIfStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>) => Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: any[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: any[] | undefined; }, { type: \"if\"; name: string; steps: any[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: any[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getIfStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getJsonSchemaFromYamlSchema",
        "type": "Function",
        "tags": [],
        "label": "getJsonSchemaFromYamlSchema",
        "description": [],
        "signature": [
          "(yamlSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>) => ",
          "JsonSchema7Type",
          " & { $schema?: string | undefined; definitions?: { [key: string]: ",
          "JsonSchema7Type",
          "; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getJsonSchemaFromYamlSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "yamlSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getMergeStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getMergeStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>) => Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: any[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"merge\"; name: string; sources: string[]; steps: any[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getMergeStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getParallelStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getParallelStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>) => Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: any[]; }, { name: string; steps: any[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: any[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"parallel\"; name: string; branches: { name: string; steps: any[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getParallelStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.transformWorkflowYamlJsontoEsWorkflow",
        "type": "Function",
        "tags": [],
        "label": "transformWorkflowYamlJsontoEsWorkflow",
        "description": [],
        "signature": [
          "(workflowDefinition: { version: \"1\"; workflow: { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }) => Omit<{ id: string; name: string; tags: string[]; createdBy: string; createdAt: Date; status: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.WorkflowStatus",
            "text": "WorkflowStatus"
          },
          "; definition: { version: \"1\"; workflow: { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }; yaml: string; lastUpdatedAt: Date; lastUpdatedBy: string; description?: string | undefined; }, \"id\" | \"createdBy\" | \"createdAt\" | \"yaml\" | \"lastUpdatedAt\" | \"lastUpdatedBy\">"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.transformWorkflowYamlJsontoEsWorkflow.$1",
            "type": "Object",
            "tags": [],
            "label": "workflowDefinition",
            "description": [],
            "signature": [
              "{ version: \"1\"; workflow: { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ConnectorContract",
        "type": "Interface",
        "tags": [],
        "label": "ConnectorContract",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorContract.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorContract.params",
            "type": "Array",
            "tags": [],
            "label": "params",
            "description": [],
            "signature": [
              "{ name: string; type: \"string\" | \"number\" | \"boolean\" | \"object\"; }[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorContract.availableConnectorIds",
            "type": "Array",
            "tags": [],
            "label": "availableConnectorIds",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EsWorkflowExecution",
        "type": "Interface",
        "tags": [],
        "label": "EsWorkflowExecution",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.workflowDefinition",
            "type": "Object",
            "tags": [],
            "label": "workflowDefinition",
            "description": [],
            "signature": [
              "{ version: \"1\"; workflow: { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.createdAt",
            "type": "string",
            "tags": [],
            "label": "createdAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.error",
            "type": "CompoundType",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "string | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.createdBy",
            "type": "string",
            "tags": [],
            "label": "createdBy",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.finishedAt",
            "type": "string",
            "tags": [],
            "label": "finishedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.duration",
            "type": "number",
            "tags": [],
            "label": "duration",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.triggeredBy",
            "type": "string",
            "tags": [],
            "label": "triggeredBy",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EsWorkflowStepExecution",
        "type": "Interface",
        "tags": [],
        "label": "EsWorkflowStepExecution",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.stepId",
            "type": "string",
            "tags": [],
            "label": "stepId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.workflowRunId",
            "type": "string",
            "tags": [],
            "label": "workflowRunId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.completedAt",
            "type": "string",
            "tags": [],
            "label": "completedAt",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.executionTimeMs",
            "type": "number",
            "tags": [],
            "label": "executionTimeMs",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.error",
            "type": "string",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.output",
            "type": "Object",
            "tags": [],
            "label": "output",
            "description": [],
            "signature": [
              "Record<string, any> | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.Provider",
        "type": "Interface",
        "tags": [],
        "label": "Provider",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.Provider.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.Provider.action",
            "type": "Function",
            "tags": [],
            "label": "action",
            "description": [],
            "signature": [
              "(stepInputs?: Record<string, any> | undefined) => Promise<void | Record<string, any>>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/workflows",
                "id": "def-common.Provider.action.$1",
                "type": "Object",
                "tags": [],
                "label": "stepInputs",
                "description": [],
                "signature": [
                  "Record<string, any> | undefined"
                ],
                "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.Provider.inputsDefinition",
            "type": "Object",
            "tags": [],
            "label": "inputsDefinition",
            "description": [],
            "signature": [
              "{ [x: string]: ",
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ProviderInput",
                "text": "ProviderInput"
              },
              "; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ProviderInput",
        "type": "Interface",
        "tags": [],
        "label": "ProviderInput",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ProviderInput.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"string\" | \"number\" | \"boolean\""
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ProviderInput.required",
            "type": "boolean",
            "tags": [],
            "label": "required",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ProviderInput.defaultValue",
            "type": "CompoundType",
            "tags": [],
            "label": "defaultValue",
            "description": [],
            "signature": [
              "string | number | boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.UpdatedWorkflowResponseDto",
        "type": "Interface",
        "tags": [],
        "label": "UpdatedWorkflowResponseDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.lastUpdatedAt",
            "type": "Object",
            "tags": [],
            "label": "lastUpdatedAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.lastUpdatedBy",
            "type": "string",
            "tags": [],
            "label": "lastUpdatedBy",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowDetailDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowDetailDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowStatus",
                "text": "WorkflowStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.createdAt",
            "type": "Object",
            "tags": [],
            "label": "createdAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.createdBy",
            "type": "string",
            "tags": [],
            "label": "createdBy",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.lastUpdatedAt",
            "type": "Object",
            "tags": [],
            "label": "lastUpdatedAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.lastUpdatedBy",
            "type": "string",
            "tags": [],
            "label": "lastUpdatedBy",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.definition",
            "type": "Object",
            "tags": [],
            "label": "definition",
            "description": [],
            "signature": [
              "{ version: \"1\"; workflow: { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.yaml",
            "type": "string",
            "tags": [],
            "label": "yaml",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.finishedAt",
            "type": "string",
            "tags": [],
            "label": "finishedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.workflowName",
            "type": "string",
            "tags": [],
            "label": "workflowName",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.stepExecutions",
            "type": "Array",
            "tags": [],
            "label": "stepExecutions",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.EsWorkflowStepExecution",
                "text": "EsWorkflowStepExecution"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.duration",
            "type": "CompoundType",
            "tags": [],
            "label": "duration",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.triggeredBy",
            "type": "string",
            "tags": [],
            "label": "triggeredBy",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionHistoryModel",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionHistoryModel",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.workflowName",
            "type": "string",
            "tags": [],
            "label": "workflowName",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.finishedAt",
            "type": "string",
            "tags": [],
            "label": "finishedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.duration",
            "type": "CompoundType",
            "tags": [],
            "label": "duration",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionListDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionListDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionListDto.results",
            "type": "Array",
            "tags": [],
            "label": "results",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowExecutionListItemDto",
                "text": "WorkflowExecutionListItemDto"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionListDto._pagination",
            "type": "Object",
            "tags": [],
            "label": "_pagination",
            "description": [],
            "signature": [
              "{ offset: number; limit: number; total: number; next?: string | undefined; prev?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionLogModel",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionLogModel",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.timestamp",
            "type": "string",
            "tags": [],
            "label": "timestamp",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.level",
            "type": "string",
            "tags": [],
            "label": "level",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowListDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowListDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListDto._pagination",
            "type": "Object",
            "tags": [],
            "label": "_pagination",
            "description": [],
            "signature": [
              "{ offset: number; limit: number; total: number; next?: string | undefined; prev?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListDto.results",
            "type": "Array",
            "tags": [],
            "label": "results",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowListItemDto",
                "text": "WorkflowListItemDto"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowListItemDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowListItemDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowStatus",
                "text": "WorkflowStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.definition",
            "type": "Object",
            "tags": [],
            "label": "definition",
            "description": [],
            "signature": [
              "{ version: \"1\"; workflow: { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.createdAt",
            "type": "Object",
            "tags": [],
            "label": "createdAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.history",
            "type": "Array",
            "tags": [],
            "label": "history",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowExecutionHistoryModel",
                "text": "WorkflowExecutionHistoryModel"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.tags",
            "type": "Array",
            "tags": [],
            "label": "tags",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExecutionStatus",
        "type": "Enum",
        "tags": [],
        "label": "ExecutionStatus",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowStatus",
        "type": "Enum",
        "tags": [],
        "label": "WorkflowStatus",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BaseStep",
        "type": "Type",
        "tags": [],
        "label": "BaseStep",
        "description": [],
        "signature": [
          "{ name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ConnectorStep",
        "type": "Type",
        "tags": [],
        "label": "ConnectorStep",
        "description": [],
        "signature": [
          "{ type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.CreateWorkflowCommand",
        "type": "Type",
        "tags": [],
        "label": "CreateWorkflowCommand",
        "description": [],
        "signature": [
          "{ yaml: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EsWorkflow",
        "type": "Type",
        "tags": [],
        "label": "EsWorkflow",
        "description": [],
        "signature": [
          "{ id: string; name: string; tags: string[]; createdBy: string; createdAt: Date; status: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.WorkflowStatus",
            "text": "WorkflowStatus"
          },
          "; definition: { version: \"1\"; workflow: { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }; yaml: string; lastUpdatedAt: Date; lastUpdatedBy: string; description?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ForEachStep",
        "type": "Type",
        "tags": [],
        "label": "ForEachStep",
        "description": [],
        "signature": [
          "{ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.IfStep",
        "type": "Type",
        "tags": [],
        "label": "IfStep",
        "description": [],
        "signature": [
          "{ type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.MergeStep",
        "type": "Type",
        "tags": [],
        "label": "MergeStep",
        "description": [],
        "signature": [
          "{ type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ParallelStep",
        "type": "Type",
        "tags": [],
        "label": "ParallelStep",
        "description": [],
        "signature": [
          "{ type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionEngineModel",
        "type": "Type",
        "tags": [],
        "label": "WorkflowExecutionEngineModel",
        "description": [],
        "signature": [
          "{ id: string; name: string; status: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.WorkflowStatus",
            "text": "WorkflowStatus"
          },
          "; definition: { version: \"1\"; workflow: { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionListItemDto",
        "type": "Type",
        "tags": [],
        "label": "WorkflowExecutionListItemDto",
        "description": [],
        "signature": [
          "{ id: string; duration: number | null; status: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ExecutionStatus",
            "text": "ExecutionStatus"
          },
          "; startedAt: string; workflowId?: string | undefined; finishedAt: string; workflowName?: string | undefined; triggeredBy?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowYaml",
        "type": "Type",
        "tags": [],
        "label": "WorkflowYaml",
        "description": [],
        "signature": [
          "{ version: \"1\"; workflow: { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BaseConnectorStepSchema",
        "type": "Object",
        "tags": [],
        "label": "BaseConnectorStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BaseStepSchema",
        "type": "Object",
        "tags": [],
        "label": "BaseStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.CreateWorkflowCommandSchema",
        "type": "Object",
        "tags": [],
        "label": "CreateWorkflowCommandSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ yaml: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { yaml: string; }, { yaml: string; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.DetectionRuleTriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "DetectionRuleTriggerSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.detectionRule\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; }, { type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ForEachStepSchema",
        "type": "Object",
        "tags": [],
        "label": "ForEachStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.IfStepSchema",
        "type": "Object",
        "tags": [],
        "label": "IfStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ManualTriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "ManualTriggerSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.manual\"; enabled: boolean; }, { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.MergeStepSchema",
        "type": "Object",
        "tags": [],
        "label": "MergeStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ParallelStepSchema",
        "type": "Object",
        "tags": [],
        "label": "ParallelStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.RetryPolicySchema",
        "type": "Object",
        "tags": [],
        "label": "RetryPolicySchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ScheduledTriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "ScheduledTriggerSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TemplatingOptionsSchema",
        "type": "Object",
        "tags": [],
        "label": "TemplatingOptionsSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "TriggerSchema",
        "description": [],
        "signature": [
          "Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.detectionRule\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; }, { type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.manual\"; enabled: boolean; }, { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; }>]>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowConstsSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowConstsSchema",
        "description": [],
        "signature": [
          "Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputSchema",
        "description": [],
        "signature": [
          "Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputTypeEnum",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputTypeEnum",
        "description": [],
        "signature": [
          "Zod.ZodEnum<[\"string\", \"number\", \"boolean\", \"choice\"]>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowOnFailureSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowOnFailureSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowRetrySchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowRetrySchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; settings: Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>; enabled: Zod.ZodDefault<Zod.ZodBoolean>; tags: Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>; triggers: Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.detectionRule\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; }, { type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.manual\"; enabled: boolean; }, { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; }>]>, \"many\">; inputs: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>; consts: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>; steps: Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }>]>>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name: string; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[]; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowSettingsSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowSettingsSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowYamlSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowYamlSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ version: Zod.ZodDefault<Zod.ZodLiteral<\"1\">>; workflow: Zod.ZodObject<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; settings: Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>; enabled: Zod.ZodDefault<Zod.ZodBoolean>; tags: Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>; triggers: Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.detectionRule\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; }, { type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"triggers.elastic.manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"triggers.elastic.manual\"; enabled: boolean; }, { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; }>]>, \"many\">; inputs: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>; consts: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>; steps: Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }, { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }, { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }, { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; if: Zod.ZodOptional<Zod.ZodString>; foreach: Zod.ZodOptional<Zod.ZodString>; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { delay: number; 'max-attempts': number; }, { delay: number; 'max-attempts': number; }>; 'fallback-step': Zod.ZodString; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }, { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; }>>; timeout: Zod.ZodOptional<Zod.ZodNumber>; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; }>]>>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name: string; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[]; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { version: \"1\"; workflow: { name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; enabled: boolean; with: { rule_id: string; } | { rule_name: string; }; } | { type: \"triggers.elastic.scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"triggers.elastic.manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; }, { workflow: { name: string; steps: ({ type: \"foreach\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; foreach: string; timeout?: number | undefined; if?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"if\"; name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; condition: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; else?: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[] | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: \"merge\"; name: string; sources: string[]; steps: { name: string; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; 'on-failure'?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; }[]; timeout?: number | undefined; if?: string | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; } | { type: string; name: string; timeout?: number | undefined; if?: string | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; \"on-failure\"?: { retry: { delay: number; 'max-attempts': number; }; 'fallback-step': string; continue?: boolean | undefined; } | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"triggers.elastic.detectionRule\"; with: { rule_id: string; } | { rule_name: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"triggers.elastic.manual\"; enabled?: boolean | undefined; })[]; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; version?: \"1\" | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ]
  }
}