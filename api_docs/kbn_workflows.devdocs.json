{
  "id": "@kbn/workflows",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.generateYamlSchemaFromConnectors",
        "type": "Function",
        "tags": [],
        "label": "generateYamlSchemaFromConnectors",
        "description": [],
        "signature": [
          "(connectors: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ConnectorContract",
            "text": "ConnectorContract"
          },
          "[], loose: boolean) => Zod.ZodObject<Zod.objectUtil.extendShape<{ version: Zod.ZodOptional<Zod.ZodDefault<Zod.ZodLiteral<\"1\">>>; name: Zod.ZodOptional<Zod.ZodString>; description: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodString>>; settings: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>>; enabled: Zod.ZodOptional<Zod.ZodDefault<Zod.ZodBoolean>>; tags: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>>; triggers: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"alert\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodOptional<Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>>; }, \"strip\", Zod.ZodTypeAny, { type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; }, { type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"manual\"; enabled: boolean; }, { type: \"manual\"; enabled?: boolean | undefined; }>]>, \"many\">>; inputs: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>>; consts: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>>; steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }, { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }, { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"wait\">; with: Zod.ZodObject<{ duration: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { duration: string; }, { duration: string; }>; }>, \"strip\", Zod.ZodTypeAny, { type: \"wait\"; name: string; with: { duration: string; }; }, { type: \"wait\"; name: string; with: { duration: string; }; }>, Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"http\">; with: Zod.ZodObject<{ url: Zod.ZodString; method: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodEnum<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean]>>>>; body: Zod.ZodOptional<Zod.ZodAny>; timeout: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { foreach: Zod.ZodOptional<Zod.ZodString>; }>, { timeout: Zod.ZodOptional<Zod.ZodNumber>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }, { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { type: string; name: string; }[]; }, { name: string; steps: { type: string; name: string; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }, { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }>, Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { foreach: Zod.ZodOptional<Zod.ZodString>; }>, { timeout: Zod.ZodOptional<Zod.ZodNumber>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; }>]>>, \"many\">>; }, { steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { version?: \"1\" | undefined; name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { version?: \"1\" | undefined; name?: string | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"manual\"; enabled?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }> | Zod.ZodObject<Zod.objectUtil.extendShape<{ version: Zod.ZodDefault<Zod.ZodLiteral<\"1\">>; name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; settings: Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>; enabled: Zod.ZodDefault<Zod.ZodBoolean>; tags: Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>; triggers: Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"alert\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodOptional<Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>>; }, \"strip\", Zod.ZodTypeAny, { type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; }, { type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"manual\"; enabled: boolean; }, { type: \"manual\"; enabled?: boolean | undefined; }>]>, \"many\">; inputs: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>; consts: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>; steps: Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }, { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }, { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"wait\">; with: Zod.ZodObject<{ duration: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { duration: string; }, { duration: string; }>; }>, \"strip\", Zod.ZodTypeAny, { type: \"wait\"; name: string; with: { duration: string; }; }, { type: \"wait\"; name: string; with: { duration: string; }; }>, Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"http\">; with: Zod.ZodObject<{ url: Zod.ZodString; method: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodEnum<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean]>>>>; body: Zod.ZodOptional<Zod.ZodAny>; timeout: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { foreach: Zod.ZodOptional<Zod.ZodString>; }>, { timeout: Zod.ZodOptional<Zod.ZodNumber>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }, { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { type: string; name: string; }[]; }, { name: string; steps: { type: string; name: string; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }, { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }>, Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { foreach: Zod.ZodOptional<Zod.ZodString>; }>, { timeout: Zod.ZodOptional<Zod.ZodNumber>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; }>]>>, \"many\">; }, { steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { version: \"1\"; name: string; enabled: boolean; steps: any[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name: string; steps: any[]; triggers: ({ type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"manual\"; enabled?: boolean | undefined; })[]; version?: \"1\" | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.generateYamlSchemaFromConnectors.$1",
            "type": "Array",
            "tags": [],
            "label": "connectors",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ConnectorContract",
                "text": "ConnectorContract"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.generateYamlSchemaFromConnectors.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getForEachStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getForEachStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>, loose?: boolean) => Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodBoolean>>; fallback: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | Zod.ZodOptional<Zod.ZodObject<Zod.objectUtil.extendShape<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, { fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: any[]; foreach: string; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }, { type: \"foreach\"; name: string; steps: any[]; foreach: string; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }> | Zod.ZodObject<{ type: Zod.ZodLiteral<\"foreach\">; name: Zod.ZodOptional<Zod.ZodString>; steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; foreach: Zod.ZodOptional<Zod.ZodString>; if: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodString>>; \"on-failure\": Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodBoolean>>; fallback: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | Zod.ZodOptional<Zod.ZodObject<Zod.objectUtil.extendShape<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, { fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>>; }, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name?: string | undefined; steps?: any[] | undefined; foreach?: string | undefined; if?: string | undefined; \"on-failure\"?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }, { type: \"foreach\"; name?: string | undefined; steps?: any[] | undefined; foreach?: string | undefined; if?: string | undefined; \"on-failure\"?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getForEachStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getForEachStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getHttpStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getHttpStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>, loose: boolean) => Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"http\">; with: Zod.ZodObject<{ url: Zod.ZodString; method: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodEnum<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean]>>>>; body: Zod.ZodOptional<Zod.ZodAny>; timeout: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { foreach: Zod.ZodOptional<Zod.ZodString>; }>, { timeout: Zod.ZodOptional<Zod.ZodNumber>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodBoolean>>; fallback: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | Zod.ZodOptional<Zod.ZodObject<Zod.objectUtil.extendShape<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, { fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }, { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }> | Zod.ZodObject<{ type: Zod.ZodLiteral<\"http\">; name: Zod.ZodOptional<Zod.ZodString>; timeout: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodNumber>>; with: Zod.ZodOptional<Zod.ZodObject<{ url: Zod.ZodString; method: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodEnum<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean]>>>>; body: Zod.ZodOptional<Zod.ZodAny>; timeout: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>>; foreach: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodString>>; if: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodString>>; \"on-failure\": Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodBoolean>>; fallback: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | Zod.ZodOptional<Zod.ZodObject<Zod.objectUtil.extendShape<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, { fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>>; }, \"strip\", Zod.ZodTypeAny, { type: \"http\"; name?: string | undefined; timeout?: number | undefined; with?: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; } | undefined; foreach?: string | undefined; if?: string | undefined; \"on-failure\"?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }, { type: \"http\"; name?: string | undefined; timeout?: number | undefined; with?: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; \"on-failure\"?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getHttpStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getHttpStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getIfStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getIfStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>, loose?: boolean) => Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; }>, { steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: any[]; condition: string; else?: any[] | undefined; }, { type: \"if\"; name: string; steps: any[]; condition: string; else?: any[] | undefined; }> | Zod.ZodObject<{ type: Zod.ZodLiteral<\"if\">; name: Zod.ZodOptional<Zod.ZodString>; steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; condition: Zod.ZodOptional<Zod.ZodString>; else: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>>; }, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name?: string | undefined; steps?: any[] | undefined; condition?: string | undefined; else?: any[] | undefined; }, { type: \"if\"; name?: string | undefined; steps?: any[] | undefined; condition?: string | undefined; else?: any[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getIfStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getIfStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getJsonSchemaFromYamlSchema",
        "type": "Function",
        "tags": [],
        "label": "getJsonSchemaFromYamlSchema",
        "description": [],
        "signature": [
          "(yamlSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>) => ",
          "JsonSchema7Type",
          " & { $schema?: string | undefined; definitions?: { [key: string]: ",
          "JsonSchema7Type",
          "; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getJsonSchemaFromYamlSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "yamlSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getMergeStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getMergeStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>, loose?: boolean) => Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }>, { steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: any[]; }, { type: \"merge\"; name: string; sources: string[]; steps: any[]; }> | Zod.ZodObject<{ type: Zod.ZodLiteral<\"merge\">; name: Zod.ZodOptional<Zod.ZodString>; sources: Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>; steps: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name?: string | undefined; sources?: string[] | undefined; steps?: any[] | undefined; }, { type: \"merge\"; name?: string | undefined; sources?: string[] | undefined; steps?: any[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getMergeStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getMergeStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getOnFailureStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getOnFailureStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>, loose: boolean) => Zod.ZodObject<Zod.objectUtil.extendShape<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, { fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }> | Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodBoolean>>; fallback: Zod.ZodOptional<Zod.ZodOptional<Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">>>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getOnFailureStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getOnFailureStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getParallelStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getParallelStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: Zod.ZodType<any, Zod.ZodTypeDef, any>, loose?: boolean) => Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { type: string; name: string; }[]; }, { name: string; steps: { type: string; name: string; }[]; }>, \"many\">; }>, { branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: any[]; }, { name: string; steps: any[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: any[]; }[]; }, { type: \"parallel\"; name: string; branches: { name: string; steps: any[]; }[]; }> | Zod.ZodObject<{ type: Zod.ZodLiteral<\"parallel\">; name: Zod.ZodOptional<Zod.ZodString>; branches: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodType<any, Zod.ZodTypeDef, any>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: any[]; }, { name: string; steps: any[]; }>, \"many\">>; }, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name?: string | undefined; branches?: { name: string; steps: any[]; }[] | undefined; }, { type: \"parallel\"; name?: string | undefined; branches?: { name: string; steps: any[]; }[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getParallelStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getParallelStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getStepId",
        "type": "Function",
        "tags": [],
        "label": "getStepId",
        "description": [],
        "signature": [
          "(stepName: string) => string"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getStepId.$1",
            "type": "string",
            "tags": [],
            "label": "stepName",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.transformWorkflowYamlJsontoEsWorkflow",
        "type": "Function",
        "tags": [],
        "label": "transformWorkflowYamlJsontoEsWorkflow",
        "description": [],
        "signature": [
          "(workflowDefinition: { version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }) => Omit<{ id: string; name: string; tags: string[]; enabled: boolean; createdBy: string; createdAt: Date; valid: boolean; definition: { version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; yaml: string; lastUpdatedAt: Date; lastUpdatedBy: string; deleted_at: Date | null; description?: string | undefined; }, \"id\" | \"spaceId\" | \"createdBy\" | \"createdAt\" | \"yaml\" | \"lastUpdatedAt\" | \"lastUpdatedBy\">"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.transformWorkflowYamlJsontoEsWorkflow.$1",
            "type": "Object",
            "tags": [],
            "label": "workflowDefinition",
            "description": [],
            "signature": [
              "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ConnectorContract",
        "type": "Interface",
        "tags": [],
        "label": "ConnectorContract",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorContract.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorContract.paramsSchema",
            "type": "Object",
            "tags": [],
            "label": "paramsSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorContract.connectorIdRequired",
            "type": "CompoundType",
            "tags": [],
            "label": "connectorIdRequired",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorContract.outputSchema",
            "type": "Object",
            "tags": [],
            "label": "outputSchema",
            "description": [],
            "signature": [
              "Zod.ZodType<any, Zod.ZodTypeDef, any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EsWorkflowExecution",
        "type": "Interface",
        "tags": [],
        "label": "EsWorkflowExecution",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.spaceId",
            "type": "string",
            "tags": [],
            "label": "spaceId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.isTestRun",
            "type": "boolean",
            "tags": [],
            "label": "isTestRun",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.context",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              "{ [x: string]: any; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.workflowDefinition",
            "type": "Object",
            "tags": [],
            "label": "workflowDefinition",
            "description": [],
            "signature": [
              "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.yaml",
            "type": "string",
            "tags": [],
            "label": "yaml",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.currentNodeId",
            "type": "string",
            "tags": [],
            "label": "currentNodeId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.stack",
            "type": "Array",
            "tags": [],
            "label": "stack",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.createdAt",
            "type": "string",
            "tags": [],
            "label": "createdAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.error",
            "type": "CompoundType",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "string | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.createdBy",
            "type": "string",
            "tags": [],
            "label": "createdBy",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.finishedAt",
            "type": "string",
            "tags": [],
            "label": "finishedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.duration",
            "type": "number",
            "tags": [],
            "label": "duration",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.triggeredBy",
            "type": "string",
            "tags": [],
            "label": "triggeredBy",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.traceId",
            "type": "string",
            "tags": [],
            "label": "traceId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.entryTransactionId",
            "type": "string",
            "tags": [],
            "label": "entryTransactionId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EsWorkflowStepExecution",
        "type": "Interface",
        "tags": [],
        "label": "EsWorkflowStepExecution",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.spaceId",
            "type": "string",
            "tags": [],
            "label": "spaceId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.stepId",
            "type": "string",
            "tags": [],
            "label": "stepId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.workflowRunId",
            "type": "string",
            "tags": [],
            "label": "workflowRunId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.completedAt",
            "type": "string",
            "tags": [],
            "label": "completedAt",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.executionTimeMs",
            "type": "number",
            "tags": [],
            "label": "executionTimeMs",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.topologicalIndex",
            "type": "number",
            "tags": [],
            "label": "topologicalIndex",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.executionIndex",
            "type": "number",
            "tags": [],
            "label": "executionIndex",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.error",
            "type": "CompoundType",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.output",
            "type": "CompoundType",
            "tags": [],
            "label": "output",
            "description": [],
            "signature": [
              "Record<string, any> | null | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.input",
            "type": "CompoundType",
            "tags": [],
            "label": "input",
            "description": [],
            "signature": [
              "Record<string, any> | null | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.state",
            "type": "Object",
            "tags": [],
            "label": "state",
            "description": [],
            "signature": [
              "Record<string, any> | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.Provider",
        "type": "Interface",
        "tags": [],
        "label": "Provider",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.Provider.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.Provider.action",
            "type": "Function",
            "tags": [],
            "label": "action",
            "description": [],
            "signature": [
              "(stepInputs?: Record<string, any> | undefined) => Promise<void | Record<string, any>>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/workflows",
                "id": "def-common.Provider.action.$1",
                "type": "Object",
                "tags": [],
                "label": "stepInputs",
                "description": [],
                "signature": [
                  "Record<string, any> | undefined"
                ],
                "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.Provider.inputsDefinition",
            "type": "Object",
            "tags": [],
            "label": "inputsDefinition",
            "description": [],
            "signature": [
              "{ [x: string]: ",
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ProviderInput",
                "text": "ProviderInput"
              },
              "; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ProviderInput",
        "type": "Interface",
        "tags": [],
        "label": "ProviderInput",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ProviderInput.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"string\" | \"number\" | \"boolean\""
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ProviderInput.required",
            "type": "boolean",
            "tags": [],
            "label": "required",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ProviderInput.defaultValue",
            "type": "CompoundType",
            "tags": [],
            "label": "defaultValue",
            "description": [],
            "signature": [
              "string | number | boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.UpdatedWorkflowResponseDto",
        "type": "Interface",
        "tags": [],
        "label": "UpdatedWorkflowResponseDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.lastUpdatedAt",
            "type": "Object",
            "tags": [],
            "label": "lastUpdatedAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.lastUpdatedBy",
            "type": "string",
            "tags": [],
            "label": "lastUpdatedBy",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.valid",
            "type": "boolean",
            "tags": [],
            "label": "valid",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowDetailDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowDetailDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.enabled",
            "type": "boolean",
            "tags": [],
            "label": "enabled",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.createdAt",
            "type": "Object",
            "tags": [],
            "label": "createdAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.createdBy",
            "type": "string",
            "tags": [],
            "label": "createdBy",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.lastUpdatedAt",
            "type": "Object",
            "tags": [],
            "label": "lastUpdatedAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.lastUpdatedBy",
            "type": "string",
            "tags": [],
            "label": "lastUpdatedBy",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.definition",
            "type": "CompoundType",
            "tags": [],
            "label": "definition",
            "description": [],
            "signature": [
              "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; } | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.yaml",
            "type": "string",
            "tags": [],
            "label": "yaml",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.valid",
            "type": "boolean",
            "tags": [],
            "label": "valid",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.spaceId",
            "type": "string",
            "tags": [],
            "label": "spaceId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.finishedAt",
            "type": "string",
            "tags": [],
            "label": "finishedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.workflowName",
            "type": "string",
            "tags": [],
            "label": "workflowName",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.stepExecutions",
            "type": "Array",
            "tags": [],
            "label": "stepExecutions",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.EsWorkflowStepExecution",
                "text": "EsWorkflowStepExecution"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.duration",
            "type": "CompoundType",
            "tags": [],
            "label": "duration",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.triggeredBy",
            "type": "string",
            "tags": [],
            "label": "triggeredBy",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.yaml",
            "type": "string",
            "tags": [],
            "label": "yaml",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionEngineModel",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionEngineModel",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.WorkflowExecutionEngineModel",
            "text": "WorkflowExecutionEngineModel"
          },
          " extends Pick<{ id: string; name: string; tags: string[]; enabled: boolean; createdBy: string; createdAt: Date; valid: boolean; definition: { version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; yaml: string; lastUpdatedAt: Date; lastUpdatedBy: string; deleted_at: Date | null; description?: string | undefined; }, \"id\" | \"name\" | \"enabled\" | \"definition\" | \"yaml\">"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionEngineModel.isTestRun",
            "type": "CompoundType",
            "tags": [],
            "label": "isTestRun",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionHistoryModel",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionHistoryModel",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.workflowName",
            "type": "string",
            "tags": [],
            "label": "workflowName",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.finishedAt",
            "type": "string",
            "tags": [],
            "label": "finishedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.duration",
            "type": "CompoundType",
            "tags": [],
            "label": "duration",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionListDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionListDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionListDto.results",
            "type": "Array",
            "tags": [],
            "label": "results",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowExecutionListItemDto",
                "text": "WorkflowExecutionListItemDto"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionListDto._pagination",
            "type": "Object",
            "tags": [],
            "label": "_pagination",
            "description": [],
            "signature": [
              "{ page: number; limit: number; total: number; next?: string | undefined; prev?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionLogModel",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionLogModel",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.spaceId",
            "type": "string",
            "tags": [],
            "label": "spaceId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.timestamp",
            "type": "string",
            "tags": [],
            "label": "timestamp",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.level",
            "type": "string",
            "tags": [],
            "label": "level",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowListDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowListDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListDto._pagination",
            "type": "Object",
            "tags": [],
            "label": "_pagination",
            "description": [],
            "signature": [
              "{ page: number; limit: number; total: number; next?: string | undefined; prev?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListDto.results",
            "type": "Array",
            "tags": [],
            "label": "results",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowListItemDto",
                "text": "WorkflowListItemDto"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowListItemAction",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowListItemAction",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.isPrimary",
            "type": "CompoundType",
            "tags": [],
            "label": "isPrimary",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.color",
            "type": "string",
            "tags": [],
            "label": "color",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.icon",
            "type": "string",
            "tags": [],
            "label": "icon",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.onClick",
            "type": "Function",
            "tags": [],
            "label": "onClick",
            "description": [],
            "signature": [
              "(item: ",
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowListItemDto",
                "text": "WorkflowListItemDto"
              },
              ") => void"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/workflows",
                "id": "def-common.WorkflowListItemAction.onClick.$1",
                "type": "Object",
                "tags": [],
                "label": "item",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/workflows",
                    "scope": "common",
                    "docId": "kibKbnWorkflowsPluginApi",
                    "section": "def-common.WorkflowListItemDto",
                    "text": "WorkflowListItemDto"
                  }
                ],
                "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowListItemDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowListItemDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.enabled",
            "type": "boolean",
            "tags": [],
            "label": "enabled",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.definition",
            "type": "Object",
            "tags": [],
            "label": "definition",
            "description": [],
            "signature": [
              "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.createdAt",
            "type": "Object",
            "tags": [],
            "label": "createdAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.history",
            "type": "Array",
            "tags": [],
            "label": "history",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowExecutionHistoryModel",
                "text": "WorkflowExecutionHistoryModel"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.tags",
            "type": "Array",
            "tags": [],
            "label": "tags",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.valid",
            "type": "boolean",
            "tags": [],
            "label": "valid",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExecutionStatus",
        "type": "Enum",
        "tags": [],
        "label": "ExecutionStatus",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.AtomicGraphNode",
        "type": "Type",
        "tags": [],
        "label": "AtomicGraphNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"atomic\"; configuration?: any; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/base.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BaseStep",
        "type": "Type",
        "tags": [],
        "label": "BaseStep",
        "description": [],
        "signature": [
          "{ type: string; name: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ConnectorStep",
        "type": "Type",
        "tags": [],
        "label": "ConnectorStep",
        "description": [],
        "signature": [
          "{ type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.CreateWorkflowCommand",
        "type": "Type",
        "tags": [],
        "label": "CreateWorkflowCommand",
        "description": [],
        "signature": [
          "{ yaml: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EnterConditionBranchNode",
        "type": "Type",
        "tags": [],
        "label": "EnterConditionBranchNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"enter-condition-branch\"; condition?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/branching_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EnterContinueNode",
        "type": "Type",
        "tags": [],
        "label": "EnterContinueNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"enter-continue\"; exitNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/on_failure_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EnterFallbackPathNode",
        "type": "Type",
        "tags": [],
        "label": "EnterFallbackPathNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"enter-fallback-path\"; enterZoneNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/on_failure_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EnterForeachNode",
        "type": "Type",
        "tags": [],
        "label": "EnterForeachNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"enter-foreach\"; configuration: { type: \"foreach\"; name: string; foreach: string; if?: string | undefined; }; itemNodeIds: string[]; exitNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/loop_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EnterIfNode",
        "type": "Type",
        "tags": [],
        "label": "EnterIfNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"enter-if\"; configuration: { type: \"if\"; name: string; condition: string; }; exitNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/branching_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EnterNormalPathNode",
        "type": "Type",
        "tags": [],
        "label": "EnterNormalPathNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"enter-normal-path\"; enterZoneNodeId: string; enterFailurePathNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/on_failure_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EnterRetryNode",
        "type": "Type",
        "tags": [],
        "label": "EnterRetryNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"enter-retry\"; configuration: { 'max-attempts': number; delay?: string | undefined; }; exitNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/on_failure_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EnterTryBlockNode",
        "type": "Type",
        "tags": [],
        "label": "EnterTryBlockNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"enter-try-block\"; exitNodeId: string; enterNormalPathNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/on_failure_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EsWorkflow",
        "type": "Type",
        "tags": [],
        "label": "EsWorkflow",
        "description": [],
        "signature": [
          "{ id: string; name: string; tags: string[]; enabled: boolean; createdBy: string; createdAt: Date; valid: boolean; definition: { version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; yaml: string; lastUpdatedAt: Date; lastUpdatedBy: string; deleted_at: Date | null; description?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExitConditionBranchNode",
        "type": "Type",
        "tags": [],
        "label": "ExitConditionBranchNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"exit-condition-branch\"; startNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/branching_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExitContinueNode",
        "type": "Type",
        "tags": [],
        "label": "ExitContinueNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"exit-continue\"; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/on_failure_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExitFallbackPathNode",
        "type": "Type",
        "tags": [],
        "label": "ExitFallbackPathNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"exit-fallback-path\"; enterNodeId: string; exitOnFailureZoneNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/on_failure_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExitForeachNode",
        "type": "Type",
        "tags": [],
        "label": "ExitForeachNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"exit-foreach\"; startNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/loop_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExitIfNode",
        "type": "Type",
        "tags": [],
        "label": "ExitIfNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"exit-if\"; startNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/branching_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExitNormalPathNode",
        "type": "Type",
        "tags": [],
        "label": "ExitNormalPathNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"exit-normal-path\"; enterNodeId: string; exitOnFailureZoneNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/on_failure_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExitRetryNode",
        "type": "Type",
        "tags": [],
        "label": "ExitRetryNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"exit-retry\"; startNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/on_failure_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExitTryBlockNode",
        "type": "Type",
        "tags": [],
        "label": "ExitTryBlockNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"exit-try-block\"; enterNodeId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/on_failure_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ForEachStep",
        "type": "Type",
        "tags": [],
        "label": "ForEachStep",
        "description": [],
        "signature": [
          "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.HttpGraphNode",
        "type": "Type",
        "tags": [],
        "label": "HttpGraphNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"http\"; configuration: { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/base.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.HttpStep",
        "type": "Type",
        "tags": [],
        "label": "HttpStep",
        "description": [],
        "signature": [
          "{ type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.IfStep",
        "type": "Type",
        "tags": [],
        "label": "IfStep",
        "description": [],
        "signature": [
          "{ type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.MergeStep",
        "type": "Type",
        "tags": [],
        "label": "MergeStep",
        "description": [],
        "signature": [
          "{ type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ParallelStep",
        "type": "Type",
        "tags": [],
        "label": "ParallelStep",
        "description": [],
        "signature": [
          "{ type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.RunWorkflowCommand",
        "type": "Type",
        "tags": [],
        "label": "RunWorkflowCommand",
        "description": [],
        "signature": [
          "{ inputs: Record<string, any>; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.RunWorkflowResponseDto",
        "type": "Type",
        "tags": [],
        "label": "RunWorkflowResponseDto",
        "description": [],
        "signature": [
          "{ workflowExecutionId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepContext",
        "type": "Type",
        "tags": [],
        "label": "StepContext",
        "description": [],
        "signature": [
          "{ steps: Record<string, { error?: any; output?: any; }>; execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: any; now?: Date | undefined; inputs?: any; consts?: Record<string, any> | undefined; foreach?: { index: number; total: number; items: any[]; item?: any; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepWithForeach",
        "type": "Type",
        "tags": [],
        "label": "StepWithForeach",
        "description": [],
        "signature": [
          "{ foreach?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepWithIfCondition",
        "type": "Type",
        "tags": [],
        "label": "StepWithIfCondition",
        "description": [],
        "signature": [
          "{ if?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepWithOnFailure",
        "type": "Type",
        "tags": [],
        "label": "StepWithOnFailure",
        "description": [],
        "signature": [
          "{ 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepWithTimeout",
        "type": "Type",
        "tags": [],
        "label": "StepWithTimeout",
        "description": [],
        "signature": [
          "{ timeout?: number | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WaitGraphNode",
        "type": "Type",
        "tags": [],
        "label": "WaitGraphNode",
        "description": [],
        "signature": [
          "{ id: string; type: \"wait\"; configuration: { type: \"wait\"; name: string; with: { duration: string; }; }; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/base.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WaitStep",
        "type": "Type",
        "tags": [],
        "label": "WaitStep",
        "description": [],
        "signature": [
          "{ type: \"wait\"; name: string; with: { duration: string; }; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowContext",
        "type": "Type",
        "tags": [],
        "label": "WorkflowContext",
        "description": [],
        "signature": [
          "{ execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: any; now?: Date | undefined; inputs?: any; consts?: Record<string, any> | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowDataContext",
        "type": "Type",
        "tags": [],
        "label": "WorkflowDataContext",
        "description": [],
        "signature": [
          "{ id: string; spaceId: string; name: string; enabled: boolean; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionContext",
        "type": "Type",
        "tags": [],
        "label": "WorkflowExecutionContext",
        "description": [],
        "signature": [
          "{ id: string; startedAt: Date; isTestRun: boolean; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionListItemDto",
        "type": "Type",
        "tags": [],
        "label": "WorkflowExecutionListItemDto",
        "description": [],
        "signature": [
          "{ id: string; spaceId: string; duration: number | null; status: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ExecutionStatus",
            "text": "ExecutionStatus"
          },
          "; startedAt: string; workflowId?: string | undefined; finishedAt: string; workflowName?: string | undefined; triggeredBy?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowOnFailure",
        "type": "Type",
        "tags": [],
        "label": "WorkflowOnFailure",
        "description": [],
        "signature": [
          "{ retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowRetry",
        "type": "Type",
        "tags": [],
        "label": "WorkflowRetry",
        "description": [],
        "signature": [
          "{ 'max-attempts': number; delay?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WORKFLOWS_UI_SETTING_ID",
        "type": "string",
        "tags": [],
        "label": "WORKFLOWS_UI_SETTING_ID",
        "description": [
          "\nUI Setting ID for enabling / disabling the workflows management UI"
        ],
        "signature": [
          "\"workflows:ui:enabled\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WORKFLOWS_UI_VISUAL_EDITOR_SETTING_ID",
        "type": "string",
        "tags": [],
        "label": "WORKFLOWS_UI_VISUAL_EDITOR_SETTING_ID",
        "description": [],
        "signature": [
          "\"workflows:ui:visualEditor:enabled\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowYaml",
        "type": "Type",
        "tags": [],
        "label": "WorkflowYaml",
        "description": [],
        "signature": [
          "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.AlertRuleTriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "AlertRuleTriggerSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ type: Zod.ZodLiteral<\"alert\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodOptional<Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>>; }, \"strip\", Zod.ZodTypeAny, { type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; }, { type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BaseConnectorStepSchema",
        "type": "Object",
        "tags": [],
        "label": "BaseConnectorStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { foreach: Zod.ZodOptional<Zod.ZodString>; }>, { timeout: Zod.ZodOptional<Zod.ZodNumber>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BaseStepSchema",
        "type": "Object",
        "tags": [],
        "label": "BaseStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.CreateWorkflowCommandSchema",
        "type": "Object",
        "tags": [],
        "label": "CreateWorkflowCommandSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ yaml: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { yaml: string; }, { yaml: string; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EnterConditionBranchNodeSchema",
        "type": "Object",
        "tags": [],
        "label": "EnterConditionBranchNodeSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ id: Zod.ZodString; type: Zod.ZodLiteral<\"enter-condition-branch\">; condition: Zod.ZodUnion<[Zod.ZodString, Zod.ZodUndefined]>; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"enter-condition-branch\"; condition?: string | undefined; }, { id: string; type: \"enter-condition-branch\"; condition?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/branching_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExitConditionBranchNodeSchema",
        "type": "Object",
        "tags": [],
        "label": "ExitConditionBranchNodeSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ id: Zod.ZodString; type: Zod.ZodLiteral<\"exit-condition-branch\">; startNodeId: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"exit-condition-branch\"; startNodeId: string; }, { id: string; type: \"exit-condition-branch\"; startNodeId: string; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/branching_nodes.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ForEachStepSchema",
        "type": "Object",
        "tags": [],
        "label": "ForEachStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }, { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.HttpGraphNodeSchema",
        "type": "Object",
        "tags": [],
        "label": "HttpGraphNodeSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ id: Zod.ZodString; type: Zod.ZodLiteral<\"http\">; configuration: Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"http\">; with: Zod.ZodObject<{ url: Zod.ZodString; method: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodEnum<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean]>>>>; body: Zod.ZodOptional<Zod.ZodAny>; timeout: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { foreach: Zod.ZodOptional<Zod.ZodString>; }>, { timeout: Zod.ZodOptional<Zod.ZodNumber>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }, { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }>; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"http\"; configuration: { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }; }, { id: string; type: \"http\"; configuration: { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/base.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.HttpStepSchema",
        "type": "Object",
        "tags": [],
        "label": "HttpStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"http\">; with: Zod.ZodObject<{ url: Zod.ZodString; method: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodEnum<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean]>>>>; body: Zod.ZodOptional<Zod.ZodAny>; timeout: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { foreach: Zod.ZodOptional<Zod.ZodString>; }>, { timeout: Zod.ZodOptional<Zod.ZodNumber>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }, { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.IfStepSchema",
        "type": "Object",
        "tags": [],
        "label": "IfStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }, { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ManualTriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "ManualTriggerSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ type: Zod.ZodLiteral<\"manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"manual\"; enabled: boolean; }, { type: \"manual\"; enabled?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.MergeStepSchema",
        "type": "Object",
        "tags": [],
        "label": "MergeStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }, { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ParallelStepSchema",
        "type": "Object",
        "tags": [],
        "label": "ParallelStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { type: string; name: string; }[]; }, { name: string; steps: { type: string; name: string; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.RetryPolicySchema",
        "type": "Object",
        "tags": [],
        "label": "RetryPolicySchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ScheduledTriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "ScheduledTriggerSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ type: Zod.ZodLiteral<\"scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.SearchWorkflowCommandSchema",
        "type": "Object",
        "tags": [],
        "label": "SearchWorkflowCommandSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ triggerType: Zod.ZodOptional<Zod.ZodString>; limit: Zod.ZodDefault<Zod.ZodNumber>; page: Zod.ZodDefault<Zod.ZodNumber>; createdBy: Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>; enabled: Zod.ZodOptional<Zod.ZodArray<Zod.ZodBoolean, \"many\">>; query: Zod.ZodOptional<Zod.ZodString>; _full: Zod.ZodDefault<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { page: number; limit: number; _full: boolean; enabled?: boolean[] | undefined; createdBy?: string[] | undefined; query?: string | undefined; triggerType?: string | undefined; }, { page?: number | undefined; enabled?: boolean[] | undefined; createdBy?: string[] | undefined; query?: string | undefined; limit?: number | undefined; triggerType?: string | undefined; _full?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepContextSchema",
        "type": "Object",
        "tags": [],
        "label": "StepContextSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ event: Zod.ZodOptional<Zod.ZodAny>; inputs: Zod.ZodOptional<Zod.ZodAny>; execution: Zod.ZodObject<{ id: Zod.ZodString; isTestRun: Zod.ZodBoolean; startedAt: Zod.ZodDate; }, \"strip\", Zod.ZodTypeAny, { id: string; startedAt: Date; isTestRun: boolean; }, { id: string; startedAt: Date; isTestRun: boolean; }>; workflow: Zod.ZodObject<{ id: Zod.ZodString; name: Zod.ZodString; enabled: Zod.ZodBoolean; spaceId: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; spaceId: string; name: string; enabled: boolean; }, { id: string; spaceId: string; name: string; enabled: boolean; }>; consts: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; now: Zod.ZodOptional<Zod.ZodDate>; }, { steps: Zod.ZodRecord<Zod.ZodString, Zod.ZodObject<{ output: Zod.ZodOptional<Zod.ZodAny>; error: Zod.ZodOptional<Zod.ZodAny>; }, \"strip\", Zod.ZodTypeAny, { error?: any; output?: any; }, { error?: any; output?: any; }>>; foreach: Zod.ZodOptional<Zod.ZodObject<{ items: Zod.ZodArray<Zod.ZodAny, \"many\">; index: Zod.ZodNumber; item: Zod.ZodAny; total: Zod.ZodNumber; }, \"strip\", Zod.ZodTypeAny, { index: number; total: number; items: any[]; item?: any; }, { index: number; total: number; items: any[]; item?: any; }>>; }>, \"strip\", Zod.ZodTypeAny, { steps: Record<string, { error?: any; output?: any; }>; execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: any; now?: Date | undefined; inputs?: any; consts?: Record<string, any> | undefined; foreach?: { index: number; total: number; items: any[]; item?: any; } | undefined; }, { steps: Record<string, { error?: any; output?: any; }>; execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: any; now?: Date | undefined; inputs?: any; consts?: Record<string, any> | undefined; foreach?: { index: number; total: number; items: any[]; item?: any; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepWithOnFailureSchema",
        "type": "Object",
        "tags": [],
        "label": "StepWithOnFailureSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }, \"strip\", Zod.ZodTypeAny, { 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }, { 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TemplatingOptionsSchema",
        "type": "Object",
        "tags": [],
        "label": "TemplatingOptionsSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "TriggerSchema",
        "description": [],
        "signature": [
          "Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"alert\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodOptional<Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>>; }, \"strip\", Zod.ZodTypeAny, { type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; }, { type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"manual\"; enabled: boolean; }, { type: \"manual\"; enabled?: boolean | undefined; }>]>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.UpdateWorkflowCommandSchema",
        "type": "Object",
        "tags": [],
        "label": "UpdateWorkflowCommandSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; enabled: Zod.ZodBoolean; tags: Zod.ZodArray<Zod.ZodString, \"many\">; yaml: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { name: string; tags: string[]; enabled: boolean; yaml: string; description?: string | undefined; }, { name: string; tags: string[]; enabled: boolean; yaml: string; description?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WaitGraphNodeSchema",
        "type": "Object",
        "tags": [],
        "label": "WaitGraphNodeSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ id: Zod.ZodString; type: Zod.ZodLiteral<\"wait\">; configuration: Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"wait\">; with: Zod.ZodObject<{ duration: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { duration: string; }, { duration: string; }>; }>, \"strip\", Zod.ZodTypeAny, { type: \"wait\"; name: string; with: { duration: string; }; }, { type: \"wait\"; name: string; with: { duration: string; }; }>; }, \"strip\", Zod.ZodTypeAny, { id: string; type: \"wait\"; configuration: { type: \"wait\"; name: string; with: { duration: string; }; }; }, { id: string; type: \"wait\"; configuration: { type: \"wait\"; name: string; with: { duration: string; }; }; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/execution/nodes/base.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WaitStepSchema",
        "type": "Object",
        "tags": [],
        "label": "WaitStepSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"wait\">; with: Zod.ZodObject<{ duration: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { duration: string; }, { duration: string; }>; }>, \"strip\", Zod.ZodTypeAny, { type: \"wait\"; name: string; with: { duration: string; }; }, { type: \"wait\"; name: string; with: { duration: string; }; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowConstsSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowConstsSchema",
        "description": [],
        "signature": [
          "Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowContextSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowContextSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ event: Zod.ZodOptional<Zod.ZodAny>; inputs: Zod.ZodOptional<Zod.ZodAny>; execution: Zod.ZodObject<{ id: Zod.ZodString; isTestRun: Zod.ZodBoolean; startedAt: Zod.ZodDate; }, \"strip\", Zod.ZodTypeAny, { id: string; startedAt: Date; isTestRun: boolean; }, { id: string; startedAt: Date; isTestRun: boolean; }>; workflow: Zod.ZodObject<{ id: Zod.ZodString; name: Zod.ZodString; enabled: Zod.ZodBoolean; spaceId: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; spaceId: string; name: string; enabled: boolean; }, { id: string; spaceId: string; name: string; enabled: boolean; }>; consts: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; now: Zod.ZodOptional<Zod.ZodDate>; }, \"strip\", Zod.ZodTypeAny, { execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: any; now?: Date | undefined; inputs?: any; consts?: Record<string, any> | undefined; }, { execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: any; now?: Date | undefined; inputs?: any; consts?: Record<string, any> | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowDataContextSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowDataContextSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ id: Zod.ZodString; name: Zod.ZodString; enabled: Zod.ZodBoolean; spaceId: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { id: string; spaceId: string; name: string; enabled: boolean; }, { id: string; spaceId: string; name: string; enabled: boolean; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionContextSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowExecutionContextSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ id: Zod.ZodString; isTestRun: Zod.ZodBoolean; startedAt: Zod.ZodDate; }, \"strip\", Zod.ZodTypeAny, { id: string; startedAt: Date; isTestRun: boolean; }, { id: string; startedAt: Date; isTestRun: boolean; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputSchema",
        "description": [],
        "signature": [
          "Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputTypeEnum",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputTypeEnum",
        "description": [],
        "signature": [
          "Zod.ZodEnum<[\"string\", \"number\", \"boolean\", \"choice\"]>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowOnFailureSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowOnFailureSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowRetrySchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowRetrySchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ version: Zod.ZodDefault<Zod.ZodLiteral<\"1\">>; name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; settings: Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>>; enabled: Zod.ZodDefault<Zod.ZodBoolean>; tags: Zod.ZodOptional<Zod.ZodArray<Zod.ZodString, \"many\">>; triggers: Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<{ type: Zod.ZodLiteral<\"alert\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodOptional<Zod.ZodUnion<[Zod.ZodObject<{ rule_id: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_id: string; }, { rule_id: string; }>, Zod.ZodObject<{ rule_name: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { rule_name: string; }, { rule_name: string; }>]>>; }, \"strip\", Zod.ZodTypeAny, { type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; }, { type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"scheduled\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; with: Zod.ZodUnion<[Zod.ZodObject<{ every: Zod.ZodString; unit: Zod.ZodEnum<[\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]>; }, \"strip\", Zod.ZodTypeAny, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }, { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; }>, Zod.ZodObject<{ cron: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { cron: string; }, { cron: string; }>]>; }, \"strip\", Zod.ZodTypeAny, { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; }, { type: \"scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; }>, Zod.ZodObject<{ type: Zod.ZodLiteral<\"manual\">; enabled: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodBoolean>>; }, \"strip\", Zod.ZodTypeAny, { type: \"manual\"; enabled: boolean; }, { type: \"manual\"; enabled?: boolean | undefined; }>]>, \"many\">; inputs: Zod.ZodOptional<Zod.ZodArray<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"string\">; default: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"number\">; default: Zod.ZodOptional<Zod.ZodNumber>; }>, \"strip\", Zod.ZodTypeAny, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"boolean\">; default: Zod.ZodOptional<Zod.ZodBoolean>; }>, \"strip\", Zod.ZodTypeAny, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; description: Zod.ZodOptional<Zod.ZodString>; default: Zod.ZodOptional<Zod.ZodAny>; required: Zod.ZodOptional<Zod.ZodBoolean>; }, { type: Zod.ZodLiteral<\"choice\">; default: Zod.ZodOptional<Zod.ZodString>; options: Zod.ZodArray<Zod.ZodString, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>]>, \"many\">>; consts: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean, Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>, Zod.ZodObject<{}, \"strip\", Zod.ZodTypeAny, {}, {}>, Zod.ZodArray<Zod.ZodAny, \"many\">]>>>; steps: Zod.ZodArray<Zod.ZodLazy<Zod.ZodDiscriminatedUnion<\"type\", [Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"foreach\">; foreach: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, \"strip\", Zod.ZodTypeAny, { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }, { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"if\">; condition: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; else: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; }>, \"strip\", Zod.ZodTypeAny, { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }, { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"wait\">; with: Zod.ZodObject<{ duration: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { duration: string; }, { duration: string; }>; }>, \"strip\", Zod.ZodTypeAny, { type: \"wait\"; name: string; with: { duration: string; }; }, { type: \"wait\"; name: string; with: { duration: string; }; }>, Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"http\">; with: Zod.ZodObject<{ url: Zod.ZodString; method: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodEnum<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodUnion<[Zod.ZodString, Zod.ZodNumber, Zod.ZodBoolean]>>>>; body: Zod.ZodOptional<Zod.ZodAny>; timeout: Zod.ZodDefault<Zod.ZodOptional<Zod.ZodString>>; }, \"strip\", Zod.ZodTypeAny, { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { foreach: Zod.ZodOptional<Zod.ZodString>; }>, { timeout: Zod.ZodOptional<Zod.ZodNumber>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }, { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"parallel\">; branches: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { name: string; steps: { type: string; name: string; }[]; }, { name: string; steps: { type: string; name: string; }[]; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }>, Zod.ZodObject<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodLiteral<\"merge\">; sources: Zod.ZodArray<Zod.ZodString, \"many\">; steps: Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }>, \"strip\", Zod.ZodTypeAny, { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }, { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }>, Zod.ZodObject<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<Zod.objectUtil.extendShape<{ name: Zod.ZodString; type: Zod.ZodString; }, { type: Zod.ZodString; 'connector-id': Zod.ZodOptional<Zod.ZodString>; with: Zod.ZodOptional<Zod.ZodRecord<Zod.ZodString, Zod.ZodAny>>; }>, { if: Zod.ZodOptional<Zod.ZodString>; }>, { foreach: Zod.ZodOptional<Zod.ZodString>; }>, { timeout: Zod.ZodOptional<Zod.ZodNumber>; }>, { 'on-failure': Zod.ZodOptional<Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodNumber; delay: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: Zod.ZodOptional<Zod.ZodArray<Zod.ZodObject<{ name: Zod.ZodString; type: Zod.ZodString; }, \"strip\", Zod.ZodTypeAny, { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: Zod.ZodOptional<Zod.ZodBoolean>; }, \"strip\", Zod.ZodTypeAny, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }>, \"strip\", Zod.ZodTypeAny, { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; }, { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; }>]>>, \"many\">; }, \"strip\", Zod.ZodTypeAny, { version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name: string; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: number | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: number | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; \"connector-id\"?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; with: { every: string; unit: \"year\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\"; } | { cron: string; }; enabled?: boolean | undefined; } | { type: \"manual\"; enabled?: boolean | undefined; })[]; version?: \"1\" | undefined; tags?: string[] | undefined; description?: string | undefined; enabled?: boolean | undefined; settings?: { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowSettingsSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowSettingsSchema",
        "description": [],
        "signature": [
          "Zod.ZodObject<{ retry: Zod.ZodOptional<Zod.ZodObject<{ 'max-attempts': Zod.ZodOptional<Zod.ZodNumber>; 'timeout-seconds': Zod.ZodOptional<Zod.ZodNumber>; }, \"strip\", Zod.ZodTypeAny, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>>; templating: Zod.ZodOptional<Zod.ZodObject<{ engine: Zod.ZodEnum<[\"mustache\", \"nunjucks\"]>; }, \"strip\", Zod.ZodTypeAny, { engine: \"mustache\" | \"nunjucks\"; }, { engine: \"mustache\" | \"nunjucks\"; }>>; timezone: Zod.ZodOptional<Zod.ZodString>; }, \"strip\", Zod.ZodTypeAny, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }, { timezone?: string | undefined; retry?: { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; } | undefined; templating?: { engine: \"mustache\" | \"nunjucks\"; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ]
  }
}