{
  "id": "@kbn/workflows",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.buildKibanaRequestFromAction",
        "type": "Function",
        "tags": [],
        "label": "buildKibanaRequestFromAction",
        "description": [
          "\nBuilds a Kibana HTTP request from connector definitions\nThis is shared between the execution engine and the YAML editor copy functionality"
        ],
        "signature": [
          "(actionType: string, params: Record<string, unknown>) => { method: string; path: string; body?: Record<string, unknown> | undefined; query?: Record<string, unknown> | undefined; headers?: Record<string, string> | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/common/kibana_request_builder.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.buildKibanaRequestFromAction.$1",
            "type": "string",
            "tags": [],
            "label": "actionType",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/common/kibana_request_builder.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.buildKibanaRequestFromAction.$2",
            "type": "Object",
            "tags": [],
            "label": "params",
            "description": [],
            "signature": [
              "Record<string, unknown>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/common/kibana_request_builder.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.buildRequestFromConnector",
        "type": "Function",
        "tags": [],
        "label": "buildRequestFromConnector",
        "description": [
          "\nBuilds an Elasticsearch request from connector definitions\nThis is shared between the execution engine and the YAML editor copy functionality"
        ],
        "signature": [
          "(stepType: string, params: Record<string, unknown>) => { method: string; path: string; body?: Record<string, unknown> | undefined; params?: Record<string, string> | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/common/elasticsearch_request_builder.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.buildRequestFromConnector.$1",
            "type": "string",
            "tags": [],
            "label": "stepType",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/common/elasticsearch_request_builder.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.buildRequestFromConnector.$2",
            "type": "Object",
            "tags": [],
            "label": "params",
            "description": [],
            "signature": [
              "Record<string, unknown>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/common/elasticsearch_request_builder.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.generateYamlSchemaFromConnectors",
        "type": "Function",
        "tags": [],
        "label": "generateYamlSchemaFromConnectors",
        "description": [],
        "signature": [
          "(connectors: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ConnectorContractUnion",
            "text": "ConnectorContractUnion"
          },
          "[], loose: boolean) => ",
          "ZodObject",
          "<{ version: ",
          "ZodOptional",
          "<",
          "ZodDefault",
          "<",
          "ZodLiteral",
          "<\"1\">>>; name: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; description: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; settings: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; timezone: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }, { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }>>>; enabled: ",
          "ZodOptional",
          "<",
          "ZodDefault",
          "<",
          "ZodBoolean",
          ">>; tags: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">>>; triggers: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodDiscriminatedUnion",
          "<\"type\", [",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"alert\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; with: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ rule_id: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { rule_id: string; }, { rule_id: string; }>, ",
          "ZodObject",
          "<{ rule_name: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { rule_name: string; }, { rule_name: string; }>]>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; }, { type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; }>, ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"scheduled\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; with: ",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ every: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { every: string; }, { every: string; }>, ",
          "ZodObject",
          "<{ rrule: ",
          "ZodObject",
          "<{ freq: ",
          "ZodEnum",
          "<[\"DAILY\", \"WEEKLY\", \"MONTHLY\"]>; interval: ",
          "ZodNumber",
          "; tzid: ",
          "ZodDefault",
          "<",
          "ZodEnum",
          "<[string, ...string[]]>>; dtstart: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; byhour: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; byminute: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; byweekday: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodEnum",
          "<[\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"]>, \"many\">>; bymonthday: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }, { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }, { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }>]>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; }, { type: \"scheduled\"; with: { every: string; } | { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; enabled?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"manual\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"manual\"; enabled: boolean; }, { type: \"manual\"; enabled?: boolean | undefined; }>]>, \"many\">>; inputs: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"string\">; default: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"number\">; default: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"boolean\">; default: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"choice\">; default: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; options: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"array\">; minItems: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; maxItems: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; default: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodBoolean",
          ", \"many\">]>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; }, { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; }>]>, \"many\">>>; consts: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodUnion",
          "<[",
          "ZodString",
          ", ",
          "ZodNumber",
          ", ",
          "ZodBoolean",
          ", ",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">, ",
          "ZodObject",
          "<{}, \"strip\", ",
          "ZodTypeAny",
          ", {}, {}>, ",
          "ZodArray",
          "<",
          "ZodAny",
          ", \"many\">]>>>>; } & { steps: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { version?: \"1\" | undefined; name?: string | undefined; enabled?: boolean | undefined; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { version?: \"1\" | undefined; name?: string | undefined; enabled?: boolean | undefined; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; steps?: any[] | undefined; triggers?: ({ type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; with: { every: string; } | { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; enabled?: boolean | undefined; } | { type: \"manual\"; enabled?: boolean | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }> | ",
          "ZodObject",
          "<{ version: ",
          "ZodDefault",
          "<",
          "ZodLiteral",
          "<\"1\">>; name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; enabled: ",
          "ZodDefault",
          "<",
          "ZodBoolean",
          ">; tags: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">>; triggers: ",
          "ZodArray",
          "<",
          "ZodDiscriminatedUnion",
          "<\"type\", [",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"alert\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; with: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ rule_id: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { rule_id: string; }, { rule_id: string; }>, ",
          "ZodObject",
          "<{ rule_name: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { rule_name: string; }, { rule_name: string; }>]>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; }, { type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; }>, ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"scheduled\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; with: ",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ every: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { every: string; }, { every: string; }>, ",
          "ZodObject",
          "<{ rrule: ",
          "ZodObject",
          "<{ freq: ",
          "ZodEnum",
          "<[\"DAILY\", \"WEEKLY\", \"MONTHLY\"]>; interval: ",
          "ZodNumber",
          "; tzid: ",
          "ZodDefault",
          "<",
          "ZodEnum",
          "<[string, ...string[]]>>; dtstart: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; byhour: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; byminute: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; byweekday: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodEnum",
          "<[\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"]>, \"many\">>; bymonthday: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }, { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }, { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }>]>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; }, { type: \"scheduled\"; with: { every: string; } | { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; enabled?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"manual\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"manual\"; enabled: boolean; }, { type: \"manual\"; enabled?: boolean | undefined; }>]>, \"many\">; inputs: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"string\">; default: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"number\">; default: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"boolean\">; default: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"choice\">; default: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; options: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"array\">; minItems: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; maxItems: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; default: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodBoolean",
          ", \"many\">]>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; }, { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; }>]>, \"many\">>; consts: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodUnion",
          "<[",
          "ZodString",
          ", ",
          "ZodNumber",
          ", ",
          "ZodBoolean",
          ", ",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">, ",
          "ZodObject",
          "<{}, \"strip\", ",
          "ZodTypeAny",
          ", {}, {}>, ",
          "ZodArray",
          "<",
          "ZodAny",
          ", \"many\">]>>>; } & { settings: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ timezone: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; timeout: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; fallback: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }, { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }>> | ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ timezone: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; fallback: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }, { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }>>; steps: ",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { version: \"1\"; name: string; enabled: boolean; steps: any[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; } | { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name: string; steps: any[]; triggers: ({ type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; with: { every: string; } | { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; enabled?: boolean | undefined; } | { type: \"manual\"; enabled?: boolean | undefined; })[]; version?: \"1\" | undefined; enabled?: boolean | undefined; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; } | { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.generateYamlSchemaFromConnectors.$1",
            "type": "Array",
            "tags": [],
            "label": "connectors",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ConnectorContractUnion",
                "text": "ConnectorContractUnion"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.generateYamlSchemaFromConnectors.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getForEachStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getForEachStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: ",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, loose?: boolean) => ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodLiteral",
          "<\"foreach\">; foreach: ",
          "ZodString",
          "; if: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { steps: ",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">; 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; fallback: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"foreach\"; name: string; steps: any[]; foreach: string; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; if?: string | undefined; }, { type: \"foreach\"; name: string; steps: any[]; foreach: string; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; if?: string | undefined; }> | ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"foreach\">; name: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; steps: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; \"on-failure\": ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; fallback: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>>; foreach: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; if: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"foreach\"; name?: string | undefined; steps?: any[] | undefined; \"on-failure\"?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }, { type: \"foreach\"; name?: string | undefined; steps?: any[] | undefined; \"on-failure\"?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getForEachStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "ZodType",
              "<any, ",
              "ZodTypeDef",
              ", any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getForEachStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getHttpStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getHttpStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: ",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, loose: boolean) => ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodLiteral",
          "<\"http\">; with: ",
          "ZodObject",
          "<{ url: ",
          "ZodString",
          "; method: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodEnum",
          "<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodUnion",
          "<[",
          "ZodString",
          ", ",
          "ZodNumber",
          ", ",
          "ZodBoolean",
          "]>>>>; body: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; timeout: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>; if: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; foreach: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; fallback: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }, { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }> | ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"http\">; name: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; timeout: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; \"on-failure\": ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; fallback: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>>; with: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ url: ",
          "ZodString",
          "; method: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodEnum",
          "<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodUnion",
          "<[",
          "ZodString",
          ", ",
          "ZodNumber",
          ", ",
          "ZodBoolean",
          "]>>>>; body: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; timeout: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>>; foreach: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; if: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"http\"; name?: string | undefined; timeout?: string | undefined; \"on-failure\"?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; with?: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; } | undefined; foreach?: string | undefined; if?: string | undefined; }, { type: \"http\"; name?: string | undefined; timeout?: string | undefined; \"on-failure\"?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; with?: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getHttpStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "ZodType",
              "<any, ",
              "ZodTypeDef",
              ", any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getHttpStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getIfStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getIfStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: ",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, loose?: boolean) => ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodLiteral",
          "<\"if\">; condition: ",
          "ZodString",
          "; } & { steps: ",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">; else: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"if\"; name: string; steps: any[]; condition: string; else?: any[] | undefined; }, { type: \"if\"; name: string; steps: any[]; condition: string; else?: any[] | undefined; }> | ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"if\">; name: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; steps: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; condition: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; else: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"if\"; name?: string | undefined; steps?: any[] | undefined; condition?: string | undefined; else?: any[] | undefined; }, { type: \"if\"; name?: string | undefined; steps?: any[] | undefined; condition?: string | undefined; else?: any[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getIfStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "ZodType",
              "<any, ",
              "ZodTypeDef",
              ", any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getIfStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getJsonSchemaFromYamlSchema",
        "type": "Function",
        "tags": [],
        "label": "getJsonSchemaFromYamlSchema",
        "description": [],
        "signature": [
          "(yamlSchema: ",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>) => WorkflowJsonSchema"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/lib/get_json_schema_from_yaml_schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getJsonSchemaFromYamlSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "yamlSchema",
            "description": [],
            "signature": [
              "ZodType",
              "<any, ",
              "ZodTypeDef",
              ", any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/get_json_schema_from_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getMergeStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getMergeStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: ",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, loose?: boolean) => ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodLiteral",
          "<\"merge\">; sources: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; } & { steps: ",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"merge\"; name: string; sources: string[]; steps: any[]; }, { type: \"merge\"; name: string; sources: string[]; steps: any[]; }> | ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"merge\">; name: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; sources: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">>; steps: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"merge\"; name?: string | undefined; sources?: string[] | undefined; steps?: any[] | undefined; }, { type: \"merge\"; name?: string | undefined; sources?: string[] | undefined; steps?: any[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getMergeStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "ZodType",
              "<any, ",
              "ZodTypeDef",
              ", any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getMergeStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getOnFailureStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getOnFailureStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: ",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, loose: boolean) => ",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }> | ",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; fallback: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getOnFailureStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "ZodType",
              "<any, ",
              "ZodTypeDef",
              ", any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getOnFailureStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getParallelStepSchema",
        "type": "Function",
        "tags": [],
        "label": "getParallelStepSchema",
        "description": [],
        "signature": [
          "(stepSchema: ",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, loose?: boolean) => ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodLiteral",
          "<\"parallel\">; } & { branches: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; steps: ",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { name: string; steps: any[]; }, { name: string; steps: any[]; }>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"parallel\"; name: string; branches: { name: string; steps: any[]; }[]; }, { type: \"parallel\"; name: string; branches: { name: string; steps: any[]; }[]; }> | ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"parallel\">; name: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; branches: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; steps: ",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { name: string; steps: any[]; }, { name: string; steps: any[]; }>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"parallel\"; name?: string | undefined; branches?: { name: string; steps: any[]; }[] | undefined; }, { type: \"parallel\"; name?: string | undefined; branches?: { name: string; steps: any[]; }[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getParallelStepSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "ZodType",
              "<any, ",
              "ZodTypeDef",
              ", any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getParallelStepSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getStepId",
        "type": "Function",
        "tags": [],
        "label": "getStepId",
        "description": [],
        "signature": [
          "(stepName: string) => string"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getStepId.$1",
            "type": "string",
            "tags": [],
            "label": "stepName",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/lib/generate_yaml_schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.getWorkflowSettingsSchema",
        "type": "Function",
        "tags": [],
        "label": "getWorkflowSettingsSchema",
        "description": [],
        "signature": [
          "(stepSchema: ",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, loose: boolean) => ",
          "ZodObject",
          "<{ timezone: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; fallback: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }, { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }> | ",
          "ZodObject",
          "<{ timezone: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; timeout: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>>; continue: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; fallback: ",
          "ZodOptional",
          "<",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>> | ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodType",
          "<any, ",
          "ZodTypeDef",
          ", any>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; }>>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }, { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: any[] | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getWorkflowSettingsSchema.$1",
            "type": "Object",
            "tags": [],
            "label": "stepSchema",
            "description": [],
            "signature": [
              "ZodType",
              "<any, ",
              "ZodTypeDef",
              ", any>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.getWorkflowSettingsSchema.$2",
            "type": "boolean",
            "tags": [],
            "label": "loose",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isBuiltInStepType",
        "type": "Function",
        "tags": [],
        "label": "isBuiltInStepType",
        "description": [],
        "signature": [
          "(type: string) => type is \"merge\" | \"http\" | \"parallel\" | \"foreach\" | \"if\" | \"wait\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isBuiltInStepType.$1",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isDangerousStatus",
        "type": "Function",
        "tags": [],
        "label": "isDangerousStatus",
        "description": [],
        "signature": [
          "(status: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ExecutionStatus",
            "text": "ExecutionStatus"
          },
          ") => boolean"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isDangerousStatus.$1",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isDynamicConnector",
        "type": "Function",
        "tags": [],
        "label": "isDynamicConnector",
        "description": [],
        "signature": [
          "(connector: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ConnectorContractUnion",
            "text": "ConnectorContractUnion"
          },
          ") => connector is ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.DynamicConnectorContract",
            "text": "DynamicConnectorContract"
          }
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isDynamicConnector.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "connector",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ConnectorContractUnion",
                "text": "ConnectorContractUnion"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isElasticsearchStep",
        "type": "Function",
        "tags": [],
        "label": "isElasticsearchStep",
        "description": [],
        "signature": [
          "(step: { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }) => step is { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isElasticsearchStep.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "step",
            "description": [],
            "signature": [
              "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isEnhancedInternalConnector",
        "type": "Function",
        "tags": [],
        "label": "isEnhancedInternalConnector",
        "description": [],
        "signature": [
          "(connector: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ConnectorContractUnion",
            "text": "ConnectorContractUnion"
          },
          ") => connector is ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.EnhancedInternalConnectorContract",
            "text": "EnhancedInternalConnectorContract"
          }
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isEnhancedInternalConnector.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "connector",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ConnectorContractUnion",
                "text": "ConnectorContractUnion"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isForeachStep",
        "type": "Function",
        "tags": [],
        "label": "isForeachStep",
        "description": [],
        "signature": [
          "(step: { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }) => step is { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isForeachStep.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "step",
            "description": [],
            "signature": [
              "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isHttpStep",
        "type": "Function",
        "tags": [],
        "label": "isHttpStep",
        "description": [],
        "signature": [
          "(step: { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }) => step is { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isHttpStep.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "step",
            "description": [],
            "signature": [
              "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isIfStep",
        "type": "Function",
        "tags": [],
        "label": "isIfStep",
        "description": [],
        "signature": [
          "(step: { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }) => step is { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isIfStep.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "step",
            "description": [],
            "signature": [
              "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isInProgressStatus",
        "type": "Function",
        "tags": [],
        "label": "isInProgressStatus",
        "description": [],
        "signature": [
          "(status: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ExecutionStatus",
            "text": "ExecutionStatus"
          },
          ") => boolean"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isInProgressStatus.$1",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isKibanaStep",
        "type": "Function",
        "tags": [],
        "label": "isKibanaStep",
        "description": [],
        "signature": [
          "(step: { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }) => step is { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isKibanaStep.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "step",
            "description": [],
            "signature": [
              "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isMergeStep",
        "type": "Function",
        "tags": [],
        "label": "isMergeStep",
        "description": [],
        "signature": [
          "(step: { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }) => step is { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isMergeStep.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "step",
            "description": [],
            "signature": [
              "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isParallelStep",
        "type": "Function",
        "tags": [],
        "label": "isParallelStep",
        "description": [],
        "signature": [
          "(step: { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }) => step is { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isParallelStep.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "step",
            "description": [],
            "signature": [
              "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isTriggerType",
        "type": "Function",
        "tags": [],
        "label": "isTriggerType",
        "description": [],
        "signature": [
          "(type: string) => type is \"alert\" | \"manual\" | \"scheduled\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isTriggerType.$1",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "string"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.isWaitStep",
        "type": "Function",
        "tags": [],
        "label": "isWaitStep",
        "description": [],
        "signature": [
          "(step: { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }) => step is { type: \"wait\"; name: string; with: { duration: string; }; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.isWaitStep.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "step",
            "description": [],
            "signature": [
              "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.transformWorkflowYamlJsontoEsWorkflow",
        "type": "Function",
        "tags": [],
        "label": "transformWorkflowYamlJsontoEsWorkflow",
        "description": [],
        "signature": [
          "(workflowDefinition: { version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }) => Omit<{ id: string; name: string; enabled: boolean; tags: string[]; createdBy: string; createdAt: Date; valid: boolean; definition: { version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; yaml: string; lastUpdatedAt: Date; lastUpdatedBy: string; deleted_at: Date | null; description?: string | undefined; }, \"id\" | \"spaceId\" | \"createdBy\" | \"createdAt\" | \"yaml\" | \"lastUpdatedAt\" | \"lastUpdatedBy\">"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.transformWorkflowYamlJsontoEsWorkflow.$1",
            "type": "Object",
            "tags": [],
            "label": "workflowDefinition",
            "description": [],
            "signature": [
              "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/utils.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ConnectorInstance",
        "type": "Interface",
        "tags": [],
        "label": "ConnectorInstance",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorInstance.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorInstance.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorInstance.isPreconfigured",
            "type": "boolean",
            "tags": [],
            "label": "isPreconfigured",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorInstance.isDeprecated",
            "type": "boolean",
            "tags": [],
            "label": "isDeprecated",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ConnectorSubAction",
        "type": "Interface",
        "tags": [],
        "label": "ConnectorSubAction",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorSubAction.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorSubAction.displayName",
            "type": "string",
            "tags": [],
            "label": "displayName",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ConnectorTypeInfo",
        "type": "Interface",
        "tags": [],
        "label": "ConnectorTypeInfo",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorTypeInfo.actionTypeId",
            "type": "string",
            "tags": [],
            "label": "actionTypeId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorTypeInfo.displayName",
            "type": "string",
            "tags": [],
            "label": "displayName",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorTypeInfo.instances",
            "type": "Array",
            "tags": [],
            "label": "instances",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ConnectorInstance",
                "text": "ConnectorInstance"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorTypeInfo.enabled",
            "type": "boolean",
            "tags": [],
            "label": "enabled",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorTypeInfo.enabledInConfig",
            "type": "boolean",
            "tags": [],
            "label": "enabledInConfig",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorTypeInfo.enabledInLicense",
            "type": "boolean",
            "tags": [],
            "label": "enabledInLicense",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorTypeInfo.minimumLicenseRequired",
            "type": "string",
            "tags": [],
            "label": "minimumLicenseRequired",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ConnectorTypeInfo.subActions",
            "type": "Array",
            "tags": [],
            "label": "subActions",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ConnectorSubAction",
                "text": "ConnectorSubAction"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.DynamicConnectorContract",
        "type": "Interface",
        "tags": [],
        "label": "DynamicConnectorContract",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.DynamicConnectorContract",
            "text": "DynamicConnectorContract"
          },
          " extends ",
          "ConnectorContract"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.DynamicConnectorContract.actionTypeId",
            "type": "string",
            "tags": [],
            "label": "actionTypeId",
            "description": [
              "Action type ID from Kibana actions plugin"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.DynamicConnectorContract.instances",
            "type": "Array",
            "tags": [],
            "label": "instances",
            "description": [
              "Available connector instances"
            ],
            "signature": [
              "{ id: string; name: string; isPreconfigured: boolean; isDeprecated: boolean; }[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.DynamicConnectorContract.enabled",
            "type": "CompoundType",
            "tags": [],
            "label": "enabled",
            "description": [
              "Whether this connector type is enabled"
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.DynamicConnectorContract.isSystemActionType",
            "type": "CompoundType",
            "tags": [],
            "label": "isSystemActionType",
            "description": [
              "Whether this is a system action type"
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EnhancedInternalConnectorContract",
        "type": "Interface",
        "tags": [],
        "label": "EnhancedInternalConnectorContract",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.EnhancedInternalConnectorContract",
            "text": "EnhancedInternalConnectorContract"
          },
          " extends ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.InternalConnectorContract",
            "text": "InternalConnectorContract"
          }
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EnhancedInternalConnectorContract.examples",
            "type": "Object",
            "tags": [],
            "label": "examples",
            "description": [],
            "signature": [
              "ConnectorExamples",
              " | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EsWorkflowExecution",
        "type": "Interface",
        "tags": [],
        "label": "EsWorkflowExecution",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.spaceId",
            "type": "string",
            "tags": [],
            "label": "spaceId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.isTestRun",
            "type": "boolean",
            "tags": [],
            "label": "isTestRun",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.context",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              "{ [x: string]: any; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.workflowDefinition",
            "type": "Object",
            "tags": [],
            "label": "workflowDefinition",
            "description": [],
            "signature": [
              "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.yaml",
            "type": "string",
            "tags": [],
            "label": "yaml",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.currentNodeId",
            "type": "string",
            "tags": [],
            "label": "currentNodeId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.stepId",
            "type": "string",
            "tags": [],
            "label": "stepId",
            "description": [
              "If specified, the only this step and its children will be executed"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.scopeStack",
            "type": "Array",
            "tags": [],
            "label": "scopeStack",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.StackFrame",
                "text": "StackFrame"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.createdAt",
            "type": "string",
            "tags": [],
            "label": "createdAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.error",
            "type": "CompoundType",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "string | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.createdBy",
            "type": "string",
            "tags": [],
            "label": "createdBy",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.finishedAt",
            "type": "string",
            "tags": [],
            "label": "finishedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.cancelRequested",
            "type": "boolean",
            "tags": [],
            "label": "cancelRequested",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.cancellationReason",
            "type": "string",
            "tags": [],
            "label": "cancellationReason",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.cancelledAt",
            "type": "string",
            "tags": [],
            "label": "cancelledAt",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.cancelledBy",
            "type": "string",
            "tags": [],
            "label": "cancelledBy",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.duration",
            "type": "number",
            "tags": [],
            "label": "duration",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.triggeredBy",
            "type": "string",
            "tags": [],
            "label": "triggeredBy",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.traceId",
            "type": "string",
            "tags": [],
            "label": "traceId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowExecution.entryTransactionId",
            "type": "string",
            "tags": [],
            "label": "entryTransactionId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EsWorkflowStepExecution",
        "type": "Interface",
        "tags": [],
        "label": "EsWorkflowStepExecution",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.spaceId",
            "type": "string",
            "tags": [],
            "label": "spaceId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.stepId",
            "type": "string",
            "tags": [],
            "label": "stepId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.stepType",
            "type": "string",
            "tags": [],
            "label": "stepType",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.scopeStack",
            "type": "Array",
            "tags": [],
            "label": "scopeStack",
            "description": [
              "Current step's stack frames."
            ],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.StackFrame",
                "text": "StackFrame"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.workflowRunId",
            "type": "string",
            "tags": [],
            "label": "workflowRunId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.completedAt",
            "type": "string",
            "tags": [],
            "label": "completedAt",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.executionTimeMs",
            "type": "number",
            "tags": [],
            "label": "executionTimeMs",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.topologicalIndex",
            "type": "number",
            "tags": [],
            "label": "topologicalIndex",
            "description": [
              "Topological index of step in workflow graph."
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.globalExecutionIndex",
            "type": "number",
            "tags": [],
            "label": "globalExecutionIndex",
            "description": [
              "Overall execution index in the entire workflow."
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.stepExecutionIndex",
            "type": "number",
            "tags": [],
            "label": "stepExecutionIndex",
            "description": [
              "\nExecution index within specific stepId.\nThere might be several instances of the same stepId if it's inside loops, retries, etc."
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.error",
            "type": "CompoundType",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.output",
            "type": "CompoundType",
            "tags": [],
            "label": "output",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.JsonValue",
                "text": "JsonValue"
              },
              " | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.input",
            "type": "CompoundType",
            "tags": [],
            "label": "input",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.JsonValue",
                "text": "JsonValue"
              },
              " | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.EsWorkflowStepExecution.state",
            "type": "Object",
            "tags": [],
            "label": "state",
            "description": [
              "Specific step execution instance state. Used by loops, retries, etc to track execution context."
            ],
            "signature": [
              "Record<string, unknown> | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.InternalConnectorContract",
        "type": "Interface",
        "tags": [],
        "label": "InternalConnectorContract",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.InternalConnectorContract",
            "text": "InternalConnectorContract"
          },
          " extends ",
          "ConnectorContract"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.InternalConnectorContract.methods",
            "type": "Array",
            "tags": [],
            "label": "methods",
            "description": [
              "HTTP method(s) for this API endpoint"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.InternalConnectorContract.summary",
            "type": "string",
            "tags": [],
            "label": "summary",
            "description": [
              "Summary for this API endpoint"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.InternalConnectorContract.patterns",
            "type": "Array",
            "tags": [],
            "label": "patterns",
            "description": [
              "URL pattern(s) for this API endpoint"
            ],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.InternalConnectorContract.isInternal",
            "type": "CompoundType",
            "tags": [],
            "label": "isInternal",
            "description": [
              "Whether this is an internal connector with hardcoded endpoint details"
            ],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.InternalConnectorContract.documentation",
            "type": "CompoundType",
            "tags": [],
            "label": "documentation",
            "description": [
              "Documentation URL for this API endpoint"
            ],
            "signature": [
              "string | null | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.InternalConnectorContract.parameterTypes",
            "type": "Object",
            "tags": [],
            "label": "parameterTypes",
            "description": [
              "Parameter type metadata for proper request building"
            ],
            "signature": [
              "{ pathParams?: string[] | undefined; urlParams?: string[] | undefined; bodyParams?: string[] | undefined; } | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.Provider",
        "type": "Interface",
        "tags": [],
        "label": "Provider",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.Provider.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.Provider.action",
            "type": "Function",
            "tags": [],
            "label": "action",
            "description": [],
            "signature": [
              "(stepInputs?: Record<string, unknown> | undefined) => Promise<void | Record<string, unknown>>"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/workflows",
                "id": "def-common.Provider.action.$1",
                "type": "Object",
                "tags": [],
                "label": "stepInputs",
                "description": [],
                "signature": [
                  "Record<string, unknown> | undefined"
                ],
                "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.Provider.inputsDefinition",
            "type": "Object",
            "tags": [],
            "label": "inputsDefinition",
            "description": [],
            "signature": [
              "{ [x: string]: ",
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ProviderInput",
                "text": "ProviderInput"
              },
              "; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ProviderInput",
        "type": "Interface",
        "tags": [],
        "label": "ProviderInput",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ProviderInput.type",
            "type": "CompoundType",
            "tags": [],
            "label": "type",
            "description": [],
            "signature": [
              "\"string\" | \"number\" | \"boolean\""
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ProviderInput.required",
            "type": "boolean",
            "tags": [],
            "label": "required",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.ProviderInput.defaultValue",
            "type": "CompoundType",
            "tags": [],
            "label": "defaultValue",
            "description": [],
            "signature": [
              "string | number | boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StackFrame",
        "type": "Interface",
        "tags": [],
        "label": "StackFrame",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.StackFrame.stepId",
            "type": "string",
            "tags": [],
            "label": "stepId",
            "description": [
              "Step that created this frame"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.StackFrame.nestedScopes",
            "type": "Array",
            "tags": [],
            "label": "nestedScopes",
            "description": [
              "Scope entries within this frame"
            ],
            "signature": [
              "ScopeEntry",
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.UpdatedWorkflowResponseDto",
        "type": "Interface",
        "tags": [],
        "label": "UpdatedWorkflowResponseDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.lastUpdatedAt",
            "type": "Object",
            "tags": [],
            "label": "lastUpdatedAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.lastUpdatedBy",
            "type": "string",
            "tags": [],
            "label": "lastUpdatedBy",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.enabled",
            "type": "boolean",
            "tags": [],
            "label": "enabled",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.valid",
            "type": "boolean",
            "tags": [],
            "label": "valid",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.UpdatedWorkflowResponseDto.validationErrors",
            "type": "Array",
            "tags": [],
            "label": "validationErrors",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowAggsDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowAggsDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowAggsDto.Unnamed",
            "type": "IndexSignature",
            "tags": [],
            "label": "[key: string]: { key: string; label: string; }[]",
            "description": [],
            "signature": [
              "[key: string]:  { key: string; label: string; }[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowDetailDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowDetailDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.enabled",
            "type": "boolean",
            "tags": [],
            "label": "enabled",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.createdAt",
            "type": "Object",
            "tags": [],
            "label": "createdAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.createdBy",
            "type": "string",
            "tags": [],
            "label": "createdBy",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.lastUpdatedAt",
            "type": "Object",
            "tags": [],
            "label": "lastUpdatedAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.lastUpdatedBy",
            "type": "string",
            "tags": [],
            "label": "lastUpdatedBy",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.definition",
            "type": "CompoundType",
            "tags": [],
            "label": "definition",
            "description": [],
            "signature": [
              "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; } | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.yaml",
            "type": "string",
            "tags": [],
            "label": "yaml",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowDetailDto.valid",
            "type": "boolean",
            "tags": [],
            "label": "valid",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.spaceId",
            "type": "string",
            "tags": [],
            "label": "spaceId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.finishedAt",
            "type": "string",
            "tags": [],
            "label": "finishedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.workflowName",
            "type": "string",
            "tags": [],
            "label": "workflowName",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.workflowDefinition",
            "type": "Object",
            "tags": [],
            "label": "workflowDefinition",
            "description": [],
            "signature": [
              "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.stepId",
            "type": "string",
            "tags": [],
            "label": "stepId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.stepExecutions",
            "type": "Array",
            "tags": [],
            "label": "stepExecutions",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowStepExecutionDto",
                "text": "WorkflowStepExecutionDto"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.duration",
            "type": "CompoundType",
            "tags": [],
            "label": "duration",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.triggeredBy",
            "type": "string",
            "tags": [],
            "label": "triggeredBy",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionDto.yaml",
            "type": "string",
            "tags": [],
            "label": "yaml",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionEngineModel",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionEngineModel",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.WorkflowExecutionEngineModel",
            "text": "WorkflowExecutionEngineModel"
          },
          " extends Pick<{ id: string; name: string; enabled: boolean; tags: string[]; createdBy: string; createdAt: Date; valid: boolean; definition: { version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; yaml: string; lastUpdatedAt: Date; lastUpdatedBy: string; deleted_at: Date | null; description?: string | undefined; }, \"id\" | \"name\" | \"enabled\" | \"definition\" | \"yaml\">"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionEngineModel.isTestRun",
            "type": "CompoundType",
            "tags": [],
            "label": "isTestRun",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionEngineModel.spaceId",
            "type": "string",
            "tags": [],
            "label": "spaceId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionHistoryModel",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionHistoryModel",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.workflowId",
            "type": "string",
            "tags": [],
            "label": "workflowId",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.workflowName",
            "type": "string",
            "tags": [],
            "label": "workflowName",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.status",
            "type": "Enum",
            "tags": [],
            "label": "status",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.ExecutionStatus",
                "text": "ExecutionStatus"
              }
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.startedAt",
            "type": "string",
            "tags": [],
            "label": "startedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.finishedAt",
            "type": "string",
            "tags": [],
            "label": "finishedAt",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionHistoryModel.duration",
            "type": "CompoundType",
            "tags": [],
            "label": "duration",
            "description": [],
            "signature": [
              "number | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionListDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionListDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionListDto.results",
            "type": "Array",
            "tags": [],
            "label": "results",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowExecutionListItemDto",
                "text": "WorkflowExecutionListItemDto"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionListDto._pagination",
            "type": "Object",
            "tags": [],
            "label": "_pagination",
            "description": [],
            "signature": [
              "{ page: number; limit: number; total: number; next?: string | undefined; prev?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionLogModel",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowExecutionLogModel",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.spaceId",
            "type": "string",
            "tags": [],
            "label": "spaceId",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.timestamp",
            "type": "string",
            "tags": [],
            "label": "timestamp",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.message",
            "type": "string",
            "tags": [],
            "label": "message",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowExecutionLogModel.level",
            "type": "string",
            "tags": [],
            "label": "level",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowListDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowListDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListDto._pagination",
            "type": "Object",
            "tags": [],
            "label": "_pagination",
            "description": [],
            "signature": [
              "{ page: number; limit: number; total: number; next?: string | undefined; prev?: string | undefined; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListDto.results",
            "type": "Array",
            "tags": [],
            "label": "results",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowListItemDto",
                "text": "WorkflowListItemDto"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowListItemAction",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowListItemAction",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.isPrimary",
            "type": "CompoundType",
            "tags": [],
            "label": "isPrimary",
            "description": [],
            "signature": [
              "boolean | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.color",
            "type": "string",
            "tags": [],
            "label": "color",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.icon",
            "type": "string",
            "tags": [],
            "label": "icon",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemAction.onClick",
            "type": "Function",
            "tags": [],
            "label": "onClick",
            "description": [],
            "signature": [
              "(item: ",
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowListItemDto",
                "text": "WorkflowListItemDto"
              },
              ") => void"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "@kbn/workflows",
                "id": "def-common.WorkflowListItemAction.onClick.$1",
                "type": "Object",
                "tags": [],
                "label": "item",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/workflows",
                    "scope": "common",
                    "docId": "kibKbnWorkflowsPluginApi",
                    "section": "def-common.WorkflowListItemDto",
                    "text": "WorkflowListItemDto"
                  }
                ],
                "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowListItemDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowListItemDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.description",
            "type": "string",
            "tags": [],
            "label": "description",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.enabled",
            "type": "boolean",
            "tags": [],
            "label": "enabled",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.definition",
            "type": "CompoundType",
            "tags": [],
            "label": "definition",
            "description": [],
            "signature": [
              "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; } | null"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.createdAt",
            "type": "Object",
            "tags": [],
            "label": "createdAt",
            "description": [],
            "signature": [
              "Date"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.history",
            "type": "Array",
            "tags": [],
            "label": "history",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/workflows",
                "scope": "common",
                "docId": "kibKbnWorkflowsPluginApi",
                "section": "def-common.WorkflowExecutionHistoryModel",
                "text": "WorkflowExecutionHistoryModel"
              },
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.tags",
            "type": "Array",
            "tags": [],
            "label": "tags",
            "description": [],
            "signature": [
              "string[] | undefined"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowListItemDto.valid",
            "type": "boolean",
            "tags": [],
            "label": "valid",
            "description": [],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowStatsDto",
        "type": "Interface",
        "tags": [],
        "label": "WorkflowStatsDto",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowStatsDto.workflows",
            "type": "Object",
            "tags": [],
            "label": "workflows",
            "description": [],
            "signature": [
              "{ enabled: number; disabled: number; }"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "@kbn/workflows",
            "id": "def-common.WorkflowStatsDto.executions",
            "type": "Array",
            "tags": [],
            "label": "executions",
            "description": [],
            "signature": [
              "WorkflowExecutionsHistoryStats",
              "[]"
            ],
            "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExecutionStatus",
        "type": "Enum",
        "tags": [],
        "label": "ExecutionStatus",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExecutionType",
        "type": "Enum",
        "tags": [],
        "label": "ExecutionType",
        "description": [],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BaseStep",
        "type": "Type",
        "tags": [],
        "label": "BaseStep",
        "description": [],
        "signature": [
          "{ type: string; name: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BuiltInStepType",
        "type": "Type",
        "tags": [],
        "label": "BuiltInStepType",
        "description": [],
        "signature": [
          "\"merge\" | \"http\" | \"parallel\" | \"foreach\" | \"if\" | \"wait\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BuiltInStepTypes",
        "type": "Array",
        "tags": [],
        "label": "BuiltInStepTypes",
        "description": [],
        "signature": [
          "(\"merge\" | \"http\" | \"parallel\" | \"foreach\" | \"if\" | \"wait\")[]"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ConnectorContractUnion",
        "type": "Type",
        "tags": [],
        "label": "ConnectorContractUnion",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.DynamicConnectorContract",
            "text": "DynamicConnectorContract"
          },
          " | ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.EnhancedInternalConnectorContract",
            "text": "EnhancedInternalConnectorContract"
          }
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ConnectorStep",
        "type": "Type",
        "tags": [],
        "label": "ConnectorStep",
        "description": [],
        "signature": [
          "{ type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ConnectorTypeInfoMinimal",
        "type": "Type",
        "tags": [],
        "label": "ConnectorTypeInfoMinimal",
        "description": [],
        "signature": [
          "{ actionTypeId: string; displayName: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.CreateWorkflowCommand",
        "type": "Type",
        "tags": [],
        "label": "CreateWorkflowCommand",
        "description": [],
        "signature": [
          "{ yaml: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.DynamicStepContext",
        "type": "Type",
        "tags": [],
        "label": "DynamicStepContext",
        "description": [],
        "signature": [
          "{ inputs: {}; steps: {}; execution: { id: string; startedAt: Date; isTestRun: boolean; }; consts: {}; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.DynamicWorkflowContext",
        "type": "Type",
        "tags": [],
        "label": "DynamicWorkflowContext",
        "description": [],
        "signature": [
          "{ inputs: {}; execution: { id: string; startedAt: Date; isTestRun: boolean; }; consts: {}; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ElasticsearchStep",
        "type": "Type",
        "tags": [],
        "label": "ElasticsearchStep",
        "description": [],
        "signature": [
          "{ type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EsWorkflow",
        "type": "Type",
        "tags": [],
        "label": "EsWorkflow",
        "description": [],
        "signature": [
          "{ id: string; name: string; enabled: boolean; tags: string[]; createdBy: string; createdAt: Date; valid: boolean; definition: { version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }; yaml: string; lastUpdatedAt: Date; lastUpdatedBy: string; deleted_at: Date | null; description?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExecutionStatusUnion",
        "type": "Type",
        "tags": [],
        "label": "ExecutionStatusUnion",
        "description": [],
        "signature": [
          "\"running\" | \"pending\" | \"failed\" | \"timed_out\" | \"skipped\" | \"completed\" | \"waiting\" | \"waiting_for_input\" | \"cancelled\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExecutionStatusValues",
        "type": "Array",
        "tags": [],
        "label": "ExecutionStatusValues",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ExecutionStatus",
            "text": "ExecutionStatus"
          },
          "[]"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExecutionTypeUnion",
        "type": "Type",
        "tags": [],
        "label": "ExecutionTypeUnion",
        "description": [],
        "signature": [
          "\"production\" | \"test\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ExecutionTypeValues",
        "type": "Array",
        "tags": [],
        "label": "ExecutionTypeValues",
        "description": [],
        "signature": [
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ExecutionType",
            "text": "ExecutionType"
          },
          "[]"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ForEachContext",
        "type": "Type",
        "tags": [],
        "label": "ForEachContext",
        "description": [],
        "signature": [
          "{ index: number; total: number; items: unknown[]; item?: unknown; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ForEachStep",
        "type": "Type",
        "tags": [],
        "label": "ForEachStep",
        "description": [],
        "signature": [
          "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.HttpStep",
        "type": "Type",
        "tags": [],
        "label": "HttpStep",
        "description": [],
        "signature": [
          "{ type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.IfStep",
        "type": "Type",
        "tags": [],
        "label": "IfStep",
        "description": [],
        "signature": [
          "{ type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.KibanaStep",
        "type": "Type",
        "tags": [],
        "label": "KibanaStep",
        "description": [],
        "signature": [
          "{ type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.MergeStep",
        "type": "Type",
        "tags": [],
        "label": "MergeStep",
        "description": [],
        "signature": [
          "{ type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ParallelStep",
        "type": "Type",
        "tags": [],
        "label": "ParallelStep",
        "description": [],
        "signature": [
          "{ type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.RunStepCommand",
        "type": "Type",
        "tags": [],
        "label": "RunStepCommand",
        "description": [],
        "signature": [
          "{ stepId: string; workflowYaml: string; contextOverride?: Record<string, unknown> | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.RunWorkflowCommand",
        "type": "Type",
        "tags": [],
        "label": "RunWorkflowCommand",
        "description": [],
        "signature": [
          "{ inputs: Record<string, unknown>; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.RunWorkflowResponseDto",
        "type": "Type",
        "tags": [],
        "label": "RunWorkflowResponseDto",
        "description": [],
        "signature": [
          "{ workflowExecutionId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.Step",
        "type": "Type",
        "tags": [],
        "label": "Step",
        "description": [],
        "signature": [
          "{ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepContext",
        "type": "Type",
        "tags": [],
        "label": "StepContext",
        "description": [],
        "signature": [
          "{ steps: Record<string, { error?: any; output?: any; }>; execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; inputs?: Record<string, string | number | boolean | string[] | boolean[] | number[]> | undefined; consts?: Record<string, any> | undefined; foreach?: { index: number; total: number; items: unknown[]; item?: unknown; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepData",
        "type": "Type",
        "tags": [],
        "label": "StepData",
        "description": [],
        "signature": [
          "{ error?: any; output?: any; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepWithForeach",
        "type": "Type",
        "tags": [],
        "label": "StepWithForeach",
        "description": [],
        "signature": [
          "{ foreach?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepWithIfCondition",
        "type": "Type",
        "tags": [],
        "label": "StepWithIfCondition",
        "description": [],
        "signature": [
          "{ if?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepWithOnFailure",
        "type": "Type",
        "tags": [],
        "label": "StepWithOnFailure",
        "description": [],
        "signature": [
          "{ 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TestWorkflowCommand",
        "type": "Type",
        "tags": [],
        "label": "TestWorkflowCommand",
        "description": [],
        "signature": [
          "{ inputs: Record<string, unknown>; workflowYaml: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TestWorkflowResponseDto",
        "type": "Type",
        "tags": [],
        "label": "TestWorkflowResponseDto",
        "description": [],
        "signature": [
          "{ workflowExecutionId: string; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TimeoutProp",
        "type": "Type",
        "tags": [],
        "label": "TimeoutProp",
        "description": [],
        "signature": [
          "{ timeout?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TriggerType",
        "type": "Type",
        "tags": [],
        "label": "TriggerType",
        "description": [],
        "signature": [
          "\"alert\" | \"manual\" | \"scheduled\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TriggerTypes",
        "type": "Array",
        "tags": [],
        "label": "TriggerTypes",
        "description": [],
        "signature": [
          "(\"alert\" | \"manual\" | \"scheduled\")[]"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WaitStep",
        "type": "Type",
        "tags": [],
        "label": "WaitStep",
        "description": [],
        "signature": [
          "{ type: \"wait\"; name: string; with: { duration: string; }; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WORKFLOW_EXECUTION_STATS_BAR_SETTING_ID",
        "type": "string",
        "tags": [],
        "label": "WORKFLOW_EXECUTION_STATS_BAR_SETTING_ID",
        "description": [
          "\nFeature flag ID for enabling / disabling the workflow execution stats bar UI"
        ],
        "signature": [
          "\"workflows:executionStatsBar:enabled\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowContext",
        "type": "Type",
        "tags": [],
        "label": "WorkflowContext",
        "description": [],
        "signature": [
          "{ execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; inputs?: Record<string, string | number | boolean | string[] | boolean[] | number[]> | undefined; consts?: Record<string, any> | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowDataContext",
        "type": "Type",
        "tags": [],
        "label": "WorkflowDataContext",
        "description": [],
        "signature": [
          "{ id: string; spaceId: string; name: string; enabled: boolean; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionContext",
        "type": "Type",
        "tags": [],
        "label": "WorkflowExecutionContext",
        "description": [],
        "signature": [
          "{ id: string; startedAt: Date; isTestRun: boolean; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionListItemDto",
        "type": "Type",
        "tags": [],
        "label": "WorkflowExecutionListItemDto",
        "description": [],
        "signature": [
          "{ id: string; spaceId: string; duration: number | null; status: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ExecutionStatus",
            "text": "ExecutionStatus"
          },
          "; startedAt: string; workflowId?: string | undefined; finishedAt: string; triggeredBy?: string | undefined; stepId?: string | undefined; workflowName?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowOnFailure",
        "type": "Type",
        "tags": [],
        "label": "WorkflowOnFailure",
        "description": [],
        "signature": [
          "{ retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowRetry",
        "type": "Type",
        "tags": [],
        "label": "WorkflowRetry",
        "description": [],
        "signature": [
          "{ 'max-attempts': number; delay?: string | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WORKFLOWS_UI_EXECUTION_GRAPH_SETTING_ID",
        "type": "string",
        "tags": [],
        "label": "WORKFLOWS_UI_EXECUTION_GRAPH_SETTING_ID",
        "description": [],
        "signature": [
          "\"workflows:ui:executionGraph:enabled\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WORKFLOWS_UI_SETTING_ID",
        "type": "string",
        "tags": [],
        "label": "WORKFLOWS_UI_SETTING_ID",
        "description": [
          "\nUI Setting ID for enabling / disabling the workflows management UI"
        ],
        "signature": [
          "\"workflows:ui:enabled\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WORKFLOWS_UI_VISUAL_EDITOR_SETTING_ID",
        "type": "string",
        "tags": [],
        "label": "WORKFLOWS_UI_VISUAL_EDITOR_SETTING_ID",
        "description": [],
        "signature": [
          "\"workflows:ui:visualEditor:enabled\""
        ],
        "path": "src/platform/packages/shared/kbn-workflows/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowSettings",
        "type": "Type",
        "tags": [],
        "label": "WorkflowSettings",
        "description": [],
        "signature": [
          "{ timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowStepExecutionDto",
        "type": "Type",
        "tags": [],
        "label": "WorkflowStepExecutionDto",
        "description": [],
        "signature": [
          "{ id: string; error?: string | null | undefined; state?: Record<string, unknown> | undefined; status: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.ExecutionStatus",
            "text": "ExecutionStatus"
          },
          "; input?: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonValue",
            "text": "JsonValue"
          },
          " | undefined; output?: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.JsonValue",
            "text": "JsonValue"
          },
          " | undefined; startedAt: string; workflowId: string; stepId: string; workflowRunId: string; stepType?: string | undefined; scopeStack: ",
          {
            "pluginId": "@kbn/workflows",
            "scope": "common",
            "docId": "kibKbnWorkflowsPluginApi",
            "section": "def-common.StackFrame",
            "text": "StackFrame"
          },
          "[]; completedAt?: string | undefined; executionTimeMs?: number | undefined; topologicalIndex: number; globalExecutionIndex: number; stepExecutionIndex: number; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowYaml",
        "type": "Type",
        "tags": [],
        "label": "WorkflowYaml",
        "description": [],
        "signature": [
          "{ version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.AlertRuleTriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "AlertRuleTriggerSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"alert\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; with: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ rule_id: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { rule_id: string; }, { rule_id: string; }>, ",
          "ZodObject",
          "<{ rule_name: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { rule_name: string; }, { rule_name: string; }>]>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; }, { type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BaseConnectorStepSchema",
        "type": "Object",
        "tags": [],
        "label": "BaseConnectorStepSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodString",
          "; 'connector-id': ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; with: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; } & { if: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { foreach: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.BaseStepSchema",
        "type": "Object",
        "tags": [],
        "label": "BaseStepSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.CreateWorkflowCommandSchema",
        "type": "Object",
        "tags": [],
        "label": "CreateWorkflowCommandSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ yaml: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { yaml: string; }, { yaml: string; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.DurationSchema",
        "type": "Object",
        "tags": [],
        "label": "DurationSchema",
        "description": [],
        "signature": [
          "ZodString"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.DynamicStepContextSchema",
        "type": "Object",
        "tags": [],
        "label": "DynamicStepContextSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ event: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ alerts: ",
          "ZodObject",
          "<{ new: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; ongoing: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; recovered: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; all: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }, { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }>; rule: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; name: ",
          "ZodString",
          "; tags: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; consumer: ",
          "ZodString",
          "; producer: ",
          "ZodString",
          "; ruleTypeId: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }, { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }>; spaceId: ",
          "ZodString",
          "; params: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; }, { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; }>>; execution: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; isTestRun: ",
          "ZodBoolean",
          "; startedAt: ",
          "ZodDate",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; startedAt: Date; isTestRun: boolean; }, { id: string; startedAt: Date; isTestRun: boolean; }>; workflow: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; name: ",
          "ZodString",
          "; enabled: ",
          "ZodBoolean",
          "; spaceId: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; spaceId: string; name: string; enabled: boolean; }, { id: string; spaceId: string; name: string; enabled: boolean; }>; now: ",
          "ZodOptional",
          "<",
          "ZodDate",
          ">; } & { inputs: ",
          "ZodObject",
          "<{}, \"strip\", ",
          "ZodTypeAny",
          ", {}, {}>; consts: ",
          "ZodObject",
          "<{}, \"strip\", ",
          "ZodTypeAny",
          ", {}, {}>; } & { steps: ",
          "ZodObject",
          "<{}, \"strip\", ",
          "ZodTypeAny",
          ", {}, {}>; }, \"strip\", ",
          "ZodTypeAny",
          ", { inputs: {}; steps: {}; execution: { id: string; startedAt: Date; isTestRun: boolean; }; consts: {}; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; }, { inputs: {}; steps: {}; execution: { id: string; startedAt: Date; isTestRun: boolean; }; consts: {}; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.DynamicWorkflowContextSchema",
        "type": "Object",
        "tags": [],
        "label": "DynamicWorkflowContextSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ event: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ alerts: ",
          "ZodObject",
          "<{ new: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; ongoing: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; recovered: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; all: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }, { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }>; rule: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; name: ",
          "ZodString",
          "; tags: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; consumer: ",
          "ZodString",
          "; producer: ",
          "ZodString",
          "; ruleTypeId: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }, { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }>; spaceId: ",
          "ZodString",
          "; params: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; }, { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; }>>; execution: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; isTestRun: ",
          "ZodBoolean",
          "; startedAt: ",
          "ZodDate",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; startedAt: Date; isTestRun: boolean; }, { id: string; startedAt: Date; isTestRun: boolean; }>; workflow: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; name: ",
          "ZodString",
          "; enabled: ",
          "ZodBoolean",
          "; spaceId: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; spaceId: string; name: string; enabled: boolean; }, { id: string; spaceId: string; name: string; enabled: boolean; }>; now: ",
          "ZodOptional",
          "<",
          "ZodDate",
          ">; } & { inputs: ",
          "ZodObject",
          "<{}, \"strip\", ",
          "ZodTypeAny",
          ", {}, {}>; consts: ",
          "ZodObject",
          "<{}, \"strip\", ",
          "ZodTypeAny",
          ", {}, {}>; }, \"strip\", ",
          "ZodTypeAny",
          ", { inputs: {}; execution: { id: string; startedAt: Date; isTestRun: boolean; }; consts: {}; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; }, { inputs: {}; execution: { id: string; startedAt: Date; isTestRun: boolean; }; consts: {}; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ElasticsearchStepSchema",
        "type": "Object",
        "tags": [],
        "label": "ElasticsearchStepSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodEffects",
          "<",
          "ZodString",
          ", string, string>; with: ",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ request: ",
          "ZodObject",
          "<{ method: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodEnum",
          "<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"HEAD\"]>>>; path: ",
          "ZodString",
          "; body: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }, { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; }, { request: { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; }; }>, ",
          "ZodIntersection",
          "<",
          "ZodObject",
          "<{ index: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; id: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; query: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; body: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; size: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; from: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; sort: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodAny",
          ", \"many\">>; _source: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodBoolean",
          ", ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">, ",
          "ZodString",
          "]>>; aggs: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; aggregations: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; }, { id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; }>, ",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>]>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); }, { type: string; name: string; with: { request: { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.EventSchema",
        "type": "Object",
        "tags": [],
        "label": "EventSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ alerts: ",
          "ZodObject",
          "<{ new: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; ongoing: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; recovered: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; all: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }, { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }>; rule: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; name: ",
          "ZodString",
          "; tags: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; consumer: ",
          "ZodString",
          "; producer: ",
          "ZodString",
          "; ruleTypeId: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }, { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }>; spaceId: ",
          "ZodString",
          "; params: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; }, { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ForEachContextSchema",
        "type": "Object",
        "tags": [],
        "label": "ForEachContextSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ items: ",
          "ZodArray",
          "<",
          "ZodUnknown",
          ", \"many\">; index: ",
          "ZodNumber",
          "; item: ",
          "ZodUnknown",
          "; total: ",
          "ZodNumber",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { index: number; total: number; items: unknown[]; item?: unknown; }, { index: number; total: number; items: unknown[]; item?: unknown; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ForEachStepSchema",
        "type": "Object",
        "tags": [],
        "label": "ForEachStepSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"foreach\">; foreach: ",
          "ZodString",
          "; steps: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">; } & { if: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }, { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.HttpStepSchema",
        "type": "Object",
        "tags": [],
        "label": "HttpStepSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"http\">; with: ",
          "ZodObject",
          "<{ url: ",
          "ZodString",
          "; method: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodEnum",
          "<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodUnion",
          "<[",
          "ZodString",
          ", ",
          "ZodNumber",
          ", ",
          "ZodBoolean",
          "]>>>>; body: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; timeout: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>; } & { if: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { foreach: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }, { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.IfStepSchema",
        "type": "Object",
        "tags": [],
        "label": "IfStepSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"if\">; condition: ",
          "ZodString",
          "; steps: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">; else: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }, { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.KibanaStepSchema",
        "type": "Object",
        "tags": [],
        "label": "KibanaStepSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodEffects",
          "<",
          "ZodString",
          ", string, string>; with: ",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ request: ",
          "ZodObject",
          "<{ method: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodEnum",
          "<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"HEAD\"]>>>; path: ",
          "ZodString",
          "; body: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; headers: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodString",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }, { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string> | undefined; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; }, { request: { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string> | undefined; }; }>, ",
          "ZodIntersection",
          "<",
          "ZodObject",
          "<{ title: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; tags: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">>; severity: ",
          "ZodOptional",
          "<",
          "ZodEnum",
          "<[\"low\", \"medium\", \"high\", \"critical\"]>>; assignees: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">>; owner: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; connector: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; settings: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; id: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; case_id: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; space_id: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; page: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; perPage: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; status: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; }, { id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; }>, ",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>]>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); }, { type: string; name: string; with: { request: { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ManualTriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "ManualTriggerSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"manual\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"manual\"; enabled: boolean; }, { type: \"manual\"; enabled?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.MergeStepSchema",
        "type": "Object",
        "tags": [],
        "label": "MergeStepSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"merge\">; sources: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; steps: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }, { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ParallelStepSchema",
        "type": "Object",
        "tags": [],
        "label": "ParallelStepSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"parallel\">; branches: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; steps: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { name: string; steps: { type: string; name: string; }[]; }, { name: string; steps: { type: string; name: string; }[]; }>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.RetryPolicySchema",
        "type": "Object",
        "tags": [],
        "label": "RetryPolicySchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; 'timeout-seconds': ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }, { 'max-attempts'?: number | undefined; 'timeout-seconds'?: number | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.ScheduledTriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "ScheduledTriggerSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"scheduled\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; with: ",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ every: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { every: string; }, { every: string; }>, ",
          "ZodObject",
          "<{ rrule: ",
          "ZodObject",
          "<{ freq: ",
          "ZodEnum",
          "<[\"DAILY\", \"WEEKLY\", \"MONTHLY\"]>; interval: ",
          "ZodNumber",
          "; tzid: ",
          "ZodDefault",
          "<",
          "ZodEnum",
          "<[string, ...string[]]>>; dtstart: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; byhour: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; byminute: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; byweekday: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodEnum",
          "<[\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"]>, \"many\">>; bymonthday: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }, { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }, { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }>]>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; }, { type: \"scheduled\"; with: { every: string; } | { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; enabled?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.SearchWorkflowCommandSchema",
        "type": "Object",
        "tags": [],
        "label": "SearchWorkflowCommandSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ triggerType: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; limit: ",
          "ZodDefault",
          "<",
          "ZodNumber",
          ">; page: ",
          "ZodDefault",
          "<",
          "ZodNumber",
          ">; createdBy: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">>; enabled: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodBoolean",
          ", ",
          "ZodEffects",
          "<",
          "ZodNumber",
          ", boolean, number>]>, \"many\">>; query: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; _full: ",
          "ZodDefault",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { page: number; limit: number; _full: boolean; enabled?: boolean[] | undefined; createdBy?: string[] | undefined; query?: string | undefined; triggerType?: string | undefined; }, { page?: number | undefined; enabled?: (number | boolean)[] | undefined; createdBy?: string[] | undefined; query?: string | undefined; limit?: number | undefined; triggerType?: string | undefined; _full?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepContextSchema",
        "type": "Object",
        "tags": [],
        "label": "StepContextSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ event: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ alerts: ",
          "ZodObject",
          "<{ new: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; ongoing: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; recovered: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; all: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }, { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }>; rule: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; name: ",
          "ZodString",
          "; tags: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; consumer: ",
          "ZodString",
          "; producer: ",
          "ZodString",
          "; ruleTypeId: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }, { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }>; spaceId: ",
          "ZodString",
          "; params: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; }, { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; }>>; execution: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; isTestRun: ",
          "ZodBoolean",
          "; startedAt: ",
          "ZodDate",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; startedAt: Date; isTestRun: boolean; }, { id: string; startedAt: Date; isTestRun: boolean; }>; workflow: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; name: ",
          "ZodString",
          "; enabled: ",
          "ZodBoolean",
          "; spaceId: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; spaceId: string; name: string; enabled: boolean; }, { id: string; spaceId: string; name: string; enabled: boolean; }>; inputs: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodUnion",
          "<[",
          "ZodString",
          ", ",
          "ZodNumber",
          ", ",
          "ZodBoolean",
          ", ",
          "ZodUnion",
          "<[",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodBoolean",
          ", \"many\">]>]>>>; consts: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; now: ",
          "ZodOptional",
          "<",
          "ZodDate",
          ">; } & { steps: ",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodObject",
          "<{ output: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; error: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { error?: any; output?: any; }, { error?: any; output?: any; }>>; foreach: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ items: ",
          "ZodArray",
          "<",
          "ZodUnknown",
          ", \"many\">; index: ",
          "ZodNumber",
          "; item: ",
          "ZodUnknown",
          "; total: ",
          "ZodNumber",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { index: number; total: number; items: unknown[]; item?: unknown; }, { index: number; total: number; items: unknown[]; item?: unknown; }>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { steps: Record<string, { error?: any; output?: any; }>; execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; inputs?: Record<string, string | number | boolean | string[] | boolean[] | number[]> | undefined; consts?: Record<string, any> | undefined; foreach?: { index: number; total: number; items: unknown[]; item?: unknown; } | undefined; }, { steps: Record<string, { error?: any; output?: any; }>; execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; inputs?: Record<string, string | number | boolean | string[] | boolean[] | number[]> | undefined; consts?: Record<string, any> | undefined; foreach?: { index: number; total: number; items: unknown[]; item?: unknown; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepDataSchema",
        "type": "Object",
        "tags": [],
        "label": "StepDataSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ output: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; error: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { error?: any; output?: any; }, { error?: any; output?: any; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.StepWithOnFailureSchema",
        "type": "Object",
        "tags": [],
        "label": "StepWithOnFailureSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }, { 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TimeoutPropSchema",
        "type": "Object",
        "tags": [],
        "label": "TimeoutPropSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { timeout?: string | undefined; }, { timeout?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.TriggerSchema",
        "type": "Object",
        "tags": [],
        "label": "TriggerSchema",
        "description": [],
        "signature": [
          "ZodDiscriminatedUnion",
          "<\"type\", [",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"alert\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; with: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ rule_id: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { rule_id: string; }, { rule_id: string; }>, ",
          "ZodObject",
          "<{ rule_name: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { rule_name: string; }, { rule_name: string; }>]>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; }, { type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; }>, ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"scheduled\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; with: ",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ every: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { every: string; }, { every: string; }>, ",
          "ZodObject",
          "<{ rrule: ",
          "ZodObject",
          "<{ freq: ",
          "ZodEnum",
          "<[\"DAILY\", \"WEEKLY\", \"MONTHLY\"]>; interval: ",
          "ZodNumber",
          "; tzid: ",
          "ZodDefault",
          "<",
          "ZodEnum",
          "<[string, ...string[]]>>; dtstart: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; byhour: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; byminute: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; byweekday: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodEnum",
          "<[\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"]>, \"many\">>; bymonthday: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }, { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }, { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }>]>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; }, { type: \"scheduled\"; with: { every: string; } | { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; enabled?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"manual\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"manual\"; enabled: boolean; }, { type: \"manual\"; enabled?: boolean | undefined; }>]>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.UpdateWorkflowCommandSchema",
        "type": "Object",
        "tags": [],
        "label": "UpdateWorkflowCommandSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; enabled: ",
          "ZodBoolean",
          "; tags: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; yaml: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { name: string; enabled: boolean; tags: string[]; yaml: string; description?: string | undefined; }, { name: string; enabled: boolean; tags: string[]; yaml: string; description?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/types/v1.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WaitStepSchema",
        "type": "Object",
        "tags": [],
        "label": "WaitStepSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"wait\">; with: ",
          "ZodObject",
          "<{ duration: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { duration: string; }, { duration: string; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"wait\"; name: string; with: { duration: string; }; }, { type: \"wait\"; name: string; with: { duration: string; }; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowConstsSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowConstsSchema",
        "description": [],
        "signature": [
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodUnion",
          "<[",
          "ZodString",
          ", ",
          "ZodNumber",
          ", ",
          "ZodBoolean",
          ", ",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">, ",
          "ZodObject",
          "<{}, \"strip\", ",
          "ZodTypeAny",
          ", {}, {}>, ",
          "ZodArray",
          "<",
          "ZodAny",
          ", \"many\">]>>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowContextSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowContextSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ event: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ alerts: ",
          "ZodObject",
          "<{ new: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; ongoing: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; recovered: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; all: ",
          "ZodObject",
          "<{ count: ",
          "ZodNumber",
          "; data: ",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ _id: ",
          "ZodString",
          "; _index: ",
          "ZodString",
          "; kibana: ",
          "ZodObject",
          "<{ alert: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { alert?: any; }, { alert?: any; }>; '@timestamp': ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }, { '@timestamp': string; kibana: { alert?: any; }; _index: string; _id: string; }>, ",
          "ZodAny",
          "]>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { count: number; data: any[]; }, { count: number; data: any[]; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }, { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }>; rule: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; name: ",
          "ZodString",
          "; tags: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; consumer: ",
          "ZodString",
          "; producer: ",
          "ZodString",
          "; ruleTypeId: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }, { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }>; spaceId: ",
          "ZodString",
          "; params: ",
          "ZodAny",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; }, { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; }>>; execution: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; isTestRun: ",
          "ZodBoolean",
          "; startedAt: ",
          "ZodDate",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; startedAt: Date; isTestRun: boolean; }, { id: string; startedAt: Date; isTestRun: boolean; }>; workflow: ",
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; name: ",
          "ZodString",
          "; enabled: ",
          "ZodBoolean",
          "; spaceId: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; spaceId: string; name: string; enabled: boolean; }, { id: string; spaceId: string; name: string; enabled: boolean; }>; inputs: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodUnion",
          "<[",
          "ZodString",
          ", ",
          "ZodNumber",
          ", ",
          "ZodBoolean",
          ", ",
          "ZodUnion",
          "<[",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodBoolean",
          ", \"many\">]>]>>>; consts: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; now: ",
          "ZodOptional",
          "<",
          "ZodDate",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; inputs?: Record<string, string | number | boolean | string[] | boolean[] | number[]> | undefined; consts?: Record<string, any> | undefined; }, { execution: { id: string; startedAt: Date; isTestRun: boolean; }; workflow: { id: string; spaceId: string; name: string; enabled: boolean; }; event?: { spaceId: string; rule: { id: string; consumer: string; name: string; tags: string[]; ruleTypeId: string; producer: string; }; alerts: { new: { count: number; data: any[]; }; recovered: { count: number; data: any[]; }; all: { count: number; data: any[]; }; ongoing: { count: number; data: any[]; }; }; params?: any; } | undefined; now?: Date | undefined; inputs?: Record<string, string | number | boolean | string[] | boolean[] | number[]> | undefined; consts?: Record<string, any> | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowDataContextSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowDataContextSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; name: ",
          "ZodString",
          "; enabled: ",
          "ZodBoolean",
          "; spaceId: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; spaceId: string; name: string; enabled: boolean; }, { id: string; spaceId: string; name: string; enabled: boolean; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowExecutionContextSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowExecutionContextSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ id: ",
          "ZodString",
          "; isTestRun: ",
          "ZodBoolean",
          "; startedAt: ",
          "ZodDate",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { id: string; startedAt: Date; isTestRun: boolean; }, { id: string; startedAt: Date; isTestRun: boolean; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputArraySchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputArraySchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"array\">; minItems: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; maxItems: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; default: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodBoolean",
          ", \"many\">]>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; }, { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputBooleanSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputBooleanSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"boolean\">; default: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputChoiceSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputChoiceSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"choice\">; default: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; options: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputNumberSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputNumberSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"number\">; default: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputSchema",
        "description": [],
        "signature": [
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"string\">; default: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"number\">; default: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"boolean\">; default: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"choice\">; default: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; options: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"array\">; minItems: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; maxItems: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; default: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodBoolean",
          ", \"many\">]>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; }, { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; }>]>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputStringSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputStringSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"string\">; default: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowInputTypeEnum",
        "type": "Object",
        "tags": [],
        "label": "WorkflowInputTypeEnum",
        "description": [],
        "signature": [
          "ZodEnum",
          "<[\"string\", \"number\", \"boolean\", \"choice\", \"array\"]>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowOnFailureSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowOnFailureSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowRetrySchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowRetrySchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ version: ",
          "ZodDefault",
          "<",
          "ZodLiteral",
          "<\"1\">>; name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; settings: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; timezone: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }, { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }>>; enabled: ",
          "ZodDefault",
          "<",
          "ZodBoolean",
          ">; tags: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">>; triggers: ",
          "ZodArray",
          "<",
          "ZodDiscriminatedUnion",
          "<\"type\", [",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"alert\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; with: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ rule_id: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { rule_id: string; }, { rule_id: string; }>, ",
          "ZodObject",
          "<{ rule_name: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { rule_name: string; }, { rule_name: string; }>]>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; }, { type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; }>, ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"scheduled\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; with: ",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ every: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { every: string; }, { every: string; }>, ",
          "ZodObject",
          "<{ rrule: ",
          "ZodObject",
          "<{ freq: ",
          "ZodEnum",
          "<[\"DAILY\", \"WEEKLY\", \"MONTHLY\"]>; interval: ",
          "ZodNumber",
          "; tzid: ",
          "ZodDefault",
          "<",
          "ZodEnum",
          "<[string, ...string[]]>>; dtstart: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; byhour: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; byminute: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; byweekday: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodEnum",
          "<[\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"]>, \"many\">>; bymonthday: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }, { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }, { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }>]>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; }, { type: \"scheduled\"; with: { every: string; } | { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; enabled?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ type: ",
          "ZodLiteral",
          "<\"manual\">; enabled: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"manual\"; enabled: boolean; }, { type: \"manual\"; enabled?: boolean | undefined; }>]>, \"many\">; inputs: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"string\">; default: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"number\">; default: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }, { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"boolean\">; default: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }, { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"choice\">; default: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; options: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }, { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; required: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; } & { type: ",
          "ZodLiteral",
          "<\"array\">; minItems: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; maxItems: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; default: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodNumber",
          ", \"many\">, ",
          "ZodArray",
          "<",
          "ZodBoolean",
          ", \"many\">]>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; }, { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; }>]>, \"many\">>; consts: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodUnion",
          "<[",
          "ZodString",
          ", ",
          "ZodNumber",
          ", ",
          "ZodBoolean",
          ", ",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">, ",
          "ZodObject",
          "<{}, \"strip\", ",
          "ZodTypeAny",
          ", {}, {}>, ",
          "ZodArray",
          "<",
          "ZodAny",
          ", \"many\">]>>>; steps: ",
          "ZodArray",
          "<",
          "ZodLazy",
          "<",
          "ZodDiscriminatedUnion",
          "<\"type\", [",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"foreach\">; foreach: ",
          "ZodString",
          "; steps: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">; } & { if: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }, { type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"if\">; condition: ",
          "ZodString",
          "; steps: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">; else: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }, { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"wait\">; with: ",
          "ZodObject",
          "<{ duration: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { duration: string; }, { duration: string; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"wait\"; name: string; with: { duration: string; }; }, { type: \"wait\"; name: string; with: { duration: string; }; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"http\">; with: ",
          "ZodObject",
          "<{ url: ",
          "ZodString",
          "; method: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodEnum",
          "<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]>>>; headers: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodUnion",
          "<[",
          "ZodString",
          ", ",
          "ZodNumber",
          ", ",
          "ZodBoolean",
          "]>>>>; body: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; timeout: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodString",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }, { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }>; } & { if: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { foreach: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }, { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodEffects",
          "<",
          "ZodString",
          ", string, string>; with: ",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ request: ",
          "ZodObject",
          "<{ method: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodEnum",
          "<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"HEAD\"]>>>; path: ",
          "ZodString",
          "; body: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }, { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; }, { request: { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; }; }>, ",
          "ZodIntersection",
          "<",
          "ZodObject",
          "<{ index: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; id: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; query: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; body: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; size: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; from: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; sort: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodAny",
          ", \"many\">>; _source: ",
          "ZodOptional",
          "<",
          "ZodUnion",
          "<[",
          "ZodBoolean",
          ", ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">, ",
          "ZodString",
          "]>>; aggs: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; aggregations: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; }, { id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; }>, ",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>]>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); }, { type: string; name: string; with: { request: { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodEffects",
          "<",
          "ZodString",
          ", string, string>; with: ",
          "ZodUnion",
          "<[",
          "ZodObject",
          "<{ request: ",
          "ZodObject",
          "<{ method: ",
          "ZodDefault",
          "<",
          "ZodOptional",
          "<",
          "ZodEnum",
          "<[\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\", \"HEAD\"]>>>; path: ",
          "ZodString",
          "; body: ",
          "ZodOptional",
          "<",
          "ZodAny",
          ">; headers: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodString",
          ">>; }, \"strip\", ",
          "ZodTypeAny",
          ", { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }, { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string> | undefined; }>; }, \"strip\", ",
          "ZodTypeAny",
          ", { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; }, { request: { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string> | undefined; }; }>, ",
          "ZodIntersection",
          "<",
          "ZodObject",
          "<{ title: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; description: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; tags: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">>; severity: ",
          "ZodOptional",
          "<",
          "ZodEnum",
          "<[\"low\", \"medium\", \"high\", \"critical\"]>>; assignees: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">>; owner: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; connector: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; settings: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; id: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; case_id: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; space_id: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; page: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; perPage: ",
          "ZodOptional",
          "<",
          "ZodNumber",
          ">; status: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; }, { id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; }>, ",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>]>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); }, { type: string; name: string; with: { request: { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"parallel\">; branches: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; steps: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { name: string; steps: { type: string; name: string; }[]; }, { name: string; steps: { type: string; name: string; }[]; }>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }, { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodLiteral",
          "<\"merge\">; sources: ",
          "ZodArray",
          "<",
          "ZodString",
          ", \"many\">; steps: ",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }, { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; }>, ",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; } & { type: ",
          "ZodString",
          "; 'connector-id': ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; with: ",
          "ZodOptional",
          "<",
          "ZodRecord",
          "<",
          "ZodString",
          ", ",
          "ZodAny",
          ">>; } & { if: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { foreach: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; } & { 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }, { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; }>]>>, \"many\">; }, \"strip\", ",
          "ZodTypeAny",
          ", { version: \"1\"; name: string; enabled: boolean; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { timeout: string; url: string; method: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\"; headers: Record<string, string | number | boolean>; body?: any; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; method: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\"; body?: any; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled: boolean; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; enabled: boolean; with: { every: string; } | { rrule: { interval: number; tzid: string; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; } | { type: \"manual\"; enabled: boolean; })[]; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }, { name: string; steps: ({ type: \"foreach\"; name: string; steps: { type: string; name: string; }[]; foreach: string; if?: string | undefined; } | { type: \"if\"; name: string; steps: { type: string; name: string; }[]; condition: string; else?: { type: string; name: string; }[] | undefined; } | { type: \"wait\"; name: string; with: { duration: string; }; } | { type: \"http\"; name: string; with: { url: string; timeout?: string | undefined; body?: any; method?: \"GET\" | \"DELETE\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string | number | boolean> | undefined; }; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; foreach?: string | undefined; if?: string | undefined; } | { type: string; name: string; with: { request: { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; }; } | ({ id?: string | undefined; sort?: any[] | undefined; aggs?: Record<string, any> | undefined; index?: string | undefined; size?: number | undefined; query?: Record<string, any> | undefined; body?: Record<string, any> | undefined; aggregations?: Record<string, any> | undefined; from?: number | undefined; _source?: string | boolean | string[] | undefined; } & Record<string, any>); } | { type: string; name: string; with: { request: { path: string; body?: any; method?: \"GET\" | \"DELETE\" | \"HEAD\" | \"POST\" | \"PUT\" | \"PATCH\" | undefined; headers?: Record<string, string> | undefined; }; } | ({ id?: string | undefined; page?: number | undefined; connector?: Record<string, any> | undefined; tags?: string[] | undefined; title?: string | undefined; description?: string | undefined; perPage?: number | undefined; status?: string | undefined; severity?: \"medium\" | \"high\" | \"low\" | \"critical\" | undefined; settings?: Record<string, any> | undefined; owner?: string | undefined; assignees?: string[] | undefined; case_id?: string | undefined; space_id?: string | undefined; } & Record<string, any>); } | { type: \"parallel\"; name: string; branches: { name: string; steps: { type: string; name: string; }[]; }[]; } | { type: \"merge\"; name: string; sources: string[]; steps: { type: string; name: string; }[]; } | { type: string; name: string; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; with?: Record<string, any> | undefined; foreach?: string | undefined; if?: string | undefined; 'connector-id'?: string | undefined; })[]; triggers: ({ type: \"alert\"; enabled?: boolean | undefined; with?: { rule_id: string; } | { rule_name: string; } | undefined; } | { type: \"scheduled\"; with: { every: string; } | { rrule: { interval: number; freq: \"DAILY\" | \"WEEKLY\" | \"MONTHLY\"; dtstart?: string | undefined; tzid?: string | undefined; byweekday?: (\"MO\" | \"TU\" | \"WE\" | \"TH\" | \"FR\" | \"SA\" | \"SU\")[] | undefined; bymonthday?: number[] | undefined; byhour?: number[] | undefined; byminute?: number[] | undefined; }; }; enabled?: boolean | undefined; } | { type: \"manual\"; enabled?: boolean | undefined; })[]; version?: \"1\" | undefined; enabled?: boolean | undefined; tags?: string[] | undefined; description?: string | undefined; settings?: { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; } | undefined; inputs?: ({ type: \"string\"; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"number\"; name: string; description?: string | undefined; default?: number | undefined; required?: boolean | undefined; } | { type: \"boolean\"; name: string; description?: string | undefined; default?: boolean | undefined; required?: boolean | undefined; } | { type: \"choice\"; options: string[]; name: string; description?: string | undefined; default?: string | undefined; required?: boolean | undefined; } | { type: \"array\"; name: string; description?: string | undefined; default?: string[] | boolean[] | number[] | undefined; required?: boolean | undefined; minItems?: number | undefined; maxItems?: number | undefined; })[] | undefined; consts?: Record<string, string | number | boolean | any[] | Record<string, any> | {}> | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "@kbn/workflows",
        "id": "def-common.WorkflowSettingsSchema",
        "type": "Object",
        "tags": [],
        "label": "WorkflowSettingsSchema",
        "description": [],
        "signature": [
          "ZodObject",
          "<{ 'on-failure': ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ retry: ",
          "ZodOptional",
          "<",
          "ZodObject",
          "<{ 'max-attempts': ",
          "ZodNumber",
          "; delay: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { 'max-attempts': number; delay?: string | undefined; }, { 'max-attempts': number; delay?: string | undefined; }>>; fallback: ",
          "ZodOptional",
          "<",
          "ZodArray",
          "<",
          "ZodObject",
          "<{ name: ",
          "ZodString",
          "; type: ",
          "ZodString",
          "; }, \"strip\", ",
          "ZodTypeAny",
          ", { type: string; name: string; }, { type: string; name: string; }>, \"many\">>; continue: ",
          "ZodOptional",
          "<",
          "ZodBoolean",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }, { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; }>>; timezone: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; timeout: ",
          "ZodOptional",
          "<",
          "ZodString",
          ">; }, \"strip\", ",
          "ZodTypeAny",
          ", { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }, { timezone?: string | undefined; timeout?: string | undefined; 'on-failure'?: { retry?: { 'max-attempts': number; delay?: string | undefined; } | undefined; continue?: boolean | undefined; fallback?: { type: string; name: string; }[] | undefined; } | undefined; }>"
        ],
        "path": "src/platform/packages/shared/kbn-workflows/spec/schema.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ]
  }
}