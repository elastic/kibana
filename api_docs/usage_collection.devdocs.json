{
  "id": "usageCollection",
  "client": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "usageCollection",
        "id": "def-public.TrackApplicationView",
        "type": "Function",
        "tags": [
          "constructor"
        ],
        "label": "TrackApplicationView",
        "description": [
          "\nReact component to track the number of clicks and minutes on screen of the children components."
        ],
        "signature": [
          "(props: React.PropsWithChildren<",
          {
            "pluginId": "usageCollection",
            "scope": "public",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-public.TrackApplicationViewProps",
            "text": "TrackApplicationViewProps"
          },
          ">) => JSX.Element"
        ],
        "path": "src/plugins/usage_collection/public/components/track_application_view/track_application_view.tsx",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "usageCollection",
            "id": "def-public.TrackApplicationView.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "props",
            "description": [
              "{@link TrackApplicationViewProps }"
            ],
            "signature": [
              "React.PropsWithChildren<",
              {
                "pluginId": "usageCollection",
                "scope": "public",
                "docId": "kibUsageCollectionPluginApi",
                "section": "def-public.TrackApplicationViewProps",
                "text": "TrackApplicationViewProps"
              },
              ">"
            ],
            "path": "src/plugins/usage_collection/public/components/track_application_view/track_application_view.tsx",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "usageCollection",
        "id": "def-public.TrackApplicationViewProps",
        "type": "Interface",
        "tags": [],
        "label": "TrackApplicationViewProps",
        "description": [
          "\nProps to provide to the {@link TrackApplicationView} component."
        ],
        "path": "src/plugins/usage_collection/public/components/track_application_view/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "usageCollection",
            "id": "def-public.TrackApplicationViewProps.viewId",
            "type": "string",
            "tags": [],
            "label": "viewId",
            "description": [
              "\nThe name of the view to be tracked. The appId will be obtained automatically."
            ],
            "path": "src/plugins/usage_collection/public/components/track_application_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "usageCollection",
            "id": "def-public.TrackApplicationViewProps.children",
            "type": "CompoundType",
            "tags": [],
            "label": "children",
            "description": [
              "\nThe React component to be tracked."
            ],
            "signature": [
              "boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined"
            ],
            "path": "src/plugins/usage_collection/public/components/track_application_view/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [],
    "objects": [],
    "setup": {
      "parentPluginId": "usageCollection",
      "id": "def-public.UsageCollectionSetup",
      "type": "Interface",
      "tags": [],
      "label": "UsageCollectionSetup",
      "description": [
        "Public's setup APIs exposed by the UsageCollection Service"
      ],
      "path": "src/plugins/usage_collection/public/plugin.tsx",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "usageCollection",
          "id": "def-public.UsageCollectionSetup.components",
          "type": "Object",
          "tags": [],
          "label": "components",
          "description": [
            "Component helpers to track usage collection in the UI"
          ],
          "signature": [
            "{ ApplicationUsageTrackingProvider: React.FC<{}>; }"
          ],
          "path": "src/plugins/usage_collection/public/plugin.tsx",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "usageCollection",
          "id": "def-public.UsageCollectionSetup.reportUiCounter",
          "type": "Function",
          "tags": [],
          "label": "reportUiCounter",
          "description": [
            "Report whenever a UI event occurs for UI counters to report it"
          ],
          "signature": [
            "(appName: string, type: string, eventNames: string | string[], count?: number | undefined) => void"
          ],
          "path": "src/plugins/usage_collection/public/plugin.tsx",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "usageCollection",
              "id": "def-public.UsageCollectionSetup.reportUiCounter.$1",
              "type": "string",
              "tags": [],
              "label": "appName",
              "description": [],
              "signature": [
                "string"
              ],
              "path": "src/plugins/usage_collection/public/plugin.tsx",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            },
            {
              "parentPluginId": "usageCollection",
              "id": "def-public.UsageCollectionSetup.reportUiCounter.$2",
              "type": "string",
              "tags": [],
              "label": "type",
              "description": [],
              "signature": [
                "string"
              ],
              "path": "src/plugins/usage_collection/public/plugin.tsx",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            },
            {
              "parentPluginId": "usageCollection",
              "id": "def-public.UsageCollectionSetup.reportUiCounter.$3",
              "type": "CompoundType",
              "tags": [],
              "label": "eventNames",
              "description": [],
              "signature": [
                "string | string[]"
              ],
              "path": "src/plugins/usage_collection/public/plugin.tsx",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            },
            {
              "parentPluginId": "usageCollection",
              "id": "def-public.UsageCollectionSetup.reportUiCounter.$4",
              "type": "number",
              "tags": [],
              "label": "count",
              "description": [],
              "signature": [
                "number | undefined"
              ],
              "path": "src/plugins/usage_collection/public/plugin.tsx",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": false
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "usageCollection",
      "id": "def-public.UsageCollectionStart",
      "type": "Interface",
      "tags": [],
      "label": "UsageCollectionStart",
      "description": [
        "Public's start APIs exposed by the UsageCollection Service"
      ],
      "path": "src/plugins/usage_collection/public/plugin.tsx",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "usageCollection",
          "id": "def-public.UsageCollectionStart.reportUiCounter",
          "type": "Function",
          "tags": [],
          "label": "reportUiCounter",
          "description": [
            "Report whenever a UI event occurs for UI counters to report it"
          ],
          "signature": [
            "(appName: string, type: string, eventNames: string | string[], count?: number | undefined) => void"
          ],
          "path": "src/plugins/usage_collection/public/plugin.tsx",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "usageCollection",
              "id": "def-public.UsageCollectionStart.reportUiCounter.$1",
              "type": "string",
              "tags": [],
              "label": "appName",
              "description": [],
              "signature": [
                "string"
              ],
              "path": "src/plugins/usage_collection/public/plugin.tsx",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            },
            {
              "parentPluginId": "usageCollection",
              "id": "def-public.UsageCollectionStart.reportUiCounter.$2",
              "type": "string",
              "tags": [],
              "label": "type",
              "description": [],
              "signature": [
                "string"
              ],
              "path": "src/plugins/usage_collection/public/plugin.tsx",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            },
            {
              "parentPluginId": "usageCollection",
              "id": "def-public.UsageCollectionStart.reportUiCounter.$3",
              "type": "CompoundType",
              "tags": [],
              "label": "eventNames",
              "description": [],
              "signature": [
                "string | string[]"
              ],
              "path": "src/plugins/usage_collection/public/plugin.tsx",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            },
            {
              "parentPluginId": "usageCollection",
              "id": "def-public.UsageCollectionStart.reportUiCounter.$4",
              "type": "number",
              "tags": [],
              "label": "count",
              "description": [],
              "signature": [
                "number | undefined"
              ],
              "path": "src/plugins/usage_collection/public/plugin.tsx",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": false
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "server": {
    "classes": [],
    "functions": [],
    "interfaces": [
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.CollectorFetchContext",
        "type": "Interface",
        "tags": [],
        "label": "CollectorFetchContext",
        "description": [
          "\nThe context for the `fetch` method: It includes the most commonly used clients in the collectors (ES and SO clients).\nBoth are scoped based on the request and the context:\n- When users are requesting a sample of data, it is scoped to their role to avoid exposing data they shouldn't read\n- When building the telemetry data payload to report to the remote cluster, the requests are scoped to the `kibana` internal user\n"
        ],
        "path": "src/plugins/usage_collection/server/collector/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.CollectorFetchContext.esClient",
            "type": "Object",
            "tags": [],
            "label": "esClient",
            "description": [
              "\nRequest-scoped Elasticsearch client"
            ],
            "signature": [
              "{ name: string | symbol; get: { <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetRequest",
              " | ",
              "GetRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetResponse",
              "<TDocument>>; }; delete: { (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteRequest",
              " | ",
              "DeleteRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; cluster: ",
              "default",
              "; eql: ",
              "default",
              "; search: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params?: ",
              "SearchRequest",
              " | ",
              "SearchRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchResponse",
              "<TDocument, TAggregations>>; }; create: { <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "CreateRequest",
              "<TDocument> | ",
              "CreateRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; monitoring: ",
              "default",
              "; security: ",
              "default",
              "; index: { <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "WriteResponseBase",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "IndexRequest",
              "<TDocument> | ",
              "IndexRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "WriteResponseBase",
              ">; }; update: { <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateResponse",
              "<TDocumentR>, unknown>>; <TDocument = unknown, TPartialDocument = unknown, TDocumentR = unknown>(this: That, params: ",
              "UpdateRequest",
              "<TDocument, TPartialDocument> | ",
              "UpdateRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateResponse",
              "<TDocumentR>>; }; [kInternal]: symbol | null; [kAsyncSearch]: symbol | null; [kAutoscaling]: symbol | null; [kCat]: symbol | null; [kCcr]: symbol | null; [kCluster]: symbol | null; [kDanglingIndices]: symbol | null; [kEnrich]: symbol | null; [kEql]: symbol | null; [kFeatures]: symbol | null; [kFleet]: symbol | null; [kGraph]: symbol | null; [kIlm]: symbol | null; [kIndices]: symbol | null; [kIngest]: symbol | null; [kLicense]: symbol | null; [kLogstash]: symbol | null; [kMigration]: symbol | null; [kMl]: symbol | null; [kMonitoring]: symbol | null; [kNodes]: symbol | null; [kRollup]: symbol | null; [kSearchableSnapshots]: symbol | null; [kSecurity]: symbol | null; [kShutdown]: symbol | null; [kSlm]: symbol | null; [kSnapshot]: symbol | null; [kSql]: symbol | null; [kSsl]: symbol | null; [kTasks]: symbol | null; [kTextStructure]: symbol | null; [kTransform]: symbol | null; [kWatcher]: symbol | null; [kXpack]: symbol | null; transport: ",
              "default",
              "; helpers: ",
              "default",
              "; child: (opts: ",
              "ClientOptions",
              ") => ",
              "default",
              "; Internal: ",
              "default",
              "; asyncSearch: ",
              "default",
              "; autoscaling: ",
              "default",
              "; bulk: { <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "BulkResponse",
              ">; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown>>; <TDocument = unknown, TPartialDocument = unknown>(this: That, params: ",
              "BulkRequest",
              "<TDocument, TPartialDocument> | ",
              "BulkRequest",
              "<TDocument, TPartialDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "BulkResponse",
              ">; }; cat: ",
              "default",
              "; ccr: ",
              "default",
              "; clearScroll: { (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClearScrollResponse",
              ", unknown>>; (this: That, params?: ",
              "ClearScrollRequest",
              " | ",
              "ClearScrollRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClearScrollResponse",
              ">; }; closePointInTime: { (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ClosePointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "ClosePointInTimeRequest",
              " | ",
              "ClosePointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ClosePointInTimeResponse",
              ">; }; count: { (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "CountResponse",
              ">; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "CountResponse",
              ", unknown>>; (this: That, params?: ",
              "CountRequest",
              " | ",
              "CountRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "CountResponse",
              ">; }; danglingIndices: ",
              "default",
              "; deleteByQuery: { (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "DeleteByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRequest",
              " | ",
              "DeleteByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "DeleteByQueryResponse",
              ">; }; deleteByQueryRethrottle: { (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TasksTaskListResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteByQueryRethrottleRequest",
              " | ",
              "DeleteByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TasksTaskListResponseBase",
              ">; }; deleteScript: { (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "DeleteScriptRequest",
              " | ",
              "DeleteScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; enrich: ",
              "default",
              "; exists: { (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsRequest",
              " | ",
              "ExistsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; existsSource: { (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params: ",
              "ExistsSourceRequest",
              " | ",
              "ExistsSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; explain: { <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ExplainResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "ExplainRequest",
              " | ",
              "ExplainRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ExplainResponse",
              "<TDocument>>; }; features: ",
              "default",
              "; fieldCaps: { (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "FieldCapsResponse",
              ", unknown>>; (this: That, params: ",
              "FieldCapsRequest",
              " | ",
              "FieldCapsRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "FieldCapsResponse",
              ">; }; fleet: ",
              "default",
              "; getScript: { (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptResponse",
              ", unknown>>; (this: That, params: ",
              "GetScriptRequest",
              " | ",
              "GetScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptResponse",
              ">; }; getScriptContext: { (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptContextResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptContextRequest",
              " | ",
              "GetScriptContextRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptContextResponse",
              ">; }; getScriptLanguages: { (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "GetScriptLanguagesResponse",
              ", unknown>>; (this: That, params?: ",
              "GetScriptLanguagesRequest",
              " | ",
              "GetScriptLanguagesRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "GetScriptLanguagesResponse",
              ">; }; getSource: { <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<TDocument>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<TDocument, unknown>>; <TDocument = unknown>(this: That, params: ",
              "GetSourceRequest",
              " | ",
              "GetSourceRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<TDocument>; }; graph: ",
              "default",
              "; ilm: ",
              "default",
              "; indices: ",
              "default",
              "; info: { (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "InfoResponse",
              ">; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "InfoResponse",
              ", unknown>>; (this: That, params?: ",
              "InfoRequest",
              " | ",
              "InfoRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "InfoResponse",
              ">; }; ingest: ",
              "default",
              "; knnSearch: { <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "KnnSearchResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params: ",
              "KnnSearchRequest",
              " | ",
              "KnnSearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "KnnSearchResponse",
              "<TDocument>>; }; license: ",
              "default",
              "; logstash: ",
              "default",
              "; mget: { <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MgetResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "MgetRequest",
              " | ",
              "MgetRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MgetResponse",
              "<TDocument>>; }; migration: ",
              "default",
              "; ml: ",
              "default",
              "; msearch: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchRequest",
              " | ",
              "MsearchRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchResponse",
              "<TDocument, TAggregations>>; }; msearchTemplate: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "MsearchTemplateRequest",
              " | ",
              "MsearchTemplateRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MsearchTemplateResponse",
              "<TDocument, TAggregations>>; }; mtermvectors: { (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "MtermvectorsResponse",
              ", unknown>>; (this: That, params?: ",
              "MtermvectorsRequest",
              " | ",
              "MtermvectorsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "MtermvectorsResponse",
              ">; }; nodes: ",
              "default",
              "; openPointInTime: { (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "OpenPointInTimeResponse",
              ", unknown>>; (this: That, params: ",
              "OpenPointInTimeRequest",
              " | ",
              "OpenPointInTimeRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "OpenPointInTimeResponse",
              ">; }; ping: { (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<boolean>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<boolean, unknown>>; (this: That, params?: ",
              "PingRequest",
              " | ",
              "PingRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<boolean>; }; putScript: { (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "AcknowledgedResponseBase",
              ", unknown>>; (this: That, params: ",
              "PutScriptRequest",
              " | ",
              "PutScriptRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "AcknowledgedResponseBase",
              ">; }; rankEval: { (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RankEvalResponse",
              ", unknown>>; (this: That, params: ",
              "RankEvalRequest",
              " | ",
              "RankEvalRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RankEvalResponse",
              ">; }; reindex: { (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRequest",
              " | ",
              "ReindexRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexResponse",
              ">; }; reindexRethrottle: { (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ReindexRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "ReindexRethrottleRequest",
              " | ",
              "ReindexRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ReindexRethrottleResponse",
              ">; }; renderSearchTemplate: { (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "RenderSearchTemplateResponse",
              ", unknown>>; (this: That, params?: ",
              "RenderSearchTemplateRequest",
              " | ",
              "RenderSearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "RenderSearchTemplateResponse",
              ">; }; rollup: ",
              "default",
              "; scriptsPainlessExecute: { <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>, unknown>>; <TResult = unknown>(this: That, params?: ",
              "ScriptsPainlessExecuteRequest",
              " | ",
              "ScriptsPainlessExecuteRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScriptsPainlessExecuteResponse",
              "<TResult>>; }; scroll: { <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "ScrollResponse",
              "<TDocument, TAggregations>, unknown>>; <TDocument = unknown, TAggregations = Record<string, ",
              "AggregationsAggregate",
              ">>(this: That, params: ",
              "ScrollRequest",
              " | ",
              "ScrollRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "ScrollResponse",
              "<TDocument, TAggregations>>; }; searchMvt: { (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<ArrayBuffer>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<ArrayBuffer, unknown>>; (this: That, params: ",
              "SearchMvtRequest",
              " | ",
              "SearchMvtRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<ArrayBuffer>; }; searchShards: { (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchShardsResponse",
              ", unknown>>; (this: That, params?: ",
              "SearchShardsRequest",
              " | ",
              "SearchShardsRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchShardsResponse",
              ">; }; searchTemplate: { <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "SearchTemplateResponse",
              "<TDocument>, unknown>>; <TDocument = unknown>(this: That, params?: ",
              "SearchTemplateRequest",
              " | ",
              "SearchTemplateRequest",
              " | undefined, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "SearchTemplateResponse",
              "<TDocument>>; }; searchableSnapshots: ",
              "default",
              "; shutdown: ",
              "default",
              "; slm: ",
              "default",
              "; snapshot: ",
              "default",
              "; sql: ",
              "default",
              "; ssl: ",
              "default",
              "; tasks: ",
              "default",
              "; termsEnum: { (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermsEnumResponse",
              ", unknown>>; (this: That, params: ",
              "TermsEnumRequest",
              " | ",
              "TermsEnumRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermsEnumResponse",
              ">; }; termvectors: { <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "TermvectorsResponse",
              ", unknown>>; <TDocument = unknown>(this: That, params: ",
              "TermvectorsRequest",
              "<TDocument> | ",
              "TermvectorsRequest",
              "<TDocument>, options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "TermvectorsResponse",
              ">; }; textStructure: ",
              "default",
              "; transform: ",
              "default",
              "; updateByQuery: { (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRequest",
              " | ",
              "UpdateByQueryRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryResponse",
              ">; }; updateByQueryRethrottle: { (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithOutMeta",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptionsWithMeta",
              " | undefined): Promise<",
              "TransportResult",
              "<",
              "UpdateByQueryRethrottleResponse",
              ", unknown>>; (this: That, params: ",
              "UpdateByQueryRethrottleRequest",
              " | ",
              "UpdateByQueryRethrottleRequest",
              ", options?: ",
              "TransportRequestOptions",
              " | undefined): Promise<",
              "UpdateByQueryRethrottleResponse",
              ">; }; watcher: ",
              "default",
              "; xpack: ",
              "default",
              "; }"
            ],
            "path": "src/plugins/usage_collection/server/collector/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.CollectorFetchContext.soClient",
            "type": "Object",
            "tags": [],
            "label": "soClient",
            "description": [
              "\nRequest-scoped Saved Objects client"
            ],
            "signature": [
              "SavedObjectsClientContract"
            ],
            "path": "src/plugins/usage_collection/server/collector/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.ICollector",
        "type": "Interface",
        "tags": [],
        "label": "ICollector",
        "description": [
          "\nCommon interface for Usage and Stats Collectors"
        ],
        "signature": [
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.ICollector",
            "text": "ICollector"
          },
          "<TFetchReturn, ExtraOptions>"
        ],
        "path": "src/plugins/usage_collection/server/collector/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.ICollector.log",
            "type": "Object",
            "tags": [],
            "label": "log",
            "description": [
              "Logger"
            ],
            "signature": [
              "Logger"
            ],
            "path": "src/plugins/usage_collection/server/collector/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.ICollector.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [
              "The registered type (aka name) of the collector"
            ],
            "path": "src/plugins/usage_collection/server/collector/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.ICollector.fetch",
            "type": "Function",
            "tags": [],
            "label": "fetch",
            "description": [
              "\nThe actual logic that reports the Usage collection.\nIt will be called on every collection request.\nWhatever is returned in this method will be passed through as-is under\nthe {@link ICollector.type} key.\n"
            ],
            "signature": [
              "(this: ",
              {
                "pluginId": "usageCollection",
                "scope": "server",
                "docId": "kibUsageCollectionPluginApi",
                "section": "def-server.ICollector",
                "text": "ICollector"
              },
              "<TFetchReturn, {}> & ExtraOptions, context: ",
              {
                "pluginId": "usageCollection",
                "scope": "server",
                "docId": "kibUsageCollectionPluginApi",
                "section": "def-server.CollectorFetchContext",
                "text": "CollectorFetchContext"
              },
              ") => TFetchReturn | Promise<TFetchReturn>"
            ],
            "path": "src/plugins/usage_collection/server/collector/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "usageCollection",
                "id": "def-server.ICollector.fetch.$1",
                "type": "Object",
                "tags": [],
                "label": "context",
                "description": [],
                "signature": [
                  {
                    "pluginId": "usageCollection",
                    "scope": "server",
                    "docId": "kibUsageCollectionPluginApi",
                    "section": "def-server.CollectorFetchContext",
                    "text": "CollectorFetchContext"
                  }
                ],
                "path": "src/plugins/usage_collection/server/collector/types.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.ICollector.isReady",
            "type": "Function",
            "tags": [],
            "label": "isReady",
            "description": [
              "\nShould return `true` when it's safe to call the `fetch` method."
            ],
            "signature": [
              "() => boolean | Promise<boolean>"
            ],
            "path": "src/plugins/usage_collection/server/collector/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.IncrementCounterParams",
        "type": "Interface",
        "tags": [],
        "label": "IncrementCounterParams",
        "description": [
          "\nDetails about the counter to be incremented"
        ],
        "path": "src/plugins/usage_collection/server/usage_counters/usage_counter.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.IncrementCounterParams.counterName",
            "type": "string",
            "tags": [],
            "label": "counterName",
            "description": [
              "The name of the counter"
            ],
            "path": "src/plugins/usage_collection/server/usage_counters/usage_counter.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.IncrementCounterParams.counterType",
            "type": "string",
            "tags": [],
            "label": "counterType",
            "description": [
              "The counter type (\"count\" by default)"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "src/plugins/usage_collection/server/usage_counters/usage_counter.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.IncrementCounterParams.incrementBy",
            "type": "number",
            "tags": [],
            "label": "incrementBy",
            "description": [
              "Increment the counter by this number (1 if not specified)"
            ],
            "signature": [
              "number | undefined"
            ],
            "path": "src/plugins/usage_collection/server/usage_counters/usage_counter.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.IUsageCounter",
        "type": "Interface",
        "tags": [],
        "label": "IUsageCounter",
        "description": [
          "\nUsage Counter allows to keep track of any events that occur.\nBy calling {@link IUsageCounter.incrementCounter} devs can notify this\nAPI whenever the event happens."
        ],
        "path": "src/plugins/usage_collection/server/usage_counters/usage_counter.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.IUsageCounter.incrementCounter",
            "type": "Function",
            "tags": [],
            "label": "incrementCounter",
            "description": [
              "\nNotifies the counter about a new event happening so it can increase the count internally."
            ],
            "signature": [
              "(params: ",
              {
                "pluginId": "usageCollection",
                "scope": "server",
                "docId": "kibUsageCollectionPluginApi",
                "section": "def-server.IncrementCounterParams",
                "text": "IncrementCounterParams"
              },
              ") => void"
            ],
            "path": "src/plugins/usage_collection/server/usage_counters/usage_counter.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "usageCollection",
                "id": "def-server.IUsageCounter.incrementCounter.$1",
                "type": "Object",
                "tags": [],
                "label": "params",
                "description": [
                  "{@link IncrementCounterParams }"
                ],
                "signature": [
                  {
                    "pluginId": "usageCollection",
                    "scope": "server",
                    "docId": "kibUsageCollectionPluginApi",
                    "section": "def-server.IncrementCounterParams",
                    "text": "IncrementCounterParams"
                  }
                ],
                "path": "src/plugins/usage_collection/server/usage_counters/usage_counter.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.UsageCountersSavedObjectAttributes",
        "type": "Interface",
        "tags": [],
        "label": "UsageCountersSavedObjectAttributes",
        "description": [
          "\nThe attributes stored in the UsageCounters' SavedObjects"
        ],
        "path": "src/plugins/usage_collection/server/usage_counters/saved_objects.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.UsageCountersSavedObjectAttributes.domainId",
            "type": "string",
            "tags": [],
            "label": "domainId",
            "description": [
              "The domain ID registered in the Usage Counter"
            ],
            "path": "src/plugins/usage_collection/server/usage_counters/saved_objects.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.UsageCountersSavedObjectAttributes.counterName",
            "type": "string",
            "tags": [],
            "label": "counterName",
            "description": [
              "The counter name"
            ],
            "path": "src/plugins/usage_collection/server/usage_counters/saved_objects.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.UsageCountersSavedObjectAttributes.counterType",
            "type": "string",
            "tags": [],
            "label": "counterType",
            "description": [
              "The counter type"
            ],
            "path": "src/plugins/usage_collection/server/usage_counters/saved_objects.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.UsageCountersSavedObjectAttributes.count",
            "type": "number",
            "tags": [],
            "label": "count",
            "description": [
              "Number of times the event has occurred"
            ],
            "path": "src/plugins/usage_collection/server/usage_counters/saved_objects.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.AllowedSchemaTypes",
        "type": "Type",
        "tags": [],
        "label": "AllowedSchemaTypes",
        "description": [
          "\nPossible type values in the schema"
        ],
        "signature": [
          "\"boolean\" | \"date\" | \"keyword\" | \"text\" | \"long\" | \"double\" | \"short\" | \"float\" | \"integer\" | \"byte\""
        ],
        "path": "node_modules/@types/kbn__analytics-client/index.d.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.CollectorFetchMethod",
        "type": "Type",
        "tags": [],
        "label": "CollectorFetchMethod",
        "description": [
          "\nThe fetch method has the context of the Collector itself\n(this has access to all the properties of the collector like the logger)\nand the the first parameter is {@link CollectorFetchContext}."
        ],
        "signature": [
          "(this: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.ICollector",
            "text": "ICollector"
          },
          "<TReturn, {}> & ExtraOptions, context: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.CollectorFetchContext",
            "text": "CollectorFetchContext"
          },
          ") => TReturn | Promise<TReturn>"
        ],
        "path": "src/plugins/usage_collection/server/collector/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "usageCollection",
            "id": "def-server.CollectorFetchMethod.$1",
            "type": "Object",
            "tags": [],
            "label": "context",
            "description": [],
            "signature": [
              {
                "pluginId": "usageCollection",
                "scope": "server",
                "docId": "kibUsageCollectionPluginApi",
                "section": "def-server.CollectorFetchContext",
                "text": "CollectorFetchContext"
              }
            ],
            "path": "src/plugins/usage_collection/server/collector/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.CollectorOptions",
        "type": "Type",
        "tags": [],
        "label": "CollectorOptions",
        "description": [
          "\nOptions to instantiate a collector"
        ],
        "signature": [
          "{ type: string; isReady: () => boolean | Promise<boolean>; schema?: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.MakeSchemaFrom",
            "text": "MakeSchemaFrom"
          },
          "<TFetchReturn> | undefined; fetch: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.CollectorFetchMethod",
            "text": "CollectorFetchMethod"
          },
          "<TFetchReturn, ExtraOptions>; } & ExtraOptions"
        ],
        "path": "src/plugins/usage_collection/server/collector/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.MakeSchemaFrom",
        "type": "Type",
        "tags": [],
        "label": "MakeSchemaFrom",
        "description": [
          "\nThe `schema` property in {@link CollectorOptions} must match the output of\nthe `fetch` method. This type helps ensure that is correct"
        ],
        "signature": [
          "{ [Key in keyof Required<Base>]: Required<Base>[Key] extends (infer U)[] ? { type: \"array\"; items: ",
          "RecursiveMakeSchemaFrom",
          "<U>; } : ",
          "RecursiveMakeSchemaFrom",
          "<Required<Base>[Key]>; }"
        ],
        "path": "src/plugins/usage_collection/server/collector/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.USAGE_COUNTERS_SAVED_OBJECT_TYPE",
        "type": "string",
        "tags": [],
        "label": "USAGE_COUNTERS_SAVED_OBJECT_TYPE",
        "description": [
          "The Saved Objects type for Usage Counters"
        ],
        "signature": [
          "\"usage-counters\""
        ],
        "path": "src/plugins/usage_collection/server/usage_counters/saved_objects.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.UsageCollectorOptions",
        "type": "Type",
        "tags": [],
        "label": "UsageCollectorOptions",
        "description": [
          "\nSame as {@link CollectorOptions} but with the `schema` property enforced"
        ],
        "signature": [
          "{ type: string; isReady: () => boolean | Promise<boolean>; schema?: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.MakeSchemaFrom",
            "text": "MakeSchemaFrom"
          },
          "<TFetchReturn> | undefined; fetch: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.CollectorFetchMethod",
            "text": "CollectorFetchMethod"
          },
          "<TFetchReturn, ExtraOptions>; } & ExtraOptions & Required<Pick<{ type: string; isReady: () => boolean | Promise<boolean>; schema?: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.MakeSchemaFrom",
            "text": "MakeSchemaFrom"
          },
          "<TFetchReturn> | undefined; fetch: ",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.CollectorFetchMethod",
            "text": "CollectorFetchMethod"
          },
          "<TFetchReturn, {}>; }, \"schema\">>"
        ],
        "path": "src/plugins/usage_collection/server/collector/usage_collector.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "usageCollection",
        "id": "def-server.UsageCountersSavedObject",
        "type": "Type",
        "tags": [],
        "label": "UsageCountersSavedObject",
        "description": [
          "\nThe structure of the SavedObjects of type \"usage-counters\""
        ],
        "signature": [
          "SavedObject",
          "<",
          {
            "pluginId": "usageCollection",
            "scope": "server",
            "docId": "kibUsageCollectionPluginApi",
            "section": "def-server.UsageCountersSavedObjectAttributes",
            "text": "UsageCountersSavedObjectAttributes"
          },
          ">"
        ],
        "path": "src/plugins/usage_collection/server/usage_counters/saved_objects.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [],
    "setup": {
      "parentPluginId": "usageCollection",
      "id": "def-server.UsageCollectionSetup",
      "type": "Interface",
      "tags": [],
      "label": "UsageCollectionSetup",
      "description": [
        "Server's setup APIs exposed by the UsageCollection Service"
      ],
      "path": "src/plugins/usage_collection/server/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "usageCollection",
          "id": "def-server.UsageCollectionSetup.createUsageCounter",
          "type": "Function",
          "tags": [],
          "label": "createUsageCounter",
          "description": [
            "\nCreates and registers a usage counter to collect daily aggregated plugin counter events"
          ],
          "signature": [
            "(type: string) => ",
            {
              "pluginId": "usageCollection",
              "scope": "server",
              "docId": "kibUsageCollectionPluginApi",
              "section": "def-server.IUsageCounter",
              "text": "IUsageCounter"
            }
          ],
          "path": "src/plugins/usage_collection/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "usageCollection",
              "id": "def-server.UsageCollectionSetup.createUsageCounter.$1",
              "type": "string",
              "tags": [],
              "label": "type",
              "description": [],
              "signature": [
                "string"
              ],
              "path": "src/plugins/usage_collection/server/plugin.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        },
        {
          "parentPluginId": "usageCollection",
          "id": "def-server.UsageCollectionSetup.getUsageCounterByType",
          "type": "Function",
          "tags": [],
          "label": "getUsageCounterByType",
          "description": [
            "\nReturns a usage counter by type"
          ],
          "signature": [
            "(type: string) => ",
            {
              "pluginId": "usageCollection",
              "scope": "server",
              "docId": "kibUsageCollectionPluginApi",
              "section": "def-server.IUsageCounter",
              "text": "IUsageCounter"
            },
            " | undefined"
          ],
          "path": "src/plugins/usage_collection/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "usageCollection",
              "id": "def-server.UsageCollectionSetup.getUsageCounterByType.$1",
              "type": "string",
              "tags": [],
              "label": "type",
              "description": [],
              "signature": [
                "string"
              ],
              "path": "src/plugins/usage_collection/server/plugin.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        },
        {
          "parentPluginId": "usageCollection",
          "id": "def-server.UsageCollectionSetup.makeUsageCollector",
          "type": "Function",
          "tags": [],
          "label": "makeUsageCollector",
          "description": [
            "\nCreates a usage collector to collect plugin telemetry data.\nregisterCollector must be called to connect the created collector with the service."
          ],
          "signature": [
            "<TFetchReturn, ExtraOptions extends object = {}>(options: ",
            {
              "pluginId": "usageCollection",
              "scope": "server",
              "docId": "kibUsageCollectionPluginApi",
              "section": "def-server.UsageCollectorOptions",
              "text": "UsageCollectorOptions"
            },
            "<TFetchReturn, ExtraOptions>) => ",
            {
              "pluginId": "usageCollection",
              "scope": "server",
              "docId": "kibUsageCollectionPluginApi",
              "section": "def-server.ICollector",
              "text": "ICollector"
            },
            "<TFetchReturn, ExtraOptions>"
          ],
          "path": "src/plugins/usage_collection/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "usageCollection",
              "id": "def-server.UsageCollectionSetup.makeUsageCollector.$1",
              "type": "CompoundType",
              "tags": [],
              "label": "options",
              "description": [],
              "signature": [
                {
                  "pluginId": "usageCollection",
                  "scope": "server",
                  "docId": "kibUsageCollectionPluginApi",
                  "section": "def-server.UsageCollectorOptions",
                  "text": "UsageCollectorOptions"
                },
                "<TFetchReturn, ExtraOptions>"
              ],
              "path": "src/plugins/usage_collection/server/plugin.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        },
        {
          "parentPluginId": "usageCollection",
          "id": "def-server.UsageCollectionSetup.registerCollector",
          "type": "Function",
          "tags": [],
          "label": "registerCollector",
          "description": [
            "\nRegister a usage collector or a stats collector.\nUsed to connect the created collector to telemetry."
          ],
          "signature": [
            "<TFetchReturn, ExtraOptions extends object>(collector: ",
            {
              "pluginId": "usageCollection",
              "scope": "server",
              "docId": "kibUsageCollectionPluginApi",
              "section": "def-server.ICollector",
              "text": "ICollector"
            },
            "<TFetchReturn, ExtraOptions>) => void"
          ],
          "path": "src/plugins/usage_collection/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "usageCollection",
              "id": "def-server.UsageCollectionSetup.registerCollector.$1",
              "type": "Object",
              "tags": [],
              "label": "collector",
              "description": [],
              "signature": [
                {
                  "pluginId": "usageCollection",
                  "scope": "server",
                  "docId": "kibUsageCollectionPluginApi",
                  "section": "def-server.ICollector",
                  "text": "ICollector"
                },
                "<TFetchReturn, ExtraOptions>"
              ],
              "path": "src/plugins/usage_collection/server/plugin.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        },
        {
          "parentPluginId": "usageCollection",
          "id": "def-server.UsageCollectionSetup.getCollectorByType",
          "type": "Function",
          "tags": [],
          "label": "getCollectorByType",
          "description": [
            "\nReturns a usage collector by type"
          ],
          "signature": [
            "<TFetchReturn, ExtraOptions extends object>(type: string) => ",
            {
              "pluginId": "usageCollection",
              "scope": "server",
              "docId": "kibUsageCollectionPluginApi",
              "section": "def-server.ICollector",
              "text": "ICollector"
            },
            "<TFetchReturn, ExtraOptions> | undefined"
          ],
          "path": "src/plugins/usage_collection/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "usageCollection",
              "id": "def-server.UsageCollectionSetup.getCollectorByType.$1",
              "type": "string",
              "tags": [],
              "label": "type",
              "description": [],
              "signature": [
                "string"
              ],
              "path": "src/plugins/usage_collection/server/plugin.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  }
}