{
  "id": "ruleRegistry",
  "client": {
    "classes": [],
    "functions": [],
    "interfaces": [],
    "enums": [],
    "misc": [],
    "objects": []
  },
  "server": {
    "classes": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.AlertsClient",
        "type": "Class",
        "tags": [],
        "label": "AlertsClient",
        "description": [
          "\nProvides apis to interact with alerts as data\nensures the request is authorized to perform read / write actions\non alerts as data."
        ],
        "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "ConstructorOptions"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.ensureAllAlertsAuthorizedRead",
            "type": "Function",
            "tags": [],
            "label": "ensureAllAlertsAuthorizedRead",
            "description": [],
            "signature": [
              "({ alerts }: { alerts: MgetAndAuditAlert[]; }) => Promise<void>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.ensureAllAlertsAuthorizedRead.$1",
                "type": "Object",
                "tags": [],
                "label": "{ alerts }",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.ensureAllAlertsAuthorizedRead.$1.alerts",
                    "type": "Array",
                    "tags": [],
                    "label": "alerts",
                    "description": [],
                    "signature": [
                      "MgetAndAuditAlert[]"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.get",
            "type": "Function",
            "tags": [],
            "label": "get",
            "description": [],
            "signature": [
              "({ id, index }: GetAlertParams) => Promise<OutputOf<SetOptional<{ readonly \"event.action\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.docs_count\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.field\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.value\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"event.kind\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"@timestamp\": { readonly type: \"date\"; readonly required: true; readonly array: false; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.execution.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.case_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.flapping\": { readonly type: \"boolean\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.flapping_history\": { readonly type: \"boolean\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.last_detected\": { readonly type: \"date\"; readonly required: false; readonly array: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.parameters\": { readonly array: false; readonly type: \"flattened\"; readonly ignore_above: 4096; readonly required: false; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.time_range\": { readonly type: \"date_range\"; readonly format: \"epoch_millis||strict_date_optional_time\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; }>> | undefined>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.get.$1",
                "type": "Object",
                "tags": [],
                "label": "{ id, index }",
                "description": [],
                "signature": [
                  "GetAlertParams"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.getAlertSummary",
            "type": "Function",
            "tags": [],
            "label": "getAlertSummary",
            "description": [],
            "signature": [
              "({ gte, lte, featureIds, filter, fixedInterval, }: GetAlertSummaryParams) => Promise<{ activeAlertCount: number; recoveredAlertCount: number; activeAlerts: ",
              "AggregationsBuckets",
              "<",
              "AggregationsDateHistogramBucket",
              ">; recoveredAlerts: ",
              "AggregationsBuckets",
              "<",
              "AggregationsDateHistogramBucket",
              ">; }>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.getAlertSummary.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    gte,\n    lte,\n    featureIds,\n    filter,\n    fixedInterval = '1m',\n  }",
                "description": [],
                "signature": [
                  "GetAlertSummaryParams"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.update",
            "type": "Function",
            "tags": [],
            "label": "update",
            "description": [],
            "signature": [
              "<Params extends ",
              {
                "pluginId": "alerting",
                "scope": "common",
                "docId": "kibAlertingPluginApi",
                "section": "def-common.RuleTypeParams",
                "text": "RuleTypeParams"
              },
              " = never>({ id, status, _version, index, }: ",
              "UpdateOptions",
              "<Params>) => Promise<{ _version: string | undefined; get?: ",
              "InlineGet",
              "<unknown> | undefined; _id: string; _index: string; _primary_term: number; result: ",
              "Result",
              "; _seq_no: number; _shards: ",
              "ShardStatistics",
              "; forced_refresh?: boolean | undefined; }>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.update.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    id,\n    status,\n    _version,\n    index,\n  }",
                "description": [],
                "signature": [
                  "UpdateOptions",
                  "<Params>"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.bulkUpdate",
            "type": "Function",
            "tags": [],
            "label": "bulkUpdate",
            "description": [],
            "signature": [
              "<Params extends ",
              {
                "pluginId": "alerting",
                "scope": "common",
                "docId": "kibAlertingPluginApi",
                "section": "def-common.RuleTypeParams",
                "text": "RuleTypeParams"
              },
              " = never>({ ids, query, index, status, }: ",
              "BulkUpdateOptions",
              "<Params>) => Promise<",
              "BulkResponse",
              " | ",
              "UpdateByQueryResponse",
              ">"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.bulkUpdate.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    ids,\n    query,\n    index,\n    status,\n  }",
                "description": [],
                "signature": [
                  "BulkUpdateOptions",
                  "<Params>"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.bulkUpdateCases",
            "type": "Function",
            "tags": [],
            "label": "bulkUpdateCases",
            "description": [
              "\nThis function updates the case ids of multiple alerts per index.\nIt is supposed to be used only by Cases.\nCases implements its own RBAC. By using this function directly\nCases RBAC is bypassed.\nPlugins that want to attach alerts to a case should use the\ncases client that does all the necessary cases RBAC checks\nbefore updating the alert with the case ids."
            ],
            "signature": [
              "({ alerts, caseIds }: ",
              "BulkUpdateCasesOptions",
              ") => Promise<",
              "BulkResponse",
              ">"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.bulkUpdateCases.$1",
                "type": "Object",
                "tags": [],
                "label": "{ alerts, caseIds }",
                "description": [],
                "signature": [
                  "BulkUpdateCasesOptions"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.find",
            "type": "Function",
            "tags": [],
            "label": "find",
            "description": [],
            "signature": [
              "<Params extends ",
              {
                "pluginId": "alerting",
                "scope": "common",
                "docId": "kibAlertingPluginApi",
                "section": "def-common.RuleTypeParams",
                "text": "RuleTypeParams"
              },
              " = never>({ aggs, featureIds, index, query, search_after: searchAfter, size, sort, track_total_hits: trackTotalHits, _source, }: { aggs?: object | undefined; featureIds?: string[] | undefined; index?: string | undefined; query?: object | undefined; search_after?: (string | number)[] | undefined; size?: number | undefined; sort?: ",
              "SortOptions",
              "[] | undefined; track_total_hits?: boolean | undefined; _source?: string[] | undefined; }) => Promise<",
              "SearchResponse",
              "<OutputOf<SetOptional<{ readonly \"event.action\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.docs_count\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.field\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.value\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"event.kind\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"@timestamp\": { readonly type: \"date\"; readonly required: true; readonly array: false; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.execution.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.case_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.flapping\": { readonly type: \"boolean\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.flapping_history\": { readonly type: \"boolean\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.last_detected\": { readonly type: \"date\"; readonly required: false; readonly array: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.parameters\": { readonly array: false; readonly type: \"flattened\"; readonly ignore_above: 4096; readonly required: false; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.time_range\": { readonly type: \"date_range\"; readonly format: \"epoch_millis||strict_date_optional_time\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; }>>, Record<string, ",
              "AggregationsAggregate",
              ">>>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.find.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    aggs,\n    featureIds,\n    index,\n    query,\n    search_after: searchAfter,\n    size,\n    sort,\n    track_total_hits: trackTotalHits,\n    _source,\n  }",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.aggs",
                    "type": "Uncategorized",
                    "tags": [],
                    "label": "aggs",
                    "description": [],
                    "signature": [
                      "object | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.featureIds",
                    "type": "Array",
                    "tags": [],
                    "label": "featureIds",
                    "description": [],
                    "signature": [
                      "string[] | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.index",
                    "type": "string",
                    "tags": [],
                    "label": "index",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.query",
                    "type": "Uncategorized",
                    "tags": [],
                    "label": "query",
                    "description": [],
                    "signature": [
                      "object | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.search_after",
                    "type": "Array",
                    "tags": [],
                    "label": "search_after",
                    "description": [],
                    "signature": [
                      "(string | number)[] | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.size",
                    "type": "number",
                    "tags": [],
                    "label": "size",
                    "description": [],
                    "signature": [
                      "number | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.sort",
                    "type": "Array",
                    "tags": [],
                    "label": "sort",
                    "description": [],
                    "signature": [
                      "SortOptions",
                      "[] | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1.track_total_hits",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "track_total_hits",
                    "description": [],
                    "signature": [
                      "boolean | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.find.$1._source",
                    "type": "Array",
                    "tags": [],
                    "label": "_source",
                    "description": [],
                    "signature": [
                      "string[] | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.getAuthorizedAlertsIndices",
            "type": "Function",
            "tags": [],
            "label": "getAuthorizedAlertsIndices",
            "description": [],
            "signature": [
              "(featureIds: string[]) => Promise<string[] | undefined>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.getAuthorizedAlertsIndices.$1",
                "type": "Array",
                "tags": [],
                "label": "featureIds",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.getFeatureIdsByRegistrationContexts",
            "type": "Function",
            "tags": [],
            "label": "getFeatureIdsByRegistrationContexts",
            "description": [],
            "signature": [
              "(RegistrationContexts: string[]) => Promise<string[]>"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.getFeatureIdsByRegistrationContexts.$1",
                "type": "Array",
                "tags": [],
                "label": "RegistrationContexts",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertsClient.getBrowserFields",
            "type": "Function",
            "tags": [],
            "label": "getBrowserFields",
            "description": [],
            "signature": [
              "({ indices, metaFields, allowNoIndex, }: { indices: string[]; metaFields: string[]; allowNoIndex: boolean; }) => Promise<",
              {
                "pluginId": "ruleRegistry",
                "scope": "common",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-common.BrowserFields",
                "text": "BrowserFields"
              },
              ">"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.AlertsClient.getBrowserFields.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    indices,\n    metaFields,\n    allowNoIndex,\n  }",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.getBrowserFields.$1.indices",
                    "type": "Array",
                    "tags": [],
                    "label": "indices",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.getBrowserFields.$1.metaFields",
                    "type": "Array",
                    "tags": [],
                    "label": "metaFields",
                    "description": [],
                    "signature": [
                      "string[]"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.AlertsClient.getBrowserFields.$1.allowNoIndex",
                    "type": "boolean",
                    "tags": [],
                    "label": "allowNoIndex",
                    "description": [],
                    "path": "x-pack/plugins/rule_registry/server/alert_data_client/alerts_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataClient",
        "type": "Class",
        "tags": [],
        "label": "RuleDataClient",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.RuleDataClient",
            "text": "RuleDataClient"
          },
          " implements ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataClient",
            "text": "IRuleDataClient"
          }
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataClient.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.RuleDataClientConstructorOptions",
                    "text": "RuleDataClientConstructorOptions"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.indexName",
            "type": "string",
            "tags": [],
            "label": "indexName",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.kibanaVersion",
            "type": "string",
            "tags": [],
            "label": "kibanaVersion",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.indexNameWithNamespace",
            "type": "Function",
            "tags": [],
            "label": "indexNameWithNamespace",
            "description": [],
            "signature": [
              "(namespace: string) => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataClient.indexNameWithNamespace.$1",
                "type": "string",
                "tags": [],
                "label": "namespace",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.isWriteEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriteEnabled",
            "description": [],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.getReader",
            "type": "Function",
            "tags": [],
            "label": "getReader",
            "description": [],
            "signature": [
              "(options?: { namespace?: string | undefined; }) => ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataReader",
                "text": "IRuleDataReader"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataClient.getReader.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.RuleDataClient.getReader.$1.namespace",
                    "type": "string",
                    "tags": [],
                    "label": "namespace",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClient.getWriter",
            "type": "Function",
            "tags": [],
            "label": "getWriter",
            "description": [],
            "signature": [
              "(options?: { namespace?: string | undefined; }) => Promise<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataWriter",
                "text": "IRuleDataWriter"
              },
              ">"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataClient.getWriter.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.RuleDataClient.getWriter.$1.namespace",
                    "type": "string",
                    "tags": [],
                    "label": "namespace",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataService",
        "type": "Class",
        "tags": [],
        "label": "RuleDataService",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.RuleDataService",
            "text": "RuleDataService"
          },
          " implements ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataService",
            "text": "IRuleDataService"
          }
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "signature": [
                  "ConstructorOptions"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.getResourcePrefix",
            "type": "Function",
            "tags": [],
            "label": "getResourcePrefix",
            "description": [],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.getResourceName",
            "type": "Function",
            "tags": [],
            "label": "getResourceName",
            "description": [],
            "signature": [
              "(relativeName: string) => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.getResourceName.$1",
                "type": "string",
                "tags": [],
                "label": "relativeName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.isWriteEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriteEnabled",
            "description": [],
            "signature": [
              "(registrationContext: string) => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.isWriteEnabled.$1",
                "type": "string",
                "tags": [],
                "label": "registrationContext",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.isRegistrationContextDisabled",
            "type": "Function",
            "tags": [],
            "label": "isRegistrationContextDisabled",
            "description": [],
            "signature": [
              "(registrationContext: string) => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.isRegistrationContextDisabled.$1",
                "type": "string",
                "tags": [],
                "label": "registrationContext",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.isWriterCacheEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriterCacheEnabled",
            "description": [
              "\nIf writer cache is enabled (the default), the writer will be cached\nafter being initialized. Disabling this is useful for tests, where we\nexpect to easily be able to clean up after ourselves between test cases."
            ],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.initializeService",
            "type": "Function",
            "tags": [],
            "label": "initializeService",
            "description": [
              "\nInstalls common Elasticsearch resources used by all alerts-as-data indices."
            ],
            "signature": [
              "() => void"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.initializeIndex",
            "type": "Function",
            "tags": [],
            "label": "initializeIndex",
            "description": [],
            "signature": [
              "(indexOptions: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IndexOptions",
                "text": "IndexOptions"
              },
              ") => ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataClient",
                "text": "IRuleDataClient"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.initializeIndex.$1",
                "type": "Object",
                "tags": [],
                "label": "indexOptions",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.IndexOptions",
                    "text": "IndexOptions"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.findIndexByName",
            "type": "Function",
            "tags": [],
            "label": "findIndexByName",
            "description": [],
            "signature": [
              "(registrationContext: string, dataset: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.Dataset",
                "text": "Dataset"
              },
              ") => ",
              "IndexInfo",
              " | null"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.findIndexByName.$1",
                "type": "string",
                "tags": [],
                "label": "registrationContext",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.findIndexByName.$2",
                "type": "Enum",
                "tags": [],
                "label": "dataset",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.Dataset",
                    "text": "Dataset"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.findFeatureIdsByRegistrationContexts",
            "type": "Function",
            "tags": [],
            "label": "findFeatureIdsByRegistrationContexts",
            "description": [],
            "signature": [
              "(registrationContexts: string[]) => string[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.findFeatureIdsByRegistrationContexts.$1",
                "type": "Array",
                "tags": [],
                "label": "registrationContexts",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataService.findIndexByFeature",
            "type": "Function",
            "tags": [],
            "label": "findIndexByFeature",
            "description": [],
            "signature": [
              "(featureId: ",
              {
                "pluginId": "@kbn/rule-data-utils",
                "scope": "common",
                "docId": "kibKbnRuleDataUtilsPluginApi",
                "section": "def-common.AlertConsumers",
                "text": "AlertConsumers"
              },
              ", dataset: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.Dataset",
                "text": "Dataset"
              },
              ") => ",
              "IndexInfo",
              " | null"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.findIndexByFeature.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "featureId",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/rule-data-utils",
                    "scope": "common",
                    "docId": "kibKbnRuleDataUtilsPluginApi",
                    "section": "def-common.AlertConsumers",
                    "text": "AlertConsumers"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataService.findIndexByFeature.$2",
                "type": "Enum",
                "tags": [],
                "label": "dataset",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.Dataset",
                    "text": "Dataset"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataWriteDisabledError",
        "type": "Class",
        "tags": [],
        "label": "RuleDataWriteDisabledError",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.RuleDataWriteDisabledError",
            "text": "RuleDataWriteDisabledError"
          },
          " extends Error"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataWriteDisabledError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataWriteDisabledError.Unnamed.$1",
                "type": "Object",
                "tags": [],
                "label": "{\n    reason,\n    registrationContext,\n    message,\n  }",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.RuleDataWriteDisabledError.Unnamed.$1.reason",
                    "type": "CompoundType",
                    "tags": [],
                    "label": "reason",
                    "description": [],
                    "signature": [
                      "\"config\" | \"error\""
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.RuleDataWriteDisabledError.Unnamed.$1.registrationContext",
                    "type": "string",
                    "tags": [],
                    "label": "registrationContext",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  },
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.RuleDataWriteDisabledError.Unnamed.$1.message",
                    "type": "string",
                    "tags": [],
                    "label": "message",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataWriterInitializationError",
        "type": "Class",
        "tags": [],
        "label": "RuleDataWriterInitializationError",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.RuleDataWriterInitializationError",
            "text": "RuleDataWriterInitializationError"
          },
          " extends Error"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataWriterInitializationError.Unnamed",
            "type": "Function",
            "tags": [],
            "label": "Constructor",
            "description": [],
            "signature": [
              "any"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataWriterInitializationError.Unnamed.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "resourceType",
                "description": [],
                "signature": [
                  "\"index\" | \"namespace\""
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataWriterInitializationError.Unnamed.$2",
                "type": "string",
                "tags": [],
                "label": "registrationContext",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.RuleDataWriterInitializationError.Unnamed.$3",
                "type": "CompoundType",
                "tags": [],
                "label": "error",
                "description": [],
                "signature": [
                  "string | Error"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/errors.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      }
    ],
    "functions": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.alertAuditEvent",
        "type": "Function",
        "tags": [],
        "label": "alertAuditEvent",
        "description": [],
        "signature": [
          "({ action, id, outcome, error }: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.AlertAuditEventParams",
            "text": "AlertAuditEventParams"
          },
          ") => ",
          {
            "pluginId": "security",
            "scope": "server",
            "docId": "kibSecurityPluginApi",
            "section": "def-server.AuditEvent",
            "text": "AuditEvent"
          }
        ],
        "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.alertAuditEvent.$1",
            "type": "Object",
            "tags": [],
            "label": "{ action, id, outcome, error }",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertAuditEventParams",
                "text": "AlertAuditEventParams"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.createGetSummarizedAlertsFn",
        "type": "Function",
        "tags": [],
        "label": "createGetSummarizedAlertsFn",
        "description": [],
        "signature": [
          "(opts: CreateGetSummarizedAlertsFnOpts) => () => ({ start, end, executionUuid, ruleId, spaceId, excludedAlertInstanceIds, }: ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.GetSummarizedAlertsFnOpts",
            "text": "GetSummarizedAlertsFnOpts"
          },
          ") => Promise<{ new: { count: number; data: { _id: string; _index: string; }[]; }; ongoing: { count: number; data: { _id: string; _index: string; }[]; }; recovered: { count: number; data: { _id: string; _index: string; }[]; }; }>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_get_summarized_alerts_fn.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.createGetSummarizedAlertsFn.$1",
            "type": "Object",
            "tags": [],
            "label": "opts",
            "description": [],
            "signature": [
              "CreateGetSummarizedAlertsFnOpts"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_get_summarized_alerts_fn.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.createLifecycleExecutor",
        "type": "Function",
        "tags": [],
        "label": "createLifecycleExecutor",
        "description": [],
        "signature": [
          "(logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "common",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-common.Logger",
            "text": "Logger"
          },
          ", ruleDataClient: ",
          {
            "pluginId": "@kbn/utility-types",
            "scope": "common",
            "docId": "kibKbnUtilityTypesPluginApi",
            "section": "def-common.PublicContract",
            "text": "PublicContract"
          },
          "<",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataClient",
            "text": "IRuleDataClient"
          },
          ">) => <Params extends ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.RuleTypeParams",
            "text": "RuleTypeParams"
          },
          " = never, State extends ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.RuleTypeState",
            "text": "RuleTypeState"
          },
          " = never, InstanceState extends { [x: string]: unknown; } = never, InstanceContext extends { [x: string]: unknown; } = never, ActionGroupIds extends string = never>(wrappedExecutor: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.LifecycleRuleExecutor",
            "text": "LifecycleRuleExecutor"
          },
          "<Params, State, InstanceState, InstanceContext, ActionGroupIds>) => (options: ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.RuleExecutorOptions",
            "text": "RuleExecutorOptions"
          },
          "<Params, ",
          "WrappedLifecycleRuleState",
          "<State>, InstanceState, InstanceContext, ActionGroupIds>) => Promise<{ state: ",
          "WrappedLifecycleRuleState",
          "<State>; }>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.createLifecycleExecutor.$1",
            "type": "Object",
            "tags": [],
            "label": "logger",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.createLifecycleExecutor.$2",
            "type": "Object",
            "tags": [],
            "label": "ruleDataClient",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/utility-types",
                "scope": "common",
                "docId": "kibKbnUtilityTypesPluginApi",
                "section": "def-common.PublicContract",
                "text": "PublicContract"
              },
              "<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataClient",
                "text": "IRuleDataClient"
              },
              ">"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.createLifecycleRuleTypeFactory",
        "type": "Function",
        "tags": [],
        "label": "createLifecycleRuleTypeFactory",
        "description": [],
        "signature": [
          "({ logger, ruleDataClient }: { logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "common",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-common.Logger",
            "text": "Logger"
          },
          "; ruleDataClient: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataClient",
            "text": "IRuleDataClient"
          },
          "; }) => <TParams extends ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.RuleTypeParams",
            "text": "RuleTypeParams"
          },
          ", TAlertInstanceState extends { [x: string]: unknown; }, TAlertInstanceContext extends { [x: string]: unknown; }, TActionGroupIds extends string, TServices extends ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.LifecycleAlertServices",
            "text": "LifecycleAlertServices"
          },
          "<TAlertInstanceState, TAlertInstanceContext, TActionGroupIds>>(type: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.AlertTypeWithExecutor",
            "text": "AlertTypeWithExecutor"
          },
          "<TAlertInstanceState, TParams, TAlertInstanceContext, TServices>) => ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.AlertTypeWithExecutor",
            "text": "AlertTypeWithExecutor"
          },
          "<TAlertInstanceState, TParams, TAlertInstanceContext, any>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_rule_type_factory.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.createLifecycleRuleTypeFactory.$1",
            "type": "Object",
            "tags": [],
            "label": "{ logger, ruleDataClient }",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_rule_type_factory.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.createLifecycleRuleTypeFactory.$1.logger",
                "type": "Object",
                "tags": [],
                "label": "logger",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/logging",
                    "scope": "common",
                    "docId": "kibKbnLoggingPluginApi",
                    "section": "def-common.Logger",
                    "text": "Logger"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_rule_type_factory.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.createLifecycleRuleTypeFactory.$1.ruleDataClient",
                "type": "Object",
                "tags": [],
                "label": "ruleDataClient",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.IRuleDataClient",
                    "text": "IRuleDataClient"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_rule_type_factory.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.createPersistenceRuleTypeWrapper",
        "type": "Function",
        "tags": [],
        "label": "createPersistenceRuleTypeWrapper",
        "description": [],
        "signature": [
          "({ logger, ruleDataClient }: { ruleDataClient: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataClient",
            "text": "IRuleDataClient"
          },
          "; logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "common",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-common.Logger",
            "text": "Logger"
          },
          "; }) => <TParams extends ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.RuleTypeParams",
            "text": "RuleTypeParams"
          },
          ", TState extends ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.RuleTypeState",
            "text": "RuleTypeState"
          },
          ", TInstanceContext extends { [x: string]: unknown; } = {}, TActionGroupIds extends string = never>(type: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceAlertType",
            "text": "PersistenceAlertType"
          },
          "<TParams, TState, TInstanceContext, TActionGroupIds>) => { executor: (options: ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.RuleExecutorOptions",
            "text": "RuleExecutorOptions"
          },
          "<TParams, TState, { [x: string]: unknown; }, TInstanceContext, ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.WithoutReservedActionGroups",
            "text": "WithoutReservedActionGroups"
          },
          "<TActionGroupIds, never>>) => Promise<{ state: TState; }>; getSummarizedAlerts: ({ start, end, executionUuid, ruleId, spaceId, excludedAlertInstanceIds, }: ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.GetSummarizedAlertsFnOpts",
            "text": "GetSummarizedAlertsFnOpts"
          },
          ") => Promise<{ new: { count: number; data: { _id: string; _index: string; }[]; }; ongoing: { count: number; data: { _id: string; _index: string; }[]; }; recovered: { count: number; data: { _id: string; _index: string; }[]; }; }>; id: string; name: string; validate?: { params?: ",
          "RuleTypeParamsValidator",
          "<TParams> | undefined; } | undefined; cancelAlertsOnRuleTimeout?: boolean | undefined; alerts?: ",
          "IRuleTypeAlerts",
          " | undefined; producer: string; actionGroups: ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.ActionGroup",
            "text": "ActionGroup"
          },
          "<TActionGroupIds>[]; defaultActionGroupId: TActionGroupIds; recoveryActionGroup?: ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.ActionGroup",
            "text": "ActionGroup"
          },
          "<never> | undefined; actionVariables?: { context?: ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.ActionVariable",
            "text": "ActionVariable"
          },
          "[] | undefined; state?: ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.ActionVariable",
            "text": "ActionVariable"
          },
          "[] | undefined; params?: ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.ActionVariable",
            "text": "ActionVariable"
          },
          "[] | undefined; } | undefined; minimumLicenseRequired: \"basic\" | \"standard\" | \"gold\" | \"platinum\" | \"enterprise\" | \"trial\"; useSavedObjectReferences?: { extractReferences: (params: TParams) => ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.RuleParamsAndRefs",
            "text": "RuleParamsAndRefs"
          },
          "<TParams>; injectReferences: (params: TParams, references: ",
          {
            "pluginId": "@kbn/core-saved-objects-common",
            "scope": "common",
            "docId": "kibKbnCoreSavedObjectsCommonPluginApi",
            "section": "def-common.SavedObjectReference",
            "text": "SavedObjectReference"
          },
          "[]) => TParams; } | undefined; isExportable: boolean; defaultScheduleInterval?: string | undefined; ruleTaskTimeout?: string | undefined; doesSetRecoveryContext?: boolean | undefined; autoRecoverAlerts?: boolean | undefined; getViewInAppRelativeUrl?: ",
          "GetViewInAppRelativeUrlFn",
          "<TParams> | undefined; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_persistence_rule_type_wrapper.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.createPersistenceRuleTypeWrapper.$1",
            "type": "Object",
            "tags": [],
            "label": "{ logger, ruleDataClient }",
            "description": [],
            "signature": [
              "{ ruleDataClient: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataClient",
                "text": "IRuleDataClient"
              },
              "; logger: ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              },
              "; }"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_persistence_rule_type_wrapper.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.AlertAuditEventParams",
        "type": "Interface",
        "tags": [],
        "label": "AlertAuditEventParams",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertAuditEventParams.action",
            "type": "Enum",
            "tags": [],
            "label": "action",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertAuditAction",
                "text": "AlertAuditAction"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertAuditEventParams.outcome",
            "type": "string",
            "tags": [],
            "label": "outcome",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertAuditEventParams.id",
            "type": "string",
            "tags": [],
            "label": "id",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.AlertAuditEventParams.error",
            "type": "Object",
            "tags": [],
            "label": "error",
            "description": [],
            "signature": [
              "Error | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.ComponentTemplateOptions",
        "type": "Interface",
        "tags": [],
        "label": "ComponentTemplateOptions",
        "description": [
          "\nWhen initializing an index, a plugin/solution can break mappings and settings\ndown into several component templates. Some of their properties can be\ndefined by the plugin/solution via these options.\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.ComponentTemplateOptions.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.ComponentTemplateOptions.mappings",
            "type": "Object",
            "tags": [],
            "label": "mappings",
            "description": [],
            "signature": [
              "MappingTypeMapping",
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.ComponentTemplateOptions.settings",
            "type": "CompoundType",
            "tags": [],
            "label": "settings",
            "description": [],
            "signature": [
              "IndicesIndexSettings",
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.ComponentTemplateOptions._meta",
            "type": "Object",
            "tags": [],
            "label": "_meta",
            "description": [],
            "signature": [
              "Metadata",
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IndexOptions",
        "type": "Interface",
        "tags": [],
        "label": "IndexOptions",
        "description": [
          "\nOptions that a plugin/solution provides to rule_registry in order to\ndefine and initialize an index for alerts-as-data.\n\nIMPORTANT: All names provided in these options are relative. For example:\n- component template refs will be 'ecs-mappings', not '.alerts-ecs-mappings'\n- component template names will be 'mappings', not '.alerts-security.alerts-mappings'\n- etc"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.feature",
            "type": "CompoundType",
            "tags": [],
            "label": "feature",
            "description": [
              "\nID of the Kibana feature associated with the index.\nUsed by alerts-as-data RBAC.\n\nNote from @dhurley14\nThe purpose of the `feature` param is to force the user to update\nthe data structure which contains the mapping of consumers to alerts\nas data indices. The idea is it is typed such that it forces the\nuser to go to the code and modify it. At least until a better system\nis put in place or we move the alerts as data client out of rule registry.\n"
            ],
            "signature": [
              "\"uptime\" | \"siem\" | \"apm\" | \"logs\" | \"infrastructure\" | \"observability\" | \"slo\""
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.registrationContext",
            "type": "string",
            "tags": [],
            "label": "registrationContext",
            "description": [
              "\nRegistration context which defines a solution or an app within a solution."
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.dataset",
            "type": "Enum",
            "tags": [],
            "label": "dataset",
            "description": [
              "\nDataset suffix. Restricted to a few values."
            ],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.Dataset",
                "text": "Dataset"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.componentTemplateRefs",
            "type": "Array",
            "tags": [],
            "label": "componentTemplateRefs",
            "description": [
              "\nA list of references to external component templates. Those can be\nthe common ones shared between all solutions, or special ones\nshared between some of them.\n\nIMPORTANT: These names should be relative.\n- correct: 'my-mappings'\n- incorrect: '.alerts-my-mappings'\n"
            ],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.componentTemplates",
            "type": "Array",
            "tags": [],
            "label": "componentTemplates",
            "description": [
              "\nOwn component templates specified for the index by the plugin/solution\ndefining this index.\n\nIMPORTANT: Order matters. This order is used by Elasticsearch to set\npriorities when merging the same field names defined in 2+ templates.\n\nIMPORTANT: Component template names should be relative.\n- correct: 'mappings'\n- incorrect: 'security.alerts-mappings'\n- incorrect: '.alerts-security.alerts-mappings'"
            ],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.ComponentTemplateOptions",
                "text": "ComponentTemplateOptions"
              },
              "[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.indexTemplate",
            "type": "Object",
            "tags": [],
            "label": "indexTemplate",
            "description": [
              "\nAdditional properties for the namespaced index template."
            ],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IndexTemplateOptions",
                "text": "IndexTemplateOptions"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.ilmPolicy",
            "type": "Object",
            "tags": [],
            "label": "ilmPolicy",
            "description": [
              "\nOptional custom ILM policy for the index.\nNOTE: this policy will be shared between all namespaces of the index."
            ],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IlmPolicyOptions",
                "text": "IlmPolicyOptions"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.secondaryAlias",
            "type": "string",
            "tags": [],
            "label": "secondaryAlias",
            "description": [
              "\nOptional secondary alias that will be applied to concrete indices in\naddition to the primary one '.alerts-{reg. context}.{dataset}-{namespace}'\n\nIMPORTANT: It should not include the namespace. It will be added\nautomatically.\n- correct: '.siem-signals'\n- incorrect: '.siem-signals-default'\n"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexOptions.additionalPrefix",
            "type": "string",
            "tags": [],
            "label": "additionalPrefix",
            "description": [
              "\nOptional prefix name that will be prepended to indices in addition to\nprimary dataset and context naming convention.\n\nCurrently used only for creating a preview index for the purpose of\npreviewing alerts from a rule. The documents are identical to alerts, but\nshouldn't exist on an alert index and shouldn't be queried together with\nreal alerts in any way, because the rule that created them doesn't exist"
            ],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IndexTemplateOptions",
        "type": "Interface",
        "tags": [],
        "label": "IndexTemplateOptions",
        "description": [
          "\nWhen initializing an index, a plugin/solution can provide some optional\nproperties which will be included into the index template.\n\nNote that:\n- each index namespace will get its own index template\n- the template will be created by the library\n- most of its properties will be set by the library\n- you can inject some of them via these options\n\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-template.html\nhttps://www.elastic.co/guide/en/elasticsearch/reference/current/index-templates.html"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IndexTemplateOptions._meta",
            "type": "Object",
            "tags": [],
            "label": "_meta",
            "description": [],
            "signature": [
              "Metadata",
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IRuleDataClient",
        "type": "Interface",
        "tags": [],
        "label": "IRuleDataClient",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.indexName",
            "type": "string",
            "tags": [],
            "label": "indexName",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.indexNameWithNamespace",
            "type": "Function",
            "tags": [],
            "label": "indexNameWithNamespace",
            "description": [],
            "signature": [
              "(namespace: string) => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataClient.indexNameWithNamespace.$1",
                "type": "string",
                "tags": [],
                "label": "namespace",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.kibanaVersion",
            "type": "string",
            "tags": [],
            "label": "kibanaVersion",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.isWriteEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriteEnabled",
            "description": [],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.getReader",
            "type": "Function",
            "tags": [],
            "label": "getReader",
            "description": [],
            "signature": [
              "(options?: { namespace?: string | undefined; } | undefined) => ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataReader",
                "text": "IRuleDataReader"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataClient.getReader.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.IRuleDataClient.getReader.$1.namespace",
                    "type": "string",
                    "tags": [],
                    "label": "namespace",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataClient.getWriter",
            "type": "Function",
            "tags": [],
            "label": "getWriter",
            "description": [],
            "signature": [
              "(options?: { namespace?: string | undefined; } | undefined) => Promise<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataWriter",
                "text": "IRuleDataWriter"
              },
              ">"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataClient.getWriter.$1",
                "type": "Object",
                "tags": [],
                "label": "options",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "children": [
                  {
                    "parentPluginId": "ruleRegistry",
                    "id": "def-server.IRuleDataClient.getWriter.$1.namespace",
                    "type": "string",
                    "tags": [],
                    "label": "namespace",
                    "description": [],
                    "signature": [
                      "string | undefined"
                    ],
                    "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                    "deprecated": false,
                    "trackAdoption": false
                  }
                ]
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IRuleDataReader",
        "type": "Interface",
        "tags": [],
        "label": "IRuleDataReader",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataReader.search",
            "type": "Function",
            "tags": [],
            "label": "search",
            "description": [],
            "signature": [
              "<TSearchRequest extends ",
              "SearchRequest",
              ", TAlertDoc = Partial<OutputOf<SetOptional<{ readonly \"event.action\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.docs_count\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.field\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.value\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"event.kind\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"@timestamp\": { readonly type: \"date\"; readonly required: true; readonly array: false; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.execution.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.case_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.flapping\": { readonly type: \"boolean\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.flapping_history\": { readonly type: \"boolean\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.last_detected\": { readonly type: \"date\"; readonly required: false; readonly array: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.parameters\": { readonly array: false; readonly type: \"flattened\"; readonly ignore_above: 4096; readonly required: false; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.time_range\": { readonly type: \"date_range\"; readonly format: \"epoch_millis||strict_date_optional_time\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; }>> & OutputOf<SetOptional<{ readonly \"kibana.alert.evaluation.threshold\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; readonly required: false; }; readonly \"kibana.alert.evaluation.value\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; readonly required: false; }; }>>>>(request: TSearchRequest) => Promise<",
              {
                "pluginId": "@kbn/es-types",
                "scope": "common",
                "docId": "kibKbnEsTypesPluginApi",
                "section": "def-common.ESSearchResponse",
                "text": "ESSearchResponse"
              },
              "<TAlertDoc, TSearchRequest, { restTotalHitsAsInt: false; }>>"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataReader.search.$1",
                "type": "Uncategorized",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  "TSearchRequest"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataReader.getDynamicIndexPattern",
            "type": "Function",
            "tags": [],
            "label": "getDynamicIndexPattern",
            "description": [],
            "signature": [
              "(target?: string | undefined) => Promise<{ title: string; timeFieldName: string; fields: ",
              {
                "pluginId": "dataViews",
                "scope": "server",
                "docId": "kibDataViewsPluginApi",
                "section": "def-server.FieldDescriptor",
                "text": "FieldDescriptor"
              },
              "[]; }>"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataReader.getDynamicIndexPattern.$1",
                "type": "string",
                "tags": [],
                "label": "target",
                "description": [],
                "signature": [
                  "string | undefined"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": false
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IRuleDataService",
        "type": "Interface",
        "tags": [],
        "label": "IRuleDataService",
        "description": [
          "\nA service for creating and using Elasticsearch indices for alerts-as-data."
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.getResourcePrefix",
            "type": "Function",
            "tags": [],
            "label": "getResourcePrefix",
            "description": [
              "\nReturns a prefix used in the naming scheme of index aliases, templates\nand other Elasticsearch resources that this service creates\nfor alerts-as-data indices."
            ],
            "signature": [
              "() => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.getResourceName",
            "type": "Function",
            "tags": [],
            "label": "getResourceName",
            "description": [
              "\nPrepends a relative resource name with the resource prefix."
            ],
            "signature": [
              "(relativeName: string) => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.getResourceName.$1",
                "type": "string",
                "tags": [],
                "label": "relativeName",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "Full name of the resource."
            ]
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.isWriteEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriteEnabled",
            "description": [
              "\nIf write is enabled for the specified registration context, everything works as usual.\nIf it's disabled, writing to the registration context's alerts-as-data indices will be disabled,\nand also Elasticsearch resources associated with the indices will not be\ninstalled."
            ],
            "signature": [
              "(registrationContext: string) => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.isWriteEnabled.$1",
                "type": "string",
                "tags": [],
                "label": "registrationContext",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.isWriterCacheEnabled",
            "type": "Function",
            "tags": [],
            "label": "isWriterCacheEnabled",
            "description": [
              "\nIf writer cache is enabled (the default), the writer will be cached\nafter being initialized. Disabling this is useful for tests, where we\nexpect to easily be able to clean up after ourselves between test cases."
            ],
            "signature": [
              "() => boolean"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.initializeService",
            "type": "Function",
            "tags": [],
            "label": "initializeService",
            "description": [
              "\nInstalls common Elasticsearch resources used by all alerts-as-data indices."
            ],
            "signature": [
              "() => void"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.initializeIndex",
            "type": "Function",
            "tags": [],
            "label": "initializeIndex",
            "description": [
              "\nInitializes alerts-as-data index and starts index bootstrapping right away."
            ],
            "signature": [
              "(indexOptions: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IndexOptions",
                "text": "IndexOptions"
              },
              ") => ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataClient",
                "text": "IRuleDataClient"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.initializeIndex.$1",
                "type": "Object",
                "tags": [],
                "label": "indexOptions",
                "description": [
                  "Index parameters: names and resources."
                ],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.IndexOptions",
                    "text": "IndexOptions"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": [
              "Client for reading and writing data to this index."
            ]
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.findIndexByName",
            "type": "Function",
            "tags": [],
            "label": "findIndexByName",
            "description": [
              "\nLooks up the index information associated with the given registration context and dataset."
            ],
            "signature": [
              "(registrationContext: string, dataset: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.Dataset",
                "text": "Dataset"
              },
              ") => ",
              "IndexInfo",
              " | null"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.findIndexByName.$1",
                "type": "string",
                "tags": [],
                "label": "registrationContext",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.findIndexByName.$2",
                "type": "Enum",
                "tags": [],
                "label": "dataset",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.Dataset",
                    "text": "Dataset"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.findIndexByFeature",
            "type": "Function",
            "tags": [],
            "label": "findIndexByFeature",
            "description": [
              "\nLooks up the index information associated with the given Kibana \"feature\".\nNote: features are used in RBAC."
            ],
            "signature": [
              "(featureId: ",
              {
                "pluginId": "@kbn/rule-data-utils",
                "scope": "common",
                "docId": "kibKbnRuleDataUtilsPluginApi",
                "section": "def-common.AlertConsumers",
                "text": "AlertConsumers"
              },
              ", dataset: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.Dataset",
                "text": "Dataset"
              },
              ") => ",
              "IndexInfo",
              " | null"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.findIndexByFeature.$1",
                "type": "CompoundType",
                "tags": [],
                "label": "featureId",
                "description": [],
                "signature": [
                  {
                    "pluginId": "@kbn/rule-data-utils",
                    "scope": "common",
                    "docId": "kibKbnRuleDataUtilsPluginApi",
                    "section": "def-common.AlertConsumers",
                    "text": "AlertConsumers"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.findIndexByFeature.$2",
                "type": "Enum",
                "tags": [],
                "label": "dataset",
                "description": [],
                "signature": [
                  {
                    "pluginId": "ruleRegistry",
                    "scope": "server",
                    "docId": "kibRuleRegistryPluginApi",
                    "section": "def-server.Dataset",
                    "text": "Dataset"
                  }
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataService.findFeatureIdsByRegistrationContexts",
            "type": "Function",
            "tags": [],
            "label": "findFeatureIdsByRegistrationContexts",
            "description": [
              "\nLooks up Kibana \"feature\" associated with the given registration context.\nNote: features are used in RBAC."
            ],
            "signature": [
              "(registrationContexts: string[]) => string[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataService.findFeatureIdsByRegistrationContexts.$1",
                "type": "Array",
                "tags": [],
                "label": "registrationContexts",
                "description": [],
                "signature": [
                  "string[]"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IRuleDataWriter",
        "type": "Interface",
        "tags": [],
        "label": "IRuleDataWriter",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.IRuleDataWriter.bulk",
            "type": "Function",
            "tags": [],
            "label": "bulk",
            "description": [],
            "signature": [
              "(request: ",
              "BulkRequest",
              "<unknown, unknown>) => Promise<",
              "TransportResult",
              "<",
              "BulkResponse",
              ", unknown> | undefined>"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.IRuleDataWriter.bulk.$1",
                "type": "Object",
                "tags": [],
                "label": "request",
                "description": [],
                "signature": [
                  "BulkRequest",
                  "<unknown, unknown>"
                ],
                "path": "x-pack/plugins/rule_registry/server/rule_data_client/types.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.LifecycleAlertServices",
        "type": "Interface",
        "tags": [],
        "label": "LifecycleAlertServices",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.LifecycleAlertServices",
            "text": "LifecycleAlertServices"
          },
          "<InstanceState, InstanceContext, ActionGroupIds>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.LifecycleAlertServices.alertWithLifecycle",
            "type": "Function",
            "tags": [],
            "label": "alertWithLifecycle",
            "description": [],
            "signature": [
              "(alert: { id: string; fields: ExplicitAlertFields; }) => ",
              {
                "pluginId": "alerting",
                "scope": "server",
                "docId": "kibAlertingPluginApi",
                "section": "def-server.PublicAlert",
                "text": "PublicAlert"
              },
              "<InstanceState, InstanceContext, ActionGroupIds>"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.LifecycleAlertServices.alertWithLifecycle.$1",
                "type": "Object",
                "tags": [],
                "label": "alert",
                "description": [],
                "signature": [
                  "{ id: string; fields: ExplicitAlertFields; }"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.LifecycleAlertServices.getAlertStartedDate",
            "type": "Function",
            "tags": [],
            "label": "getAlertStartedDate",
            "description": [],
            "signature": [
              "(alertInstanceId: string) => string | null"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.LifecycleAlertServices.getAlertStartedDate.$1",
                "type": "string",
                "tags": [],
                "label": "alertInstanceId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.LifecycleAlertServices.getAlertUuid",
            "type": "Function",
            "tags": [],
            "label": "getAlertUuid",
            "description": [],
            "signature": [
              "(alertInstanceId: string) => string"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.LifecycleAlertServices.getAlertUuid.$1",
                "type": "string",
                "tags": [],
                "label": "alertInstanceId",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.LifecycleAlertServices.getAlertByAlertUuid",
            "type": "Function",
            "tags": [],
            "label": "getAlertByAlertUuid",
            "description": [],
            "signature": [
              "(alertUuid: string) => Promise<Partial<OutputOf<SetOptional<{ readonly \"event.action\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.docs_count\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.field\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.value\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"event.kind\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"@timestamp\": { readonly type: \"date\"; readonly required: true; readonly array: false; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.execution.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.case_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.flapping\": { readonly type: \"boolean\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.flapping_history\": { readonly type: \"boolean\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.last_detected\": { readonly type: \"date\"; readonly required: false; readonly array: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.parameters\": { readonly array: false; readonly type: \"flattened\"; readonly ignore_above: 4096; readonly required: false; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.time_range\": { readonly type: \"date_range\"; readonly format: \"epoch_millis||strict_date_optional_time\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; }>> & OutputOf<SetOptional<{ readonly \"kibana.alert.evaluation.threshold\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; readonly required: false; }; readonly \"kibana.alert.evaluation.value\": { readonly type: \"scaled_float\"; readonly scaling_factor: 100; readonly required: false; }; }>>> | null> | null"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.LifecycleAlertServices.getAlertByAlertUuid.$1",
                "type": "string",
                "tags": [],
                "label": "alertUuid",
                "description": [],
                "signature": [
                  "string"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
                "deprecated": false,
                "trackAdoption": false,
                "isRequired": true
              }
            ],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.PersistenceAlertServiceResult",
        "type": "Interface",
        "tags": [],
        "label": "PersistenceAlertServiceResult",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceAlertServiceResult",
            "text": "PersistenceAlertServiceResult"
          },
          "<T>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceAlertServiceResult.createdAlerts",
            "type": "Array",
            "tags": [],
            "label": "createdAlerts",
            "description": [],
            "signature": [
              "(T & ",
              "CommonAlertFields870",
              " & { _id: string; _index: string; })[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceAlertServiceResult.errors",
            "type": "Object",
            "tags": [],
            "label": "errors",
            "description": [],
            "signature": [
              "{ [x: string]: { count: number; statusCode: number; }; }"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceAlertServiceResult.alertsWereTruncated",
            "type": "boolean",
            "tags": [],
            "label": "alertsWereTruncated",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.PersistenceServices",
        "type": "Interface",
        "tags": [],
        "label": "PersistenceServices",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceServices.alertWithPersistence",
            "type": "Function",
            "tags": [],
            "label": "alertWithPersistence",
            "description": [],
            "signature": [
              "<T>(alerts: { _id: string; _source: T; }[], refresh: boolean | \"wait_for\", maxAlerts?: number | undefined, enrichAlerts?: ((alerts: { _id: string; _source: T; }[], params: { spaceId: string; }) => Promise<{ _id: string; _source: T; }[]>) | undefined) => Promise<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.PersistenceAlertServiceResult",
                "text": "PersistenceAlertServiceResult"
              },
              "<T>>"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.PersistenceServices.alertWithPersistence.$1",
                "type": "Array",
                "tags": [],
                "label": "alerts",
                "description": [],
                "signature": [
                  "{ _id: string; _source: T; }[]"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.PersistenceServices.alertWithPersistence.$2",
                "type": "CompoundType",
                "tags": [],
                "label": "refresh",
                "description": [],
                "signature": [
                  "boolean | \"wait_for\""
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.PersistenceServices.alertWithPersistence.$3",
                "type": "number",
                "tags": [],
                "label": "maxAlerts",
                "description": [],
                "signature": [
                  "number | undefined"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.PersistenceServices.alertWithPersistence.$4",
                "type": "Function",
                "tags": [],
                "label": "enrichAlerts",
                "description": [],
                "signature": [
                  "((alerts: { _id: string; _source: T; }[], params: { spaceId: string; }) => Promise<{ _id: string; _source: T; }[]>) | undefined"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceServices.alertWithSuppression",
            "type": "Function",
            "tags": [],
            "label": "alertWithSuppression",
            "description": [],
            "signature": [
              "<T extends ",
              "SuppressionFields870",
              ">(alerts: { _id: string; _source: T; }[], suppressionWindow: string, enrichAlerts?: ((alerts: { _id: string; _source: T; }[], params: { spaceId: string; }) => Promise<{ _id: string; _source: T; }[]>) | undefined, currentTimeOverride?: Date | undefined) => Promise<Omit<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.PersistenceAlertServiceResult",
                "text": "PersistenceAlertServiceResult"
              },
              "<T>, \"alertsWereTruncated\">>"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "returnComment": [],
            "children": [
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.PersistenceServices.alertWithSuppression.$1",
                "type": "Array",
                "tags": [],
                "label": "alerts",
                "description": [],
                "signature": [
                  "{ _id: string; _source: T; }[]"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.PersistenceServices.alertWithSuppression.$2",
                "type": "string",
                "tags": [],
                "label": "suppressionWindow",
                "description": [],
                "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.PersistenceServices.alertWithSuppression.$3",
                "type": "Function",
                "tags": [],
                "label": "enrichAlerts",
                "description": [],
                "signature": [
                  "((alerts: { _id: string; _source: T; }[], params: { spaceId: string; }) => Promise<{ _id: string; _source: T; }[]>) | undefined"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
                "deprecated": false,
                "trackAdoption": false
              },
              {
                "parentPluginId": "ruleRegistry",
                "id": "def-server.PersistenceServices.alertWithSuppression.$4",
                "type": "Object",
                "tags": [],
                "label": "currentTimeOverride",
                "description": [],
                "signature": [
                  "Date | undefined"
                ],
                "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
                "deprecated": false,
                "trackAdoption": false
              }
            ]
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RacApiRequestHandlerContext",
        "type": "Interface",
        "tags": [],
        "label": "RacApiRequestHandlerContext",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RacApiRequestHandlerContext.getAlertsClient",
            "type": "Function",
            "tags": [],
            "label": "getAlertsClient",
            "description": [],
            "signature": [
              "() => Promise<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertsClient",
                "text": "AlertsClient"
              },
              ">"
            ],
            "path": "x-pack/plugins/rule_registry/server/types.ts",
            "deprecated": false,
            "trackAdoption": false,
            "children": [],
            "returnComment": []
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataClientConstructorOptions",
        "type": "Interface",
        "tags": [],
        "label": "RuleDataClientConstructorOptions",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClientConstructorOptions.indexInfo",
            "type": "Object",
            "tags": [],
            "label": "indexInfo",
            "description": [],
            "signature": [
              "IndexInfo"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClientConstructorOptions.resourceInstaller",
            "type": "Object",
            "tags": [],
            "label": "resourceInstaller",
            "description": [],
            "signature": [
              "{ installCommonResources: () => Promise<void>; installIndexLevelResources: (indexInfo: ",
              "IndexInfo",
              ") => Promise<void>; installAndUpdateNamespaceLevelResources: (indexInfo: ",
              "IndexInfo",
              ", namespace: string) => Promise<void>; }"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClientConstructorOptions.isWriteEnabled",
            "type": "boolean",
            "tags": [],
            "label": "isWriteEnabled",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClientConstructorOptions.isWriterCacheEnabled",
            "type": "boolean",
            "tags": [],
            "label": "isWriterCacheEnabled",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClientConstructorOptions.waitUntilReadyForReading",
            "type": "Object",
            "tags": [],
            "label": "waitUntilReadyForReading",
            "description": [],
            "signature": [
              "Promise<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.WaitResult",
                "text": "WaitResult"
              },
              ">"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClientConstructorOptions.waitUntilReadyForWriting",
            "type": "Object",
            "tags": [],
            "label": "waitUntilReadyForWriting",
            "description": [],
            "signature": [
              "Promise<",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.WaitResult",
                "text": "WaitResult"
              },
              ">"
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.RuleDataClientConstructorOptions.logger",
            "type": "Object",
            "tags": [],
            "label": "logger",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.AlertAuditAction",
        "type": "Enum",
        "tags": [],
        "label": "AlertAuditAction",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.Dataset",
        "type": "Enum",
        "tags": [],
        "label": "Dataset",
        "description": [
          "\nDataset suffix restricted to a few values. All alerts-as-data indices\nare designed to contain only documents of these \"kinds\"."
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "misc": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.AlertTypeWithExecutor",
        "type": "Type",
        "tags": [],
        "label": "AlertTypeWithExecutor",
        "description": [],
        "signature": [
          "Omit<",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.RuleType",
            "text": "RuleType"
          },
          "<TParams, TParams, TState, { [x: string]: unknown; }, TAlertInstanceContext, string, string>, \"executor\"> & { executor: ",
          "AlertTypeExecutor",
          "<TState, TParams, TAlertInstanceContext, TServices>; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.CreatePersistenceRuleTypeWrapper",
        "type": "Type",
        "tags": [],
        "label": "CreatePersistenceRuleTypeWrapper",
        "description": [],
        "signature": [
          "(options: { ruleDataClient: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataClient",
            "text": "IRuleDataClient"
          },
          "; logger: ",
          {
            "pluginId": "@kbn/logging",
            "scope": "common",
            "docId": "kibKbnLoggingPluginApi",
            "section": "def-common.Logger",
            "text": "Logger"
          },
          "; }) => <TParams extends ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.RuleTypeParams",
            "text": "RuleTypeParams"
          },
          ", TState extends ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.RuleTypeState",
            "text": "RuleTypeState"
          },
          ", TInstanceContext extends { [x: string]: unknown; } = {}, TActionGroupIds extends string = never>(type: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceAlertType",
            "text": "PersistenceAlertType"
          },
          "<TParams, TState, TInstanceContext, TActionGroupIds>) => ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.RuleType",
            "text": "RuleType"
          },
          "<TParams, TParams, TState, { [x: string]: unknown; }, TInstanceContext, TActionGroupIds, never>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.CreatePersistenceRuleTypeWrapper.$1",
            "type": "Object",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "{ ruleDataClient: ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.IRuleDataClient",
                "text": "IRuleDataClient"
              },
              "; logger: ",
              {
                "pluginId": "@kbn/logging",
                "scope": "common",
                "docId": "kibKbnLoggingPluginApi",
                "section": "def-common.Logger",
                "text": "Logger"
              },
              "; }"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.IlmPolicyOptions",
        "type": "Type",
        "tags": [],
        "label": "IlmPolicyOptions",
        "description": [
          "\nWhen initializing an index, a plugin/solution can provide a custom\nILM policy that will be applied to concrete indices of this index.\n\nNote that policy will be shared between all namespaces of the index."
        ],
        "signature": [
          "{ phases: ",
          "IlmPhases",
          "; _meta?: ",
          "Metadata",
          " | undefined; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.INDEX_PREFIX",
        "type": "string",
        "tags": [],
        "label": "INDEX_PREFIX",
        "description": [],
        "signature": [
          "\".alerts\""
        ],
        "path": "x-pack/plugins/rule_registry/server/config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.LifecycleAlertService",
        "type": "Type",
        "tags": [],
        "label": "LifecycleAlertService",
        "description": [],
        "signature": [
          "(alert: { id: string; fields: ExplicitAlertFields; }) => ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.PublicAlert",
            "text": "PublicAlert"
          },
          "<InstanceState, InstanceContext, ActionGroupIds>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.LifecycleAlertService.$1",
            "type": "Object",
            "tags": [],
            "label": "alert",
            "description": [],
            "signature": [
              "{ id: string; fields: ExplicitAlertFields; }"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.LifecycleRuleExecutor",
        "type": "Type",
        "tags": [],
        "label": "LifecycleRuleExecutor",
        "description": [],
        "signature": [
          "(options: ",
          "AlertExecutorOptionsWithExtraServices",
          "<Params, State, InstanceState, InstanceContext, ActionGroupIds, ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.LifecycleAlertServices",
            "text": "LifecycleAlertServices"
          },
          "<InstanceState, InstanceContext, ActionGroupIds>>) => Promise<{ state: State; }>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.LifecycleRuleExecutor.$1",
            "type": "CompoundType",
            "tags": [],
            "label": "options",
            "description": [],
            "signature": [
              "Omit<",
              {
                "pluginId": "alerting",
                "scope": "server",
                "docId": "kibAlertingPluginApi",
                "section": "def-server.RuleExecutorOptions",
                "text": "RuleExecutorOptions"
              },
              "<Params, State, InstanceState, InstanceContext, ActionGroupIds>, \"services\"> & { services: ",
              {
                "pluginId": "alerting",
                "scope": "server",
                "docId": "kibAlertingPluginApi",
                "section": "def-server.RuleExecutorServices",
                "text": "RuleExecutorServices"
              },
              "<InstanceState, InstanceContext, ActionGroupIds> & ",
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.LifecycleAlertServices",
                "text": "LifecycleAlertServices"
              },
              "<InstanceState, InstanceContext, ActionGroupIds>; }"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_executor.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.Mappings",
        "type": "Type",
        "tags": [],
        "label": "Mappings",
        "description": [],
        "signature": [
          "MappingTypeMapping"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.Meta",
        "type": "Type",
        "tags": [],
        "label": "Meta",
        "description": [],
        "signature": [
          "{ [x: string]: any; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.PersistenceAlertService",
        "type": "Type",
        "tags": [],
        "label": "PersistenceAlertService",
        "description": [],
        "signature": [
          "<T>(alerts: { _id: string; _source: T; }[], refresh: boolean | \"wait_for\", maxAlerts?: number | undefined, enrichAlerts?: ((alerts: { _id: string; _source: T; }[], params: { spaceId: string; }) => Promise<{ _id: string; _source: T; }[]>) | undefined) => Promise<",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceAlertServiceResult",
            "text": "PersistenceAlertServiceResult"
          },
          "<T>>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceAlertService.$1",
            "type": "Array",
            "tags": [],
            "label": "alerts",
            "description": [],
            "signature": [
              "{ _id: string; _source: T; }[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceAlertService.$2",
            "type": "CompoundType",
            "tags": [],
            "label": "refresh",
            "description": [],
            "signature": [
              "boolean | \"wait_for\""
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceAlertService.$3",
            "type": "number",
            "tags": [],
            "label": "maxAlerts",
            "description": [],
            "signature": [
              "number | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.PersistenceAlertService.$4",
            "type": "Function",
            "tags": [],
            "label": "enrichAlerts",
            "description": [],
            "signature": [
              "((alerts: { _id: string; _source: T; }[], params: { spaceId: string; }) => Promise<{ _id: string; _source: T; }[]>) | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.PersistenceAlertType",
        "type": "Type",
        "tags": [],
        "label": "PersistenceAlertType",
        "description": [],
        "signature": [
          "Omit<",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.RuleType",
            "text": "RuleType"
          },
          "<TParams, TParams, TState, { [x: string]: unknown; }, TInstanceContext, TActionGroupIds, never>, \"executor\"> & { executor: (options: ",
          {
            "pluginId": "alerting",
            "scope": "server",
            "docId": "kibAlertingPluginApi",
            "section": "def-server.RuleExecutorOptions",
            "text": "RuleExecutorOptions"
          },
          "<TParams, TState, { [x: string]: unknown; }, TInstanceContext, ",
          {
            "pluginId": "alerting",
            "scope": "common",
            "docId": "kibAlertingPluginApi",
            "section": "def-common.WithoutReservedActionGroups",
            "text": "WithoutReservedActionGroups"
          },
          "<TActionGroupIds, never>> & { services: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceServices",
            "text": "PersistenceServices"
          },
          "; }) => Promise<{ state: TState; }>; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleDataPluginService",
        "type": "Type",
        "tags": [],
        "label": "RuleDataPluginService",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.IRuleDataService",
            "text": "IRuleDataService"
          }
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/rule_data_plugin_service.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.RuleRegistryPluginConfig",
        "type": "Type",
        "tags": [],
        "label": "RuleRegistryPluginConfig",
        "description": [],
        "signature": [
          "any"
        ],
        "path": "x-pack/plugins/rule_registry/server/config.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.Settings",
        "type": "Type",
        "tags": [],
        "label": "Settings",
        "description": [],
        "signature": [
          "IndicesIndexSettingsKeys",
          " & { [property: string]: any; }"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.SuppressedAlertService",
        "type": "Type",
        "tags": [],
        "label": "SuppressedAlertService",
        "description": [],
        "signature": [
          "<T extends ",
          "SuppressionFields870",
          ">(alerts: { _id: string; _source: T; }[], suppressionWindow: string, enrichAlerts?: ((alerts: { _id: string; _source: T; }[], params: { spaceId: string; }) => Promise<{ _id: string; _source: T; }[]>) | undefined, currentTimeOverride?: Date | undefined) => Promise<Omit<",
          {
            "pluginId": "ruleRegistry",
            "scope": "server",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-server.PersistenceAlertServiceResult",
            "text": "PersistenceAlertServiceResult"
          },
          "<T>, \"alertsWereTruncated\">>"
        ],
        "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "returnComment": [],
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.SuppressedAlertService.$1",
            "type": "Array",
            "tags": [],
            "label": "alerts",
            "description": [],
            "signature": [
              "{ _id: string; _source: T; }[]"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.SuppressedAlertService.$2",
            "type": "string",
            "tags": [],
            "label": "suppressionWindow",
            "description": [],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.SuppressedAlertService.$3",
            "type": "Function",
            "tags": [],
            "label": "enrichAlerts",
            "description": [],
            "signature": [
              "((alerts: { _id: string; _source: T; }[], params: { spaceId: string; }) => Promise<{ _id: string; _source: T; }[]>) | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.SuppressedAlertService.$4",
            "type": "Object",
            "tags": [],
            "label": "currentTimeOverride",
            "description": [],
            "signature": [
              "Date | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/server/utils/persistence_types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.Version",
        "type": "Type",
        "tags": [],
        "label": "Version",
        "description": [],
        "signature": [
          "number"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_plugin_service/index_options.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.WaitResult",
        "type": "Type",
        "tags": [],
        "label": "WaitResult",
        "description": [],
        "signature": [
          "Left",
          "<Error> | ",
          "Right",
          "<",
          {
            "pluginId": "@kbn/core-elasticsearch-server",
            "scope": "common",
            "docId": "kibKbnCoreElasticsearchServerPluginApi",
            "section": "def-common.ElasticsearchClient",
            "text": "ElasticsearchClient"
          },
          ">"
        ],
        "path": "x-pack/plugins/rule_registry/server/rule_data_client/rule_data_client.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-server.operationAlertAuditActionMap",
        "type": "Object",
        "tags": [],
        "label": "operationAlertAuditActionMap",
        "description": [],
        "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.operationAlertAuditActionMap.WriteOperations.Update",
            "type": "Enum",
            "tags": [],
            "label": "[WriteOperations.Update]",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertAuditAction",
                "text": "AlertAuditAction"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.operationAlertAuditActionMap.ReadOperations.Find",
            "type": "Enum",
            "tags": [],
            "label": "[ReadOperations.Find]",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertAuditAction",
                "text": "AlertAuditAction"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-server.operationAlertAuditActionMap.ReadOperations.Get",
            "type": "Enum",
            "tags": [],
            "label": "[ReadOperations.Get]",
            "description": [],
            "signature": [
              {
                "pluginId": "ruleRegistry",
                "scope": "server",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-server.AlertAuditAction",
                "text": "AlertAuditAction"
              }
            ],
            "path": "x-pack/plugins/rule_registry/server/alert_data_client/audit_events.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "setup": {
      "parentPluginId": "ruleRegistry",
      "id": "def-server.RuleRegistryPluginSetupContract",
      "type": "Interface",
      "tags": [],
      "label": "RuleRegistryPluginSetupContract",
      "description": [],
      "path": "x-pack/plugins/rule_registry/server/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "ruleRegistry",
          "id": "def-server.RuleRegistryPluginSetupContract.ruleDataService",
          "type": "Object",
          "tags": [],
          "label": "ruleDataService",
          "description": [],
          "signature": [
            {
              "pluginId": "ruleRegistry",
              "scope": "server",
              "docId": "kibRuleRegistryPluginApi",
              "section": "def-server.IRuleDataService",
              "text": "IRuleDataService"
            }
          ],
          "path": "x-pack/plugins/rule_registry/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false
        },
        {
          "parentPluginId": "ruleRegistry",
          "id": "def-server.RuleRegistryPluginSetupContract.createLifecycleRuleTypeFactory",
          "type": "Function",
          "tags": [],
          "label": "createLifecycleRuleTypeFactory",
          "description": [],
          "signature": [
            "({ logger, ruleDataClient }: { logger: ",
            {
              "pluginId": "@kbn/logging",
              "scope": "common",
              "docId": "kibKbnLoggingPluginApi",
              "section": "def-common.Logger",
              "text": "Logger"
            },
            "; ruleDataClient: ",
            {
              "pluginId": "ruleRegistry",
              "scope": "server",
              "docId": "kibRuleRegistryPluginApi",
              "section": "def-server.IRuleDataClient",
              "text": "IRuleDataClient"
            },
            "; }) => <TParams extends ",
            {
              "pluginId": "alerting",
              "scope": "common",
              "docId": "kibAlertingPluginApi",
              "section": "def-common.RuleTypeParams",
              "text": "RuleTypeParams"
            },
            ", TAlertInstanceState extends { [x: string]: unknown; }, TAlertInstanceContext extends { [x: string]: unknown; }, TActionGroupIds extends string, TServices extends ",
            {
              "pluginId": "ruleRegistry",
              "scope": "server",
              "docId": "kibRuleRegistryPluginApi",
              "section": "def-server.LifecycleAlertServices",
              "text": "LifecycleAlertServices"
            },
            "<TAlertInstanceState, TAlertInstanceContext, TActionGroupIds>>(type: ",
            {
              "pluginId": "ruleRegistry",
              "scope": "server",
              "docId": "kibRuleRegistryPluginApi",
              "section": "def-server.AlertTypeWithExecutor",
              "text": "AlertTypeWithExecutor"
            },
            "<TAlertInstanceState, TParams, TAlertInstanceContext, TServices>) => ",
            {
              "pluginId": "ruleRegistry",
              "scope": "server",
              "docId": "kibRuleRegistryPluginApi",
              "section": "def-server.AlertTypeWithExecutor",
              "text": "AlertTypeWithExecutor"
            },
            "<TAlertInstanceState, TParams, TAlertInstanceContext, any>"
          ],
          "path": "x-pack/plugins/rule_registry/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "returnComment": [],
          "children": [
            {
              "parentPluginId": "ruleRegistry",
              "id": "def-server.RuleRegistryPluginSetupContract.createLifecycleRuleTypeFactory.$1",
              "type": "Object",
              "tags": [],
              "label": "__0",
              "description": [],
              "signature": [
                "{ logger: ",
                {
                  "pluginId": "@kbn/logging",
                  "scope": "common",
                  "docId": "kibKbnLoggingPluginApi",
                  "section": "def-common.Logger",
                  "text": "Logger"
                },
                "; ruleDataClient: ",
                {
                  "pluginId": "ruleRegistry",
                  "scope": "server",
                  "docId": "kibRuleRegistryPluginApi",
                  "section": "def-server.IRuleDataClient",
                  "text": "IRuleDataClient"
                },
                "; }"
              ],
              "path": "x-pack/plugins/rule_registry/server/utils/create_lifecycle_rule_type_factory.ts",
              "deprecated": false,
              "trackAdoption": false
            }
          ]
        },
        {
          "parentPluginId": "ruleRegistry",
          "id": "def-server.RuleRegistryPluginSetupContract.dataset",
          "type": "Object",
          "tags": [],
          "label": "dataset",
          "description": [],
          "signature": [
            "typeof ",
            {
              "pluginId": "ruleRegistry",
              "scope": "server",
              "docId": "kibRuleRegistryPluginApi",
              "section": "def-server.Dataset",
              "text": "Dataset"
            }
          ],
          "path": "x-pack/plugins/rule_registry/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false
        }
      ],
      "lifecycle": "setup",
      "initialIsOpen": true
    },
    "start": {
      "parentPluginId": "ruleRegistry",
      "id": "def-server.RuleRegistryPluginStartContract",
      "type": "Interface",
      "tags": [],
      "label": "RuleRegistryPluginStartContract",
      "description": [],
      "path": "x-pack/plugins/rule_registry/server/plugin.ts",
      "deprecated": false,
      "trackAdoption": false,
      "children": [
        {
          "parentPluginId": "ruleRegistry",
          "id": "def-server.RuleRegistryPluginStartContract.getRacClientWithRequest",
          "type": "Function",
          "tags": [],
          "label": "getRacClientWithRequest",
          "description": [],
          "signature": [
            "(req: ",
            {
              "pluginId": "@kbn/core-http-server",
              "scope": "common",
              "docId": "kibKbnCoreHttpServerPluginApi",
              "section": "def-common.KibanaRequest",
              "text": "KibanaRequest"
            },
            "<unknown, unknown, unknown, any>) => Promise<",
            {
              "pluginId": "ruleRegistry",
              "scope": "server",
              "docId": "kibRuleRegistryPluginApi",
              "section": "def-server.AlertsClient",
              "text": "AlertsClient"
            },
            ">"
          ],
          "path": "x-pack/plugins/rule_registry/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false,
          "children": [
            {
              "parentPluginId": "ruleRegistry",
              "id": "def-server.RuleRegistryPluginStartContract.getRacClientWithRequest.$1",
              "type": "Object",
              "tags": [],
              "label": "req",
              "description": [],
              "signature": [
                {
                  "pluginId": "@kbn/core-http-server",
                  "scope": "common",
                  "docId": "kibKbnCoreHttpServerPluginApi",
                  "section": "def-common.KibanaRequest",
                  "text": "KibanaRequest"
                },
                "<unknown, unknown, unknown, any>"
              ],
              "path": "x-pack/plugins/rule_registry/server/plugin.ts",
              "deprecated": false,
              "trackAdoption": false,
              "isRequired": true
            }
          ],
          "returnComment": []
        },
        {
          "parentPluginId": "ruleRegistry",
          "id": "def-server.RuleRegistryPluginStartContract.alerting",
          "type": "Object",
          "tags": [],
          "label": "alerting",
          "description": [],
          "signature": [
            {
              "pluginId": "alerting",
              "scope": "server",
              "docId": "kibAlertingPluginApi",
              "section": "def-server.PluginStartContract",
              "text": "PluginStartContract"
            }
          ],
          "path": "x-pack/plugins/rule_registry/server/plugin.ts",
          "deprecated": false,
          "trackAdoption": false
        }
      ],
      "lifecycle": "start",
      "initialIsOpen": true
    }
  },
  "common": {
    "classes": [],
    "functions": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-common.parseTechnicalFields",
        "type": "Function",
        "tags": [],
        "label": "parseTechnicalFields",
        "description": [],
        "signature": [
          "(input: unknown, partial?: boolean) => OutputOf<SetOptional<{ readonly \"event.action\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly tags: { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.risk_score\": { readonly type: \"float\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.author\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.created_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.description\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.enabled\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.from\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.interval\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.license\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.note\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.references\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.rule_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.rule_name_override\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.to\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.type\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_at\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.updated_by\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.severity\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.docs_count\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.field\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.suppression.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.suppression.terms.value\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.system_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.workflow_user\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"ecs.version\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"event.kind\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"@timestamp\": { readonly type: \"date\"; readonly required: true; readonly array: false; }; readonly \"kibana.alert.rule.rule_type_id\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.consumer\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.execution.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.action_group\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.case_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.duration.us\": { readonly type: \"long\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.end\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.flapping\": { readonly type: \"boolean\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.flapping_history\": { readonly type: \"boolean\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.instance.id\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.last_detected\": { readonly type: \"date\"; readonly required: false; readonly array: false; }; readonly \"kibana.alert.reason\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.rule.category\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.name\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.parameters\": { readonly array: false; readonly type: \"flattened\"; readonly ignore_above: 4096; readonly required: false; }; readonly \"kibana.alert.rule.producer\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.rule.tags\": { readonly type: \"keyword\"; readonly array: true; readonly required: false; }; readonly \"kibana.alert.rule.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.start\": { readonly type: \"date\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.status\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.time_range\": { readonly type: \"date_range\"; readonly format: \"epoch_millis||strict_date_optional_time\"; readonly array: false; readonly required: false; }; readonly \"kibana.alert.uuid\": { readonly type: \"keyword\"; readonly array: false; readonly required: true; }; readonly \"kibana.alert.workflow_status\": { readonly type: \"keyword\"; readonly array: false; readonly required: false; }; readonly \"kibana.space_ids\": { readonly type: \"keyword\"; readonly array: true; readonly required: true; }; readonly \"kibana.version\": { readonly type: \"version\"; readonly array: false; readonly required: false; }; }>>"
        ],
        "path": "x-pack/plugins/rule_registry/common/parse_technical_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.parseTechnicalFields.$1",
            "type": "Unknown",
            "tags": [],
            "label": "input",
            "description": [],
            "signature": [
              "unknown"
            ],
            "path": "x-pack/plugins/rule_registry/common/parse_technical_fields.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.parseTechnicalFields.$2",
            "type": "boolean",
            "tags": [],
            "label": "partial",
            "description": [],
            "signature": [
              "boolean"
            ],
            "path": "x-pack/plugins/rule_registry/common/parse_technical_fields.ts",
            "deprecated": false,
            "trackAdoption": false,
            "isRequired": true
          }
        ],
        "returnComment": [],
        "initialIsOpen": false
      }
    ],
    "interfaces": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-common.BrowserField",
        "type": "Interface",
        "tags": [],
        "label": "BrowserField",
        "description": [],
        "path": "x-pack/plugins/rule_registry/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.aggregatable",
            "type": "boolean",
            "tags": [],
            "label": "aggregatable",
            "description": [],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.category",
            "type": "string",
            "tags": [],
            "label": "category",
            "description": [],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.description",
            "type": "CompoundType",
            "tags": [],
            "label": "description",
            "description": [],
            "signature": [
              "string | null | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.example",
            "type": "CompoundType",
            "tags": [],
            "label": "example",
            "description": [],
            "signature": [
              "string | number | null | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.fields",
            "type": "Object",
            "tags": [],
            "label": "fields",
            "description": [],
            "signature": [
              "{ readonly [x: string]: Partial<",
              {
                "pluginId": "ruleRegistry",
                "scope": "common",
                "docId": "kibRuleRegistryPluginApi",
                "section": "def-common.BrowserField",
                "text": "BrowserField"
              },
              ">; }"
            ],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.format",
            "type": "string",
            "tags": [],
            "label": "format",
            "description": [],
            "signature": [
              "string | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.indexes",
            "type": "Array",
            "tags": [],
            "label": "indexes",
            "description": [],
            "signature": [
              "string[]"
            ],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.name",
            "type": "string",
            "tags": [],
            "label": "name",
            "description": [],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.searchable",
            "type": "boolean",
            "tags": [],
            "label": "searchable",
            "description": [],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.type",
            "type": "string",
            "tags": [],
            "label": "type",
            "description": [],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.subType",
            "type": "CompoundType",
            "tags": [],
            "label": "subType",
            "description": [],
            "signature": [
              {
                "pluginId": "@kbn/es-query",
                "scope": "common",
                "docId": "kibKbnEsQueryPluginApi",
                "section": "def-common.IFieldSubType",
                "text": "IFieldSubType"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.readFromDocValues",
            "type": "boolean",
            "tags": [],
            "label": "readFromDocValues",
            "description": [],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.BrowserField.runtimeField",
            "type": "Object",
            "tags": [],
            "label": "runtimeField",
            "description": [],
            "signature": [
              {
                "pluginId": "dataViews",
                "scope": "common",
                "docId": "kibDataViewsPluginApi",
                "section": "def-common.RuntimeField",
                "text": "RuntimeField"
              },
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/common/types.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-common.RuleRegistrySearchRequestPagination",
        "type": "Interface",
        "tags": [],
        "label": "RuleRegistrySearchRequestPagination",
        "description": [],
        "path": "x-pack/plugins/rule_registry/common/search_strategy/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.RuleRegistrySearchRequestPagination.pageIndex",
            "type": "number",
            "tags": [],
            "label": "pageIndex",
            "description": [],
            "path": "x-pack/plugins/rule_registry/common/search_strategy/index.ts",
            "deprecated": false,
            "trackAdoption": false
          },
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.RuleRegistrySearchRequestPagination.pageSize",
            "type": "number",
            "tags": [],
            "label": "pageSize",
            "description": [],
            "path": "x-pack/plugins/rule_registry/common/search_strategy/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-common.RuleRegistrySearchResponse",
        "type": "Interface",
        "tags": [],
        "label": "RuleRegistrySearchResponse",
        "description": [],
        "signature": [
          {
            "pluginId": "ruleRegistry",
            "scope": "common",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-common.RuleRegistrySearchResponse",
            "text": "RuleRegistrySearchResponse"
          },
          " extends ",
          {
            "pluginId": "data",
            "scope": "common",
            "docId": "kibDataSearchPluginApi",
            "section": "def-common.IEsSearchResponse",
            "text": "IEsSearchResponse"
          },
          "<",
          "EcsFieldsResponse",
          ">"
        ],
        "path": "x-pack/plugins/rule_registry/common/search_strategy/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "children": [
          {
            "parentPluginId": "ruleRegistry",
            "id": "def-common.RuleRegistrySearchResponse.inspect",
            "type": "Object",
            "tags": [],
            "label": "inspect",
            "description": [],
            "signature": [
              "RuleRegistryInspect",
              " | undefined"
            ],
            "path": "x-pack/plugins/rule_registry/common/search_strategy/index.ts",
            "deprecated": false,
            "trackAdoption": false
          }
        ],
        "initialIsOpen": false
      }
    ],
    "enums": [],
    "misc": [
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-common.BASE_RAC_ALERTS_API_PATH",
        "type": "string",
        "tags": [],
        "label": "BASE_RAC_ALERTS_API_PATH",
        "description": [],
        "signature": [
          "\"/internal/rac/alerts\""
        ],
        "path": "x-pack/plugins/rule_registry/common/constants.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-common.BrowserFields",
        "type": "Type",
        "tags": [],
        "label": "BrowserFields",
        "description": [],
        "signature": [
          "{ [x: string]: Partial<",
          {
            "pluginId": "ruleRegistry",
            "scope": "common",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-common.BrowserField",
            "text": "BrowserField"
          },
          ">; }"
        ],
        "path": "x-pack/plugins/rule_registry/common/types.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-common.ParsedTechnicalFields",
        "type": "Type",
        "tags": [],
        "label": "ParsedTechnicalFields",
        "description": [],
        "signature": [
          "{ readonly \"@timestamp\": string; readonly \"kibana.alert.rule.rule_type_id\": string; readonly \"kibana.alert.rule.consumer\": string; readonly \"kibana.alert.instance.id\": string; readonly \"kibana.alert.rule.category\": string; readonly \"kibana.alert.rule.name\": string; readonly \"kibana.alert.rule.producer\": string; readonly \"kibana.alert.rule.uuid\": string; readonly \"kibana.alert.status\": string; readonly \"kibana.alert.uuid\": string; readonly \"kibana.space_ids\": string[]; readonly \"event.action\"?: string | undefined; readonly tags?: string[] | undefined; readonly \"kibana.alert.rule.execution.uuid\"?: string | undefined; readonly \"kibana.alert.action_group\"?: string | undefined; readonly \"kibana.alert.case_ids\"?: string[] | undefined; readonly \"kibana.alert.duration.us\"?: number | undefined; readonly \"kibana.alert.end\"?: string | undefined; readonly \"kibana.alert.flapping\"?: boolean | undefined; readonly \"kibana.alert.flapping_history\"?: boolean[] | undefined; readonly \"kibana.alert.last_detected\"?: string | undefined; readonly \"kibana.alert.reason\"?: string | undefined; readonly \"kibana.alert.rule.parameters\"?: { [key: string]: unknown; } | undefined; readonly \"kibana.alert.rule.tags\"?: string[] | undefined; readonly \"kibana.alert.start\"?: string | undefined; readonly \"kibana.alert.time_range\"?: unknown; readonly \"kibana.alert.workflow_status\"?: string | undefined; readonly \"kibana.version\"?: string | undefined; readonly \"kibana.alert.risk_score\"?: number | undefined; readonly \"kibana.alert.rule.author\"?: string | undefined; readonly \"kibana.alert.rule.created_at\"?: string | undefined; readonly \"kibana.alert.rule.created_by\"?: string | undefined; readonly \"kibana.alert.rule.description\"?: string | undefined; readonly \"kibana.alert.rule.enabled\"?: string | undefined; readonly \"kibana.alert.rule.from\"?: string | undefined; readonly \"kibana.alert.rule.interval\"?: string | undefined; readonly \"kibana.alert.rule.license\"?: string | undefined; readonly \"kibana.alert.rule.note\"?: string | undefined; readonly \"kibana.alert.rule.references\"?: string[] | undefined; readonly \"kibana.alert.rule.rule_id\"?: string | undefined; readonly \"kibana.alert.rule.rule_name_override\"?: string | undefined; readonly \"kibana.alert.rule.to\"?: string | undefined; readonly \"kibana.alert.rule.type\"?: string | undefined; readonly \"kibana.alert.rule.updated_at\"?: string | undefined; readonly \"kibana.alert.rule.updated_by\"?: string | undefined; readonly \"kibana.alert.rule.version\"?: string | undefined; readonly \"kibana.alert.severity\"?: string | undefined; readonly \"kibana.alert.suppression.docs_count\"?: number | undefined; readonly \"kibana.alert.suppression.end\"?: string | undefined; readonly \"kibana.alert.suppression.terms.field\"?: string[] | undefined; readonly \"kibana.alert.suppression.start\"?: string | undefined; readonly \"kibana.alert.suppression.terms.value\"?: string[] | undefined; readonly \"kibana.alert.system_status\"?: string | undefined; readonly \"kibana.alert.workflow_reason\"?: string | undefined; readonly \"kibana.alert.workflow_user\"?: string | undefined; readonly \"ecs.version\"?: string | undefined; readonly \"event.kind\"?: string | undefined; }"
        ],
        "path": "x-pack/plugins/rule_registry/common/parse_technical_fields.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      },
      {
        "parentPluginId": "ruleRegistry",
        "id": "def-common.RuleRegistrySearchRequest",
        "type": "Type",
        "tags": [],
        "label": "RuleRegistrySearchRequest",
        "description": [],
        "signature": [
          {
            "pluginId": "data",
            "scope": "common",
            "docId": "kibDataSearchPluginApi",
            "section": "def-common.IEsSearchRequest",
            "text": "IEsSearchRequest"
          },
          " & { featureIds: ",
          {
            "pluginId": "@kbn/rule-data-utils",
            "scope": "common",
            "docId": "kibKbnRuleDataUtilsPluginApi",
            "section": "def-common.AlertConsumers",
            "text": "AlertConsumers"
          },
          "[]; fields?: ",
          "QueryDslFieldAndFormat",
          "[] | undefined; query?: Pick<",
          "QueryDslQueryContainer",
          ", \"ids\" | \"bool\"> | undefined; sort?: ",
          "SortCombinations",
          "[] | undefined; pagination?: ",
          {
            "pluginId": "ruleRegistry",
            "scope": "common",
            "docId": "kibRuleRegistryPluginApi",
            "section": "def-common.RuleRegistrySearchRequestPagination",
            "text": "RuleRegistrySearchRequestPagination"
          },
          " | undefined; }"
        ],
        "path": "x-pack/plugins/rule_registry/common/search_strategy/index.ts",
        "deprecated": false,
        "trackAdoption": false,
        "initialIsOpen": false
      }
    ],
    "objects": []
  }
}