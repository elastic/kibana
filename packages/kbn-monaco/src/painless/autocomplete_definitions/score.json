{
  "suggestions": [
    {
      "label": "String",
      "kind": "class",
      "documentation": "Class: String",
      "insertText": "String",
      "properties": [
        {
          "label": "copyValueOf",
          "kind": "method",
          "documentation": "copyValueOf(char[] a, int b, int c | char[] a): String",
          "insertText": "copyValueOf"
        },
        {
          "label": "format",
          "kind": "method",
          "documentation": "format(Locale a, String b, def[] c | String a, def[] b): String",
          "insertText": "format"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(CharSequence a, Iterable b): String",
          "insertText": "join"
        },
        {
          "label": "valueOf",
          "kind": "method",
          "documentation": "valueOf(def a): String",
          "insertText": "valueOf"
        },
        {
          "label": "charAt",
          "kind": "method",
          "documentation": "charAt(int a): char",
          "insertText": "charAt"
        },
        {
          "label": "chars",
          "kind": "method",
          "documentation": "chars(): IntStream",
          "insertText": "chars"
        },
        {
          "label": "codePointAt",
          "kind": "method",
          "documentation": "codePointAt(int a): int",
          "insertText": "codePointAt"
        },
        {
          "label": "codePointBefore",
          "kind": "method",
          "documentation": "codePointBefore(int a): int",
          "insertText": "codePointBefore"
        },
        {
          "label": "codePointCount",
          "kind": "method",
          "documentation": "codePointCount(int a, int b): int",
          "insertText": "codePointCount"
        },
        {
          "label": "codePoints",
          "kind": "method",
          "documentation": "codePoints(): IntStream",
          "insertText": "codePoints"
        },
        {
          "label": "compareTo",
          "kind": "method",
          "documentation": "compareTo(String a): int",
          "insertText": "compareTo"
        },
        {
          "label": "compareToIgnoreCase",
          "kind": "method",
          "documentation": "compareToIgnoreCase(String a): int",
          "insertText": "compareToIgnoreCase"
        },
        {
          "label": "concat",
          "kind": "method",
          "documentation": "concat(String a): String",
          "insertText": "concat"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(CharSequence a): boolean",
          "insertText": "contains"
        },
        {
          "label": "contentEquals",
          "kind": "method",
          "documentation": "contentEquals(CharSequence a): boolean",
          "insertText": "contentEquals"
        },
        {
          "label": "decodeBase64",
          "kind": "method",
          "documentation": "decodeBase64(): String",
          "insertText": "decodeBase64"
        },
        {
          "label": "encodeBase64",
          "kind": "method",
          "documentation": "encodeBase64(): String",
          "insertText": "encodeBase64"
        },
        {
          "label": "endsWith",
          "kind": "method",
          "documentation": "endsWith(String a): boolean",
          "insertText": "endsWith"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "equalsIgnoreCase",
          "kind": "method",
          "documentation": "equalsIgnoreCase(String a): boolean",
          "insertText": "equalsIgnoreCase"
        },
        {
          "label": "getChars",
          "kind": "method",
          "documentation": "getChars(int a, int b, char[] c, int d): void",
          "insertText": "getChars"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(String a, int b | String a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(String a, int b | String a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "length",
          "kind": "method",
          "documentation": "length(): int",
          "insertText": "length"
        },
        {
          "label": "offsetByCodePoints",
          "kind": "method",
          "documentation": "offsetByCodePoints(int a, int b): int",
          "insertText": "offsetByCodePoints"
        },
        {
          "label": "regionMatches",
          "kind": "method",
          "documentation": "regionMatches(boolean a, int b, String c, int d, int e | int a, String b, int c, int d): boolean",
          "insertText": "regionMatches"
        },
        {
          "label": "replace",
          "kind": "method",
          "documentation": "replace(CharSequence a, CharSequence b): String",
          "insertText": "replace"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(Pattern a, Function b): String",
          "insertText": "replaceAll"
        },
        {
          "label": "replaceFirst",
          "kind": "method",
          "documentation": "replaceFirst(Pattern a, Function b): String",
          "insertText": "replaceFirst"
        },
        {
          "label": "splitOnToken",
          "kind": "method",
          "documentation": "splitOnToken(String a, int b | String a): String[]",
          "insertText": "splitOnToken"
        },
        {
          "label": "startsWith",
          "kind": "method",
          "documentation": "startsWith(String a, int b | String a): boolean",
          "insertText": "startsWith"
        },
        {
          "label": "subSequence",
          "kind": "method",
          "documentation": "subSequence(int a, int b): CharSequence",
          "insertText": "subSequence"
        },
        {
          "label": "substring",
          "kind": "method",
          "documentation": "substring(int a, int b | int a): String",
          "insertText": "substring"
        },
        {
          "label": "toCharArray",
          "kind": "method",
          "documentation": "toCharArray(): char[]",
          "insertText": "toCharArray"
        },
        {
          "label": "toLowerCase",
          "kind": "method",
          "documentation": "toLowerCase(Locale a): String",
          "insertText": "toLowerCase"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        },
        {
          "label": "toUpperCase",
          "kind": "method",
          "documentation": "toUpperCase(Locale a): String",
          "insertText": "toUpperCase"
        },
        {
          "label": "trim",
          "kind": "method",
          "documentation": "trim(): String",
          "insertText": "trim"
        }
      ],
      "constructorDefinition": {
        "label": "String",
        "kind": "constructor",
        "documentation": "Constructor: String",
        "insertText": "String"
      }
    },
    {
      "label": "DenseVectorScriptDocValues",
      "kind": "class",
      "documentation": "Class: DenseVectorScriptDocValues",
      "insertText": "DenseVectorScriptDocValues",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): def",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    },
    {
      "label": "VersionScriptDocValues",
      "kind": "class",
      "documentation": "Class: VersionScriptDocValues",
      "insertText": "VersionScriptDocValues",
      "properties": [
        {
          "label": "add",
          "kind": "method",
          "documentation": "add(int a, def b | def a): void | boolean",
          "insertText": "add"
        },
        {
          "label": "addAll",
          "kind": "method",
          "documentation": "addAll(int a, Collection b | Collection a): boolean",
          "insertText": "addAll"
        },
        {
          "label": "any",
          "kind": "method",
          "documentation": "any(Predicate a): boolean",
          "insertText": "any"
        },
        {
          "label": "asCollection",
          "kind": "method",
          "documentation": "asCollection(): Collection",
          "insertText": "asCollection"
        },
        {
          "label": "asList",
          "kind": "method",
          "documentation": "asList(): List",
          "insertText": "asList"
        },
        {
          "label": "clear",
          "kind": "method",
          "documentation": "clear(): void",
          "insertText": "clear"
        },
        {
          "label": "collect",
          "kind": "method",
          "documentation": "collect(Collection a, Function b | Function a): def | List",
          "insertText": "collect"
        },
        {
          "label": "contains",
          "kind": "method",
          "documentation": "contains(def a): boolean",
          "insertText": "contains"
        },
        {
          "label": "containsAll",
          "kind": "method",
          "documentation": "containsAll(Collection a): boolean",
          "insertText": "containsAll"
        },
        {
          "label": "each",
          "kind": "method",
          "documentation": "each(Consumer a): def",
          "insertText": "each"
        },
        {
          "label": "eachWithIndex",
          "kind": "method",
          "documentation": "eachWithIndex(ObjIntConsumer a): def",
          "insertText": "eachWithIndex"
        },
        {
          "label": "equals",
          "kind": "method",
          "documentation": "equals(Object a): boolean",
          "insertText": "equals"
        },
        {
          "label": "every",
          "kind": "method",
          "documentation": "every(Predicate a): boolean",
          "insertText": "every"
        },
        {
          "label": "find",
          "kind": "method",
          "documentation": "find(Predicate a): def",
          "insertText": "find"
        },
        {
          "label": "findAll",
          "kind": "method",
          "documentation": "findAll(Predicate a): List",
          "insertText": "findAll"
        },
        {
          "label": "findResult",
          "kind": "method",
          "documentation": "findResult(def a, Function b | Function a): def",
          "insertText": "findResult"
        },
        {
          "label": "findResults",
          "kind": "method",
          "documentation": "findResults(Function a): List",
          "insertText": "findResults"
        },
        {
          "label": "forEach",
          "kind": "method",
          "documentation": "forEach(Consumer a): void",
          "insertText": "forEach"
        },
        {
          "label": "get",
          "kind": "method",
          "documentation": "get(int a): String",
          "insertText": "get"
        },
        {
          "label": "getByPath",
          "kind": "method",
          "documentation": "getByPath(String a, Object b | String a): Object",
          "insertText": "getByPath"
        },
        {
          "label": "getLength",
          "kind": "method",
          "documentation": "getLength(): int",
          "insertText": "getLength"
        },
        {
          "label": "getValue",
          "kind": "method",
          "documentation": "getValue(): String",
          "insertText": "getValue"
        },
        {
          "label": "groupBy",
          "kind": "method",
          "documentation": "groupBy(Function a): Map",
          "insertText": "groupBy"
        },
        {
          "label": "hashCode",
          "kind": "method",
          "documentation": "hashCode(): int",
          "insertText": "hashCode"
        },
        {
          "label": "indexOf",
          "kind": "method",
          "documentation": "indexOf(def a): int",
          "insertText": "indexOf"
        },
        {
          "label": "isEmpty",
          "kind": "method",
          "documentation": "isEmpty(): boolean",
          "insertText": "isEmpty"
        },
        {
          "label": "iterator",
          "kind": "method",
          "documentation": "iterator(): Iterator",
          "insertText": "iterator"
        },
        {
          "label": "join",
          "kind": "method",
          "documentation": "join(String a): String",
          "insertText": "join"
        },
        {
          "label": "lastIndexOf",
          "kind": "method",
          "documentation": "lastIndexOf(def a): int",
          "insertText": "lastIndexOf"
        },
        {
          "label": "listIterator",
          "kind": "method",
          "documentation": "listIterator(int a): ListIterator",
          "insertText": "listIterator"
        },
        {
          "label": "remove",
          "kind": "method",
          "documentation": "remove(int a): def",
          "insertText": "remove"
        },
        {
          "label": "removeAll",
          "kind": "method",
          "documentation": "removeAll(Collection a): boolean",
          "insertText": "removeAll"
        },
        {
          "label": "removeIf",
          "kind": "method",
          "documentation": "removeIf(Predicate a): boolean",
          "insertText": "removeIf"
        },
        {
          "label": "replaceAll",
          "kind": "method",
          "documentation": "replaceAll(UnaryOperator a): void",
          "insertText": "replaceAll"
        },
        {
          "label": "retainAll",
          "kind": "method",
          "documentation": "retainAll(Collection a): boolean",
          "insertText": "retainAll"
        },
        {
          "label": "set",
          "kind": "method",
          "documentation": "set(int a, def b): def",
          "insertText": "set"
        },
        {
          "label": "size",
          "kind": "method",
          "documentation": "size(): int",
          "insertText": "size"
        },
        {
          "label": "sort",
          "kind": "method",
          "documentation": "sort(Comparator a): void",
          "insertText": "sort"
        },
        {
          "label": "split",
          "kind": "method",
          "documentation": "split(Predicate a): List",
          "insertText": "split"
        },
        {
          "label": "spliterator",
          "kind": "method",
          "documentation": "spliterator(): Spliterator",
          "insertText": "spliterator"
        },
        {
          "label": "stream",
          "kind": "method",
          "documentation": "stream(): Stream",
          "insertText": "stream"
        },
        {
          "label": "subList",
          "kind": "method",
          "documentation": "subList(int a, int b): List",
          "insertText": "subList"
        },
        {
          "label": "sum",
          "kind": "method",
          "documentation": "sum(ToDoubleFunction a): double",
          "insertText": "sum"
        },
        {
          "label": "toArray",
          "kind": "method",
          "documentation": "toArray(def[] a): def[]",
          "insertText": "toArray"
        },
        {
          "label": "toString",
          "kind": "method",
          "documentation": "toString(): String",
          "insertText": "toString"
        }
      ]
    }
  ]
}