/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { generatePackagesBuildBazelFile } from './generate_packages_build_bazel_file';

import { Package } from './package';

it('produces a valid BUILD.bazel file', () => {
  const packages = [
    new Package(
      'foo',
      {},
      `
        rule(
          name = "build"
        )
        rule(
          name =   "build_types"
        )
      `
    ),
    new Package(
      'bar',
      {},
      `
        rule(
          name= "build_types"
        )
      `
    ),
    new Package(
      'bar',
      {},
      `
        rule(
          name ="build"
        )
      `
    ),
    new Package('bar', {}),
  ];

  expect(generatePackagesBuildBazelFile(packages)).toMatchInlineSnapshot(`
    "################
    ################
    ## This file is automatically generated, to create a new package use \`node scripts/generate package --help\`
    ################
    ################

    # It will build all declared code packages
    filegroup(
      name = \\"build_pkg_code\\",
      srcs = [
        \\"//foo:build\\",
        \\"//bar:build\\",
      ],
    )

    # It will build all declared package types
    filegroup(
      name = \\"build_pkg_types\\",
      srcs = [
        \\"//foo:build_types\\",
        \\"//bar:build_types\\",
      ],
    )

    # Grouping target to call all underlying packages build
    # targets so we can build them all at once
    # It will auto build all declared code packages and types packages
    filegroup(
      name = \\"build\\",
      srcs = [
        \\":build_pkg_code\\",
        \\":build_pkg_types\\"
      ],
    )
    "
  `);
});
