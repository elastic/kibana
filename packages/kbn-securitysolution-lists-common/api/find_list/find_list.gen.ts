/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Find lists API endpoint
 *   version: 2023-10-31
 */

import { z } from 'zod';

import { NonEmptyString } from '@kbn/openapi-common/schemas/primitives.gen';
import { List } from '../model/list_schemas.gen';

export type FindListsCursor = z.infer<typeof FindListsCursor>;
export const FindListsCursor = NonEmptyString;

export type FindListsFilter = z.infer<typeof FindListsFilter>;
export const FindListsFilter = NonEmptyString;

export type FindListsRequestQuery = z.infer<typeof FindListsRequestQuery>;
export const FindListsRequestQuery = z.object({
  /**
   * The page number to return
   */
  page: z.coerce.number().int().optional(),
  /**
   * The number of lists to return per page
   */
  per_page: z.coerce.number().int().optional(),
  /**
   * Determines which field is used to sort the results
   */
  sort_field: NonEmptyString.optional(),
  /**
   * Determines the sort order, which can be `desc` or `asc`
   */
  sort_order: z.enum(['desc', 'asc']).optional(),
  /** 
      * Returns the list that come after the last list returned in the previous call
(use the cursor value returned in the previous call). This parameter uses
the `tie_breaker_id` field to ensure all lists are sorted and returned correctly.
 
      */
  cursor: FindListsCursor.optional(),
  /** 
      * Filters the returned results according to the value of the specified field,
using the <field name>:<field value> syntax.
 
      */
  filter: FindListsFilter.optional(),
});
export type FindListsRequestQueryInput = z.input<typeof FindListsRequestQuery>;

export type FindListsResponse = z.infer<typeof FindListsResponse>;
export const FindListsResponse = z.object({
  data: z.array(List),
  page: z.number().int().min(0),
  per_page: z.number().int().min(0),
  total: z.number().int().min(0),
  cursor: FindListsCursor,
});
