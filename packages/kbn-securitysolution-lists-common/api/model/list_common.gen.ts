/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common List Attributes
 *   version: not applicable
 */

import { z } from 'zod';

import { NonEmptyString } from '@kbn/openapi-common/schemas/primitives.gen';

export type ListId = z.infer<typeof ListId>;
export const ListId = NonEmptyString;

export type ListType = z.infer<typeof ListType>;
export const ListType = z.enum([
  'binary',
  'boolean',
  'byte',
  'date',
  'date_nanos',
  'date_range',
  'double',
  'double_range',
  'float',
  'float_range',
  'geo_point',
  'geo_shape',
  'half_float',
  'integer',
  'integer_range',
  'ip',
  'ip_range',
  'keyword',
  'long',
  'long_range',
  'shape',
  'short',
  'text',
]);
export type ListTypeEnum = typeof ListType.enum;
export const ListTypeEnum = ListType.enum;

export type ListName = z.infer<typeof ListName>;
export const ListName = NonEmptyString;

export type ListDescription = z.infer<typeof ListDescription>;
export const ListDescription = NonEmptyString;

export type ListMetadata = z.infer<typeof ListMetadata>;
export const ListMetadata = z.object({}).catchall(z.unknown());

export type ListItemId = z.infer<typeof ListItemId>;
export const ListItemId = NonEmptyString;

export type ListItemValue = z.infer<typeof ListItemValue>;
export const ListItemValue = NonEmptyString;

export type ListItemDescription = z.infer<typeof ListItemDescription>;
export const ListItemDescription = NonEmptyString;

export type ListItemMetadata = z.infer<typeof ListItemMetadata>;
export const ListItemMetadata = z.object({}).catchall(z.unknown());
