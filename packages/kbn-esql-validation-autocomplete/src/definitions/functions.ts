/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

// NOTE: This file is generated by the generate_function_definitions.ts script
// Do not edit it manually

import type { ESQLFunction } from '@kbn/esql-ast';
import { i18n } from '@kbn/i18n';
import { isLiteralItem } from '../shared/helpers';
import type { FunctionDefinition } from './types';

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const absDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'abs',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.abs', {
    defaultMessage: 'Returns the absolute value.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW number = -1.0 \n| EVAL abs_number = ABS(number)',
    'FROM employees\n| KEEP first_name, last_name, height\n| EVAL abs_height = ABS(0.0 - height)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const acosDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'acos',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.acos', {
    defaultMessage: 'Returns the arccosine of `n` as an angle, expressed in radians.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=.9\n| EVAL acos=ACOS(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const asinDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'asin',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.asin', {
    defaultMessage:
      'Returns the arcsine of the input\nnumeric expression as an angle, expressed in radians.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=.9\n| EVAL asin=ASIN(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const atanDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'atan',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.atan', {
    defaultMessage:
      'Returns the arctangent of the input\nnumeric expression as an angle, expressed in radians.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=12.9\n| EVAL atan=ATAN(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const atan2Definition: FunctionDefinition = {
  type: 'eval',
  name: 'atan2',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.atan2', {
    defaultMessage:
      'The angle between the positive x-axis and the ray from the\norigin to the point (x , y) in the Cartesian plane, expressed in radians.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'y_coordinate',
          type: 'number',
          optional: false,
        },
        {
          name: 'x_coordinate',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW y=12.9, x=.6\n| EVAL atan2=ATAN2(y, x)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const cbrtDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'cbrt',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.cbrt', {
    defaultMessage:
      'Returns the cube root of a number. The input can be any numeric value, the return value is always a double.\nCube roots of infinities are null.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW d = 1000.0\n| EVAL c = cbrt(d)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const ceilDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'ceil',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.ceil', {
    defaultMessage: 'Round a number up to the nearest integer.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=1.8\n| EVAL a=CEIL(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const cidrMatchDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'cidr_match',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.cidr_match', {
    defaultMessage:
      'Returns true if the provided IP is contained in one of the provided CIDR blocks.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'ip',
          type: 'ip',
          optional: false,
        },
        {
          name: 'blockX',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 2,
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM hosts \n| WHERE CIDR_MATCH(ip1, "127.0.0.2/32", "127.0.0.3/32") \n| KEEP card, host, ip0, ip1',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const coalesceDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'coalesce',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.coalesce', {
    defaultMessage:
      'Returns the first of its arguments that is not null. If all arguments are null, it returns `null`.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'first',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'boolean',
          optional: false,
        },
        {
          name: 'rest',
          type: 'boolean',
          optional: true,
        },
      ],
      returnType: 'boolean',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'rest',
          type: 'cartesian_point',
          optional: true,
        },
      ],
      returnType: 'cartesian_point',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'rest',
          type: 'cartesian_shape',
          optional: true,
        },
      ],
      returnType: 'cartesian_shape',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'date',
          optional: false,
        },
        {
          name: 'rest',
          type: 'date',
          optional: true,
        },
      ],
      returnType: 'date',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'rest',
          type: 'geo_point',
          optional: true,
        },
      ],
      returnType: 'geo_point',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'rest',
          type: 'geo_shape',
          optional: true,
        },
      ],
      returnType: 'geo_shape',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'number',
          optional: false,
        },
        {
          name: 'rest',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'number',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'ip',
          optional: false,
        },
        {
          name: 'rest',
          type: 'ip',
          optional: true,
        },
      ],
      returnType: 'ip',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'string',
          optional: false,
        },
        {
          name: 'rest',
          type: 'string',
          optional: true,
        },
      ],
      returnType: 'string',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'version',
          optional: false,
        },
        {
          name: 'rest',
          type: 'version',
          optional: true,
        },
      ],
      returnType: 'version',
      minParams: 1,
    },
  ],
  supportedCommands: ['stats', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=null, b="b"\n| EVAL COALESCE(a, b)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const concatDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'concat',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.concat', {
    defaultMessage: 'Concatenates two or more strings.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string1',
          type: 'string',
          optional: false,
        },
        {
          name: 'string2',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
      minParams: 2,
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM employees\n| KEEP first_name, last_name\n| EVAL fullname = CONCAT(first_name, " ", last_name)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const cosDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'cos',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.cos', {
    defaultMessage: 'Returns the cosine of an angle.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'angle',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=1.8 \n| EVAL cos=COS(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const coshDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'cosh',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.cosh', {
    defaultMessage: 'Returns the hyperbolic cosine of an angle.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'angle',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=1.8 \n| EVAL cosh=COSH(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const dateDiffDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'date_diff',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.date_diff', {
    defaultMessage:
      'Subtracts the `startTimestamp` from the `endTimestamp` and returns the difference in multiples of `unit`.\nIf `startTimestamp` is later than the `endTimestamp`, negative values are returned.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'unit',
          type: 'string',
          optional: false,
          literalOptions: [
            'year',
            'years',
            'yy',
            'yyyy',
            'quarter',
            'quarters',
            'qq',
            'q',
            'month',
            'months',
            'mm',
            'm',
            'dayofyear',
            'dy',
            'y',
            'day',
            'days',
            'dd',
            'd',
            'week',
            'weeks',
            'wk',
            'ww',
            'weekday',
            'weekdays',
            'dw',
            'hour',
            'hours',
            'hh',
            'minute',
            'minutes',
            'mi',
            'n',
            'second',
            'seconds',
            'ss',
            's',
            'millisecond',
            'milliseconds',
            'ms',
            'microsecond',
            'microseconds',
            'mcs',
            'nanosecond',
            'nanoseconds',
            'ns',
          ],
          literalSuggestions: [
            'year',
            'quarter',
            'month',
            'week',
            'day',
            'hour',
            'minute',
            'second',
            'millisecond',
            'microsecond',
            'nanosecond',
          ],
        },
        {
          name: 'startTimestamp',
          type: 'date',
          optional: false,
        },
        {
          name: 'endTimestamp',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW date1 = TO_DATETIME("2023-12-02T11:00:00.000Z"), date2 = TO_DATETIME("2023-12-02T11:00:00.001Z")\n| EVAL dd_ms = DATE_DIFF("microseconds", date1, date2)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const dateExtractDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'date_extract',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.date_extract', {
    defaultMessage: 'Extracts parts of a date, like year, month, day, hour.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'datePart',
          type: 'chrono_literal',
          optional: false,
        },
        {
          name: 'date',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW date = DATE_PARSE("yyyy-MM-dd", "2022-05-06")\n| EVAL year = DATE_EXTRACT("year", date)',
    'FROM sample_data\n| WHERE DATE_EXTRACT("hour_of_day", @timestamp) < 9 AND DATE_EXTRACT("hour_of_day", @timestamp) >= 17',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const dateFormatDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'date_format',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.date_format', {
    defaultMessage: 'Returns a string representation of a date, in the provided format.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'dateFormat',
          type: 'string',
          optional: true,
        },
        {
          name: 'date',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM employees\n| KEEP first_name, last_name, hire_date\n| EVAL hired = DATE_FORMAT("YYYY-MM-dd", hire_date)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const dateParseDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'date_parse',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.date_parse', {
    defaultMessage:
      'Returns a date by parsing the second argument using the format specified in the first argument.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'datePattern',
          type: 'string',
          optional: true,
        },
        {
          name: 'dateString',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'date',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW date_string = "2022-05-06"\n| EVAL date = DATE_PARSE("yyyy-MM-dd", date_string)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const dateTruncDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'date_trunc',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.date_trunc', {
    defaultMessage: 'Rounds down a date to the closest interval.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'interval',
          type: 'time_literal',
          optional: false,
        },
        {
          name: 'date',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'interval',
          type: 'date',
          optional: false,
        },
        {
          name: 'date',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM employees\n| KEEP first_name, last_name, hire_date\n| EVAL year_hired = DATE_TRUNC(1 year, hire_date)',
    'FROM employees\n| EVAL year = DATE_TRUNC(1 year, hire_date)\n| STATS hires = COUNT(emp_no) BY year\n| SORT year',
    'FROM sample_data\n| EVAL error = CASE(message LIKE "*error*", 1, 0)\n| EVAL hour = DATE_TRUNC(1 hour, @timestamp)\n| STATS error_rate = AVG(error) by hour\n| SORT hour',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const eDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'e',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.e', {
    defaultMessage: "Returns Euler's number.",
  }),
  alias: undefined,
  signatures: [
    {
      params: [],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW E()'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const endsWithDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'ends_with',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.ends_with', {
    defaultMessage:
      'Returns a boolean that indicates whether a keyword string ends with another string.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'str',
          type: 'string',
          optional: false,
        },
        {
          name: 'suffix',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['FROM employees\n| KEEP last_name\n| EVAL ln_E = ENDS_WITH(last_name, "d")'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const floorDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'floor',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.floor', {
    defaultMessage: 'Round a number down to the nearest integer.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=1.8\n| EVAL a=FLOOR(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const fromBase64Definition: FunctionDefinition = {
  type: 'eval',
  name: 'from_base64',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.from_base64', {
    defaultMessage: 'Decode a base64 string.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['row a = "ZWxhc3RpYw==" \n| eval d = from_base64(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const greatestDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'greatest',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.greatest', {
    defaultMessage:
      'Returns the maximum value from multiple columns. This is similar to `MV_MAX`\nexcept it is intended to run on multiple columns at once.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'first',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'boolean',
          optional: false,
        },
        {
          name: 'rest',
          type: 'boolean',
          optional: true,
        },
      ],
      returnType: 'boolean',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'number',
          optional: false,
        },
        {
          name: 'rest',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'number',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'ip',
          optional: false,
        },
        {
          name: 'rest',
          type: 'ip',
          optional: true,
        },
      ],
      returnType: 'ip',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'string',
          optional: false,
        },
        {
          name: 'rest',
          type: 'string',
          optional: true,
        },
      ],
      returnType: 'string',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'version',
          optional: false,
        },
        {
          name: 'rest',
          type: 'version',
          optional: true,
        },
      ],
      returnType: 'version',
      minParams: 1,
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a = 10, b = 20\n| EVAL g = GREATEST(a, b)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const ipPrefixDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'ip_prefix',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.ip_prefix', {
    defaultMessage: 'Truncates an IP to a given prefix length.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'ip',
          type: 'ip',
          optional: false,
        },
        {
          name: 'prefixLengthV4',
          type: 'number',
          optional: false,
        },
        {
          name: 'prefixLengthV6',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
  ],
  supportedCommands: ['stats', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'row ip4 = to_ip("1.2.3.4"), ip6 = to_ip("fe80::cae2:65ff:fece:feb9")\n| eval ip4_prefix = ip_prefix(ip4, 24, 0), ip6_prefix = ip_prefix(ip6, 0, 112);',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const leastDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'least',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.least', {
    defaultMessage:
      'Returns the minimum value from multiple columns. This is similar to `MV_MIN` except it is intended to run on multiple columns at once.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'first',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'boolean',
          optional: false,
        },
        {
          name: 'rest',
          type: 'boolean',
          optional: true,
        },
      ],
      returnType: 'boolean',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'number',
          optional: false,
        },
        {
          name: 'rest',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'number',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'ip',
          optional: false,
        },
        {
          name: 'rest',
          type: 'ip',
          optional: true,
        },
      ],
      returnType: 'ip',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'string',
          optional: false,
        },
        {
          name: 'rest',
          type: 'string',
          optional: true,
        },
      ],
      returnType: 'string',
      minParams: 1,
    },
    {
      params: [
        {
          name: 'first',
          type: 'version',
          optional: false,
        },
        {
          name: 'rest',
          type: 'version',
          optional: true,
        },
      ],
      returnType: 'version',
      minParams: 1,
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a = 10, b = 20\n| EVAL l = LEAST(a, b)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const leftDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'left',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.left', {
    defaultMessage:
      "Returns the substring that extracts 'length' chars from 'string' starting from the left.",
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
        {
          name: 'length',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM employees\n| KEEP last_name\n| EVAL left = LEFT(last_name, 3)\n| SORT last_name ASC\n| LIMIT 5',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const lengthDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'length',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.length', {
    defaultMessage: 'Returns the character length of a string.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['FROM employees\n| KEEP first_name, last_name\n| EVAL fn_length = LENGTH(first_name)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const locateDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'locate',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.locate', {
    defaultMessage:
      'Returns an integer that indicates the position of a keyword substring within another string',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
        {
          name: 'substring',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
        {
          name: 'substring',
          type: 'string',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['row a = "hello"\n| eval a_ll = locate(a, "ll")'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const logDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'log',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.log', {
    defaultMessage:
      'Returns the logarithm of a value to a base. The input can be any numeric value, the return value is always a double.\n\nLogs of zero, negative numbers, and base of one return `null` as well as a warning.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'base',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'base',
          type: 'number',
          optional: true,
        },
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: (fnDef: ESQLFunction) => {
    const messages = [];
    // do not really care here about the base and field
    // just need to check both values are not negative
    for (const arg of fnDef.args) {
      if (isLiteralItem(arg) && Number(arg.value) < 0) {
        messages.push({
          type: 'warning' as const,
          code: 'logOfNegativeValue',
          text: i18n.translate(
            'kbn-esql-validation-autocomplete.esql.divide.warning.logOfNegativeValue',
            {
              defaultMessage: 'Log of a negative number results in null: {value}',
              values: {
                value: arg.value,
              },
            }
          ),
          location: arg.location,
        });
      }
    }
    return messages;
  },
  examples: [
    'ROW base = 2.0, value = 8.0\n| EVAL s = LOG(base, value)',
    'row value = 100\n| EVAL s = LOG(value);',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const log10Definition: FunctionDefinition = {
  type: 'eval',
  name: 'log10',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.log10', {
    defaultMessage:
      'Returns the logarithm of a value to base 10. The input can be any numeric value, the return value is always a double.\n\nLogs of 0 and negative numbers return `null` as well as a warning.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: (fnDef: ESQLFunction) => {
    const messages = [];
    // do not really care here about the base and field
    // just need to check both values are not negative
    for (const arg of fnDef.args) {
      if (isLiteralItem(arg) && Number(arg.value) < 0) {
        messages.push({
          type: 'warning' as const,
          code: 'logOfNegativeValue',
          text: i18n.translate(
            'kbn-esql-validation-autocomplete.esql.divide.warning.logOfNegativeValue',
            {
              defaultMessage: 'Log of a negative number results in null: {value}',
              values: {
                value: arg.value,
              },
            }
          ),
          location: arg.location,
        });
      }
    }
    return messages;
  },
  examples: ['ROW d = 1000.0 \n| EVAL s = LOG10(d)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const ltrimDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'ltrim',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.ltrim', {
    defaultMessage: 'Removes leading whitespaces from a string.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW message = "   some text  ",  color = " red "\n| EVAL message = LTRIM(message)\n| EVAL color = LTRIM(color)\n| EVAL message = CONCAT("\'", message, "\'")\n| EVAL color = CONCAT("\'", color, "\'")',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvAppendDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_append',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_append', {
    defaultMessage: 'Concatenates values of two multi-value fields.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field1',
          type: 'boolean',
          optional: false,
        },
        {
          name: 'field2',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field1',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'field2',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'cartesian_point',
    },
    {
      params: [
        {
          name: 'field1',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'field2',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'cartesian_shape',
    },
    {
      params: [
        {
          name: 'field1',
          type: 'date',
          optional: false,
        },
        {
          name: 'field2',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field1',
          type: 'number',
          optional: false,
        },
        {
          name: 'field2',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field1',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'field2',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'geo_point',
    },
    {
      params: [
        {
          name: 'field1',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'field2',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'geo_shape',
    },
    {
      params: [
        {
          name: 'field1',
          type: 'ip',
          optional: false,
        },
        {
          name: 'field2',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field1',
          type: 'string',
          optional: false,
        },
        {
          name: 'field2',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field1',
          type: 'version',
          optional: false,
        },
        {
          name: 'field2',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'version',
    },
  ],
  supportedCommands: ['stats', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvAvgDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_avg',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_avg', {
    defaultMessage:
      'Converts a multivalued field into a single valued field containing the average of all of the values.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=[3, 5, 1, 6]\n| EVAL avg_a = MV_AVG(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvConcatDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_concat',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_concat', {
    defaultMessage:
      'Converts a multivalued string expression into a single valued column containing the concatenation of all values separated by a delimiter.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
        {
          name: 'delim',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW a=["foo", "zoo", "bar"]\n| EVAL j = MV_CONCAT(a, ", ")',
    'ROW a=[10, 9, 8]\n| EVAL j = MV_CONCAT(TO_STRING(a), ", ")',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvCountDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_count',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_count', {
    defaultMessage:
      'Converts a multivalued expression into a single valued column containing a count of the number of values.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=["foo", "zoo", "bar"]\n| EVAL count_a = MV_COUNT(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvDedupeDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_dedupe',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_dedupe', {
    defaultMessage: 'Remove duplicate values from a multivalued field.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'cartesian_point',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'cartesian_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'geo_point',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'geo_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'version',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=["foo", "foo", "bar", "foo"]\n| EVAL dedupe_a = MV_DEDUPE(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvFirstDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_first',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_first', {
    defaultMessage:
      "Converts a multivalued expression into a single valued column containing the\nfirst value. This is most useful when reading from a function that emits\nmultivalued columns in a known order like `SPLIT`.\n\nThe order that  multivalued fields are read from\nunderlying storage is not guaranteed. It is *frequently* ascending, but don't\nrely on that. If you need the minimum value use `MV_MIN` instead of\n`MV_FIRST`. `MV_MIN` has optimizations for sorted values so there isn't a\nperformance benefit to `MV_FIRST`.",
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'cartesian_point',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'cartesian_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'geo_point',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'geo_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'version',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a="foo;bar;baz"\n| EVAL first_a = MV_FIRST(SPLIT(a, ";"))'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvLastDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_last',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_last', {
    defaultMessage:
      "Converts a multivalue expression into a single valued column containing the last\nvalue. This is most useful when reading from a function that emits multivalued\ncolumns in a known order like `SPLIT`.\n\nThe order that  multivalued fields are read from\nunderlying storage is not guaranteed. It is *frequently* ascending, but don't\nrely on that. If you need the maximum value use `MV_MAX` instead of\n`MV_LAST`. `MV_MAX` has optimizations for sorted values so there isn't a\nperformance benefit to `MV_LAST`.",
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'cartesian_point',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'cartesian_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'geo_point',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'geo_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'version',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a="foo;bar;baz"\n| EVAL last_a = MV_LAST(SPLIT(a, ";"))'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvMaxDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_max',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_max', {
    defaultMessage:
      'Converts a multivalued expression into a single valued column containing the maximum value.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'version',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW a=[3, 5, 1]\n| EVAL max_a = MV_MAX(a)',
    'ROW a=["foo", "zoo", "bar"]\n| EVAL max_a = MV_MAX(a)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvMedianDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_median',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_median', {
    defaultMessage:
      'Converts a multivalued field into a single valued field containing the median value.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW a=[3, 5, 1]\n| EVAL median_a = MV_MEDIAN(a)',
    'ROW a=[3, 7, 1, 6]\n| EVAL median_a = MV_MEDIAN(a)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvMinDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_min',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_min', {
    defaultMessage:
      'Converts a multivalued expression into a single valued column containing the minimum value.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'version',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW a=[2, 1]\n| EVAL min_a = MV_MIN(a)',
    'ROW a=["foo", "bar"]\n| EVAL min_a = MV_MIN(a)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvSliceDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_slice',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_slice', {
    defaultMessage:
      'Returns a subset of the multivalued field using the start and end index values.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'end',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'end',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'cartesian_point',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'end',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'cartesian_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'end',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'end',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'end',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'geo_point',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'end',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'geo_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'end',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'end',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'end',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'version',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'row a = [1, 2, 2, 3]\n| eval a1 = mv_slice(a, 1), a2 = mv_slice(a, 2, 3)',
    'row a = [1, 2, 2, 3]\n| eval a1 = mv_slice(a, -2), a2 = mv_slice(a, -3, -1)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvSortDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_sort',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_sort', {
    defaultMessage: 'Sorts a multivalued field in lexicographical order.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
        {
          name: 'order',
          type: 'string',
          optional: true,
          literalOptions: ['asc', 'desc'],
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
        {
          name: 'order',
          type: 'string',
          optional: true,
          literalOptions: ['asc', 'desc'],
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
        {
          name: 'order',
          type: 'string',
          optional: true,
          literalOptions: ['asc', 'desc'],
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
        {
          name: 'order',
          type: 'string',
          optional: true,
          literalOptions: ['asc', 'desc'],
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
        {
          name: 'order',
          type: 'string',
          optional: true,
          literalOptions: ['asc', 'desc'],
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
        {
          name: 'order',
          type: 'string',
          optional: true,
          literalOptions: ['asc', 'desc'],
        },
      ],
      returnType: 'version',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a = [4, 2, -3, 2]\n| EVAL sa = mv_sort(a), sd = mv_sort(a, "DESC")'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvSumDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_sum',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_sum', {
    defaultMessage:
      'Converts a multivalued field into a single valued field containing the sum of all of the values.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=[3, 5, 6]\n| EVAL sum_a = MV_SUM(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const mvZipDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'mv_zip',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.mv_zip', {
    defaultMessage:
      'Combines the values from two multivalued fields with a delimiter that joins them together.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string1',
          type: 'string',
          optional: false,
        },
        {
          name: 'string2',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'string1',
          type: 'string',
          optional: false,
        },
        {
          name: 'string2',
          type: 'string',
          optional: false,
        },
        {
          name: 'delim',
          type: 'string',
          optional: true,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW a = ["x", "y", "z"], b = ["1", "2"]\n| EVAL c = mv_zip(a, b, "-")\n| KEEP a, b, c',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const nowDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'now',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.now', {
    defaultMessage: 'Returns current date and time.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [],
      returnType: 'date',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW current_date = NOW()', 'FROM sample_data\n| WHERE @timestamp > NOW() - 1 hour'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const piDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'pi',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.pi', {
    defaultMessage: "Returns Pi, the ratio of a circle's circumference to its diameter.",
  }),
  alias: undefined,
  signatures: [
    {
      params: [],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW PI()'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const powDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'pow',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.pow', {
    defaultMessage: 'Returns the value of `base` raised to the power of `exponent`.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'base',
          type: 'number',
          optional: false,
        },
        {
          name: 'exponent',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW base = 2.0, exponent = 2\n| EVAL result = POW(base, exponent)',
    'ROW base = 4, exponent = 0.5\n| EVAL s = POW(base, exponent)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const repeatDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'repeat',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.repeat', {
    defaultMessage:
      'Returns a string constructed by concatenating `string` with itself the specified `number` of times.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a = "Hello!"\n| EVAL triple_a = REPEAT(a, 3);'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const replaceDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'replace',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.replace', {
    defaultMessage:
      'The function substitutes in the string `str` any match of the regular expression `regex`\nwith the replacement string `newStr`.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
        {
          name: 'regex',
          type: 'string',
          optional: false,
        },
        {
          name: 'newString',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW str = "Hello World"\n| EVAL str = REPLACE(str, "World", "Universe")\n| KEEP str'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const rightDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'right',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.right', {
    defaultMessage:
      "Return the substring that extracts 'length' chars from 'str' starting from the right.",
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
        {
          name: 'length',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM employees\n| KEEP last_name\n| EVAL right = RIGHT(last_name, 3)\n| SORT last_name ASC\n| LIMIT 5',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const roundDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'round',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.round', {
    defaultMessage:
      'Rounds a number to the specified number of decimal places.\nDefaults to 0, which returns the nearest integer. If the\nprecision is a negative number, rounds to the number of digits left\nof the decimal point.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
        {
          name: 'decimals',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM employees\n| KEEP first_name, last_name, height\n| EVAL height_ft = ROUND(height * 3.281, 1)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const rtrimDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'rtrim',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.rtrim', {
    defaultMessage: 'Removes trailing whitespaces from a string.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW message = "   some text  ",  color = " red "\n| EVAL message = RTRIM(message)\n| EVAL color = RTRIM(color)\n| EVAL message = CONCAT("\'", message, "\'")\n| EVAL color = CONCAT("\'", color, "\'")',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const signumDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'signum',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.signum', {
    defaultMessage:
      'Returns the sign of the given number.\nIt returns `-1` for negative numbers, `0` for `0` and `1` for positive numbers.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW d = 100.0\n| EVAL s = SIGNUM(d)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const sinDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'sin',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.sin', {
    defaultMessage: 'Returns ths Sine trigonometric function of an angle.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'angle',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=1.8 \n| EVAL sin=SIN(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const sinhDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'sinh',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.sinh', {
    defaultMessage: 'Returns the hyperbolic sine of an angle.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'angle',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=1.8 \n| EVAL sinh=SINH(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const splitDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'split',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.split', {
    defaultMessage: 'Split a single valued string into multiple strings.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
        {
          name: 'delim',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW words="foo;bar;baz;qux;quux;corge"\n| EVAL word = SPLIT(words, ";")'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const sqrtDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'sqrt',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.sqrt', {
    defaultMessage:
      'Returns the square root of a number. The input can be any numeric value, the return value is always a double.\nSquare roots of negative numbers and infinities are null.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW d = 100.0\n| EVAL s = SQRT(d)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const stContainsDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'st_contains',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.st_contains', {
    defaultMessage:
      'Returns whether the first geometry contains the second geometry.\nThis is the inverse of the `ST_WITHIN` function.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM airport_city_boundaries\n| WHERE ST_CONTAINS(city_boundary, TO_GEOSHAPE("POLYGON((109.35 18.3, 109.45 18.3, 109.45 18.4, 109.35 18.4, 109.35 18.3))"))\n| KEEP abbrev, airport, region, city, city_location',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const stDisjointDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'st_disjoint',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.st_disjoint', {
    defaultMessage:
      'Returns whether the two geometries or geometry columns are disjoint.\nThis is the inverse of the `ST_INTERSECTS` function.\nIn mathematical terms: ST_Disjoint(A, B) ⇔ A ⋂ B = ∅',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM airport_city_boundaries\n| WHERE ST_DISJOINT(city_boundary, TO_GEOSHAPE("POLYGON((-10 -60, 120 -60, 120 60, -10 60, -10 -60))"))\n| KEEP abbrev, airport, region, city, city_location',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const stIntersectsDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'st_intersects',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.st_intersects', {
    defaultMessage:
      'Returns true if two geometries intersect.\nThey intersect if they have any point in common, including their interior points\n(points along lines or within polygons).\nThis is the inverse of the `ST_DISJOINT` function.\nIn mathematical terms: ST_Intersects(A, B) ⇔ A ⋂ B ≠ ∅',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM airports\n| WHERE ST_INTERSECTS(location, TO_GEOSHAPE("POLYGON((42 14, 43 14, 43 15, 42 15, 42 14))"))',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const stWithinDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'st_within',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.st_within', {
    defaultMessage:
      'Returns whether the first geometry is within the second geometry.\nThis is the inverse of the `ST_CONTAINS` function.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'cartesian_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_point',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'geomA',
          type: 'geo_shape',
          optional: false,
        },
        {
          name: 'geomB',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM airport_city_boundaries\n| WHERE ST_WITHIN(city_boundary, TO_GEOSHAPE("POLYGON((109.1 18.15, 109.6 18.15, 109.6 18.65, 109.1 18.65, 109.1 18.15))"))\n| KEEP abbrev, airport, region, city, city_location',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const stXDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'st_x',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.st_x', {
    defaultMessage:
      'Extracts the `x` coordinate from the supplied point.\nIf the points is of type `geo_point` this is equivalent to extracting the `longitude` value.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'point',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'point',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW point = TO_GEOPOINT("POINT(42.97109629958868 14.7552534006536)")\n| EVAL x =  ST_X(point), y = ST_Y(point)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const stYDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'st_y',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.st_y', {
    defaultMessage:
      'Extracts the `y` coordinate from the supplied point.\nIf the points is of type `geo_point` this is equivalent to extracting the `latitude` value.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'point',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'point',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW point = TO_GEOPOINT("POINT(42.97109629958868 14.7552534006536)")\n| EVAL x =  ST_X(point), y = ST_Y(point)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const startsWithDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'starts_with',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.starts_with', {
    defaultMessage:
      'Returns a boolean that indicates whether a keyword string starts with another string.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'str',
          type: 'string',
          optional: false,
        },
        {
          name: 'prefix',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['FROM employees\n| KEEP last_name\n| EVAL ln_S = STARTS_WITH(last_name, "B")'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const substringDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'substring',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.substring', {
    defaultMessage:
      'Returns a substring of a string, specified by a start position and an optional length',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
        {
          name: 'start',
          type: 'number',
          optional: false,
        },
        {
          name: 'length',
          type: 'number',
          optional: true,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'FROM employees\n| KEEP last_name\n| EVAL ln_sub = SUBSTRING(last_name, 1, 3)',
    'FROM employees\n| KEEP last_name\n| EVAL ln_sub = SUBSTRING(last_name, -3, 3)',
    'FROM employees\n| KEEP last_name\n| EVAL ln_sub = SUBSTRING(last_name, 2)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const tanDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'tan',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.tan', {
    defaultMessage: 'Returns the Tangent trigonometric function of an angle.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'angle',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=1.8 \n| EVAL tan=TAN(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const tanhDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'tanh',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.tanh', {
    defaultMessage: 'Returns the Tangent hyperbolic function of an angle.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'angle',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=1.8 \n| EVAL tanh=TANH(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const tauDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'tau',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.tau', {
    defaultMessage: "Returns the ratio of a circle's circumference to its radius.",
  }),
  alias: undefined,
  signatures: [
    {
      params: [],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW TAU()'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toBase64Definition: FunctionDefinition = {
  type: 'eval',
  name: 'to_base64',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_base64', {
    defaultMessage: 'Encode a string to a base64 string.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['row a = "elastic" \n| eval e = to_base64(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toBooleanDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_boolean',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_boolean', {
    defaultMessage:
      'Converts an input value to a boolean value.\nA string value of *true* will be case-insensitive converted to the Boolean *true*.\nFor anything else, including the empty string, the function will return *false*.\nThe numerical value of *0* will be converted to *false*, anything else will be converted to *true*.',
  }),
  alias: ['to_bool'],
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'boolean',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW str = ["true", "TRuE", "false", "", "yes", "1"]\n| EVAL bool = TO_BOOLEAN(str)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toCartesianpointDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_cartesianpoint',
  description: i18n.translate(
    'kbn-esql-validation-autocomplete.esql.definitions.to_cartesianpoint',
    {
      defaultMessage:
        'Converts an input value to a `cartesian_point` value.\nA string will only be successfully converted if it respects WKT Point format.',
    }
  ),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'cartesian_point',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'cartesian_point',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW wkt = ["POINT(4297.11 -1475.53)", "POINT(7580.93 2272.77)"]\n| MV_EXPAND wkt\n| EVAL pt = TO_CARTESIANPOINT(wkt)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toCartesianshapeDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_cartesianshape',
  description: i18n.translate(
    'kbn-esql-validation-autocomplete.esql.definitions.to_cartesianshape',
    {
      defaultMessage:
        'Converts an input value to a `cartesian_shape` value.\nA string will only be successfully converted if it respects WKT format.',
    }
  ),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'cartesian_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'cartesian_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'cartesian_shape',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW wkt = ["POINT(4297.11 -1475.53)", "POLYGON ((3339584.72 1118889.97, 4452779.63 4865942.27, 2226389.81 4865942.27, 1113194.90 2273030.92, 3339584.72 1118889.97))"]\n| MV_EXPAND wkt\n| EVAL geom = TO_CARTESIANSHAPE(wkt)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toDatetimeDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_datetime',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_datetime', {
    defaultMessage:
      "Converts an input value to a date value.\nA string will only be successfully converted if it's respecting the format `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`.\nTo convert dates in other formats, use `DATE_PARSE`.",
  }),
  alias: ['to_dt'],
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'date',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'date',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW string = ["1953-09-02T00:00:00.000Z", "1964-06-02T00:00:00.000Z", "1964-06-02 00:00:00"]\n| EVAL datetime = TO_DATETIME(string)',
    'ROW int = [0, 1]\n| EVAL dt = TO_DATETIME(int)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toDegreesDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_degrees',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_degrees', {
    defaultMessage: 'Converts a number in radians to degrees.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW rad = [1.57, 3.14, 4.71]\n| EVAL deg = TO_DEGREES(rad)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toDoubleDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_double',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_double', {
    defaultMessage:
      'Converts an input value to a double value. If the input parameter is of a date type,\nits value will be interpreted as milliseconds since the Unix epoch,\nconverted to double. Boolean *true* will be converted to double *1.0*, *false* to *0.0*.',
  }),
  alias: ['to_dbl'],
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW str1 = "5.20128E11", str2 = "foo"\n| EVAL dbl = TO_DOUBLE("520128000000"), dbl1 = TO_DOUBLE(str1), dbl2 = TO_DOUBLE(str2)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toGeopointDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_geopoint',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_geopoint', {
    defaultMessage:
      'Converts an input value to a `geo_point` value.\nA string will only be successfully converted if it respects WKT Point format.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'geo_point',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'geo_point',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW wkt = "POINT(42.97109630194 14.7552534413725)"\n| EVAL pt = TO_GEOPOINT(wkt)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toGeoshapeDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_geoshape',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_geoshape', {
    defaultMessage:
      'Converts an input value to a `geo_shape` value.\nA string will only be successfully converted if it respects WKT format.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'geo_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'geo_shape',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'geo_shape',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW wkt = "POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"\n| EVAL geom = TO_GEOSHAPE(wkt)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toIntegerDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_integer',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_integer', {
    defaultMessage:
      'Converts an input value to an integer value.\nIf the input parameter is of a date type, its value will be interpreted as milliseconds\nsince the Unix epoch, converted to integer.\nBoolean *true* will be converted to integer *1*, *false* to *0*.',
  }),
  alias: ['to_int'],
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW long = [5013792, 2147483647, 501379200000]\n| EVAL int = TO_INTEGER(long)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toIpDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_ip',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_ip', {
    defaultMessage: 'Converts an input string to an IP value.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'ip',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW str1 = "1.1.1.1", str2 = "foo"\n| EVAL ip1 = TO_IP(str1), ip2 = TO_IP(str2)\n| WHERE CIDR_MATCH(ip1, "1.0.0.0/8")',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toLongDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_long',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_long', {
    defaultMessage:
      'Converts an input value to a long value. If the input parameter is of a date type,\nits value will be interpreted as milliseconds since the Unix epoch, converted to long.\nBoolean *true* will be converted to long *1*, *false* to *0*.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW str1 = "2147483648", str2 = "2147483648.2", str3 = "foo"\n| EVAL long1 = TO_LONG(str1), long2 = TO_LONG(str2), long3 = TO_LONG(str3)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toLowerDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_lower',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_lower', {
    defaultMessage: 'Returns a new string representing the input string converted to lower case.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'str',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW message = "Some Text"\n| EVAL message_lower = TO_LOWER(message)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toRadiansDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_radians',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_radians', {
    defaultMessage: 'Converts a number in degrees to radians.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'number',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW deg = [90.0, 180.0, 270.0]\n| EVAL rad = TO_RADIANS(deg)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toStringDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_string',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_string', {
    defaultMessage: 'Converts an input value into a string.',
  }),
  alias: ['to_str'],
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_point',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'cartesian_shape',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_point',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'geo_shape',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'ip',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW a=10\n| EVAL j = TO_STRING(a)', 'ROW a=[10, 9, 8]\n| EVAL j = TO_STRING(a)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toUnsignedLongDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_unsigned_long',
  description: i18n.translate(
    'kbn-esql-validation-autocomplete.esql.definitions.to_unsigned_long',
    {
      defaultMessage:
        'Converts an input value to an unsigned long value. If the input parameter is of a date type,\nits value will be interpreted as milliseconds since the Unix epoch, converted to unsigned long.\nBoolean *true* will be converted to unsigned long *1*, *false* to *0*.',
    }
  ),
  alias: ['to_ul', 'to_ulong'],
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'boolean',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'date',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'number',
          optional: false,
        },
      ],
      returnType: 'number',
    },
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'number',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW str1 = "2147483648", str2 = "2147483648.2", str3 = "foo"\n| EVAL long1 = TO_UNSIGNED_LONG(str1), long2 = TO_ULONG(str2), long3 = TO_UL(str3)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toUpperDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_upper',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_upper', {
    defaultMessage: 'Returns a new string representing the input string converted to upper case.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'str',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW message = "Some Text"\n| EVAL message_upper = TO_UPPER(message)'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const toVersionDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'to_version',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.to_version', {
    defaultMessage: 'Converts an input string to a version value.',
  }),
  alias: ['to_ver'],
  signatures: [
    {
      params: [
        {
          name: 'field',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'version',
    },
    {
      params: [
        {
          name: 'field',
          type: 'version',
          optional: false,
        },
      ],
      returnType: 'version',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: ['ROW v = TO_VERSION("1.2.3")'],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const trimDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'trim',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.trim', {
    defaultMessage: 'Removes leading and trailing whitespaces from a string.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'string',
          type: 'string',
          optional: false,
        },
      ],
      returnType: 'string',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'ROW message = "   some text  ",  color = " red "\n| EVAL message = TRIM(message)\n| EVAL color = TRIM(color)',
  ],
};

// Do not edit this manually... generated by scripts/generate_function_definitions.ts
const caseDefinition: FunctionDefinition = {
  type: 'eval',
  name: 'case',
  description: i18n.translate('kbn-esql-validation-autocomplete.esql.definitions.case', {
    defaultMessage:
      'Accepts pairs of conditions and values. The function returns the value that belongs to the first condition that evaluates to `true`. If the number of arguments is odd, the last argument is the default value which is returned when no condition matches.',
  }),
  alias: undefined,
  signatures: [
    {
      params: [
        {
          name: 'condition',
          type: 'boolean',
        },
        {
          name: 'value',
          type: 'any',
        },
      ],
      minParams: 2,
      returnType: 'any',
    },
  ],
  supportedCommands: ['stats', 'metrics', 'eval', 'where', 'row', 'sort'],
  supportedOptions: ['by'],
  validate: undefined,
  examples: [
    'from index | eval type = case(languages <= 1, "monolingual", languages <= 2, "bilingual", "polyglot")',
  ],
};
export const evalFunctionDefinitions = [
  absDefinition,
  acosDefinition,
  asinDefinition,
  atanDefinition,
  atan2Definition,
  cbrtDefinition,
  ceilDefinition,
  cidrMatchDefinition,
  coalesceDefinition,
  concatDefinition,
  cosDefinition,
  coshDefinition,
  dateDiffDefinition,
  dateExtractDefinition,
  dateFormatDefinition,
  dateParseDefinition,
  dateTruncDefinition,
  eDefinition,
  endsWithDefinition,
  floorDefinition,
  fromBase64Definition,
  greatestDefinition,
  ipPrefixDefinition,
  leastDefinition,
  leftDefinition,
  lengthDefinition,
  locateDefinition,
  logDefinition,
  log10Definition,
  ltrimDefinition,
  mvAppendDefinition,
  mvAvgDefinition,
  mvConcatDefinition,
  mvCountDefinition,
  mvDedupeDefinition,
  mvFirstDefinition,
  mvLastDefinition,
  mvMaxDefinition,
  mvMedianDefinition,
  mvMinDefinition,
  mvSliceDefinition,
  mvSortDefinition,
  mvSumDefinition,
  mvZipDefinition,
  nowDefinition,
  piDefinition,
  powDefinition,
  repeatDefinition,
  replaceDefinition,
  rightDefinition,
  roundDefinition,
  rtrimDefinition,
  signumDefinition,
  sinDefinition,
  sinhDefinition,
  splitDefinition,
  sqrtDefinition,
  stContainsDefinition,
  stDisjointDefinition,
  stIntersectsDefinition,
  stWithinDefinition,
  stXDefinition,
  stYDefinition,
  startsWithDefinition,
  substringDefinition,
  tanDefinition,
  tanhDefinition,
  tauDefinition,
  toBase64Definition,
  toBooleanDefinition,
  toCartesianpointDefinition,
  toCartesianshapeDefinition,
  toDatetimeDefinition,
  toDegreesDefinition,
  toDoubleDefinition,
  toGeopointDefinition,
  toGeoshapeDefinition,
  toIntegerDefinition,
  toIpDefinition,
  toLongDefinition,
  toLowerDefinition,
  toRadiansDefinition,
  toStringDefinition,
  toUnsignedLongDefinition,
  toUpperDefinition,
  toVersionDefinition,
  trimDefinition,
  caseDefinition,
];
