{
  "testCases": [
    {
      "query": "m",
      "error": [
        "SyntaxError: mismatched input 'm' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "metrics ",
      "error": [
        "SyntaxError: missing INDEX_UNQUOTED_IDENTIFIER at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "metrics index",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics index, other_index",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics index, other_index,.secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "METRICS .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "mEtRiCs .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics ind*, other*",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics index*",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics *a_i*dex*",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics in*ex*",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics *n*ex",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics *n*ex*",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics i*d*x*",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics i*d*x",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics i***x*",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics i****",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics i**",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics index**",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics *ex",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics *ex*",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics in*ex",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics ind*ex",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics *,-.*",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics remote-*:indexes*",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics remote-*:indexes",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics remote-ccs:indexes",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index, remote-ccs:indexes",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics index,",
      "error": [
        "SyntaxError: missing INDEX_UNQUOTED_IDENTIFIER at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "metrics index\n, \tother_index\t,\n \t ",
      "error": [
        "SyntaxError: missing INDEX_UNQUOTED_IDENTIFIER at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "metrics index = 1",
      "error": [
        "SyntaxError: token recognition error at: '1'",
        "SyntaxError: token recognition error at: '='"
      ],
      "warning": []
    },
    {
      "query": "metrics `index`",
      "error": [
        "SyntaxError: token recognition error at: '`'",
        "SyntaxError: token recognition error at: '`'"
      ],
      "warning": []
    },
    {
      "query": "METRICS index, missingIndex",
      "error": [
        "Unknown index [missingIndex]"
      ],
      "warning": []
    },
    {
      "query": "METRICS average()",
      "error": [
        "Unknown index [average()]"
      ],
      "warning": []
    },
    {
      "query": "metrics custom_function()",
      "error": [
        "Unknown index [custom_function()]"
      ],
      "warning": []
    },
    {
      "query": "metrics indexes*",
      "error": [
        "Unknown index [indexes*]"
      ],
      "warning": []
    },
    {
      "query": "metrics numberField",
      "error": [
        "Unknown index [numberField]"
      ],
      "warning": []
    },
    {
      "query": "metrics policy",
      "error": [
        "Unknown index [policy]"
      ],
      "warning": []
    },
    {
      "query": "METRICS a_index count()",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField) by 1",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index count(`numberField`)",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index count(*)",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics index var0 = count(*)",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index var0 = count()",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index var0 = avg(numberField), count(*)",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index sum(case(false, 0, 1))",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index var0 = sum( case(false, 0, 1))",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index count(stringField == \"a\" or null)",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index numberField=",
      "error": [
        {
          "inverse": false
        },
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index numberField=5 by ",
      "error": [
        {
          "inverse": false
        },
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index var0 = avg(fn(number)), count(*)",
      "error": [
        "Unknown function [fn]"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index numberField + 1",
      "error": [
        "At least one aggregation function required in [METRICS], found [numberField+1]"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index a = numberField + 1",
      "error": [
        "At least one aggregation function required in [METRICS], found [a=numberField+1]"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index a = numberField + 1, stringField",
      "error": [
        "At least one aggregation function required in [METRICS], found [a=numberField+1]",
        "Expected an aggregate function or group but got [stringField] of type [FieldAttribute]"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index numberField + 1 by ipField",
      "error": [
        "At least one aggregation function required in [METRICS], found [numberField+1]"
      ],
      "warning": []
    },
    {
      "query": "METRICS a_index sum( numberField ) + abs( numberField ) ",
      "error": [
        "Cannot combine aggregation and non-aggregation values in [METRICS], found [sum(numberField)+abs(numberField)]"
      ],
      "warning": []
    },
    {
      "query": "METRICS a_index abs( numberField + sum( numberField )) ",
      "error": [
        "Cannot combine aggregation and non-aggregation values in [METRICS], found [abs(numberField+sum(numberField))]"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index numberField ",
      "error": [
        "Expected an aggregate function or group but got [numberField] of type [FieldAttribute]"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index count(`numberField`) | keep `count(``numberField``)` ",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index count(`numberField`) | drop `count(``numberField``)` ",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index count(`numberField`) | eval `count(``numberField``)` ",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index count(round(*))",
      "error": [
        "Using wildcards (*) in round is not allowed"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index count(count(*))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [count(*)] of type [number]"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField), percentile(numberField, 50) by ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField), percentile(numberField, 50) BY ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField), percentile(numberField, 50) + 1 by ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField) by stringField | limit 100",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField) + percentile(numberField, 50) BY ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField) - percentile(numberField, 50) BY ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField) * percentile(numberField, 50) BY ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField) / percentile(numberField, 50) BY ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField) % percentile(numberField, 50) BY ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "metrics a_index BY stringField",
      "error": [
        "Expected an aggregate function or group but got [BY] of type [FieldAttribute]",
        "SyntaxError: extraneous input 'stringField' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index count(* + 1) BY ipField",
      "error": [
        {
          "inverse": false
        },
        "SyntaxError: no viable alternative at input 'count(* +'"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index \n count(* + round(numberField)) BY ipField",
      "error": [
        {
          "inverse": false
        },
        "SyntaxError: no viable alternative at input 'count(* +'"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index count(round(*)) BY ipField",
      "error": [
        "Using wildcards (*) in round is not allowed"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index count(count(*)) BY ipField",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [count(*)] of type [number]"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField) by wrongField",
      "error": [
        "Unknown column [wrongField]"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField) by wrongField + 1",
      "error": [
        "Unknown column [wrongField]"
      ],
      "warning": []
    },
    {
      "query": "metrics a_index avg(numberField) by var0 = wrongField + 1",
      "error": [
        "Unknown column [wrongField]"
      ],
      "warning": []
    },
    {
      "query": "METRICS a_index  avg(numberField) by percentile(numberField)",
      "error": [
        "METRICS BY does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "METRICS a_index avg(numberField) by stringField, percentile(numberField) by ipField",
      "error": [
        "METRICS BY does not support function percentile",
        "SyntaxError: mismatched input 'by' expecting <EOF>"
      ],
      "warning": []
    }
  ]
}