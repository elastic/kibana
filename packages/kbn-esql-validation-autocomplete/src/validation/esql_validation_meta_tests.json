{
  "indexes": [
    "a_index",
    "index",
    "other_index",
    ".secret_index",
    "my-index",
    "unsupported_index"
  ],
  "fields": [
    {
      "name": "booleanField",
      "type": "boolean"
    },
    {
      "name": "dateField",
      "type": "date"
    },
    {
      "name": "doubleField",
      "type": "double"
    },
    {
      "name": "ipField",
      "type": "ip"
    },
    {
      "name": "keywordField",
      "type": "keyword"
    },
    {
      "name": "integerField",
      "type": "integer"
    },
    {
      "name": "longField",
      "type": "long"
    },
    {
      "name": "textField",
      "type": "text"
    },
    {
      "name": "unsignedLongField",
      "type": "unsigned_long"
    },
    {
      "name": "versionField",
      "type": "version"
    },
    {
      "name": "cartesianPointField",
      "type": "cartesian_point"
    },
    {
      "name": "cartesianShapeField",
      "type": "cartesian_shape"
    },
    {
      "name": "geoPointField",
      "type": "geo_point"
    },
    {
      "name": "geoShapeField",
      "type": "geo_shape"
    },
    {
      "name": "counterIntegerField",
      "type": "counter_integer"
    },
    {
      "name": "counterLongField",
      "type": "counter_long"
    },
    {
      "name": "counterDoubleField",
      "type": "counter_double"
    },
    {
      "name": "any#Char$Field",
      "type": "double"
    },
    {
      "name": "kubernetes.something.something",
      "type": "double"
    },
    {
      "name": "@timestamp",
      "type": "date"
    },
    {
      "name": "otherStringField",
      "type": "keyword"
    }
  ],
  "enrichFields": [
    {
      "name": "otherField",
      "type": "text"
    },
    {
      "name": "yetAnotherField",
      "type": "double"
    },
    {
      "name": "otherStringField",
      "type": "keyword"
    }
  ],
  "policies": [
    {
      "name": "policy",
      "sourceIndices": [
        "enrich_index"
      ],
      "matchField": "otherStringField",
      "enrichFields": [
        "otherField",
        "yetAnotherField"
      ]
    },
    {
      "name": "policy$",
      "sourceIndices": [
        "enrich_index"
      ],
      "matchField": "otherStringField",
      "enrichFields": [
        "otherField",
        "yetAnotherField"
      ]
    }
  ],
  "unsupported_field": [
    {
      "name": "unsupported_field",
      "type": "unsupported"
    }
  ],
  "testCases": [
    {
      "query": "",
      "error": [],
      "warning": []
    },
    {
      "query": " ",
      "error": [],
      "warning": []
    },
    {
      "query": "     ",
      "error": [],
      "warning": []
    },
    {
      "query": "eval",
      "error": [
        "SyntaxError: mismatched input 'eval' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "stats",
      "error": [
        "SyntaxError: mismatched input 'stats' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "rename",
      "error": [
        "SyntaxError: mismatched input 'rename' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "limit",
      "error": [
        "SyntaxError: mismatched input 'limit' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "keep",
      "error": [
        "SyntaxError: mismatched input 'keep' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "drop",
      "error": [
        "SyntaxError: mismatched input 'drop' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "mv_expand",
      "error": [
        "SyntaxError: mismatched input 'mv_expand' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "dissect",
      "error": [
        "SyntaxError: mismatched input 'dissect' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "grok",
      "error": [
        "SyntaxError: mismatched input 'grok' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "row",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "row missing_column",
      "error": [
        "Unknown column [missing_column]"
      ],
      "warning": []
    },
    {
      "query": "row fn()",
      "error": [
        "Unknown function [fn]"
      ],
      "warning": []
    },
    {
      "query": "row missing_column, missing_column2",
      "error": [
        "Unknown column [missing_column]",
        "Unknown column [missing_column2]"
      ],
      "warning": []
    },
    {
      "query": "row a=1",
      "error": [],
      "warning": []
    },
    {
      "query": "row a=1, missing_column",
      "error": [
        "Unknown column [missing_column]"
      ],
      "warning": []
    },
    {
      "query": "row a=1, b = average()",
      "error": [
        "Unknown function [average]"
      ],
      "warning": []
    },
    {
      "query": "row a = [1, 2, 3]",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [true, false]",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [\"a\", \"b\"]",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = null",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = (1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = (1, 2, 3)",
      "error": [
        "SyntaxError: no viable alternative at input '(1,'",
        "SyntaxError: extraneous input ')' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "row a=NOT true",
      "error": [],
      "warning": []
    },
    {
      "query": "row NOT true",
      "error": [],
      "warning": []
    },
    {
      "query": "row a=NOT false",
      "error": [],
      "warning": []
    },
    {
      "query": "row NOT false",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 1 in ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting '('"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 in (",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "Error: [in] function expects exactly 2 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "row var = 1 not in ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting '('"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 not in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 1 in (1, 2, 3, round(5))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" not in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 1 in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 not in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 not in (1, 2, 3, \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true and false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true and null",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null and false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null and null",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true or false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true or null",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null or false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null or null",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField > 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 > 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") > to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() > now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false > false",
      "error": [
        "Argument of [>] must be [date], found value [false] type [boolean]",
        "Argument of [>] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() > \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" > now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField >= 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 >= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") >= to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() >= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false >= false",
      "error": [
        "Argument of [>=] must be [date], found value [false] type [boolean]",
        "Argument of [>=] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() >= \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" >= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField < 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 < 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") < to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() < now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false < false",
      "error": [
        "Argument of [<] must be [date], found value [false] type [boolean]",
        "Argument of [<] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() < \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" < now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField <= 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 <= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") <= to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() <= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false <= false",
      "error": [
        "Argument of [<=] must be [date], found value [false] type [boolean]",
        "Argument of [<=] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() <= \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" <= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField == 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 == 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") == to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() == now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false == false",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() == \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" == now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField != 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 != 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") != to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() != now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false != false",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() != \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" != now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 1 + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 + 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + now()",
      "error": [
        "Argument of [+] must be [date_period], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 - 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 - 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - now()",
      "error": [
        "Argument of [-] must be [date_period], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 * 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 * 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * now()",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 / 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 / 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() / now()",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 % 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 % 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() % now()",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = \"a\" like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = 5 NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = \"a\" rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = 5 NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_sort([\"a\", \"b\"], \"bogus\")",
      "error": [],
      "warning": [
        "Invalid option [\"bogus\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "row var = mv_sort([\"a\", \"b\"], \"ASC\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort([\"a\", \"b\"], \"DESC\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 anno",
      "error": [
        "ROW does not support [date_period] in expression [1 anno]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 anno",
      "error": [
        "Unexpected time interval qualifier: 'anno'"
      ],
      "warning": []
    },
    {
      "query": "row now() + 1 anno",
      "error": [
        "Unexpected time interval qualifier: 'anno'"
      ],
      "warning": []
    },
    {
      "query": "row 1 year",
      "error": [
        "ROW does not support [date_period] in expression [1 year]"
      ],
      "warning": []
    },
    {
      "query": "row 1                year",
      "error": [
        "ROW does not support [date_period] in expression [1 year]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 YEAR",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 year + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 year",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 year",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 year",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 years",
      "error": [
        "ROW does not support [date_period] in expression [1 years]"
      ],
      "warning": []
    },
    {
      "query": "row 1                years",
      "error": [
        "ROW does not support [date_period] in expression [1 years]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 YEARS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Years",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 years + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 years",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 years",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 years",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 quarter",
      "error": [
        "ROW does not support [date_period] in expression [1 quarter]"
      ],
      "warning": []
    },
    {
      "query": "row 1                quarter",
      "error": [
        "ROW does not support [date_period] in expression [1 quarter]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 QUARTER",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 quarter + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 quarter",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 quarter",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 quarter",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 quarters",
      "error": [
        "ROW does not support [date_period] in expression [1 quarters]"
      ],
      "warning": []
    },
    {
      "query": "row 1                quarters",
      "error": [
        "ROW does not support [date_period] in expression [1 quarters]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 QUARTERS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 quarters + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 quarters",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 quarters",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 quarters",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 month",
      "error": [
        "ROW does not support [date_period] in expression [1 month]"
      ],
      "warning": []
    },
    {
      "query": "row 1                month",
      "error": [
        "ROW does not support [date_period] in expression [1 month]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MONTH",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Month",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 month + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 month",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 month",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 month",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 months",
      "error": [
        "ROW does not support [date_period] in expression [1 months]"
      ],
      "warning": []
    },
    {
      "query": "row 1                months",
      "error": [
        "ROW does not support [date_period] in expression [1 months]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MONTHS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Months",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 months + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 months",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 months",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 months",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 week",
      "error": [
        "ROW does not support [date_period] in expression [1 week]"
      ],
      "warning": []
    },
    {
      "query": "row 1                week",
      "error": [
        "ROW does not support [date_period] in expression [1 week]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 WEEK",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Week",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 week + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 week",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 week",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 week",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 weeks",
      "error": [
        "ROW does not support [date_period] in expression [1 weeks]"
      ],
      "warning": []
    },
    {
      "query": "row 1                weeks",
      "error": [
        "ROW does not support [date_period] in expression [1 weeks]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 WEEKS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 weeks + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 weeks",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 weeks",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 weeks",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 day",
      "error": [
        "ROW does not support [date_period] in expression [1 day]"
      ],
      "warning": []
    },
    {
      "query": "row 1                day",
      "error": [
        "ROW does not support [date_period] in expression [1 day]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 DAY",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Day",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 day + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 day",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 day",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 day",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 days",
      "error": [
        "ROW does not support [date_period] in expression [1 days]"
      ],
      "warning": []
    },
    {
      "query": "row 1                days",
      "error": [
        "ROW does not support [date_period] in expression [1 days]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 DAYS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Days",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 days + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 days",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 days",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 days",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 hour",
      "error": [
        "ROW does not support [date_period] in expression [1 hour]"
      ],
      "warning": []
    },
    {
      "query": "row 1                hour",
      "error": [
        "ROW does not support [date_period] in expression [1 hour]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 HOUR",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Hour",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 hour + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 hour",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 hour",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 hour",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 hours",
      "error": [
        "ROW does not support [date_period] in expression [1 hours]"
      ],
      "warning": []
    },
    {
      "query": "row 1                hours",
      "error": [
        "ROW does not support [date_period] in expression [1 hours]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 HOURS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Hours",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 hours + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 hours",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 hours",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 hours",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 minute",
      "error": [
        "ROW does not support [date_period] in expression [1 minute]"
      ],
      "warning": []
    },
    {
      "query": "row 1                minute",
      "error": [
        "ROW does not support [date_period] in expression [1 minute]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MINUTE",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Minute",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 minute + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 minute",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 minute",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 minute",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 minutes",
      "error": [
        "ROW does not support [date_period] in expression [1 minutes]"
      ],
      "warning": []
    },
    {
      "query": "row 1                minutes",
      "error": [
        "ROW does not support [date_period] in expression [1 minutes]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MINUTES",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 minutes + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 minutes",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 minutes",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 minutes",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 second",
      "error": [
        "ROW does not support [date_period] in expression [1 second]"
      ],
      "warning": []
    },
    {
      "query": "row 1                second",
      "error": [
        "ROW does not support [date_period] in expression [1 second]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 SECOND",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Second",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 second + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 second",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 second",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 second",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 seconds",
      "error": [
        "ROW does not support [date_period] in expression [1 seconds]"
      ],
      "warning": []
    },
    {
      "query": "row 1                seconds",
      "error": [
        "ROW does not support [date_period] in expression [1 seconds]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 SECONDS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 seconds + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 seconds",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 seconds",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 seconds",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 millisecond",
      "error": [
        "ROW does not support [date_period] in expression [1 millisecond]"
      ],
      "warning": []
    },
    {
      "query": "row 1                millisecond",
      "error": [
        "ROW does not support [date_period] in expression [1 millisecond]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MILLISECOND",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 millisecond + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 millisecond",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 millisecond",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 millisecond",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 milliseconds",
      "error": [
        "ROW does not support [date_period] in expression [1 milliseconds]"
      ],
      "warning": []
    },
    {
      "query": "row 1                milliseconds",
      "error": [
        "ROW does not support [date_period] in expression [1 milliseconds]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MILLISECONDS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 milliseconds + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 milliseconds",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 milliseconds",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 milliseconds",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "show",
      "error": [
        "SyntaxError: missing 'info' at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "show info",
      "error": [],
      "warning": []
    },
    {
      "query": "show doubleField",
      "error": [
        "SyntaxError: token recognition error at: 'd'",
        "SyntaxError: token recognition error at: 'o'",
        "SyntaxError: token recognition error at: 'u'",
        "SyntaxError: token recognition error at: 'b'",
        "SyntaxError: token recognition error at: 'l'",
        "SyntaxError: token recognition error at: 'e'",
        "SyntaxError: token recognition error at: 'F'",
        "SyntaxError: token recognition error at: 'ie'",
        "SyntaxError: token recognition error at: 'l'",
        "SyntaxError: token recognition error at: 'd'",
        "SyntaxError: missing 'info' at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from index | limit ",
      "error": [
        "SyntaxError: missing INTEGER_LITERAL at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from index | limit 4 ",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | limit 4.5",
      "error": [
        "SyntaxError: mismatched input '4.5' expecting INTEGER_LITERAL"
      ],
      "warning": []
    },
    {
      "query": "from index | limit a",
      "error": [
        "SyntaxError: mismatched input 'a' expecting INTEGER_LITERAL"
      ],
      "warning": []
    },
    {
      "query": "from index | limit doubleField",
      "error": [
        "SyntaxError: mismatched input 'doubleField' expecting INTEGER_LITERAL"
      ],
      "warning": []
    },
    {
      "query": "from index | limit textField",
      "error": [
        "SyntaxError: mismatched input 'textField' expecting INTEGER_LITERAL"
      ],
      "warning": []
    },
    {
      "query": "from index | limit 4",
      "error": [],
      "warning": []
    },
    {
      "query": "ROW a=1::LONG | LOOKUP t ON a",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep ",
      "error": [
        "SyntaxError: missing ID_PATTERN at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from index | keep keywordField, doubleField, integerField, dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep `keywordField`, `doubleField`, `integerField`, `dateField`",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep 4.5",
      "error": [
        "SyntaxError: token recognition error at: '4'",
        "SyntaxError: token recognition error at: '5'",
        "SyntaxError: missing ID_PATTERN at '.'",
        "SyntaxError: missing ID_PATTERN at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from index | keep `4.5`",
      "error": [
        "Unknown column [4.5]"
      ],
      "warning": []
    },
    {
      "query": "from index | keep missingField, doubleField, dateField",
      "error": [
        "Unknown column [missingField]"
      ],
      "warning": []
    },
    {
      "query": "from index | keep `any#Char$Field`",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | project ",
      "error": [
        "SyntaxError: mismatched input 'project' expecting {'dissect', 'drop', 'enrich', 'eval', 'grok', 'inlinestats', 'keep', 'limit', 'lookup', 'mv_expand', 'rename', 'sort', 'stats', 'where', MATCH}"
      ],
      "warning": []
    },
    {
      "query": "from index | project textField, doubleField, dateField",
      "error": [
        "SyntaxError: mismatched input 'project' expecting {'dissect', 'drop', 'enrich', 'eval', 'grok', 'inlinestats', 'keep', 'limit', 'lookup', 'mv_expand', 'rename', 'sort', 'stats', 'where', MATCH}"
      ],
      "warning": []
    },
    {
      "query": "from index | PROJECT textField, doubleField, dateField",
      "error": [
        "SyntaxError: mismatched input 'PROJECT' expecting {'dissect', 'drop', 'enrich', 'eval', 'grok', 'inlinestats', 'keep', 'limit', 'lookup', 'mv_expand', 'rename', 'sort', 'stats', 'where', MATCH}"
      ],
      "warning": []
    },
    {
      "query": "from index | project missingField, doubleField, dateField",
      "error": [
        "SyntaxError: mismatched input 'project' expecting {'dissect', 'drop', 'enrich', 'eval', 'grok', 'inlinestats', 'keep', 'limit', 'lookup', 'mv_expand', 'rename', 'sort', 'stats', 'where', MATCH}"
      ],
      "warning": []
    },
    {
      "query": "from index | keep k*",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep *Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep k*Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep key*Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep k*, i*",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep m*",
      "error": [
        "Unknown column [m*]"
      ],
      "warning": []
    },
    {
      "query": "from index | keep *m",
      "error": [
        "Unknown column [*m]"
      ],
      "warning": []
    },
    {
      "query": "from index | keep d*m",
      "error": [
        "Unknown column [d*m]"
      ],
      "warning": []
    },
    {
      "query": "FROM index | STATS ROUND(AVG(doubleField * 1.5)), COUNT(*), MIN(doubleField * 10) | KEEP `MIN(doubleField * 10)`",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM index | STATS COUNT(*), MIN(doubleField * 10), MAX(doubleField)| KEEP `COUNT(*)`",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop ",
      "error": [
        "SyntaxError: missing ID_PATTERN at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from index | drop textField, doubleField, dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop 4.5",
      "error": [
        "SyntaxError: token recognition error at: '4'",
        "SyntaxError: token recognition error at: '5'",
        "SyntaxError: missing ID_PATTERN at '.'",
        "SyntaxError: missing ID_PATTERN at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from index | drop missingField, doubleField, dateField",
      "error": [
        "Unknown column [missingField]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop `any#Char$Field`",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop t*",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop t**Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop *Field*",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop t*F*d",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop *Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop t*Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop s*, d*",
      "error": [
        "Unknown column [s*]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop m*",
      "error": [
        "Unknown column [m*]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop *m",
      "error": [
        "Unknown column [*m]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop d*m",
      "error": [
        "Unknown column [d*m]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop *",
      "error": [
        "Removing all fields is not allowed [*]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop textField, *",
      "error": [
        "Removing all fields is not allowed [*]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop @timestamp",
      "error": [],
      "warning": [
        "Drop [@timestamp] will remove all time filters to the search results"
      ]
    },
    {
      "query": "from index | drop textField, @timestamp",
      "error": [],
      "warning": [
        "Drop [@timestamp] will remove all time filters to the search results"
      ]
    },
    {
      "query": "FROM index | STATS ROUND(AVG(doubleField * 1.5)), COUNT(*), MIN(doubleField * 10) | DROP `MIN(doubleField * 10)`",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM index | STATS COUNT(*), MIN(doubleField * 10), MAX(doubleField)| DROP `COUNT(*)`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand ",
      "error": [
        "SyntaxError: missing {UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER} at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand integerField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand doubleField, b",
      "error": [
        "SyntaxError: token recognition error at: ','",
        "SyntaxError: extraneous input 'b' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "row a = \"a\" | mv_expand a",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [1, 2, 3] | mv_expand a",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [true, false] | mv_expand a",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [\"a\", \"b\"] | mv_expand a",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | rename",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting ID_PATTERN"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename textField",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting 'as'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename a",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting 'as'",
        "Unknown column [a]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename textField as",
      "error": [
        "SyntaxError: missing ID_PATTERN at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename missingField as",
      "error": [
        "SyntaxError: missing ID_PATTERN at '<EOF>'",
        "Unknown column [missingField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename textField as b",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | rename textField AS b",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | rename textField As b",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | rename textField As b, b AS c",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | rename fn() as a",
      "error": [
        "SyntaxError: token recognition error at: '('",
        "SyntaxError: token recognition error at: ')'",
        "Unknown column [fn]",
        "Unknown column [a]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField + 1 | rename `doubleField + 1` as a",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField) | rename `avg(doubleField)` as avg0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index |eval doubleField + 1 | rename `doubleField + 1` as ",
      "error": [
        "SyntaxError: missing ID_PATTERN at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename key* as keywords",
      "error": [
        "Using wildcards (*) in RENAME is not allowed [key*]",
        "Unknown column [keywords]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename s* as strings",
      "error": [
        "Unknown column [s*]",
        "Unknown column [strings]"
      ],
      "warning": []
    },
    {
      "query": "row a = 10 | rename a as `this``is fine`",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = 10 | rename a as this is fine",
      "error": [
        "SyntaxError: mismatched input 'is' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField",
      "error": [
        "SyntaxError: missing QUOTED_STRING at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField 2",
      "error": [
        "SyntaxError: mismatched input '2' expecting QUOTED_STRING"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField .",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "Unknown column [textField.]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField %a",
      "error": [
        "SyntaxError: mismatched input '%' expecting QUOTED_STRING",
        "SyntaxError: mismatched input '<EOF>' expecting '='"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | dissect doubleField \"%{firstWord}\"",
      "error": [
        "DISSECT only supports string type values, found [doubleField] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" option ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting '='"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" option = ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET}",
        "Invalid option for DISSECT: [option]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" option = 1",
      "error": [
        "Invalid option for DISSECT: [option]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" append_separator = \"-\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" ignore_missing = true",
      "error": [
        "Invalid option for DISSECT: [ignore_missing]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" append_separator = true",
      "error": [
        "Invalid value for DISSECT append_separator: expected a string, but was [true]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" | keep firstWord",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | grok",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField",
      "error": [
        "SyntaxError: missing QUOTED_STRING at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField 2",
      "error": [
        "SyntaxError: mismatched input '2' expecting QUOTED_STRING"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField .",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "Unknown column [textField.]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField %a",
      "error": [
        "SyntaxError: mismatched input '%' expecting QUOTED_STRING"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField \"%{firstWord}\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | grok doubleField \"%{firstWord}\"",
      "error": [
        "GROK only supports string type values, found [doubleField] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField \"%{firstWord}\" | keep firstWord",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where b",
      "error": [
        "Unknown column [b]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where true",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT true",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where false",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT false",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT +1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 * 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT 1 * 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT -1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 / 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT 1 / 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1.0 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT 1.0 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1.5 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT 1.5 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField > 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField > 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField > textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField > doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField > dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField > booleanField",
      "error": [
        "Argument of [>] must be [date], found value [booleanField] type [boolean]",
        "Argument of [>] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where ipField > ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField >= 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField >= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField >= textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField >= doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField >= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField >= booleanField",
      "error": [
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]",
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where ipField >= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField < 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField < 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField < textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField < doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField < dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField < booleanField",
      "error": [
        "Argument of [<] must be [date], found value [booleanField] type [boolean]",
        "Argument of [<] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where ipField < ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField <= 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField <= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField <= textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField <= doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField <= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField <= booleanField",
      "error": [
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]",
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where ipField <= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField == 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField == 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField == textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField == doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField == dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField == booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField == ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField != 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField != 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField != textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField != doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField != dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField != booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField != ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where - round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where - round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where + round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where + round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + -- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 -- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + -+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 -+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + +- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 +- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ++ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + ++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 ++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where --- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where --- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + --- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 --- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + -+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 -+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +-+ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + +-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 +-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +++ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + +++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 +++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where not not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ---- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ---- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + ---- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 ---- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+-+ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + -+-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 -+-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +-+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +-+- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + +-+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 +-+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ++++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ++++ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + ++++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 ++++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where not not not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where *+ doubleField",
      "error": [
        "SyntaxError: extraneous input '*' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where /+ doubleField",
      "error": [
        "SyntaxError: extraneous input '/' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where %+ doubleField",
      "error": [
        "SyntaxError: extraneous input '%' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField =~ 0",
      "error": [
        "Argument of [=~] must be [text], found value [doubleField] type [double]",
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField =~ 0",
      "error": [
        "Argument of [=~] must be [text], found value [doubleField] type [double]",
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField =~ 0)",
      "error": [
        "Argument of [=~] must be [text], found value [doubleField] type [double]",
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField =~ 0))",
      "error": [
        "Argument of [=~] must be [text], found value [doubleField] type [double]",
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where 1 =~ 0",
      "error": [
        "Argument of [=~] must be [text], found value [1] type [number]",
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField =~ 0",
      "error": [
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where textField like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT textField like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT textField NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where textField rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT textField rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT textField NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where cidr_match(ipField)",
      "error": [
        "Error: [cidr_match] function expects at least 2 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval cidr = \"172.0.0.1/30\" | where cidr_match(ipField, \"172.0.0.1/30\", cidr)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField == \"a\" or null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval b = textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField + ",
      "error": [
        "SyntaxError: no viable alternative at input 'doubleField + '"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField + 1",
      "error": [
        "Argument of [+] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=b",
      "error": [
        "Unknown column [b]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=b, ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "Unknown column [b]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round",
      "error": [
        "Unknown column [round]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(",
      "error": [
        "SyntaxError: no viable alternative at input 'round('"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField), ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) + round(doubleField) ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) + round(textField) ",
      "error": [
        "Argument of [round] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) + round(textField), doubleField  ",
      "error": [
        "Argument of [round] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) + round(doubleField), doubleField  ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) + round(doubleField), b = doubleField  ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=[1, 2, 3]",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=[true, false]",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=[\"a\", \"b\"]",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval -- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + -- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 -- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval -+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + -+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 -+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval +- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + +- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 +- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=++ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + ++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 ++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval --- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=--- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=--- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + --- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 --- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval -+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + -+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 -+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval +-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+-+ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + +-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 +-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval +++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+++ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + +++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 +++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval not not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ---- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=---- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=---- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + ---- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 ---- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval -+-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+-+ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + -+-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 -+-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval +-+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+-+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+-+- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + +-+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 +-+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ++++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=++++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=++++ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + ++++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 ++++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval not not not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval *+ doubleField",
      "error": [
        "SyntaxError: extraneous input '*' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval /+ doubleField",
      "error": [
        "SyntaxError: extraneous input '/' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval %+ doubleField",
      "error": [
        "SyntaxError: extraneous input '%' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval log10(-1)",
      "error": [],
      "warning": [
        "Log of a negative number results in null: -1"
      ]
    },
    {
      "query": "from a_index | eval log(-1)",
      "error": [],
      "warning": [
        "Log of a negative number results in null: -1"
      ]
    },
    {
      "query": "from a_index | eval log(-1, 20)",
      "error": [],
      "warning": [
        "Log of a negative number results in null: -1"
      ]
    },
    {
      "query": "from a_index | eval log(-1, -20)",
      "error": [],
      "warning": [
        "Log of a negative number results in null: -1",
        "Log of a negative number results in null: -20"
      ]
    },
    {
      "query": "from a_index | eval var0 = log(-1, -20)",
      "error": [],
      "warning": [
        "Log of a negative number results in null: -1",
        "Log of a negative number results in null: -20"
      ]
    },
    {
      "query": "from a_index | eval doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField > 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField > 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField > textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField > doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField > dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField > booleanField",
      "error": [
        "Argument of [>] must be [date], found value [booleanField] type [boolean]",
        "Argument of [>] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField > ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField > textField",
      "error": [
        "Argument of [>] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField > doubleField",
      "error": [
        "Argument of [>] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField > \"2022\"",
      "error": [
        "Argument of [>] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField > keywordField",
      "error": [
        "Argument of [>] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField > dateField",
      "error": [
        "Argument of [>] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField > 0",
      "error": [
        "Argument of [>] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField > now()",
      "error": [
        "Argument of [>] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField > \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" > dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField > \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" > versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField > \"true\"",
      "error": [
        "Argument of [>] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" > booleanField",
      "error": [
        "Argument of [>] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField > \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" > ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField >= 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField >= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField >= textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField >= doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField >= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField >= booleanField",
      "error": [
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]",
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField >= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField >= textField",
      "error": [
        "Argument of [>=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField >= doubleField",
      "error": [
        "Argument of [>=] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField >= \"2022\"",
      "error": [
        "Argument of [>=] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField >= keywordField",
      "error": [
        "Argument of [>=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField >= dateField",
      "error": [
        "Argument of [>=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField >= 0",
      "error": [
        "Argument of [>=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField >= now()",
      "error": [
        "Argument of [>=] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField >= \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" >= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField >= \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" >= versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField >= \"true\"",
      "error": [
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" >= booleanField",
      "error": [
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField >= \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" >= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField < 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField < 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField < textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField < doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField < dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField < booleanField",
      "error": [
        "Argument of [<] must be [date], found value [booleanField] type [boolean]",
        "Argument of [<] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField < ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField < textField",
      "error": [
        "Argument of [<] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField < doubleField",
      "error": [
        "Argument of [<] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField < \"2022\"",
      "error": [
        "Argument of [<] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField < keywordField",
      "error": [
        "Argument of [<] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField < dateField",
      "error": [
        "Argument of [<] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField < 0",
      "error": [
        "Argument of [<] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField < now()",
      "error": [
        "Argument of [<] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField < \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" < dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField < \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" < versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField < \"true\"",
      "error": [
        "Argument of [<] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" < booleanField",
      "error": [
        "Argument of [<] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField < \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" < ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField <= 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField <= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField <= textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField <= doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField <= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField <= booleanField",
      "error": [
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]",
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField <= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField <= textField",
      "error": [
        "Argument of [<=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField <= doubleField",
      "error": [
        "Argument of [<=] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField <= \"2022\"",
      "error": [
        "Argument of [<=] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField <= keywordField",
      "error": [
        "Argument of [<=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField <= dateField",
      "error": [
        "Argument of [<=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField <= 0",
      "error": [
        "Argument of [<=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField <= now()",
      "error": [
        "Argument of [<=] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField <= \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" <= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField <= \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" <= versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField <= \"true\"",
      "error": [
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" <= booleanField",
      "error": [
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField <= \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" <= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField == 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField == 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField == textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField == doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField == dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField == booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField == ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField == textField",
      "error": [
        "Argument of [==] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField == doubleField",
      "error": [
        "Argument of [==] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField == \"2022\"",
      "error": [
        "Argument of [==] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField == keywordField",
      "error": [
        "Argument of [==] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField == dateField",
      "error": [
        "Argument of [==] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField == 0",
      "error": [
        "Argument of [==] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField == now()",
      "error": [
        "Argument of [==] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField == \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" == dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField == \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" == versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField == \"true\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" == booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField == \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" == ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField != 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField != 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField != textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField != doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField != dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField != booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField != ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField != textField",
      "error": [
        "Argument of [!=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField != doubleField",
      "error": [
        "Argument of [!=] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField != \"2022\"",
      "error": [
        "Argument of [!=] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField != keywordField",
      "error": [
        "Argument of [!=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField != dateField",
      "error": [
        "Argument of [!=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField != 0",
      "error": [
        "Argument of [!=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField != now()",
      "error": [
        "Argument of [!=] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField != \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" != dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField != \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" != versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField != \"true\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" != booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField != \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" != ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField in (\"1.2.3\", \"4.5.6\", to_version(\"2.3.2\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField in (\"2023-12-12\", \"2024-12-12\", date_parse(\"yyyy-MM-dd\", \"2025-12-12\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField in (\"true\", \"false\", false)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField in (\"136.36.3.205\", \"136.36.3.206\", to_ip(\"136.36.3.207\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField + 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now() + now()",
      "error": [
        "Argument of [+] must be [date_period], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"1\"",
      "error": [
        "Argument of [+] must be [date_period], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1\" + 1",
      "error": [
        "Argument of [+] must be [date_period], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField - 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField - 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 - 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now() - now()",
      "error": [
        "Argument of [-] must be [date_period], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 - \"1\"",
      "error": [
        "Argument of [-] must be [date_period], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1\" - 1",
      "error": [
        "Argument of [-] must be [date_period], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField * 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField * 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 * 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now() * now()",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 * \"1\"",
      "error": [
        "Argument of [*] must be [double], found value [\"1\"] type [string]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1\" * 1",
      "error": [
        "Argument of [*] must be [double], found value [\"1\"] type [string]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField / 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField / 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 / 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now() / now()",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 / \"1\"",
      "error": [
        "Argument of [/] must be [double], found value [\"1\"] type [string]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1\" / 1",
      "error": [
        "Argument of [/] must be [double], found value [\"1\"] type [string]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField % 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField % 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 % 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now() % now()",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 % \"1\"",
      "error": [
        "Argument of [%] must be [double], found value [\"1\"] type [string]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1\" % 1",
      "error": [
        "Argument of [%] must be [double], found value [\"1\"] type [string]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1/0",
      "error": [],
      "warning": [
        "Cannot divide by zero: 1/0"
      ]
    },
    {
      "query": "from a_index | eval var = 1/0",
      "error": [],
      "warning": [
        "Cannot divide by zero: 1/0"
      ]
    },
    {
      "query": "from a_index | eval 1 + 1/0",
      "error": [],
      "warning": [
        "Cannot divide by zero: 1/0"
      ]
    },
    {
      "query": "from a_index | eval 1%0",
      "error": [],
      "warning": [
        "Module by zero can return null value: 1%0"
      ]
    },
    {
      "query": "from a_index | eval var = 1%0",
      "error": [],
      "warning": [
        "Module by zero can return null value: 1%0"
      ]
    },
    {
      "query": "from a_index | eval 1 + 1%0",
      "error": [],
      "warning": [
        "Module by zero can return null value: 1%0"
      ]
    },
    {
      "query": "from a_index | eval textField like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT textField like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT textField NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT textField rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT textField NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField not in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField not in (1, 2, 3, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 in (1, 2, 3, round(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"a\" in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField not in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField not in (\"a\", \"b\", \"c\", textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField not in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField not in (1, 2, 3, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(doubleField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField) | eval `avg(doubleField)` + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval not",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "Error: [not] function expects exactly one argument, got 0."
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval in",
      "error": [
        "SyntaxError: mismatched input 'in' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField in textField",
      "error": [
        "SyntaxError: missing '(' at 'textField'",
        "SyntaxError: mismatched input '<EOF>' expecting {',', ')'}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField in textField)",
      "error": [
        "SyntaxError: missing '(' at 'textField'",
        "Error: [in] function expects exactly 2 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField not in textField",
      "error": [
        "SyntaxError: missing '(' at 'textField'",
        "SyntaxError: mismatched input '<EOF>' expecting {',', ')'}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort([\"a\", \"b\"], \"bogus\")",
      "error": [],
      "warning": [
        "Invalid option [\"bogus\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "from a_index | eval mv_sort([\"a\", \"b\"], \"ASC\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort([\"a\", \"b\"], \"DESC\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval result = case(false, 0, 1), round(result)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval result = case(false, 0, 1) | stats sum(result)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval result = case(false, 0, 1) | stats var0 = sum(result)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(case(false, 0, 1))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 anno",
      "error": [
        "EVAL does not support [date_period] in expression [1 anno]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = 1 anno",
      "error": [
        "Unexpected time interval qualifier: 'anno'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval now() + 1 anno",
      "error": [
        "Unexpected time interval qualifier: 'anno'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 year",
      "error": [
        "EVAL does not support [date_period] in expression [1 year]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                year",
      "error": [
        "EVAL does not support [date_period] in expression [1 year]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 YEAR",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Year",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 year + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 year",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 year",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 year",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 years",
      "error": [
        "EVAL does not support [date_period] in expression [1 years]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                years",
      "error": [
        "EVAL does not support [date_period] in expression [1 years]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 YEARS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Years",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 years + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 years",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 years",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 years",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 quarter",
      "error": [
        "EVAL does not support [date_period] in expression [1 quarter]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                quarter",
      "error": [
        "EVAL does not support [date_period] in expression [1 quarter]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 QUARTER",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 quarter + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 quarter",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 quarter",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 quarter",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 quarters",
      "error": [
        "EVAL does not support [date_period] in expression [1 quarters]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                quarters",
      "error": [
        "EVAL does not support [date_period] in expression [1 quarters]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 QUARTERS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 quarters + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 quarters",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 quarters",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 quarters",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 month",
      "error": [
        "EVAL does not support [date_period] in expression [1 month]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                month",
      "error": [
        "EVAL does not support [date_period] in expression [1 month]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MONTH",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Month",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 month + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 month",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 month",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 month",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 months",
      "error": [
        "EVAL does not support [date_period] in expression [1 months]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                months",
      "error": [
        "EVAL does not support [date_period] in expression [1 months]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MONTHS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Months",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 months + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 months",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 months",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 months",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 week",
      "error": [
        "EVAL does not support [date_period] in expression [1 week]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                week",
      "error": [
        "EVAL does not support [date_period] in expression [1 week]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 WEEK",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Week",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 week + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 week",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 week",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 week",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 weeks",
      "error": [
        "EVAL does not support [date_period] in expression [1 weeks]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                weeks",
      "error": [
        "EVAL does not support [date_period] in expression [1 weeks]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 WEEKS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 weeks + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 weeks",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 weeks",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 weeks",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 day",
      "error": [
        "EVAL does not support [date_period] in expression [1 day]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                day",
      "error": [
        "EVAL does not support [date_period] in expression [1 day]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 DAY",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Day",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 day + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 day",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 day",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 day",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 days",
      "error": [
        "EVAL does not support [date_period] in expression [1 days]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                days",
      "error": [
        "EVAL does not support [date_period] in expression [1 days]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 DAYS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Days",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 days + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 days",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 days",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 days",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 hour",
      "error": [
        "EVAL does not support [date_period] in expression [1 hour]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                hour",
      "error": [
        "EVAL does not support [date_period] in expression [1 hour]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 HOUR",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Hour",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 hour + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 hour",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 hour",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 hour",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 hours",
      "error": [
        "EVAL does not support [date_period] in expression [1 hours]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                hours",
      "error": [
        "EVAL does not support [date_period] in expression [1 hours]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 HOURS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Hours",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 hours + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 hours",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 hours",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 hours",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 minute",
      "error": [
        "EVAL does not support [date_period] in expression [1 minute]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                minute",
      "error": [
        "EVAL does not support [date_period] in expression [1 minute]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MINUTE",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Minute",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 minute + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 minute",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 minute",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 minute",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 minutes",
      "error": [
        "EVAL does not support [date_period] in expression [1 minutes]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                minutes",
      "error": [
        "EVAL does not support [date_period] in expression [1 minutes]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MINUTES",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 minutes + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 minutes",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 minutes",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 minutes",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 second",
      "error": [
        "EVAL does not support [date_period] in expression [1 second]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                second",
      "error": [
        "EVAL does not support [date_period] in expression [1 second]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 SECOND",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Second",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 second + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 second",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 second",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 second",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 seconds",
      "error": [
        "EVAL does not support [date_period] in expression [1 seconds]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                seconds",
      "error": [
        "EVAL does not support [date_period] in expression [1 seconds]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 SECONDS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 seconds + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 seconds",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 seconds",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 seconds",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 millisecond",
      "error": [
        "EVAL does not support [date_period] in expression [1 millisecond]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                millisecond",
      "error": [
        "EVAL does not support [date_period] in expression [1 millisecond]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MILLISECOND",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 millisecond + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 millisecond",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 millisecond",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 millisecond",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 milliseconds",
      "error": [
        "EVAL does not support [date_period] in expression [1 milliseconds]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                milliseconds",
      "error": [
        "EVAL does not support [date_period] in expression [1 milliseconds]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MILLISECONDS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 milliseconds + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 milliseconds",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 milliseconds",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 milliseconds",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 ms",
      "error": [
        "EVAL does not support [date_period] in expression [1 ms]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                ms",
      "error": [
        "EVAL does not support [date_period] in expression [1 ms]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 ms",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 ms",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Ms",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 ms",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 ms + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 ms] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 ms",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 ms] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 ms",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 ms] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 ms",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 ms] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 s",
      "error": [
        "EVAL does not support [date_period] in expression [1 s]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                s",
      "error": [
        "EVAL does not support [date_period] in expression [1 s]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 s",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 s",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 S",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 S",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 s",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 s + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 s] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 s",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 s] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 s",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 s] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 s",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 s] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 m",
      "error": [
        "EVAL does not support [date_period] in expression [1 m]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                m",
      "error": [
        "EVAL does not support [date_period] in expression [1 m]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 m",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 m",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 M",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 M",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 m",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 m + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 m] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 m",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 m] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 m",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 m] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 m",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 m] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 h",
      "error": [
        "EVAL does not support [date_period] in expression [1 h]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                h",
      "error": [
        "EVAL does not support [date_period] in expression [1 h]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 h",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 h",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 H",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 H",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 h",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 h + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 h] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 h",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 h] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 h",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 h] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 h",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 h] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 d",
      "error": [
        "EVAL does not support [date_period] in expression [1 d]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                d",
      "error": [
        "EVAL does not support [date_period] in expression [1 d]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 d",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 d",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 D",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 D",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 d",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 d + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 d] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 d",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 d] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 d",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 d] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 d",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 d] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 w",
      "error": [
        "EVAL does not support [date_period] in expression [1 w]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                w",
      "error": [
        "EVAL does not support [date_period] in expression [1 w]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 w",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 w",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 W",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 W",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 w",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 w + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 w] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 w",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 w] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 w",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 w] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 w",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 w] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 mo",
      "error": [
        "EVAL does not support [date_period] in expression [1 mo]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                mo",
      "error": [
        "EVAL does not support [date_period] in expression [1 mo]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 mo",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 mo",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MO",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Mo",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 mo",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 mo + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 mo] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 mo",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 mo] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 mo",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 mo] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 mo",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 mo] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 q",
      "error": [
        "EVAL does not support [date_period] in expression [1 q]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                q",
      "error": [
        "EVAL does not support [date_period] in expression [1 q]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 q",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 q",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Q",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Q",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 q",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 q + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 q] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 q",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 q] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 q",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 q] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 q",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 q] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 y",
      "error": [
        "EVAL does not support [date_period] in expression [1 y]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                y",
      "error": [
        "EVAL does not support [date_period] in expression [1 y]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 y",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 y",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Y",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Y",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 y",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 y + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 y] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 y",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 y] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 y",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 y] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 y",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 y] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 yr",
      "error": [
        "EVAL does not support [date_period] in expression [1 yr]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                yr",
      "error": [
        "EVAL does not support [date_period] in expression [1 yr]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 yr",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 yr",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 YR",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Yr",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 yr",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 yr + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 yr] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 yr",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 yr] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 yr",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 yr] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 yr",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 yr] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort \"field\" ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort wrongField ",
      "error": [
        "Unknown column [wrongField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField, ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField, textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort \"field\" desc ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc nulls ",
      "error": [
        "SyntaxError: missing {'first', 'last'} at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc nulls first",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc first",
      "error": [
        "SyntaxError: extraneous input 'first' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc nulls last",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc last",
      "error": [
        "SyntaxError: extraneous input 'last' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort \"field\" asc ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc nulls ",
      "error": [
        "SyntaxError: missing {'first', 'last'} at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc nulls first",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc first",
      "error": [
        "SyntaxError: extraneous input 'first' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc nulls last",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc last",
      "error": [
        "SyntaxError: extraneous input 'last' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField nulls first",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField first",
      "error": [
        "SyntaxError: extraneous input 'first' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField nulls last",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField last",
      "error": [
        "SyntaxError: extraneous input 'last' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "row a = 1 | stats COUNT(*) | sort `COUNT(*)`",
      "error": [],
      "warning": []
    },
    {
      "query": "ROW a = 1 | STATS couNt(*) | SORT `couNt(*)`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort abs(doubleField) - to_long(textField) desc nulls first",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort sin(textField)",
      "error": [
        "Argument of [sin] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField + textField",
      "error": [
        "Argument of [+] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich",
      "error": [
        "SyntaxError: missing ENRICH_POLICY_NAME at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _",
      "error": [
        "Unknown policy [_]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _:",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "Unknown policy [_]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _:policy",
      "error": [
        "Unrecognized value [_] for ENRICH, mode needs to be one of [_ANY, _COORDINATOR, _REMOTE]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich :policy",
      "error": [
        "SyntaxError: token recognition error at: ':'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich any:",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "Unknown policy [any]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _any:",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "Unknown policy [_any]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich any:policy",
      "error": [
        "Unrecognized value [any] for ENRICH, mode needs to be one of [_ANY, _COORDINATOR, _REMOTE]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich `this``is fine`",
      "error": [
        "SyntaxError: extraneous input 'fine`' expecting <EOF>",
        "Unknown policy [`this``is]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich this is fine",
      "error": [
        "SyntaxError: mismatched input 'is' expecting <EOF>",
        "Unknown policy [this]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _any:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _any :  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_any]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _any:  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_any]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _any:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _ANY:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _coordinator:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _coordinator :  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_coordinator]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _coordinator:  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_coordinator]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _coordinator:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _COORDINATOR:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _remote:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _remote :  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_remote]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _remote:  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_remote]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _remote:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _REMOTE:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _unknown:policy",
      "error": [
        "Unrecognized value [_unknown] for ENRICH, mode needs to be one of [_ANY, _COORDINATOR, _REMOTE]"
      ],
      "warning": []
    },
    {
      "query": "from a_index |enrich missing-policy ",
      "error": [
        "Unknown policy [missing-policy]"
      ],
      "warning": []
    },
    {
      "query": "from a_index |enrich policy on ",
      "error": [
        "SyntaxError: missing ID_PATTERN at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on b ",
      "error": [
        "Unknown column [b]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on `this``is fine`",
      "error": [
        "Unknown column [this`is fine]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on this is fine",
      "error": [
        "SyntaxError: mismatched input 'is' expecting <EOF>",
        "Unknown column [this]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting ID_PATTERN"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 ",
      "error": [
        "Unknown column [var0]"
      ],
      "warning": []
    },
    {
      "query": "from a_index |enrich policy on doubleField with var0 = ",
      "error": [
        "SyntaxError: missing ID_PATTERN at '<EOF>'",
        "Unknown column [var0]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = c ",
      "error": [
        "Unknown column [var0]",
        "Unknown column [c]"
      ],
      "warning": []
    },
    {
      "query": "from a_index |enrich policy on doubleField with var0 = , ",
      "error": [
        "SyntaxError: missing ID_PATTERN at ','",
        "SyntaxError: mismatched input '<EOF>' expecting ID_PATTERN",
        "Unknown column [var0]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = otherField, var1 ",
      "error": [
        "Unknown column [var1]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = otherField ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = otherField, yetAnotherField ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index |enrich policy on doubleField with var0 = otherField, var1 = ",
      "error": [
        "SyntaxError: missing ID_PATTERN at '<EOF>'",
        "Unknown column [var1]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = otherField, var1 = yetAnotherField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = otherField, `this``is fine` = yetAnotherField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy with ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting ID_PATTERN"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy with otherField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy | eval otherField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy with var0 = otherField | eval var0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich my-pol*",
      "error": [
        "Using wildcards (*) in ENRICH is not allowed [my-pol*]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField = 5",
      "error": [],
      "warning": [
        "Column [textField] of type text has been overwritten as new type: integer"
      ]
    },
    {
      "query": "from a_index | eval doubleField = \"5\"",
      "error": [],
      "warning": [
        "Column [doubleField] of type double has been overwritten as new type: string"
      ]
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | keep ```round(doubleField) + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | eval ```round(doubleField) + 1`` + 1` + 1 | keep ```````round(doubleField) + 1```` + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | eval ```round(doubleField) + 1`` + 1` + 1 | eval ```````round(doubleField) + 1```` + 1`` + 1` + 1 | keep ```````````````round(doubleField) + 1```````` + 1```` + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | eval ```round(doubleField) + 1`` + 1` + 1 | eval ```````round(doubleField) + 1```` + 1`` + 1` + 1 | eval ```````````````round(doubleField) + 1```````` + 1```` + 1`` + 1` + 1 | keep ```````````````````````````````round(doubleField) + 1```````````````` + 1```````` + 1```` + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1::keyword",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1::keyword::long::double",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(\"23\"::double)",
      "error": [
        "Argument of [trim] must be [keyword], found value [\"23\"::double] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(23::keyword)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::long",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::LONG",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::Long",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::LoNg",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"",
      "error": [
        "Argument of [+] must be [date_period], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(to_double(\"23\")::keyword::double::long::keyword::double)",
      "error": [
        "Argument of [trim] must be [keyword], found value [to_double(\"23\")::keyword::double::long::keyword::double] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::long)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::unsigned_long)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::int)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::integer)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::Integer)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::double)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::DOUBLE)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::doubla)",
      "error": [
        "Argument of [ceil] must be [double], found value [23::doubla] type [doubla]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval TRIM(23::keyword)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval TRIM(23::text)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval TRIM(23::keyword)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval true AND \"false\"::boolean",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval true AND \"false\"::bool",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval true AND \"false\"",
      "error": [
        "Argument of [and] must be [boolean], found value [\"false\"] type [string]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(trim(doubleField)::keyword)",
      "error": [
        "Argument of [trim] must be [keyword], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval to_upper(trim(doubleField)::keyword::keyword::keyword::keyword)",
      "error": [
        "Argument of [trim] must be [keyword], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(to_upper(trim(doubleField)::keyword)::keyword)",
      "error": [
        "Argument of [trim] must be [keyword], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "row var = abs(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row abs(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = abs(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = abs(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row abs(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = abs(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = abs(true)",
      "error": [
        "Argument of [abs] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where abs(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where abs(booleanField) > 0",
      "error": [
        "Argument of [abs] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where abs(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where abs(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where abs(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = abs(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval abs(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = abs(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval abs(booleanField)",
      "error": [
        "Argument of [abs] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = abs(*)",
      "error": [
        "Using wildcards (*) in abs is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = abs(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval abs(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = abs(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = abs(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval abs(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = abs(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval abs(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval abs(doubleField, extraArg)",
      "error": [
        "Error: [abs] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort abs(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval abs(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval abs(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = acos(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row acos(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = acos(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = acos(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row acos(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = acos(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = acos(true)",
      "error": [
        "Argument of [acos] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where acos(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where acos(booleanField) > 0",
      "error": [
        "Argument of [acos] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where acos(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where acos(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where acos(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = acos(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval acos(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = acos(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval acos(booleanField)",
      "error": [
        "Argument of [acos] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = acos(*)",
      "error": [
        "Using wildcards (*) in acos is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = acos(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval acos(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = acos(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = acos(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval acos(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = acos(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval acos(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval acos(doubleField, extraArg)",
      "error": [
        "Error: [acos] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort acos(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval acos(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval acos(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = asin(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row asin(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = asin(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = asin(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row asin(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = asin(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = asin(true)",
      "error": [
        "Argument of [asin] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where asin(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where asin(booleanField) > 0",
      "error": [
        "Argument of [asin] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where asin(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where asin(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where asin(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = asin(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval asin(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = asin(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval asin(booleanField)",
      "error": [
        "Argument of [asin] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = asin(*)",
      "error": [
        "Using wildcards (*) in asin is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = asin(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval asin(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = asin(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = asin(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval asin(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = asin(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval asin(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval asin(doubleField, extraArg)",
      "error": [
        "Error: [asin] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort asin(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval asin(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval asin(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row atan(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row atan(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan(true)",
      "error": [
        "Argument of [atan] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where atan(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan(booleanField) > 0",
      "error": [
        "Argument of [atan] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where atan(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan(booleanField)",
      "error": [
        "Argument of [atan] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan(*)",
      "error": [
        "Using wildcards (*) in atan is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan(doubleField, extraArg)",
      "error": [
        "Error: [atan] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort atan(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval atan(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row atan2(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(to_double(true), to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(5.5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row atan2(5.5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(to_double(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(to_double(true), 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row atan2(5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(to_integer(true), to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row atan2(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(to_integer(true), 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(5, to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(5, to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = atan2(true, true)",
      "error": [
        "Argument of [atan2] must be [double], found value [true] type [boolean]",
        "Argument of [atan2] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(doubleField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(booleanField, booleanField) > 0",
      "error": [
        "Argument of [atan2] must be [double], found value [booleanField] type [boolean]",
        "Argument of [atan2] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(doubleField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(doubleField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(doubleField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(integerField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(integerField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(integerField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(longField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(longField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(longField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(longField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(unsignedLongField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(unsignedLongField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(unsignedLongField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where atan2(unsignedLongField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(to_double(booleanField), to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(booleanField, booleanField)",
      "error": [
        "Argument of [atan2] must be [double], found value [booleanField] type [boolean]",
        "Argument of [atan2] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(to_double(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(to_double(booleanField), longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(doubleField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(doubleField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(to_double(booleanField), unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(to_integer(booleanField), to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(to_integer(booleanField), longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(integerField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(integerField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(to_integer(booleanField), unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(longField, to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(longField, to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(longField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(longField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(unsignedLongField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(unsignedLongField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(unsignedLongField, to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(unsignedLongField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(unsignedLongField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(unsignedLongField, to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(unsignedLongField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(unsignedLongField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = atan2(unsignedLongField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(unsignedLongField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(doubleField, doubleField, extraArg)",
      "error": [
        "Error: [atan2] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort atan2(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval atan2(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval atan2(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cbrt(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row cbrt(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cbrt(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cbrt(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row cbrt(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cbrt(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cbrt(true)",
      "error": [
        "Argument of [cbrt] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where cbrt(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cbrt(booleanField) > 0",
      "error": [
        "Argument of [cbrt] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where cbrt(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cbrt(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cbrt(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cbrt(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cbrt(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cbrt(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cbrt(booleanField)",
      "error": [
        "Argument of [cbrt] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cbrt(*)",
      "error": [
        "Using wildcards (*) in cbrt is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cbrt(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cbrt(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cbrt(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cbrt(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cbrt(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cbrt(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cbrt(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cbrt(doubleField, extraArg)",
      "error": [
        "Error: [cbrt] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort cbrt(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cbrt(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval cbrt(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ceil(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row ceil(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ceil(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ceil(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row ceil(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ceil(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ceil(true)",
      "error": [
        "Argument of [ceil] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where ceil(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ceil(booleanField) > 0",
      "error": [
        "Argument of [ceil] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where ceil(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ceil(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ceil(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ceil(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ceil(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ceil(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ceil(booleanField)",
      "error": [
        "Argument of [ceil] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ceil(*)",
      "error": [
        "Using wildcards (*) in ceil is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ceil(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ceil(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ceil(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ceil(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ceil(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ceil(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ceil(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ceil(doubleField, extraArg)",
      "error": [
        "Error: [ceil] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort ceil(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ceil(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval ceil(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cidr_match(to_ip(\"127.0.0.1\"), \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row cidr_match(to_ip(\"127.0.0.1\"), \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cidr_match(to_ip(to_ip(\"127.0.0.1\")), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cidr_match(true, true)",
      "error": [
        "Argument of [cidr_match] must be [ip], found value [true] type [boolean]",
        "Argument of [cidr_match] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cidr_match(ipField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cidr_match(ipField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cidr_match(to_ip(ipField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cidr_match(booleanField, booleanField)",
      "error": [
        "Argument of [cidr_match] must be [ip], found value [booleanField] type [boolean]",
        "Argument of [cidr_match] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cidr_match(ipField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cidr_match(ipField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort cidr_match(ipField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cidr_match(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval cidr_match(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(true, true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(true, true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_boolean(true), to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row coalesce(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_datetime(\"2021-01-01T00:00:00Z\"), to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(to_datetime(\"2021-01-01T00:00:00Z\"), to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")), to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row coalesce(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = coalesce(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_ip(\"127.0.0.1\"), to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(to_ip(\"127.0.0.1\"), to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_ip(to_ip(\"127.0.0.1\")), to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_version(\"1.0.0\"), to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(to_version(\"1.0.0\"), to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_version(\"a\"), to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where coalesce(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where coalesce(counterDoubleField) > 0",
      "error": [
        "Argument of [coalesce] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where coalesce(integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where coalesce(counterDoubleField, counterDoubleField) > 0",
      "error": [
        "Argument of [coalesce] must be [boolean], found value [counterDoubleField] type [counter_double]",
        "Argument of [coalesce] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where coalesce(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where coalesce(longField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(counterDoubleField)",
      "error": [
        "Argument of [coalesce] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(booleanField, booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(booleanField, booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_boolean(booleanField), to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(counterDoubleField, counterDoubleField)",
      "error": [
        "Argument of [coalesce] must be [boolean], found value [counterDoubleField] type [counter_double]",
        "Argument of [coalesce] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(dateField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(dateField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_datetime(dateField), to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(ipField, ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(ipField, ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_ip(ipField), to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(versionField, versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(versionField, versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = coalesce(to_version(keywordField), to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort coalesce(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval coalesce(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(\"2022\", \"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval coalesce(concat(\"20\", \"22\"), concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row coalesce(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = coalesce(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = concat(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row concat(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = concat(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = concat(true, true)",
      "error": [
        "Argument of [concat] must be [keyword], found value [true] type [boolean]",
        "Argument of [concat] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = concat(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval concat(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = concat(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval concat(booleanField, booleanField)",
      "error": [
        "Argument of [concat] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [concat] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = concat(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval concat(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = concat(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval concat(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = concat(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval concat(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort concat(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval concat(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval concat(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cos(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row cos(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cos(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cos(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row cos(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cos(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cos(true)",
      "error": [
        "Argument of [cos] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where cos(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cos(booleanField) > 0",
      "error": [
        "Argument of [cos] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where cos(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cos(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cos(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cos(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cos(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cos(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cos(booleanField)",
      "error": [
        "Argument of [cos] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cos(*)",
      "error": [
        "Using wildcards (*) in cos is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cos(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cos(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cos(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cos(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cos(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cos(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cos(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cos(doubleField, extraArg)",
      "error": [
        "Error: [cos] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort cos(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cos(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval cos(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cosh(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row cosh(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cosh(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cosh(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row cosh(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cosh(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = cosh(true)",
      "error": [
        "Argument of [cosh] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where cosh(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cosh(booleanField) > 0",
      "error": [
        "Argument of [cosh] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where cosh(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cosh(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cosh(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cosh(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cosh(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cosh(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cosh(booleanField)",
      "error": [
        "Argument of [cosh] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cosh(*)",
      "error": [
        "Using wildcards (*) in cosh is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cosh(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cosh(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cosh(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cosh(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cosh(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = cosh(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cosh(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cosh(doubleField, extraArg)",
      "error": [
        "Error: [cosh] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort cosh(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cosh(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval cosh(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_diff(\"year\", dateField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_diff(\"year\", dateField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_diff(\"year\", to_datetime(dateField), to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_diff(booleanField, booleanField, booleanField)",
      "error": [
        "Argument of [date_diff] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [date_diff] must be [date], found value [booleanField] type [boolean]",
        "Argument of [date_diff] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_diff(textField, dateField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_diff(textField, dateField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_diff(to_string(booleanField), to_datetime(dateField), to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_diff(\"year\", dateField, dateField, extraArg)",
      "error": [
        "Error: [date_diff] function expects exactly 3 arguments, got 4."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort date_diff(\"year\", dateField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_diff(null, null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval date_diff(nullVar, nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_diff(\"year\", \"2022\", \"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_diff(\"year\", concat(\"20\", \"22\"), concat(\"20\", \"22\"))",
      "error": [
        "Argument of [date_diff] must be [date], found value [concat(\"20\",\"22\")] type [keyword]",
        "Argument of [date_diff] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval date_diff(textField, \"2022\", \"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_diff(textField, concat(\"20\", \"22\"), concat(\"20\", \"22\"))",
      "error": [
        "Argument of [date_diff] must be [date], found value [concat(\"20\",\"22\")] type [keyword]",
        "Argument of [date_diff] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_diff(to_string(booleanField), dateField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = date_extract(\"ALIGNED_DAY_OF_WEEK_IN_MONTH\", to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row date_extract(\"ALIGNED_DAY_OF_WEEK_IN_MONTH\", to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = date_extract(\"a\", to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row date_extract(\"a\", to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = date_extract(true, true)",
      "error": [
        "Argument of [date_extract] must be [keyword], found value [true] type [boolean]",
        "Argument of [date_extract] must be [date], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_extract(\"ALIGNED_DAY_OF_WEEK_IN_MONTH\", dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_extract(\"ALIGNED_DAY_OF_WEEK_IN_MONTH\", dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_extract(\"ALIGNED_DAY_OF_WEEK_IN_MONTH\", to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_extract(booleanField, booleanField)",
      "error": [
        "Argument of [date_extract] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [date_extract] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_extract(textField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_extract(textField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_extract(to_string(booleanField), to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_extract(\"ALIGNED_DAY_OF_WEEK_IN_MONTH\", dateField, extraArg)",
      "error": [
        "Error: [date_extract] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort date_extract(\"ALIGNED_DAY_OF_WEEK_IN_MONTH\", dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_extract(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval date_extract(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_extract(\"ALIGNED_DAY_OF_WEEK_IN_MONTH\", \"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_extract(\"ALIGNED_DAY_OF_WEEK_IN_MONTH\", concat(\"20\", \"22\"))",
      "error": [
        "Argument of [date_extract] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval date_extract(textField, \"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_extract(textField, concat(\"20\", \"22\"))",
      "error": [
        "Argument of [date_extract] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_extract(to_string(booleanField), dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = date_format(\"a\", to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row date_format(\"a\", to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = date_format(true, true)",
      "error": [
        "Argument of [date_format] must be [keyword], found value [true] type [boolean]",
        "Argument of [date_format] must be [date], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_format(keywordField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_format(keywordField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_format(to_string(booleanField), to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_format(booleanField, booleanField)",
      "error": [
        "Argument of [date_format] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [date_format] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_format(textField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_format(textField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_format(keywordField, dateField, extraArg)",
      "error": [
        "Error: [date_format] function expects no more than 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort date_format(keywordField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_format(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval date_format(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_format(keywordField, \"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_format(keywordField, concat(\"20\", \"22\"))",
      "error": [
        "Argument of [date_format] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval date_format(textField, \"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_format(textField, concat(\"20\", \"22\"))",
      "error": [
        "Argument of [date_format] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_format(to_string(booleanField), dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = date_parse(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row date_parse(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = date_parse(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = date_parse(true, true)",
      "error": [
        "Argument of [date_parse] must be [keyword], found value [true] type [boolean]",
        "Argument of [date_parse] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_parse(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_parse(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_parse(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_parse(booleanField, booleanField)",
      "error": [
        "Argument of [date_parse] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [date_parse] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_parse(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_parse(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_parse(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_parse(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_parse(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_parse(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_parse(keywordField, keywordField, extraArg)",
      "error": [
        "Error: [date_parse] function expects no more than 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort date_parse(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_parse(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval date_parse(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = date_trunc(1 year, to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row date_trunc(1 year, to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = date_trunc(\"a\", to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [
        "Argument of [date_trunc] must be [time_literal], found value [\"a\"] type [string]"
      ],
      "warning": []
    },
    {
      "query": "row date_trunc(\"a\", to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [
        "Argument of [date_trunc] must be [time_literal], found value [\"a\"] type [string]"
      ],
      "warning": []
    },
    {
      "query": "row var = date_trunc(true, true)",
      "error": [
        "Argument of [date_trunc] must be [time_literal], found value [true] type [boolean]",
        "Argument of [date_trunc] must be [date], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_trunc(1 year, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_trunc(1 year, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_trunc(1 year, to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_trunc(booleanField, booleanField)",
      "error": [
        "Argument of [date_trunc] must be [time_literal], found value [booleanField] type [boolean]",
        "Argument of [date_trunc] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_trunc(textField, dateField)",
      "error": [
        "Argument of [date_trunc] must be [time_literal], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval date_trunc(textField, dateField)",
      "error": [
        "Argument of [date_trunc] must be [time_literal], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = date_trunc(textField, to_datetime(dateField))",
      "error": [
        "Argument of [date_trunc] must be [time_literal], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval date_trunc(1 year, dateField, extraArg)",
      "error": [
        "Error: [date_trunc] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort date_trunc(1 year, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_trunc(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval date_trunc(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_trunc(1 year, \"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval date_trunc(1 year, concat(\"20\", \"22\"))",
      "error": [
        "Argument of [date_trunc] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval date_trunc(textField, \"2022\")",
      "error": [
        "Argument of [date_trunc] must be [time_literal], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval date_trunc(textField, concat(\"20\", \"22\"))",
      "error": [
        "Argument of [date_trunc] must be [time_literal], found value [textField] type [text]",
        "Argument of [date_trunc] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "row var = e()",
      "error": [],
      "warning": []
    },
    {
      "query": "row e()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where e() > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = e()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval e()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval e(extraArg)",
      "error": [
        "Error: [e] function expects exactly 0 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort e()",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval e()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ends_with(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row ends_with(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ends_with(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ends_with(true, true)",
      "error": [
        "Argument of [ends_with] must be [keyword], found value [true] type [boolean]",
        "Argument of [ends_with] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ends_with(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ends_with(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ends_with(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ends_with(booleanField, booleanField)",
      "error": [
        "Argument of [ends_with] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [ends_with] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ends_with(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ends_with(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ends_with(keywordField, keywordField, extraArg)",
      "error": [
        "Error: [ends_with] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort ends_with(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ends_with(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval ends_with(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ends_with(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ends_with(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ends_with(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ends_with(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = exp(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row exp(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = exp(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = exp(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row exp(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = exp(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = exp(true)",
      "error": [
        "Argument of [exp] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where exp(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where exp(booleanField) > 0",
      "error": [
        "Argument of [exp] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where exp(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where exp(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where exp(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = exp(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval exp(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = exp(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval exp(booleanField)",
      "error": [
        "Argument of [exp] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = exp(*)",
      "error": [
        "Using wildcards (*) in exp is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = exp(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval exp(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = exp(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = exp(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval exp(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = exp(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval exp(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval exp(doubleField, extraArg)",
      "error": [
        "Error: [exp] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort exp(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval exp(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval exp(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = floor(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row floor(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = floor(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = floor(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row floor(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = floor(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = floor(true)",
      "error": [
        "Argument of [floor] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where floor(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where floor(booleanField) > 0",
      "error": [
        "Argument of [floor] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where floor(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where floor(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where floor(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = floor(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval floor(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = floor(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval floor(booleanField)",
      "error": [
        "Argument of [floor] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = floor(*)",
      "error": [
        "Using wildcards (*) in floor is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = floor(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval floor(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = floor(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = floor(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval floor(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = floor(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval floor(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval floor(doubleField, extraArg)",
      "error": [
        "Error: [floor] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort floor(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval floor(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval floor(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = from_base64(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row from_base64(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = from_base64(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = from_base64(true)",
      "error": [
        "Argument of [from_base64] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = from_base64(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval from_base64(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = from_base64(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval from_base64(booleanField)",
      "error": [
        "Argument of [from_base64] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = from_base64(*)",
      "error": [
        "Using wildcards (*) in from_base64 is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = from_base64(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval from_base64(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval from_base64(keywordField, extraArg)",
      "error": [
        "Error: [from_base64] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort from_base64(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval from_base64(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval from_base64(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row greatest(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(true, true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row greatest(true, true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_boolean(true), to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row greatest(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_double(true), to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row greatest(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row greatest(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_ip(\"127.0.0.1\"), to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row greatest(to_ip(\"127.0.0.1\"), to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_ip(to_ip(\"127.0.0.1\")), to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row greatest(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row greatest(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_version(\"1.0.0\"), to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row greatest(to_version(\"1.0.0\"), to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_version(\"a\"), to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = greatest(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [
        "Argument of [greatest] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]",
        "Argument of [greatest] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where greatest(doubleField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where greatest(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where greatest(cartesianPointField) > 0",
      "error": [
        "Argument of [greatest] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where greatest(integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where greatest(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where greatest(longField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(cartesianPointField)",
      "error": [
        "Argument of [greatest] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(booleanField, booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(booleanField, booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(to_boolean(booleanField), to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(cartesianPointField, cartesianPointField)",
      "error": [
        "Argument of [greatest] must be [boolean], found value [cartesianPointField] type [cartesian_point]",
        "Argument of [greatest] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(to_double(booleanField), to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(ipField, ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(ipField, ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(to_ip(ipField), to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(versionField, versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(versionField, versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = greatest(to_version(keywordField), to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort greatest(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval greatest(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval greatest(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where greatest(cartesianPointField, cartesianPointField) > 0",
      "error": [
        "Argument of [greatest] must be [boolean], found value [cartesianPointField] type [cartesian_point]",
        "Argument of [greatest] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "row var = ip_prefix(to_ip(\"127.0.0.1\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row ip_prefix(to_ip(\"127.0.0.1\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ip_prefix(to_ip(to_ip(\"127.0.0.1\")), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ip_prefix(true, true, true)",
      "error": [
        "Argument of [ip_prefix] must be [ip], found value [true] type [boolean]",
        "Argument of [ip_prefix] must be [integer], found value [true] type [boolean]",
        "Argument of [ip_prefix] must be [integer], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ip_prefix(ipField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ip_prefix(ipField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ip_prefix(to_ip(ipField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ip_prefix(booleanField, booleanField, booleanField)",
      "error": [
        "Argument of [ip_prefix] must be [ip], found value [booleanField] type [boolean]",
        "Argument of [ip_prefix] must be [integer], found value [booleanField] type [boolean]",
        "Argument of [ip_prefix] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ip_prefix(ipField, integerField, integerField, extraArg)",
      "error": [
        "Error: [ip_prefix] function expects exactly 3 arguments, got 4."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort ip_prefix(ipField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ip_prefix(null, null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval ip_prefix(nullVar, nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row least(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(true, true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row least(true, true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_boolean(true), to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row least(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_double(true), to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row least(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row least(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_ip(\"127.0.0.1\"), to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row least(to_ip(\"127.0.0.1\"), to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_ip(to_ip(\"127.0.0.1\")), to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row least(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row least(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_version(\"1.0.0\"), to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row least(to_version(\"1.0.0\"), to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_version(\"a\"), to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = least(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [
        "Argument of [least] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]",
        "Argument of [least] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where least(doubleField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where least(cartesianPointField, cartesianPointField) > 0",
      "error": [
        "Argument of [least] must be [boolean], found value [cartesianPointField] type [cartesian_point]",
        "Argument of [least] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where least(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where least(cartesianPointField) > 0",
      "error": [
        "Argument of [least] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where least(integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where least(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where least(longField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(cartesianPointField)",
      "error": [
        "Argument of [least] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(booleanField, booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(booleanField, booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(to_boolean(booleanField), to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(cartesianPointField, cartesianPointField)",
      "error": [
        "Argument of [least] must be [boolean], found value [cartesianPointField] type [cartesian_point]",
        "Argument of [least] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(to_double(booleanField), to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(ipField, ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(ipField, ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(to_ip(ipField), to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(versionField, versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(versionField, versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = least(to_version(keywordField), to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort least(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval least(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval least(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = left(\"a\", 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row left(\"a\", 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = left(to_string(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = left(true, true)",
      "error": [
        "Argument of [left] must be [keyword], found value [true] type [boolean]",
        "Argument of [left] must be [integer], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = left(keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval left(keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = left(to_string(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval left(booleanField, booleanField)",
      "error": [
        "Argument of [left] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [left] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = left(textField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval left(textField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval left(keywordField, integerField, extraArg)",
      "error": [
        "Error: [left] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort left(keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval left(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval left(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = length(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row length(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = length(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = length(true)",
      "error": [
        "Argument of [length] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = length(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval length(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = length(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval length(booleanField)",
      "error": [
        "Argument of [length] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = length(*)",
      "error": [
        "Using wildcards (*) in length is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = length(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval length(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval length(keywordField, extraArg)",
      "error": [
        "Error: [length] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort length(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval length(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval length(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = locate(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row locate(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = locate(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = locate(\"a\", \"a\", 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row locate(\"a\", \"a\", 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = locate(to_string(true), to_string(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = locate(true, true, true)",
      "error": [
        "Argument of [locate] must be [keyword], found value [true] type [boolean]",
        "Argument of [locate] must be [keyword], found value [true] type [boolean]",
        "Argument of [locate] must be [integer], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = locate(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = locate(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(booleanField, booleanField)",
      "error": [
        "Argument of [locate] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [locate] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = locate(keywordField, keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(keywordField, keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = locate(to_string(booleanField), to_string(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(booleanField, booleanField, booleanField)",
      "error": [
        "Argument of [locate] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [locate] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [locate] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = locate(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = locate(keywordField, textField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(keywordField, textField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = locate(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = locate(textField, keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(textField, keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = locate(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = locate(textField, textField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(textField, textField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(keywordField, keywordField, integerField, extraArg)",
      "error": [
        "Error: [locate] function expects no more than 3 arguments, got 4."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort locate(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval locate(null, null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval locate(nullVar, nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row log(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row log(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(to_double(true), to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(5.5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row log(5.5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(to_double(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(to_double(true), 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row log(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row log(5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(to_integer(true), to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row log(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(to_integer(true), 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(5, to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(5, to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log(true, true)",
      "error": [
        "Argument of [log] must be [double], found value [true] type [boolean]",
        "Argument of [log] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where log(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(booleanField) > 0",
      "error": [
        "Argument of [log] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where log(doubleField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(booleanField, booleanField) > 0",
      "error": [
        "Argument of [log] must be [double], found value [booleanField] type [boolean]",
        "Argument of [log] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where log(doubleField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(doubleField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(doubleField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(integerField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(integerField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(integerField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(longField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(longField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(longField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(longField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(unsignedLongField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(unsignedLongField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(unsignedLongField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log(unsignedLongField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(booleanField)",
      "error": [
        "Argument of [log] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(*)",
      "error": [
        "Using wildcards (*) in log is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(to_double(booleanField), to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(booleanField, booleanField)",
      "error": [
        "Argument of [log] must be [double], found value [booleanField] type [boolean]",
        "Argument of [log] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(to_double(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(to_double(booleanField), longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(doubleField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(doubleField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(to_double(booleanField), unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(to_integer(booleanField), to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(to_integer(booleanField), longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(integerField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(integerField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(to_integer(booleanField), unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(longField, to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(longField, to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(longField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(longField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(unsignedLongField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(unsignedLongField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(unsignedLongField, to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(unsignedLongField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(unsignedLongField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(unsignedLongField, to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(unsignedLongField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(unsignedLongField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log(unsignedLongField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(unsignedLongField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(doubleField, doubleField, extraArg)",
      "error": [
        "Error: [log] function expects no more than 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort log(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval log(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log10(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row log10(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log10(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log10(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row log10(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log10(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = log10(true)",
      "error": [
        "Argument of [log10] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where log10(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log10(booleanField) > 0",
      "error": [
        "Argument of [log10] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where log10(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log10(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where log10(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log10(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log10(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log10(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log10(booleanField)",
      "error": [
        "Argument of [log10] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log10(*)",
      "error": [
        "Using wildcards (*) in log10 is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log10(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log10(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log10(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log10(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log10(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = log10(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log10(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log10(doubleField, extraArg)",
      "error": [
        "Error: [log10] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort log10(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval log10(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval log10(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ltrim(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row ltrim(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ltrim(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = ltrim(true)",
      "error": [
        "Argument of [ltrim] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ltrim(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ltrim(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ltrim(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ltrim(booleanField)",
      "error": [
        "Argument of [ltrim] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ltrim(*)",
      "error": [
        "Using wildcards (*) in ltrim is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = ltrim(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ltrim(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ltrim(keywordField, extraArg)",
      "error": [
        "Error: [ltrim] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort ltrim(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ltrim(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval ltrim(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(true, true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(true, true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_boolean(true), to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_append(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_datetime(\"2021-01-01T00:00:00Z\"), to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(to_datetime(\"2021-01-01T00:00:00Z\"), to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")), to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_double(true), to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_append(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_append(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_ip(\"127.0.0.1\"), to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(to_ip(\"127.0.0.1\"), to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_ip(to_ip(\"127.0.0.1\")), to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_version(\"1.0.0\"), to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(to_version(\"1.0.0\"), to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_version(\"a\"), to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_append(doubleField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_append(counterDoubleField, counterDoubleField) > 0",
      "error": [
        "Argument of [mv_append] must be [boolean], found value [counterDoubleField] type [counter_double]",
        "Argument of [mv_append] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_append(integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_append(longField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(booleanField, booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(booleanField, booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_boolean(booleanField), to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(counterDoubleField, counterDoubleField)",
      "error": [
        "Argument of [mv_append] must be [boolean], found value [counterDoubleField] type [counter_double]",
        "Argument of [mv_append] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(dateField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(dateField, dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_datetime(dateField), to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_double(booleanField), to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(ipField, ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(ipField, ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_ip(ipField), to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(versionField, versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(versionField, versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_append(to_version(keywordField), to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(booleanField, booleanField, extraArg)",
      "error": [
        "Error: [mv_append] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_append(booleanField, booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_append(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(\"2022\", \"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_append(concat(\"20\", \"22\"), concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_append(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_append(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_avg(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_avg(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_avg(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_avg(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_avg(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_avg(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_avg(true)",
      "error": [
        "Argument of [mv_avg] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_avg(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_avg(booleanField) > 0",
      "error": [
        "Argument of [mv_avg] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_avg(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_avg(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_avg(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_avg(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_avg(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_avg(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_avg(booleanField)",
      "error": [
        "Argument of [mv_avg] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_avg(*)",
      "error": [
        "Using wildcards (*) in mv_avg is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_avg(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_avg(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_avg(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_avg(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_avg(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_avg(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_avg(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_avg(doubleField, extraArg)",
      "error": [
        "Error: [mv_avg] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_avg(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_avg(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_avg(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_concat(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_concat(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_concat(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_concat(true, true)",
      "error": [
        "Argument of [mv_concat] must be [keyword], found value [true] type [boolean]",
        "Argument of [mv_concat] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_concat(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_concat(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_concat(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_concat(booleanField, booleanField)",
      "error": [
        "Argument of [mv_concat] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [mv_concat] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_concat(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_concat(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_concat(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_concat(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_concat(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_concat(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_concat(keywordField, keywordField, extraArg)",
      "error": [
        "Error: [mv_concat] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_concat(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_concat(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_concat(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_count(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_count(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_count(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(booleanField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(counterDoubleField) > 0",
      "error": [
        "Argument of [mv_count] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(cartesianPointField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(cartesianShapeField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(dateField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(geoPointField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(geoShapeField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(ipField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(keywordField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(textField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_count(versionField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(counterDoubleField)",
      "error": [
        "Argument of [mv_count] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(*)",
      "error": [
        "Using wildcards (*) in mv_count is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_count(to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(booleanField, extraArg)",
      "error": [
        "Error: [mv_count] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_count(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_count(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_count(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_count(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_count(to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_dedupe(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_dedupe(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_dedupe(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_dedupe(counterDoubleField) > 0",
      "error": [
        "Argument of [mv_dedupe] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_dedupe(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_dedupe(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(counterDoubleField)",
      "error": [
        "Argument of [mv_dedupe] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(*)",
      "error": [
        "Using wildcards (*) in mv_dedupe is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_dedupe(to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(booleanField, extraArg)",
      "error": [
        "Error: [mv_dedupe] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_dedupe(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_dedupe(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_dedupe(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_dedupe(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_dedupe(to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_first(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_first(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_first(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_first(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_first(counterDoubleField) > 0",
      "error": [
        "Argument of [mv_first] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_first(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_first(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_first(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(counterDoubleField)",
      "error": [
        "Argument of [mv_first] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(*)",
      "error": [
        "Using wildcards (*) in mv_first is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_first(to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(booleanField, extraArg)",
      "error": [
        "Error: [mv_first] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_first(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_first(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_first(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_first(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_first(to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_last(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_last(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_last(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_last(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_last(counterDoubleField) > 0",
      "error": [
        "Argument of [mv_last] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_last(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_last(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_last(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(counterDoubleField)",
      "error": [
        "Argument of [mv_last] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(*)",
      "error": [
        "Using wildcards (*) in mv_last is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_last(to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(booleanField, extraArg)",
      "error": [
        "Error: [mv_last] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_last(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_last(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_last(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_last(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_last(to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_max(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_max(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_max(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_max(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_max(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_max(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_max(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_max(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [
        "Argument of [mv_max] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_max(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_max(cartesianPointField) > 0",
      "error": [
        "Argument of [mv_max] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_max(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_max(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_max(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(cartesianPointField)",
      "error": [
        "Argument of [mv_max] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(*)",
      "error": [
        "Using wildcards (*) in mv_max is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_max(to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(booleanField, extraArg)",
      "error": [
        "Error: [mv_max] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_max(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_max(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_max(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_median(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_median(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_median(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_median(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_median(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_median(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_median(true)",
      "error": [
        "Argument of [mv_median] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_median(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_median(booleanField) > 0",
      "error": [
        "Argument of [mv_median] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_median(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_median(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_median(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_median(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_median(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_median(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_median(booleanField)",
      "error": [
        "Argument of [mv_median] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_median(*)",
      "error": [
        "Using wildcards (*) in mv_median is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_median(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_median(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_median(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_median(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_median(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_median(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_median(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_median(doubleField, extraArg)",
      "error": [
        "Error: [mv_median] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_median(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_median(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_median(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_min(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_min(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_min(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_min(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_min(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_min(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_min(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_min(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [
        "Argument of [mv_min] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_min(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_min(cartesianPointField) > 0",
      "error": [
        "Argument of [mv_min] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_min(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_min(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_min(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(cartesianPointField)",
      "error": [
        "Argument of [mv_min] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(*)",
      "error": [
        "Using wildcards (*) in mv_min is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_min(to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(booleanField, extraArg)",
      "error": [
        "Error: [mv_min] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_min(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_min(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_min(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(true, 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(true, 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_boolean(true), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(cartesianPointField, 5, 5)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_slice(cartesianPointField, 5, 5)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_cartesianpoint(cartesianPointField), to_integer(true), to_integer(true))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_cartesianshape(\"POINT (30 10)\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(to_cartesianshape(\"POINT (30 10)\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_cartesianshape(cartesianPointField), to_integer(true), to_integer(true))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_datetime(\"2021-01-01T00:00:00Z\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(to_datetime(\"2021-01-01T00:00:00Z\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(5.5, 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(5.5, 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_double(true), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(geoPointField, 5, 5)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row mv_slice(geoPointField, 5, 5)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_geopoint(geoPointField), to_integer(true), to_integer(true))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_geoshape(\"POINT (30 10)\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(to_geoshape(\"POINT (30 10)\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_geoshape(geoPointField), to_integer(true), to_integer(true))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_slice(5, 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(5, 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_integer(true), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_ip(\"127.0.0.1\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(to_ip(\"127.0.0.1\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_ip(to_ip(\"127.0.0.1\")), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(\"a\", 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(\"a\", 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_string(true), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(5, to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_version(\"1.0.0\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(to_version(\"1.0.0\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_version(\"a\"), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(5.5, true, true)",
      "error": [
        "Argument of [mv_slice] must be [integer], found value [true] type [boolean]",
        "Argument of [mv_slice] must be [integer], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_slice(doubleField, integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_slice(counterDoubleField, booleanField, booleanField) > 0",
      "error": [
        "Argument of [mv_slice] must be [boolean], found value [counterDoubleField] type [counter_double]",
        "Argument of [mv_slice] must be [integer], found value [booleanField] type [boolean]",
        "Argument of [mv_slice] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_slice(integerField, integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_slice(longField, integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(booleanField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(booleanField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_boolean(booleanField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(counterDoubleField, booleanField, booleanField)",
      "error": [
        "Argument of [mv_slice] must be [boolean], found value [counterDoubleField] type [counter_double]",
        "Argument of [mv_slice] must be [integer], found value [booleanField] type [boolean]",
        "Argument of [mv_slice] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(cartesianPointField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(cartesianPointField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_cartesianpoint(cartesianPointField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(cartesianShapeField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(cartesianShapeField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_cartesianshape(cartesianPointField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(dateField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(dateField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_datetime(dateField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(doubleField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(doubleField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_double(booleanField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(geoPointField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(geoPointField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_geopoint(geoPointField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(geoShapeField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(geoShapeField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_geoshape(geoPointField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(integerField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(integerField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_integer(booleanField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(ipField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(ipField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_ip(ipField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(keywordField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(keywordField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_string(booleanField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(longField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(longField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(longField, to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(textField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(textField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(versionField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(versionField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(to_version(keywordField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(booleanField, integerField, integerField, extraArg)",
      "error": [
        "Error: [mv_slice] function expects no more than 3 arguments, got 4."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_slice(booleanField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(null, null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_slice(nullVar, nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(\"2022\", integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_slice(concat(\"20\", \"22\"), integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_cartesianpoint(\"POINT (30 10)\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(to_cartesianpoint(\"POINT (30 10)\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_datetime(\"2021-01-01T00:00:00Z\"), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_geopoint(\"POINT (30 10)\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_slice(to_geopoint(\"POINT (30 10)\"), 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_slice(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_slice(dateField, to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort(true, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_sort(true, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort(to_datetime(\"2021-01-01T00:00:00Z\"), \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_sort(to_datetime(\"2021-01-01T00:00:00Z\"), \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort(5.5, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_sort(5.5, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort(5, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_sort(5, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort(to_ip(\"127.0.0.1\"), \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_sort(to_ip(\"127.0.0.1\"), \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort(\"a\", \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_sort(\"a\", \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort(to_version(\"1.0.0\"), \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_sort(to_version(\"1.0.0\"), \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort(to_cartesianpoint(\"POINT (30 10)\"), true)",
      "error": [
        "Argument of [mv_sort] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]",
        "Argument of [mv_sort] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(booleanField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(booleanField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(dateField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(dateField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(doubleField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(doubleField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(integerField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(integerField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(ipField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(ipField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(keywordField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(keywordField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(longField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(longField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(textField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(textField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(versionField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(versionField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(booleanField, \"asc\", extraArg)",
      "error": [
        "Error: [mv_sort] function expects no more than 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_sort(booleanField, \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_sort(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(\"2022\", \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(concat(\"20\", \"22\"), \"asc\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort(5, \"a\")",
      "error": [],
      "warning": [
        "Invalid option [\"a\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "row mv_sort(5, \"a\")",
      "error": [],
      "warning": [
        "Invalid option [\"a\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "row var = mv_sort(\"a\", \"a\")",
      "error": [],
      "warning": [
        "Invalid option [\"a\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "row mv_sort(\"a\", \"a\")",
      "error": [],
      "warning": [
        "Invalid option [\"a\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "row var = mv_sort(to_version(\"1.0.0\"), \"a\")",
      "error": [],
      "warning": [
        "Invalid option [\"a\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "row mv_sort(to_version(\"1.0.0\"), \"a\")",
      "error": [],
      "warning": [
        "Invalid option [\"a\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "from a_index | eval var = mv_sort(longField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(longField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sort(versionField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort(versionField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sum(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_sum(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sum(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sum(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_sum(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sum(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sum(true)",
      "error": [
        "Argument of [mv_sum] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_sum(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_sum(booleanField) > 0",
      "error": [
        "Argument of [mv_sum] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_sum(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_sum(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_sum(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sum(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sum(booleanField)",
      "error": [
        "Argument of [mv_sum] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sum(*)",
      "error": [
        "Using wildcards (*) in mv_sum is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sum(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_sum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sum(doubleField, extraArg)",
      "error": [
        "Error: [mv_sum] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_sum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sum(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_sum(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_zip(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_zip(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_zip(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_zip(\"a\", \"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_zip(\"a\", \"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_zip(to_string(true), to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_zip(true, true, true)",
      "error": [
        "Argument of [mv_zip] must be [keyword], found value [true] type [boolean]",
        "Argument of [mv_zip] must be [keyword], found value [true] type [boolean]",
        "Argument of [mv_zip] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(booleanField, booleanField)",
      "error": [
        "Argument of [mv_zip] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [mv_zip] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(keywordField, keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(keywordField, keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(to_string(booleanField), to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(booleanField, booleanField, booleanField)",
      "error": [
        "Argument of [mv_zip] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [mv_zip] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [mv_zip] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(keywordField, keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(keywordField, keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(keywordField, textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(keywordField, textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(keywordField, textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(keywordField, textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(textField, keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(textField, keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(textField, keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(textField, keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(textField, textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(textField, textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_zip(textField, textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(textField, textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(keywordField, keywordField, keywordField, extraArg)",
      "error": [
        "Error: [mv_zip] function expects no more than 3 arguments, got 4."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_zip(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_zip(null, null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_zip(nullVar, nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row now()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now(extraArg)",
      "error": [
        "Error: [now] function expects exactly 0 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pi()",
      "error": [],
      "warning": []
    },
    {
      "query": "row pi()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pi() > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pi()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pi()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pi(extraArg)",
      "error": [
        "Error: [pi] function expects exactly 0 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort pi()",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval pi()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row pow(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(to_double(true), to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(5.5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row pow(5.5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(to_double(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(to_double(true), 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row pow(5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(to_integer(true), to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row pow(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(to_integer(true), 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(5, to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(5, to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = pow(true, true)",
      "error": [
        "Argument of [pow] must be [double], found value [true] type [boolean]",
        "Argument of [pow] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where pow(doubleField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(booleanField, booleanField) > 0",
      "error": [
        "Argument of [pow] must be [double], found value [booleanField] type [boolean]",
        "Argument of [pow] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where pow(doubleField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(doubleField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(doubleField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(integerField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(integerField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(integerField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(longField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(longField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(longField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(longField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(unsignedLongField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(unsignedLongField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(unsignedLongField, longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where pow(unsignedLongField, unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(to_double(booleanField), to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(booleanField, booleanField)",
      "error": [
        "Argument of [pow] must be [double], found value [booleanField] type [boolean]",
        "Argument of [pow] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(to_double(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(to_double(booleanField), longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(doubleField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(doubleField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(to_double(booleanField), unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(to_integer(booleanField), to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(to_integer(booleanField), longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(integerField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(integerField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(to_integer(booleanField), unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(longField, to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(longField, to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(longField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(longField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(unsignedLongField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(unsignedLongField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(unsignedLongField, to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(unsignedLongField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(unsignedLongField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(unsignedLongField, to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(unsignedLongField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(unsignedLongField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = pow(unsignedLongField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(unsignedLongField, unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(doubleField, doubleField, extraArg)",
      "error": [
        "Error: [pow] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort pow(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval pow(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval pow(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = repeat(\"a\", 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row repeat(\"a\", 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = repeat(to_string(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = repeat(true, true)",
      "error": [
        "Argument of [repeat] must be [keyword], found value [true] type [boolean]",
        "Argument of [repeat] must be [integer], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = repeat(keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval repeat(keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = repeat(to_string(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval repeat(booleanField, booleanField)",
      "error": [
        "Argument of [repeat] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [repeat] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = repeat(textField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval repeat(textField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval repeat(keywordField, integerField, extraArg)",
      "error": [
        "Error: [repeat] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort repeat(keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval repeat(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval repeat(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = replace(\"a\", \"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row replace(\"a\", \"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = replace(to_string(true), to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = replace(true, true, true)",
      "error": [
        "Argument of [replace] must be [keyword], found value [true] type [boolean]",
        "Argument of [replace] must be [keyword], found value [true] type [boolean]",
        "Argument of [replace] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = replace(keywordField, keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(keywordField, keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = replace(to_string(booleanField), to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(booleanField, booleanField, booleanField)",
      "error": [
        "Argument of [replace] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [replace] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [replace] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = replace(keywordField, keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(keywordField, keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = replace(keywordField, textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(keywordField, textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = replace(keywordField, textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(keywordField, textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = replace(textField, keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(textField, keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = replace(textField, keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(textField, keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = replace(textField, textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(textField, textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = replace(textField, textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(textField, textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(keywordField, keywordField, keywordField, extraArg)",
      "error": [
        "Error: [replace] function expects exactly 3 arguments, got 4."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort replace(keywordField, keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval replace(null, null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval replace(nullVar, nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = right(\"a\", 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row right(\"a\", 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = right(to_string(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = right(true, true)",
      "error": [
        "Argument of [right] must be [keyword], found value [true] type [boolean]",
        "Argument of [right] must be [integer], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = right(keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval right(keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = right(to_string(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval right(booleanField, booleanField)",
      "error": [
        "Argument of [right] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [right] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = right(textField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval right(textField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval right(keywordField, integerField, extraArg)",
      "error": [
        "Error: [right] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort right(keywordField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval right(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval right(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = round(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row round(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = round(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = round(5.5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row round(5.5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = round(to_double(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = round(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row round(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = round(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = round(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row round(5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = round(to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = round(5, to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = round(true, true)",
      "error": [
        "Argument of [round] must be [double], found value [true] type [boolean]",
        "Argument of [round] must be [integer], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where round(booleanField) > 0",
      "error": [
        "Argument of [round] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where round(doubleField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where round(booleanField, booleanField) > 0",
      "error": [
        "Argument of [round] must be [double], found value [booleanField] type [boolean]",
        "Argument of [round] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where round(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where round(integerField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where round(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where round(longField, integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where round(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(booleanField)",
      "error": [
        "Argument of [round] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(*)",
      "error": [
        "Using wildcards (*) in round is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(to_double(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(booleanField, booleanField)",
      "error": [
        "Argument of [round] must be [double], found value [booleanField] type [boolean]",
        "Argument of [round] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(longField, to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = round(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField, integerField, extraArg)",
      "error": [
        "Error: [round] function expects no more than 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval round(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = rtrim(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row rtrim(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = rtrim(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = rtrim(true)",
      "error": [
        "Argument of [rtrim] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = rtrim(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval rtrim(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = rtrim(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval rtrim(booleanField)",
      "error": [
        "Argument of [rtrim] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = rtrim(*)",
      "error": [
        "Using wildcards (*) in rtrim is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = rtrim(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval rtrim(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval rtrim(keywordField, extraArg)",
      "error": [
        "Error: [rtrim] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort rtrim(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval rtrim(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval rtrim(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = signum(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row signum(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = signum(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = signum(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row signum(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = signum(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = signum(true)",
      "error": [
        "Argument of [signum] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where signum(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where signum(booleanField) > 0",
      "error": [
        "Argument of [signum] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where signum(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where signum(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where signum(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = signum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval signum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = signum(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval signum(booleanField)",
      "error": [
        "Argument of [signum] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = signum(*)",
      "error": [
        "Using wildcards (*) in signum is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = signum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval signum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = signum(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = signum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval signum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = signum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval signum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval signum(doubleField, extraArg)",
      "error": [
        "Error: [signum] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort signum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval signum(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval signum(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sin(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row sin(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sin(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sin(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row sin(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sin(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sin(true)",
      "error": [
        "Argument of [sin] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sin(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where sin(booleanField) > 0",
      "error": [
        "Argument of [sin] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sin(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where sin(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where sin(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sin(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sin(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sin(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sin(booleanField)",
      "error": [
        "Argument of [sin] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sin(*)",
      "error": [
        "Using wildcards (*) in sin is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sin(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sin(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sin(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sin(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sin(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sin(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sin(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sin(doubleField, extraArg)",
      "error": [
        "Error: [sin] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort sin(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sin(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval sin(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sinh(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row sinh(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sinh(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sinh(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row sinh(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sinh(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sinh(true)",
      "error": [
        "Argument of [sinh] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sinh(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where sinh(booleanField) > 0",
      "error": [
        "Argument of [sinh] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sinh(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where sinh(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where sinh(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sinh(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sinh(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sinh(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sinh(booleanField)",
      "error": [
        "Argument of [sinh] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sinh(*)",
      "error": [
        "Using wildcards (*) in sinh is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sinh(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sinh(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sinh(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sinh(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sinh(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sinh(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sinh(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sinh(doubleField, extraArg)",
      "error": [
        "Error: [sinh] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort sinh(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sinh(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval sinh(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = split(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row split(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = split(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = split(true, true)",
      "error": [
        "Argument of [split] must be [keyword], found value [true] type [boolean]",
        "Argument of [split] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = split(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval split(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = split(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval split(booleanField, booleanField)",
      "error": [
        "Argument of [split] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [split] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = split(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval split(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = split(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval split(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = split(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval split(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval split(keywordField, keywordField, extraArg)",
      "error": [
        "Error: [split] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort split(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval split(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval split(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sqrt(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row sqrt(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sqrt(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sqrt(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row sqrt(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sqrt(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = sqrt(true)",
      "error": [
        "Argument of [sqrt] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sqrt(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where sqrt(booleanField) > 0",
      "error": [
        "Argument of [sqrt] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sqrt(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where sqrt(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where sqrt(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sqrt(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sqrt(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sqrt(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sqrt(booleanField)",
      "error": [
        "Argument of [sqrt] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sqrt(*)",
      "error": [
        "Using wildcards (*) in sqrt is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sqrt(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sqrt(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sqrt(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sqrt(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sqrt(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sqrt(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sqrt(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sqrt(doubleField, extraArg)",
      "error": [
        "Error: [sqrt] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort sqrt(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval sqrt(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval sqrt(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_contains(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(cartesianPointField, to_cartesianshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_contains(cartesianPointField, to_cartesianshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianpoint(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianshape(\"POINT (30 10)\"), cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_contains(to_cartesianshape(\"POINT (30 10)\"), cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianshape(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_contains(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_contains(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(geoPointField, to_geoshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_contains(geoPointField, to_geoshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geopoint(geoPointField), to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geoshape(\"POINT (30 10)\"), geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_contains(to_geoshape(\"POINT (30 10)\"), geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geoshape(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_contains(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_contains(true, true)",
      "error": [
        "Argument of [st_contains] must be [cartesian_point], found value [true] type [boolean]",
        "Argument of [st_contains] must be [cartesian_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(booleanField, booleanField)",
      "error": [
        "Argument of [st_contains] must be [cartesian_point], found value [booleanField] type [boolean]",
        "Argument of [st_contains] must be [cartesian_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(cartesianPointField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(cartesianPointField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(to_cartesianpoint(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(cartesianShapeField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(cartesianShapeField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(to_cartesianshape(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(geoPointField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(geoPointField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(to_geopoint(geoPointField), to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(geoShapeField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(geoShapeField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(to_geoshape(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_contains(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(cartesianPointField, cartesianPointField, extraArg)",
      "error": [
        "Error: [st_contains] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort st_contains(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_contains(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval st_contains(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_contains(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_contains(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianshape(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_contains(to_cartesianshape(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_contains(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geopoint(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_contains(to_geopoint(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geoshape(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_contains(to_geoshape(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_contains(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_disjoint(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(cartesianPointField, to_cartesianshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_disjoint(cartesianPointField, to_cartesianshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianpoint(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianshape(\"POINT (30 10)\"), cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_disjoint(to_cartesianshape(\"POINT (30 10)\"), cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianshape(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_disjoint(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_disjoint(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(geoPointField, to_geoshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_disjoint(geoPointField, to_geoshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geopoint(geoPointField), to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geoshape(\"POINT (30 10)\"), geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_disjoint(to_geoshape(\"POINT (30 10)\"), geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geoshape(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_disjoint(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(true, true)",
      "error": [
        "Argument of [st_disjoint] must be [cartesian_point], found value [true] type [boolean]",
        "Argument of [st_disjoint] must be [cartesian_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(booleanField, booleanField)",
      "error": [
        "Argument of [st_disjoint] must be [cartesian_point], found value [booleanField] type [boolean]",
        "Argument of [st_disjoint] must be [cartesian_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(cartesianPointField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(cartesianPointField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(to_cartesianpoint(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(cartesianShapeField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(cartesianShapeField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(to_cartesianshape(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(geoPointField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(geoPointField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(to_geopoint(geoPointField), to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(geoShapeField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(geoShapeField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(to_geoshape(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_disjoint(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(cartesianPointField, cartesianPointField, extraArg)",
      "error": [
        "Error: [st_disjoint] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort st_disjoint(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_disjoint(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval st_disjoint(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_disjoint(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_disjoint(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianshape(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_disjoint(to_cartesianshape(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_disjoint(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geopoint(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_disjoint(to_geopoint(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geoshape(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_disjoint(to_geoshape(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_disjoint(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_distance(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_distance(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_distance(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_distance(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_distance(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_distance(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_distance(true, true)",
      "error": [
        "Argument of [st_distance] must be [cartesian_point], found value [true] type [boolean]",
        "Argument of [st_distance] must be [cartesian_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_distance(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_distance(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_distance(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_distance(booleanField, booleanField)",
      "error": [
        "Argument of [st_distance] must be [cartesian_point], found value [booleanField] type [boolean]",
        "Argument of [st_distance] must be [cartesian_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_distance(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_distance(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_distance(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_distance(cartesianPointField, cartesianPointField, extraArg)",
      "error": [
        "Error: [st_distance] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort st_distance(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_distance(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval st_distance(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_distance(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_distance(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_distance(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_distance(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_distance(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_distance(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_intersects(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(cartesianPointField, to_cartesianshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_intersects(cartesianPointField, to_cartesianshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianpoint(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianshape(\"POINT (30 10)\"), cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_intersects(to_cartesianshape(\"POINT (30 10)\"), cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianshape(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_intersects(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_intersects(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(geoPointField, to_geoshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_intersects(geoPointField, to_geoshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geopoint(geoPointField), to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geoshape(\"POINT (30 10)\"), geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_intersects(to_geoshape(\"POINT (30 10)\"), geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geoshape(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_intersects(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_intersects(true, true)",
      "error": [
        "Argument of [st_intersects] must be [cartesian_point], found value [true] type [boolean]",
        "Argument of [st_intersects] must be [cartesian_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(booleanField, booleanField)",
      "error": [
        "Argument of [st_intersects] must be [cartesian_point], found value [booleanField] type [boolean]",
        "Argument of [st_intersects] must be [cartesian_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(cartesianPointField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(cartesianPointField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(to_cartesianpoint(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(cartesianShapeField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(cartesianShapeField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(to_cartesianshape(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(geoPointField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(geoPointField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(to_geopoint(geoPointField), to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(geoShapeField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(geoShapeField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(to_geoshape(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_intersects(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(cartesianPointField, cartesianPointField, extraArg)",
      "error": [
        "Error: [st_intersects] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort st_intersects(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_intersects(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval st_intersects(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_intersects(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_intersects(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianshape(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_intersects(to_cartesianshape(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_intersects(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geopoint(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_intersects(to_geopoint(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geoshape(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_intersects(to_geoshape(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_intersects(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_within(cartesianPointField, cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(cartesianPointField, to_cartesianshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_within(cartesianPointField, to_cartesianshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianpoint(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianshape(\"POINT (30 10)\"), cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_within(to_cartesianshape(\"POINT (30 10)\"), cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianshape(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_within(to_cartesianshape(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]",
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_within(geoPointField, geoPointField)",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(geoPointField, to_geoshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_within(geoPointField, to_geoshape(\"POINT (30 10)\"))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geopoint(geoPointField), to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geoshape(\"POINT (30 10)\"), geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_within(to_geoshape(\"POINT (30 10)\"), geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geoshape(geoPointField), to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_within(to_geoshape(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]",
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_within(true, true)",
      "error": [
        "Argument of [st_within] must be [cartesian_point], found value [true] type [boolean]",
        "Argument of [st_within] must be [cartesian_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(to_cartesianpoint(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(booleanField, booleanField)",
      "error": [
        "Argument of [st_within] must be [cartesian_point], found value [booleanField] type [boolean]",
        "Argument of [st_within] must be [cartesian_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(cartesianPointField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(cartesianPointField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(to_cartesianpoint(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(cartesianShapeField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(cartesianShapeField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(to_cartesianshape(cartesianPointField), to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(cartesianShapeField, cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(to_cartesianshape(cartesianPointField), to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(geoPointField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(to_geopoint(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(geoPointField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(geoPointField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(to_geopoint(geoPointField), to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(geoShapeField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(geoShapeField, geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(to_geoshape(geoPointField), to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(geoShapeField, geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_within(to_geoshape(geoPointField), to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(cartesianPointField, cartesianPointField, extraArg)",
      "error": [
        "Error: [st_within] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort st_within(cartesianPointField, cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_within(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval st_within(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_within(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_within(to_cartesianpoint(\"POINT (30 10)\"), to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianshape(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_within(to_cartesianshape(\"POINT (30 10)\"), to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")), to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_within(to_geopoint(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geopoint(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_within(to_geopoint(\"POINT (30 10)\"), to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geopoint(to_geopoint(\"POINT (30 10)\")), to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geoshape(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_within(to_geoshape(\"POINT (30 10)\"), to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_within(to_geoshape(to_geopoint(\"POINT (30 10)\")), to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_x(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_x(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_x(to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_x(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_x(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_x(to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_x(true)",
      "error": [
        "Argument of [st_x] must be [cartesian_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_x(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_x(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_x(to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_x(booleanField)",
      "error": [
        "Argument of [st_x] must be [cartesian_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_x(*)",
      "error": [
        "Using wildcards (*) in st_x is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_x(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_x(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_x(to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_x(cartesianPointField, extraArg)",
      "error": [
        "Error: [st_x] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort st_x(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_x(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval st_x(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_x(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_x(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_x(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_x(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_x(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_x(to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_y(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_y(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_y(to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_y(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row st_y(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_y(to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = st_y(true)",
      "error": [
        "Argument of [st_y] must be [cartesian_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_y(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_y(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_y(to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_y(booleanField)",
      "error": [
        "Argument of [st_y] must be [cartesian_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_y(*)",
      "error": [
        "Using wildcards (*) in st_y is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_y(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_y(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_y(to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_y(cartesianPointField, extraArg)",
      "error": [
        "Error: [st_y] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort st_y(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval st_y(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval st_y(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_y(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_y(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_y(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_y(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row st_y(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = st_y(to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = starts_with(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row starts_with(\"a\", \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = starts_with(to_string(true), to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = starts_with(true, true)",
      "error": [
        "Argument of [starts_with] must be [keyword], found value [true] type [boolean]",
        "Argument of [starts_with] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = starts_with(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval starts_with(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = starts_with(to_string(booleanField), to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval starts_with(booleanField, booleanField)",
      "error": [
        "Argument of [starts_with] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [starts_with] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = starts_with(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval starts_with(textField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval starts_with(keywordField, keywordField, extraArg)",
      "error": [
        "Error: [starts_with] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort starts_with(keywordField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval starts_with(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval starts_with(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = starts_with(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval starts_with(keywordField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = starts_with(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval starts_with(textField, keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = substring(\"a\", 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row substring(\"a\", 5, 5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = substring(to_string(true), to_integer(true), to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = substring(true, true, true)",
      "error": [
        "Argument of [substring] must be [keyword], found value [true] type [boolean]",
        "Argument of [substring] must be [integer], found value [true] type [boolean]",
        "Argument of [substring] must be [integer], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = substring(keywordField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval substring(keywordField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = substring(to_string(booleanField), to_integer(booleanField), to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval substring(booleanField, booleanField, booleanField)",
      "error": [
        "Argument of [substring] must be [keyword], found value [booleanField] type [boolean]",
        "Argument of [substring] must be [integer], found value [booleanField] type [boolean]",
        "Argument of [substring] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = substring(textField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval substring(textField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval substring(keywordField, integerField, integerField, extraArg)",
      "error": [
        "Error: [substring] function expects no more than 3 arguments, got 4."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort substring(keywordField, integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval substring(null, null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval substring(nullVar, nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tan(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row tan(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tan(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tan(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row tan(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tan(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tan(true)",
      "error": [
        "Argument of [tan] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where tan(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where tan(booleanField) > 0",
      "error": [
        "Argument of [tan] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where tan(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where tan(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where tan(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tan(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tan(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tan(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tan(booleanField)",
      "error": [
        "Argument of [tan] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tan(*)",
      "error": [
        "Using wildcards (*) in tan is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tan(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tan(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tan(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tan(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tan(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tan(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tan(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tan(doubleField, extraArg)",
      "error": [
        "Error: [tan] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort tan(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tan(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval tan(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tanh(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row tanh(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tanh(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tanh(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row tanh(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tanh(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tanh(true)",
      "error": [
        "Argument of [tanh] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where tanh(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where tanh(booleanField) > 0",
      "error": [
        "Argument of [tanh] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where tanh(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where tanh(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where tanh(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tanh(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tanh(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tanh(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tanh(booleanField)",
      "error": [
        "Argument of [tanh] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tanh(*)",
      "error": [
        "Using wildcards (*) in tanh is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tanh(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tanh(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tanh(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tanh(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tanh(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tanh(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tanh(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tanh(doubleField, extraArg)",
      "error": [
        "Error: [tanh] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort tanh(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tanh(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval tanh(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = tau()",
      "error": [],
      "warning": []
    },
    {
      "query": "row tau()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where tau() > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = tau()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tau()",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval tau(extraArg)",
      "error": [
        "Error: [tau] function expects exactly 0 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort tau()",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval tau()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_base64(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_base64(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_base64(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_base64(true)",
      "error": [
        "Argument of [to_base64] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_base64(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_base64(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_base64(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_base64(booleanField)",
      "error": [
        "Argument of [to_base64] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_base64(*)",
      "error": [
        "Using wildcards (*) in to_base64 is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_base64(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_base64(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_base64(keywordField, extraArg)",
      "error": [
        "Error: [to_base64] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_base64(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_base64(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_base64(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_boolean(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_boolean(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_bool(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_boolean(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_boolean(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_boolean(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_bool(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_boolean(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_boolean(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_boolean(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_bool(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_boolean(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_boolean(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_boolean(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_bool(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_boolean(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_boolean(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [
        "Argument of [to_boolean] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_boolean(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_bool(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_boolean(cartesianPointField)",
      "error": [
        "Argument of [to_boolean] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(*)",
      "error": [
        "Using wildcards (*) in to_boolean is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_boolean(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_bool(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_boolean(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_bool(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_boolean(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_bool(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_boolean(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_bool(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_boolean(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_bool(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_boolean(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_boolean(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_bool(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_boolean(booleanField, extraArg)",
      "error": [
        "Error: [to_boolean] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_boolean(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_boolean(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_boolean(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianpoint(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row to_cartesianpoint(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_cartesianpoint(to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_cartesianpoint(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_cartesianpoint(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianpoint(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianpoint(true)",
      "error": [
        "Argument of [to_cartesianpoint] must be [cartesian_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianpoint(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianpoint(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianpoint(to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianpoint(booleanField)",
      "error": [
        "Argument of [to_cartesianpoint] must be [cartesian_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianpoint(*)",
      "error": [
        "Using wildcards (*) in to_cartesianpoint is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianpoint(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianpoint(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianpoint(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianpoint(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianpoint(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianpoint(cartesianPointField, extraArg)",
      "error": [
        "Error: [to_cartesianpoint] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_cartesianpoint(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianpoint(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_cartesianpoint(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianpoint(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianshape(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row to_cartesianshape(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_cartesianshape(to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_cartesianshape(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_cartesianshape(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianshape(to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_cartesianshape(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_cartesianshape(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianshape(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianshape(true)",
      "error": [
        "Argument of [to_cartesianshape] must be [cartesian_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianshape(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianshape(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianshape(to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianshape(booleanField)",
      "error": [
        "Argument of [to_cartesianshape] must be [cartesian_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianshape(*)",
      "error": [
        "Using wildcards (*) in to_cartesianshape is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianshape(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianshape(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianshape(to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianshape(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianshape(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianshape(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_cartesianshape(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianshape(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianshape(cartesianPointField, extraArg)",
      "error": [
        "Error: [to_cartesianshape] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_cartesianshape(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_cartesianshape(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_cartesianshape(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianshape(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_cartesianshape(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_datetime(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_datetime(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_dt(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_datetime(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_datetime(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_datetime(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_dt(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_datetime(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_datetime(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_datetime(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_dt(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_datetime(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_datetime(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_datetime(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_dt(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_datetime(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_datetime(true)",
      "error": [
        "Argument of [to_datetime] must be [date], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dt(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(booleanField)",
      "error": [
        "Argument of [to_datetime] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(*)",
      "error": [
        "Using wildcards (*) in to_datetime is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dt(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dt(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dt(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dt(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dt(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_datetime(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dt(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(dateField, extraArg)",
      "error": [
        "Error: [to_datetime] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_datetime(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_datetime(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_datetime(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_degrees(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_degrees(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_degrees(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_degrees(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_degrees(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_degrees(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_degrees(true)",
      "error": [
        "Argument of [to_degrees] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_degrees(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_degrees(booleanField) > 0",
      "error": [
        "Argument of [to_degrees] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_degrees(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_degrees(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_degrees(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_degrees(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_degrees(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_degrees(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_degrees(booleanField)",
      "error": [
        "Argument of [to_degrees] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_degrees(*)",
      "error": [
        "Using wildcards (*) in to_degrees is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_degrees(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_degrees(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_degrees(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_degrees(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_degrees(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_degrees(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_degrees(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_degrees(doubleField, extraArg)",
      "error": [
        "Error: [to_degrees] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_degrees(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_degrees(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_degrees(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_double(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_dbl(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_double(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_dbl(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_double(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_dbl(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_double(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_dbl(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_double(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_dbl(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_double(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [
        "Argument of [to_double] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(booleanField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(cartesianPointField) > 0",
      "error": [
        "Argument of [to_double] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(counterDoubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(counterIntegerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(counterLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(dateField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(keywordField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(textField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_double(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(cartesianPointField)",
      "error": [
        "Argument of [to_double] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(*)",
      "error": [
        "Using wildcards (*) in to_double is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_double(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_dbl(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(booleanField, extraArg)",
      "error": [
        "Error: [to_double] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_double(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_double(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_double(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geopoint(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row to_geopoint(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_geopoint(to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_geopoint(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_geopoint(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geopoint(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geopoint(true)",
      "error": [
        "Argument of [to_geopoint] must be [geo_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geopoint(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geopoint(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geopoint(to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geopoint(booleanField)",
      "error": [
        "Argument of [to_geopoint] must be [geo_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geopoint(*)",
      "error": [
        "Using wildcards (*) in to_geopoint is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geopoint(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geopoint(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geopoint(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geopoint(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geopoint(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geopoint(geoPointField, extraArg)",
      "error": [
        "Error: [to_geopoint] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_geopoint(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geopoint(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_geopoint(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geopoint(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_geopoint(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geopoint(to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geoshape(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row to_geoshape(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_geoshape(to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_geoshape(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_geoshape(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geoshape(to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_geoshape(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_geoshape(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geoshape(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geoshape(true)",
      "error": [
        "Argument of [to_geoshape] must be [geo_point], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geoshape(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geoshape(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geoshape(to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geoshape(booleanField)",
      "error": [
        "Argument of [to_geoshape] must be [geo_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geoshape(*)",
      "error": [
        "Using wildcards (*) in to_geoshape is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geoshape(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geoshape(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geoshape(to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geoshape(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geoshape(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geoshape(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_geoshape(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geoshape(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geoshape(geoPointField, extraArg)",
      "error": [
        "Error: [to_geoshape] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_geoshape(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_geoshape(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_geoshape(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geoshape(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_geoshape(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geoshape(to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_geoshape(to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_integer(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_int(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_integer(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_int(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_integer(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_int(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_integer(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_int(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_integer(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_int(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_integer(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [
        "Argument of [to_integer] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_integer(booleanField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_integer(cartesianPointField) > 0",
      "error": [
        "Argument of [to_integer] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_integer(counterIntegerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_integer(dateField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_integer(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_integer(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_integer(keywordField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_integer(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_integer(textField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_integer(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_int(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(cartesianPointField)",
      "error": [
        "Argument of [to_integer] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(*)",
      "error": [
        "Using wildcards (*) in to_integer is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_int(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_int(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_int(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_int(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_int(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_int(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_int(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_integer(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_int(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(booleanField, extraArg)",
      "error": [
        "Error: [to_integer] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_integer(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_integer(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_integer(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_ip(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_ip(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(true)",
      "error": [
        "Argument of [to_ip] must be [ip], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ip(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_ip(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ip(to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_ip(booleanField)",
      "error": [
        "Argument of [to_ip] must be [ip], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ip(*)",
      "error": [
        "Using wildcards (*) in to_ip is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ip(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_ip(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ip(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ip(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_ip(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_ip(ipField, extraArg)",
      "error": [
        "Error: [to_ip] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_ip(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_ip(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_ip(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_long(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_long(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_long(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_long(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_long(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_long(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [
        "Argument of [to_long] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(booleanField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(cartesianPointField) > 0",
      "error": [
        "Argument of [to_long] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(counterIntegerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(counterLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(dateField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(keywordField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(textField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_long(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(cartesianPointField)",
      "error": [
        "Argument of [to_long] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(*)",
      "error": [
        "Using wildcards (*) in to_long is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_long(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(booleanField, extraArg)",
      "error": [
        "Error: [to_long] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_long(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_long(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_long(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_lower(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_lower(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_lower(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_lower(true)",
      "error": [
        "Argument of [to_lower] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_lower(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_lower(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(booleanField)",
      "error": [
        "Argument of [to_lower] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_lower(*)",
      "error": [
        "Using wildcards (*) in to_lower is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_lower(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(keywordField, extraArg)",
      "error": [
        "Error: [to_lower] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_lower(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_lower(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_radians(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_radians(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_radians(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_radians(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_radians(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_radians(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_radians(true)",
      "error": [
        "Argument of [to_radians] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_radians(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_radians(booleanField) > 0",
      "error": [
        "Argument of [to_radians] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_radians(integerField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_radians(longField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where to_radians(unsignedLongField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_radians(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_radians(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_radians(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_radians(booleanField)",
      "error": [
        "Argument of [to_radians] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_radians(*)",
      "error": [
        "Using wildcards (*) in to_radians is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_radians(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_radians(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_radians(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_radians(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_radians(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_radians(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_radians(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_radians(doubleField, extraArg)",
      "error": [
        "Error: [to_radians] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_radians(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_radians(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_radians(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_unsigned_long(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ul(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ulong(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_unsigned_long(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ul(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ulong(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_unsigned_long(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ul(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ulong(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_unsigned_long(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ul(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ulong(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_unsigned_long(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ul(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ulong(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_unsigned_long(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [
        "Argument of [to_unsigned_long] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_unsigned_long(booleanField) > 0",
      "error": [
        "Argument of [>] must be [double], found value [to_unsigned_long(booleanField)] type [unsigned_long]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_unsigned_long(cartesianPointField) > 0",
      "error": [
        "Argument of [to_unsigned_long] must be [boolean], found value [cartesianPointField] type [cartesian_point]",
        "Argument of [>] must be [double], found value [to_unsigned_long(cartesianPointField)] type [unsigned_long]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_unsigned_long(dateField) > 0",
      "error": [
        "Argument of [>] must be [double], found value [to_unsigned_long(dateField)] type [unsigned_long]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_unsigned_long(doubleField) > 0",
      "error": [
        "Argument of [>] must be [double], found value [to_unsigned_long(doubleField)] type [unsigned_long]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_unsigned_long(integerField) > 0",
      "error": [
        "Argument of [>] must be [double], found value [to_unsigned_long(integerField)] type [unsigned_long]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_unsigned_long(keywordField) > 0",
      "error": [
        "Argument of [>] must be [double], found value [to_unsigned_long(keywordField)] type [unsigned_long]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_unsigned_long(longField) > 0",
      "error": [
        "Argument of [>] must be [double], found value [to_unsigned_long(longField)] type [unsigned_long]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_unsigned_long(textField) > 0",
      "error": [
        "Argument of [>] must be [double], found value [to_unsigned_long(textField)] type [unsigned_long]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where to_unsigned_long(unsignedLongField) > 0",
      "error": [
        "Argument of [>] must be [double], found value [to_unsigned_long(unsignedLongField)] type [unsigned_long]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ul(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ulong(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(cartesianPointField)",
      "error": [
        "Argument of [to_unsigned_long] must be [boolean], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(*)",
      "error": [
        "Using wildcards (*) in to_unsigned_long is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ul(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ulong(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ul(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ulong(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ul(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ulong(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ul(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ulong(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ul(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ulong(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ul(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ulong(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_unsigned_long(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ul(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ulong(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(booleanField, extraArg)",
      "error": [
        "Error: [to_unsigned_long] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_unsigned_long(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_unsigned_long(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_unsigned_long(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_upper(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_upper(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_upper(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_upper(true)",
      "error": [
        "Argument of [to_upper] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_upper(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_upper(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_upper(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_upper(booleanField)",
      "error": [
        "Argument of [to_upper] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_upper(*)",
      "error": [
        "Using wildcards (*) in to_upper is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_upper(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_upper(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_upper(keywordField, extraArg)",
      "error": [
        "Error: [to_upper] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_upper(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_upper(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_upper(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_version(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_version(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ver(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_version(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_version(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ver(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_version(true)",
      "error": [
        "Argument of [to_version] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_version(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_version(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ver(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_version(*)",
      "error": [
        "Using wildcards (*) in to_version is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_version(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_version(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ver(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_version(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_version(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_ver(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_version(keywordField, extraArg)",
      "error": [
        "Error: [to_version] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_version(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_version(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_version(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = trim(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row trim(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = trim(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = trim(true)",
      "error": [
        "Argument of [trim] must be [keyword], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = trim(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = trim(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(booleanField)",
      "error": [
        "Argument of [trim] must be [keyword], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = trim(*)",
      "error": [
        "Using wildcards (*) in trim is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = trim(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(keywordField, extraArg)",
      "error": [
        "Error: [trim] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort trim(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval trim(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = case(true, \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row case(true, \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = case(to_cartesianpoint(\"POINT (30 10)\"), true)",
      "error": [
        "Argument of [case] must be [boolean], found value [to_cartesianpoint(\"POINT (30 10)\")] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = case(booleanField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval case(booleanField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort case(booleanField, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval case(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval case(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = avg(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(integerField)) + avg(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(integerField)) + avg(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(integerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(integerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(integerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(integerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(integerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = avg(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(booleanField)",
      "error": [
        "Argument of [avg] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = avg(*)",
      "error": [
        "Using wildcards (*) in avg is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = avg(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(counterIntegerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(counterIntegerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(counterIntegerField)) + avg(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(counterIntegerField)) + avg(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(counterIntegerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(counterIntegerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(counterIntegerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(counterIntegerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(counterIntegerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(counterIntegerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = avg(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(doubleField)) + avg(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(doubleField)) + avg(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(doubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(doubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = avg(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(unsignedLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(unsignedLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(unsignedLongField)) + avg(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(unsignedLongField)) + avg(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(unsignedLongField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(unsignedLongField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(unsignedLongField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(unsignedLongField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(unsignedLongField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(unsignedLongField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = avg(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(longField)) + avg(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(longField)) + avg(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(longField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(longField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(longField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(longField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(longField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = avg(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(counterLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(counterLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(counterLongField)) + avg(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(counterLongField)) + avg(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(counterLongField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(counterLongField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(counterLongField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(counterLongField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(counterLongField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(counterLongField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = avg(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(counterDoubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(counterDoubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(avg(counterDoubleField)) + avg(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(avg(counterDoubleField)) + avg(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(counterDoubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = avg(counterDoubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(counterDoubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(counterDoubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), avg(counterDoubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = avg(counterDoubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort avg(integerField)",
      "error": [
        "SORT does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(integerField)",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(integerField) > 0",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(counterIntegerField)",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(counterIntegerField) > 0",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(doubleField)",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(doubleField) > 0",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(unsignedLongField)",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(unsignedLongField) > 0",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(longField)",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(longField) > 0",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(counterLongField)",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(counterLongField) > 0",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(counterDoubleField)",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where avg(counterDoubleField) > 0",
      "error": [
        "WHERE does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(integerField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(integerField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(integerField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(integerField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(counterIntegerField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(counterIntegerField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(counterIntegerField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(counterIntegerField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(doubleField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(doubleField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(doubleField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(doubleField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(unsignedLongField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(unsignedLongField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(unsignedLongField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(unsignedLongField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(longField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(longField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(longField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(longField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(counterLongField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(counterLongField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(counterLongField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(counterLongField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(counterDoubleField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = avg(counterDoubleField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(counterDoubleField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(counterDoubleField) > 0",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats avg(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = sum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(integerField)) + sum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(integerField)) + sum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(integerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(integerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(integerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(integerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(integerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = sum(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(booleanField)",
      "error": [
        "Argument of [sum] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = sum(*)",
      "error": [
        "Using wildcards (*) in sum is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = sum(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(counterIntegerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(counterIntegerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(counterIntegerField)) + sum(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(counterIntegerField)) + sum(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(counterIntegerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(counterIntegerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(counterIntegerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(counterIntegerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(counterIntegerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(counterIntegerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = sum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(doubleField)) + sum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(doubleField)) + sum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(doubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(doubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(doubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = sum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(unsignedLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(unsignedLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(unsignedLongField)) + sum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(unsignedLongField)) + sum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(unsignedLongField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(unsignedLongField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(unsignedLongField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(unsignedLongField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(unsignedLongField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(unsignedLongField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = sum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(longField)) + sum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(longField)) + sum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(longField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(longField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(longField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(longField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(longField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = sum(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(counterLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(counterLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(counterLongField)) + sum(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(counterLongField)) + sum(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(counterLongField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(counterLongField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(counterLongField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(counterLongField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(counterLongField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(counterLongField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = sum(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(counterDoubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(counterDoubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(sum(counterDoubleField)) + sum(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(sum(counterDoubleField)) + sum(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(counterDoubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = sum(counterDoubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(counterDoubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(counterDoubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), sum(counterDoubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = sum(counterDoubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort sum(integerField)",
      "error": [
        "SORT does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(integerField)",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(integerField) > 0",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(counterIntegerField)",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(counterIntegerField) > 0",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(doubleField)",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(doubleField) > 0",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(unsignedLongField)",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(unsignedLongField) > 0",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(longField)",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(longField) > 0",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(counterLongField)",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(counterLongField) > 0",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(counterDoubleField)",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where sum(counterDoubleField) > 0",
      "error": [
        "WHERE does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(integerField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(integerField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(integerField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(integerField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(counterIntegerField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(counterIntegerField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(counterIntegerField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(counterIntegerField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(doubleField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(doubleField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(doubleField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(doubleField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(unsignedLongField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(unsignedLongField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(unsignedLongField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(unsignedLongField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(longField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(longField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(longField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(longField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(counterLongField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(counterLongField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(counterLongField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(counterLongField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(counterDoubleField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = sum(counterDoubleField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(counterDoubleField)",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval sum(counterDoubleField) > 0",
      "error": [
        "EVAL does not support function sum"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats sum(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats sum(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(integerField)) + median(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(integerField)) + median(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(integerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(integerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(integerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(integerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(integerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats median(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats median(booleanField)",
      "error": [
        "Argument of [median] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median(*)",
      "error": [
        "Using wildcards (*) in median is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(counterIntegerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(counterIntegerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(counterIntegerField)) + median(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(counterIntegerField)) + median(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(counterIntegerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(counterIntegerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(counterIntegerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(counterIntegerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(counterIntegerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(counterIntegerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(doubleField)) + median(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(doubleField)) + median(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(doubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(doubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(doubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(unsignedLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(unsignedLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(unsignedLongField)) + median(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(unsignedLongField)) + median(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(unsignedLongField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(unsignedLongField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(unsignedLongField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(unsignedLongField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(unsignedLongField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(unsignedLongField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(longField)) + median(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(longField)) + median(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(longField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(longField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(longField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(longField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(longField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(counterLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(counterLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(counterLongField)) + median(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(counterLongField)) + median(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(counterLongField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(counterLongField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(counterLongField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(counterLongField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(counterLongField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(counterLongField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(counterDoubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(counterDoubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median(counterDoubleField)) + median(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median(counterDoubleField)) + median(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median(counterDoubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median(counterDoubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(counterDoubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(counterDoubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median(counterDoubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median(counterDoubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort median(integerField)",
      "error": [
        "SORT does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(integerField)",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(integerField) > 0",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(counterIntegerField)",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(counterIntegerField) > 0",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(doubleField)",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(doubleField) > 0",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(unsignedLongField)",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(unsignedLongField) > 0",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(longField)",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(longField) > 0",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(counterLongField)",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(counterLongField) > 0",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(counterDoubleField)",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median(counterDoubleField) > 0",
      "error": [
        "WHERE does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(integerField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(integerField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(integerField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(integerField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(counterIntegerField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(counterIntegerField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(counterIntegerField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(counterIntegerField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(doubleField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(doubleField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(doubleField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(doubleField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(unsignedLongField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(unsignedLongField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(unsignedLongField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(unsignedLongField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(longField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(longField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(longField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(longField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(counterLongField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(counterLongField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(counterLongField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(counterLongField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(counterDoubleField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median(counterDoubleField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(counterDoubleField)",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median(counterDoubleField) > 0",
      "error": [
        "EVAL does not support function median"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats median(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats median(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median_absolute_deviation(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(integerField)) + median_absolute_deviation(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(integerField)) + median_absolute_deviation(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(integerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(integerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(integerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(integerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(integerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median_absolute_deviation(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(booleanField)",
      "error": [
        "Argument of [median_absolute_deviation] must be [integer], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median_absolute_deviation(*)",
      "error": [
        "Using wildcards (*) in median_absolute_deviation is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median_absolute_deviation(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(counterIntegerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(counterIntegerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(counterIntegerField)) + median_absolute_deviation(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(counterIntegerField)) + median_absolute_deviation(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(counterIntegerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(counterIntegerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(counterIntegerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(counterIntegerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(counterIntegerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(counterIntegerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(counterIntegerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median_absolute_deviation(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(doubleField)) + median_absolute_deviation(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(doubleField)) + median_absolute_deviation(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(doubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(doubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(doubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median_absolute_deviation(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(unsignedLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(unsignedLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(unsignedLongField)) + median_absolute_deviation(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(unsignedLongField)) + median_absolute_deviation(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(unsignedLongField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(unsignedLongField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(unsignedLongField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(unsignedLongField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(unsignedLongField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(unsignedLongField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median_absolute_deviation(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(longField)) + median_absolute_deviation(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(longField)) + median_absolute_deviation(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(longField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(longField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(longField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(longField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(longField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median_absolute_deviation(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(counterLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(counterLongField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(counterLongField)) + median_absolute_deviation(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(counterLongField)) + median_absolute_deviation(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(counterLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(counterLongField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(counterLongField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(counterLongField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(counterLongField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(counterLongField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(counterLongField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = median_absolute_deviation(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(counterDoubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(counterDoubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(median_absolute_deviation(counterDoubleField)) + median_absolute_deviation(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(median_absolute_deviation(counterDoubleField)) + median_absolute_deviation(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(counterDoubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = median_absolute_deviation(counterDoubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(counterDoubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(counterDoubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), median_absolute_deviation(counterDoubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = median_absolute_deviation(counterDoubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort median_absolute_deviation(integerField)",
      "error": [
        "SORT does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(integerField)",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(integerField) > 0",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(counterIntegerField)",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(counterIntegerField) > 0",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(doubleField)",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(doubleField) > 0",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(unsignedLongField)",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(unsignedLongField) > 0",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(longField)",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(longField) > 0",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(counterLongField)",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(counterLongField) > 0",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(counterDoubleField)",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where median_absolute_deviation(counterDoubleField) > 0",
      "error": [
        "WHERE does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(integerField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(integerField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(integerField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(integerField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(counterIntegerField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(counterIntegerField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(counterIntegerField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(counterIntegerField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(doubleField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(doubleField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(doubleField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(doubleField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(unsignedLongField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(unsignedLongField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(unsignedLongField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(unsignedLongField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(longField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(longField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(longField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(longField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(counterLongField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(counterLongField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(counterLongField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(counterLongField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(counterDoubleField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = median_absolute_deviation(counterDoubleField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(counterDoubleField)",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval median_absolute_deviation(counterDoubleField) > 0",
      "error": [
        "EVAL does not support function median_absolute_deviation"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats median_absolute_deviation(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats median_absolute_deviation(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = max(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(max(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(max(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(max(doubleField)) + max(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(max(doubleField)) + max(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = max(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), max(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = max(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = max(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), max(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = max(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(doubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = max(doubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), max(doubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = max(doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), max(doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = max(doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = max(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats max(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats max(cartesianPointField)",
      "error": [
        "Argument of [max] must be [double], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = max(*)",
      "error": [
        "Using wildcards (*) in max is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = max(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(max(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(max(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(max(longField)) + max(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(max(longField)) + max(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = max(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), max(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = max(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(longField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = max(longField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), max(longField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = max(longField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), max(longField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = max(longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = max(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(max(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(max(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(max(integerField)) + max(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(max(integerField)) + max(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = max(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), max(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = max(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(integerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = max(integerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), max(integerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = max(integerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), max(integerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = max(integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = max(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = max(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = max(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort max(doubleField)",
      "error": [
        "SORT does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(doubleField)",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(doubleField) > 0",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(longField)",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(longField) > 0",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(integerField)",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(integerField) > 0",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(dateField)",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(dateField) > 0",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(booleanField)",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(booleanField) > 0",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(ipField)",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where max(ipField) > 0",
      "error": [
        "WHERE does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(doubleField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(doubleField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(doubleField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(doubleField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(longField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(longField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(longField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(longField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(integerField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(integerField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(integerField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(integerField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(dateField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(dateField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(dateField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(dateField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(booleanField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(booleanField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(booleanField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(booleanField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(ipField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = max(ipField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(ipField)",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval max(ipField) > 0",
      "error": [
        "EVAL does not support function max"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats max(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats max(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats max(concat(\"20\", \"22\"))",
      "error": [
        "Argument of [max] must be [double], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = min(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(min(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(min(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(min(doubleField)) + min(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(min(doubleField)) + min(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = min(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), min(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = min(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = min(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), min(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = min(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(doubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = min(doubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), min(doubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = min(doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), min(doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = min(doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = min(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats min(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats min(cartesianPointField)",
      "error": [
        "Argument of [min] must be [double], found value [cartesianPointField] type [cartesian_point]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = min(*)",
      "error": [
        "Using wildcards (*) in min is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = min(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(min(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(min(longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(min(longField)) + min(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(min(longField)) + min(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = min(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), min(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = min(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(longField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = min(longField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), min(longField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = min(longField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), min(longField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = min(longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = min(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(min(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(min(integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(min(integerField)) + min(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(min(integerField)) + min(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = min(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), min(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = min(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(integerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = min(integerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), min(integerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = min(integerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), min(integerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = min(integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = min(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = min(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = min(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort min(doubleField)",
      "error": [
        "SORT does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(doubleField)",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(doubleField) > 0",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(longField)",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(longField) > 0",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(integerField)",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(integerField) > 0",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(dateField)",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(dateField) > 0",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(booleanField)",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(booleanField) > 0",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(ipField)",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where min(ipField) > 0",
      "error": [
        "WHERE does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(doubleField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(doubleField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(doubleField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(doubleField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(longField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(longField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(longField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(longField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(integerField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(integerField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(integerField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(integerField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(dateField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(dateField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(dateField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(dateField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(booleanField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(booleanField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(booleanField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(booleanField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(ipField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = min(ipField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(ipField)",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval min(ipField) > 0",
      "error": [
        "EVAL does not support function min"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats min(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats min(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats min(concat(\"20\", \"22\"))",
      "error": [
        "Argument of [min] must be [double], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = count(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats count(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(count(textField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(count(textField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(count(textField)) + count(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(count(textField)) + count(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort count(textField)",
      "error": [
        "SORT does not support function count"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where count(textField)",
      "error": [
        "WHERE does not support function count"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where count(textField) > 0",
      "error": [
        "WHERE does not support function count"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = count(textField)",
      "error": [
        "EVAL does not support function count"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = count(textField) > 0",
      "error": [
        "EVAL does not support function count"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval count(textField)",
      "error": [
        "EVAL does not support function count"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval count(textField) > 0",
      "error": [
        "EVAL does not support function count"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats count(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats count(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats count_distinct(null, null, null, null, null, null, null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats count_distinct(nullVar, nullVar, nullVar, nullVar, nullVar, nullVar, nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField)) + count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField)) + count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField)",
      "error": [
        "SORT does not support function count_distinct"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField)",
      "error": [
        "WHERE does not support function count_distinct"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField) > 0",
      "error": [
        "WHERE does not support function count_distinct"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField)",
      "error": [
        "EVAL does not support function count_distinct"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField) > 0",
      "error": [
        "EVAL does not support function count_distinct"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField)",
      "error": [
        "EVAL does not support function count_distinct"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval count_distinct(textField, integerField, counterIntegerField, doubleField, unsignedLongField, longField, counterLongField, counterDoubleField) > 0",
      "error": [
        "EVAL does not support function count_distinct"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = st_centroid_agg(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats st_centroid_agg(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = st_centroid_agg(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats st_centroid_agg(avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats st_centroid_agg(booleanField)",
      "error": [
        "Argument of [st_centroid_agg] must be [cartesian_point], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = st_centroid_agg(*)",
      "error": [
        "Using wildcards (*) in st_centroid_agg is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = st_centroid_agg(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats st_centroid_agg(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort st_centroid_agg(cartesianPointField)",
      "error": [
        "SORT does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where st_centroid_agg(cartesianPointField)",
      "error": [
        "WHERE does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where st_centroid_agg(cartesianPointField) > 0",
      "error": [
        "WHERE does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where st_centroid_agg(geoPointField)",
      "error": [
        "WHERE does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where st_centroid_agg(geoPointField) > 0",
      "error": [
        "WHERE does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_centroid_agg(cartesianPointField)",
      "error": [
        "EVAL does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_centroid_agg(cartesianPointField) > 0",
      "error": [
        "EVAL does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval st_centroid_agg(cartesianPointField)",
      "error": [
        "EVAL does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval st_centroid_agg(cartesianPointField) > 0",
      "error": [
        "EVAL does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_centroid_agg(geoPointField)",
      "error": [
        "EVAL does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = st_centroid_agg(geoPointField) > 0",
      "error": [
        "EVAL does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval st_centroid_agg(geoPointField)",
      "error": [
        "EVAL does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval st_centroid_agg(geoPointField) > 0",
      "error": [
        "EVAL does not support function st_centroid_agg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats st_centroid_agg(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats st_centroid_agg(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = values(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats values(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort values(textField)",
      "error": [
        "SORT does not support function values"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where values(textField)",
      "error": [
        "WHERE does not support function values"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where values(textField) > 0",
      "error": [
        "WHERE does not support function values"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = values(textField)",
      "error": [
        "EVAL does not support function values"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = values(textField) > 0",
      "error": [
        "EVAL does not support function values"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval values(textField)",
      "error": [
        "EVAL does not support function values"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval values(textField) > 0",
      "error": [
        "EVAL does not support function values"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats values(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats values(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = top(textField, integerField, textField)",
      "error": [
        "Argument of [=] must be a constant, received [top(textField,integerField,textField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats top(textField, integerField, textField)",
      "error": [
        "Argument of [top] must be a constant, received [integerField]",
        "Argument of [top] must be a constant, received [textField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort top(textField, integerField, textField)",
      "error": [
        "SORT does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where top(textField, integerField, textField)",
      "error": [
        "WHERE does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where top(textField, integerField, textField) > 0",
      "error": [
        "WHERE does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = top(textField, integerField, textField)",
      "error": [
        "EVAL does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = top(textField, integerField, textField) > 0",
      "error": [
        "EVAL does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval top(textField, integerField, textField)",
      "error": [
        "EVAL does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval top(textField, integerField, textField) > 0",
      "error": [
        "EVAL does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats top(null, null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats top(nullVar, nullVar, nullVar)",
      "error": [
        "Argument of [top] must be a constant, received [nullVar]",
        "Argument of [top] must be a constant, received [nullVar]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = top(textField, integerField, \"asc\")",
      "error": [
        "Argument of [=] must be a constant, received [top(textField,integerField,\"asc\")]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats top(textField, integerField, \"asc\")",
      "error": [
        "Argument of [top] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort top(textField, integerField, \"asc\")",
      "error": [
        "SORT does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where top(textField, integerField, \"asc\")",
      "error": [
        "WHERE does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where top(textField, integerField, \"asc\") > 0",
      "error": [
        "WHERE does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = top(textField, integerField, \"asc\")",
      "error": [
        "EVAL does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = top(textField, integerField, \"asc\") > 0",
      "error": [
        "EVAL does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval top(textField, integerField, \"asc\")",
      "error": [
        "EVAL does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval top(textField, integerField, \"asc\") > 0",
      "error": [
        "EVAL does not support function top"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = weighted_avg(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(doubleField, doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(doubleField, doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(doubleField, doubleField)) + weighted_avg(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(doubleField, doubleField)) + weighted_avg(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(doubleField / 2, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(doubleField / 2, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField / 2, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField / 2, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(doubleField, doubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(doubleField, doubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField, doubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField, doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField, doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField, doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = weighted_avg(avg(integerField), avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]",
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(avg(integerField), avg(integerField))",
      "error": [
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]",
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(booleanField, booleanField)",
      "error": [
        "Argument of [weighted_avg] must be [double], found value [booleanField] type [boolean]",
        "Argument of [weighted_avg] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort weighted_avg(doubleField, doubleField)",
      "error": [
        "SORT does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(doubleField, doubleField)",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(doubleField, doubleField) > 0",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(doubleField, doubleField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(doubleField, doubleField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(doubleField, doubleField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(doubleField, doubleField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats weighted_avg(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = weighted_avg(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(doubleField, longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(doubleField, longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(doubleField, longField)) + weighted_avg(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(doubleField, longField)) + weighted_avg(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(doubleField / 2, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(doubleField / 2, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField / 2, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField / 2, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(doubleField, longField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(doubleField, longField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField, longField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField, longField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField, longField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField, longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = weighted_avg(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(doubleField, integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(doubleField, integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(doubleField, integerField)) + weighted_avg(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(doubleField, integerField)) + weighted_avg(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(doubleField / 2, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(doubleField / 2, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField / 2, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField / 2, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(doubleField, integerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(doubleField, integerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField, integerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField, integerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(doubleField, integerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(doubleField, integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = weighted_avg(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(longField, doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(longField, doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(longField, doubleField)) + weighted_avg(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(longField, doubleField)) + weighted_avg(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(longField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(longField, doubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(longField, doubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(longField, doubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(longField, doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(longField, doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(longField, doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = weighted_avg(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(longField, longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(longField, longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(longField, longField)) + weighted_avg(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(longField, longField)) + weighted_avg(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(longField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(longField, longField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(longField, longField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(longField, longField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(longField, longField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(longField, longField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(longField, longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = weighted_avg(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(longField, integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(longField, integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(longField, integerField)) + weighted_avg(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(longField, integerField)) + weighted_avg(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(longField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(longField, integerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(longField, integerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(longField, integerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(longField, integerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(longField, integerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(longField, integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = weighted_avg(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(integerField, doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(integerField, doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(integerField, doubleField)) + weighted_avg(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(integerField, doubleField)) + weighted_avg(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(integerField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(integerField, doubleField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(integerField, doubleField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(integerField, doubleField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(integerField, doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(integerField, doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(integerField, doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = weighted_avg(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(integerField, longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(integerField, longField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(integerField, longField)) + weighted_avg(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(integerField, longField)) + weighted_avg(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(integerField, longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(integerField, longField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(integerField, longField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(integerField, longField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(integerField, longField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(integerField, longField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(integerField, longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = weighted_avg(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(integerField, integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(integerField, integerField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(weighted_avg(integerField, integerField)) + weighted_avg(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats round(weighted_avg(integerField, integerField)) + weighted_avg(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(integerField, integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats weighted_avg(integerField, integerField) by round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = weighted_avg(integerField, integerField) by var1 = round(doubleField / 2)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(integerField, integerField) by round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(integerField, integerField) by var1 = round(doubleField / 2), ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), weighted_avg(integerField, integerField) by round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = weighted_avg(integerField, integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(doubleField, longField)",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(doubleField, longField) > 0",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(doubleField, integerField)",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(doubleField, integerField) > 0",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(longField, doubleField)",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(longField, doubleField) > 0",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(longField, longField)",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(longField, longField) > 0",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(longField, integerField)",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(longField, integerField) > 0",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(integerField, doubleField)",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(integerField, doubleField) > 0",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(integerField, longField)",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(integerField, longField) > 0",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(integerField, integerField)",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where weighted_avg(integerField, integerField) > 0",
      "error": [
        "WHERE does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(doubleField, longField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(doubleField, longField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(doubleField, longField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(doubleField, longField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(doubleField, integerField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(doubleField, integerField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(doubleField, integerField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(doubleField, integerField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(longField, doubleField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(longField, doubleField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(longField, doubleField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(longField, doubleField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(longField, longField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(longField, longField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(longField, longField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(longField, longField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(longField, integerField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(longField, integerField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(longField, integerField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(longField, integerField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(integerField, doubleField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(integerField, doubleField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(integerField, doubleField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(integerField, doubleField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(integerField, longField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(integerField, longField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(integerField, longField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(integerField, longField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(integerField, integerField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = weighted_avg(integerField, integerField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(integerField, integerField)",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval weighted_avg(integerField, integerField) > 0",
      "error": [
        "EVAL does not support function weighted_avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(dateField, 1 year)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(dateField, 1 year)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, integerField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, integerField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(dateField, integerField, textField, textField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [textField]",
        "Argument of [bucket] must be a constant, received [textField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(dateField, integerField, textField, textField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [textField]",
        "Argument of [bin] must be a constant, received [textField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(dateField, integerField, dateField, dateField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [dateField]",
        "Argument of [bucket] must be a constant, received [dateField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(dateField, integerField, dateField, dateField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [dateField]",
        "Argument of [bin] must be a constant, received [dateField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(dateField, integerField, textField, dateField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [textField]",
        "Argument of [bucket] must be a constant, received [dateField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(dateField, integerField, textField, dateField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [textField]",
        "Argument of [bin] must be a constant, received [dateField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(dateField, integerField, dateField, textField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [dateField]",
        "Argument of [bucket] must be a constant, received [textField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(dateField, integerField, dateField, textField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [dateField]",
        "Argument of [bin] must be a constant, received [textField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, integerField, integerField, integerField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, integerField, integerField, integerField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort bucket(dateField, 1 year)",
      "error": [
        "SORT does not support function bucket"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(null, null, null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats bucket(nullVar, nullVar, nullVar, nullVar)",
      "error": [
        "Argument of [bucket] must be a constant, received [nullVar]",
        "Argument of [bucket] must be a constant, received [nullVar]",
        "Argument of [bucket] must be a constant, received [nullVar]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(\"2022\", 1 year)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(concat(\"20\", \"22\"), 1 year)",
      "error": [
        "Argument of [bucket] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(\"2022\", integerField, textField, textField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [textField]",
        "Argument of [bucket] must be a constant, received [textField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(concat(\"20\", \"22\"), integerField, textField, textField)",
      "error": [
        "Argument of [bucket] must be [date], found value [concat(\"20\",\"22\")] type [keyword]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [textField]",
        "Argument of [bucket] must be a constant, received [textField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(\"2022\", integerField, \"2022\", \"2022\")",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(concat(\"20\", \"22\"), integerField, concat(\"20\", \"22\"), concat(\"20\", \"22\"))",
      "error": [
        "Argument of [bucket] must be [date], found value [concat(\"20\",\"22\")] type [keyword]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be [date], found value [concat(\"20\",\"22\")] type [keyword]",
        "Argument of [bucket] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(\"2022\", integerField, textField, \"2022\")",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [textField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(concat(\"20\", \"22\"), integerField, textField, concat(\"20\", \"22\"))",
      "error": [
        "Argument of [bucket] must be [date], found value [concat(\"20\",\"22\")] type [keyword]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [textField]",
        "Argument of [bucket] must be [date], found value [concat(\"20\",\"22\")] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(\"2022\", integerField, \"2022\", textField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [textField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats bucket(concat(\"20\", \"22\"), integerField, concat(\"20\", \"22\"), textField)",
      "error": [
        "Argument of [bucket] must be [date], found value [concat(\"20\",\"22\")] type [keyword]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be [date], found value [concat(\"20\",\"22\")] type [keyword]",
        "Argument of [bucket] must be a constant, received [textField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(dateField, integerField, now(), now())",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(dateField, integerField, now(), now())",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(doubleField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(doubleField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(doubleField, integerField, doubleField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]",
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(doubleField, integerField, doubleField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]",
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(doubleField, integerField, doubleField, integerField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]",
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(doubleField, integerField, doubleField, integerField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]",
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(doubleField, integerField, doubleField, longField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]",
        "Argument of [bucket] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(doubleField, integerField, doubleField, longField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]",
        "Argument of [bin] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(doubleField, integerField, integerField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(doubleField, integerField, integerField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(doubleField, integerField, integerField, integerField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(doubleField, integerField, integerField, integerField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(doubleField, integerField, integerField, longField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(doubleField, integerField, integerField, longField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(doubleField, integerField, longField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]",
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(doubleField, integerField, longField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]",
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(doubleField, integerField, longField, integerField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]",
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(doubleField, integerField, longField, integerField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]",
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(doubleField, integerField, longField, longField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]",
        "Argument of [bucket] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(doubleField, integerField, longField, longField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]",
        "Argument of [bin] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, integerField, doubleField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]",
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, integerField, doubleField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]",
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, integerField, doubleField, integerField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]",
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, integerField, doubleField, integerField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]",
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, integerField, doubleField, longField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]",
        "Argument of [bucket] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, integerField, doubleField, longField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]",
        "Argument of [bin] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, integerField, integerField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, integerField, integerField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, integerField, integerField, longField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, integerField, integerField, longField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, integerField, longField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]",
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, integerField, longField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]",
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, integerField, longField, integerField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]",
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, integerField, longField, integerField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]",
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(integerField, integerField, longField, longField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]",
        "Argument of [bucket] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(integerField, integerField, longField, longField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]",
        "Argument of [bin] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(longField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(longField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(longField, integerField, doubleField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]",
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(longField, integerField, doubleField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]",
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(longField, integerField, doubleField, integerField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]",
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(longField, integerField, doubleField, integerField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]",
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(longField, integerField, doubleField, longField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]",
        "Argument of [bucket] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(longField, integerField, doubleField, longField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]",
        "Argument of [bin] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(longField, integerField, integerField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(longField, integerField, integerField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(longField, integerField, integerField, integerField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(longField, integerField, integerField, integerField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(longField, integerField, integerField, longField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(longField, integerField, integerField, longField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(longField, integerField, longField, doubleField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]",
        "Argument of [bucket] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(longField, integerField, longField, doubleField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]",
        "Argument of [bin] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(longField, integerField, longField, integerField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]",
        "Argument of [bucket] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(longField, integerField, longField, integerField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]",
        "Argument of [bin] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bucket(longField, integerField, longField, longField)",
      "error": [
        "Argument of [bucket] must be a constant, received [integerField]",
        "Argument of [bucket] must be a constant, received [longField]",
        "Argument of [bucket] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats by bin(longField, integerField, longField, longField)",
      "error": [
        "Argument of [bin] must be a constant, received [integerField]",
        "Argument of [bin] must be a constant, received [longField]",
        "Argument of [bin] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = percentile(doubleField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(doubleField, doubleField)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(doubleField, doubleField))",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(doubleField,doubleField))]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(doubleField, doubleField))",
      "error": [
        "Argument of [round] must be a constant, received [percentile(doubleField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(doubleField, doubleField)) + percentile(doubleField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(doubleField,doubleField))+percentile(doubleField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(doubleField, doubleField)) + percentile(doubleField, doubleField)",
      "error": [
        "Argument of [+] must be a constant, received [round(percentile(doubleField,doubleField))]",
        "Argument of [+] must be a constant, received [percentile(doubleField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(doubleField / 2, doubleField)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(doubleField / 2, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField/2,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField / 2, doubleField)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField / 2, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField/2,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(doubleField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField, doubleField)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(doubleField, doubleField) by round(doubleField / 2)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(doubleField, doubleField) by var1 = round(doubleField / 2)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField, doubleField) by round(doubleField / 2), ipField",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField, doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField, doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField, doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = percentile(avg(integerField), avg(integerField))",
      "error": [
        "Argument of [=] must be a constant, received [percentile(avg(integerField),avg(integerField))]",
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(avg(integerField), avg(integerField))",
      "error": [
        "Argument of [percentile] must be a constant, received [avg(integerField)]",
        "Aggregate function's parameters must be an attribute, literal or a non-aggregation function; found [avg(integerField)] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(booleanField, )",
      "error": [
        "SyntaxError: no viable alternative at input 'percentile(booleanField, )'",
        "SyntaxError: mismatched input ')' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "At least one aggregation or grouping expression required in [STATS]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = percentile(doubleField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(doubleField, longField)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(doubleField, longField))",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(doubleField,longField))]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(doubleField, longField))",
      "error": [
        "Argument of [round] must be a constant, received [percentile(doubleField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(doubleField, longField)) + percentile(doubleField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(doubleField,longField))+percentile(doubleField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(doubleField, longField)) + percentile(doubleField, longField)",
      "error": [
        "Argument of [+] must be a constant, received [round(percentile(doubleField,longField))]",
        "Argument of [+] must be a constant, received [percentile(doubleField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(doubleField / 2, longField)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(doubleField / 2, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField/2,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField / 2, longField)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField / 2, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField/2,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(doubleField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField, longField)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(doubleField, longField) by round(doubleField / 2)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(doubleField, longField) by var1 = round(doubleField / 2)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField, longField) by round(doubleField / 2), ipField",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField, longField) by var1 = round(doubleField / 2), ipField",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField, longField) by round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField, longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = percentile(doubleField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(doubleField, integerField)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(doubleField, integerField))",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(doubleField,integerField))]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(doubleField, integerField))",
      "error": [
        "Argument of [round] must be a constant, received [percentile(doubleField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(doubleField, integerField)) + percentile(doubleField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(doubleField,integerField))+percentile(doubleField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(doubleField, integerField)) + percentile(doubleField, integerField)",
      "error": [
        "Argument of [+] must be a constant, received [round(percentile(doubleField,integerField))]",
        "Argument of [+] must be a constant, received [percentile(doubleField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(doubleField / 2, integerField)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(doubleField / 2, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField/2,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField / 2, integerField)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField / 2, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField/2,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(doubleField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField, integerField)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(doubleField, integerField) by round(doubleField / 2)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(doubleField, integerField) by var1 = round(doubleField / 2)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField, integerField) by round(doubleField / 2), ipField",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField, integerField) by var1 = round(doubleField / 2), ipField",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(doubleField, integerField) by round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(doubleField, integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [=] must be a constant, received [percentile(doubleField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = percentile(longField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(longField, doubleField)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(longField, doubleField))",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(longField,doubleField))]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(longField, doubleField))",
      "error": [
        "Argument of [round] must be a constant, received [percentile(longField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(longField, doubleField)) + percentile(longField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(longField,doubleField))+percentile(longField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(longField, doubleField)) + percentile(longField, doubleField)",
      "error": [
        "Argument of [+] must be a constant, received [round(percentile(longField,doubleField))]",
        "Argument of [+] must be a constant, received [percentile(longField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(longField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(longField, doubleField)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(longField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(longField, doubleField) by round(doubleField / 2)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(longField, doubleField) by var1 = round(doubleField / 2)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(longField, doubleField) by round(doubleField / 2), ipField",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(longField, doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(longField, doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(longField, doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = percentile(longField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(longField, longField)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(longField, longField))",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(longField,longField))]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(longField, longField))",
      "error": [
        "Argument of [round] must be a constant, received [percentile(longField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(longField, longField)) + percentile(longField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(longField,longField))+percentile(longField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(longField, longField)) + percentile(longField, longField)",
      "error": [
        "Argument of [+] must be a constant, received [round(percentile(longField,longField))]",
        "Argument of [+] must be a constant, received [percentile(longField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(longField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(longField, longField)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(longField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(longField, longField) by round(doubleField / 2)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(longField, longField) by var1 = round(doubleField / 2)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(longField, longField) by round(doubleField / 2), ipField",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(longField, longField) by var1 = round(doubleField / 2), ipField",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(longField, longField) by round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(longField, longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = percentile(longField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(longField, integerField)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(longField, integerField))",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(longField,integerField))]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(longField, integerField))",
      "error": [
        "Argument of [round] must be a constant, received [percentile(longField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(longField, integerField)) + percentile(longField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(longField,integerField))+percentile(longField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(longField, integerField)) + percentile(longField, integerField)",
      "error": [
        "Argument of [+] must be a constant, received [round(percentile(longField,integerField))]",
        "Argument of [+] must be a constant, received [percentile(longField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(longField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(longField, integerField)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(longField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(longField, integerField) by round(doubleField / 2)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(longField, integerField) by var1 = round(doubleField / 2)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(longField, integerField) by round(doubleField / 2), ipField",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(longField, integerField) by var1 = round(doubleField / 2), ipField",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(longField, integerField) by round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(longField, integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [=] must be a constant, received [percentile(longField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = percentile(integerField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(integerField, doubleField)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(integerField, doubleField))",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(integerField,doubleField))]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(integerField, doubleField))",
      "error": [
        "Argument of [round] must be a constant, received [percentile(integerField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(integerField, doubleField)) + percentile(integerField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(integerField,doubleField))+percentile(integerField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(integerField, doubleField)) + percentile(integerField, doubleField)",
      "error": [
        "Argument of [+] must be a constant, received [round(percentile(integerField,doubleField))]",
        "Argument of [+] must be a constant, received [percentile(integerField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(integerField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(integerField, doubleField)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(integerField, doubleField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(integerField, doubleField) by round(doubleField / 2)",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(integerField, doubleField) by var1 = round(doubleField / 2)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(integerField, doubleField) by round(doubleField / 2), ipField",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(integerField, doubleField) by var1 = round(doubleField / 2), ipField",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(integerField, doubleField) by round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [percentile] must be a constant, received [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(integerField, doubleField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,doubleField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = percentile(integerField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(integerField, longField)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(integerField, longField))",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(integerField,longField))]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(integerField, longField))",
      "error": [
        "Argument of [round] must be a constant, received [percentile(integerField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(integerField, longField)) + percentile(integerField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(integerField,longField))+percentile(integerField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(integerField, longField)) + percentile(integerField, longField)",
      "error": [
        "Argument of [+] must be a constant, received [round(percentile(integerField,longField))]",
        "Argument of [+] must be a constant, received [percentile(integerField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(integerField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(integerField, longField)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(integerField, longField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(integerField, longField) by round(doubleField / 2)",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(integerField, longField) by var1 = round(doubleField / 2)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(integerField, longField) by round(doubleField / 2), ipField",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(integerField, longField) by var1 = round(doubleField / 2), ipField",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(integerField, longField) by round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [percentile] must be a constant, received [longField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(integerField, longField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,longField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = percentile(integerField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(integerField, integerField)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(integerField, integerField))",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(integerField,integerField))]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(integerField, integerField))",
      "error": [
        "Argument of [round] must be a constant, received [percentile(integerField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var = round(percentile(integerField, integerField)) + percentile(integerField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [round(percentile(integerField,integerField))+percentile(integerField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats round(percentile(integerField, integerField)) + percentile(integerField, integerField)",
      "error": [
        "Argument of [+] must be a constant, received [round(percentile(integerField,integerField))]",
        "Argument of [+] must be a constant, received [percentile(integerField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(integerField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(integerField, integerField)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(integerField, integerField)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(integerField, integerField) by round(doubleField / 2)",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats var0 = percentile(integerField, integerField) by var1 = round(doubleField / 2)",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(integerField, integerField) by round(doubleField / 2), ipField",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(integerField, integerField) by var1 = round(doubleField / 2), ipField",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), percentile(integerField, integerField) by round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [percentile] must be a constant, received [integerField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField), var0 = percentile(integerField, integerField) by var1 = round(doubleField / 2), doubleField / 2",
      "error": [
        "Argument of [=] must be a constant, received [percentile(integerField,integerField)]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort percentile(doubleField, doubleField)",
      "error": [
        "SORT does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(doubleField, doubleField)",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(doubleField, doubleField) > 0",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(doubleField, longField)",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(doubleField, longField) > 0",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(doubleField, integerField)",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(doubleField, integerField) > 0",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(longField, doubleField)",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(longField, doubleField) > 0",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(longField, longField)",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(longField, longField) > 0",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(longField, integerField)",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(longField, integerField) > 0",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(integerField, doubleField)",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(integerField, doubleField) > 0",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(integerField, longField)",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(integerField, longField) > 0",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(integerField, integerField)",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where percentile(integerField, integerField) > 0",
      "error": [
        "WHERE does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(doubleField, doubleField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(doubleField, doubleField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(doubleField, doubleField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(doubleField, doubleField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(doubleField, longField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(doubleField, longField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(doubleField, longField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(doubleField, longField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(doubleField, integerField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(doubleField, integerField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(doubleField, integerField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(doubleField, integerField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(longField, doubleField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(longField, doubleField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(longField, doubleField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(longField, doubleField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(longField, longField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(longField, longField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(longField, longField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(longField, longField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(longField, integerField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(longField, integerField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(longField, integerField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(longField, integerField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(integerField, doubleField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(integerField, doubleField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(integerField, doubleField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(integerField, doubleField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(integerField, longField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(integerField, longField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(integerField, longField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(integerField, longField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(integerField, integerField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = percentile(integerField, integerField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(integerField, integerField)",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval percentile(integerField, integerField) > 0",
      "error": [
        "EVAL does not support function percentile"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats percentile(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | stats percentile(nullVar, nullVar)",
      "error": [
        "Argument of [percentile] must be a constant, received [nullVar]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_string(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(true)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_boolean(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row to_string(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_str(cartesianPointField)",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_string(to_cartesianpoint(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_string(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(to_cartesianshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_cartesianshape(cartesianPointField))",
      "error": [
        "Unknown column [cartesianPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_string(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(to_datetime(\"2021-01-01T00:00:00Z\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_datetime(to_datetime(\"2021-01-01T00:00:00Z\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row to_string(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_str(geoPointField)",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_string(to_geopoint(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_string(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(to_geoshape(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_geoshape(geoPointField))",
      "error": [
        "Unknown column [geoPointField]"
      ],
      "warning": []
    },
    {
      "query": "row var = to_string(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_integer(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(to_ip(\"127.0.0.1\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_ip(to_ip(\"127.0.0.1\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(\"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_string(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(to_version(\"1.0.0\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_version(\"a\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_boolean(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(counterDoubleField)",
      "error": [
        "Argument of [to_string] must be [boolean], found value [counterDoubleField] type [counter_double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(*)",
      "error": [
        "Using wildcards (*) in to_string is not allowed"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(cartesianPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_cartesianpoint(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(cartesianShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_cartesianshape(cartesianPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(dateField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_datetime(dateField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(geoPointField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_geopoint(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(geoShapeField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_geoshape(geoPointField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(integerField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_integer(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(ipField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_ip(ipField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(keywordField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_string(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(longField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(unsignedLongField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_str(versionField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = to_string(to_version(keywordField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(booleanField, extraArg)",
      "error": [
        "Error: [to_string] function expects exactly one argument, got 2."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort to_string(booleanField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval to_string(nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(\"2022\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval to_string(concat(\"20\", \"22\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(to_cartesianpoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_cartesianpoint(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_cartesianshape(to_cartesianpoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row to_string(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_str(to_geopoint(\"POINT (30 10)\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_geopoint(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_string(to_geoshape(to_geopoint(\"POINT (30 10)\")))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_pseries_weighted_sum(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row mv_pseries_weighted_sum(5.5, 5.5)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_pseries_weighted_sum(to_double(true), to_double(true))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_pseries_weighted_sum(true, true)",
      "error": [
        "Argument of [mv_pseries_weighted_sum] must be [double], found value [true] type [boolean]",
        "Argument of [mv_pseries_weighted_sum] must be [double], found value [true] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where mv_pseries_weighted_sum(doubleField, doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where mv_pseries_weighted_sum(booleanField, booleanField) > 0",
      "error": [
        "Argument of [mv_pseries_weighted_sum] must be [double], found value [booleanField] type [boolean]",
        "Argument of [mv_pseries_weighted_sum] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_pseries_weighted_sum(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_pseries_weighted_sum(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = mv_pseries_weighted_sum(to_double(booleanField), to_double(booleanField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_pseries_weighted_sum(booleanField, booleanField)",
      "error": [
        "Argument of [mv_pseries_weighted_sum] must be [double], found value [booleanField] type [boolean]",
        "Argument of [mv_pseries_weighted_sum] must be [double], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_pseries_weighted_sum(doubleField, doubleField, extraArg)",
      "error": [
        "Error: [mv_pseries_weighted_sum] function expects exactly 2 arguments, got 3."
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort mv_pseries_weighted_sum(doubleField, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_pseries_weighted_sum(null, null)",
      "error": [],
      "warning": []
    },
    {
      "query": "row nullVar = null | eval mv_pseries_weighted_sum(nullVar, nullVar)",
      "error": [],
      "warning": []
    },
    {
      "query": "f",
      "error": [
        "SyntaxError: mismatched input 'f' expecting {'explain', 'from', 'meta', 'metrics', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "from ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {UNQUOTED_SOURCE, QUOTED_STRING}"
      ],
      "warning": []
    },
    {
      "query": "from index",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM index",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM \"index\"",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM \"\"\"index\"\"\"",
      "error": [],
      "warning": []
    },
    {
      "query": "FrOm index",
      "error": [],
      "warning": []
    },
    {
      "query": "from index, other_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from index, other_index,.secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from ind*, other*",
      "error": [],
      "warning": []
    },
    {
      "query": "from index*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM *a_i*dex*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM in*ex*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM *n*ex",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM *n*ex*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM i*d*x*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM i*d*x",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM i***x*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM i****",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM i**",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM index**",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM *ex",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM *ex*",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM in*ex",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM ind*ex",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM *,-.*",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM remote-*:indexes*",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM remote-*:indexes",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM remote-ccs:indexes",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM a_index, remote-ccs:indexes",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from my-index",
      "error": [],
      "warning": []
    },
    {
      "query": "from index,",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {UNQUOTED_SOURCE, QUOTED_STRING}"
      ],
      "warning": []
    },
    {
      "query": "FROM index\n, \tother_index\t,\n \t ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {UNQUOTED_SOURCE, QUOTED_STRING}"
      ],
      "warning": []
    },
    {
      "query": "from assignment = 1",
      "error": [
        "SyntaxError: mismatched input '=' expecting <EOF>",
        "Unknown index [assignment]"
      ],
      "warning": []
    },
    {
      "query": "FROM `index`",
      "error": [
        "Unknown index [`index`]"
      ],
      "warning": []
    },
    {
      "query": "from assignment = 1",
      "error": [
        "SyntaxError: mismatched input '=' expecting <EOF>",
        "Unknown index [assignment]"
      ],
      "warning": []
    },
    {
      "query": "from index metadata _id",
      "error": [],
      "warning": []
    },
    {
      "query": "from index metadata _id, \t\n _index\n ",
      "error": [],
      "warning": []
    },
    {
      "query": "from index (metadata _id)",
      "error": [
        "SyntaxError: mismatched input '(metadata' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from index [METADATA _id]",
      "error": [],
      "warning": []
    },
    {
      "query": "from index [METADATA _id]",
      "error": [],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from index [metadata _id]",
      "error": [],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from index [METADATA _id, _source]",
      "error": [],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from remote-ccs:indexes [METADATA _id]",
      "error": [],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from *:indexes [METADATA _id]",
      "error": [],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from index [METADATA _id, _source2]",
      "error": [
        "Metadata field [_source2] is not available. Available metadata fields are: [_version, _id, _index, _source, _ignored]"
      ],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from index [metadata _id, _source] [METADATA _id2]",
      "error": [
        "SyntaxError: mismatched input '[' expecting <EOF>"
      ],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from index METADATA _id",
      "error": [],
      "warning": []
    },
    {
      "query": "from index METADATA _id",
      "error": [],
      "warning": []
    },
    {
      "query": "from index metadata _id",
      "error": [],
      "warning": []
    },
    {
      "query": "from index METADATA _id, _source",
      "error": [],
      "warning": []
    },
    {
      "query": "from remote-ccs:indexes METADATA _id",
      "error": [],
      "warning": []
    },
    {
      "query": "from *:indexes METADATA _id",
      "error": [],
      "warning": []
    },
    {
      "query": "from index METADATA _id, _source2",
      "error": [
        "Metadata field [_source2] is not available. Available metadata fields are: [_version, _id, _index, _source, _ignored]"
      ],
      "warning": []
    },
    {
      "query": "from index metadata _id, _source METADATA _id2",
      "error": [
        "SyntaxError: mismatched input 'METADATA' expecting <EOF>"
      ],
      "warning": []
    }
  ]
}