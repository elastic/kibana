{
  "indexes": [
    "a_index",
    "index",
    "other_index",
    ".secret_index",
    "my-index",
    "unsupported_index"
  ],
  "fields": [
    {
      "name": "booleanField",
      "type": "boolean"
    },
    {
      "name": "dateField",
      "type": "date"
    },
    {
      "name": "doubleField",
      "type": "double"
    },
    {
      "name": "ipField",
      "type": "ip"
    },
    {
      "name": "keywordField",
      "type": "keyword"
    },
    {
      "name": "integerField",
      "type": "integer"
    },
    {
      "name": "longField",
      "type": "long"
    },
    {
      "name": "textField",
      "type": "text"
    },
    {
      "name": "unsignedLongField",
      "type": "unsigned_long"
    },
    {
      "name": "versionField",
      "type": "version"
    },
    {
      "name": "cartesianPointField",
      "type": "cartesian_point"
    },
    {
      "name": "cartesianShapeField",
      "type": "cartesian_shape"
    },
    {
      "name": "geoPointField",
      "type": "geo_point"
    },
    {
      "name": "geoShapeField",
      "type": "geo_shape"
    },
    {
      "name": "counterIntegerField",
      "type": "counter_integer"
    },
    {
      "name": "counterLongField",
      "type": "counter_long"
    },
    {
      "name": "counterDoubleField",
      "type": "counter_double"
    },
    {
      "name": "dateNanosField",
      "type": "date_nanos"
    },
    {
      "name": "any#Char$Field",
      "type": "double"
    },
    {
      "name": "kubernetes.something.something",
      "type": "double"
    },
    {
      "name": "@timestamp",
      "type": "date"
    },
    {
      "name": "otherStringField",
      "type": "keyword"
    }
  ],
  "enrichFields": [
    {
      "name": "otherField",
      "type": "text"
    },
    {
      "name": "yetAnotherField",
      "type": "double"
    },
    {
      "name": "otherStringField",
      "type": "keyword"
    }
  ],
  "policies": [
    {
      "name": "policy",
      "sourceIndices": [
        "enrich_index"
      ],
      "matchField": "otherStringField",
      "enrichFields": [
        "otherField",
        "yetAnotherField"
      ]
    },
    {
      "name": "policy$",
      "sourceIndices": [
        "enrich_index"
      ],
      "matchField": "otherStringField",
      "enrichFields": [
        "otherField",
        "yetAnotherField"
      ]
    }
  ],
  "unsupported_field": [
    {
      "name": "unsupported_field",
      "type": "unsupported"
    }
  ],
  "testCases": [
    {
      "query": "",
      "error": [],
      "warning": []
    },
    {
      "query": " ",
      "error": [],
      "warning": []
    },
    {
      "query": "     ",
      "error": [],
      "warning": []
    },
    {
      "query": "eval",
      "error": [
        "SyntaxError: mismatched input 'eval' expecting {'explain', 'from', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "stats",
      "error": [
        "SyntaxError: mismatched input 'stats' expecting {'explain', 'from', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "rename",
      "error": [
        "SyntaxError: mismatched input 'rename' expecting {'explain', 'from', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "limit",
      "error": [
        "SyntaxError: mismatched input 'limit' expecting {'explain', 'from', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "keep",
      "error": [
        "SyntaxError: mismatched input 'keep' expecting {'explain', 'from', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "drop",
      "error": [
        "SyntaxError: mismatched input 'drop' expecting {'explain', 'from', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "mv_expand",
      "error": [
        "SyntaxError: mismatched input 'mv_expand' expecting {'explain', 'from', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "dissect",
      "error": [
        "SyntaxError: mismatched input 'dissect' expecting {'explain', 'from', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "grok",
      "error": [
        "SyntaxError: mismatched input 'grok' expecting {'explain', 'from', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "row",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "row missing_column",
      "error": [
        "Unknown column [missing_column]"
      ],
      "warning": []
    },
    {
      "query": "row fn()",
      "error": [
        "Unknown function [fn]"
      ],
      "warning": []
    },
    {
      "query": "row missing_column, missing_column2",
      "error": [
        "Unknown column [missing_column]",
        "Unknown column [missing_column2]"
      ],
      "warning": []
    },
    {
      "query": "row a=1",
      "error": [],
      "warning": []
    },
    {
      "query": "row a=1, missing_column",
      "error": [
        "Unknown column [missing_column]"
      ],
      "warning": []
    },
    {
      "query": "row a=1, b = average()",
      "error": [
        "Unknown function [average]"
      ],
      "warning": []
    },
    {
      "query": "row a = [1, 2, 3]",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [true, false]",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [\"a\", \"b\"]",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = null",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = (1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = (1, 2, 3)",
      "error": [
        "SyntaxError: no viable alternative at input '(1,'",
        "SyntaxError: extraneous input ')' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "row a=NOT true",
      "error": [],
      "warning": []
    },
    {
      "query": "row NOT true",
      "error": [],
      "warning": []
    },
    {
      "query": "row a=NOT false",
      "error": [],
      "warning": []
    },
    {
      "query": "row NOT false",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 1 in ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting '('"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 in (",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "Error: [in] function expects exactly 2 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "row var = 1 not in ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting '('"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 not in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 1 in (1, 2, 3, round(5))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" not in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 1 in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 not in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 not in (1, 2, 3, \"a\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true and false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true and null",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null and false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null and null",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true or false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = true or null",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null or false",
      "error": [],
      "warning": []
    },
    {
      "query": "row bool_var = null or null",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField > 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 > 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") > to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() > now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false > false",
      "error": [
        "Argument of [>] must be [date], found value [false] type [boolean]",
        "Argument of [>] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() > \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" > now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField >= 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 >= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") >= to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() >= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false >= false",
      "error": [
        "Argument of [>=] must be [date], found value [false] type [boolean]",
        "Argument of [>=] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() >= \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" >= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField < 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 < 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") < to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() < now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false < false",
      "error": [
        "Argument of [<] must be [date], found value [false] type [boolean]",
        "Argument of [<] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() < \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" < now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField <= 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 <= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") <= to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() <= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false <= false",
      "error": [
        "Argument of [<=] must be [date], found value [false] type [boolean]",
        "Argument of [<=] must be [date], found value [false] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() <= \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" <= now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField == 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 == 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") == to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() == now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false == false",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() == \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" == now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT 5 != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (doubleField != 0)",
      "error": [
        "Unknown column [doubleField]"
      ],
      "warning": []
    },
    {
      "query": "row var = (NOT (5 != 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = to_ip(\"127.0.0.1\") != to_ip(\"127.0.0.1\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() != now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = false != false",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() != \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"2022\" != now()",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 1 + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 + 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + now()",
      "error": [
        "Argument of [+] must be [date_period], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 - 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 - 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - now()",
      "error": [
        "Argument of [-] must be [date_period], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 * 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 * 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() * now()",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 / 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 / 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() / now()",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 % 1",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = (5 % 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() % now()",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "row var = \"a\" like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = 5 NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = \"a\" rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = \"a\" NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = NOT \"a\" NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = 5 rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = 5 NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = NOT 5 NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [5] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "row var = mv_sort([\"a\", \"b\"], \"bogus\")",
      "error": [],
      "warning": [
        "Invalid option [\"bogus\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "row var = mv_sort([\"a\", \"b\"], \"ASC\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = mv_sort([\"a\", \"b\"], \"DESC\")",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 anno",
      "error": [
        "ROW does not support [date_period] in expression [1 anno]"
      ],
      "warning": []
    },
    {
      "query": "row var = 1 anno",
      "error": [
        "Unexpected time interval qualifier: 'anno'"
      ],
      "warning": []
    },
    {
      "query": "row now() + 1 anno",
      "error": [
        "Unexpected time interval qualifier: 'anno'"
      ],
      "warning": []
    },
    {
      "query": "row 1 year",
      "error": [
        "ROW does not support [date_period] in expression [1 year]"
      ],
      "warning": []
    },
    {
      "query": "row 1                year",
      "error": [
        "ROW does not support [date_period] in expression [1 year]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 YEAR",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Year",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 year + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 year",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 year",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 year",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 years",
      "error": [
        "ROW does not support [date_period] in expression [1 years]"
      ],
      "warning": []
    },
    {
      "query": "row 1                years",
      "error": [
        "ROW does not support [date_period] in expression [1 years]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 YEARS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Years",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 years + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 years",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 years",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 years",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 quarter",
      "error": [
        "ROW does not support [date_period] in expression [1 quarter]"
      ],
      "warning": []
    },
    {
      "query": "row 1                quarter",
      "error": [
        "ROW does not support [date_period] in expression [1 quarter]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 QUARTER",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 quarter + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 quarter",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 quarter",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 quarter",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 quarters",
      "error": [
        "ROW does not support [date_period] in expression [1 quarters]"
      ],
      "warning": []
    },
    {
      "query": "row 1                quarters",
      "error": [
        "ROW does not support [date_period] in expression [1 quarters]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 QUARTERS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 quarters + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 quarters",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 quarters",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 quarters",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 month",
      "error": [
        "ROW does not support [date_period] in expression [1 month]"
      ],
      "warning": []
    },
    {
      "query": "row 1                month",
      "error": [
        "ROW does not support [date_period] in expression [1 month]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MONTH",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Month",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 month + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 month",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 month",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 month",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 months",
      "error": [
        "ROW does not support [date_period] in expression [1 months]"
      ],
      "warning": []
    },
    {
      "query": "row 1                months",
      "error": [
        "ROW does not support [date_period] in expression [1 months]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MONTHS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Months",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 months + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 months",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 months",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 months",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 week",
      "error": [
        "ROW does not support [date_period] in expression [1 week]"
      ],
      "warning": []
    },
    {
      "query": "row 1                week",
      "error": [
        "ROW does not support [date_period] in expression [1 week]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 WEEK",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Week",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 week + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 week",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 week",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 week",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 weeks",
      "error": [
        "ROW does not support [date_period] in expression [1 weeks]"
      ],
      "warning": []
    },
    {
      "query": "row 1                weeks",
      "error": [
        "ROW does not support [date_period] in expression [1 weeks]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 WEEKS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 weeks + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 weeks",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 weeks",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 weeks",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 day",
      "error": [
        "ROW does not support [date_period] in expression [1 day]"
      ],
      "warning": []
    },
    {
      "query": "row 1                day",
      "error": [
        "ROW does not support [date_period] in expression [1 day]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 DAY",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Day",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 day + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 day",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 day",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 day",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 days",
      "error": [
        "ROW does not support [date_period] in expression [1 days]"
      ],
      "warning": []
    },
    {
      "query": "row 1                days",
      "error": [
        "ROW does not support [date_period] in expression [1 days]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 DAYS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Days",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 days + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 days",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 days",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 days",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 hour",
      "error": [
        "ROW does not support [date_period] in expression [1 hour]"
      ],
      "warning": []
    },
    {
      "query": "row 1                hour",
      "error": [
        "ROW does not support [date_period] in expression [1 hour]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 HOUR",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Hour",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 hour + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 hour",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 hour",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 hour",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 hours",
      "error": [
        "ROW does not support [date_period] in expression [1 hours]"
      ],
      "warning": []
    },
    {
      "query": "row 1                hours",
      "error": [
        "ROW does not support [date_period] in expression [1 hours]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 HOURS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Hours",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 hours + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 hours",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 hours",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 hours",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 minute",
      "error": [
        "ROW does not support [date_period] in expression [1 minute]"
      ],
      "warning": []
    },
    {
      "query": "row 1                minute",
      "error": [
        "ROW does not support [date_period] in expression [1 minute]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MINUTE",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Minute",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 minute + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 minute",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 minute",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 minute",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 minutes",
      "error": [
        "ROW does not support [date_period] in expression [1 minutes]"
      ],
      "warning": []
    },
    {
      "query": "row 1                minutes",
      "error": [
        "ROW does not support [date_period] in expression [1 minutes]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MINUTES",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 minutes + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 minutes",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 minutes",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 minutes",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 second",
      "error": [
        "ROW does not support [date_period] in expression [1 second]"
      ],
      "warning": []
    },
    {
      "query": "row 1                second",
      "error": [
        "ROW does not support [date_period] in expression [1 second]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 SECOND",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Second",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 second + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 second",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 second",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 second",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 seconds",
      "error": [
        "ROW does not support [date_period] in expression [1 seconds]"
      ],
      "warning": []
    },
    {
      "query": "row 1                seconds",
      "error": [
        "ROW does not support [date_period] in expression [1 seconds]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 SECONDS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 seconds + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 seconds",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 seconds",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 seconds",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 millisecond",
      "error": [
        "ROW does not support [date_period] in expression [1 millisecond]"
      ],
      "warning": []
    },
    {
      "query": "row 1                millisecond",
      "error": [
        "ROW does not support [date_period] in expression [1 millisecond]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MILLISECOND",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 millisecond + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 millisecond",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 millisecond",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 millisecond",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row 1 milliseconds",
      "error": [
        "ROW does not support [date_period] in expression [1 milliseconds]"
      ],
      "warning": []
    },
    {
      "query": "row 1                milliseconds",
      "error": [
        "ROW does not support [date_period] in expression [1 milliseconds]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() - 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 MILLISECONDS",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() - 1 Milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row var = now() + 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "row 1 milliseconds + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() * 1 milliseconds",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() / 1 milliseconds",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "row var = now() % 1 milliseconds",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "show",
      "error": [
        "SyntaxError: missing 'info' at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "show info",
      "error": [],
      "warning": []
    },
    {
      "query": "show doubleField",
      "error": [
        "SyntaxError: token recognition error at: 'd'",
        "SyntaxError: token recognition error at: 'o'",
        "SyntaxError: token recognition error at: 'u'",
        "SyntaxError: token recognition error at: 'b'",
        "SyntaxError: token recognition error at: 'l'",
        "SyntaxError: token recognition error at: 'e'",
        "SyntaxError: token recognition error at: 'F'",
        "SyntaxError: token recognition error at: 'ie'",
        "SyntaxError: token recognition error at: 'l'",
        "SyntaxError: token recognition error at: 'd'",
        "SyntaxError: missing 'info' at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from index | limit ",
      "error": [
        "SyntaxError: missing INTEGER_LITERAL at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from index | limit 4 ",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | limit 4.5",
      "error": [
        "SyntaxError: mismatched input '4.5' expecting INTEGER_LITERAL"
      ],
      "warning": []
    },
    {
      "query": "from index | limit a",
      "error": [
        "SyntaxError: mismatched input 'a' expecting INTEGER_LITERAL"
      ],
      "warning": []
    },
    {
      "query": "from index | limit doubleField",
      "error": [
        "SyntaxError: mismatched input 'doubleField' expecting INTEGER_LITERAL"
      ],
      "warning": []
    },
    {
      "query": "from index | limit textField",
      "error": [
        "SyntaxError: mismatched input 'textField' expecting INTEGER_LITERAL"
      ],
      "warning": []
    },
    {
      "query": "from index | limit 4",
      "error": [],
      "warning": []
    },
    {
      "query": "ROW a=1::LONG | LOOKUP t ON a",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from index | keep keywordField, doubleField, integerField, dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep `keywordField`, `doubleField`, `integerField`, `dateField`",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep 4.5",
      "error": [
        "SyntaxError: token recognition error at: '4'",
        "SyntaxError: token recognition error at: '5'",
        "SyntaxError: mismatched input '.' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}",
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}",
        "Unknown column [.]"
      ],
      "warning": []
    },
    {
      "query": "from index | keep `4.5`",
      "error": [
        "Unknown column [4.5]"
      ],
      "warning": []
    },
    {
      "query": "from index | keep missingField, doubleField, dateField",
      "error": [
        "Unknown column [missingField]"
      ],
      "warning": []
    },
    {
      "query": "from index | keep `any#Char$Field`",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | project ",
      "error": [
        "SyntaxError: mismatched input 'project' expecting {'dissect', 'drop', 'enrich', 'eval', 'grok', 'keep', 'limit', 'mv_expand', 'rename', 'sort', 'stats', 'where'}"
      ],
      "warning": []
    },
    {
      "query": "from index | project textField, doubleField, dateField",
      "error": [
        "SyntaxError: mismatched input 'project' expecting {'dissect', 'drop', 'enrich', 'eval', 'grok', 'keep', 'limit', 'mv_expand', 'rename', 'sort', 'stats', 'where'}"
      ],
      "warning": []
    },
    {
      "query": "from index | PROJECT textField, doubleField, dateField",
      "error": [
        "SyntaxError: mismatched input 'PROJECT' expecting {'dissect', 'drop', 'enrich', 'eval', 'grok', 'keep', 'limit', 'mv_expand', 'rename', 'sort', 'stats', 'where'}"
      ],
      "warning": []
    },
    {
      "query": "from index | project missingField, doubleField, dateField",
      "error": [
        "SyntaxError: mismatched input 'project' expecting {'dissect', 'drop', 'enrich', 'eval', 'grok', 'keep', 'limit', 'mv_expand', 'rename', 'sort', 'stats', 'where'}"
      ],
      "warning": []
    },
    {
      "query": "from index | keep k*",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep *Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep k*Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep key*Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep k*, i*",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | keep m*",
      "error": [
        "Unknown column [m*]"
      ],
      "warning": []
    },
    {
      "query": "from index | keep *m",
      "error": [
        "Unknown column [*m]"
      ],
      "warning": []
    },
    {
      "query": "from index | keep d*m",
      "error": [
        "Unknown column [d*m]"
      ],
      "warning": []
    },
    {
      "query": "FROM index | STATS ROUND(AVG(doubleField * 1.5)), COUNT(*), MIN(doubleField * 10) | KEEP `MIN(doubleField * 10)`",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM index | STATS COUNT(*), MIN(doubleField * 10), MAX(doubleField)| KEEP `COUNT(*)`",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from index | drop textField, doubleField, dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop 4.5",
      "error": [
        "SyntaxError: token recognition error at: '4'",
        "SyntaxError: token recognition error at: '5'",
        "SyntaxError: mismatched input '.' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}",
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}",
        "Unknown column [.]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop missingField, doubleField, dateField",
      "error": [
        "Unknown column [missingField]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop `any#Char$Field`",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop t*",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop t**Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop *Field*",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop t*F*d",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop *Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop t*Field",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from index | drop s*, d*",
      "error": [
        "Unknown column [s*]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop m*",
      "error": [
        "Unknown column [m*]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop *m",
      "error": [
        "Unknown column [*m]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop d*m",
      "error": [
        "Unknown column [d*m]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop *",
      "error": [
        "Removing all fields is not allowed [*]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop textField, *",
      "error": [
        "Removing all fields is not allowed [*]"
      ],
      "warning": []
    },
    {
      "query": "from index | drop @timestamp",
      "error": [],
      "warning": [
        "Drop [@timestamp] will remove all time filters to the search results"
      ]
    },
    {
      "query": "from index | drop textField, @timestamp",
      "error": [],
      "warning": [
        "Drop [@timestamp] will remove all time filters to the search results"
      ]
    },
    {
      "query": "FROM index | STATS ROUND(AVG(doubleField * 1.5)), COUNT(*), MIN(doubleField * 10) | DROP `MIN(doubleField * 10)`",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM index | STATS COUNT(*), MIN(doubleField * 10), MAX(doubleField)| DROP `COUNT(*)`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand integerField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | mv_expand doubleField, b",
      "error": [
        "SyntaxError: token recognition error at: ','",
        "SyntaxError: extraneous input 'b' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "row a = \"a\" | mv_expand a",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [1, 2, 3] | mv_expand a",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [true, false] | mv_expand a",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = [\"a\", \"b\"] | mv_expand a",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | rename",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename textField",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting 'as'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename a",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting 'as'",
        "Unknown column [a]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename textField as",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename missingField as",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}",
        "Unknown column [missingField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename textField as b",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | rename textField AS b",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | rename textField As b",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | rename textField As b, b AS c",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | rename fn() as a",
      "error": [
        "SyntaxError: token recognition error at: '('",
        "SyntaxError: token recognition error at: ')'",
        "Unknown column [fn]",
        "Unknown column [a]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField + 1 | rename `doubleField + 1` as a",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField) | rename `avg(doubleField)` as avg0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index |eval doubleField + 1 | rename `doubleField + 1` as ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename key* as keywords",
      "error": [
        "Using wildcards (*) in RENAME is not allowed [key*]",
        "Unknown column [keywords]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | rename s* as strings",
      "error": [
        "Unknown column [s*]",
        "Unknown column [strings]"
      ],
      "warning": []
    },
    {
      "query": "row a = 10 | rename a as `this``is fine`",
      "error": [],
      "warning": []
    },
    {
      "query": "row a = 10 | rename a as this is fine",
      "error": [
        "SyntaxError: mismatched input 'is' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField",
      "error": [
        "SyntaxError: missing QUOTED_STRING at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField 2",
      "error": [
        "SyntaxError: mismatched input '2' expecting QUOTED_STRING"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField .",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "Unknown column [textField.]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField %a",
      "error": [
        "SyntaxError: mismatched input '%' expecting QUOTED_STRING",
        "SyntaxError: mismatched input '<EOF>' expecting '='"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | dissect doubleField \"%{firstWord}\"",
      "error": [
        "DISSECT only supports keyword, text types values, found [doubleField] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" option ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting '='"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" option = ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', 'null', '?', 'true', '+', '-', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET}",
        "Invalid option for DISSECT: [option]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" option = 1",
      "error": [
        "Invalid option for DISSECT: [option]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" append_separator = \"-\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" ignore_missing = true",
      "error": [
        "Invalid option for DISSECT: [ignore_missing]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" append_separator = true",
      "error": [
        "Invalid value for DISSECT append_separator: expected a string, but was [true]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | dissect textField \"%{firstWord}\" | keep firstWord",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | grok",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField",
      "error": [
        "SyntaxError: missing QUOTED_STRING at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField 2",
      "error": [
        "SyntaxError: mismatched input '2' expecting QUOTED_STRING"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField .",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "Unknown column [textField.]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField %a",
      "error": [
        "SyntaxError: mismatched input '%' expecting QUOTED_STRING"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField \"%{firstWord}\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | grok doubleField \"%{firstWord}\"",
      "error": [
        "GROK only supports keyword, text types values, found [doubleField] of type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | grok textField \"%{firstWord}\" | keep firstWord",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where b",
      "error": [
        "Unknown column [b]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where true",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT true",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where false",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT false",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT +1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 * 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT 1 * 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT -1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 / 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT 1 / 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1.0 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT 1.0 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1.5 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT 1.5 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField > 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField > 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField > textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField > doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField > dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField > booleanField",
      "error": [
        "Argument of [>] must be [date], found value [booleanField] type [boolean]",
        "Argument of [>] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where ipField > ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField >= 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField >= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField >= textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField >= doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField >= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField >= booleanField",
      "error": [
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]",
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where ipField >= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField < 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField < 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField < textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField < doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField < dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField < booleanField",
      "error": [
        "Argument of [<] must be [date], found value [booleanField] type [boolean]",
        "Argument of [<] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where ipField < ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField <= 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField <= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField <= textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField <= doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField <= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField <= booleanField",
      "error": [
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]",
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where ipField <= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField == 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField == 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField == textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField == doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField == dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField == booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField == ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField != 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField != 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField != textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField != doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField != dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField != booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField != ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where - round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where - round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 - doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where + round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where + round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + -- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 -- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + -+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 -+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + +- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 +- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ++ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + ++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 ++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where --- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where --- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + --- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 --- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + -+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 -+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +-+ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + +-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 +-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +++ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + +++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 +++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where not not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ---- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ---- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + ---- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 ---- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where -+-+ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + -+-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 -+-+ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +-+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where +-+- round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + +-+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 +-+- doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ++++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ++++ round(doubleField) > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 + ++++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1 ++++ doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where not not not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where *+ doubleField",
      "error": [
        "SyntaxError: extraneous input '*' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where /+ doubleField",
      "error": [
        "SyntaxError: extraneous input '/' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where %+ doubleField",
      "error": [
        "SyntaxError: extraneous input '%' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField =~ 0",
      "error": [
        "Argument of [=~] must be [text], found value [doubleField] type [double]",
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField =~ 0",
      "error": [
        "Argument of [=~] must be [text], found value [doubleField] type [double]",
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where (doubleField =~ 0)",
      "error": [
        "Argument of [=~] must be [text], found value [doubleField] type [double]",
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where (NOT (doubleField =~ 0))",
      "error": [
        "Argument of [=~] must be [text], found value [doubleField] type [double]",
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where 1 =~ 0",
      "error": [
        "Argument of [=~] must be [text], found value [1] type [number]",
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField =~ 0",
      "error": [
        "Argument of [=~] must be [text], found value [0] type [number]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where textField like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT textField like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT textField NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where textField rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT textField rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where NOT textField NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where NOT doubleField NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | where cidr_match(ipField)",
      "error": [
        "Error: [cidr_match] function expects at least 2 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval cidr = \"172.0.0.1/30\" | where cidr_match(ipField, \"172.0.0.1/30\", cidr)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where booleanField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where doubleField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where ipField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where keywordField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where integerField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where longField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where unsignedLongField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where versionField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianPointField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where cartesianShapeField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoPointField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where geoShapeField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterIntegerField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterLongField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where counterDoubleField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateNanosField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateNanosField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateNanosField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateNanosField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateNanosField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateNanosField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateNanosField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where dateNanosField Is nOt NuLL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where textField == \"a\" or null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval b = textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField + ",
      "error": [
        "SyntaxError: no viable alternative at input 'doubleField + '"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField + 1",
      "error": [
        "Argument of [+] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=b",
      "error": [
        "Unknown column [b]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=b, ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "Unknown column [b]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round",
      "error": [
        "Unknown column [round]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(",
      "error": [
        "SyntaxError: no viable alternative at input 'round('"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField), ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) + round(doubleField) ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) + round(textField) ",
      "error": [
        "Argument of [round] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) + round(textField), doubleField  ",
      "error": [
        "Argument of [round] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) + round(doubleField), doubleField  ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=round(doubleField) + round(doubleField), b = doubleField  ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=[1, 2, 3]",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=[true, false]",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=[\"a\", \"b\"]",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval integerField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval longField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval unsignedLongField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianPointField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval cartesianShapeField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoPointField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval geoShapeField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterIntegerField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterLongField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval counterDoubleField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateNanosField IS NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateNanosField IS null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateNanosField is null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateNanosField is NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateNanosField IS NOT NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateNanosField IS NOT null",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateNanosField IS not NULL",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 - doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval -- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + -- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 -- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval -+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + -+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 -+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval +- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + +- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 +- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=++ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + ++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 ++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval --- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=--- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=--- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + --- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 --- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval -+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + -+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 -+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval +-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+-+ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + +-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 +-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval +++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+++ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + +++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 +++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval not not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ---- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=---- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=---- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + ---- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 ---- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval -+-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=-+-+ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + -+-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 -+-+ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval +-+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+-+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=+-+- round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + +-+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 +-+- doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ++++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=++++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval a=++++ round(doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + ++++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 ++++ doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval not not not not  booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval *+ doubleField",
      "error": [
        "SyntaxError: extraneous input '*' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval /+ doubleField",
      "error": [
        "SyntaxError: extraneous input '/' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval %+ doubleField",
      "error": [
        "SyntaxError: extraneous input '%' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval log10(-1)",
      "error": [],
      "warning": [
        "Log of a negative number results in null: -1"
      ]
    },
    {
      "query": "from a_index | eval log(-1)",
      "error": [],
      "warning": [
        "Log of a negative number results in null: -1"
      ]
    },
    {
      "query": "from a_index | eval log(-1, 20)",
      "error": [],
      "warning": [
        "Log of a negative number results in null: -1"
      ]
    },
    {
      "query": "from a_index | eval log(-1, -20)",
      "error": [],
      "warning": [
        "Log of a negative number results in null: -1",
        "Log of a negative number results in null: -20"
      ]
    },
    {
      "query": "from a_index | eval var0 = log(-1, -20)",
      "error": [],
      "warning": [
        "Log of a negative number results in null: -1",
        "Log of a negative number results in null: -20"
      ]
    },
    {
      "query": "from a_index | eval doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField > 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField > 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 > 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField > textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField > doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField > dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField > booleanField",
      "error": [
        "Argument of [>] must be [date], found value [booleanField] type [boolean]",
        "Argument of [>] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField > ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField > textField",
      "error": [
        "Argument of [>] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField > doubleField",
      "error": [
        "Argument of [>] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField > \"2022\"",
      "error": [
        "Argument of [>] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField > keywordField",
      "error": [
        "Argument of [>] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField > dateField",
      "error": [
        "Argument of [>] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField > 0",
      "error": [
        "Argument of [>] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField > now()",
      "error": [
        "Argument of [>] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField > \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" > dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField > \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" > versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField > \"true\"",
      "error": [
        "Argument of [>] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" > booleanField",
      "error": [
        "Argument of [>] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField > \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" > ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField >= 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField >= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 >= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField >= textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField >= doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField >= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField >= booleanField",
      "error": [
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]",
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField >= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField >= textField",
      "error": [
        "Argument of [>=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField >= doubleField",
      "error": [
        "Argument of [>=] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField >= \"2022\"",
      "error": [
        "Argument of [>=] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField >= keywordField",
      "error": [
        "Argument of [>=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField >= dateField",
      "error": [
        "Argument of [>=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField >= 0",
      "error": [
        "Argument of [>=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField >= now()",
      "error": [
        "Argument of [>=] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField >= \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" >= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField >= \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" >= versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField >= \"true\"",
      "error": [
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" >= booleanField",
      "error": [
        "Argument of [>=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField >= \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" >= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField < 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField < 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 < 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField < textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField < doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField < dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField < booleanField",
      "error": [
        "Argument of [<] must be [date], found value [booleanField] type [boolean]",
        "Argument of [<] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField < ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField < textField",
      "error": [
        "Argument of [<] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField < doubleField",
      "error": [
        "Argument of [<] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField < \"2022\"",
      "error": [
        "Argument of [<] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField < keywordField",
      "error": [
        "Argument of [<] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField < dateField",
      "error": [
        "Argument of [<] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField < 0",
      "error": [
        "Argument of [<] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField < now()",
      "error": [
        "Argument of [<] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField < \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" < dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField < \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" < versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField < \"true\"",
      "error": [
        "Argument of [<] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" < booleanField",
      "error": [
        "Argument of [<] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField < \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" < ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField <= 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField <= 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 <= 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField <= textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField <= doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField <= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField <= booleanField",
      "error": [
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]",
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField <= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField <= textField",
      "error": [
        "Argument of [<=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField <= doubleField",
      "error": [
        "Argument of [<=] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField <= \"2022\"",
      "error": [
        "Argument of [<=] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField <= keywordField",
      "error": [
        "Argument of [<=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField <= dateField",
      "error": [
        "Argument of [<=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField <= 0",
      "error": [
        "Argument of [<=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField <= now()",
      "error": [
        "Argument of [<=] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField <= \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" <= dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField <= \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" <= versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField <= \"true\"",
      "error": [
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" <= booleanField",
      "error": [
        "Argument of [<=] must be [date], found value [booleanField] type [boolean]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField <= \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" <= ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField == 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField == 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 == 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField == textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField == doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField == dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField == booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField == ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField == textField",
      "error": [
        "Argument of [==] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField == doubleField",
      "error": [
        "Argument of [==] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField == \"2022\"",
      "error": [
        "Argument of [==] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField == keywordField",
      "error": [
        "Argument of [==] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField == dateField",
      "error": [
        "Argument of [==] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField == 0",
      "error": [
        "Argument of [==] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField == now()",
      "error": [
        "Argument of [==] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField == \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" == dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField == \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" == versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField == \"true\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" == booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField == \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" == ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField != 0)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (NOT (doubleField != 0))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 != 0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField != textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField != doubleField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField != dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField != booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField != ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField != textField",
      "error": [
        "Argument of [!=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField != doubleField",
      "error": [
        "Argument of [!=] must be [double], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField != \"2022\"",
      "error": [
        "Argument of [!=] must be [date], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField != keywordField",
      "error": [
        "Argument of [!=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval keywordField != dateField",
      "error": [
        "Argument of [!=] must be [date], found value [keywordField] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField != 0",
      "error": [
        "Argument of [!=] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField != now()",
      "error": [
        "Argument of [!=] must be [date], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField != \"2022\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"2022\" != dateField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField != \"1.2.3\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1.2.3\" != versionField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField != \"true\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"true\" != booleanField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField != \"136.36.3.205\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"136.36.3.205\" != ipField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval versionField in (\"1.2.3\", \"4.5.6\", to_version(\"2.3.2\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval dateField in (\"2023-12-12\", \"2024-12-12\", date_parse(\"yyyy-MM-dd\", \"2025-12-12\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval booleanField in (\"true\", \"false\", false)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval ipField in (\"136.36.3.205\", \"136.36.3.206\", to_ip(\"136.36.3.207\"))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField + 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now() + now()",
      "error": [
        "Argument of [+] must be [date_period], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"1\"",
      "error": [
        "Argument of [+] must be [date_period], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1\" + 1",
      "error": [
        "Argument of [+] must be [date_period], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField - 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField - 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 - 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now() - now()",
      "error": [
        "Argument of [-] must be [date_period], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 - \"1\"",
      "error": [
        "Argument of [-] must be [date_period], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1\" - 1",
      "error": [
        "Argument of [-] must be [date_period], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField * 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField * 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 * 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now() * now()",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 * \"1\"",
      "error": [
        "Argument of [*] must be [double], found value [\"1\"] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1\" * 1",
      "error": [
        "Argument of [*] must be [double], found value [\"1\"] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField / 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField / 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 / 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now() / now()",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 / \"1\"",
      "error": [
        "Argument of [/] must be [double], found value [\"1\"] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1\" / 1",
      "error": [
        "Argument of [/] must be [double], found value [\"1\"] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField % 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval (doubleField % 1)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 % 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval now() % now()",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [now()] type [date]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 % \"1\"",
      "error": [
        "Argument of [%] must be [double], found value [\"1\"] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval \"1\" % 1",
      "error": [
        "Argument of [%] must be [double], found value [\"1\"] type [keyword]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1/0",
      "error": [],
      "warning": [
        "Cannot divide by zero: 1/0"
      ]
    },
    {
      "query": "from a_index | eval var = 1/0",
      "error": [],
      "warning": [
        "Cannot divide by zero: 1/0"
      ]
    },
    {
      "query": "from a_index | eval 1 + 1/0",
      "error": [],
      "warning": [
        "Cannot divide by zero: 1/0"
      ]
    },
    {
      "query": "from a_index | eval 1%0",
      "error": [],
      "warning": [
        "Module by zero can return null value: 1%0"
      ]
    },
    {
      "query": "from a_index | eval var = 1%0",
      "error": [],
      "warning": [
        "Module by zero can return null value: 1%0"
      ]
    },
    {
      "query": "from a_index | eval 1 + 1%0",
      "error": [],
      "warning": [
        "Module by zero can return null value: 1%0"
      ]
    },
    {
      "query": "from a_index | eval textField like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT textField like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT textField NOT like \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField like \"?a\"",
      "error": [
        "Argument of [like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField NOT like \"?a\"",
      "error": [
        "Argument of [not_like] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT textField rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT textField NOT rlike \"?a\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField rlike \"?a\"",
      "error": [
        "Argument of [rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval NOT doubleField NOT rlike \"?a\"",
      "error": [
        "Argument of [not_rlike] must be [text], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField not in (1, 2, 3)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField not in (1, 2, 3, doubleField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 in (1, 2, 3, round(doubleField))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval \"a\" in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField not in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval textField not in (\"a\", \"b\", \"c\", textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField not in (\"a\", \"b\", \"c\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval doubleField not in (1, 2, 3, textField)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval avg(doubleField)",
      "error": [
        "EVAL does not support function avg"
      ],
      "warning": []
    },
    {
      "query": "from a_index | stats avg(doubleField) | eval `avg(doubleField)` + 1",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval not",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}",
        "Error: [not] function expects exactly one argument, got 0."
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval in",
      "error": [
        "SyntaxError: mismatched input 'in' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField in textField",
      "error": [
        "SyntaxError: missing '(' at 'textField'",
        "SyntaxError: mismatched input '<EOF>' expecting {',', ')'}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField in textField)",
      "error": [
        "SyntaxError: missing '(' at 'textField'",
        "Error: [in] function expects exactly 2 arguments, got 1."
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField not in textField",
      "error": [
        "SyntaxError: missing '(' at 'textField'",
        "SyntaxError: mismatched input '<EOF>' expecting {',', ')'}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort([\"a\", \"b\"], \"bogus\")",
      "error": [],
      "warning": [
        "Invalid option [\"bogus\"] for mv_sort. Supported options: [\"asc\", \"desc\"]."
      ]
    },
    {
      "query": "from a_index | eval mv_sort([\"a\", \"b\"], \"ASC\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval mv_sort([\"a\", \"b\"], \"DESC\")",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval result = case(false, 0, 1), round(result)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval result = case(false, 0, 1) | stats sum(result)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval result = case(false, 0, 1) | stats var0 = sum(result)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(case(false, 0, 1))",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 anno",
      "error": [
        "EVAL does not support [date_period] in expression [1 anno]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = 1 anno",
      "error": [
        "Unexpected time interval qualifier: 'anno'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval now() + 1 anno",
      "error": [
        "Unexpected time interval qualifier: 'anno'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 year",
      "error": [
        "EVAL does not support [date_period] in expression [1 year]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                year",
      "error": [
        "EVAL does not support [date_period] in expression [1 year]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 YEAR",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Year",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 year",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 year + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 year",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 year",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 year",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 year] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 years",
      "error": [
        "EVAL does not support [date_period] in expression [1 years]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                years",
      "error": [
        "EVAL does not support [date_period] in expression [1 years]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 YEARS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Years",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 years",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 years + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 years",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 years",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 years",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 years] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 quarter",
      "error": [
        "EVAL does not support [date_period] in expression [1 quarter]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                quarter",
      "error": [
        "EVAL does not support [date_period] in expression [1 quarter]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 QUARTER",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 quarter",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 quarter + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 quarter",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 quarter",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 quarter",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 quarter] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 quarters",
      "error": [
        "EVAL does not support [date_period] in expression [1 quarters]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                quarters",
      "error": [
        "EVAL does not support [date_period] in expression [1 quarters]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 QUARTERS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 quarters",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 quarters + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 quarters",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 quarters",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 quarters",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 quarters] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 month",
      "error": [
        "EVAL does not support [date_period] in expression [1 month]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                month",
      "error": [
        "EVAL does not support [date_period] in expression [1 month]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MONTH",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Month",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 month",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 month + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 month",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 month",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 month",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 month] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 months",
      "error": [
        "EVAL does not support [date_period] in expression [1 months]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                months",
      "error": [
        "EVAL does not support [date_period] in expression [1 months]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MONTHS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Months",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 months",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 months + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 months",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 months",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 months",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 months] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 week",
      "error": [
        "EVAL does not support [date_period] in expression [1 week]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                week",
      "error": [
        "EVAL does not support [date_period] in expression [1 week]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 WEEK",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Week",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 week",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 week + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 week",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 week",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 week",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 week] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 weeks",
      "error": [
        "EVAL does not support [date_period] in expression [1 weeks]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                weeks",
      "error": [
        "EVAL does not support [date_period] in expression [1 weeks]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 WEEKS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 weeks",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 weeks + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 weeks",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 weeks",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 weeks",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 weeks] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 day",
      "error": [
        "EVAL does not support [date_period] in expression [1 day]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                day",
      "error": [
        "EVAL does not support [date_period] in expression [1 day]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 DAY",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Day",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 day",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 day + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 day",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 day",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 day",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 day] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 days",
      "error": [
        "EVAL does not support [date_period] in expression [1 days]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                days",
      "error": [
        "EVAL does not support [date_period] in expression [1 days]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 DAYS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Days",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 days",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 days + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 days",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 days",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 days",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 days] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 hour",
      "error": [
        "EVAL does not support [date_period] in expression [1 hour]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                hour",
      "error": [
        "EVAL does not support [date_period] in expression [1 hour]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 HOUR",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Hour",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 hour",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 hour + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 hour",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 hour",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 hour",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 hour] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 hours",
      "error": [
        "EVAL does not support [date_period] in expression [1 hours]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                hours",
      "error": [
        "EVAL does not support [date_period] in expression [1 hours]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 HOURS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Hours",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 hours",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 hours + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 hours",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 hours",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 hours",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 hours] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 minute",
      "error": [
        "EVAL does not support [date_period] in expression [1 minute]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                minute",
      "error": [
        "EVAL does not support [date_period] in expression [1 minute]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MINUTE",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Minute",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 minute",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 minute + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 minute",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 minute",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 minute",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 minute] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 minutes",
      "error": [
        "EVAL does not support [date_period] in expression [1 minutes]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                minutes",
      "error": [
        "EVAL does not support [date_period] in expression [1 minutes]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MINUTES",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 minutes",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 minutes + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 minutes",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 minutes",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 minutes",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 minutes] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 second",
      "error": [
        "EVAL does not support [date_period] in expression [1 second]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                second",
      "error": [
        "EVAL does not support [date_period] in expression [1 second]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 SECOND",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Second",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 second",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 second + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 second",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 second",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 second",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 second] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 seconds",
      "error": [
        "EVAL does not support [date_period] in expression [1 seconds]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                seconds",
      "error": [
        "EVAL does not support [date_period] in expression [1 seconds]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 SECONDS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 seconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 seconds + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 seconds",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 seconds",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 seconds",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 seconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 millisecond",
      "error": [
        "EVAL does not support [date_period] in expression [1 millisecond]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                millisecond",
      "error": [
        "EVAL does not support [date_period] in expression [1 millisecond]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MILLISECOND",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 millisecond",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 millisecond + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 millisecond",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 millisecond",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 millisecond",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 millisecond] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 milliseconds",
      "error": [
        "EVAL does not support [date_period] in expression [1 milliseconds]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                milliseconds",
      "error": [
        "EVAL does not support [date_period] in expression [1 milliseconds]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MILLISECONDS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 milliseconds",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 milliseconds + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 milliseconds",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 milliseconds",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 milliseconds",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 milliseconds] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 ms",
      "error": [
        "EVAL does not support [date_period] in expression [1 ms]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                ms",
      "error": [
        "EVAL does not support [date_period] in expression [1 ms]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 ms",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 ms",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MS",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Ms",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 ms",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 ms + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 ms] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 ms",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 ms] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 ms",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 ms] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 ms",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 ms] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 s",
      "error": [
        "EVAL does not support [date_period] in expression [1 s]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                s",
      "error": [
        "EVAL does not support [date_period] in expression [1 s]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 s",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 s",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 S",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 S",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 s",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 s + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 s] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 s",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 s] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 s",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 s] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 s",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 s] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 m",
      "error": [
        "EVAL does not support [date_period] in expression [1 m]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                m",
      "error": [
        "EVAL does not support [date_period] in expression [1 m]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 m",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 m",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 M",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 M",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 m",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 m + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 m] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 m",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 m] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 m",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 m] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 m",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 m] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 h",
      "error": [
        "EVAL does not support [date_period] in expression [1 h]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                h",
      "error": [
        "EVAL does not support [date_period] in expression [1 h]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 h",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 h",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 H",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 H",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 h",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 h + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 h] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 h",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 h] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 h",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 h] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 h",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 h] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 d",
      "error": [
        "EVAL does not support [date_period] in expression [1 d]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                d",
      "error": [
        "EVAL does not support [date_period] in expression [1 d]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 d",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 d",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 D",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 D",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 d",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 d + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 d] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 d",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 d] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 d",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 d] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 d",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 d] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 w",
      "error": [
        "EVAL does not support [date_period] in expression [1 w]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                w",
      "error": [
        "EVAL does not support [date_period] in expression [1 w]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 w",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 w",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 W",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 W",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 w",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 w + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 w] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 w",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 w] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 w",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 w] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 w",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 w] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 mo",
      "error": [
        "EVAL does not support [date_period] in expression [1 mo]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                mo",
      "error": [
        "EVAL does not support [date_period] in expression [1 mo]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 mo",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 mo",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 MO",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Mo",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 mo",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 mo + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 mo] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 mo",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 mo] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 mo",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 mo] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 mo",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 mo] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 q",
      "error": [
        "EVAL does not support [date_period] in expression [1 q]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                q",
      "error": [
        "EVAL does not support [date_period] in expression [1 q]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 q",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 q",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Q",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Q",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 q",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 q + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 q] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 q",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 q] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 q",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 q] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 q",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 q] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 y",
      "error": [
        "EVAL does not support [date_period] in expression [1 y]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                y",
      "error": [
        "EVAL does not support [date_period] in expression [1 y]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 y",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 y",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Y",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Y",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 y",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 y + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 y] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 y",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 y] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 y",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 y] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 y",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 y] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 yr",
      "error": [
        "EVAL does not support [date_period] in expression [1 yr]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval 1                yr",
      "error": [
        "EVAL does not support [date_period] in expression [1 yr]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() - 1 yr",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 yr",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 YR",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField - 1 Yr",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval var = dateField + 1 yr",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 yr + 1 year",
      "error": [
        "Argument of [+] must be [date], found value [1 yr] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() * 1 yr",
      "error": [
        "Argument of [*] must be [double], found value [now()] type [date]",
        "Argument of [*] must be [double], found value [1 yr] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() / 1 yr",
      "error": [
        "Argument of [/] must be [double], found value [now()] type [date]",
        "Argument of [/] must be [double], found value [1 yr] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval var = now() % 1 yr",
      "error": [
        "Argument of [%] must be [double], found value [now()] type [date]",
        "Argument of [%] must be [double], found value [1 yr] type [duration]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort \"field\" ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort wrongField ",
      "error": [
        "Unknown column [wrongField]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField, ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, INTEGER_LITERAL, DECIMAL_LITERAL, 'false', '(', 'not', 'null', '?', 'true', '+', '-', 'match', NAMED_OR_POSITIONAL_PARAM, OPENING_BRACKET, UNQUOTED_IDENTIFIER, QUOTED_IDENTIFIER}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField, textField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort \"field\" desc ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc nulls ",
      "error": [
        "SyntaxError: missing {'first', 'last'} at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc nulls first",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc first",
      "error": [
        "SyntaxError: extraneous input 'first' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc nulls last",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField desc last",
      "error": [
        "SyntaxError: extraneous input 'last' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort \"field\" asc ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc nulls ",
      "error": [
        "SyntaxError: missing {'first', 'last'} at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc nulls first",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc first",
      "error": [
        "SyntaxError: extraneous input 'first' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc nulls last",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField asc last",
      "error": [
        "SyntaxError: extraneous input 'last' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField nulls first",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField first",
      "error": [
        "SyntaxError: extraneous input 'first' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField nulls last",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField last",
      "error": [
        "SyntaxError: extraneous input 'last' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "row a = 1 | stats COUNT(*) | sort `COUNT(*)`",
      "error": [],
      "warning": []
    },
    {
      "query": "ROW a = 1 | STATS couNt(*) | SORT `couNt(*)`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort abs(doubleField) - to_long(textField) desc nulls first",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | sort sin(textField)",
      "error": [
        "Argument of [sin] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | sort doubleField + textField",
      "error": [
        "Argument of [+] must be [double], found value [textField] type [text]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich",
      "error": [
        "SyntaxError: missing ENRICH_POLICY_NAME at '<EOF>'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _",
      "error": [
        "Unknown policy [_]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _:",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "Unknown policy [_]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _:policy",
      "error": [
        "Unrecognized value [_] for ENRICH, mode needs to be one of [_ANY, _COORDINATOR, _REMOTE]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich :policy",
      "error": [
        "SyntaxError: token recognition error at: ':'"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich any:",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "Unknown policy [any]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _any:",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "Unknown policy [_any]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich any:policy",
      "error": [
        "Unrecognized value [any] for ENRICH, mode needs to be one of [_ANY, _COORDINATOR, _REMOTE]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich `this``is fine`",
      "error": [
        "SyntaxError: extraneous input 'fine`' expecting <EOF>",
        "Unknown policy [`this``is]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich this is fine",
      "error": [
        "SyntaxError: mismatched input 'is' expecting <EOF>",
        "Unknown policy [this]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _any:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _any :  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_any]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _any:  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_any]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _any:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _ANY:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _coordinator:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _coordinator :  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_coordinator]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _coordinator:  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_coordinator]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _coordinator:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _COORDINATOR:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _remote:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _remote :  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_remote]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _remote:  policy ",
      "error": [
        "SyntaxError: token recognition error at: ':'",
        "SyntaxError: extraneous input 'policy' expecting <EOF>",
        "Unknown policy [_remote]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich _remote:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _REMOTE:policy ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich _unknown:policy",
      "error": [
        "Unrecognized value [_unknown] for ENRICH, mode needs to be one of [_ANY, _COORDINATOR, _REMOTE]"
      ],
      "warning": []
    },
    {
      "query": "from a_index |enrich missing-policy ",
      "error": [
        "Unknown policy [missing-policy]"
      ],
      "warning": []
    },
    {
      "query": "from a_index |enrich policy on ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on b ",
      "error": [
        "Unknown column [b]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on `this``is fine`",
      "error": [
        "Unknown column [this`is fine]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on this is fine",
      "error": [
        "SyntaxError: mismatched input 'is' expecting <EOF>",
        "Unknown column [this]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 ",
      "error": [
        "Unknown column [var0]"
      ],
      "warning": []
    },
    {
      "query": "from a_index |enrich policy on doubleField with var0 = ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}",
        "Unknown column [var0]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = c ",
      "error": [
        "Unknown column [var0]",
        "Unknown column [c]"
      ],
      "warning": []
    },
    {
      "query": "from a_index |enrich policy on doubleField with var0 = , ",
      "error": [
        "SyntaxError: mismatched input ',' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}",
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}",
        "Unknown column [var0]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = otherField, var1 ",
      "error": [
        "Unknown column [var1]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = otherField ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = otherField, yetAnotherField ",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index |enrich policy on doubleField with var0 = otherField, var1 = ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}",
        "Unknown column [var1]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = otherField, var1 = yetAnotherField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy on textField with var0 = otherField, `this``is fine` = yetAnotherField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy with ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {'?', NAMED_OR_POSITIONAL_PARAM, ID_PATTERN}"
      ],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy with otherField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy | eval otherField",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich policy with var0 = otherField | eval var0",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | enrich my-pol*",
      "error": [
        "Using wildcards (*) in ENRICH is not allowed [my-pol*]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval textField = 5",
      "error": [],
      "warning": [
        "Column [textField] of type text has been overwritten as new type: integer"
      ]
    },
    {
      "query": "from a_index | eval doubleField = \"5\"",
      "error": [],
      "warning": [
        "Column [doubleField] of type double has been overwritten as new type: keyword"
      ]
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | keep ```round(doubleField) + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | eval ```round(doubleField) + 1`` + 1` + 1 | keep ```````round(doubleField) + 1```` + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | eval ```round(doubleField) + 1`` + 1` + 1 | eval ```````round(doubleField) + 1```` + 1`` + 1` + 1 | keep ```````````````round(doubleField) + 1```````` + 1```` + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval round(doubleField) + 1 | eval `round(doubleField) + 1` + 1 | eval ```round(doubleField) + 1`` + 1` + 1 | eval ```````round(doubleField) + 1```` + 1`` + 1` + 1 | eval ```````````````round(doubleField) + 1```````` + 1```` + 1`` + 1` + 1 | keep ```````````````````````````````round(doubleField) + 1```````````````` + 1```````` + 1```` + 1`` + 1`",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1::keyword",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1::keyword::long::double",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | where 1::string==\"keyword\"",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(\"23\"::double)",
      "error": [
        "Argument of [trim] must be [keyword], found value [\"23\"::double] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(23::keyword)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::long",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::LONG",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::Long",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"::LoNg",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval 1 + \"2\"",
      "error": [
        "Argument of [+] must be [date_period], found value [1] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval trim(to_double(\"23\")::keyword::double::long::keyword::double)",
      "error": [
        "Argument of [trim] must be [keyword], found value [to_double(\"23\")::keyword::double::long::keyword::double] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::long)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::unsigned_long)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::int)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::integer)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::Integer)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::double)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::DOUBLE)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval CEIL(23::doubla)",
      "error": [
        "Argument of [ceil] must be [double], found value [23::doubla] type [doubla]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval TRIM(23::keyword)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval TRIM(23::text)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval TRIM(23::keyword)",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval true AND 0::boolean",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval true AND 0::bool",
      "error": [],
      "warning": []
    },
    {
      "query": "from a_index | eval true AND 0",
      "error": [
        "Argument of [and] must be [boolean], found value [0] type [integer]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(trim(doubleField)::keyword)",
      "error": [
        "Argument of [trim] must be [keyword], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval to_upper(trim(doubleField)::keyword::keyword::keyword::keyword)",
      "error": [
        "Argument of [trim] must be [keyword], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "from a_index | eval to_lower(to_upper(trim(doubleField)::keyword)::keyword)",
      "error": [
        "Argument of [trim] must be [keyword], found value [doubleField] type [double]"
      ],
      "warning": []
    },
    {
      "query": "f",
      "error": [
        "SyntaxError: mismatched input 'f' expecting {'explain', 'from', 'row', 'show'}"
      ],
      "warning": []
    },
    {
      "query": "from ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, UNQUOTED_SOURCE}"
      ],
      "warning": []
    },
    {
      "query": "from index",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM index",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM \"index\"",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM \"\"\"index\"\"\"",
      "error": [],
      "warning": []
    },
    {
      "query": "FrOm index",
      "error": [],
      "warning": []
    },
    {
      "query": "from index, other_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from index, other_index,.secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from ind*, other*",
      "error": [],
      "warning": []
    },
    {
      "query": "from index*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM *a_i*dex*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM in*ex*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM *n*ex",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM *n*ex*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM i*d*x*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM i*d*x",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM i***x*",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM i****",
      "error": [],
      "warning": []
    },
    {
      "query": "FROM i**",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM index**",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM *ex",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM *ex*",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM in*ex",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM ind*ex",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM *,-.*",
      "error": [],
      "warning": []
    },
    {
      "query": "fRoM .secret_index",
      "error": [],
      "warning": []
    },
    {
      "query": "from my-index",
      "error": [],
      "warning": []
    },
    {
      "query": "from index,",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, UNQUOTED_SOURCE}"
      ],
      "warning": []
    },
    {
      "query": "FROM index\n, \tother_index\t,\n \t ",
      "error": [
        "SyntaxError: mismatched input '<EOF>' expecting {QUOTED_STRING, UNQUOTED_SOURCE}"
      ],
      "warning": []
    },
    {
      "query": "from assignment = 1",
      "error": [
        "SyntaxError: mismatched input '=' expecting <EOF>",
        "Unknown index [assignment]"
      ],
      "warning": []
    },
    {
      "query": "FROM `index`",
      "error": [
        "Unknown index [`index`]"
      ],
      "warning": []
    },
    {
      "query": "from assignment = 1",
      "error": [
        "SyntaxError: mismatched input '=' expecting <EOF>",
        "Unknown index [assignment]"
      ],
      "warning": []
    },
    {
      "query": "FROM index, missingIndex",
      "error": [
        "Unknown index [missingIndex]"
      ],
      "warning": []
    },
    {
      "query": "from average()",
      "error": [
        "Unknown index [average()]"
      ],
      "warning": []
    },
    {
      "query": "fRom custom_function()",
      "error": [
        "Unknown index [custom_function()]"
      ],
      "warning": []
    },
    {
      "query": "FROM indexes*",
      "error": [
        "Unknown index [indexes*]"
      ],
      "warning": []
    },
    {
      "query": "from numberField",
      "error": [
        "Unknown index [numberField]"
      ],
      "warning": []
    },
    {
      "query": "FROM policy",
      "error": [
        "Unknown index [policy]"
      ],
      "warning": []
    },
    {
      "query": "from index metadata _id",
      "error": [],
      "warning": []
    },
    {
      "query": "from index metadata _id, \t\n _index\n ",
      "error": [],
      "warning": []
    },
    {
      "query": "from index (metadata _id)",
      "error": [
        "SyntaxError: mismatched input '(metadata' expecting <EOF>"
      ],
      "warning": []
    },
    {
      "query": "from index [METADATA _id]",
      "error": [],
      "warning": []
    },
    {
      "query": "from index [METADATA _id]",
      "error": [],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from index [metadata _id]",
      "error": [],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from index [METADATA _id, _source]",
      "error": [],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from index [METADATA _id, _source2]",
      "error": [
        "Metadata field [_source2] is not available. Available metadata fields are: [_version, _id, _index, _source, _ignored]"
      ],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from index [metadata _id, _source] [METADATA _id2]",
      "error": [
        "SyntaxError: mismatched input '[' expecting <EOF>"
      ],
      "warning": [
        "Square brackets '[]' need to be removed from FROM METADATA declaration"
      ]
    },
    {
      "query": "from index METADATA _id",
      "error": [],
      "warning": []
    },
    {
      "query": "from index METADATA _id",
      "error": [],
      "warning": []
    },
    {
      "query": "from index metadata _id",
      "error": [],
      "warning": []
    },
    {
      "query": "from index METADATA _id, _source",
      "error": [],
      "warning": []
    },
    {
      "query": "from index METADATA _id, _source2",
      "error": [
        "Metadata field [_source2] is not available. Available metadata fields are: [_version, _id, _index, _source, _ignored]"
      ],
      "warning": []
    },
    {
      "query": "from index metadata _id, _source METADATA _id2",
      "error": [
        "SyntaxError: mismatched input 'METADATA' expecting <EOF>"
      ],
      "warning": []
    }
  ]
}