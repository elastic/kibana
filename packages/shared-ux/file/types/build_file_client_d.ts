/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

// eslint-disable-next-line import/no-extraneous-dependencies
import ts from 'typescript';
import path from 'path';
import fs from 'fs';

const fileClientSourceFilePath = path.resolve(
  __dirname,
  '../../../../src/plugins/files/public/types.ts'
);
const destFile = path.resolve(__dirname, './file_client.d.ts');

try {
  fs.unlinkSync(destFile);
} catch (e) {
  // do nothing
}
const program = ts.createProgram([fileClientSourceFilePath], {});
const sourceFile = program.getSourceFile(fileClientSourceFilePath);
const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
const checker = program.getTypeChecker();
const membersToInclude = ['create', 'upload', 'delete', 'getFileKind'];

ts.forEachChild(sourceFile!, (node) => {
  if (!ts.isInterfaceDeclaration(node) || node.name.text !== 'FilesClient') return;
  const methods: ts.PropertySignature[] = [];
  node.members.forEach((m) => {
    if (!membersToInclude.includes(m.name!.getText())) return;
    const type = checker.getTypeAtLocation(m);
    const [signature] = checker.getSignaturesOfType(type, ts.SignatureKind.Call);
    const [param] = signature.getParameters();
    methods.push(
      ts.factory.createPropertySignature(
        m.modifiers,
        m.name!,
        m.questionToken,
        ts.factory.createFunctionTypeNode(
          [],
          param
            ? [
                checker.symbolToParameterDeclaration(
                  param,
                  undefined,
                  ts.NodeBuilderFlags.NoTruncation
                )!,
              ]
            : [],
          checker.typeToTypeNode(
            signature.getReturnType(),
            undefined,
            ts.NodeBuilderFlags.NoTruncation
          )!
        )
      )
    );
  });
  const fsClient = ts.factory.createInterfaceDeclaration(
    undefined,
    undefined,
    node.name.text,
    node.typeParameters,
    undefined,
    methods
  );
  fs.writeFileSync(
    destFile,
    `
/**
 * =========================
 * Please note: this type is generated! do not edit this file manually unless you know what you are doing!
 * =========================
 */
import type { FileJSON, FileKind } from '.';
export ${printer.printNode(ts.EmitHint.Unspecified, fsClient, sourceFile!)}`
  );
});

// eslint-disable-next-line no-console
console.log(`Successfully built client and output to ${destFile}`);
