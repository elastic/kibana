// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<IconButtonGroup /> is rendered 1`] = `
<IconButtonGroup
  buttons={
    Array [
      Object {
        "iconType": "visText",
        "label": "Text",
        "onClick": [MockFunction],
      },
    ]
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  legend="Legend"
>
  <EuiButtonGroup
    buttonSize="m"
    isIconOnly={true}
    legend="Legend"
    onChange={[Function]}
    options={
      Array [
        Object {
          "aria-label": "Text",
          "css": Array [
            Object {
              "&.euiButtonGroupButton": Object {
                "&:first-of-type": Object {
                  "borderBottomLeftRadius": "6px !important",
                  "borderTopLeftRadius": "6px !important",
                },
                "&:last-of-type": Object {
                  "borderBottomRightRadius": "6px !important",
                  "borderTopRightRadius": "6px !important",
                },
                "backgroundColor": "#FFF",
                "border": "1px solid #D3DAE6 !important",
              },
            },
          ],
          "iconType": "visText",
          "id": "generated-id0",
          "label": "Text",
          "onClick": [MockFunction],
          "title": "Text",
        },
      ]
    }
    type="multi"
  >
    <fieldset
      className="euiButtonGroup euiButtonGroup--medium euiButtonGroup--text"
      disabled={false}
    >
      <EuiScreenReaderOnly>
        <legend
          css="unknown styles"
          key="null"
        >
          <Insertion
            cache={
              Object {
                "insert": [Function],
                "inserted": Object {
                  "4rqdyn-euiScreenReaderOnly": true,
                  "iuv015-EuiButtonGroup": true,
                },
                "key": "css",
                "nonce": undefined,
                "registered": Object {
                  "emotion-EuiButtonGroup": "&.euiButtonGroupButton{background-color:#FFF;border:1px solid #D3DAE6 !important;&:first-of-type{border-top-left-radius:6px !important;border-bottom-left-radius:6px !important;}&:last-of-type{border-top-right-radius:6px !important;border-bottom-right-radius:6px !important;}};;label:EuiButtonGroup;",
                },
                "sheet": StyleSheet {
                  "_alreadyInsertedOrderInsensitiveRule": true,
                  "_insertTag": [Function],
                  "before": null,
                  "container": <head>
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-euiScreenReaderOnly{position:absolute;top:auto;left:-10000px;width:1px;height:1px;clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);overflow:hidden;margin:-1px;}
                    </style>
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup{}
                    </style>
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton{background-color:#FFF;border:1px solid #D3DAE6!important;}
                    </style>
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton:first-of-type{border-top-left-radius:6px!important;border-bottom-left-radius:6px!important;}
                    </style>
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton:last-of-type{border-top-right-radius:6px!important;border-bottom-right-radius:6px!important;}
                    </style>
                    <style
                      data-styled="active"
                      data-styled-version="5.1.0"
                    />
                  </head>,
                  "ctr": 5,
                  "insertionPoint": undefined,
                  "isSpeedy": false,
                  "key": "css",
                  "nonce": undefined,
                  "prepend": undefined,
                  "tags": Array [
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-euiScreenReaderOnly{position:absolute;top:auto;left:-10000px;width:1px;height:1px;clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);overflow:hidden;margin:-1px;}
                    </style>,
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup{}
                    </style>,
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton{background-color:#FFF;border:1px solid #D3DAE6!important;}
                    </style>,
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton:first-of-type{border-top-left-radius:6px!important;border-bottom-left-radius:6px!important;}
                    </style>,
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton:last-of-type{border-top-right-radius:6px!important;border-bottom-right-radius:6px!important;}
                    </style>,
                  ],
                },
              }
            }
            isStringTag={true}
            serialized={
              Object {
                "map": undefined,
                "name": "4rqdyn-euiScreenReaderOnly",
                "next": undefined,
                "styles": ";
  // Take the element out of the layout
  position: absolute;
  // Keep it vertically inline
  top: auto;
  // Chrome requires a left value, and Selenium (used by Kibana's FTR) requires an off-screen position for its .getVisibleText() to not register SR-only text
  left: -10000px;
  // The element must have a size (for some screen readers)
  width: 1px;
  height: 1px;
  // But reduce the visible size to nothing
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  // And ensure no overflows occur
  overflow: hidden;
  // Chrome requires the negative margin to not cause overflows of parent containers
  margin: -1px;
;label:euiScreenReaderOnly;;;;",
                "toString": [Function],
              }
            }
          />
          <legend
            className="emotion-euiScreenReaderOnly"
          >
            Legend
          </legend>
        </legend>
      </EuiScreenReaderOnly>
      <div
        className="euiButtonGroup__buttons"
      >
        <EuiButtonGroupButton
          aria-label="Text"
          color="text"
          css="unknown styles"
          element="button"
          iconType="visText"
          id="generated-id0"
          isDisabled={false}
          isIconOnly={true}
          key="0"
          label="Text"
          name="generated-id"
          onChange={[Function]}
          onClick={[MockFunction]}
          size="m"
          title="Text"
        >
          <Insertion
            cache={
              Object {
                "insert": [Function],
                "inserted": Object {
                  "4rqdyn-euiScreenReaderOnly": true,
                  "iuv015-EuiButtonGroup": true,
                },
                "key": "css",
                "nonce": undefined,
                "registered": Object {
                  "emotion-EuiButtonGroup": "&.euiButtonGroupButton{background-color:#FFF;border:1px solid #D3DAE6 !important;&:first-of-type{border-top-left-radius:6px !important;border-bottom-left-radius:6px !important;}&:last-of-type{border-top-right-radius:6px !important;border-bottom-right-radius:6px !important;}};;label:EuiButtonGroup;",
                },
                "sheet": StyleSheet {
                  "_alreadyInsertedOrderInsensitiveRule": true,
                  "_insertTag": [Function],
                  "before": null,
                  "container": <head>
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-euiScreenReaderOnly{position:absolute;top:auto;left:-10000px;width:1px;height:1px;clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);overflow:hidden;margin:-1px;}
                    </style>
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup{}
                    </style>
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton{background-color:#FFF;border:1px solid #D3DAE6!important;}
                    </style>
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton:first-of-type{border-top-left-radius:6px!important;border-bottom-left-radius:6px!important;}
                    </style>
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton:last-of-type{border-top-right-radius:6px!important;border-bottom-right-radius:6px!important;}
                    </style>
                    <style
                      data-styled="active"
                      data-styled-version="5.1.0"
                    />
                  </head>,
                  "ctr": 5,
                  "insertionPoint": undefined,
                  "isSpeedy": false,
                  "key": "css",
                  "nonce": undefined,
                  "prepend": undefined,
                  "tags": Array [
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-euiScreenReaderOnly{position:absolute;top:auto;left:-10000px;width:1px;height:1px;clip:rect(0 0 0 0);-webkit-clip-path:inset(50%);clip-path:inset(50%);overflow:hidden;margin:-1px;}
                    </style>,
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup{}
                    </style>,
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton{background-color:#FFF;border:1px solid #D3DAE6!important;}
                    </style>,
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton:first-of-type{border-top-left-radius:6px!important;border-bottom-left-radius:6px!important;}
                    </style>,
                    <style
                      data-emotion="css"
                      data-s=""
                    >
                      
                      .emotion-EuiButtonGroup.euiButtonGroupButton:last-of-type{border-top-right-radius:6px!important;border-bottom-right-radius:6px!important;}
                    </style>,
                  ],
                },
              }
            }
            isStringTag={false}
            serialized={
              Object {
                "map": undefined,
                "name": "iuv015-EuiButtonGroup",
                "next": undefined,
                "styles": "&.euiButtonGroupButton{background-color:#FFF;border:1px solid #D3DAE6 !important;&:first-of-type{border-top-left-radius:6px !important;border-bottom-left-radius:6px !important;}&:last-of-type{border-top-right-radius:6px !important;border-bottom-right-radius:6px !important;}};;label:EuiButtonGroup;",
                "toString": [Function],
              }
            }
          />
          <EuiButtonGroupButton
            aria-label="Text"
            className="emotion-EuiButtonGroup"
            color="text"
            element="button"
            iconType="visText"
            id="generated-id0"
            isDisabled={false}
            isIconOnly={true}
            label="Text"
            name="generated-id"
            onChange={[Function]}
            onClick={[MockFunction]}
            size="m"
            title="Text"
          >
            <EuiButtonDisplay
              aria-label="Text"
              baseClassName="euiButtonGroupButton"
              className="euiButtonGroupButton-isIconOnly emotion-EuiButtonGroup"
              color="text"
              data-test-subj="generated-id0"
              element="button"
              fill={false}
              iconType="visText"
              id="generated-id"
              isDisabled={false}
              isSelected={false}
              onClick={[MockFunction]}
              size="m"
              textProps={
                Object {
                  "className": "euiScreenReaderOnly",
                  "data-text": "Text",
                  "ref": [Function],
                }
              }
              title="Text"
              type="button"
            >
              <button
                aria-label="Text"
                aria-pressed={false}
                className="euiButtonGroupButton euiButtonGroupButton--text euiButtonGroupButton-isIconOnly emotion-EuiButtonGroup"
                data-test-subj="generated-id0"
                disabled={false}
                id="generated-id"
                onClick={[MockFunction]}
                style={
                  Object {
                    "minWidth": undefined,
                  }
                }
                title="Text"
                type="button"
              >
                <EuiButtonContentDeprecated
                  className="euiButton__content"
                  iconSide="left"
                  iconType="visText"
                  textProps={
                    Object {
                      "className": "euiButton__text euiScreenReaderOnly",
                      "data-text": "Text",
                      "ref": [Function],
                    }
                  }
                >
                  <span
                    className="euiButtonContent euiButton__content"
                  >
                    <EuiIcon
                      className="euiButtonContent__icon"
                      color="inherit"
                      size="m"
                      type="visText"
                    >
                      <span
                        className="euiButtonContent__icon"
                        color="inherit"
                        data-euiicon-type="visText"
                        size="m"
                      />
                    </EuiIcon>
                    <span
                      className="euiButton__text euiScreenReaderOnly"
                      data-text="Text"
                    >
                      Text
                    </span>
                  </span>
                </EuiButtonContentDeprecated>
              </button>
            </EuiButtonDisplay>
          </EuiButtonGroupButton>
        </EuiButtonGroupButton>
      </div>
    </fieldset>
  </EuiButtonGroup>
</IconButtonGroup>
`;
