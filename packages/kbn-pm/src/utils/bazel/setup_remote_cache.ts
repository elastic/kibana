/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import dedent from 'dedent';
import { writeFileSync } from 'fs';
import { resolve } from 'path';
import { spawn } from '../child_process';
import { log } from '../log';
import { isFile, readFile } from '../fs';

async function isElasticCommitter() {
  try {
    const { stdout: email } = await spawn('git', ['config', 'user.email'], {
      stdio: 'pipe',
    });

    return email.trim().endsWith('@elastic.co');
  } catch {
    return false;
  }
}

async function upToDate(settingsPath: string) {
  if (!(await isFile(settingsPath))) {
    return false;
  }

  const readSettingsFile = await readFile(settingsPath, 'utf8');
  return readSettingsFile.startsWith('# V2 ');
}

export async function setupRemoteCache(repoRootPath: string) {
  // The remote cache is only for Elastic employees working locally (CI cache settings are handled elsewhere)
  if (
    process.env.FORCE_BOOTSTRAP_REMOTE_CACHE !== 'true' &&
    (process.env.CI || !(await isElasticCommitter()))
  ) {
    return;
  }

  log.debug(`[bazel_tools] setting up remote cache settings if necessary`);

  const settingsPath = resolve(repoRootPath, '.bazelrc.cache');

  // Checks if we should upgrade or install the config file
  if (await upToDate(settingsPath)) {
    log.debug(`[bazel_tools] remote cache config already exists and is up-to-date, skipping`);
    return;
  }

  const contents = dedent`
    # V2 - This file is automatically generated by 'yarn kbn bootstrap'
    # To regenerate this file, delete it and run 'yarn kbn bootstrap' again.
    build --remote_cache=https://storage.googleapis.com/kibana-local-bazel-remote-cache
    build --noremote_upload_local_results
    build --incompatible_remote_results_ignore_disk
  `;

  writeFileSync(settingsPath, contents);
  log.info(`[bazel_tools] remote cache settings written to ${settingsPath}`);
}
