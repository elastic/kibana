// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FlyoutService FlyoutRef#close() can be called multiple times on the same FlyoutRef 1`] = `
Array [
  Array [
    <div />,
  ],
]
`;

exports[`FlyoutService openFlyout() renders a flyout to the DOM 1`] = `
Array [
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction],
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiFlyout
        onClose={[Function]}
      >
        <MountWrapper
          className="kbnOverlayMountWrapper"
          mount={[Function]}
        />
      </EuiFlyout>
    </KibanaRenderContextProvider>,
    <div />,
  ],
]
`;

exports[`FlyoutService openFlyout() renders a flyout to the DOM 2`] = `"<div data-eui=\\"EuiFlyout\\" role=\\"dialog\\"><button type=\\"button\\" data-test-subj=\\"euiFlyoutCloseButton\\" aria-label=\\"Close this dialog\\"></button><div class=\\"kbnOverlayMountWrapper\\"><span>Flyout content</span></div></div>"`;

exports[`FlyoutService openFlyout() with a currently active flyout replaces the current flyout with a new one 1`] = `
Array [
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiFlyout
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiFlyout>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiFlyout
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiFlyout>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiFlyout
        onClose={[Function]}
      >
        <MountWrapper
          className="kbnOverlayMountWrapper"
          mount={[Function]}
        />
      </EuiFlyout>
    </KibanaRenderContextProvider>,
    <div />,
  ],
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiFlyout
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiFlyout>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiFlyout
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiFlyout>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiFlyout
        onClose={[Function]}
      >
        <MountWrapper
          className="kbnOverlayMountWrapper"
          mount={[Function]}
        />
      </EuiFlyout>
    </KibanaRenderContextProvider>,
    <div />,
  ],
]
`;

exports[`FlyoutService openFlyout() with a currently active flyout replaces the current flyout with a new one 2`] = `"<div data-eui=\\"EuiFlyout\\" role=\\"dialog\\"><button type=\\"button\\" data-test-subj=\\"euiFlyoutCloseButton\\" aria-label=\\"Close this dialog\\"></button><div class=\\"kbnOverlayMountWrapper\\"><span>Flyout content 2</span></div></div>"`;
