// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ModalService ModalRef#close() can be called multiple times on the same ModalRef 1`] = `
Array [
  Array [
    <div />,
  ],
]
`;

exports[`ModalService openConfirm() renders a mountpoint confirm message 1`] = `
Array [
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiConfirmModal
        cancelButtonText="Cancel"
        confirmButtonText="Confirm"
        onCancel={[Function]}
        onConfirm={[Function]}
      >
        <MountWrapper
          className="kbnOverlayMountWrapper"
          mount={[Function]}
        />
      </EuiConfirmModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
]
`;

exports[`ModalService openConfirm() renders a mountpoint confirm message 2`] = `
<div
  data-eui="EuiFocusTrap"
>
  <div
    aria-modal="true"
    class="euiModal euiModal--confirmation emotion-euiModal-defaultMaxWidth-confirmation"
    role="alertdialog"
    tabindex="0"
  >
    <button
      aria-label="Closes this modal window"
      class="euiButtonIcon euiModal__closeIcon emotion-euiButtonIcon-xs-empty-text-euiModal__closeIcon"
      type="button"
    >
      <span
        aria-hidden="true"
        class="euiButtonIcon__icon"
        color="inherit"
        data-euiicon-type="cross"
      />
    </button>
    <div
      class="euiModalBody emotion-euiModalBody"
    >
      <div
        class="euiModalBody__overflow emotion-euiModalBody__overflow"
      >
        <div
          class="euiText emotion-euiText-m"
          data-test-subj="confirmModalBodyText"
        >
          <div
            class="kbnOverlayMountWrapper"
          >
            <span>
              Modal content
            </span>
          </div>
        </div>
      </div>
    </div>
    <div
      class="euiModalFooter emotion-euiModalFooter"
    >
      <button
        class="euiButtonEmpty emotion-euiButtonDisplay-euiButtonEmpty-m-empty-primary"
        data-test-subj="confirmModalCancelButton"
        type="button"
      >
        <span
          class="euiButtonEmpty__content emotion-euiButtonDisplayContent"
        >
          <span
            class="eui-textTruncate euiButtonEmpty__text"
          >
            Cancel
          </span>
        </span>
      </button>
      <button
        class="euiButton emotion-euiButtonDisplay-m-defaultMinWidth-fill-primary"
        data-test-subj="confirmModalConfirmButton"
        type="button"
      >
        <span
          class="emotion-euiButtonDisplayContent"
        >
          <span
            class="eui-textTruncate"
          >
            Confirm
          </span>
        </span>
      </button>
    </div>
  </div>
</div>
`;

exports[`ModalService openConfirm() renders a string confirm message 1`] = `
Array [
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiConfirmModal
        cancelButtonText="Cancel"
        confirmButtonText="Confirm"
        onCancel={[Function]}
        onConfirm={[Function]}
      >
        Some message
      </EuiConfirmModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
]
`;

exports[`ModalService openConfirm() renders a string confirm message 2`] = `
<div
  data-eui="EuiFocusTrap"
>
  <div
    aria-modal="true"
    class="euiModal euiModal--confirmation emotion-euiModal-defaultMaxWidth-confirmation"
    role="alertdialog"
    tabindex="0"
  >
    <button
      aria-label="Closes this modal window"
      class="euiButtonIcon euiModal__closeIcon emotion-euiButtonIcon-xs-empty-text-euiModal__closeIcon"
      type="button"
    >
      <span
        aria-hidden="true"
        class="euiButtonIcon__icon"
        color="inherit"
        data-euiicon-type="cross"
      />
    </button>
    <div
      class="euiModalBody emotion-euiModalBody"
    >
      <div
        class="euiModalBody__overflow emotion-euiModalBody__overflow"
      >
        <div
          class="euiText emotion-euiText-m"
          data-test-subj="confirmModalBodyText"
        >
          <p>
            Some message
          </p>
        </div>
      </div>
    </div>
    <div
      class="euiModalFooter emotion-euiModalFooter"
    >
      <button
        class="euiButtonEmpty emotion-euiButtonDisplay-euiButtonEmpty-m-empty-primary"
        data-test-subj="confirmModalCancelButton"
        type="button"
      >
        <span
          class="euiButtonEmpty__content emotion-euiButtonDisplayContent"
        >
          <span
            class="eui-textTruncate euiButtonEmpty__text"
          >
            Cancel
          </span>
        </span>
      </button>
      <button
        class="euiButton emotion-euiButtonDisplay-m-defaultMinWidth-fill-primary"
        data-test-subj="confirmModalConfirmButton"
        type="button"
      >
        <span
          class="emotion-euiButtonDisplayContent"
        >
          <span
            class="eui-textTruncate"
          >
            Confirm
          </span>
        </span>
      </button>
    </div>
  </div>
</div>
`;

exports[`ModalService openConfirm() with a currently active confirm replaces the current confirm with the new one 1`] = `
Array [
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        Some message
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        Some message
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiConfirmModal
        cancelButtonText="Cancel"
        confirmButtonText="Confirm"
        onCancel={[Function]}
        onConfirm={[Function]}
      >
        confirm 1
      </EuiConfirmModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        Some message
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        Some message
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiConfirmModal
        cancelButtonText="Cancel"
        confirmButtonText="Confirm"
        onCancel={[Function]}
        onConfirm={[Function]}
      >
        some confirm
      </EuiConfirmModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
]
`;

exports[`ModalService openConfirm() with a currently active modal replaces the current modal with the new confirm 1`] = `
Array [
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        Some message
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        Some message
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiModal
        onClose={[Function]}
      >
        <MountWrapper
          className="kbnOverlayMountWrapper"
          mount={[Function]}
        />
      </EuiModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        Some message
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiConfirmModal
                        cancelButtonText="Cancel"
                        confirmButtonText="Confirm"
                        onCancel={[Function]}
                        onConfirm={[Function]}
                      >
                        Some message
                      </EuiConfirmModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiConfirmModal
        cancelButtonText="Cancel"
        confirmButtonText="Confirm"
        onCancel={[Function]}
        onConfirm={[Function]}
      >
        some confirm
      </EuiConfirmModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
]
`;

exports[`ModalService openModal() renders a modal to the DOM 1`] = `
Array [
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction],
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiModal
        onClose={[Function]}
      >
        <MountWrapper
          className="kbnOverlayMountWrapper"
          mount={[Function]}
        />
      </EuiModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
]
`;

exports[`ModalService openModal() renders a modal to the DOM 2`] = `
<div
  data-eui="EuiFocusTrap"
>
  <div
    aria-modal="true"
    class="euiModal emotion-euiModal-defaultMaxWidth"
    role="dialog"
    tabindex="0"
  >
    <button
      aria-label="Closes this modal window"
      class="euiButtonIcon euiModal__closeIcon emotion-euiButtonIcon-xs-empty-text-euiModal__closeIcon"
      type="button"
    >
      <span
        aria-hidden="true"
        class="euiButtonIcon__icon"
        color="inherit"
        data-euiicon-type="cross"
      />
    </button>
    <div
      class="kbnOverlayMountWrapper"
    >
      <span>
        Modal content
      </span>
    </div>
  </div>
</div>
`;

exports[`ModalService openModal() with a currently active confirm replaces the current confirm with the new one 1`] = `
Array [
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiConfirmModal
        cancelButtonText="Cancel"
        confirmButtonText="Confirm"
        onCancel={[Function]}
        onConfirm={[Function]}
      >
        confirm 1
      </EuiConfirmModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiConfirmModal
        cancelButtonText="Cancel"
        confirmButtonText="Confirm"
        onCancel={[Function]}
        onConfirm={[Function]}
      >
        some confirm
      </EuiConfirmModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
]
`;

exports[`ModalService openModal() with a currently active modal replaces the current modal with a new one 1`] = `
Array [
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiModal
        onClose={[Function]}
      >
        <MountWrapper
          className="kbnOverlayMountWrapper"
          mount={[Function]}
        />
      </EuiModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
  Array [
    <KibanaRenderContextProvider
      analytics={
        Object {
          "optIn": [MockFunction],
          "reportEvent": [MockFunction],
          "telemetryCounter$": Subject {
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": Array [],
            "thrownError": null,
          },
        }
      }
      i18n={
        Object {
          "Context": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "children": <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>,
                },
                Object {},
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": <IntlProvider
                  defaultLocale="en"
                  formats={
                    Object {
                      "date": Object {
                        "full": Object {
                          "day": "numeric",
                          "month": "long",
                          "weekday": "long",
                          "year": "numeric",
                        },
                        "long": Object {
                          "day": "numeric",
                          "month": "long",
                          "year": "numeric",
                        },
                        "medium": Object {
                          "day": "numeric",
                          "month": "short",
                          "year": "numeric",
                        },
                        "short": Object {
                          "day": "numeric",
                          "month": "numeric",
                          "year": "2-digit",
                        },
                      },
                      "number": Object {
                        "currency": Object {
                          "style": "currency",
                        },
                        "percent": Object {
                          "style": "percent",
                        },
                      },
                      "relative": Object {
                        "days": Object {
                          "units": "day",
                        },
                        "hours": Object {
                          "units": "hour",
                        },
                        "minutes": Object {
                          "units": "minute",
                        },
                        "months": Object {
                          "units": "month",
                        },
                        "seconds": Object {
                          "units": "second",
                        },
                        "years": Object {
                          "units": "year",
                        },
                      },
                      "time": Object {
                        "full": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "long": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                          "timeZoneName": "short",
                        },
                        "medium": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                          "second": "numeric",
                        },
                        "short": Object {
                          "hour": "numeric",
                          "minute": "numeric",
                        },
                      },
                    }
                  }
                  locale="en"
                  messages={Object {}}
                  textComponent={Symbol(react.fragment)}
                >
                  <KibanaErrorBoundaryProvider
                    analytics={
                      Object {
                        "optIn": [MockFunction],
                        "reportEvent": [MockFunction],
                        "telemetryCounter$": Subject {
                          "closed": false,
                          "currentObservers": null,
                          "hasError": false,
                          "isStopped": false,
                          "observers": Array [],
                          "thrownError": null,
                        },
                      }
                    }
                  >
                    <KibanaErrorBoundary>
                      <EuiModal
                        onClose={[Function]}
                      >
                        <MountWrapper
                          className="kbnOverlayMountWrapper"
                          mount={[Function]}
                        />
                      </EuiModal>
                    </KibanaErrorBoundary>
                  </KibanaErrorBoundaryProvider>
                </IntlProvider>,
              },
            ],
          },
        }
      }
      theme={
        Object {
          "getTheme": [MockFunction],
          "theme$": Observable {
            "_subscribe": [Function],
          },
        }
      }
    >
      <EuiModal
        onClose={[Function]}
      >
        <MountWrapper
          className="kbnOverlayMountWrapper"
          mount={[Function]}
        />
      </EuiModal>
    </KibanaRenderContextProvider>,
    <div />,
  ],
]
`;
