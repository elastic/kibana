/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Find exception list items API endpoint
 *   version: 2023-10-31
 */

import { z } from 'zod';
import { ArrayFromString } from '@kbn/zod-helpers';

import { NonEmptyString } from '@kbn/openapi-common/schemas/primitives.gen';
import {
  ExceptionListHumanId,
  ExceptionNamespaceType,
  ExceptionListItem,
} from '../model/exception_list_common.gen';

export type FindExceptionListItemsFilter = z.infer<typeof FindExceptionListItemsFilter>;
export const FindExceptionListItemsFilter = NonEmptyString;

export type FindExceptionListItemsRequestQuery = z.infer<typeof FindExceptionListItemsRequestQuery>;
export const FindExceptionListItemsRequestQuery = z.object({
  /**
   * List's id
   */
  list_id: ArrayFromString(ExceptionListHumanId),
  /** 
      * Filters the returned results according to the value of the specified field,
using the `<field name>:<field value>` syntax.
 
      */
  filter: ArrayFromString(FindExceptionListItemsFilter).optional().default([]),
  /** 
      * Determines whether the returned containers are Kibana associated with a Kibana space
or available in all spaces (`agnostic` or `single`)
 
      */
  namespace_type: ArrayFromString(ExceptionNamespaceType).optional().default(['single']),
  search: z.string().optional(),
  /**
   * The page number to return
   */
  page: z.coerce.number().int().min(0).optional(),
  /**
   * The number of exception list items to return per page
   */
  per_page: z.coerce.number().int().min(0).optional(),
  /**
   * Determines which field is used to sort the results
   */
  sort_field: NonEmptyString.optional(),
  /**
   * Determines the sort order, which can be `desc` or `asc`
   */
  sort_order: z.enum(['desc', 'asc']).optional(),
});
export type FindExceptionListItemsRequestQueryInput = z.input<
  typeof FindExceptionListItemsRequestQuery
>;

export type FindExceptionListItemsResponse = z.infer<typeof FindExceptionListItemsResponse>;
export const FindExceptionListItemsResponse = z.object({
  data: z.array(ExceptionListItem),
  page: z.number().int().min(1),
  per_page: z.number().int().min(1),
  total: z.number().int().min(0),
  pit: z.string().optional(),
});
