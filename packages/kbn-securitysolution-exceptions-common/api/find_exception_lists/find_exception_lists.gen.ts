/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Find exception lists API endpoint
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';
import { ArrayFromString } from '@kbn/zod-helpers';

import { ExceptionNamespaceType, ExceptionList } from '../model/exception_list_common.gen';

export type FindExceptionListsFilter = z.infer<typeof FindExceptionListsFilter>;
export const FindExceptionListsFilter = z.string();

export type FindExceptionListsRequestQuery = z.infer<typeof FindExceptionListsRequestQuery>;
export const FindExceptionListsRequestQuery = z.object({
  /** 
      * Filters the returned results according to the value of the specified field.

Uses the `so type.field name:field` value syntax, where `so type` can be:

- `exception-list`: Specify a space-aware exception list.
- `exception-list-agnostic`: Specify an exception list that is shared across spaces.
 
      */
  filter: FindExceptionListsFilter.optional(),
  /** 
      * Determines whether the returned containers are Kibana associated with a Kibana space
or available in all spaces (`agnostic` or `single`)
 
      */
  namespace_type: ArrayFromString(ExceptionNamespaceType).optional().default(['single']),
  /**
   * The page number to return
   */
  page: z.coerce.number().int().min(1).optional(),
  /**
   * The number of exception lists to return per page
   */
  per_page: z.coerce.number().int().min(1).optional(),
  /**
   * Determines which field is used to sort the results
   */
  sort_field: z.string().optional(),
  /**
   * Determines the sort order, which can be `desc` or `asc`
   */
  sort_order: z.enum(['desc', 'asc']).optional(),
});
export type FindExceptionListsRequestQueryInput = z.input<typeof FindExceptionListsRequestQuery>;

export type FindExceptionListsResponse = z.infer<typeof FindExceptionListsResponse>;
export const FindExceptionListsResponse = z.object({
  data: z.array(ExceptionList),
  page: z.number().int().min(1),
  per_page: z.number().int().min(1),
  total: z.number().int().min(0),
});
