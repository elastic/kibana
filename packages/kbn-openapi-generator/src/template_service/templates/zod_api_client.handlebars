/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import type { HttpFetchOptions } from '@kbn/core-http-browser';
{{#each context}}
  {{#if requestBody}}
  import type { {{capitalize (camelCase operationId)}}RequestBody } from '{{generatedTypesRelativePath}}';
  {{/if}}
  {{#if requestQuery}}
  import type { {{capitalize (camelCase operationId)}}RequestQuery } from '{{generatedTypesRelativePath}}';
  {{/if}}

import { {{operationId}} } from '{{apiMethodRelativePath}}';
{{/each}}

interface HttpClient {
  fetch<T>(url: string, options: HttpFetchOptions): Promise<T>;
}

export class ApiClient<TClient extends HttpClient> {

  private client: TClient;

  constructor(client: TClient) {
    this.client = client;
  }

  {{#each context}}
 /*
  * {{description}}
  */
  public async {{operationId}}(
  {{#if requestBody}}
  params: {{capitalize (camelCase operationId)}}RequestBody, 
  {{/if}}
  {{#if requestQuery}}
  query: {{capitalize (camelCase operationId)}}RequestQuery,
  {{/if}}
  signal?: AbortSignal
  ) {
    return {{operationId}}(
      this.client,
      {{#if requestBody}}
        params,
      {{/if}}
      {{#if requestQuery}}
      query,
      {{/if}}
      signal
    );
  }

  {{/each}}

}