/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
/* eslint-disable @typescript-eslint/no-duplicate-imports */

{{> disclaimer}}

import { KibanaServices } from '../lib/kibana';
{{#each operations}}
import { 
  {{operationId}}RequestQuery,
  {{operationId}}RequestParams,
  {{operationId}}RequestBody,
  {{operationId}}Response
} from '{{replace sourcePath 'schema.yaml' 'gen'}}';
{{/each}}

{{#each operations}}
{{#if description}}
/*
* {{{description}}}
*/
{{/if}}
export async const {{camelCase operationId}} = (
{{#if requestBody}}
body: {{operationId}}RequestBody, 
{{/if}}
{{#if requestParams}}
params: {{operationId}}RequestParams, 
{{/if}}
{{#if requestQuery}}
query: {{operationId}}RequestQuery,
{{/if}}
signal?: AbortSignal
) => KibanaServices.get().http.fetch<{{operationId}}Response>(
  {{#if requestParams}}
    replaceParams('{{path}}', params)
    {{else}}
    '{{path}}'
  {{/if}},
    {
    {{#if requestBody}}
      body: JSON.stringify(body),
    {{/if}}
    {{#if requestQuery}}
    query,
    {{/if}}
    signal
    }
  );

{{/each}}

/**
 * Replaces placeholders in a path string with provided param value
 *
 * @param path Path string with placeholders for params
 * @param params Object with params to replace
 * @returns Path string with params replaced
 */
function replaceParams(path: string, params: Record<string, string | number>): string {
  let output = path;
  Object.entries(params).forEach(([param, value]) => {
    output = path.replace(`{${param}}`, `${value}`);
  });
  return output;
}