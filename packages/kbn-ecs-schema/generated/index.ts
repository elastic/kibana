import { agentEcs } from './agent';
import { asEcs } from './as';
import { clientEcs } from './client';
import { cloudEcs } from './cloud';
import { code_signatureEcs } from './code_signature';
import { containerEcs } from './container';
import { data_streamEcs } from './data_stream';
import { destinationEcs } from './destination';
import { dllEcs } from './dll';
import { dnsEcs } from './dns';
import { ecsEcs } from './ecs';
import { elfEcs } from './elf';
import { emailEcs } from './email';
import { errorEcs } from './error';
import { eventEcs } from './event';
import { faasEcs } from './faas';
import { fileEcs } from './file';
import { geoEcs } from './geo';
import { groupEcs } from './group';
import { hashEcs } from './hash';
import { hostEcs } from './host';
import { httpEcs } from './http';
import { interfaceEcs } from './interface';
import { logEcs } from './log';
import { networkEcs } from './network';
import { observerEcs } from './observer';
import { orchestratorEcs } from './orchestrator';
import { organizationEcs } from './organization';
import { osEcs } from './os';
import { packageEcs } from './package';
import { peEcs } from './pe';
import { processEcs } from './process';
import { registryEcs } from './registry';
import { relatedEcs } from './related';
import { ruleEcs } from './rule';
import { serverEcs } from './server';
import { serviceEcs } from './service';
import { sourceEcs } from './source';
import { threatEcs } from './threat';
import { tlsEcs } from './tls';
import { tracingEcs } from './tracing';
import { urlEcs } from './url';
import { userEcs } from './user';
import { user_agentEcs } from './user_agent';
import { vlanEcs } from './vlan';
import { vulnerabilityEcs } from './vulnerability';
import { x509Ecs } from './x509';

export const ecsSchema = {
  '@timestamp': {
    dashed_name: 'timestamp',
    description: 'Date/time when the event originated.\n' +
      'This is the date/time extracted from the event, typically representing when the event was generated by the source.\n' +
      'If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.\n' +
      'Required field for all events.',
    example: '2016-05-23T08:05:34.853Z',
    flat_name: '@timestamp',
    level: 'core',
    name: '@timestamp',
    normalize: [],
    required: true,
    short: 'Date/time when the event originated.',
    type: 'date'
  },
  labels: {
    dashed_name: 'labels',
    description: 'Custom key/value pairs.\n' +
      'Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.\n' +
      'Example: `docker` and `k8s` labels.',
    example: '{"application": "foo-bar", "env": "production"}',
    flat_name: 'labels',
    level: 'core',
    name: 'labels',
    normalize: [],
    object_type: 'keyword',
    short: 'Custom key/value pairs.',
    type: 'object'
  },
  message: {
    dashed_name: 'message',
    description: 'For log events the message field contains the log message, optimized for viewing in a log viewer.\n' +
      'For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.\n' +
      'If multiple messages exist, they can be combined into one message.',
    example: 'Hello World',
    flat_name: 'message',
    level: 'core',
    name: 'message',
    normalize: [],
    short: 'Log message optimized for viewing in a log viewer.',
    type: 'match_only_text'
  },
  tags: {
    dashed_name: 'tags',
    description: 'List of keywords used to tag each event.',
    example: '["production", "env2"]',
    flat_name: 'tags',
    ignore_above: 1024,
    level: 'core',
    name: 'tags',
    normalize: [ 'array' ],
    short: 'List of keywords used to tag each event.',
    type: 'keyword'
  },
  agentEcs,
  asEcs,
  clientEcs,
  cloudEcs,
  code_signatureEcs,
  containerEcs,
  data_streamEcs,
  destinationEcs,
  dllEcs,
  dnsEcs,
  ecsEcs,
  elfEcs,
  emailEcs,
  errorEcs,
  eventEcs,
  faasEcs,
  fileEcs,
  geoEcs,
  groupEcs,
  hashEcs,
  hostEcs,
  httpEcs,
  interfaceEcs,
  logEcs,
  networkEcs,
  observerEcs,
  orchestratorEcs,
  organizationEcs,
  osEcs,
  packageEcs,
  peEcs,
  processEcs,
  registryEcs,
  relatedEcs,
  ruleEcs,
  serverEcs,
  serviceEcs,
  sourceEcs,
  threatEcs,
  tlsEcs,
  tracingEcs,
  urlEcs,
  userEcs,
  user_agentEcs,
  vlanEcs,
  vulnerabilityEcs,
  x509Ecs,
};