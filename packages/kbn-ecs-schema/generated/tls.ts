export const tlsEcs = {
  cipher: {
    dashed_name: 'tls-cipher',
    description: 'String indicating the cipher used during the current connection.',
    example: 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
    flat_name: 'tls.cipher',
    ignore_above: 1024,
    level: 'extended',
    name: 'cipher',
    normalize: [],
    short: 'String indicating the cipher used during the current connection.',
    type: 'keyword'
  },
  client: {
    certificate: {
      dashed_name: 'tls-client-certificate',
      description: 'PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.',
      example: 'MII...',
      flat_name: 'tls.client.certificate',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.certificate',
      normalize: [],
      short: 'PEM-encoded stand-alone certificate offered by the client.',
      type: 'keyword'
    },
    certificate_chain: {
      dashed_name: 'tls-client-certificate-chain',
      description: 'Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.',
      example: '["MII...", "MII..."]',
      flat_name: 'tls.client.certificate_chain',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.certificate_chain',
      normalize: [Array],
      short: 'Array of PEM-encoded certificates that make up the certificate chain offered by the client.',
      type: 'keyword'
    },
    hash: { md5: [Object], sha1: [Object], sha256: [Object] },
    issuer: {
      dashed_name: 'tls-client-issuer',
      description: 'Distinguished name of subject of the issuer of the x.509 certificate presented by the client.',
      example: 'CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com',
      flat_name: 'tls.client.issuer',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.issuer',
      normalize: [],
      short: 'Distinguished name of subject of the issuer of the x.509 certificate presented by the client.',
      type: 'keyword'
    },
    ja3: {
      dashed_name: 'tls-client-ja3',
      description: 'A hash that identifies clients based on how they perform an SSL/TLS handshake.',
      example: 'd4e5b18d6b55c71272893221c96ba240',
      flat_name: 'tls.client.ja3',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.ja3',
      normalize: [],
      short: 'A hash that identifies clients based on how they perform an SSL/TLS handshake.',
      type: 'keyword'
    },
    not_after: {
      dashed_name: 'tls-client-not-after',
      description: 'Date/Time indicating when client certificate is no longer considered valid.',
      example: '2021-01-01T00:00:00.000Z',
      flat_name: 'tls.client.not_after',
      level: 'extended',
      name: 'client.not_after',
      normalize: [],
      short: 'Date/Time indicating when client certificate is no longer considered valid.',
      type: 'date'
    },
    not_before: {
      dashed_name: 'tls-client-not-before',
      description: 'Date/Time indicating when client certificate is first considered valid.',
      example: '1970-01-01T00:00:00.000Z',
      flat_name: 'tls.client.not_before',
      level: 'extended',
      name: 'client.not_before',
      normalize: [],
      short: 'Date/Time indicating when client certificate is first considered valid.',
      type: 'date'
    },
    server_name: {
      dashed_name: 'tls-client-server-name',
      description: 'Also called an SNI, this tells the server which hostname to which the client is attempting to connect to. When this value is available, it should get copied to `destination.domain`.',
      example: 'www.elastic.co',
      flat_name: 'tls.client.server_name',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.server_name',
      normalize: [],
      short: 'Hostname the client is trying to connect to. Also called the SNI.',
      type: 'keyword'
    },
    subject: {
      dashed_name: 'tls-client-subject',
      description: 'Distinguished name of subject of the x.509 certificate presented by the client.',
      example: 'CN=myclient, OU=Documentation Team, DC=example, DC=com',
      flat_name: 'tls.client.subject',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.subject',
      normalize: [],
      short: 'Distinguished name of subject of the x.509 certificate presented by the client.',
      type: 'keyword'
    },
    supported_ciphers: {
      dashed_name: 'tls-client-supported-ciphers',
      description: 'Array of ciphers offered by the client during the client hello.',
      example: '["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "..."]',
      flat_name: 'tls.client.supported_ciphers',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.supported_ciphers',
      normalize: [Array],
      short: 'Array of ciphers offered by the client during the client hello.',
      type: 'keyword'
    },
    x509: {
      alternative_names: [Object],
      issuer: [Object],
      not_after: [Object],
      not_before: [Object],
      public_key_algorithm: [Object],
      public_key_curve: [Object],
      public_key_exponent: [Object],
      public_key_size: [Object],
      serial_number: [Object],
      signature_algorithm: [Object],
      subject: [Object],
      version_number: [Object]
    }
  },
  curve: {
    dashed_name: 'tls-curve',
    description: 'String indicating the curve used for the given cipher, when applicable.',
    example: 'secp256r1',
    flat_name: 'tls.curve',
    ignore_above: 1024,
    level: 'extended',
    name: 'curve',
    normalize: [],
    short: 'String indicating the curve used for the given cipher, when applicable.',
    type: 'keyword'
  },
  established: {
    dashed_name: 'tls-established',
    description: 'Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.',
    flat_name: 'tls.established',
    level: 'extended',
    name: 'established',
    normalize: [],
    short: 'Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.',
    type: 'boolean'
  },
  next_protocol: {
    dashed_name: 'tls-next-protocol',
    description: 'String indicating the protocol being tunneled. Per the values in the IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.',
    example: 'http/1.1',
    flat_name: 'tls.next_protocol',
    ignore_above: 1024,
    level: 'extended',
    name: 'next_protocol',
    normalize: [],
    short: 'String indicating the protocol being tunneled.',
    type: 'keyword'
  },
  resumed: {
    dashed_name: 'tls-resumed',
    description: 'Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.',
    flat_name: 'tls.resumed',
    level: 'extended',
    name: 'resumed',
    normalize: [],
    short: 'Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.',
    type: 'boolean'
  },
  server: {
    certificate: {
      dashed_name: 'tls-server-certificate',
      description: 'PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.',
      example: 'MII...',
      flat_name: 'tls.server.certificate',
      ignore_above: 1024,
      level: 'extended',
      name: 'server.certificate',
      normalize: [],
      short: 'PEM-encoded stand-alone certificate offered by the server.',
      type: 'keyword'
    },
    certificate_chain: {
      dashed_name: 'tls-server-certificate-chain',
      description: 'Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.',
      example: '["MII...", "MII..."]',
      flat_name: 'tls.server.certificate_chain',
      ignore_above: 1024,
      level: 'extended',
      name: 'server.certificate_chain',
      normalize: [Array],
      short: 'Array of PEM-encoded certificates that make up the certificate chain offered by the server.',
      type: 'keyword'
    },
    hash: { md5: [Object], sha1: [Object], sha256: [Object] },
    issuer: {
      dashed_name: 'tls-server-issuer',
      description: 'Subject of the issuer of the x.509 certificate presented by the server.',
      example: 'CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com',
      flat_name: 'tls.server.issuer',
      ignore_above: 1024,
      level: 'extended',
      name: 'server.issuer',
      normalize: [],
      short: 'Subject of the issuer of the x.509 certificate presented by the server.',
      type: 'keyword'
    },
    ja3s: {
      dashed_name: 'tls-server-ja3s',
      description: 'A hash that identifies servers based on how they perform an SSL/TLS handshake.',
      example: '394441ab65754e2207b1e1b457b3641d',
      flat_name: 'tls.server.ja3s',
      ignore_above: 1024,
      level: 'extended',
      name: 'server.ja3s',
      normalize: [],
      short: 'A hash that identifies servers based on how they perform an SSL/TLS handshake.',
      type: 'keyword'
    },
    not_after: {
      dashed_name: 'tls-server-not-after',
      description: 'Timestamp indicating when server certificate is no longer considered valid.',
      example: '2021-01-01T00:00:00.000Z',
      flat_name: 'tls.server.not_after',
      level: 'extended',
      name: 'server.not_after',
      normalize: [],
      short: 'Timestamp indicating when server certificate is no longer considered valid.',
      type: 'date'
    },
    not_before: {
      dashed_name: 'tls-server-not-before',
      description: 'Timestamp indicating when server certificate is first considered valid.',
      example: '1970-01-01T00:00:00.000Z',
      flat_name: 'tls.server.not_before',
      level: 'extended',
      name: 'server.not_before',
      normalize: [],
      short: 'Timestamp indicating when server certificate is first considered valid.',
      type: 'date'
    },
    subject: {
      dashed_name: 'tls-server-subject',
      description: 'Subject of the x.509 certificate presented by the server.',
      example: 'CN=www.example.com, OU=Infrastructure Team, DC=example, DC=com',
      flat_name: 'tls.server.subject',
      ignore_above: 1024,
      level: 'extended',
      name: 'server.subject',
      normalize: [],
      short: 'Subject of the x.509 certificate presented by the server.',
      type: 'keyword'
    },
    x509: {
      alternative_names: [Object],
      issuer: [Object],
      not_after: [Object],
      not_before: [Object],
      public_key_algorithm: [Object],
      public_key_curve: [Object],
      public_key_exponent: [Object],
      public_key_size: [Object],
      serial_number: [Object],
      signature_algorithm: [Object],
      subject: [Object],
      version_number: [Object]
    }
  },
  version: {
    dashed_name: 'tls-version',
    description: 'Numeric part of the version parsed from the original string.',
    example: '1.2',
    flat_name: 'tls.version',
    ignore_above: 1024,
    level: 'extended',
    name: 'version',
    normalize: [],
    short: 'Numeric part of the version parsed from the original string.',
    type: 'keyword'
  },
  version_protocol: {
    dashed_name: 'tls-version-protocol',
    description: 'Normalized lowercase protocol name parsed from original string.',
    example: 'tls',
    flat_name: 'tls.version_protocol',
    ignore_above: 1024,
    level: 'extended',
    name: 'version_protocol',
    normalize: [],
    short: 'Normalized lowercase protocol name parsed from original string.',
    type: 'keyword'
  }
}