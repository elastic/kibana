export const tlsEcs = {
  cipher: {
    dashed_name: 'tls-cipher',
    description: 'String indicating the cipher used during the current connection.',
    example: 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
    flat_name: 'tls.cipher',
    ignore_above: 1024,
    level: 'extended',
    name: 'cipher',
    normalize: [],
    short: 'String indicating the cipher used during the current connection.',
    type: 'keyword'
  },
  client: {
    certificate: {
      dashed_name: 'tls-client-certificate',
      description: 'PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of `client.certificate_chain` since this value also exists in that list.',
      example: 'MII...',
      flat_name: 'tls.client.certificate',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.certificate',
      normalize: [],
      short: 'PEM-encoded stand-alone certificate offered by the client.',
      type: 'keyword'
    },
    certificate_chain: {
      dashed_name: 'tls-client-certificate-chain',
      description: 'Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of `client.certificate` since that value should be the first certificate in the chain.',
      example: '["MII...", "MII..."]',
      flat_name: 'tls.client.certificate_chain',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.certificate_chain',
      normalize: [ 'array' ],
      short: 'Array of PEM-encoded certificates that make up the certificate chain offered by the client.',
      type: 'keyword'
    },
    hash: {
      md5: {
        dashed_name: 'tls-client-hash-md5',
        description: 'Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.',
        example: '0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC',
        flat_name: 'tls.client.hash.md5',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.hash.md5',
        normalize: [],
        short: 'Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client.',
        type: 'keyword'
      },
      sha1: {
        dashed_name: 'tls-client-hash-sha1',
        description: 'Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.',
        example: '9E393D93138888D288266C2D915214D1D1CCEB2A',
        flat_name: 'tls.client.hash.sha1',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.hash.sha1',
        normalize: [],
        short: 'Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client.',
        type: 'keyword'
      },
      sha256: {
        dashed_name: 'tls-client-hash-sha256',
        description: 'Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.',
        example: '0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0',
        flat_name: 'tls.client.hash.sha256',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.hash.sha256',
        normalize: [],
        short: 'Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client.',
        type: 'keyword'
      }
    },
    issuer: {
      dashed_name: 'tls-client-issuer',
      description: 'Distinguished name of subject of the issuer of the x.509 certificate presented by the client.',
      example: 'CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com',
      flat_name: 'tls.client.issuer',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.issuer',
      normalize: [],
      short: 'Distinguished name of subject of the issuer of the x.509 certificate presented by the client.',
      type: 'keyword'
    },
    ja3: {
      dashed_name: 'tls-client-ja3',
      description: 'A hash that identifies clients based on how they perform an SSL/TLS handshake.',
      example: 'd4e5b18d6b55c71272893221c96ba240',
      flat_name: 'tls.client.ja3',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.ja3',
      normalize: [],
      short: 'A hash that identifies clients based on how they perform an SSL/TLS handshake.',
      type: 'keyword'
    },
    not_after: {
      dashed_name: 'tls-client-not-after',
      description: 'Date/Time indicating when client certificate is no longer considered valid.',
      example: '2021-01-01T00:00:00.000Z',
      flat_name: 'tls.client.not_after',
      level: 'extended',
      name: 'client.not_after',
      normalize: [],
      short: 'Date/Time indicating when client certificate is no longer considered valid.',
      type: 'date'
    },
    not_before: {
      dashed_name: 'tls-client-not-before',
      description: 'Date/Time indicating when client certificate is first considered valid.',
      example: '1970-01-01T00:00:00.000Z',
      flat_name: 'tls.client.not_before',
      level: 'extended',
      name: 'client.not_before',
      normalize: [],
      short: 'Date/Time indicating when client certificate is first considered valid.',
      type: 'date'
    },
    server_name: {
      dashed_name: 'tls-client-server-name',
      description: 'Also called an SNI, this tells the server which hostname to which the client is attempting to connect to. When this value is available, it should get copied to `destination.domain`.',
      example: 'www.elastic.co',
      flat_name: 'tls.client.server_name',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.server_name',
      normalize: [],
      short: 'Hostname the client is trying to connect to. Also called the SNI.',
      type: 'keyword'
    },
    subject: {
      dashed_name: 'tls-client-subject',
      description: 'Distinguished name of subject of the x.509 certificate presented by the client.',
      example: 'CN=myclient, OU=Documentation Team, DC=example, DC=com',
      flat_name: 'tls.client.subject',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.subject',
      normalize: [],
      short: 'Distinguished name of subject of the x.509 certificate presented by the client.',
      type: 'keyword'
    },
    supported_ciphers: {
      dashed_name: 'tls-client-supported-ciphers',
      description: 'Array of ciphers offered by the client during the client hello.',
      example: '["TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "..."]',
      flat_name: 'tls.client.supported_ciphers',
      ignore_above: 1024,
      level: 'extended',
      name: 'client.supported_ciphers',
      normalize: [ 'array' ],
      short: 'Array of ciphers offered by the client during the client hello.',
      type: 'keyword'
    },
    x509: {
      alternative_names: {
        dashed_name: 'tls-client-x509-alternative-names',
        description: 'List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.',
        example: '*.elastic.co',
        flat_name: 'tls.client.x509.alternative_names',
        ignore_above: 1024,
        level: 'extended',
        name: 'alternative_names',
        normalize: [ 'array' ],
        original_fieldset: 'x509',
        short: 'List of subject alternative names (SAN).',
        type: 'keyword'
      },
      issuer: {
        common_name: {
          dashed_name: 'tls-client-x509-issuer-common-name',
          description: 'List of common name (CN) of issuing certificate authority.',
          example: 'Example SHA2 High Assurance Server CA',
          flat_name: 'tls.client.x509.issuer.common_name',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.common_name',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of common name (CN) of issuing certificate authority.',
          type: 'keyword'
        },
        country: {
          dashed_name: 'tls-client-x509-issuer-country',
          description: 'List of country (C) codes',
          example: 'US',
          flat_name: 'tls.client.x509.issuer.country',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.country',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of country (C) codes',
          type: 'keyword'
        },
        distinguished_name: {
          dashed_name: 'tls-client-x509-issuer-distinguished-name',
          description: 'Distinguished name (DN) of issuing certificate authority.',
          example: 'C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA',
          flat_name: 'tls.client.x509.issuer.distinguished_name',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.distinguished_name',
          normalize: [],
          original_fieldset: 'x509',
          short: 'Distinguished name (DN) of issuing certificate authority.',
          type: 'keyword'
        },
        locality: {
          dashed_name: 'tls-client-x509-issuer-locality',
          description: 'List of locality names (L)',
          example: 'Mountain View',
          flat_name: 'tls.client.x509.issuer.locality',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.locality',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of locality names (L)',
          type: 'keyword'
        },
        organization: {
          dashed_name: 'tls-client-x509-issuer-organization',
          description: 'List of organizations (O) of issuing certificate authority.',
          example: 'Example Inc',
          flat_name: 'tls.client.x509.issuer.organization',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.organization',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of organizations (O) of issuing certificate authority.',
          type: 'keyword'
        },
        organizational_unit: {
          dashed_name: 'tls-client-x509-issuer-organizational-unit',
          description: 'List of organizational units (OU) of issuing certificate authority.',
          example: 'www.example.com',
          flat_name: 'tls.client.x509.issuer.organizational_unit',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.organizational_unit',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of organizational units (OU) of issuing certificate authority.',
          type: 'keyword'
        },
        state_or_province: {
          dashed_name: 'tls-client-x509-issuer-state-or-province',
          description: 'List of state or province names (ST, S, or P)',
          example: 'California',
          flat_name: 'tls.client.x509.issuer.state_or_province',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.state_or_province',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of state or province names (ST, S, or P)',
          type: 'keyword'
        }
      },
      not_after: {
        dashed_name: 'tls-client-x509-not-after',
        description: 'Time at which the certificate is no longer considered valid.',
        example: '2020-07-16T03:15:39Z',
        flat_name: 'tls.client.x509.not_after',
        level: 'extended',
        name: 'not_after',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Time at which the certificate is no longer considered valid.',
        type: 'date'
      },
      not_before: {
        dashed_name: 'tls-client-x509-not-before',
        description: 'Time at which the certificate is first considered valid.',
        example: '2019-08-16T01:40:25Z',
        flat_name: 'tls.client.x509.not_before',
        level: 'extended',
        name: 'not_before',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Time at which the certificate is first considered valid.',
        type: 'date'
      },
      public_key_algorithm: {
        dashed_name: 'tls-client-x509-public-key-algorithm',
        description: 'Algorithm used to generate the public key.',
        example: 'RSA',
        flat_name: 'tls.client.x509.public_key_algorithm',
        ignore_above: 1024,
        level: 'extended',
        name: 'public_key_algorithm',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Algorithm used to generate the public key.',
        type: 'keyword'
      },
      public_key_curve: {
        dashed_name: 'tls-client-x509-public-key-curve',
        description: 'The curve used by the elliptic curve public key algorithm. This is algorithm specific.',
        example: 'nistp521',
        flat_name: 'tls.client.x509.public_key_curve',
        ignore_above: 1024,
        level: 'extended',
        name: 'public_key_curve',
        normalize: [],
        original_fieldset: 'x509',
        short: 'The curve used by the elliptic curve public key algorithm. This is algorithm specific.',
        type: 'keyword'
      },
      public_key_exponent: {
        dashed_name: 'tls-client-x509-public-key-exponent',
        description: 'Exponent used to derive the public key. This is algorithm specific.',
        doc_values: false,
        example: 65537,
        flat_name: 'tls.client.x509.public_key_exponent',
        index: false,
        level: 'extended',
        name: 'public_key_exponent',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Exponent used to derive the public key. This is algorithm specific.',
        type: 'long'
      },
      public_key_size: {
        dashed_name: 'tls-client-x509-public-key-size',
        description: 'The size of the public key space in bits.',
        example: 2048,
        flat_name: 'tls.client.x509.public_key_size',
        level: 'extended',
        name: 'public_key_size',
        normalize: [],
        original_fieldset: 'x509',
        short: 'The size of the public key space in bits.',
        type: 'long'
      },
      serial_number: {
        dashed_name: 'tls-client-x509-serial-number',
        description: 'Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.',
        example: '55FBB9C7DEBF09809D12CCAA',
        flat_name: 'tls.client.x509.serial_number',
        ignore_above: 1024,
        level: 'extended',
        name: 'serial_number',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Unique serial number issued by the certificate authority.',
        type: 'keyword'
      },
      signature_algorithm: {
        dashed_name: 'tls-client-x509-signature-algorithm',
        description: 'Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.',
        example: 'SHA256-RSA',
        flat_name: 'tls.client.x509.signature_algorithm',
        ignore_above: 1024,
        level: 'extended',
        name: 'signature_algorithm',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Identifier for certificate signature algorithm.',
        type: 'keyword'
      },
      subject: {
        common_name: {
          dashed_name: 'tls-client-x509-subject-common-name',
          description: 'List of common names (CN) of subject.',
          example: 'shared.global.example.net',
          flat_name: 'tls.client.x509.subject.common_name',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.common_name',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of common names (CN) of subject.',
          type: 'keyword'
        },
        country: {
          dashed_name: 'tls-client-x509-subject-country',
          description: 'List of country (C) code',
          example: 'US',
          flat_name: 'tls.client.x509.subject.country',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.country',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of country (C) code',
          type: 'keyword'
        },
        distinguished_name: {
          dashed_name: 'tls-client-x509-subject-distinguished-name',
          description: 'Distinguished name (DN) of the certificate subject entity.',
          example: 'C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net',
          flat_name: 'tls.client.x509.subject.distinguished_name',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.distinguished_name',
          normalize: [],
          original_fieldset: 'x509',
          short: 'Distinguished name (DN) of the certificate subject entity.',
          type: 'keyword'
        },
        locality: {
          dashed_name: 'tls-client-x509-subject-locality',
          description: 'List of locality names (L)',
          example: 'San Francisco',
          flat_name: 'tls.client.x509.subject.locality',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.locality',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of locality names (L)',
          type: 'keyword'
        },
        organization: {
          dashed_name: 'tls-client-x509-subject-organization',
          description: 'List of organizations (O) of subject.',
          example: 'Example, Inc.',
          flat_name: 'tls.client.x509.subject.organization',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.organization',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of organizations (O) of subject.',
          type: 'keyword'
        },
        organizational_unit: {
          dashed_name: 'tls-client-x509-subject-organizational-unit',
          description: 'List of organizational units (OU) of subject.',
          flat_name: 'tls.client.x509.subject.organizational_unit',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.organizational_unit',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of organizational units (OU) of subject.',
          type: 'keyword'
        },
        state_or_province: {
          dashed_name: 'tls-client-x509-subject-state-or-province',
          description: 'List of state or province names (ST, S, or P)',
          example: 'California',
          flat_name: 'tls.client.x509.subject.state_or_province',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.state_or_province',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of state or province names (ST, S, or P)',
          type: 'keyword'
        }
      },
      version_number: {
        dashed_name: 'tls-client-x509-version-number',
        description: 'Version of x509 format.',
        example: 3,
        flat_name: 'tls.client.x509.version_number',
        ignore_above: 1024,
        level: 'extended',
        name: 'version_number',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Version of x509 format.',
        type: 'keyword'
      }
    }
  },
  curve: {
    dashed_name: 'tls-curve',
    description: 'String indicating the curve used for the given cipher, when applicable.',
    example: 'secp256r1',
    flat_name: 'tls.curve',
    ignore_above: 1024,
    level: 'extended',
    name: 'curve',
    normalize: [],
    short: 'String indicating the curve used for the given cipher, when applicable.',
    type: 'keyword'
  },
  established: {
    dashed_name: 'tls-established',
    description: 'Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.',
    flat_name: 'tls.established',
    level: 'extended',
    name: 'established',
    normalize: [],
    short: 'Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.',
    type: 'boolean'
  },
  next_protocol: {
    dashed_name: 'tls-next-protocol',
    description: 'String indicating the protocol being tunneled. Per the values in the IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids), this string should be lower case.',
    example: 'http/1.1',
    flat_name: 'tls.next_protocol',
    ignore_above: 1024,
    level: 'extended',
    name: 'next_protocol',
    normalize: [],
    short: 'String indicating the protocol being tunneled.',
    type: 'keyword'
  },
  resumed: {
    dashed_name: 'tls-resumed',
    description: 'Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.',
    flat_name: 'tls.resumed',
    level: 'extended',
    name: 'resumed',
    normalize: [],
    short: 'Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.',
    type: 'boolean'
  },
  server: {
    certificate: {
      dashed_name: 'tls-server-certificate',
      description: 'PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of `server.certificate_chain` since this value also exists in that list.',
      example: 'MII...',
      flat_name: 'tls.server.certificate',
      ignore_above: 1024,
      level: 'extended',
      name: 'server.certificate',
      normalize: [],
      short: 'PEM-encoded stand-alone certificate offered by the server.',
      type: 'keyword'
    },
    certificate_chain: {
      dashed_name: 'tls-server-certificate-chain',
      description: 'Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of `server.certificate` since that value should be the first certificate in the chain.',
      example: '["MII...", "MII..."]',
      flat_name: 'tls.server.certificate_chain',
      ignore_above: 1024,
      level: 'extended',
      name: 'server.certificate_chain',
      normalize: [ 'array' ],
      short: 'Array of PEM-encoded certificates that make up the certificate chain offered by the server.',
      type: 'keyword'
    },
    hash: {
      md5: {
        dashed_name: 'tls-server-hash-md5',
        description: 'Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.',
        example: '0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC',
        flat_name: 'tls.server.hash.md5',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.hash.md5',
        normalize: [],
        short: 'Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server.',
        type: 'keyword'
      },
      sha1: {
        dashed_name: 'tls-server-hash-sha1',
        description: 'Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.',
        example: '9E393D93138888D288266C2D915214D1D1CCEB2A',
        flat_name: 'tls.server.hash.sha1',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.hash.sha1',
        normalize: [],
        short: 'Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server.',
        type: 'keyword'
      },
      sha256: {
        dashed_name: 'tls-server-hash-sha256',
        description: 'Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.',
        example: '0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0',
        flat_name: 'tls.server.hash.sha256',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.hash.sha256',
        normalize: [],
        short: 'Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server.',
        type: 'keyword'
      }
    },
    issuer: {
      dashed_name: 'tls-server-issuer',
      description: 'Subject of the issuer of the x.509 certificate presented by the server.',
      example: 'CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com',
      flat_name: 'tls.server.issuer',
      ignore_above: 1024,
      level: 'extended',
      name: 'server.issuer',
      normalize: [],
      short: 'Subject of the issuer of the x.509 certificate presented by the server.',
      type: 'keyword'
    },
    ja3s: {
      dashed_name: 'tls-server-ja3s',
      description: 'A hash that identifies servers based on how they perform an SSL/TLS handshake.',
      example: '394441ab65754e2207b1e1b457b3641d',
      flat_name: 'tls.server.ja3s',
      ignore_above: 1024,
      level: 'extended',
      name: 'server.ja3s',
      normalize: [],
      short: 'A hash that identifies servers based on how they perform an SSL/TLS handshake.',
      type: 'keyword'
    },
    not_after: {
      dashed_name: 'tls-server-not-after',
      description: 'Timestamp indicating when server certificate is no longer considered valid.',
      example: '2021-01-01T00:00:00.000Z',
      flat_name: 'tls.server.not_after',
      level: 'extended',
      name: 'server.not_after',
      normalize: [],
      short: 'Timestamp indicating when server certificate is no longer considered valid.',
      type: 'date'
    },
    not_before: {
      dashed_name: 'tls-server-not-before',
      description: 'Timestamp indicating when server certificate is first considered valid.',
      example: '1970-01-01T00:00:00.000Z',
      flat_name: 'tls.server.not_before',
      level: 'extended',
      name: 'server.not_before',
      normalize: [],
      short: 'Timestamp indicating when server certificate is first considered valid.',
      type: 'date'
    },
    subject: {
      dashed_name: 'tls-server-subject',
      description: 'Subject of the x.509 certificate presented by the server.',
      example: 'CN=www.example.com, OU=Infrastructure Team, DC=example, DC=com',
      flat_name: 'tls.server.subject',
      ignore_above: 1024,
      level: 'extended',
      name: 'server.subject',
      normalize: [],
      short: 'Subject of the x.509 certificate presented by the server.',
      type: 'keyword'
    },
    x509: {
      alternative_names: {
        dashed_name: 'tls-server-x509-alternative-names',
        description: 'List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.',
        example: '*.elastic.co',
        flat_name: 'tls.server.x509.alternative_names',
        ignore_above: 1024,
        level: 'extended',
        name: 'alternative_names',
        normalize: [ 'array' ],
        original_fieldset: 'x509',
        short: 'List of subject alternative names (SAN).',
        type: 'keyword'
      },
      issuer: {
        common_name: {
          dashed_name: 'tls-server-x509-issuer-common-name',
          description: 'List of common name (CN) of issuing certificate authority.',
          example: 'Example SHA2 High Assurance Server CA',
          flat_name: 'tls.server.x509.issuer.common_name',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.common_name',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of common name (CN) of issuing certificate authority.',
          type: 'keyword'
        },
        country: {
          dashed_name: 'tls-server-x509-issuer-country',
          description: 'List of country (C) codes',
          example: 'US',
          flat_name: 'tls.server.x509.issuer.country',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.country',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of country (C) codes',
          type: 'keyword'
        },
        distinguished_name: {
          dashed_name: 'tls-server-x509-issuer-distinguished-name',
          description: 'Distinguished name (DN) of issuing certificate authority.',
          example: 'C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA',
          flat_name: 'tls.server.x509.issuer.distinguished_name',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.distinguished_name',
          normalize: [],
          original_fieldset: 'x509',
          short: 'Distinguished name (DN) of issuing certificate authority.',
          type: 'keyword'
        },
        locality: {
          dashed_name: 'tls-server-x509-issuer-locality',
          description: 'List of locality names (L)',
          example: 'Mountain View',
          flat_name: 'tls.server.x509.issuer.locality',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.locality',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of locality names (L)',
          type: 'keyword'
        },
        organization: {
          dashed_name: 'tls-server-x509-issuer-organization',
          description: 'List of organizations (O) of issuing certificate authority.',
          example: 'Example Inc',
          flat_name: 'tls.server.x509.issuer.organization',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.organization',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of organizations (O) of issuing certificate authority.',
          type: 'keyword'
        },
        organizational_unit: {
          dashed_name: 'tls-server-x509-issuer-organizational-unit',
          description: 'List of organizational units (OU) of issuing certificate authority.',
          example: 'www.example.com',
          flat_name: 'tls.server.x509.issuer.organizational_unit',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.organizational_unit',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of organizational units (OU) of issuing certificate authority.',
          type: 'keyword'
        },
        state_or_province: {
          dashed_name: 'tls-server-x509-issuer-state-or-province',
          description: 'List of state or province names (ST, S, or P)',
          example: 'California',
          flat_name: 'tls.server.x509.issuer.state_or_province',
          ignore_above: 1024,
          level: 'extended',
          name: 'issuer.state_or_province',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of state or province names (ST, S, or P)',
          type: 'keyword'
        }
      },
      not_after: {
        dashed_name: 'tls-server-x509-not-after',
        description: 'Time at which the certificate is no longer considered valid.',
        example: '2020-07-16T03:15:39Z',
        flat_name: 'tls.server.x509.not_after',
        level: 'extended',
        name: 'not_after',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Time at which the certificate is no longer considered valid.',
        type: 'date'
      },
      not_before: {
        dashed_name: 'tls-server-x509-not-before',
        description: 'Time at which the certificate is first considered valid.',
        example: '2019-08-16T01:40:25Z',
        flat_name: 'tls.server.x509.not_before',
        level: 'extended',
        name: 'not_before',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Time at which the certificate is first considered valid.',
        type: 'date'
      },
      public_key_algorithm: {
        dashed_name: 'tls-server-x509-public-key-algorithm',
        description: 'Algorithm used to generate the public key.',
        example: 'RSA',
        flat_name: 'tls.server.x509.public_key_algorithm',
        ignore_above: 1024,
        level: 'extended',
        name: 'public_key_algorithm',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Algorithm used to generate the public key.',
        type: 'keyword'
      },
      public_key_curve: {
        dashed_name: 'tls-server-x509-public-key-curve',
        description: 'The curve used by the elliptic curve public key algorithm. This is algorithm specific.',
        example: 'nistp521',
        flat_name: 'tls.server.x509.public_key_curve',
        ignore_above: 1024,
        level: 'extended',
        name: 'public_key_curve',
        normalize: [],
        original_fieldset: 'x509',
        short: 'The curve used by the elliptic curve public key algorithm. This is algorithm specific.',
        type: 'keyword'
      },
      public_key_exponent: {
        dashed_name: 'tls-server-x509-public-key-exponent',
        description: 'Exponent used to derive the public key. This is algorithm specific.',
        doc_values: false,
        example: 65537,
        flat_name: 'tls.server.x509.public_key_exponent',
        index: false,
        level: 'extended',
        name: 'public_key_exponent',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Exponent used to derive the public key. This is algorithm specific.',
        type: 'long'
      },
      public_key_size: {
        dashed_name: 'tls-server-x509-public-key-size',
        description: 'The size of the public key space in bits.',
        example: 2048,
        flat_name: 'tls.server.x509.public_key_size',
        level: 'extended',
        name: 'public_key_size',
        normalize: [],
        original_fieldset: 'x509',
        short: 'The size of the public key space in bits.',
        type: 'long'
      },
      serial_number: {
        dashed_name: 'tls-server-x509-serial-number',
        description: 'Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.',
        example: '55FBB9C7DEBF09809D12CCAA',
        flat_name: 'tls.server.x509.serial_number',
        ignore_above: 1024,
        level: 'extended',
        name: 'serial_number',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Unique serial number issued by the certificate authority.',
        type: 'keyword'
      },
      signature_algorithm: {
        dashed_name: 'tls-server-x509-signature-algorithm',
        description: 'Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353.',
        example: 'SHA256-RSA',
        flat_name: 'tls.server.x509.signature_algorithm',
        ignore_above: 1024,
        level: 'extended',
        name: 'signature_algorithm',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Identifier for certificate signature algorithm.',
        type: 'keyword'
      },
      subject: {
        common_name: {
          dashed_name: 'tls-server-x509-subject-common-name',
          description: 'List of common names (CN) of subject.',
          example: 'shared.global.example.net',
          flat_name: 'tls.server.x509.subject.common_name',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.common_name',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of common names (CN) of subject.',
          type: 'keyword'
        },
        country: {
          dashed_name: 'tls-server-x509-subject-country',
          description: 'List of country (C) code',
          example: 'US',
          flat_name: 'tls.server.x509.subject.country',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.country',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of country (C) code',
          type: 'keyword'
        },
        distinguished_name: {
          dashed_name: 'tls-server-x509-subject-distinguished-name',
          description: 'Distinguished name (DN) of the certificate subject entity.',
          example: 'C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net',
          flat_name: 'tls.server.x509.subject.distinguished_name',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.distinguished_name',
          normalize: [],
          original_fieldset: 'x509',
          short: 'Distinguished name (DN) of the certificate subject entity.',
          type: 'keyword'
        },
        locality: {
          dashed_name: 'tls-server-x509-subject-locality',
          description: 'List of locality names (L)',
          example: 'San Francisco',
          flat_name: 'tls.server.x509.subject.locality',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.locality',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of locality names (L)',
          type: 'keyword'
        },
        organization: {
          dashed_name: 'tls-server-x509-subject-organization',
          description: 'List of organizations (O) of subject.',
          example: 'Example, Inc.',
          flat_name: 'tls.server.x509.subject.organization',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.organization',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of organizations (O) of subject.',
          type: 'keyword'
        },
        organizational_unit: {
          dashed_name: 'tls-server-x509-subject-organizational-unit',
          description: 'List of organizational units (OU) of subject.',
          flat_name: 'tls.server.x509.subject.organizational_unit',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.organizational_unit',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of organizational units (OU) of subject.',
          type: 'keyword'
        },
        state_or_province: {
          dashed_name: 'tls-server-x509-subject-state-or-province',
          description: 'List of state or province names (ST, S, or P)',
          example: 'California',
          flat_name: 'tls.server.x509.subject.state_or_province',
          ignore_above: 1024,
          level: 'extended',
          name: 'subject.state_or_province',
          normalize: [ 'array' ],
          original_fieldset: 'x509',
          short: 'List of state or province names (ST, S, or P)',
          type: 'keyword'
        }
      },
      version_number: {
        dashed_name: 'tls-server-x509-version-number',
        description: 'Version of x509 format.',
        example: 3,
        flat_name: 'tls.server.x509.version_number',
        ignore_above: 1024,
        level: 'extended',
        name: 'version_number',
        normalize: [],
        original_fieldset: 'x509',
        short: 'Version of x509 format.',
        type: 'keyword'
      }
    }
  },
  version: {
    dashed_name: 'tls-version',
    description: 'Numeric part of the version parsed from the original string.',
    example: '1.2',
    flat_name: 'tls.version',
    ignore_above: 1024,
    level: 'extended',
    name: 'version',
    normalize: [],
    short: 'Numeric part of the version parsed from the original string.',
    type: 'keyword'
  },
  version_protocol: {
    dashed_name: 'tls-version-protocol',
    description: 'Normalized lowercase protocol name parsed from original string.',
    example: 'tls',
    flat_name: 'tls.version_protocol',
    ignore_above: 1024,
    level: 'extended',
    name: 'version_protocol',
    normalize: [],
    short: 'Normalized lowercase protocol name parsed from original string.',
    type: 'keyword'
  }
}