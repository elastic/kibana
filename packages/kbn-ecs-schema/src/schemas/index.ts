/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/* eslint-disable */
import { agentEcs } from './agent';
import { asEcs } from './as';
import { clientEcs } from './client';
import { cloudEcs } from './cloud';
import { codeSignatureEcs } from './code_signature';
import { containerEcs } from './container';
import { dataStreamEcs } from './data_stream';
import { destinationEcs } from './destination';
import { dllEcs } from './dll';
import { dnsEcs } from './dns';
import { ecsEcs } from './ecs';
import { elfEcs } from './elf';
import { emailEcs } from './email';
import { errorEcs } from './error';
import { eventEcs } from './event';
import { faasEcs } from './faas';
import { fileEcs } from './file';
import { geoEcs } from './geo';
import { groupEcs } from './group';
import { hashEcs } from './hash';
import { hostEcs } from './host';
import { httpEcs } from './http';
import { interfaceEcs } from './interface';
import { logEcs } from './log';
import { networkEcs } from './network';
import { observerEcs } from './observer';
import { orchestratorEcs } from './orchestrator';
import { organizationEcs } from './organization';
import { osEcs } from './os';
import { packageEcs } from './package';
import { peEcs } from './pe';
import { processEcs } from './process';
import { registryEcs } from './registry';
import { relatedEcs } from './related';
import { ruleEcs } from './rule';
import { serverEcs } from './server';
import { serviceEcs } from './service';
import { sourceEcs } from './source';
import { threatEcs } from './threat';
import { tlsEcs } from './tls';
import { urlEcs } from './url';
import { userEcs } from './user';
import { userAgentEcs } from './user_agent';
import { vlanEcs } from './vlan';
import { vulnerabilityEcs } from './vulnerability';
import { x509Ecs } from './x509';

export const ecsSchema = {
  '@timestamp': {
    dashed_name: 'timestamp',
    description: 'Date/time when the event originated.\n' +
      'This is the date/time extracted from the event, typically representing when the event was generated by the source.\n' +
      'If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.\n' +
      'Required field for all events.',
    example: '2016-05-23T08:05:34.853Z',
    flat_name: '@timestamp',
    level: 'core',
    name: '@timestamp',
    normalize: [],
    required: true,
    short: 'Date/time when the event originated.',
    type: 'date'
  },
  labels: {
    dashed_name: 'labels',
    description: 'Custom key/value pairs.\n' +
      'Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.\n' +
      'Example: `docker` and `k8s` labels.',
    example: '{"application": "foo-bar", "env": "production"}',
    flat_name: 'labels',
    level: 'core',
    name: 'labels',
    normalize: [],
    object_type: 'keyword',
    short: 'Custom key/value pairs.',
    type: 'object'
  },
  message: {
    dashed_name: 'message',
    description: 'For log events the message field contains the log message, optimized for viewing in a log viewer.\n' +
      'For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.\n' +
      'If multiple messages exist, they can be combined into one message.',
    example: 'Hello World',
    flat_name: 'message',
    level: 'core',
    name: 'message',
    normalize: [],
    short: 'Log message optimized for viewing in a log viewer.',
    type: 'match_only_text'
  },
  tags: {
    dashed_name: 'tags',
    description: 'List of keywords used to tag each event.',
    example: '["production", "env2"]',
    flat_name: 'tags',
    ignore_above: 1024,
    level: 'core',
    name: 'tags',
    normalize: [ 'array' ],
    short: 'List of keywords used to tag each event.',
    type: 'keyword'
  },
  span: {
    id: {
      dashed_name: 'span-id',
      description: 'Unique identifier of the span within the scope of its trace.\n' +
        'A span represents an operation within a transaction, such as a request to another service, or a database query.',
      example: '3ff9a8981b7ccd5a',
      flat_name: 'span.id',
      ignore_above: 1024,
      level: 'extended',
      name: 'span.id',
      normalize: [],
      short: 'Unique identifier of the span within the scope of its trace.',
      type: 'keyword'
    }
  },
  trace: {
    id: {
      dashed_name: 'trace-id',
      description: 'Unique identifier of the trace.\n' +
        'A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.',
      example: '4bf92f3577b34da6a3ce929d0e0e4736',
      flat_name: 'trace.id',
      ignore_above: 1024,
      level: 'extended',
      name: 'trace.id',
      normalize: [],
      short: 'Unique identifier of the trace.',
      type: 'keyword'
    }
  },
  transaction: {
    id: {
      dashed_name: 'transaction-id',
      description: 'Unique identifier of the transaction within the scope of its trace.\n' +
        'A transaction is the highest level of work measured within a service, such as a request to a server.',
      example: '00f067aa0ba902b7',
      flat_name: 'transaction.id',
      ignore_above: 1024,
      level: 'extended',
      name: 'transaction.id',
      normalize: [],
      short: 'Unique identifier of the transaction within the scope of its trace.',
      type: 'keyword'
    }
  },
  agentEcs: {...agentEcs},
  asEcs: {...asEcs},
  clientEcs: {...clientEcs},
  cloudEcs: {...cloudEcs},
  codeSignatureEcs: {...codeSignatureEcs},
  containerEcs: {...containerEcs},
  dataStreamEcs: {...dataStreamEcs},
  destinationEcs: {...destinationEcs},
  dllEcs: {...dllEcs},
  dnsEcs: {...dnsEcs},
  ecsEcs: {...ecsEcs},
  elfEcs: {...elfEcs},
  emailEcs: {...emailEcs},
  errorEcs: {...errorEcs},
  eventEcs: {...eventEcs},
  faasEcs: {...faasEcs},
  fileEcs: {...fileEcs},
  geoEcs: {...geoEcs},
  groupEcs: {...groupEcs},
  hashEcs: {...hashEcs},
  hostEcs: {...hostEcs},
  httpEcs: {...httpEcs},
  interfaceEcs: {...interfaceEcs},
  logEcs: {...logEcs},
  networkEcs: {...networkEcs},
  observerEcs: {...observerEcs},
  orchestratorEcs: {...orchestratorEcs},
  organizationEcs: {...organizationEcs},
  osEcs: {...osEcs},
  packageEcs: {...packageEcs},
  peEcs: {...peEcs},
  processEcs: {...processEcs},
  registryEcs: {...registryEcs},
  relatedEcs: {...relatedEcs},
  ruleEcs: {...ruleEcs},
  serverEcs: {...serverEcs},
  serviceEcs: {...serviceEcs},
  sourceEcs: {...sourceEcs},
  threatEcs: {...threatEcs},
  tlsEcs: {...tlsEcs},
  urlEcs: {...urlEcs},
  userEcs: {...userEcs},
  userAgentEcs: {...userAgentEcs},
  vlanEcs: {...vlanEcs},
  vulnerabilityEcs: {...vulnerabilityEcs},
  x509Ecs: {...x509Ecs},
};