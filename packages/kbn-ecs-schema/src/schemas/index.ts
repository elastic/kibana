import { agent_ecs } from './agent';
import { as_ecs } from './as';
import { client_ecs } from './client';
import { cloud_ecs } from './cloud';
import { code_signature_ecs } from './code_signature';
import { container_ecs } from './container';
import { data_stream_ecs } from './data_stream';
import { destination_ecs } from './destination';
import { dll_ecs } from './dll';
import { dns_ecs } from './dns';
import { ecs_ecs } from './ecs';
import { elf_ecs } from './elf';
import { email_ecs } from './email';
import { error_ecs } from './error';
import { event_ecs } from './event';
import { faas_ecs } from './faas';
import { file_ecs } from './file';
import { geo_ecs } from './geo';
import { group_ecs } from './group';
import { hash_ecs } from './hash';
import { host_ecs } from './host';
import { http_ecs } from './http';
import { interface_ecs } from './interface';
import { log_ecs } from './log';
import { network_ecs } from './network';
import { observer_ecs } from './observer';
import { orchestrator_ecs } from './orchestrator';
import { organization_ecs } from './organization';
import { os_ecs } from './os';
import { package_ecs } from './package';
import { pe_ecs } from './pe';
import { process_ecs } from './process';
import { registry_ecs } from './registry';
import { related_ecs } from './related';
import { rule_ecs } from './rule';
import { server_ecs } from './server';
import { service_ecs } from './service';
import { source_ecs } from './source';
import { threat_ecs } from './threat';
import { tls_ecs } from './tls';
import { url_ecs } from './url';
import { user_ecs } from './user';
import { user_agent_ecs } from './user_agent';
import { vlan_ecs } from './vlan';
import { vulnerability_ecs } from './vulnerability';
import { x509_ecs } from './x509';

export const ecs_schema = {
  '@timestamp': {
    dashed_name: 'timestamp',
    description: 'Date/time when the event originated.\n' +
      'This is the date/time extracted from the event, typically representing when the event was generated by the source.\n' +
      'If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.\n' +
      'Required field for all events.',
    example: '2016-05-23T08:05:34.853Z',
    flat_name: '@timestamp',
    level: 'core',
    name: '@timestamp',
    normalize: [],
    required: true,
    short: 'Date/time when the event originated.',
    type: 'date'
  },
  labels: {
    dashed_name: 'labels',
    description: 'Custom key/value pairs.\n' +
      'Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword.\n' +
      'Example: `docker` and `k8s` labels.',
    example: '{"application": "foo-bar", "env": "production"}',
    flat_name: 'labels',
    level: 'core',
    name: 'labels',
    normalize: [],
    object_type: 'keyword',
    short: 'Custom key/value pairs.',
    type: 'object'
  },
  message: {
    dashed_name: 'message',
    description: 'For log events the message field contains the log message, optimized for viewing in a log viewer.\n' +
      'For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.\n' +
      'If multiple messages exist, they can be combined into one message.',
    example: 'Hello World',
    flat_name: 'message',
    level: 'core',
    name: 'message',
    normalize: [],
    short: 'Log message optimized for viewing in a log viewer.',
    type: 'match_only_text'
  },
  tags: {
    dashed_name: 'tags',
    description: 'List of keywords used to tag each event.',
    example: '["production", "env2"]',
    flat_name: 'tags',
    ignore_above: 1024,
    level: 'core',
    name: 'tags',
    normalize: [ 'array' ],
    short: 'List of keywords used to tag each event.',
    type: 'keyword'
  },
  span: {
    id: {
      dashed_name: 'span-id',
      description: 'Unique identifier of the span within the scope of its trace.\n' +
        'A span represents an operation within a transaction, such as a request to another service, or a database query.',
      example: '3ff9a8981b7ccd5a',
      flat_name: 'span.id',
      ignore_above: 1024,
      level: 'extended',
      name: 'span.id',
      normalize: [],
      short: 'Unique identifier of the span within the scope of its trace.',
      type: 'keyword'
    }
  },
  trace: {
    id: {
      dashed_name: 'trace-id',
      description: 'Unique identifier of the trace.\n' +
        'A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.',
      example: '4bf92f3577b34da6a3ce929d0e0e4736',
      flat_name: 'trace.id',
      ignore_above: 1024,
      level: 'extended',
      name: 'trace.id',
      normalize: [],
      short: 'Unique identifier of the trace.',
      type: 'keyword'
    }
  },
  transaction: {
    id: {
      dashed_name: 'transaction-id',
      description: 'Unique identifier of the transaction within the scope of its trace.\n' +
        'A transaction is the highest level of work measured within a service, such as a request to a server.',
      example: '00f067aa0ba902b7',
      flat_name: 'transaction.id',
      ignore_above: 1024,
      level: 'extended',
      name: 'transaction.id',
      normalize: [],
      short: 'Unique identifier of the transaction within the scope of its trace.',
      type: 'keyword'
    }
  },
  agent_ecs: {...agent_ecs},
  as_ecs: {...as_ecs},
  client_ecs: {...client_ecs},
  cloud_ecs: {...cloud_ecs},
  code_signature_ecs: {...code_signature_ecs},
  container_ecs: {...container_ecs},
  data_stream_ecs: {...data_stream_ecs},
  destination_ecs: {...destination_ecs},
  dll_ecs: {...dll_ecs},
  dns_ecs: {...dns_ecs},
  ecs_ecs: {...ecs_ecs},
  elf_ecs: {...elf_ecs},
  email_ecs: {...email_ecs},
  error_ecs: {...error_ecs},
  event_ecs: {...event_ecs},
  faas_ecs: {...faas_ecs},
  file_ecs: {...file_ecs},
  geo_ecs: {...geo_ecs},
  group_ecs: {...group_ecs},
  hash_ecs: {...hash_ecs},
  host_ecs: {...host_ecs},
  http_ecs: {...http_ecs},
  interface_ecs: {...interface_ecs},
  log_ecs: {...log_ecs},
  network_ecs: {...network_ecs},
  observer_ecs: {...observer_ecs},
  orchestrator_ecs: {...orchestrator_ecs},
  organization_ecs: {...organization_ecs},
  os_ecs: {...os_ecs},
  package_ecs: {...package_ecs},
  pe_ecs: {...pe_ecs},
  process_ecs: {...process_ecs},
  registry_ecs: {...registry_ecs},
  related_ecs: {...related_ecs},
  rule_ecs: {...rule_ecs},
  server_ecs: {...server_ecs},
  service_ecs: {...service_ecs},
  source_ecs: {...source_ecs},
  threat_ecs: {...threat_ecs},
  tls_ecs: {...tls_ecs},
  url_ecs: {...url_ecs},
  user_ecs: {...user_ecs},
  user_agent_ecs: {...user_agent_ecs},
  vlan_ecs: {...vlan_ecs},
  vulnerability_ecs: {...vulnerability_ecs},
  x509_ecs: {...x509_ecs},
};