/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { Schema } from "../common/types";

describe('printSchema', () => {
  const group: Schema = {
    agent: {
      id: {
        dashed_name: 'agent-id',
        description: 'Unique identifier of this agent (if one exists).\n' +
          'Example: For Beats this would be beat.id.',
        example: '8a4f500d',
        flat_name: 'agent.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        short: 'Unique identifier of this agent.',
        type: 'keyword'
      }
    },
    topLevel: {
      '@timestamp': {
        dashed_name: 'timestamp',
        description: 'Date/time when the event originated.\n' +
          'This is the date/time extracted from the event, typically representing when the event was generated by the source.\n' +
          'If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.\n' +
          'Required field for all events.',
        example: '2016-05-23T08:05:34.853Z',
        flat_name: '@timestamp',
        level: 'core',
        name: '@timestamp',
        normalize: [],
        required: true,
        short: 'Date/time when the event originated.',
        type: 'date'
      }
    }
  };

  test('TBD', () => {
    
  });

});