/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { ComponentProps } from 'react';
import React, { useCallback, useEffect, useState } from 'react';
import type { Filter } from '@kbn/es-query';
import { EuiFlexItem } from '@elastic/eui';
import type { DataViewSpec, DataViewsPublicPluginStart } from '@kbn/data-views-plugin/public';
import { AlertConsumers } from '@kbn/rule-data-utils';
import { HttpStart } from '@kbn/core-http-browser';
import { NotificationsStart } from '@kbn/core-notifications-browser';
import type { Storage } from '@kbn/kibana-utils-plugin/public';
import { useAlertDataView } from '../..';
import { FilterGroupLoading } from './loading';
import { DEFAULT_CONTROLS } from './constants';
import { FilterGroup } from './filter_group';
import { FilterControlConfig } from './types';

export type AlertFilterControlsProps = Omit<
  ComponentProps<typeof FilterGroup>,
  'dataViewId' | 'defaultControls' | 'featureIds' | 'Storage'
> & {
  /**
   * The feature ids used to get the correct alert data view(s)
   */
  featureIds?: AlertConsumers[];
  /**
   * An array of default control configurations
   */
  defaultControls?: FilterControlConfig[];
  /**
   * Specify overrides for the virtual data view created by the filter bar
   * (builds upon the alert data view generated by the feature ids)
   */
  dataViewSpec?: DataViewSpec;
  /**
   * The services needed by the filter bar
   */
  services: {
    http: HttpStart;
    notifications: NotificationsStart;
    dataViews: DataViewsPublicPluginStart;
    storage: typeof Storage;
  };
};

/**
 * A configurable alert filters bar based on the controls embeddable
 *
 * @example
 *
 * <AlertFilterControls
 *   // Data view configuration
 *   featureIds={[AlertConsumers.STACK_ALERTS]}
 *   dataViewSpec={{
 *     id: 'unified-alerts-dv',
 *     title: '.alerts-*',
 *   }}
 *   spaceId={spaceId}
 *   // Controls configuration
 *   controlsUrlState={filterControls}
 *   defaultControls={DEFAULT_CONTROLS}
 *   chainingSystem="HIERARCHICAL"
 *   // Filters state
 *   filters={filters}
 *   onFiltersChange={setFilters}
 *   // Dependencies
 *   ControlGroupRenderer={ControlGroupRenderer}
 *   services={{
 *     http,
 *     notifications,
 *     dataViews,
 *     storage: Storage,
 *   }}
 * />
 */
export const AlertFilterControls = (props: AlertFilterControlsProps) => {
  const {
    featureIds = [AlertConsumers.STACK_ALERTS],
    defaultControls = DEFAULT_CONTROLS,
    dataViewSpec,
    onFiltersChange,
    services: {
      http,
      notifications: { toasts },
      dataViews,
      storage,
    },
    ...restFilterItemGroupProps
  } = props;
  const [loadingPageFilters, setLoadingPageFilters] = useState(true);
  const { dataViews: alertDataViews, loading: loadingDataViews } = useAlertDataView({
    featureIds,
    dataViewsService: dataViews,
    http,
    toasts,
  });

  useEffect(() => {
    if (!loadingDataViews) {
      // If a data view spec is provided, create a new data view
      if (dataViewSpec?.id) {
        (async () => {
          // Creates an adhoc data view starting from the alert data view
          // and applying the overrides specified in the dataViewSpec
          const spec = {
            ...(alertDataViews?.[0] ?? {}),
            ...(dataViewSpec ?? {}),
          } as DataViewSpec;
          await dataViews.create(spec);
          setLoadingPageFilters(false);
        })();
      } else {
        setLoadingPageFilters(false);
      }
    }

    return () => dataViews.clearInstanceCache();
  }, [dataViewSpec, alertDataViews, dataViews, loadingDataViews]);

  const handleFilterChanges = useCallback(
    (newFilters: Filter[]) => {
      if (!onFiltersChange) {
        return;
      }
      const updatedFilters = newFilters.map((filter) => {
        return {
          ...filter,
          meta: {
            ...filter.meta,
            disabled: false,
          },
        };
      });

      onFiltersChange(updatedFilters);
    },
    [onFiltersChange]
  );

  if (loadingPageFilters) {
    return (
      <EuiFlexItem grow={true}>
        <FilterGroupLoading />
      </EuiFlexItem>
    );
  }

  return (
    <FilterGroup
      dataViewId={dataViewSpec?.id || null}
      onFiltersChange={handleFilterChanges}
      featureIds={featureIds}
      {...restFilterItemGroupProps}
      Storage={storage}
      defaultControls={defaultControls}
    />
  );
};
