/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the "Elastic License
 * 2.0", the "GNU Affero General Public License v3.0 only", and the "Server Side
 * Public License v 1"; you may not use this file except in compliance with, at
 * your election, the "Elastic License 2.0", the "GNU Affero General Public
 * License v3.0 only", or the "Server Side Public License, v 1".
 */

import React from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { renderHook } from '@testing-library/react-hooks/dom';
import { waitFor } from '@testing-library/react';
import { httpServiceMock } from '@kbn/core/public/mocks';

import { useLoadRuleTypeAadTemplateField } from './use_load_rule_type_aad_template_fields';

const queryClient = new QueryClient();

const wrapper = ({ children }: { children: React.ReactNode }) => (
  <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
);

const http = httpServiceMock.createStartContract();

describe('useLoadRuleTypeAadTemplateFields', () => {
  beforeEach(() => {
    http.get.mockResolvedValue([
      {
        name: '@timestamp',
        deprecated: false,
        useWithTripleBracesInTemplates: false,
        usesPublicBaseUrl: false,
      },
    ]);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should call API endpoint with the correct parameters', async () => {
    const { result } = renderHook(
      () =>
        useLoadRuleTypeAadTemplateField({
          http,
          ruleTypeId: 'ruleTypeId',
          enabled: true,
        }),
      { wrapper }
    );

    await waitFor(() => {
      return expect(result.current.isInitialLoading).toEqual(false);
    });

    expect(http.get).toHaveBeenLastCalledWith('/internal/rac/alerts/aad_fields', {
      query: { ruleTypeId: 'ruleTypeId' },
    });

    expect(result.current.data).toMatchInlineSnapshot(`
      Array [
        Object {
          "description": "Date/time when the event originated.
      This is the date/time extracted from the event, typically representing when the event was generated by the source.
      If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
      Required field for all events.",
          "name": "@timestamp",
        },
      ]
    `);
  });
});
