// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`guide card snapshots should render use case card component for observability 1`] = `
<UseCaseCard
  description="Get end-to-end observability into your environments by consolidating your logs, metrics, and traces."
  footer={
    <EuiFlexGroup
      justifyContent="center"
    >
      <EuiFlexItem
        grow={false}
      >
        <EuiButton
          data-test-subj="onboarding--guideCard--view--observability"
          fill={true}
          onClick={[Function]}
        >
          View guide
        </EuiButton>
      </EuiFlexItem>
    </EuiFlexGroup>
  }
  http={
    Object {
      "addLoadingCountSource": [MockFunction],
      "anonymousPaths": Object {
        "isAnonymous": [MockFunction],
        "register": [MockFunction],
      },
      "basePath": BasePath {
        "basePath": "",
        "get": [Function],
        "prepend": [Function],
        "publicBaseUrl": undefined,
        "remove": [Function],
        "serverBasePath": "",
      },
      "delete": [MockFunction],
      "externalUrl": Object {
        "isInternalUrl": [MockFunction],
        "validateUrl": [MockFunction],
      },
      "fetch": [MockFunction],
      "get": [MockFunction],
      "getLoadingCount$": [MockFunction],
      "head": [MockFunction],
      "intercept": [MockFunction],
      "options": [MockFunction],
      "patch": [MockFunction],
      "post": [MockFunction],
      "put": [MockFunction],
    }
  }
  title="Monitor my environments"
  uiSettings={
    Object {
      "get": [MockFunction],
      "get$": [MockFunction],
      "getAll": [MockFunction],
      "getUpdate$": [MockFunction],
      "getUpdateErrors$": [MockFunction],
      "isCustom": [MockFunction],
      "isDeclared": [MockFunction],
      "isDefault": [MockFunction],
      "isOverridden": [MockFunction],
      "remove": [MockFunction],
      "set": [MockFunction],
    }
  }
  useCase="observability"
/>
`;

exports[`guide card snapshots should render use case card component for search 1`] = `
<UseCaseCard
  description="Create a finely-tuned search experience for your websites, applications, workplace content, and more."
  footer={
    <EuiFlexGroup
      justifyContent="center"
    >
      <EuiFlexItem
        grow={false}
      >
        <EuiButton
          data-test-subj="onboarding--guideCard--view--search"
          fill={true}
          onClick={[Function]}
        >
          View guide
        </EuiButton>
      </EuiFlexItem>
    </EuiFlexGroup>
  }
  http={
    Object {
      "addLoadingCountSource": [MockFunction],
      "anonymousPaths": Object {
        "isAnonymous": [MockFunction],
        "register": [MockFunction],
      },
      "basePath": BasePath {
        "basePath": "",
        "get": [Function],
        "prepend": [Function],
        "publicBaseUrl": undefined,
        "remove": [Function],
        "serverBasePath": "",
      },
      "delete": [MockFunction],
      "externalUrl": Object {
        "isInternalUrl": [MockFunction],
        "validateUrl": [MockFunction],
      },
      "fetch": [MockFunction],
      "get": [MockFunction],
      "getLoadingCount$": [MockFunction],
      "head": [MockFunction],
      "intercept": [MockFunction],
      "options": [MockFunction],
      "patch": [MockFunction],
      "post": [MockFunction],
      "put": [MockFunction],
    }
  }
  title="Search my data"
  uiSettings={
    Object {
      "get": [MockFunction],
      "get$": [MockFunction],
      "getAll": [MockFunction],
      "getUpdate$": [MockFunction],
      "getUpdateErrors$": [MockFunction],
      "isCustom": [MockFunction],
      "isDeclared": [MockFunction],
      "isDefault": [MockFunction],
      "isOverridden": [MockFunction],
      "remove": [MockFunction],
      "set": [MockFunction],
    }
  }
  useCase="search"
/>
`;

exports[`guide card snapshots should render use case card component for security 1`] = `
<UseCaseCard
  description="Protect your environment against threats by unifying SIEM, endpoint security, and cloud security in one place."
  footer={
    <EuiFlexGroup
      justifyContent="center"
    >
      <EuiFlexItem
        grow={false}
      >
        <EuiButton
          data-test-subj="onboarding--guideCard--view--security"
          fill={true}
          onClick={[Function]}
        >
          View guide
        </EuiButton>
      </EuiFlexItem>
    </EuiFlexGroup>
  }
  http={
    Object {
      "addLoadingCountSource": [MockFunction],
      "anonymousPaths": Object {
        "isAnonymous": [MockFunction],
        "register": [MockFunction],
      },
      "basePath": BasePath {
        "basePath": "",
        "get": [Function],
        "prepend": [Function],
        "publicBaseUrl": undefined,
        "remove": [Function],
        "serverBasePath": "",
      },
      "delete": [MockFunction],
      "externalUrl": Object {
        "isInternalUrl": [MockFunction],
        "validateUrl": [MockFunction],
      },
      "fetch": [MockFunction],
      "get": [MockFunction],
      "getLoadingCount$": [MockFunction],
      "head": [MockFunction],
      "intercept": [MockFunction],
      "options": [MockFunction],
      "patch": [MockFunction],
      "post": [MockFunction],
      "put": [MockFunction],
    }
  }
  title="Protect my environment"
  uiSettings={
    Object {
      "get": [MockFunction],
      "get$": [MockFunction],
      "getAll": [MockFunction],
      "getUpdate$": [MockFunction],
      "getUpdateErrors$": [MockFunction],
      "isCustom": [MockFunction],
      "isDeclared": [MockFunction],
      "isDefault": [MockFunction],
      "isOverridden": [MockFunction],
      "remove": [MockFunction],
      "set": [MockFunction],
    }
  }
  useCase="security"
/>
`;
