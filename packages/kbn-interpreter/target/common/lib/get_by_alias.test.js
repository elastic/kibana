"use strict";

var _get_by_alias = require("./get_by_alias");

/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
describe('getByAlias', function () {
  var fnsObject = {
    foo: {
      name: 'foo',
      aliases: ['f']
    },
    bar: {
      name: 'bar',
      aliases: ['b']
    }
  };
  var fnsArray = [{
    name: 'foo',
    aliases: ['f']
  }, {
    name: 'bar',
    aliases: ['b']
  }];
  it('returns the function by name', function () {
    expect((0, _get_by_alias.getByAlias)(fnsObject, 'foo')).toBe(fnsObject.foo);
    expect((0, _get_by_alias.getByAlias)(fnsObject, 'bar')).toBe(fnsObject.bar);
    expect((0, _get_by_alias.getByAlias)(fnsArray, 'foo')).toBe(fnsArray[0]);
    expect((0, _get_by_alias.getByAlias)(fnsArray, 'bar')).toBe(fnsArray[1]);
  });
  it('returns the function by alias', function () {
    expect((0, _get_by_alias.getByAlias)(fnsObject, 'f')).toBe(fnsObject.foo);
    expect((0, _get_by_alias.getByAlias)(fnsObject, 'b')).toBe(fnsObject.bar);
    expect((0, _get_by_alias.getByAlias)(fnsArray, 'f')).toBe(fnsArray[0]);
    expect((0, _get_by_alias.getByAlias)(fnsArray, 'b')).toBe(fnsArray[1]);
  });
  it('returns the function by case-insensitive name', function () {
    expect((0, _get_by_alias.getByAlias)(fnsObject, 'FOO')).toBe(fnsObject.foo);
    expect((0, _get_by_alias.getByAlias)(fnsObject, 'BAR')).toBe(fnsObject.bar);
    expect((0, _get_by_alias.getByAlias)(fnsArray, 'FOO')).toBe(fnsArray[0]);
    expect((0, _get_by_alias.getByAlias)(fnsArray, 'BAR')).toBe(fnsArray[1]);
  });
  it('returns the function by case-insensitive alias', function () {
    expect((0, _get_by_alias.getByAlias)(fnsObject, 'F')).toBe(fnsObject.foo);
    expect((0, _get_by_alias.getByAlias)(fnsObject, 'B')).toBe(fnsObject.bar);
    expect((0, _get_by_alias.getByAlias)(fnsArray, 'F')).toBe(fnsArray[0]);
    expect((0, _get_by_alias.getByAlias)(fnsArray, 'B')).toBe(fnsArray[1]);
  });
  it('handles empty strings', function () {
    var emptyStringFnsObject = {
      '': {
        name: ''
      }
    };
    var emptyStringAliasFnsObject = {
      foo: {
        name: 'foo',
        aliases: ['']
      }
    };
    expect((0, _get_by_alias.getByAlias)(emptyStringFnsObject, '')).toBe(emptyStringFnsObject['']);
    expect((0, _get_by_alias.getByAlias)(emptyStringAliasFnsObject, '')).toBe(emptyStringAliasFnsObject.foo);
    var emptyStringFnsArray = [{
      name: ''
    }];
    var emptyStringAliasFnsArray = [{
      name: 'foo',
      aliases: ['']
    }];
    expect((0, _get_by_alias.getByAlias)(emptyStringFnsArray, '')).toBe(emptyStringFnsArray[0]);
    expect((0, _get_by_alias.getByAlias)(emptyStringAliasFnsArray, '')).toBe(emptyStringAliasFnsArray[0]);
  });
  it('handles "undefined" strings', function () {
    var undefinedFnsObject = {
      undefined: {
        name: 'undefined'
      }
    };
    var undefinedAliasFnsObject = {
      foo: {
        name: 'undefined',
        aliases: ['undefined']
      }
    };
    expect((0, _get_by_alias.getByAlias)(undefinedFnsObject, 'undefined')).toBe(undefinedFnsObject.undefined);
    expect((0, _get_by_alias.getByAlias)(undefinedAliasFnsObject, 'undefined')).toBe(undefinedAliasFnsObject.foo);
    var emptyStringFnsArray = [{
      name: 'undefined'
    }];
    var emptyStringAliasFnsArray = [{
      name: 'foo',
      aliases: ['undefined']
    }];
    expect((0, _get_by_alias.getByAlias)(emptyStringFnsArray, 'undefined')).toBe(emptyStringFnsArray[0]);
    expect((0, _get_by_alias.getByAlias)(emptyStringAliasFnsArray, 'undefined')).toBe(emptyStringAliasFnsArray[0]);
  });
  it('returns undefined if not found', function () {
    expect((0, _get_by_alias.getByAlias)(fnsObject, 'baz')).toBe(undefined);
    expect((0, _get_by_alias.getByAlias)(fnsArray, 'baz')).toBe(undefined);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,