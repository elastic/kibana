"use strict";

var _ast = require("./ast");

var _get_type = require("./get_type");

/*
 * Licensed to Elasticsearch B.V. under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch B.V. licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
describe('ast fromExpression', function () {
  describe('invalid expression', function () {
    it('throws with invalid expression', function () {
      var check = function check() {
        return (0, _ast.fromExpression)('wat!');
      };

      expect(check).toThrowError(/Unable to parse expression/i);
    });
  });
  describe('zero-item expression', function () {
    it('yields a zero-length chain when empty', function () {
      var expression = '';
      var astObject = (0, _ast.fromExpression)(expression);
      expect(astObject).toHaveProperty('chain');
      expect(astObject.chain).toEqual([]);
    });
  });
  describe('single item expression', function () {
    it('is a chain', function () {
      var expression = 'whatever';
      expect((0, _ast.fromExpression)(expression)).toHaveProperty('chain');
    });
    it('is a value', function () {
      var expression = '"hello"';
      expect((0, _ast.fromExpression)(expression, 'argument')).toBe('hello');
    });
    describe('function without arguments', function () {
      var expression;
      var astObject;
      var block;
      beforeEach(function () {
        expression = 'csv';
        astObject = (0, _ast.fromExpression)(expression);
        block = astObject.chain[0];
      });
      it('is a function ', function () {
        expect((0, _get_type.getType)(block)).toBe('function');
      });
      it('is csv function', function () {
        expect(block.function).toBe('csv');
      });
      it('has no arguments', function () {
        expect(block.arguments).toEqual({});
      });
    });
    describe('with string values', function () {
      var expression;
      var astObject;
      var block;
      beforeEach(function () {
        expression = 'elasticsearch index="logstash-*" oranges=bananas';
        astObject = (0, _ast.fromExpression)(expression);
        block = astObject.chain[0];
      });
      it('has arguemnts properties', function () {
        expect(block.arguments).not.toEqual({});
      });
      it('has index argument with string value', function () {
        expect(block.arguments).toHaveProperty('index');
        expect(block.arguments.index).toEqual(['logstash-*']);
      });
      it('has oranges argument with string value', function () {
        expect(block.arguments).toHaveProperty('oranges');
        expect(block.arguments.oranges).toEqual(['bananas']);
      });
    });
    describe('with function value', function () {
      var expression;
      var astObject;
      var block;
      beforeEach(function () {
        expression = 'it exampleFunction={someFunction q="do something"}';
        astObject = (0, _ast.fromExpression)(expression);
        block = astObject.chain[0];
      });
      it('is expression type', function () {
        expect(block.arguments).toHaveProperty('exampleFunction');
        expect(block.arguments.exampleFunction[0]).toHaveProperty('type');
      });
      it('has expected shape', function () {
        expect(block.arguments.exampleFunction).toEqual([{
          type: 'expression',
          chain: [{
            type: 'function',
            function: 'someFunction',
            arguments: {
              q: ['do something']
            }
          }]
        }]);
      });
    });
    describe('with partial value', function () {
      var expression;
      var astObject;
      var block;
      beforeEach(function () {
        expression = 'it examplePartial=${somePartialFunction q="do something"}';
        astObject = (0, _ast.fromExpression)(expression);
        block = astObject.chain[0];
      });
      it('is expression type', function () {
        expect(block.arguments).toHaveProperty('examplePartial');
        expect(block.arguments.examplePartial[0]).toHaveProperty('type');
      });
      it('has expected shape', function () {
        expect(block.arguments.examplePartial).toEqual([{
          type: 'expression',
          chain: [{
            type: 'function',
            function: 'somePartialFunction',
            arguments: {
              q: ['do something']
            }
          }]
        }]);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,