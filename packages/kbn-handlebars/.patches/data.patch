1,2c1,12
< describe('data', function() {
<   it('passing in data to a compiled function that expects data - works with helpers', function() {
---
> /*
>  * This file is forked from the handlebars project (https://github.com/handlebars-lang/handlebars.js),
>  * and may include modifications made by Elasticsearch B.V.
>  * Elasticsearch B.V. licenses this file to you under the MIT License.
>  * See `packages/kbn-handlebars/LICENSE` for more information.
>  */
> 
> import Handlebars from '../..';
> import { expectTemplate } from '../__jest__/test_bench';
> 
> describe('data', () => {
>   it('passing in data to a compiled function that expects data - works with helpers', () => {
5c15
<       .withHelper('hello', function(options) {
---
>       .withHelper('hello', function (this: any, options) {
10d19
<       .withMessage('Data output by helper')
14c23
<   it('data can be looked up via @foo', function() {
---
>   it('data can be looked up via @foo', () => {
17d25
<       .withMessage('@foo retrieves template data')
21,22c29,31
<   it('deep @foo triggers automatic top-level data', function() {
<     var helpers = Handlebars.createFrame(handlebarsEnv.helpers);
---
>   it('deep @foo triggers automatic top-level data', () => {
>     global.kbnHandlebarsEnv = Handlebars.create();
>     const helpers = Handlebars.createFrame(kbnHandlebarsEnv!.helpers);
24,25c33,34
<     helpers.let = function(options) {
<       var frame = Handlebars.createFrame(options.data);
---
>     helpers.let = function (options: Handlebars.HelperOptions) {
>       const frame = Handlebars.createFrame(options.data);
27c36
<       for (var prop in options.hash) {
---
>       for (const prop in options.hash) {
40d48
<       .withMessage('Automatic data was triggered')
44c52
<   it('parameter data can be looked up via @foo', function() {
---
>   it('parameter data can be looked up via @foo', () => {
47c55
<       .withHelper('hello', function(noun) {
---
>       .withHelper('hello', function (noun) {
50d57
<       .withMessage('@foo as a parameter retrieves template data')
54c61
<   it('hash values can be looked up via @foo', function() {
---
>   it('hash values can be looked up via @foo', () => {
57c64
<       .withHelper('hello', function(options) {
---
>       .withHelper('hello', function (options) {
60d66
<       .withMessage('@foo as a parameter retrieves template data')
64c70
<   it('nested parameter data can be looked up via @foo.bar', function() {
---
>   it('nested parameter data can be looked up via @foo.bar', () => {
67c73
<       .withHelper('hello', function(noun) {
---
>       .withHelper('hello', function (noun) {
70d75
<       .withMessage('@foo as a parameter retrieves template data')
74c79
<   it('nested parameter data does not fail with @world.bar', function() {
---
>   it('nested parameter data does not fail with @world.bar', () => {
77c82
<       .withHelper('hello', function(noun) {
---
>       .withHelper('hello', function (noun) {
80d84
<       .withMessage('@foo as a parameter retrieves template data')
84,87c88,89
<   it('parameter data throws when using complex scope references', function() {
<     expectTemplate(
<       '{{#goodbyes}}{{text}} cruel {{@foo/../name}}! {{/goodbyes}}'
<     ).toThrow(Error);
---
>   it('parameter data throws when using complex scope references', () => {
>     expectTemplate('{{#goodbyes}}{{text}} cruel {{@foo/../name}}! {{/goodbyes}}').toThrow(Error);
90c92
<   it('data can be functions', function() {
---
>   it('data can be functions', () => {
94c96
<           hello: function() {
---
>           hello() {
96,97c98,99
<           }
<         }
---
>           },
>         },
102c104
<   it('data can be functions with params', function() {
---
>   it('data can be functions with params', () => {
106c108
<           hello: function(arg) {
---
>           hello(arg: any) {
108,109c110,111
<           }
<         }
---
>           },
>         },
114c116
<   it('data is inherited downstream', function() {
---
>   it('data is inherited downstream', () => {
120,122c122,124
<       .withHelper('let', function(options) {
<         var frame = Handlebars.createFrame(options.data);
<         for (var prop in options.hash) {
---
>       .withHelper('let', function (this: any, options) {
>         const frame = Handlebars.createFrame(options.data);
>         for (const prop in options.hash) {
130d131
<       .withMessage('data variables are inherited downstream')
134,147c135
<   it('passing in data to a compiled function that expects data - works with helpers in partials', function() {
<     expectTemplate('{{>myPartial}}')
<       .withCompileOptions({ data: true })
<       .withPartial('myPartial', '{{hello}}')
<       .withHelper('hello', function(options) {
<         return options.data.adjective + ' ' + this.noun;
<       })
<       .withInput({ noun: 'cat' })
<       .withRuntimeOptions({ data: { adjective: 'happy' } })
<       .withMessage('Data output by helper inside partial')
<       .toCompileTo('happy cat');
<   });
< 
<   it('passing in data to a compiled function that expects data - works with helpers and parameters', function() {
---
>   it('passing in data to a compiled function that expects data - works with helpers and parameters', () => {
150c138
<       .withHelper('hello', function(noun, options) {
---
>       .withHelper('hello', function (this: any, noun, options) {
155d142
<       .withMessage('Data output by helper')
159c146
<   it('passing in data to a compiled function that expects data - works with block helpers', function() {
---
>   it('passing in data to a compiled function that expects data - works with block helpers', () => {
162c149
<         data: true
---
>         data: true,
164c151
<       .withHelper('hello', function(options) {
---
>       .withHelper('hello', function (this: any, options) {
167c154
<       .withHelper('world', function(options) {
---
>       .withHelper('world', function (this: any, options) {
172d158
<       .withMessage('Data output by helper')
176c162
<   it('passing in data to a compiled function that expects data - works with block helpers that use ..', function() {
---
>   it('passing in data to a compiled function that expects data - works with block helpers that use ..', () => {
179c165
<       .withHelper('hello', function(options) {
---
>       .withHelper('hello', function (options) {
182c168
<       .withHelper('world', function(thing, options) {
---
>       .withHelper('world', function (this: any, thing, options) {
187d172
<       .withMessage('Data output by helper')
191c176
<   it('passing in data to a compiled function that expects data - data is passed to with block helpers where children use ..', function() {
---
>   it('passing in data to a compiled function that expects data - data is passed to with block helpers where children use ..', () => {
194c179
<       .withHelper('hello', function(options) {
---
>       .withHelper('hello', function (options) {
197c182
<       .withHelper('world', function(thing, options) {
---
>       .withHelper('world', function (this: any, thing, options) {
202d186
<       .withMessage('Data output by helper')
206c190
<   it('you can override inherited data when invoking a helper', function() {
---
>   it('you can override inherited data when invoking a helper', () => {
209,213c193,194
<       .withHelper('hello', function(options) {
<         return options.fn(
<           { exclaim: '?', zomg: 'world' },
<           { data: { adjective: 'sad' } }
<         );
---
>       .withHelper('hello', function (options) {
>         return options.fn({ exclaim: '?', zomg: 'world' }, { data: { adjective: 'sad' } });
215c196
<       .withHelper('world', function(thing, options) {
---
>       .withHelper('world', function (this: any, thing, options) {
220d200
<       .withMessage('Overriden data output by helper')
224c204
<   it('you can override inherited data when invoking a helper with depth', function() {
---
>   it('you can override inherited data when invoking a helper with depth', () => {
227c207
<       .withHelper('hello', function(options) {
---
>       .withHelper('hello', function (options) {
230c210
<       .withHelper('world', function(thing, options) {
---
>       .withHelper('world', function (this: any, thing, options) {
235d214
<       .withMessage('Overriden data output by helper')
239,240c218,219
<   describe('@root', function() {
<     it('the root context can be looked up via @root', function() {
---
>   describe('@root', () => {
>     it('the root context can be looked up via @root', () => {
246,248c225
<       expectTemplate('{{@root.foo}}')
<         .withInput({ foo: 'hello' })
<         .toCompileTo('hello');
---
>       expectTemplate('{{@root.foo}}').withInput({ foo: 'hello' }).toCompileTo('hello');
251c228
<     it('passed root values take priority', function() {
---
>     it('passed root values take priority', () => {
259,260c236,237
<   describe('nesting', function() {
<     it('the root context can be looked up via @root', function() {
---
>   describe('nesting', () => {
>     it('the root context can be looked up via @root', () => {
265,266c242,243
<         .withHelper('helper', function(options) {
<           var frame = Handlebars.createFrame(options.data);
---
>         .withHelper('helper', function (this: any, options) {
>           const frame = Handlebars.createFrame(options.data);
272,273c249,250
<             depth: 0
<           }
---
>             depth: 0,
>           },
