1,2c1,16
< describe('helpers', function() {
<   it('helper with complex lookup$', function() {
---
> /*
>  * This file is forked from the handlebars project (https://github.com/handlebars-lang/handlebars.js),
>  * and may include modifications made by Elasticsearch B.V.
>  * Elasticsearch B.V. licenses this file to you under the MIT License.
>  * See `packages/kbn-handlebars/LICENSE` for more information.
>  */
> 
> import Handlebars from '../..';
> import { expectTemplate } from '../__jest__/test_bench';
> 
> beforeEach(() => {
>   global.kbnHandlebarsEnv = Handlebars.create();
> });
> 
> describe('helpers', () => {
>   it('helper with complex lookup$', () => {
6c20
<         goodbyes: [{ text: 'Goodbye', url: 'goodbye' }]
---
>         goodbyes: [{ text: 'Goodbye', url: 'goodbye' }],
8,11c22,23
<       .withHelper('link', function(prefix) {
<         return (
<           '<a href="' + prefix + '/' + this.url + '">' + this.text + '</a>'
<         );
---
>       .withHelper('link', function (this: any, prefix) {
>         return '<a href="' + prefix + '/' + this.url + '">' + this.text + '</a>';
16c28
<   it('helper for raw block gets raw content', function() {
---
>   it('helper for raw block gets raw content', () => {
19c31
<       .withHelper('raw', function(options) {
---
>       .withHelper('raw', function (options) {
22d33
<       .withMessage('raw block helper gets raw content')
26c37
<   it('helper for raw block gets parameters', function() {
---
>   it('helper for raw block gets parameters', () => {
29,30c40,42
<       .withHelper('raw', function(a, b, c, options) {
<         return options.fn() + a + b + c;
---
>       .withHelper('raw', function (a, b, c, options) {
>         const ret = options.fn() + a + b + c;
>         return ret;
32d43
<       .withMessage('raw block helper gets raw content')
36,37c47,48
<   describe('raw block parsing (with identity helper-function)', function() {
<     function runWithIdentityHelper(template, expected) {
---
>   describe('raw block parsing (with identity helper-function)', () => {
>     function runWithIdentityHelper(template: string, expected: string) {
39c50
<         .withHelper('identity', function(options) {
---
>         .withHelper('identity', function (options) {
45c56
<     it('helper for nested raw block gets raw content', function() {
---
>     it('helper for nested raw block gets raw content', () => {
52c63
<     it('helper for nested raw block works with empty content', function() {
---
>     it('helper for nested raw block works with empty content', () => {
56c67
<     xit('helper for nested raw block works if nested raw blocks are broken', function() {
---
>     it.skip('helper for nested raw block works if nested raw blocks are broken', () => {
67c78
<     it('helper for nested raw block closes after first matching close', function() {
---
>     it('helper for nested raw block closes after first matching close', () => {
74,75c85,86
<     it('helper for nested raw block throw exception when with missing closing braces', function() {
<       var string = '{{{{a}}}} {{{{/a';
---
>     it('helper for nested raw block throw exception when with missing closing braces', () => {
>       const string = '{{{{a}}}} {{{{/a';
80c91
<   it('helper block with identical context', function() {
---
>   it('helper block with identical context', () => {
83,86c94,97
<       .withHelper('goodbyes', function(options) {
<         var out = '';
<         var byes = ['Goodbye', 'goodbye', 'GOODBYE'];
<         for (var i = 0, j = byes.length; i < j; i++) {
---
>       .withHelper('goodbyes', function (this: any, options) {
>         let out = '';
>         const byes = ['Goodbye', 'goodbye', 'GOODBYE'];
>         for (let i = 0, j = byes.length; i < j; i++) {
94c105
<   it('helper block with complex lookup expression', function() {
---
>   it('helper block with complex lookup expression', () => {
97,100c108,111
<       .withHelper('goodbyes', function(options) {
<         var out = '';
<         var byes = ['Goodbye', 'goodbye', 'GOODBYE'];
<         for (var i = 0, j = byes.length; i < j; i++) {
---
>       .withHelper('goodbyes', function (options) {
>         let out = '';
>         const byes = ['Goodbye', 'goodbye', 'GOODBYE'];
>         for (let i = 0, j = byes.length; i < j; i++) {
108,111c119,120
<   it('helper with complex lookup and nested template', function() {
<     expectTemplate(
<       '{{#goodbyes}}{{#link ../prefix}}{{text}}{{/link}}{{/goodbyes}}'
<     )
---
>   it('helper with complex lookup and nested template', () => {
>     expectTemplate('{{#goodbyes}}{{#link ../prefix}}{{text}}{{/link}}{{/goodbyes}}')
114c123
<         goodbyes: [{ text: 'Goodbye', url: 'goodbye' }]
---
>         goodbyes: [{ text: 'Goodbye', url: 'goodbye' }],
116,125c125,126
<       .withHelper('link', function(prefix, options) {
<         return (
<           '<a href="' +
<           prefix +
<           '/' +
<           this.url +
<           '">' +
<           options.fn(this) +
<           '</a>'
<         );
---
>       .withHelper('link', function (this: any, prefix, options) {
>         return '<a href="' + prefix + '/' + this.url + '">' + options.fn(this) + '</a>';
130,133c131,132
<   it('helper with complex lookup and nested template in VM+Compiler', function() {
<     expectTemplate(
<       '{{#goodbyes}}{{#link ../prefix}}{{text}}{{/link}}{{/goodbyes}}'
<     )
---
>   it('helper with complex lookup and nested template in VM+Compiler', () => {
>     expectTemplate('{{#goodbyes}}{{#link ../prefix}}{{text}}{{/link}}{{/goodbyes}}')
136c135
<         goodbyes: [{ text: 'Goodbye', url: 'goodbye' }]
---
>         goodbyes: [{ text: 'Goodbye', url: 'goodbye' }],
138,147c137,138
<       .withHelper('link', function(prefix, options) {
<         return (
<           '<a href="' +
<           prefix +
<           '/' +
<           this.url +
<           '">' +
<           options.fn(this) +
<           '</a>'
<         );
---
>       .withHelper('link', function (this: any, prefix, options) {
>         return '<a href="' + prefix + '/' + this.url + '">' + options.fn(this) + '</a>';
152c143
<   it('helper returning undefined value', function() {
---
>   it('helper returning undefined value', () => {
155c146
<         nothere: function() {}
---
>         nothere() {},
161c152
<         nothere: function() {}
---
>         nothere() {},
166c157
<   it('block helper', function() {
---
>   it('block helper', () => {
169c160
<       .withHelper('goodbyes', function(options) {
---
>       .withHelper('goodbyes', function (options) {
172d162
<       .withMessage('Block helper executed')
176c166
<   it('block helper staying in the same context', function() {
---
>   it('block helper staying in the same context', () => {
179c169
<       .withHelper('form', function(options) {
---
>       .withHelper('form', function (this: any, options) {
182d171
<       .withMessage('Block helper executed with current context')
186,187c175,176
<   it('block helper should have context in this', function() {
<     function link(options) {
---
>   it('block helper should have context in this', () => {
>     function link(this: any, options: Handlebars.HelperOptions) {
191,193c180
<     expectTemplate(
<       '<ul>{{#people}}<li>{{#link}}{{name}}{{/link}}</li>{{/people}}</ul>'
<     )
---
>     expectTemplate('<ul>{{#people}}<li>{{#link}}{{name}}{{/link}}</li>{{/people}}</ul>')
197,198c184,185
<           { name: 'Yehuda', id: 2 }
<         ]
---
>           { name: 'Yehuda', id: 2 },
>         ],
206c193
<   it('block helper for undefined value', function() {
---
>   it('block helper for undefined value', () => {
210c197
<   it('block helper passing a new context', function() {
---
>   it('block helper passing a new context', () => {
213c200
<       .withHelper('form', function(context, options) {
---
>       .withHelper('form', function (context, options) {
216d202
<       .withMessage('Context variable resolved')
220c206
<   it('block helper passing a complex path context', function() {
---
>   it('block helper passing a complex path context', () => {
223c209
<       .withHelper('form', function(context, options) {
---
>       .withHelper('form', function (context, options) {
226d211
<       .withMessage('Complex path variable resolved')
230,233c215,216
<   it('nested block helpers', function() {
<     expectTemplate(
<       '{{#form yehuda}}<p>{{name}}</p>{{#link}}Hello{{/link}}{{/form}}'
<     )
---
>   it('nested block helpers', () => {
>     expectTemplate('{{#form yehuda}}<p>{{name}}</p>{{#link}}Hello{{/link}}{{/form}}')
235c218
<         yehuda: { name: 'Yehuda' }
---
>         yehuda: { name: 'Yehuda' },
237c220
<       .withHelper('link', function(options) {
---
>       .withHelper('link', function (this: any, options) {
240c223
<       .withHelper('form', function(context, options) {
---
>       .withHelper('form', function (context, options) {
243d225
<       .withMessage('Both blocks executed')
247,249c229,231
<   it('block helper inverted sections', function() {
<     var string = "{{#list people}}{{name}}{{^}}<em>Nobody's here</em>{{/list}}";
<     function list(context, options) {
---
>   it('block helper inverted sections', () => {
>     const string = "{{#list people}}{{name}}{{^}}<em>Nobody's here</em>{{/list}}";
>     function list(this: any, context: any, options: Handlebars.HelperOptions) {
251,252c233,234
<         var out = '<ul>';
<         for (var i = 0, j = context.length; i < j; i++) {
---
>         let out = '<ul>';
>         for (let i = 0, j = context.length; i < j; i++) {
268,269c250
<       .withHelpers({ list: list })
<       .withMessage('an inverse wrapper is passed in as a new context')
---
>       .withHelpers({ list })
274,275c255
<       .withHelpers({ list: list })
<       .withMessage('an inverse wrapper can be optionally called')
---
>       .withHelpers({ list })
281c261
<         message: "Nobody's here"
---
>         message: "Nobody's here",
283,284c263
<       .withHelpers({ list: list })
<       .withMessage('the context of an inverse is the parent of the block')
---
>       .withHelpers({ list })
288,292c267,269
<   it('pathed lambas with parameters', function() {
<     var hash = {
<       helper: function() {
<         return 'winning';
<       }
---
>   it('pathed lambas with parameters', () => {
>     const hash = {
>       helper: () => 'winning',
293a271
>     // @ts-expect-error
295,298c273,275
<     var helpers = {
<       './helper': function() {
<         return 'fail';
<       }
---
> 
>     const helpers = {
>       './helper': () => 'fail',
301,309c278,279
<     expectTemplate('{{./helper 1}}')
<       .withInput(hash)
<       .withHelpers(helpers)
<       .toCompileTo('winning');
< 
<     expectTemplate('{{hash/helper 1}}')
<       .withInput(hash)
<       .withHelpers(helpers)
<       .toCompileTo('winning');
---
>     expectTemplate('{{./helper 1}}').withInput(hash).withHelpers(helpers).toCompileTo('winning');
>     expectTemplate('{{hash/helper 1}}').withInput(hash).withHelpers(helpers).toCompileTo('winning');
312,313c282,283
<   describe('helpers hash', function() {
<     it('providing a helpers hash', function() {
---
>   describe('helpers hash', () => {
>     it('providing a helpers hash', () => {
317c287
<           world: function() {
---
>           world() {
319c289
<           }
---
>           },
321d290
<         .withMessage('helpers hash is available')
327c296
<           world: function() {
---
>           world() {
329c298
<           }
---
>           },
331d299
<         .withMessage('helpers hash is available inside other blocks')
335c303
<     it('in cases of conflict, helpers win', function() {
---
>     it('in cases of conflict, helpers win', () => {
339c307
<           lookup: function() {
---
>           lookup() {
341c309
<           }
---
>           },
343d310
<         .withMessage('helpers hash has precedence escaped expansion')
349c316
<           lookup: function() {
---
>           lookup() {
351c318
<           }
---
>           },
353d319
<         .withMessage('helpers hash has precedence simple expansion')
357c323
<     it('the helpers hash is available is nested contexts', function() {
---
>     it('the helpers hash is available is nested contexts', () => {
361c327
<           helper: function() {
---
>           helper() {
363c329
<           }
---
>           },
365d330
<         .withMessage('helpers hash is available in nested contexts.')
369,370c334,335
<     it('the helper hash should augment the global hash', function() {
<       handlebarsEnv.registerHelper('test_helper', function() {
---
>     it('the helper hash should augment the global hash', () => {
>       kbnHandlebarsEnv!.registerHelper('test_helper', function () {
374,376c339
<       expectTemplate(
<         '{{test_helper}} {{#if cruel}}Goodbye {{cruel}} {{world}}!{{/if}}'
<       )
---
>       expectTemplate('{{test_helper}} {{#if cruel}}Goodbye {{cruel}} {{world}}!{{/if}}')
379c342
<           world: function() {
---
>           world() {
381c344
<           }
---
>           },
387,389c350,352
<   describe('registration', function() {
<     it('unregisters', function() {
<       handlebarsEnv.helpers = {};
---
>   describe('registration', () => {
>     it('unregisters', () => {
>       deleteAllKeys(kbnHandlebarsEnv!.helpers);
391c354
<       handlebarsEnv.registerHelper('foo', function() {
---
>       kbnHandlebarsEnv!.registerHelper('foo', function () {
394,395c357,359
<       handlebarsEnv.unregisterHelper('foo');
<       equals(handlebarsEnv.helpers.foo, undefined);
---
>       expect(kbnHandlebarsEnv!.helpers.foo).toBeDefined();
>       kbnHandlebarsEnv!.unregisterHelper('foo');
>       expect(kbnHandlebarsEnv!.helpers.foo).toBeUndefined();
398,404c362,368
<     it('allows multiple globals', function() {
<       var helpers = handlebarsEnv.helpers;
<       handlebarsEnv.helpers = {};
< 
<       handlebarsEnv.registerHelper({
<         if: helpers['if'],
<         world: function() {
---
>     it('allows multiple globals', () => {
>       const ifHelper = kbnHandlebarsEnv!.helpers.if;
>       deleteAllKeys(kbnHandlebarsEnv!.helpers);
> 
>       kbnHandlebarsEnv!.registerHelper({
>         if: ifHelper,
>         world() {
407c371
<         testHelper: function() {
---
>         testHelper() {
409c373
<         }
---
>         },
412,414c376
<       expectTemplate(
<         '{{testHelper}} {{#if cruel}}Goodbye {{cruel}} {{world}}!{{/if}}'
<       )
---
>       expectTemplate('{{testHelper}} {{#if cruel}}Goodbye {{cruel}} {{world}}!{{/if}}')
419,429c381,387
<     it('fails with multiple and args', function() {
<       shouldThrow(
<         function() {
<           handlebarsEnv.registerHelper(
<             {
<               world: function() {
<                 return 'world!';
<               },
<               testHelper: function() {
<                 return 'found it!';
<               }
---
>     it('fails with multiple and args', () => {
>       expect(() => {
>         kbnHandlebarsEnv!.registerHelper(
>           // @ts-expect-error TypeScript is complaining about the invalid input just as the thrown error
>           {
>             world() {
>               return 'world!';
431,436c389,395
<             {}
<           );
<         },
<         Error,
<         'Arg not supported with multiple helpers'
<       );
---
>             testHelper() {
>               return 'found it!';
>             },
>           },
>           {}
>         );
>       }).toThrow('Arg not supported with multiple helpers');
440c399
<   it('decimal number literals work', function() {
---
>   it('decimal number literals work', () => {
442c401
<       .withHelper('hello', function(times, times2) {
---
>       .withHelper('hello', function (times, times2) {
451d409
<       .withMessage('template with a negative integer literal')
455c413
<   it('negative number literals work', function() {
---
>   it('negative number literals work', () => {
457c415
<       .withHelper('hello', function(times) {
---
>       .withHelper('hello', function (times) {
463d420
<       .withMessage('template with a negative integer literal')
467,468c424,425
<   describe('String literal parameters', function() {
<     it('simple literals work', function() {
---
>   describe('String literal parameters', () => {
>     it('simple literals work', () => {
470c427
<         .withHelper('hello', function(param, times, bool1, bool2) {
---
>         .withHelper('hello', function (param, times, bool1, bool2) {
480,482c437
<           return (
<             'Hello ' + param + ' ' + times + ' times: ' + bool1 + ' ' + bool2
<           );
---
>           return 'Hello ' + param + ' ' + times + ' times: ' + bool1 + ' ' + bool2;
484d438
<         .withMessage('template with a simple String literal')
488c442
<     it('using a quote in the middle of a parameter raises an error', function() {
---
>     it('using a quote in the middle of a parameter raises an error', () => {
492c446
<     it('escaping a String is possible', function() {
---
>     it('escaping a String is possible', () => {
494c448
<         .withHelper('hello', function(param) {
---
>         .withHelper('hello', function (param) {
497d450
<         .withMessage('template with an escaped String literal')
501c454
<     it("it works with ' marks", function() {
---
>     it("it works with ' marks", () => {
503c456
<         .withHelper('hello', function(param) {
---
>         .withHelper('hello', function (param) {
506d458
<         .withMessage("template with a ' mark")
511,524c463,464
<   it('negative number literals work', function() {
<     expectTemplate('Message: {{hello -12}}')
<       .withHelper('hello', function(times) {
<         if (typeof times !== 'number') {
<           times = 'NaN';
<         }
<         return 'Hello ' + times + ' times';
<       })
<       .withMessage('template with a negative integer literal')
<       .toCompileTo('Message: Hello -12 times');
<   });
< 
<   describe('multiple parameters', function() {
<     it('simple multi-params work', function() {
---
>   describe('multiple parameters', () => {
>     it('simple multi-params work', () => {
527c467
<         .withHelper('goodbye', function(cruel, world) {
---
>         .withHelper('goodbye', function (cruel, world) {
530d469
<         .withMessage('regular helpers with multiple params')
534,537c473,474
<     it('block multi-params work', function() {
<       expectTemplate(
<         'Message: {{#goodbye cruel world}}{{greeting}} {{adj}} {{noun}}{{/goodbye}}'
<       )
---
>     it('block multi-params work', () => {
>       expectTemplate('Message: {{#goodbye cruel world}}{{greeting}} {{adj}} {{noun}}{{/goodbye}}')
539c476
<         .withHelper('goodbye', function(cruel, world, options) {
---
>         .withHelper('goodbye', function (cruel, world, options) {
542d478
<         .withMessage('block helpers with multiple params')
547,548c483,484
<   describe('hash', function() {
<     it('helpers can take an optional hash', function() {
---
>   describe('hash', () => {
>     it('helpers can take an optional hash', () => {
550c486
<         .withHelper('goodbye', function(options) {
---
>         .withHelper('goodbye', function (options) {
561d496
<         .withMessage('Helper output hash')
565,566c500,501
<     it('helpers can take an optional hash with booleans', function() {
<       function goodbye(options) {
---
>     it('helpers can take an optional hash with booleans', () => {
>       function goodbye(options: Handlebars.HelperOptions) {
578d512
<         .withMessage('Helper output hash')
583d516
<         .withMessage('Boolean helper parameter honored')
587c520
<     it('block helpers can take an optional hash', function() {
---
>     it('block helpers can take an optional hash', () => {
589c522
<         .withHelper('goodbye', function(options) {
---
>         .withHelper('goodbye', function (this: any, options) {
600d532
<         .withMessage('Hash parameters output')
604c536
<     it('block helpers can take an optional hash with single quoted stings', function() {
---
>     it('block helpers can take an optional hash with single quoted stings', () => {
606c538
<         .withHelper('goodbye', function(options) {
---
>         .withHelper('goodbye', function (this: any, options) {
617d548
<         .withMessage('Hash parameters output')
621,622c552,553
<     it('block helpers can take an optional hash with booleans', function() {
<       function goodbye(options) {
---
>     it('block helpers can take an optional hash with booleans', () => {
>       function goodbye(this: any, options: Handlebars.HelperOptions) {
634d564
<         .withMessage('Boolean hash parameter honored')
639d568
<         .withMessage('Boolean hash parameter honored')
644,648c573,575
<   describe('helperMissing', function() {
<     it('if a context is not found, helperMissing is used', function() {
<       expectTemplate('{{hello}} {{link_to world}}').toThrow(
<         /Missing helper: "link_to"/
<       );
---
>   describe('helperMissing', () => {
>     it('if a context is not found, helperMissing is used', () => {
>       expectTemplate('{{hello}} {{link_to world}}').toThrow(/Missing helper: "link_to"/);
651c578
<     it('if a context is not found, custom helperMissing is used', function() {
---
>     it('if a context is not found, custom helperMissing is used', () => {
654c581
<         .withHelper('helperMissing', function(mesg, options) {
---
>         .withHelper('helperMissing', function (mesg, options) {
662c589
<     it('if a value is not found, custom helperMissing is used', function() {
---
>     it('if a value is not found, custom helperMissing is used', () => {
665c592
<         .withHelper('helperMissing', function(options) {
---
>         .withHelper('helperMissing', function (options) {
674,675c601,602
<   describe('knownHelpers', function() {
<     it('Known helper should render helper', function() {
---
>   describe('knownHelpers', () => {
>     it('Known helper should render helper', () => {
678c605
<           knownHelpers: { hello: true }
---
>           knownHelpers: { hello: true },
680c607
<         .withHelper('hello', function() {
---
>         .withHelper('hello', function () {
686c613
<     it('Unknown helper in knownHelpers only mode should be passed as undefined', function() {
---
>     it('Unknown helper in knownHelpers only mode should be passed as undefined', () => {
690c617
<           knownHelpersOnly: true
---
>           knownHelpersOnly: true,
692c619
<         .withHelper('typeof', function(arg) {
---
>         .withHelper('typeof', function (arg) {
695c622
<         .withHelper('hello', function() {
---
>         .withHelper('hello', function () {
701c628
<     it('Builtin helpers available in knownHelpers only mode', function() {
---
>     it('Builtin helpers available in knownHelpers only mode', () => {
704c631
<           knownHelpersOnly: true
---
>           knownHelpersOnly: true,
709c636
<     it('Field lookup works in knownHelpers only mode', function() {
---
>     it('Field lookup works in knownHelpers only mode', () => {
712c639
<           knownHelpersOnly: true
---
>           knownHelpersOnly: true,
718c645
<     it('Conditional blocks work in knownHelpers only mode', function() {
---
>     it('Conditional blocks work in knownHelpers only mode', () => {
721c648
<           knownHelpersOnly: true
---
>           knownHelpersOnly: true,
727c654
<     it('Invert blocks work in knownHelpers only mode', function() {
---
>     it('Invert blocks work in knownHelpers only mode', () => {
730c657
<           knownHelpersOnly: true
---
>           knownHelpersOnly: true,
736c663
<     it('Functions are bound to the context in knownHelpers only mode', function() {
---
>     it('Functions are bound to the context in knownHelpers only mode', () => {
739c666
<           knownHelpersOnly: true
---
>           knownHelpersOnly: true,
742c669
<           foo: function() {
---
>           foo() {
745c672
<           bar: 'bar'
---
>           bar: 'bar',
750c677
<     it('Unknown helper call in knownHelpers only mode should throw', function() {
---
>     it('Unknown helper call in knownHelpers only mode should throw', () => {
757,758c684,685
<   describe('blockHelperMissing', function() {
<     it('lambdas are resolved by blockHelperMissing, not handlebars proper', function() {
---
>   describe('blockHelperMissing', () => {
>     it('lambdas are resolved by blockHelperMissing, not handlebars proper', () => {
761c688
<           truthy: function() {
---
>           truthy() {
763c690
<           }
---
>           },
768c695
<     it('lambdas resolved by blockHelperMissing are bound to the context', function() {
---
>     it('lambdas resolved by blockHelperMissing are bound to the context', () => {
771c698
<           truthy: function() {
---
>           truthy() {
774c701
<           truthiness: function() {
---
>           truthiness() {
776c703
<           }
---
>           },
782,785c709,712
<   describe('name field', function() {
<     var helpers = {
<       blockHelperMissing: function() {
<         return 'missing: ' + arguments[arguments.length - 1].name;
---
>   describe('name field', () => {
>     const helpers = {
>       blockHelperMissing(...args: any[]) {
>         return 'missing: ' + args[args.length - 1].name;
787,788c714,718
<       helperMissing: function() {
<         return 'helper missing: ' + arguments[arguments.length - 1].name;
---
>       helperMissing(...args: any[]) {
>         return 'helper missing: ' + args[args.length - 1].name;
>       },
>       helper(...args: any[]) {
>         return 'ran: ' + args[args.length - 1].name;
790,792d719
<       helper: function() {
<         return 'ran: ' + arguments[arguments.length - 1].name;
<       }
795,798c722,723
<     it('should include in ambiguous mustache calls', function() {
<       expectTemplate('{{helper}}')
<         .withHelpers(helpers)
<         .toCompileTo('ran: helper');
---
>     it('should include in ambiguous mustache calls', () => {
>       expectTemplate('{{helper}}').withHelpers(helpers).toCompileTo('ran: helper');
801,804c726,727
<     it('should include in helper mustache calls', function() {
<       expectTemplate('{{helper 1}}')
<         .withHelpers(helpers)
<         .toCompileTo('ran: helper');
---
>     it('should include in helper mustache calls', () => {
>       expectTemplate('{{helper 1}}').withHelpers(helpers).toCompileTo('ran: helper');
807,810c730,731
<     it('should include in ambiguous block calls', function() {
<       expectTemplate('{{#helper}}{{/helper}}')
<         .withHelpers(helpers)
<         .toCompileTo('ran: helper');
---
>     it('should include in ambiguous block calls', () => {
>       expectTemplate('{{#helper}}{{/helper}}').withHelpers(helpers).toCompileTo('ran: helper');
813c734
<     it('should include in simple block calls', function() {
---
>     it('should include in simple block calls', () => {
819,822c740,741
<     it('should include in helper block calls', function() {
<       expectTemplate('{{#helper 1}}{{/helper}}')
<         .withHelpers(helpers)
<         .toCompileTo('ran: helper');
---
>     it('should include in helper block calls', () => {
>       expectTemplate('{{#helper 1}}{{/helper}}').withHelpers(helpers).toCompileTo('ran: helper');
825c744
<     it('should include in known helper calls', function() {
---
>     it('should include in known helper calls', () => {
829c748
<           knownHelpersOnly: true
---
>           knownHelpersOnly: true,
835c754
<     it('should include full id', function() {
---
>     it('should include full id', () => {
842c761
<     it('should include full id if a hash is passed', function() {
---
>     it('should include full id if a hash is passed', () => {
850,851c769,770
<   describe('name conflicts', function() {
<     it('helpers take precedence over same-named context properties', function() {
---
>   describe('name conflicts', () => {
>     it('helpers take precedence over same-named context properties', () => {
853c772
<         .withHelper('goodbye', function() {
---
>         .withHelper('goodbye', function (this: any) {
856c775
<         .withHelper('cruel', function(world) {
---
>         .withHelper('cruel', function (world) {
861c780
<           world: 'world'
---
>           world: 'world',
863d781
<         .withMessage('Helper executed')
867c785
<     it('helpers take precedence over same-named context properties$', function() {
---
>     it('helpers take precedence over same-named context properties$', () => {
869c787
<         .withHelper('goodbye', function(options) {
---
>         .withHelper('goodbye', function (this: any, options) {
872c790
<         .withHelper('cruel', function(world) {
---
>         .withHelper('cruel', function (world) {
877c795
<           world: 'world'
---
>           world: 'world',
879d796
<         .withMessage('Helper executed')
883c800
<     it('Scoped names take precedence over helpers', function() {
---
>     it('Scoped names take precedence over helpers', () => {
885c802
<         .withHelper('goodbye', function() {
---
>         .withHelper('goodbye', function (this: any) {
888c805
<         .withHelper('cruel', function(world) {
---
>         .withHelper('cruel', function (world) {
893c810
<           world: 'world'
---
>           world: 'world',
895d811
<         .withMessage('Helper not executed')
899,903c815,817
<     it('Scoped names take precedence over block helpers', function() {
<       expectTemplate(
<         '{{#goodbye}} {{cruel world}}{{/goodbye}} {{this.goodbye}}'
<       )
<         .withHelper('goodbye', function(options) {
---
>     it('Scoped names take precedence over block helpers', () => {
>       expectTemplate('{{#goodbye}} {{cruel world}}{{/goodbye}} {{this.goodbye}}')
>         .withHelper('goodbye', function (this: any, options) {
906c820
<         .withHelper('cruel', function(world) {
---
>         .withHelper('cruel', function (world) {
911c825
<           world: 'world'
---
>           world: 'world',
913d826
<         .withMessage('Helper executed')
918,919c831,832
<   describe('block params', function() {
<     it('should take presedence over context values', function() {
---
>   describe('block params', () => {
>     it('should take presedence over context values', () => {
922,923c835,836
<         .withHelper('goodbyes', function(options) {
<           equals(options.fn.blockParams, 1);
---
>         .withHelper('goodbyes', function (options) {
>           expect(options.fn.blockParams).toEqual(1);
929c842
<     it('should take presedence over helper values', function() {
---
>     it('should take presedence over helper values', () => {
931c844
<         .withHelper('value', function() {
---
>         .withHelper('value', function () {
934,935c847,848
<         .withHelper('goodbyes', function(options) {
<           equals(options.fn.blockParams, 1);
---
>         .withHelper('goodbyes', function (options) {
>           expect(options.fn.blockParams).toEqual(1);
941,944c854,855
<     it('should not take presedence over pathed values', function() {
<       expectTemplate(
<         '{{#goodbyes as |value|}}{{./value}}{{/goodbyes}}{{value}}'
<       )
---
>     it('should not take presedence over pathed values', () => {
>       expectTemplate('{{#goodbyes as |value|}}{{./value}}{{/goodbyes}}{{value}}')
946c857
<         .withHelper('value', function() {
---
>         .withHelper('value', function () {
949,950c860,861
<         .withHelper('goodbyes', function(options) {
<           equals(options.fn.blockParams, 1);
---
>         .withHelper('goodbyes', function (this: any, options) {
>           expect(options.fn.blockParams).toEqual(1);
956,957c867,868
<     it('should take presednece over parent block params', function() {
<       var value = 1;
---
>     it('should take presednece over parent block params', () => {
>       let value: number;
959c870,875
<         '{{#goodbyes as |value|}}{{#goodbyes}}{{value}}{{#goodbyes as |value|}}{{value}}{{/goodbyes}}{{/goodbyes}}{{/goodbyes}}{{value}}'
---
>         '{{#goodbyes as |value|}}{{#goodbyes}}{{value}}{{#goodbyes as |value|}}{{value}}{{/goodbyes}}{{/goodbyes}}{{/goodbyes}}{{value}}',
>         {
>           beforeEach() {
>             value = 1;
>           },
>         }
962c878
<         .withHelper('goodbyes', function(options) {
---
>         .withHelper('goodbyes', function (options) {
966,967c882
<               blockParams:
<                 options.fn.blockParams === 1 ? [value++, value++] : undefined
---
>               blockParams: options.fn.blockParams === 1 ? [value++, value++] : undefined,
974,977c889,890
<     it('should allow block params on chained helpers', function() {
<       expectTemplate(
<         '{{#if bar}}{{else goodbyes as |value|}}{{value}}{{/if}}{{value}}'
<       )
---
>     it('should allow block params on chained helpers', () => {
>       expectTemplate('{{#if bar}}{{else goodbyes as |value|}}{{value}}{{/if}}{{value}}')
979,980c892,893
<         .withHelper('goodbyes', function(options) {
<           equals(options.fn.blockParams, 1);
---
>         .withHelper('goodbyes', function (options) {
>           expect(options.fn.blockParams).toEqual(1);
987,991c900,902
<   describe('built-in helpers malformed arguments ', function() {
<     it('if helper - too few arguments', function() {
<       expectTemplate('{{#if}}{{/if}}').toThrow(
<         /#if requires exactly one argument/
<       );
---
>   describe('built-in helpers malformed arguments ', () => {
>     it('if helper - too few arguments', () => {
>       expectTemplate('{{#if}}{{/if}}').toThrow(/#if requires exactly one argument/);
994,997c905,906
<     it('if helper - too many arguments, string', function() {
<       expectTemplate('{{#if test "string"}}{{/if}}').toThrow(
<         /#if requires exactly one argument/
<       );
---
>     it('if helper - too many arguments, string', () => {
>       expectTemplate('{{#if test "string"}}{{/if}}').toThrow(/#if requires exactly one argument/);
1000,1003c909,910
<     it('if helper - too many arguments, undefined', function() {
<       expectTemplate('{{#if test undefined}}{{/if}}').toThrow(
<         /#if requires exactly one argument/
<       );
---
>     it('if helper - too many arguments, undefined', () => {
>       expectTemplate('{{#if test undefined}}{{/if}}').toThrow(/#if requires exactly one argument/);
1006,1009c913,914
<     it('if helper - too many arguments, null', function() {
<       expectTemplate('{{#if test null}}{{/if}}').toThrow(
<         /#if requires exactly one argument/
<       );
---
>     it('if helper - too many arguments, null', () => {
>       expectTemplate('{{#if test null}}{{/if}}').toThrow(/#if requires exactly one argument/);
1012,1015c917,918
<     it('unless helper - too few arguments', function() {
<       expectTemplate('{{#unless}}{{/unless}}').toThrow(
<         /#unless requires exactly one argument/
<       );
---
>     it('unless helper - too few arguments', () => {
>       expectTemplate('{{#unless}}{{/unless}}').toThrow(/#unless requires exactly one argument/);
1018c921
<     it('unless helper - too many arguments', function() {
---
>     it('unless helper - too many arguments', () => {
1024,1027c927,928
<     it('with helper - too few arguments', function() {
<       expectTemplate('{{#with}}{{/with}}').toThrow(
<         /#with requires exactly one argument/
<       );
---
>     it('with helper - too few arguments', () => {
>       expectTemplate('{{#with}}{{/with}}').toThrow(/#with requires exactly one argument/);
1030c931
<     it('with helper - too many arguments', function() {
---
>     it('with helper - too many arguments', () => {
1037,1038c938,939
<   describe('the lookupProperty-option', function() {
<     it('should be passed to custom helpers', function() {
---
>   describe('the lookupProperty-option', () => {
>     it('should be passed to custom helpers', () => {
1040c941
<         .withHelper('testHelper', function testHelper(options) {
---
>         .withHelper('testHelper', function testHelper(this: any, options) {
1047a949,954
> 
> function deleteAllKeys(obj: { [key: string]: any }) {
>   for (const key of Object.keys(obj)) {
>     delete obj[key];
>   }
> }
