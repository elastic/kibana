1,10c1,6
< describe('compiler', function() {
<   if (!Handlebars.compile) {
<     return;
<   }
< 
<   describe('#equals', function() {
<     function compile(string) {
<       var ast = Handlebars.parse(string);
<       return new Handlebars.Compiler().compile(ast, {});
<     }
---
> /*
>  * This file is forked from the handlebars project (https://github.com/handlebars-lang/handlebars.js),
>  * and may include modifications made by Elasticsearch B.V.
>  * Elasticsearch B.V. licenses this file to you under the MIT License.
>  * See `packages/kbn-handlebars/LICENSE` for more information.
>  */
12,60c8,9
<     it('should treat as equal', function() {
<       equal(compile('foo').equals(compile('foo')), true);
<       equal(compile('{{foo}}').equals(compile('{{foo}}')), true);
<       equal(compile('{{foo.bar}}').equals(compile('{{foo.bar}}')), true);
<       equal(
<         compile('{{foo.bar baz "foo" true false bat=1}}').equals(
<           compile('{{foo.bar baz "foo" true false bat=1}}')
<         ),
<         true
<       );
<       equal(
<         compile('{{foo.bar (baz bat=1)}}').equals(
<           compile('{{foo.bar (baz bat=1)}}')
<         ),
<         true
<       );
<       equal(
<         compile('{{#foo}} {{/foo}}').equals(compile('{{#foo}} {{/foo}}')),
<         true
<       );
<     });
<     it('should treat as not equal', function() {
<       equal(compile('foo').equals(compile('bar')), false);
<       equal(compile('{{foo}}').equals(compile('{{bar}}')), false);
<       equal(compile('{{foo.bar}}').equals(compile('{{bar.bar}}')), false);
<       equal(
<         compile('{{foo.bar baz bat=1}}').equals(
<           compile('{{foo.bar bar bat=1}}')
<         ),
<         false
<       );
<       equal(
<         compile('{{foo.bar (baz bat=1)}}').equals(
<           compile('{{foo.bar (bar bat=1)}}')
<         ),
<         false
<       );
<       equal(
<         compile('{{#foo}} {{/foo}}').equals(compile('{{#bar}} {{/bar}}')),
<         false
<       );
<       equal(
<         compile('{{#foo}} {{/foo}}').equals(
<           compile('{{#foo}} {{foo}}{{/foo}}')
<         ),
<         false
<       );
<     });
<   });
---
> import Handlebars from '../..';
> import { forEachCompileFunctionName } from '../__jest__/test_bench';
62,78c11,13
<   describe('#compile', function() {
<     it('should fail with invalid input', function() {
<       shouldThrow(
<         function() {
<           Handlebars.compile(null);
<         },
<         Error,
<         'You must pass a string or Handlebars AST to Handlebars.compile. You passed null'
<       );
<       shouldThrow(
<         function() {
<           Handlebars.compile({});
<         },
<         Error,
<         'You must pass a string or Handlebars AST to Handlebars.compile. You passed [object Object]'
<       );
<     });
---
> describe('compiler', () => {
>   forEachCompileFunctionName((compileName) => {
>     const compile = Handlebars[compileName].bind(Handlebars);
80,92c15,20
<     it('should include the location in the error (row and column)', function() {
<       try {
<         Handlebars.compile(' \n  {{#if}}\n{{/def}}')();
<         equal(
<           true,
<           false,
<           'Statement must throw exception. This line should not be executed.'
<         );
<       } catch (err) {
<         equal(
<           err.message,
<           "if doesn't match def - 2:5",
<           'Checking error message'
---
>     describe(`#${compileName}`, () => {
>       it('should fail with invalid input', () => {
>         expect(function () {
>           compile(null);
>         }).toThrow(
>           `You must pass a string or Handlebars AST to Handlebars.${compileName}. You passed null`
94,102d21
<         if (Object.getOwnPropertyDescriptor(err, 'column').writable) {
<           // In Safari 8, the column-property is read-only. This means that even if it is set with defineProperty,
<           // its value won't change (https://github.com/jquery/esprima/issues/1290#issuecomment-132455482)
<           // Since this was neither working in Handlebars 3 nor in 4.0.5, we only check the column for other browsers.
<           equal(err.column, 5, 'Checking error column');
<         }
<         equal(err.lineNumber, 2, 'Checking error row');
<       }
<     });
104,116c23,26
<     it('should include the location as enumerable property', function() {
<       try {
<         Handlebars.compile(' \n  {{#if}}\n{{/def}}')();
<         equal(
<           true,
<           false,
<           'Statement must throw exception. This line should not be executed.'
<         );
<       } catch (err) {
<         equal(
<           Object.prototype.propertyIsEnumerable.call(err, 'column'),
<           true,
<           'Checking error column'
---
>         expect(function () {
>           compile({});
>         }).toThrow(
>           `You must pass a string or Handlebars AST to Handlebars.${compileName}. You passed [object Object]`
118,129c28
<       }
<     });
< 
<     it('can utilize AST instance', function() {
<       equal(
<         Handlebars.compile({
<           type: 'Program',
<           body: [{ type: 'ContentStatement', value: 'Hello' }]
<         })(),
<         'Hello'
<       );
<     });
---
>       });
131,133c30,44
<     it('can pass through an empty string', function() {
<       equal(Handlebars.compile('')(), '');
<     });
---
>       it('should include the location in the error (row and column)', () => {
>         try {
>           compile(' \n  {{#if}}\n{{/def}}')({});
>           expect(true).toEqual(false);
>         } catch (err) {
>           expect(err.message).toEqual("if doesn't match def - 2:5");
>           if (Object.getOwnPropertyDescriptor(err, 'column')!.writable) {
>             // In Safari 8, the column-property is read-only. This means that even if it is set with defineProperty,
>             // its value won't change (https://github.com/jquery/esprima/issues/1290#issuecomment-132455482)
>             // Since this was neither working in Handlebars 3 nor in 4.0.5, we only check the column for other browsers.
>             expect(err.column).toEqual(5);
>           }
>           expect(err.lineNumber).toEqual(2);
>         }
>       });
135,142c46,53
<     it('should not modify the options.data property(GH-1327)', function() {
<       var options = { data: [{ a: 'foo' }, { a: 'bar' }] };
<       Handlebars.compile('{{#each data}}{{@index}}:{{a}} {{/each}}', options)();
<       equal(
<         JSON.stringify(options, 0, 2),
<         JSON.stringify({ data: [{ a: 'foo' }, { a: 'bar' }] }, 0, 2)
<       );
<     });
---
>       it('should include the location as enumerable property', () => {
>         try {
>           compile(' \n  {{#if}}\n{{/def}}')({});
>           expect(true).toEqual(false);
>         } catch (err) {
>           expect(Object.prototype.propertyIsEnumerable.call(err, 'column')).toEqual(true);
>         }
>       });
144,152c55,62
<     it('should not modify the options.knownHelpers property(GH-1327)', function() {
<       var options = { knownHelpers: {} };
<       Handlebars.compile('{{#each data}}{{@index}}:{{a}} {{/each}}', options)();
<       equal(
<         JSON.stringify(options, 0, 2),
<         JSON.stringify({ knownHelpers: {} }, 0, 2)
<       );
<     });
<   });
---
>       it('can utilize AST instance', () => {
>         expect(
>           compile({
>             type: 'Program',
>             body: [{ type: 'ContentStatement', value: 'Hello' }],
>           })({})
>         ).toEqual('Hello');
>       });
154,170c64,66
<   describe('#precompile', function() {
<     it('should fail with invalid input', function() {
<       shouldThrow(
<         function() {
<           Handlebars.precompile(null);
<         },
<         Error,
<         'You must pass a string or Handlebars AST to Handlebars.precompile. You passed null'
<       );
<       shouldThrow(
<         function() {
<           Handlebars.precompile({});
<         },
<         Error,
<         'You must pass a string or Handlebars AST to Handlebars.precompile. You passed [object Object]'
<       );
<     });
---
>       it('can pass through an empty string', () => {
>         expect(compile('')({})).toEqual('');
>       });
172,182c68,75
<     it('can utilize AST instance', function() {
<       equal(
<         /return "Hello"/.test(
<           Handlebars.precompile({
<             type: 'Program',
<             body: [{ type: 'ContentStatement', value: 'Hello' }]
<           })
<         ),
<         true
<       );
<     });
---
>       it('should not modify the options.data property(GH-1327)', () => {
>         // The `data` property is supposed to be a boolean, but in this test we want to ignore that
>         const options = { data: [{ a: 'foo' }, { a: 'bar' }] as unknown as boolean };
>         compile('{{#each data}}{{@index}}:{{a}} {{/each}}', options)({});
>         expect(JSON.stringify(options, null, 2)).toEqual(
>           JSON.stringify({ data: [{ a: 'foo' }, { a: 'bar' }] }, null, 2)
>         );
>       });
184,185c77,83
<     it('can pass through an empty string', function() {
<       equal(/return ""/.test(Handlebars.precompile('')), true);
---
>       it('should not modify the options.knownHelpers property(GH-1327)', () => {
>         const options = { knownHelpers: {} };
>         compile('{{#each data}}{{@index}}:{{a}} {{/each}}', options)({});
>         expect(JSON.stringify(options, null, 2)).toEqual(
>           JSON.stringify({ knownHelpers: {} }, null, 2)
>         );
>       });
