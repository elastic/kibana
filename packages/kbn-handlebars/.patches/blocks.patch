1,3c1,12
< describe('blocks', function() {
<   it('array', function() {
<     var string = '{{#goodbyes}}{{text}}! {{/goodbyes}}cruel {{world}}!';
---
> /*
>  * This file is forked from the handlebars project (https://github.com/handlebars-lang/handlebars.js),
>  * and may include modifications made by Elasticsearch B.V.
>  * Elasticsearch B.V. licenses this file to you under the MIT License.
>  * See `packages/kbn-handlebars/LICENSE` for more information.
>  */
> 
> import { expectTemplate } from '../__jest__/test_bench';
> 
> describe('blocks', () => {
>   it('array', () => {
>     const string = '{{#goodbyes}}{{text}}! {{/goodbyes}}cruel {{world}}!';
7,12c16,17
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ],
<         world: 'world'
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
>         world: 'world',
14d18
<       .withMessage('Arrays iterate over the contents when not empty')
20c24
<         world: 'world'
---
>         world: 'world',
22d25
<       .withMessage('Arrays ignore the contents when empty')
26,29c29,30
<   it('array without data', function() {
<     expectTemplate(
<       '{{#goodbyes}}{{text}}{{/goodbyes}} {{#goodbyes}}{{text}}{{/goodbyes}}'
<     )
---
>   it('array without data', () => {
>     expectTemplate('{{#goodbyes}}{{text}}{{/goodbyes}} {{#goodbyes}}{{text}}{{/goodbyes}}')
31,36c32,33
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ],
<         world: 'world'
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
>         world: 'world',
38d34
<       .withCompileOptions({ compat: false })
42,45c38,39
<   it('array with @index', function() {
<     expectTemplate(
<       '{{#goodbyes}}{{@index}}. {{text}}! {{/goodbyes}}cruel {{world}}!'
<     )
---
>   it('array with @index', () => {
>     expectTemplate('{{#goodbyes}}{{@index}}. {{text}}! {{/goodbyes}}cruel {{world}}!')
47,52c41,42
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ],
<         world: 'world'
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
>         world: 'world',
54d43
<       .withMessage('The @index variable is used')
58,59c47,48
<   it('empty block', function() {
<     var string = '{{#goodbyes}}{{/goodbyes}}cruel {{world}}!';
---
>   it('empty block', () => {
>     const string = '{{#goodbyes}}{{/goodbyes}}cruel {{world}}!';
63,68c52,53
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ],
<         world: 'world'
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
>         world: 'world',
70d54
<       .withMessage('Arrays iterate over the contents when not empty')
76c60
<         world: 'world'
---
>         world: 'world',
78d61
<       .withMessage('Arrays ignore the contents when empty')
82c65
<   it('block with complex lookup', function() {
---
>   it('block with complex lookup', () => {
86,90c69
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ]
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
92,97c71
<       .withMessage(
<         'Templates can access variables in contexts up the stack with relative path syntax'
<       )
<       .toCompileTo(
<         'goodbye cruel Alan! Goodbye cruel Alan! GOODBYE cruel Alan! '
<       );
---
>       .toCompileTo('goodbye cruel Alan! Goodbye cruel Alan! GOODBYE cruel Alan! ');
100c74
<   it('multiple blocks with complex lookup', function() {
---
>   it('multiple blocks with complex lookup', () => {
104,108c78
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ]
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
113,116c83,84
<   it('block with complex lookup using nested context', function() {
<     expectTemplate(
<       '{{#goodbyes}}{{text}} cruel {{foo/../name}}! {{/goodbyes}}'
<     ).toThrow(Error);
---
>   it('block with complex lookup using nested context', () => {
>     expectTemplate('{{#goodbyes}}{{text}} cruel {{foo/../name}}! {{/goodbyes}}').toThrow(Error);
119c87
<   it('block with deep nested complex lookup', function() {
---
>   it('block with deep nested complex lookup', () => {
125c93
<         outer: [{ sibling: 'sad', inner: [{ text: 'goodbye' }] }]
---
>         outer: [{ sibling: 'sad', inner: [{ text: 'goodbye' }] }],
130,133c98,99
<   it('works with cached blocks', function() {
<     expectTemplate(
<       '{{#each person}}{{#with .}}{{first}} {{last}}{{/with}}{{/each}}'
<     )
---
>   it('works with cached blocks', () => {
>     expectTemplate('{{#each person}}{{#with .}}{{first}} {{last}}{{/with}}{{/each}}')
138,139c104,105
<           { first: 'Alan', last: 'Johnson' }
<         ]
---
>           { first: 'Alan', last: 'Johnson' },
>         ],
144,145c110,111
<   describe('inverted sections', function() {
<     it('inverted sections with unset value', function() {
---
>   describe('inverted sections', () => {
>     it('inverted sections with unset value', () => {
148,150c114
<       )
<         .withMessage("Inverted section rendered when value isn't set.")
<         .toCompileTo('Right On!');
---
>       ).toCompileTo('Right On!');
153,156c117,118
<     it('inverted section with false value', function() {
<       expectTemplate(
<         '{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}'
<       )
---
>     it('inverted section with false value', () => {
>       expectTemplate('{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}')
158d119
<         .withMessage('Inverted section rendered when value is false.')
162,165c123,124
<     it('inverted section with empty set', function() {
<       expectTemplate(
<         '{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}'
<       )
---
>     it('inverted section with empty set', () => {
>       expectTemplate('{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}')
167d125
<         .withMessage('Inverted section rendered when value is empty set.')
171c129
<     it('block inverted sections', function() {
---
>     it('block inverted sections', () => {
177c135
<     it('chained inverted sections', function() {
---
>     it('chained inverted sections', () => {
188,190c146
<       expectTemplate(
<         '{{#people}}{{name}}{{else if none}}{{none}}{{else}}fail{{/people}}'
<       )
---
>       expectTemplate('{{#people}}{{name}}{{else if none}}{{none}}{{else}}fail{{/people}}')
195,198c151,152
<     it('chained inverted sections with mismatch', function() {
<       expectTemplate(
<         '{{#people}}{{name}}{{else if none}}{{none}}{{/if}}'
<       ).toThrow(Error);
---
>     it('chained inverted sections with mismatch', () => {
>       expectTemplate('{{#people}}{{name}}{{else if none}}{{none}}{{/if}}').toThrow(Error);
201c155
<     it('block inverted sections with empty arrays', function() {
---
>     it('block inverted sections with empty arrays', () => {
205c159
<           people: []
---
>           people: [],
211,212c165,166
<   describe('standalone sections', function() {
<     it('block standalone else sections', function() {
---
>   describe('standalone sections', () => {
>     it('block standalone else sections', () => {
226,241c180,181
<     it('block standalone else sections can be disabled', function() {
<       expectTemplate('{{#people}}\n{{name}}\n{{^}}\n{{none}}\n{{/people}}\n')
<         .withInput({ none: 'No people' })
<         .withCompileOptions({ ignoreStandalone: true })
<         .toCompileTo('\nNo people\n\n');
< 
<       expectTemplate('{{#none}}\n{{.}}\n{{^}}\nFail\n{{/none}}\n')
<         .withInput({ none: 'No people' })
<         .withCompileOptions({ ignoreStandalone: true })
<         .toCompileTo('\nNo people\n\n');
<     });
< 
<     it('block standalone chained else sections', function() {
<       expectTemplate(
<         '{{#people}}\n{{name}}\n{{else if none}}\n{{none}}\n{{/people}}\n'
<       )
---
>     it('block standalone chained else sections', () => {
>       expectTemplate('{{#people}}\n{{name}}\n{{else if none}}\n{{none}}\n{{/people}}\n')
245,247c185
<       expectTemplate(
<         '{{#people}}\n{{name}}\n{{else if none}}\n{{none}}\n{{^}}\n{{/people}}\n'
<       )
---
>       expectTemplate('{{#people}}\n{{name}}\n{{else if none}}\n{{none}}\n{{^}}\n{{/people}}\n')
252c190
<     it('should handle nesting', function() {
---
>     it('should handle nesting', () => {
255c193
<           data: [1, 3, 5]
---
>           data: [1, 3, 5],
260,455d197
< 
<   describe('compat mode', function() {
<     it('block with deep recursive lookup lookup', function() {
<       expectTemplate(
<         '{{#outer}}Goodbye {{#inner}}cruel {{omg}}{{/inner}}{{/outer}}'
<       )
<         .withInput({ omg: 'OMG!', outer: [{ inner: [{ text: 'goodbye' }] }] })
<         .withCompileOptions({ compat: true })
<         .toCompileTo('Goodbye cruel OMG!');
<     });
< 
<     it('block with deep recursive pathed lookup', function() {
<       expectTemplate(
<         '{{#outer}}Goodbye {{#inner}}cruel {{omg.yes}}{{/inner}}{{/outer}}'
<       )
<         .withInput({
<           omg: { yes: 'OMG!' },
<           outer: [{ inner: [{ yes: 'no', text: 'goodbye' }] }]
<         })
<         .withCompileOptions({ compat: true })
<         .toCompileTo('Goodbye cruel OMG!');
<     });
< 
<     it('block with missed recursive lookup', function() {
<       expectTemplate(
<         '{{#outer}}Goodbye {{#inner}}cruel {{omg.yes}}{{/inner}}{{/outer}}'
<       )
<         .withInput({
<           omg: { no: 'OMG!' },
<           outer: [{ inner: [{ yes: 'no', text: 'goodbye' }] }]
<         })
<         .withCompileOptions({ compat: true })
<         .toCompileTo('Goodbye cruel ');
<     });
<   });
< 
<   describe('decorators', function() {
<     it('should apply mustache decorators', function() {
<       expectTemplate('{{#helper}}{{*decorator}}{{/helper}}')
<         .withHelper('helper', function(options) {
<           return options.fn.run;
<         })
<         .withDecorator('decorator', function(fn) {
<           fn.run = 'success';
<           return fn;
<         })
<         .toCompileTo('success');
<     });
< 
<     it('should apply allow undefined return', function() {
<       expectTemplate('{{#helper}}{{*decorator}}suc{{/helper}}')
<         .withHelper('helper', function(options) {
<           return options.fn() + options.fn.run;
<         })
<         .withDecorator('decorator', function(fn) {
<           fn.run = 'cess';
<         })
<         .toCompileTo('success');
<     });
< 
<     it('should apply block decorators', function() {
<       expectTemplate(
<         '{{#helper}}{{#*decorator}}success{{/decorator}}{{/helper}}'
<       )
<         .withHelper('helper', function(options) {
<           return options.fn.run;
<         })
<         .withDecorator('decorator', function(fn, props, container, options) {
<           fn.run = options.fn();
<           return fn;
<         })
<         .toCompileTo('success');
<     });
< 
<     it('should support nested decorators', function() {
<       expectTemplate(
<         '{{#helper}}{{#*decorator}}{{#*nested}}suc{{/nested}}cess{{/decorator}}{{/helper}}'
<       )
<         .withHelper('helper', function(options) {
<           return options.fn.run;
<         })
<         .withDecorators({
<           decorator: function(fn, props, container, options) {
<             fn.run = options.fn.nested + options.fn();
<             return fn;
<           },
<           nested: function(fn, props, container, options) {
<             props.nested = options.fn();
<           }
<         })
<         .toCompileTo('success');
<     });
< 
<     it('should apply multiple decorators', function() {
<       expectTemplate(
<         '{{#helper}}{{#*decorator}}suc{{/decorator}}{{#*decorator}}cess{{/decorator}}{{/helper}}'
<       )
<         .withHelper('helper', function(options) {
<           return options.fn.run;
<         })
<         .withDecorator('decorator', function(fn, props, container, options) {
<           fn.run = (fn.run || '') + options.fn();
<           return fn;
<         })
<         .toCompileTo('success');
<     });
< 
<     it('should access parent variables', function() {
<       expectTemplate('{{#helper}}{{*decorator foo}}{{/helper}}')
<         .withHelper('helper', function(options) {
<           return options.fn.run;
<         })
<         .withDecorator('decorator', function(fn, props, container, options) {
<           fn.run = options.args;
<           return fn;
<         })
<         .withInput({ foo: 'success' })
<         .toCompileTo('success');
<     });
< 
<     it('should work with root program', function() {
<       var run;
<       expectTemplate('{{*decorator "success"}}')
<         .withDecorator('decorator', function(fn, props, container, options) {
<           equals(options.args[0], 'success');
<           run = true;
<           return fn;
<         })
<         .withInput({ foo: 'success' })
<         .toCompileTo('');
<       equals(run, true);
<     });
< 
<     it('should fail when accessing variables from root', function() {
<       var run;
<       expectTemplate('{{*decorator foo}}')
<         .withDecorator('decorator', function(fn, props, container, options) {
<           equals(options.args[0], undefined);
<           run = true;
<           return fn;
<         })
<         .withInput({ foo: 'fail' })
<         .toCompileTo('');
<       equals(run, true);
<     });
< 
<     describe('registration', function() {
<       it('unregisters', function() {
<         handlebarsEnv.decorators = {};
< 
<         handlebarsEnv.registerDecorator('foo', function() {
<           return 'fail';
<         });
< 
<         equals(!!handlebarsEnv.decorators.foo, true);
<         handlebarsEnv.unregisterDecorator('foo');
<         equals(handlebarsEnv.decorators.foo, undefined);
<       });
< 
<       it('allows multiple globals', function() {
<         handlebarsEnv.decorators = {};
< 
<         handlebarsEnv.registerDecorator({
<           foo: function() {},
<           bar: function() {}
<         });
< 
<         equals(!!handlebarsEnv.decorators.foo, true);
<         equals(!!handlebarsEnv.decorators.bar, true);
<         handlebarsEnv.unregisterDecorator('foo');
<         handlebarsEnv.unregisterDecorator('bar');
<         equals(handlebarsEnv.decorators.foo, undefined);
<         equals(handlebarsEnv.decorators.bar, undefined);
<       });
< 
<       it('fails with multiple and args', function() {
<         shouldThrow(
<           function() {
<             handlebarsEnv.registerDecorator(
<               {
<                 world: function() {
<                   return 'world!';
<                 },
<                 testHelper: function() {
<                   return 'found it!';
<                 }
<               },
<               {}
<             );
<           },
<           Error,
<           'Arg not supported with multiple decorators'
<         );
<       });
<     });
<   });
