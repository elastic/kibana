1,3c1,13
< describe('blocks', function() {
<   it('array', function() {
<     var string = '{{#goodbyes}}{{text}}! {{/goodbyes}}cruel {{world}}!';
---
> /*
>  * This file is forked from the handlebars project (https://github.com/handlebars-lang/handlebars.js),
>  * and may include modifications made by Elasticsearch B.V.
>  * Elasticsearch B.V. licenses this file to you under the MIT License.
>  * See `packages/kbn-handlebars/LICENSE` for more information.
>  */
> 
> import Handlebars from '../..';
> import { expectTemplate } from '../__jest__/test_bench';
> 
> describe('blocks', () => {
>   it('array', () => {
>     const string = '{{#goodbyes}}{{text}}! {{/goodbyes}}cruel {{world}}!';
7,12c17,18
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ],
<         world: 'world'
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
>         world: 'world',
14d19
<       .withMessage('Arrays iterate over the contents when not empty')
20c25
<         world: 'world'
---
>         world: 'world',
22d26
<       .withMessage('Arrays ignore the contents when empty')
26,29c30,31
<   it('array without data', function() {
<     expectTemplate(
<       '{{#goodbyes}}{{text}}{{/goodbyes}} {{#goodbyes}}{{text}}{{/goodbyes}}'
<     )
---
>   it('array without data', () => {
>     expectTemplate('{{#goodbyes}}{{text}}{{/goodbyes}} {{#goodbyes}}{{text}}{{/goodbyes}}')
31,36c33,34
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ],
<         world: 'world'
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
>         world: 'world',
38d35
<       .withCompileOptions({ compat: false })
42,45c39,40
<   it('array with @index', function() {
<     expectTemplate(
<       '{{#goodbyes}}{{@index}}. {{text}}! {{/goodbyes}}cruel {{world}}!'
<     )
---
>   it('array with @index', () => {
>     expectTemplate('{{#goodbyes}}{{@index}}. {{text}}! {{/goodbyes}}cruel {{world}}!')
47,52c42,43
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ],
<         world: 'world'
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
>         world: 'world',
54d44
<       .withMessage('The @index variable is used')
58,59c48,49
<   it('empty block', function() {
<     var string = '{{#goodbyes}}{{/goodbyes}}cruel {{world}}!';
---
>   it('empty block', () => {
>     const string = '{{#goodbyes}}{{/goodbyes}}cruel {{world}}!';
63,68c53,54
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ],
<         world: 'world'
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
>         world: 'world',
70d55
<       .withMessage('Arrays iterate over the contents when not empty')
76c61
<         world: 'world'
---
>         world: 'world',
78d62
<       .withMessage('Arrays ignore the contents when empty')
82c66
<   it('block with complex lookup', function() {
---
>   it('block with complex lookup', () => {
86,90c70
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ]
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
92,97c72
<       .withMessage(
<         'Templates can access variables in contexts up the stack with relative path syntax'
<       )
<       .toCompileTo(
<         'goodbye cruel Alan! Goodbye cruel Alan! GOODBYE cruel Alan! '
<       );
---
>       .toCompileTo('goodbye cruel Alan! Goodbye cruel Alan! GOODBYE cruel Alan! ');
100c75
<   it('multiple blocks with complex lookup', function() {
---
>   it('multiple blocks with complex lookup', () => {
104,108c79
<         goodbyes: [
<           { text: 'goodbye' },
<           { text: 'Goodbye' },
<           { text: 'GOODBYE' }
<         ]
---
>         goodbyes: [{ text: 'goodbye' }, { text: 'Goodbye' }, { text: 'GOODBYE' }],
113,116c84,85
<   it('block with complex lookup using nested context', function() {
<     expectTemplate(
<       '{{#goodbyes}}{{text}} cruel {{foo/../name}}! {{/goodbyes}}'
<     ).toThrow(Error);
---
>   it('block with complex lookup using nested context', () => {
>     expectTemplate('{{#goodbyes}}{{text}} cruel {{foo/../name}}! {{/goodbyes}}').toThrow(Error);
119c88
<   it('block with deep nested complex lookup', function() {
---
>   it('block with deep nested complex lookup', () => {
125c94
<         outer: [{ sibling: 'sad', inner: [{ text: 'goodbye' }] }]
---
>         outer: [{ sibling: 'sad', inner: [{ text: 'goodbye' }] }],
130,133c99,100
<   it('works with cached blocks', function() {
<     expectTemplate(
<       '{{#each person}}{{#with .}}{{first}} {{last}}{{/with}}{{/each}}'
<     )
---
>   it('works with cached blocks', () => {
>     expectTemplate('{{#each person}}{{#with .}}{{first}} {{last}}{{/with}}{{/each}}')
138,139c105,106
<           { first: 'Alan', last: 'Johnson' }
<         ]
---
>           { first: 'Alan', last: 'Johnson' },
>         ],
144,145c111,112
<   describe('inverted sections', function() {
<     it('inverted sections with unset value', function() {
---
>   describe('inverted sections', () => {
>     it('inverted sections with unset value', () => {
148,150c115
<       )
<         .withMessage("Inverted section rendered when value isn't set.")
<         .toCompileTo('Right On!');
---
>       ).toCompileTo('Right On!');
153,156c118,119
<     it('inverted section with false value', function() {
<       expectTemplate(
<         '{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}'
<       )
---
>     it('inverted section with false value', () => {
>       expectTemplate('{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}')
158d120
<         .withMessage('Inverted section rendered when value is false.')
162,165c124,125
<     it('inverted section with empty set', function() {
<       expectTemplate(
<         '{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}'
<       )
---
>     it('inverted section with empty set', () => {
>       expectTemplate('{{#goodbyes}}{{this}}{{/goodbyes}}{{^goodbyes}}Right On!{{/goodbyes}}')
167d126
<         .withMessage('Inverted section rendered when value is empty set.')
171c130
<     it('block inverted sections', function() {
---
>     it('block inverted sections', () => {
177c136
<     it('chained inverted sections', function() {
---
>     it('chained inverted sections', () => {
188,190c147
<       expectTemplate(
<         '{{#people}}{{name}}{{else if none}}{{none}}{{else}}fail{{/people}}'
<       )
---
>       expectTemplate('{{#people}}{{name}}{{else if none}}{{none}}{{else}}fail{{/people}}')
195,198c152,153
<     it('chained inverted sections with mismatch', function() {
<       expectTemplate(
<         '{{#people}}{{name}}{{else if none}}{{none}}{{/if}}'
<       ).toThrow(Error);
---
>     it('chained inverted sections with mismatch', () => {
>       expectTemplate('{{#people}}{{name}}{{else if none}}{{none}}{{/if}}').toThrow(Error);
201c156
<     it('block inverted sections with empty arrays', function() {
---
>     it('block inverted sections with empty arrays', () => {
205c160
<           people: []
---
>           people: [],
211,212c166,167
<   describe('standalone sections', function() {
<     it('block standalone else sections', function() {
---
>   describe('standalone sections', () => {
>     it('block standalone else sections', () => {
226,241c181,182
<     it('block standalone else sections can be disabled', function() {
<       expectTemplate('{{#people}}\n{{name}}\n{{^}}\n{{none}}\n{{/people}}\n')
<         .withInput({ none: 'No people' })
<         .withCompileOptions({ ignoreStandalone: true })
<         .toCompileTo('\nNo people\n\n');
< 
<       expectTemplate('{{#none}}\n{{.}}\n{{^}}\nFail\n{{/none}}\n')
<         .withInput({ none: 'No people' })
<         .withCompileOptions({ ignoreStandalone: true })
<         .toCompileTo('\nNo people\n\n');
<     });
< 
<     it('block standalone chained else sections', function() {
<       expectTemplate(
<         '{{#people}}\n{{name}}\n{{else if none}}\n{{none}}\n{{/people}}\n'
<       )
---
>     it('block standalone chained else sections', () => {
>       expectTemplate('{{#people}}\n{{name}}\n{{else if none}}\n{{none}}\n{{/people}}\n')
245,247c186
<       expectTemplate(
<         '{{#people}}\n{{name}}\n{{else if none}}\n{{none}}\n{{^}}\n{{/people}}\n'
<       )
---
>       expectTemplate('{{#people}}\n{{name}}\n{{else if none}}\n{{none}}\n{{^}}\n{{/people}}\n')
252c191
<     it('should handle nesting', function() {
---
>     it('should handle nesting', () => {
255c194
<           data: [1, 3, 5]
---
>           data: [1, 3, 5],
261,297c200,201
<   describe('compat mode', function() {
<     it('block with deep recursive lookup lookup', function() {
<       expectTemplate(
<         '{{#outer}}Goodbye {{#inner}}cruel {{omg}}{{/inner}}{{/outer}}'
<       )
<         .withInput({ omg: 'OMG!', outer: [{ inner: [{ text: 'goodbye' }] }] })
<         .withCompileOptions({ compat: true })
<         .toCompileTo('Goodbye cruel OMG!');
<     });
< 
<     it('block with deep recursive pathed lookup', function() {
<       expectTemplate(
<         '{{#outer}}Goodbye {{#inner}}cruel {{omg.yes}}{{/inner}}{{/outer}}'
<       )
<         .withInput({
<           omg: { yes: 'OMG!' },
<           outer: [{ inner: [{ yes: 'no', text: 'goodbye' }] }]
<         })
<         .withCompileOptions({ compat: true })
<         .toCompileTo('Goodbye cruel OMG!');
<     });
< 
<     it('block with missed recursive lookup', function() {
<       expectTemplate(
<         '{{#outer}}Goodbye {{#inner}}cruel {{omg.yes}}{{/inner}}{{/outer}}'
<       )
<         .withInput({
<           omg: { no: 'OMG!' },
<           outer: [{ inner: [{ yes: 'no', text: 'goodbye' }] }]
<         })
<         .withCompileOptions({ compat: true })
<         .toCompileTo('Goodbye cruel ');
<     });
<   });
< 
<   describe('decorators', function() {
<     it('should apply mustache decorators', function() {
---
>   describe('decorators', () => {
>     it('should apply mustache decorators', () => {
299c203
<         .withHelper('helper', function(options) {
---
>         .withHelper('helper', function (options) {
302c206,207
<         .withDecorator('decorator', function(fn) {
---
>         .withDecorator('decorator', function (fn) {
>           // @ts-expect-error: Property 'run' does not exist on type 'TemplateDelegate<any>'
309c214
<     it('should apply allow undefined return', function() {
---
>     it('should apply allow undefined return', () => {
311c216
<         .withHelper('helper', function(options) {
---
>         .withHelper('helper', function (options) {
314c219,220
<         .withDecorator('decorator', function(fn) {
---
>         .withDecorator('decorator', function (fn) {
>           // @ts-expect-error: Property 'run' does not exist on type 'TemplateDelegate<any>'
320,324c226,228
<     it('should apply block decorators', function() {
<       expectTemplate(
<         '{{#helper}}{{#*decorator}}success{{/decorator}}{{/helper}}'
<       )
<         .withHelper('helper', function(options) {
---
>     it('should apply block decorators', () => {
>       expectTemplate('{{#helper}}{{#*decorator}}success{{/decorator}}{{/helper}}')
>         .withHelper('helper', function (options) {
327c231,232
<         .withDecorator('decorator', function(fn, props, container, options) {
---
>         .withDecorator('decorator', function (fn, props, container, options) {
>           // @ts-expect-error: Property 'run' does not exist on type 'TemplateDelegate<any>'
334c239
<     it('should support nested decorators', function() {
---
>     it('should support nested decorators', () => {
338c243
<         .withHelper('helper', function(options) {
---
>         .withHelper('helper', function (options) {
342c247,248
<           decorator: function(fn, props, container, options) {
---
>           decorator(fn, props, container, options) {
>             // @ts-expect-error: Property 'run' does not exist on type 'TemplateDelegate<any>'
346c252
<           nested: function(fn, props, container, options) {
---
>           nested(fn, props, container, options) {
348c254
<           }
---
>           },
353c259
<     it('should apply multiple decorators', function() {
---
>     it('should apply multiple decorators', () => {
357c263
<         .withHelper('helper', function(options) {
---
>         .withHelper('helper', function (options) {
360c266,267
<         .withDecorator('decorator', function(fn, props, container, options) {
---
>         .withDecorator('decorator', function (fn, props, container, options) {
>           // @ts-expect-error: Property 'run' does not exist on type 'TemplateDelegate<any>'
367c274
<     it('should access parent variables', function() {
---
>     it('should access parent variables', () => {
369c276
<         .withHelper('helper', function(options) {
---
>         .withHelper('helper', function (options) {
372c279,280
<         .withDecorator('decorator', function(fn, props, container, options) {
---
>         .withDecorator('decorator', function (fn, props, container, options) {
>           // @ts-expect-error: Property 'run' does not exist on type 'TemplateDelegate<any>'
380,381c288,289
<     it('should work with root program', function() {
<       var run;
---
>     it('should work with root program', () => {
>       let run;
383,384c291,292
<         .withDecorator('decorator', function(fn, props, container, options) {
<           equals(options.args[0], 'success');
---
>         .withDecorator('decorator', function (fn, props, container, options) {
>           expect(options.args[0]).toEqual('success');
390c298
<       equals(run, true);
---
>       expect(run).toEqual(true);
393,394c301,302
<     it('should fail when accessing variables from root', function() {
<       var run;
---
>     it('should fail when accessing variables from root', () => {
>       let run;
396,397c304,305
<         .withDecorator('decorator', function(fn, props, container, options) {
<           equals(options.args[0], undefined);
---
>         .withDecorator('decorator', function (fn, props, container, options) {
>           expect(options.args[0]).toBeUndefined();
403c311
<       equals(run, true);
---
>       expect(run).toEqual(true);
406,408c314,321
<     describe('registration', function() {
<       it('unregisters', function() {
<         handlebarsEnv.decorators = {};
---
>     describe('registration', () => {
>       beforeEach(() => {
>         global.kbnHandlebarsEnv = Handlebars.create();
>       });
> 
>       it('unregisters', () => {
>         // @ts-expect-error: Cannot assign to 'decorators' because it is a read-only property.
>         kbnHandlebarsEnv!.decorators = {};
410c323
<         handlebarsEnv.registerDecorator('foo', function() {
---
>         kbnHandlebarsEnv!.registerDecorator('foo', function () {
414,416c327,329
<         equals(!!handlebarsEnv.decorators.foo, true);
<         handlebarsEnv.unregisterDecorator('foo');
<         equals(handlebarsEnv.decorators.foo, undefined);
---
>         expect(!!kbnHandlebarsEnv!.decorators.foo).toEqual(true);
>         kbnHandlebarsEnv!.unregisterDecorator('foo');
>         expect(kbnHandlebarsEnv!.decorators.foo).toBeUndefined();
419,424c332,339
<       it('allows multiple globals', function() {
<         handlebarsEnv.decorators = {};
< 
<         handlebarsEnv.registerDecorator({
<           foo: function() {},
<           bar: function() {}
---
>       it('allows multiple globals', () => {
>         // @ts-expect-error: Cannot assign to 'decorators' because it is a read-only property.
>         kbnHandlebarsEnv!.decorators = {};
> 
>         // @ts-expect-error: Expected 2 arguments, but got 1.
>         kbnHandlebarsEnv!.registerDecorator({
>           foo() {},
>           bar() {},
427,432c342,347
<         equals(!!handlebarsEnv.decorators.foo, true);
<         equals(!!handlebarsEnv.decorators.bar, true);
<         handlebarsEnv.unregisterDecorator('foo');
<         handlebarsEnv.unregisterDecorator('bar');
<         equals(handlebarsEnv.decorators.foo, undefined);
<         equals(handlebarsEnv.decorators.bar, undefined);
---
>         expect(!!kbnHandlebarsEnv!.decorators.foo).toEqual(true);
>         expect(!!kbnHandlebarsEnv!.decorators.bar).toEqual(true);
>         kbnHandlebarsEnv!.unregisterDecorator('foo');
>         kbnHandlebarsEnv!.unregisterDecorator('bar');
>         expect(kbnHandlebarsEnv!.decorators.foo).toBeUndefined();
>         expect(kbnHandlebarsEnv!.decorators.bar).toBeUndefined();
435,445c350,356
<       it('fails with multiple and args', function() {
<         shouldThrow(
<           function() {
<             handlebarsEnv.registerDecorator(
<               {
<                 world: function() {
<                   return 'world!';
<                 },
<                 testHelper: function() {
<                   return 'found it!';
<                 }
---
>       it('fails with multiple and args', () => {
>         expect(() => {
>           kbnHandlebarsEnv!.registerDecorator(
>             // @ts-expect-error: Argument of type '{ world(): string; testHelper(): string; }' is not assignable to parameter of type 'string'.
>             {
>               world() {
>                 return 'world!';
447,452c358,364
<               {}
<             );
<           },
<           Error,
<           'Arg not supported with multiple decorators'
<         );
---
>               testHelper() {
>                 return 'found it!';
>               },
>             },
>             {}
>           );
>         }).toThrow('Arg not supported with multiple decorators');
