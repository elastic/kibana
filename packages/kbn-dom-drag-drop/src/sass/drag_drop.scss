@import './drag_drop_mixins';

.domDragDrop {
  transition: $euiAnimSpeedFast ease-in-out;
  transition-property: background-color, border-color, opacity;
  z-index: $domDragDropZLevel1;
}

.domDragDrop_ghost {
  @include mixinDomDraggable;
  border: $euiBorderWidthThin dashed $euiBorderColor;
  position: absolute !important;  // sass-lint:disable-line no-important
  margin: 0 !important;  // sass-lint:disable-line no-important
  top: 0;
  width: 100%;
  left: 0;
  opacity: .9;
  transform: translate($euiSizeS, $euiSizeL);
  z-index: $domDragDropZLevel3;
  pointer-events: none;
  outline: $euiFocusRingSize solid currentColor; // Safari & Firefox
  outline-style: auto; // Chrome
}

// Draggable item
.domDragDrop-isDraggable {
  @include mixinDomDraggable;
  @include mixinDomDragDropHover;

  // Include a possible nested button like when using FieldButton
  & .kbnFieldButton__button,
  & .euiLink {
    cursor: grab;
  }

  &:focus {
    @include euiFocusRing;
  }
}

// Drop area
.domDragDrop-isDroppable:not(.domDragDrop__dropOverlayWrapper) {
  @include mixinDomDroppable;
}

// Drop area when there's an item being dragged
.domDragDrop-isDropTarget {
  &:not(.domDragDrop__dropOverlayWrapper) {
    @include mixinDomDroppable;
    @include mixinDomDroppableActive;
  }

  > * {
    pointer-events: none;
  }
}

// Drop area while hovering with item
.domDragDrop-isActiveDropTarget:not(.domDragDrop__dropOverlayWrapper) {
  z-index: $domDragDropZLevel3;
  @include mixinDomDroppableActiveHover;
}

// Drop area that is not allowed for current item
.domDragDrop-isNotDroppable {
  @include mixinDomDroppableNotAllowed;
}

// Drop area will be replacing existing content
.domDragDrop-isReplacing {
  text-decoration: line-through;
}

.domDragDrop-notCompatible:not(.domDragDrop__dropOverlayWrapper) {
  background-color: $euiColorHighlight !important;
  &:before {
    border: $euiBorderWidthThin dashed $euiColorVis5 !important;
  }
  &.domDragDrop-isActiveDropTarget {
    background-color: rgba(251, 208, 17, .25) !important;
    &:before {
      border-color: $euiColorVis5 !important;
    }
  }
}

.domDragDrop__container {
  position: relative;
  width: 100%;
  height: 100%;

  &.domDragDrop__container-active {
    z-index: $domDragDropZLevel3;
  }
}

$reorderItemMargin: $euiSizeS;
.domDragDrop__reorderableDrop {
  position: absolute;
  width: 100%;
  top: 0;
  height: calc(100% + #{$reorderItemMargin / 2});
}

.domDragDrop-translatableDrop {
  transform: translateY(0);
  transition: transform $euiAnimSpeedFast ease-in-out;
  pointer-events: none;

  .domDragDrop-isDropTarget {
    @include mixinDomDraggable;
  }

  .domDragDrop-isActiveDropTarget {
    z-index: $domDragDropZLevel3;
  }
}

.domDragDrop-translatableDrag {
  transform: translateY(0);
  transition: transform $euiAnimSpeedFast ease-in-out;
  position: relative;
  z-index: $domDragDropZLevel1;
}

.domDragDrop__keyboardHandler {
  top: 0;
  position: absolute;
  width: 100%;
  height: 100%;
  border-radius: $euiBorderRadius;

  &:focus,
  &:focus-within {
    @include euiFocusRing;
    pointer-events: none;
    z-index: $domDragDropZLevel2;
  }
}

.domDragDrop__extraDrops {
  opacity: 0;
  visibility: hidden;
  position: absolute;
  z-index: $domDragDropZLevel2;
  right: calc(100% + #{$euiSizeS});
  top: 0;
  transition: opacity $euiAnimSpeedFast ease-in-out;
  width: 100%;
  max-width: $euiFormMaxWidth;
}

.domDragDrop__extraDrops-visible {
  opacity: 1;
  visibility: visible;
}

.domDragDrop__extraDropWrapper {
  position: relative;
  width: 100%;
  height: 100%;
  background: $euiColorLightestShade;
  border-radius: $euiSizeXS;

  .domDragDrop__extraDrop,
  .domDragDrop__extraDrop:before {
    border-radius: 0;
  }

  &:first-child .domDragDrop__extraDrop,
  &:first-child .domDragDrop__extraDrop:before {
    border-top-left-radius: $euiSizeXS;
    border-top-right-radius: $euiSizeXS;
  }

  &:last-child .domDragDrop__extraDrop,
  &:last-child .domDragDrop__extraDrop:before {
    border-bottom-left-radius: $euiSizeXS;
    border-bottom-right-radius: $euiSizeXS;
  }
}

// collapse borders
.domDragDrop__extraDropWrapper + .domDragDrop__extraDropWrapper {
  margin-top: -1px;
}

.domDragDrop__extraDrop {
  position: relative;
  height: $euiSizeXS * 8;
  min-width: $euiSize * 7;
  color: $euiColorSuccessText;
  padding: $euiSizeXS;
  &.domDragDrop-incompatibleExtraDrop {
    color: $euiColorWarningText;
  }
}

.domDragDrop__dropOverlayWrapper {
  position: relative;
  height: 100%;
}

.domDragDrop__dropOverlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: $domDragDropZLevel3;
  transition: $euiAnimSpeedFast ease-in-out;
  transition-property: background-color, border-color, opacity;

  .domDragDrop-isDropTarget & {
    @include mixinDomDroppable($euiBorderWidthThick);
    @include mixinDomDroppableActive($euiBorderWidthThick);
  }

  .domDragDrop-isActiveDropTarget & {
    @include mixinDomDroppableActiveHover($euiBorderWidthThick);
  }
}

.domDragDrop-isActiveGroup {
  background-color: transparentize($euiColorVis0, .75);
  .domDragDrop-isKeyboardReorderInProgress {
    .domDragDrop--isDragStarted {
      opacity: 1;
    }
  }
  .domDragDrop-isActiveDropTarget,
  .domDragDrop-isDropTarget {
    background: $euiColorEmptyShade !important;
  }
}

.domDragDrop--isDragStarted {
  opacity: .5;
}

// Draggable item when it is moving
.domDragDrop-isHidden {
  opacity: 0;
  .domDragDrop__keyboardHandler {
    &:focus,
    &:focus-within {
      animation: none;
    }
  }
}
