/* eslint-disable @kbn/eslint/require-license-header */
/* eslint-disable @typescript-eslint/unified-signatures */

/**
 * @notice
 *
 * These types are extracted from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/bb83a9839cb23195f3f0ac5a0ec61af879f194e9/types/mocha
 * and modified for use in the Kibana repository.
 *
 * This project is licensed under the MIT license.
 *
 * Copyrights are respective of each contributor listed at the beginning of each definition file.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

declare namespace Mocha {
  /**
   * Test context
   *
   * @see https://mochajs.org/api/module-Context.html#~Context
   */
  interface Context {
    /**
     * Get test timeout.
     */
    timeout(): number;

    /**
     * Set test timeout.
     */
    timeout(ms: string | number): this;

    /**
     * Get test slowness threshold.
     */
    slow(): number;

    /**
     * Set test slowness threshold.
     */
    slow(ms: string | number): this;

    /**
     * Mark a test as skipped.
     */
    skip(): never;

    /**
     * Get the number of allowed retries on failed tests.
     */
    retries(): number;

    /**
     * Set the number of allowed retries on failed tests.
     */
    retries(n: number): this;

    [key: string]: any;
  }

  type Done = (err?: any) => void;

  /**
   * Callback function used for tests and hooks.
   */
  type Func = (this: Context, done: Done) => void;

  /**
   * Async callback function used for tests and hooks.
   */
  type AsyncFunc = (this: Context) => PromiseLike<any>;

  interface Runnable {
    id: string;
    title: string;
    fn: Func | AsyncFunc | undefined;
    body: string;
    async: boolean;
    sync: boolean;
    timedOut: boolean;
    pending: boolean;
    duration?: number | undefined;
    parent?: Suite | undefined;
    state?: 'failed' | 'passed' | 'pending' | undefined;
    timer?: any;
    ctx?: Context | undefined;
    callback?: Done | undefined;
    allowUncaught?: boolean | undefined;
    file?: string | undefined;

    /**
     * Get test timeout.
     *
     * @see https://mochajs.org/api/Runnable.html#timeout
     */
    timeout(): number;

    /**
     * Set test timeout.
     *
     * @see https://mochajs.org/api/Runnable.html#timeout
     */
    timeout(ms: string | number): this;

    /**
     * Get test slowness threshold.
     *
     * @see https://mochajs.org/api/Runnable.html#slow
     */
    slow(): number;

    /**
     * Set test slowness threshold.
     *
     * @see https://mochajs.org/api/Runnable.html#slow
     */
    slow(ms: string | number): this;

    /**
     * Halt and mark as pending.
     */
    skip(): never;

    /**
     * Check if this runnable or its parent suite is marked as pending.
     *
     * @see https://mochajs.org/api/Runnable.html#isPending
     */
    isPending(): boolean;

    /**
     * Return `true` if this Runnable has failed.
     */
    isFailed(): boolean;

    /**
     * Return `true` if this Runnable has passed.
     */
    isPassed(): boolean;

    /**
     * Set or get number of retries.
     *
     * @see https://mochajs.org/api/Runnable.html#retries
     */
    retries(): number;

    /**
     * Set or get number of retries.
     *
     * @see https://mochajs.org/api/Runnable.html#retries
     */
    retries(n: number): void;

    /**
     * Set or get current retry
     *
     * @see https://mochajs.org/api/Runnable.html#currentRetry
     */
    protected currentRetry(): number;

    /**
     * Set or get current retry
     *
     * @see https://mochajs.org/api/Runnable.html#currentRetry
     */
    protected currentRetry(n: number): void;

    /**
     * Return the full title generated by recursively concatenating the parent's full title.
     */
    fullTitle(): string;

    /**
     * Return the title path generated by concatenating the parent's title path with the title.
     */
    titlePath(): string[];

    /**
     * Clear the timeout.
     *
     * @see https://mochajs.org/api/Runnable.html#clearTimeout
     */
    clearTimeout(): void;

    /**
     * Inspect the runnable void of private properties.
     *
     * @see https://mochajs.org/api/Runnable.html#inspect
     */
    inspect(): string;

    /**
     * Reset the timeout.
     *
     * @see https://mochajs.org/api/Runnable.html#resetTimeout
     */
    resetTimeout(): void;

    /**
     * Get a list of whitelisted globals for this test run.
     *
     * @see https://mochajs.org/api/Runnable.html#globals
     */
    globals(): string[];

    /**
     * Set a list of whitelisted globals for this test run.
     *
     * @see https://mochajs.org/api/Runnable.html#globals
     */
    globals(globals: readonly string[]): void;

    /**
     * Run the test and invoke `fn(err)`.
     *
     * @see https://mochajs.org/api/Runnable.html#run
     */
    run(fn: Done): void;
  }

  interface Suite {
    ctx: Context;
    suites: Suite[];
    tests: Test[];
    pending: boolean;
    file?: string | undefined;
    root: boolean;
    delayed: boolean;
    parent: Suite | undefined;
    title: string;

    /**
     * Return a clone of this `Suite`.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#clone
     */
    clone(): Suite;

    /**
     * Get timeout `ms`.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#timeout
     */
    timeout(): number;

    /**
     * Set timeout `ms` or short-hand such as "2s".
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#timeout
     */
    timeout(ms: string | number): this;

    /**
     * Get number of times to retry a failed test.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#retries
     */
    retries(): number;

    /**
     * Set number of times to retry a failed test.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#retries
     */
    retries(n: string | number): this;

    /**
     * Get slow `ms`.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#slow
     */
    slow(): number;

    /**
     * Set slow `ms` or short-hand such as "2s".
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#slow
     */
    slow(ms: string | number): this;

    /**
     * Get whether to bail after first error.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#bail
     */
    bail(): boolean;

    /**
     * Set whether to bail after first error.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#bail
     */
    bail(bail: boolean): this;

    /**
     * Check if this suite or its parent suite is marked as pending.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#isPending
     */
    isPending(): boolean;

    /**
     * Run `fn(test[, done])` before running tests.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll
     */
    beforeAll(fn?: Func): this;

    /**
     * Run `fn(test[, done])` before running tests.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll
     */
    beforeAll(fn?: AsyncFunc): this;

    /**
     * Run `fn(test[, done])` before running tests.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll
     */
    beforeAll(title: string, fn?: Func): this;

    /**
     * Run `fn(test[, done])` before running tests.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#beforeAll
     */
    beforeAll(title: string, fn?: AsyncFunc): this;

    /**
     * Run `fn(test[, done])` after running tests.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#afterAll
     */
    afterAll(fn?: Func): this;

    /**
     * Run `fn(test[, done])` after running tests.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#afterAll
     */
    afterAll(fn?: AsyncFunc): this;

    /**
     * Run `fn(test[, done])` after running tests.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#afterAll
     */
    afterAll(title: string, fn?: Func): this;

    /**
     * Run `fn(test[, done])` after running tests.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#afterAll
     */
    afterAll(title: string, fn?: AsyncFunc): this;

    /**
     * Run `fn(test[, done])` before each test case.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach
     */
    beforeEach(fn?: Func): this;

    /**
     * Run `fn(test[, done])` before each test case.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach
     */
    beforeEach(fn?: AsyncFunc): this;

    /**
     * Run `fn(test[, done])` before each test case.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach
     */
    beforeEach(title: string, fn?: Func): this;

    /**
     * Run `fn(test[, done])` before each test case.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#beforeEach
     */
    beforeEach(title: string, fn?: AsyncFunc): this;

    /**
     * Run `fn(test[, done])` after each test case.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#afterEach
     */
    afterEach(fn?: Func): this;

    /**
     * Run `fn(test[, done])` after each test case.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#afterEach
     */
    afterEach(fn?: AsyncFunc): this;

    /**
     * Run `fn(test[, done])` after each test case.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#afterEach
     */
    afterEach(title: string, fn?: Func): this;

    /**
     * Run `fn(test[, done])` after each test case.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#afterEach
     */
    afterEach(title: string, fn?: AsyncFunc): this;

    /**
     * Add a test `suite`.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#addSuite
     */
    addSuite(suite: Suite): this;

    /**
     * Add a `test` to this suite.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#addTest
     */
    addTest(test: Test): this;

    /**
     * Cleans all references from this suite and all child suites.
     *
     * https://mochajs.org/api/suite#dispose
     */
    dispose(): void;

    /**
     * Return the full title generated by recursively concatenating the parent's
     * full title.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#.Suite#fullTitle
     */
    fullTitle(): string;

    /**
     * Return the title path generated by recursively concatenating the parent's
     * title path.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#.Suite#titlePath
     */
    titlePath(): string[];

    /**
     * Return the total number of tests.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#.Suite#total
     */
    total(): number;

    /**
     * Iterates through each suite recursively to find all tests. Applies a
     * function in the format `fn(test)`.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#eachTest
     */
    eachTest(fn: (test: Test) => void): this;

    /**
     * This will run the root suite if we happen to be running in delayed mode.
     *
     * @see https://mochajs.org/api/Mocha.Suite.html#run
     */
    run(): void;

    /**
     * Attach the given tag(s) to this suite so that the suite can be applied
     * via `--include-tag` or `--exclude-tag` CLI flags.
     */
    tags(tags: string | string[]): void;

    /**
     * A required version range for ES. When these tests are run against an ES
     * instance that is not within the given version range, the tests in this
     * suite will be automatically skipped.
     *
     * @param {string} semver A semver version range, like ">=8".
     *  See https://docs.npmjs.com/cli/v6/using-npm/semver#ranges for
     *  information about syntax
     */
    onlyEsVersion(semver: string): void;
  }

  /**
   * Initialize a new `Test` with the given `title` and callback `fn`.
   *
   * @see https://mochajs.org/api/Test.html
   */
  interface Test extends Runnable {
    type: 'test';
    speed?: 'slow' | 'medium' | 'fast' | undefined; // added by reporters
    err?: Error | undefined; // added by reporters
    clone(): Test;
  }

  interface HookFunction {
    /**
     * [bdd, qunit, tdd] Describe a "hook" to execute the given callback `fn`. The name of the
     * function is used as the name of the hook.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (fn: Func): void;

    /**
     * [bdd, qunit, tdd] Describe a "hook" to execute the given callback `fn`. The name of the
     * function is used as the name of the hook.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (fn: AsyncFunc): void;

    /**
     * [bdd, qunit, tdd] Describe a "hook" to execute the given `title` and callback `fn`.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (name: string, fn?: Func): void;

    /**
     * [bdd, qunit, tdd] Describe a "hook" to execute the given `title` and callback `fn`.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (name: string, fn?: AsyncFunc): void;
  }

  interface SuiteFunction {
    /**
     * [bdd, tdd] Describe a "suite" with the given `title` and callback `fn` containing
     * nested suites.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (title: string, fn: (this: Suite) => void): Suite;

    /**
     * [qunit] Describe a "suite" with the given `title`.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (title: string): Suite;

    /**
     * [bdd, tdd, qunit] Indicates this suite should be executed exclusively.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    only: ExclusiveSuiteFunction;

    /**
     * [bdd, tdd] Indicates this suite should not be executed.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    skip: PendingSuiteFunction;
  }

  interface ExclusiveSuiteFunction {
    /**
     * [bdd, tdd] Describe a "suite" with the given `title` and callback `fn` containing
     * nested suites. Indicates this suite should be executed exclusively.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (title: string, fn: (this: Suite) => void): Suite;

    /**
     * [qunit] Describe a "suite" with the given `title`. Indicates this suite should be executed
     * exclusively.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (title: string): Suite;
  }

  /**
   * [bdd, tdd] Describe a "suite" with the given `title` and callback `fn` containing
   * nested suites. Indicates this suite should not be executed.
   *
   * - _Only available when invoked via the mocha CLI._
   *
   * @returns [bdd] `Suite`
   * @returns [tdd] `void`
   */
  type PendingSuiteFunction = (title: string, fn: (this: Suite) => void) => Suite | void;

  interface TestFunction {
    /**
     * Describe a specification or test-case with the given callback `fn` acting as a thunk.
     * The name of the function is used as the name of the test.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (fn: Func): Test;

    /**
     * Describe a specification or test-case with the given callback `fn` acting as a thunk.
     * The name of the function is used as the name of the test.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (fn: AsyncFunc): Test;

    /**
     * Describe a specification or test-case with the given `title` and callback `fn` acting
     * as a thunk.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (title: string, fn?: Func): Test;

    /**
     * Describe a specification or test-case with the given `title` and callback `fn` acting
     * as a thunk.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (title: string, fn?: AsyncFunc): Test;

    /**
     * Indicates this test should be executed exclusively.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    only: ExclusiveTestFunction;

    /**
     * Indicates this test should not be executed.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    skip: PendingTestFunction;

    /**
     * Number of attempts to retry.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    retries(n: number): void;
  }

  interface ExclusiveTestFunction {
    /**
     * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`
     * acting as a thunk. The name of the function is used as the name of the test. Indicates
     * this test should be executed exclusively.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (fn: Func): Test;

    /**
     * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`
     * acting as a thunk. The name of the function is used as the name of the test. Indicates
     * this test should be executed exclusively.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (fn: AsyncFunc): Test;

    /**
     * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and
     * callback `fn` acting as a thunk. Indicates this test should be executed exclusively.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (title: string, fn?: Func): Test;

    /**
     * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and
     * callback `fn` acting as a thunk. Indicates this test should be executed exclusively.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (title: string, fn?: AsyncFunc): Test;
  }

  interface PendingTestFunction {
    /**
     * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`
     * acting as a thunk. The name of the function is used as the name of the test. Indicates
     * this test should not be executed.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (fn: Func): Test;

    /**
     * [bdd, tdd, qunit] Describe a specification or test-case with the given callback `fn`
     * acting as a thunk. The name of the function is used as the name of the test. Indicates
     * this test should not be executed.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (fn: AsyncFunc): Test;

    /**
     * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and
     * callback `fn` acting as a thunk. Indicates this test should not be executed.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (title: string, fn?: Func): Test;

    /**
     * [bdd, tdd, qunit] Describe a specification or test-case with the given `title` and
     * callback `fn` acting as a thunk. Indicates this test should not be executed.
     *
     * - _Only available when invoked via the mocha CLI._
     */
    (title: string, fn?: AsyncFunc): Test;
  }

  /**
   * Execute after each test case.
   *
   * - _Only available when invoked via the mocha CLI._
   *
   * @see https://mochajs.org/api/global.html#afterEach
   */
  let afterEach: HookFunction;

  /**
   * Execute after running tests.
   *
   * - _Only available when invoked via the mocha CLI._
   *
   * @see https://mochajs.org/api/global.html#after
   */
  let after: HookFunction;

  /**
   * Execute before each test case.
   *
   * - _Only available when invoked via the mocha CLI._
   *
   * @see https://mochajs.org/api/global.html#beforeEach
   */
  let beforeEach: HookFunction;

  /**
   * Execute before running tests.
   *
   * - _Only available when invoked via the mocha CLI._
   *
   * @see https://mochajs.org/api/global.html#before
   */
  let before: HookFunction;

  /**
   * Describe a "suite" containing nested suites and tests.
   *
   * - _Only available when invoked via the mocha CLI._
   */
  let describe: SuiteFunction;

  /**
   * Describe a pending suite.
   *
   * - _Only available when invoked via the mocha CLI._
   */
  let xdescribe: PendingSuiteFunction;

  /**
   * Describes a test case.
   *
   * - _Only available when invoked via the mocha CLI._
   */
  let it: TestFunction;

  /**
   * Describes a pending test case.
   *
   * - _Only available when invoked via the mocha CLI._
   */
  let xit: PendingTestFunction;

  /**
   * Execute before each test case.
   *
   * - _Only available when invoked via the mocha CLI._
   *
   * @see https://mochajs.org/api/global.html#beforeEach
   */
  let setup: HookFunction;

  /**
   * Execute before running tests.
   *
   * - _Only available when invoked via the mocha CLI._
   *
   * @see https://mochajs.org/api/global.html#before
   */
  let suiteSetup: HookFunction;

  /**
   * Execute after running tests.
   *
   * - _Only available when invoked via the mocha CLI._
   *
   * @see https://mochajs.org/api/global.html#after
   */
  let suiteTeardown: HookFunction;

  /**
   * Describe a "suite" containing nested suites and tests.
   *
   * - _Only available when invoked via the mocha CLI._
   */
  let suite: SuiteFunction;

  /**
   * Execute after each test case.
   *
   * - _Only available when invoked via the mocha CLI._
   *
   * @see https://mochajs.org/api/global.html#afterEach
   */
  let teardown: HookFunction;

  /**
   * Describes a test case.
   *
   * - _Only available when invoked via the mocha CLI._
   */
  let test: TestFunction;
}

/**
 * Execute before running tests.
 *
 * - _Only available when invoked via the mocha CLI._
 *
 * @see https://mochajs.org/api/global.html#before
 */
declare let before: Mocha.HookFunction;

/**
 * Execute before running tests.
 *
 * - _Only available when invoked via the mocha CLI._
 *
 * @see https://mochajs.org/api/global.html#before
 */
declare let suiteSetup: Mocha.HookFunction;

/**
 * Execute after running tests.
 *
 * - _Only available when invoked via the mocha CLI._
 *
 * @see https://mochajs.org/api/global.html#after
 */
declare let after: Mocha.HookFunction;

/**
 * Execute after running tests.
 *
 * - _Only available when invoked via the mocha CLI._
 *
 * @see https://mochajs.org/api/global.html#after
 */
declare let suiteTeardown: Mocha.HookFunction;

/**
 * Execute before each test case.
 *
 * - _Only available when invoked via the mocha CLI._
 *
 * @see https://mochajs.org/api/global.html#beforeEach
 */
declare let beforeEach: Mocha.HookFunction;

/**
 * Execute before each test case.
 *
 * - _Only available when invoked via the mocha CLI._
 *
 * @see https://mochajs.org/api/global.html#beforeEach
 */
declare let setup: Mocha.HookFunction;

/**
 * Execute after each test case.
 *
 * - _Only available when invoked via the mocha CLI._
 *
 * @see https://mochajs.org/api/global.html#afterEach
 */
declare let afterEach: Mocha.HookFunction;

/**
 * Execute after each test case.
 *
 * - _Only available when invoked via the mocha CLI._
 *
 * @see https://mochajs.org/api/global.html#afterEach
 */
declare let teardown: Mocha.HookFunction;

/**
 * Describe a "suite" containing nested suites and tests.
 *
 * - _Only available when invoked via the mocha CLI._
 */
declare let describe: Mocha.SuiteFunction;

/**
 * Describe a "suite" containing nested suites and tests.
 *
 * - _Only available when invoked via the mocha CLI._
 */
declare let context: Mocha.SuiteFunction;

/**
 * Describe a "suite" containing nested suites and tests.
 *
 * - _Only available when invoked via the mocha CLI._
 */
declare let suite: Mocha.SuiteFunction;

/**
 * Pending suite.
 *
 * - _Only available when invoked via the mocha CLI._
 */
declare let xdescribe: Mocha.PendingSuiteFunction;

/**
 * Pending suite.
 *
 * - _Only available when invoked via the mocha CLI._
 */
declare let xcontext: Mocha.PendingSuiteFunction;

/**
 * Describes a test case.
 *
 * - _Only available when invoked via the mocha CLI._
 */
declare let it: Mocha.TestFunction;

/**
 * Describes a test case.
 *
 * - _Only available when invoked via the mocha CLI._
 */
declare let specify: Mocha.TestFunction;

/**
 * Describes a test case.
 *
 * - _Only available when invoked via the mocha CLI._
 */
declare let test: Mocha.TestFunction;

/**
 * Describes a pending test case.
 *
 * - _Only available when invoked via the mocha CLI._
 */
declare let xit: Mocha.PendingTestFunction;

/**
 * Describes a pending test case.
 *
 * - _Only available when invoked via the mocha CLI._
 */
declare let xspecify: Mocha.PendingTestFunction;
