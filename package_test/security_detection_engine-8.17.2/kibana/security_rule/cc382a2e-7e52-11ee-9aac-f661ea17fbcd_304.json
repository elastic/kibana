{
  "attributes": {
    "author": [
      "Elastic"
    ],
    "description": "This rule detects when a specific Okta actor has multiple device token hashes for a single Okta session. This may indicate an authenticated session has been hijacked or is being used by multiple devices. Adversaries may hijack a session to gain unauthorized access to Okta admin console, applications, tenants, or other resources.",
    "from": "now-9m",
    "language": "esql",
    "license": "Elastic License v2",
    "name": "Multiple Device Token Hashes for Single Okta Session",
    "note": "## Triage and analysis\n\n### Investigating Multiple Device Token Hashes for Single Okta Session\n\nThis rule detects when a specific Okta actor has multiple device token hashes for a single Okta session. This may indicate an authenticated session has been hijacked or is being used by multiple devices. Adversaries may hijack a session to gain unauthorized access to Okta admin console, applications, tenants, or other resources.\n\n#### Possible investigation steps:\n- Since this is an ES|QL rule, the `okta.actor.alternate_id` and `okta.authentication_context.external_session_id` values can be used to pivot into the raw authentication events related to this alert.\n- Identify the users involved in this action by examining the `okta.actor.id`, `okta.actor.type`, `okta.actor.alternate_id`, and `okta.actor.display_name` fields.\n- Determine the device client used for these actions by analyzing `okta.client.ip`, `okta.client.user_agent.raw_user_agent`, `okta.client.zone`, `okta.client.device`, and `okta.client.id` fields.\n- With Okta end users identified, review the `okta.debug_context.debug_data.dt_hash` field.\n    - Historical analysis should indicate if this device token hash is commonly associated with the user.\n- Review the `okta.event_type` field to determine the type of authentication event that occurred.\n    - Authentication events have been filtered out to focus on Okta activity via established sessions.\n- Review the past activities of the actor(s) involved in this action by checking their previous actions.\n- Evaluate the actions that happened just before and after this event in the `okta.event_type` field to help understand the full context of the activity.\n    - This may help determine the authentication and authorization actions that occurred between the user, Okta and application.\n- Aggregate by `okta.actor.alternate_id` and `event.action` to determine the type of actions that are being performed by the actor(s) involved in this action.\n    - If various activity is reported that seems to indicate actions from separate users, consider deactivating the user's account temporarily.\n\n### False positive analysis:\n- It is very rare that a legitimate user would have multiple device token hashes for a single Okta session as DT hashes do not change after an authenticated session is established.\n\n### Response and remediation:\n- Consider stopping all sessions for the user(s) involved in this action.\n- If this does not appear to be a false positive, consider resetting passwords for the users involved and enabling multi-factor authentication (MFA).\n    - If MFA is already enabled, consider resetting MFA for the users.\n- If any of the users are not legitimate, consider deactivating the user's account.\n- Conduct a review of Okta policies and ensure they are in accordance with security best practices.\n- Check with internal IT teams to determine if the accounts involved recently had MFA reset at the request of the user.\n    - If so, confirm with the user this was a legitimate request.\n    - If so and this was not a legitimate request, consider deactivating the user's account temporarily.\n        - Reset passwords and reset MFA for the user.\n- Alternatively adding `okta.client.ip` or a CIDR range to the `exceptions` list can prevent future occurrences of this event from triggering the rule.\n    - This should be done with caution as it may prevent legitimate alerts from being generated.\n",
    "query": "FROM logs-okta*\n| WHERE\n    event.dataset == \"okta.system\"\n    // ignore authentication events where session and device token hash change often\n    AND NOT event.action IN (\n        \"policy.evaluate_sign_on\",\n        \"user.session.start\",\n        \"user.authentication.sso\"\n    )\n    // ignore Okta system events and only allow registered users\n    AND (\n        okta.actor.alternate_id != \"system@okta.com\"\n        AND okta.actor.alternate_id RLIKE \"[^@\\\\s]+\\\\@[^@\\\\s]+\"\n    )\n    AND okta.authentication_context.external_session_id != \"unknown\"\n| KEEP event.action, okta.actor.alternate_id, okta.authentication_context.external_session_id, okta.debug_context.debug_data.dt_hash\n| STATS\n    dt_hash_counts = COUNT_DISTINCT(okta.debug_context.debug_data.dt_hash) BY\n        okta.actor.alternate_id,\n        okta.authentication_context.external_session_id\n| WHERE\n    dt_hash_counts >= 2\n| SORT\n    dt_hash_counts DESC\n",
    "references": [
      "https://developer.okta.com/docs/reference/api/system-log/",
      "https://developer.okta.com/docs/reference/api/event-types/",
      "https://www.elastic.co/security-labs/testing-okta-visibility-and-detection-dorothy",
      "https://sec.okta.com/articles/2023/08/cross-tenant-impersonation-prevention-and-detection",
      "https://support.okta.com/help/s/article/session-hijacking-attack-definition-damage-defense?language=en_US",
      "https://www.elastic.co/security-labs/monitoring-okta-threats-with-elastic-security",
      "https://www.elastic.co/security-labs/starter-guide-to-understanding-okta"
    ],
    "risk_score": 47,
    "rule_id": "cc382a2e-7e52-11ee-9aac-f661ea17fbcd",
    "setup": "## Setup\n\nThe Okta Fleet integration, Filebeat module, or similarly structured data is required to be compatible with this rule.",
    "severity": "medium",
    "tags": [
      "Use Case: Identity and Access Audit",
      "Data Source: Okta",
      "Tactic: Credential Access",
      "Domain: SaaS"
    ],
    "threat": [
      {
        "framework": "MITRE ATT&CK",
        "tactic": {
          "id": "TA0006",
          "name": "Credential Access",
          "reference": "https://attack.mitre.org/tactics/TA0006/"
        },
        "technique": [
          {
            "id": "T1539",
            "name": "Steal Web Session Cookie",
            "reference": "https://attack.mitre.org/techniques/T1539/"
          }
        ]
      }
    ],
    "timestamp_override": "event.ingested",
    "type": "esql",
    "version": 304
  },
  "id": "cc382a2e-7e52-11ee-9aac-f661ea17fbcd_304",
  "type": "security-rule"
}