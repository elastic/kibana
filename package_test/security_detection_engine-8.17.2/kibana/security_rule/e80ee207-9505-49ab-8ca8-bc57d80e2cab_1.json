{
  "attributes": {
    "author": [
      "Elastic"
    ],
    "description": "This detection rule addresses multiple vulnerabilities in the CUPS printing system, including CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, and CVE-2024-47177. Specifically, this rule detects network connections initiated by a child processes of foomatic-rip. These flaws impact components like cups-browsed, libcupsfilters, libppd, and foomatic-rip, allowing remote unauthenticated attackers to manipulate IPP URLs or inject malicious data through crafted UDP packets or network spoofing. This can result in arbitrary command execution when a print job is initiated.",
    "from": "now-9m",
    "index": [
      "logs-endpoint.events.*"
    ],
    "language": "eql",
    "license": "Elastic License v2",
    "name": "Network Connection by Cups or Foomatic-rip Child",
    "note": "## Triage and analysis\n\n### Investigating Network Connection by Cups or Foomatic-rip Child\n\nThis rule identifies potential exploitation attempts of several vulnerabilities in the CUPS printing system (CVE-2024-47176, CVE-2024-47076, CVE-2024-47175, CVE-2024-47177). These vulnerabilities allow attackers to send crafted IPP requests or manipulate UDP packets to execute arbitrary commands or modify printer configurations. Attackers can exploit these flaws to inject malicious data, leading to Remote Code Execution (RCE) on affected systems.\n\n#### Possible Investigation Steps\n\n- Investigate the incoming IPP requests or UDP packets targeting port 631.\n- Examine the printer configurations on the system to determine if any unauthorized printers or URLs have been added.\n- Investigate the process tree to check if any unexpected processes were triggered as a result of IPP activity. Review the executable files for legitimacy.\n- Check for additional alerts related to the compromised system or user within the last 48 hours.\n- Investigate network traffic logs for suspicious outbound connections to unrecognized domains or IP addresses.\n- Check if any of the contacted domains or addresses are newly registered or have a suspicious reputation.\n- Retrieve any scripts or executables dropped by the attack for further analysis in a private sandbox environment:\n- Analyze potential malicious activity, including:\n  - Attempts to communicate with external servers.\n  - File access or creation of unauthorized executables.\n  - Cron jobs, services, or other persistence mechanisms.\n\n### Related Rules\n- Cupsd or Foomatic-rip Shell Execution - 476267ff-e44f-476e-99c1-04c78cb3769d\n- Printer User (lp) Shell Execution - f86cd31c-5c7e-4481-99d7-6875a3e31309\n- Suspicious Execution from Foomatic-rip or Cupsd Parent - 986361cd-3dac-47fe-afa1-5c5dd89f2fb4\n- File Creation by Cups or Foomatic-rip Child - b9b14be7-b7f4-4367-9934-81f07d2f63c4\n\n### False Positive Analysis\n\n- This activity is rarely legitimate. However, verify the context to rule out non-malicious printer configuration changes or legitimate IPP requests.\n\n### Response and Remediation\n\n- Initiate the incident response process based on the triage outcome.\n- Isolate the compromised host to prevent further exploitation.\n- If the investigation confirms malicious activity, search the environment for additional compromised hosts.\n- Implement network segmentation or restrictions to contain the attack.\n- Stop suspicious processes or services tied to CUPS exploitation.\n- Block identified Indicators of Compromise (IoCs), including IP addresses, domains, or hashes of involved files.\n- Review compromised systems for backdoors, such as reverse shells or persistence mechanisms like cron jobs.\n- Investigate potential credential exposure on compromised systems and reset passwords for any affected accounts.\n- Restore the original printer configurations or uninstall unauthorized printer entries.\n- Perform a thorough antimalware scan to identify any lingering threats or artifacts from the attack.\n- Investigate how the attacker gained initial access and address any weaknesses to prevent future exploitation.\n- Use insights from the incident to improve detection and response times in future incidents (MTTD and MTTR).\n",
    "query": "sequence by host.id with maxspan=10s\n  [process where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and\n   process.parent.name == \"foomatic-rip\" and\n   process.name in (\"bash\", \"dash\", \"sh\", \"tcsh\", \"csh\", \"zsh\", \"ksh\", \"fish\")] by process.entity_id\n  [network where host.os.type == \"linux\" and event.type == \"start\" and\n   event.action == \"connection_attempted\"] by process.parent.entity_id\n",
    "references": [
      "https://www.elastic.co/security-labs/cups-overflow",
      "https://www.evilsocket.net/2024/09/26/Attacking-UNIX-systems-via-CUPS-Part-I/",
      "https://gist.github.com/stong/c8847ef27910ae344a7b5408d9840ee1",
      "https://github.com/RickdeJager/cupshax/blob/main/cupshax.py"
    ],
    "related_integrations": [
      {
        "package": "endpoint",
        "version": "^8.2.0"
      }
    ],
    "required_fields": [
      {
        "ecs": true,
        "name": "event.action",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "event.type",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "host.id",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "host.os.type",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.entity_id",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.name",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.parent.entity_id",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.parent.name",
        "type": "keyword"
      }
    ],
    "risk_score": 73,
    "rule_id": "e80ee207-9505-49ab-8ca8-bc57d80e2cab",
    "setup": "## Setup\n\nThis rule requires data coming in from Elastic Defend.\n\n### Elastic Defend Integration Setup\nElastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.\n\n#### Prerequisite Requirements:\n- Fleet is required for Elastic Defend.\n- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).\n\n#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:\n- Go to the Kibana home page and click \"Add integrations\".\n- In the query bar, search for \"Elastic Defend\" and select the integration to see more details about it.\n- Click \"Add Elastic Defend\".\n- Configure the integration name and optionally add a description.\n- Select the type of environment you want to protect, either \"Traditional Endpoints\" or \"Cloud Workloads\".\n- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).\n- We suggest selecting \"Complete EDR (Endpoint Detection and Response)\" as a configuration setting, that provides \"All events; all preventions\"\n- Enter a name for the agent policy in \"New agent policy name\". If other agent policies already exist, you can click the \"Existing hosts\" tab and select an existing policy instead.\nFor more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).\n- Click \"Save and Continue\".\n- To complete the integration, select \"Add Elastic Agent to your hosts\" and continue to the next section to install the Elastic Agent on your hosts.\nFor more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).\n",
    "severity": "high",
    "tags": [
      "Domain: Endpoint",
      "OS: Linux",
      "Use Case: Threat Detection",
      "Use Case: Vulnerability",
      "Tactic: Command and Control",
      "Data Source: Elastic Defend"
    ],
    "threat": [
      {
        "framework": "MITRE ATT&CK",
        "tactic": {
          "id": "TA0011",
          "name": "Command and Control",
          "reference": "https://attack.mitre.org/tactics/TA0011/"
        },
        "technique": []
      },
      {
        "framework": "MITRE ATT&CK",
        "tactic": {
          "id": "TA0002",
          "name": "Execution",
          "reference": "https://attack.mitre.org/tactics/TA0002/"
        },
        "technique": [
          {
            "id": "T1203",
            "name": "Exploitation for Client Execution",
            "reference": "https://attack.mitre.org/techniques/T1203/"
          }
        ]
      },
      {
        "framework": "MITRE ATT&CK",
        "tactic": {
          "id": "TA0005",
          "name": "Defense Evasion",
          "reference": "https://attack.mitre.org/tactics/TA0005/"
        },
        "technique": []
      },
      {
        "framework": "MITRE ATT&CK",
        "tactic": {
          "id": "TA0010",
          "name": "Exfiltration",
          "reference": "https://attack.mitre.org/tactics/TA0010/"
        },
        "technique": []
      }
    ],
    "type": "eql",
    "version": 1
  },
  "id": "e80ee207-9505-49ab-8ca8-bc57d80e2cab_1",
  "type": "security-rule"
}