{
  "attributes": {
    "author": [
      "Elastic"
    ],
    "description": "Identifies unusual child processes of Service Host (svchost.exe) that traditionally do not spawn any child processes. This may indicate a code injection or an equivalent form of exploitation.",
    "false_positives": [
      "Changes to Windows services or a rarely executed child process."
    ],
    "from": "now-9m",
    "index": [
      "logs-endpoint.events.process-*",
      "winlogbeat-*",
      "logs-windows.sysmon_operational-*",
      "endgame-*"
    ],
    "language": "eql",
    "license": "Elastic License v2",
    "name": "Unusual Service Host Child Process - Childless Service",
    "query": "process where host.os.type == \"windows\" and event.type == \"start\" and\n  process.parent.name : \"svchost.exe\" and\n\n  /* based on svchost service arguments -s svcname where the service is known to be childless */\n  process.parent.args : (\n    \"WdiSystemHost\", \"LicenseManager\", \"StorSvc\", \"CDPSvc\", \"cdbhsvc\", \"BthAvctpSvc\", \"SstpSvc\", \"WdiServiceHost\",\n    \"imgsvc\", \"TrkWks\", \"WpnService\", \"IKEEXT\", \"PolicyAgent\", \"CryptSvc\", \"netprofm\", \"ProfSvc\", \"StateRepository\",\n    \"camsvc\", \"LanmanWorkstation\", \"NlaSvc\", \"EventLog\", \"hidserv\", \"DisplayEnhancementService\", \"ShellHWDetection\",\n    \"AppHostSvc\", \"fhsvc\", \"CscService\", \"PushToInstall\"\n  ) and\n\n  /* unknown FPs can be added here */\n  not process.name : (\"WerFault.exe\", \"WerFaultSecure.exe\", \"wermgr.exe\") and\n  not (process.executable : \"?:\\\\Windows\\\\System32\\\\RelPost.exe\" and process.parent.args : \"WdiSystemHost\") and\n  not (\n    process.name : \"rundll32.exe\" and\n    process.args : \"?:\\\\WINDOWS\\\\System32\\\\winethc.dll,ForceProxyDetectionOnNextRun\" and\n    process.parent.args : \"WdiServiceHost\"\n  ) and\n  not (\n    process.executable : (\n      \"?:\\\\Program Files\\\\*\",\n      \"?:\\\\Program Files (x86)\\\\*\",\n      \"?:\\\\Windows\\\\System32\\\\Kodak\\\\kds_?????\\\\lib\\\\lexexe.exe\"\n    ) and process.parent.args : \"imgsvc\"\n  )\n",
    "related_integrations": [
      {
        "package": "endpoint",
        "version": "^8.2.0"
      },
      {
        "package": "windows",
        "version": "^1.5.0"
      }
    ],
    "required_fields": [
      {
        "ecs": true,
        "name": "event.type",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "host.os.type",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.args",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.executable",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.name",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.parent.args",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.parent.name",
        "type": "keyword"
      }
    ],
    "risk_score": 47,
    "rule_id": "6a8ab9cc-4023-4d17-b5df-1a3e16882ce7",
    "setup": "## Setup\n\nIf enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,\nevents will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.\nHence for this rule to work effectively, users will need to add a custom ingest pipeline to populate\n`event.ingested` to @timestamp.\nFor more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html\n",
    "severity": "medium",
    "tags": [
      "Domain: Endpoint",
      "OS: Windows",
      "Use Case: Threat Detection",
      "Tactic: Defense Evasion",
      "Tactic: Privilege Escalation",
      "Data Source: Elastic Endgame",
      "Data Source: Elastic Defend",
      "Data Source: Sysmon"
    ],
    "threat": [
      {
        "framework": "MITRE ATT&CK",
        "tactic": {
          "id": "TA0004",
          "name": "Privilege Escalation",
          "reference": "https://attack.mitre.org/tactics/TA0004/"
        },
        "technique": [
          {
            "id": "T1055",
            "name": "Process Injection",
            "reference": "https://attack.mitre.org/techniques/T1055/",
            "subtechnique": [
              {
                "id": "T1055.012",
                "name": "Process Hollowing",
                "reference": "https://attack.mitre.org/techniques/T1055/012/"
              }
            ]
          }
        ]
      },
      {
        "framework": "MITRE ATT&CK",
        "tactic": {
          "id": "TA0005",
          "name": "Defense Evasion",
          "reference": "https://attack.mitre.org/tactics/TA0005/"
        },
        "technique": [
          {
            "id": "T1055",
            "name": "Process Injection",
            "reference": "https://attack.mitre.org/techniques/T1055/",
            "subtechnique": [
              {
                "id": "T1055.012",
                "name": "Process Hollowing",
                "reference": "https://attack.mitre.org/techniques/T1055/012/"
              }
            ]
          }
        ]
      }
    ],
    "timestamp_override": "event.ingested",
    "type": "eql",
    "version": 110
  },
  "id": "6a8ab9cc-4023-4d17-b5df-1a3e16882ce7_110",
  "type": "security-rule"
}