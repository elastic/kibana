{
  "attributes": {
    "author": [
      "Elastic"
    ],
    "description": "Monitors for the generation of a passwd password entry via openssl, followed by a file write activity on the \"/etc/passwd\" file. The \"/etc/passwd\" file in Linux stores user account information, including usernames, user IDs, group IDs, home directories, and default shell paths. Attackers may exploit a misconfiguration in the \"/etc/passwd\" file permissions or other privileges to add a new entry to the \"/etc/passwd\" file with root permissions, and leverage this new user account to login as root.",
    "from": "now-9m",
    "index": [
      "logs-endpoint.events.*",
      "logs-auditd_manager.auditd-*"
    ],
    "language": "eql",
    "license": "Elastic License v2",
    "name": "Suspicious Passwd File Event Action",
    "query": "sequence by host.id, process.parent.pid with maxspan=1m\n  [process where host.os.type == \"linux\" and event.type == \"start\" and event.action == \"exec\" and\n   process.name == \"openssl\" and process.args == \"passwd\" and user.id != \"0\"]\n  [file where host.os.type == \"linux\" and file.path == \"/etc/passwd\" and process.parent.pid != 1 and\n   not auditd.data.a2 == \"80000\" and event.outcome == \"success\" and user.id != \"0\"]\n",
    "related_integrations": [
      {
        "package": "endpoint",
        "version": "^8.2.0"
      },
      {
        "package": "auditd_manager",
        "version": "^1.0.0"
      }
    ],
    "required_fields": [
      {
        "ecs": false,
        "name": "auditd.data.a2",
        "type": "unknown"
      },
      {
        "ecs": true,
        "name": "event.action",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "event.outcome",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "event.type",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "file.path",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "host.id",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "host.os.type",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.args",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.name",
        "type": "keyword"
      },
      {
        "ecs": true,
        "name": "process.parent.pid",
        "type": "long"
      },
      {
        "ecs": true,
        "name": "user.id",
        "type": "keyword"
      }
    ],
    "risk_score": 47,
    "rule_id": "71d6a53d-abbd-40df-afee-c21fff6aafb0",
    "setup": "\nThis rule requires data coming in from Elastic Defend and Auditd Manager.\n\n### Elastic Defend Integration Setup\nElastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows\nthe Elastic Agent to monitor events on your host and send data to the Elastic Security app.\n\n#### Prerequisite Requirements:\n- Fleet is required for Elastic Defend.\n- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).\n\n#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:\n- Go to the Kibana home page and click \"Add integrations\".\n- In the query bar, search for \"Elastic Defend\" and select the integration to see more details about it.\n- Click \"Add Elastic Defend\".\n- Configure the integration name and optionally add a description.\n- Select the type of environment you want to protect, either \"Traditional Endpoints\" or \"Cloud Workloads\".\n- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).\n- We suggest to select \"Complete EDR (Endpoint Detection and Response)\" as a configuration setting, that provides \"All events; all preventions\"\n- Enter a name for the agent policy in \"New agent policy name\". If other agent policies already exist, you can click the \"Existing hosts\" tab and select an existing policy instead.\nFor more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).\n- Click \"Save and Continue\".\n- To complete the integration, select \"Add Elastic Agent to your hosts\" and continue to the next section to install the Elastic Agent on your hosts.\nFor more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).\n\n### Auditd Manager Integration Setup\nThe Auditd Manager Integration receives audit events from the Linux Audit Framework which is a part of the Linux kernel.\nAuditd Manager provides a user-friendly interface and automation capabilities for configuring and monitoring system auditing through the auditd daemon. With `auditd_manager`, administrators can easily define audit rules, track system events, and generate comprehensive audit reports, improving overall security and compliance in the system.\n\n#### The following steps should be executed in order to add the Elastic Agent System integration \"auditd_manager\" on a Linux System:\n- Go to the Kibana home page and click “Add integrations”.\n- In the query bar, search for “Auditd Manager” and select the integration to see more details about it.\n- Click “Add Auditd Manager”.\n- Configure the integration name and optionally add a description.\n- Review optional and advanced settings accordingly.\n- Add the newly installed “auditd manager” to an existing or a new agent policy, and deploy the agent on a Linux system from which auditd log files are desirable.\n- Click “Save and Continue”.\n- For more details on the integration refer to the [helper guide](https://docs.elastic.co/integrations/auditd_manager).\n\n#### Rule Specific Setup Note\nAuditd Manager subscribes to the kernel and receives events as they occur without any additional configuration.\nHowever, if more advanced configuration is required to detect specific behavior, audit rules can be added to the integration in either the \"audit rules\" configuration box or the \"auditd rule files\" box by specifying a file to read the audit rules from.\n- For this detection rule the following additional audit rules are required to be added to the integration:\n  -- \"-w /etc/passwd -p wa -k etcpasswd\"\n\n",
    "severity": "medium",
    "tags": [
      "Data Source: Auditd Manager",
      "Domain: Endpoint",
      "OS: Linux",
      "Use Case: Threat Detection",
      "Tactic: Privilege Escalation",
      "Data Source: Elastic Defend"
    ],
    "threat": [
      {
        "framework": "MITRE ATT&CK",
        "tactic": {
          "id": "TA0004",
          "name": "Privilege Escalation",
          "reference": "https://attack.mitre.org/tactics/TA0004/"
        },
        "technique": [
          {
            "id": "T1068",
            "name": "Exploitation for Privilege Escalation",
            "reference": "https://attack.mitre.org/techniques/T1068/"
          }
        ]
      }
    ],
    "type": "eql",
    "version": 2
  },
  "id": "71d6a53d-abbd-40df-afee-c21fff6aafb0_2",
  "type": "security-rule"
}