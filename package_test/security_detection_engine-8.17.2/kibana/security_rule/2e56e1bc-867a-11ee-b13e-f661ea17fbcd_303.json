{
  "attributes": {
    "author": [
      "Elastic"
    ],
    "description": "Detects when a specific Okta actor has multiple sessions started from different geolocations. Adversaries may attempt to launch an attack by using a list of known usernames and passwords to gain unauthorized access to user accounts from different locations.",
    "from": "now-30m",
    "interval": "15m",
    "language": "esql",
    "license": "Elastic License v2",
    "name": "Okta User Sessions Started from Different Geolocations",
    "note": "\n## Triage and analysis\n\n### Investigating Okta User Sessions Started from Different Geolocations\n\nThis rule detects when a specific Okta actor has multiple sessions started from different geolocations. Adversaries may attempt to launch an attack by using a list of known usernames and passwords to gain unauthorized access to user accounts from different locations.\n\n#### Possible investigation steps:\n- Since this is an ES|QL rule, the `okta.actor.alternate_id` and `okta.client.id` values can be used to pivot into the raw authentication events related to this alert.\n- Identify the users involved in this action by examining the `okta.actor.id`, `okta.actor.type`, `okta.actor.alternate_id`, and `okta.actor.display_name` fields.\n- Determine the device client used for these actions by analyzing `okta.client.ip`, `okta.client.user_agent.raw_user_agent`, `okta.client.zone`, `okta.client.device`, and `okta.client.id` fields.\n- With Okta end users identified, review the `okta.debug_context.debug_data.dt_hash` field.\n    - Historical analysis should indicate if this device token hash is commonly associated with the user.\n- Review the `okta.event_type` field to determine the type of authentication event that occurred.\n    - If the event type is `user.authentication.sso`, the user may have legitimately started a session via a proxy for security or privacy reasons.\n    - If the event type is `user.authentication.password`, the user may be using a proxy to access multiple accounts for password spraying.\n    - If the event type is `user.session.start`, the source may have attempted to establish a session via the Okta authentication API.\n- Review the past activities of the actor(s) involved in this action by checking their previous actions.\n- Evaluate the actions that happened just before and after this event in the `okta.event_type` field to help understand the full context of the activity.\n    - This may help determine the authentication and authorization actions that occurred between the user, Okta and application.\n\n### False positive analysis:\n- It is very rare that a legitimate user would have multiple sessions started from different geo-located countries in a short time frame.\n\n### Response and remediation:\n- If the user is legitimate and the authentication behavior is not suspicious based on device analysis, no action is required.\n- If the user is legitimate but the authentication behavior is suspicious, consider resetting passwords for the users involves and enabling multi-factor authentication (MFA).\n    - If MFA is already enabled, consider resetting MFA for the users.\n- If any of the users are not legitimate, consider deactivating the user's account.\n- Conduct a review of Okta policies and ensure they are in accordance with security best practices.\n- Check with internal IT teams to determine if the accounts involved recently had MFA reset at the request of the user.\n    - If so, confirm with the user this was a legitimate request.\n    - If so and this was not a legitimate request, consider deactivating the user's account temporarily.\n        - Reset passwords and reset MFA for the user.\n- If this is a false positive, consider adding the `okta.debug_context.debug_data.dt_hash` field to the `exceptions` list in the rule.\n    - This will prevent future occurrences of this event for this device from triggering the rule.\n    - Alternatively adding `okta.client.ip` or a CIDR range to the `exceptions` list can prevent future occurrences of this event from triggering the rule.\n        - This should be done with caution as it may prevent legitimate alerts from being generated.\n",
    "query": "FROM logs-okta*\n| WHERE\n    event.dataset == \"okta.system\"\n    AND (event.action RLIKE \"user\\\\.authentication(.*)\" OR event.action == \"user.session.start\")\n    AND okta.security_context.is_proxy != true and okta.actor.id != \"unknown\"\n    AND event.outcome == \"success\"\n| KEEP event.action, okta.security_context.is_proxy, okta.actor.id, event.outcome, client.geo.country_name, okta.actor.alternate_id\n| STATS\n    geo_auth_counts = COUNT_DISTINCT(client.geo.country_name)\n    BY okta.actor.id, okta.actor.alternate_id\n| WHERE\n    geo_auth_counts >= 2\n",
    "references": [
      "https://developer.okta.com/docs/reference/api/system-log/",
      "https://developer.okta.com/docs/reference/api/event-types/",
      "https://www.elastic.co/security-labs/testing-okta-visibility-and-detection-dorothy",
      "https://sec.okta.com/articles/2023/08/cross-tenant-impersonation-prevention-and-detection",
      "https://www.rezonate.io/blog/okta-logs-decoded-unveiling-identity-threats-through-threat-hunting/",
      "https://www.elastic.co/security-labs/monitoring-okta-threats-with-elastic-security",
      "https://www.elastic.co/security-labs/starter-guide-to-understanding-okta"
    ],
    "risk_score": 47,
    "rule_id": "2e56e1bc-867a-11ee-b13e-f661ea17fbcd",
    "setup": "The Okta Fleet integration, Filebeat module, or similarly structured data is required to be compatible with this rule.\n",
    "severity": "medium",
    "tags": [
      "Use Case: Identity and Access Audit",
      "Data Source: Okta",
      "Tactic: Initial Access"
    ],
    "threat": [
      {
        "framework": "MITRE ATT&CK",
        "tactic": {
          "id": "TA0001",
          "name": "Initial Access",
          "reference": "https://attack.mitre.org/tactics/TA0001/"
        },
        "technique": [
          {
            "id": "T1078",
            "name": "Valid Accounts",
            "reference": "https://attack.mitre.org/techniques/T1078/",
            "subtechnique": [
              {
                "id": "T1078.004",
                "name": "Cloud Accounts",
                "reference": "https://attack.mitre.org/techniques/T1078/004/"
              }
            ]
          }
        ]
      }
    ],
    "timestamp_override": "event.ingested",
    "type": "esql",
    "version": 303
  },
  "id": "2e56e1bc-867a-11ee-b13e-f661ea17fbcd_303",
  "type": "security-rule"
}