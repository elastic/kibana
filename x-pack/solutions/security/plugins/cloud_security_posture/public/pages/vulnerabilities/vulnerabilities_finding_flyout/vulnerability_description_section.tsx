/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useEffect, useRef, useState } from 'react';
import { EuiButtonEmpty, useEuiTheme } from '@elastic/eui';
import { FormattedMessage } from '@kbn/i18n-react';
import { CspFlyoutMarkdown } from '../../configurations/findings_flyout/findings_flyout';

const EMPTY_VALUE = 'No description available';
const MAX_LINES = 3;

interface ClampedMarkdownProps {
  description?: string;
}

export const VulnerabilityDescriptionSection: React.FC<ClampedMarkdownProps> = ({
  description,
}) => {
  const { euiTheme } = useEuiTheme();
  const [isExpanded, setIsExpanded] = useState(false);
  const [isOverflowing, setIsOverflowing] = useState(false);
  const contentRef = useRef<HTMLDivElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);

  const content = description || EMPTY_VALUE;

  const checkOverflow = () => {
    const el = contentRef.current;
    if (el) {
      const style = getComputedStyle(el);
      const lineHeightRaw = style.lineHeight;
      const lineHeight = lineHeightRaw === 'normal' ? 16 : parseFloat(lineHeightRaw);
      const maxHeight = lineHeight * MAX_LINES;
      setIsOverflowing(el.scrollHeight > maxHeight + 1);
    }
  };

  useEffect(() => {
    // Wait for layout to stabilize before measuring
    requestAnimationFrame(checkOverflow);
  }, [content, isExpanded]);

  useEffect(() => {
    if (!containerRef.current) return;

    const resizeObserver = new ResizeObserver(() => {
      if (!isExpanded) {
        checkOverflow();
      }
    });

    resizeObserver.observe(containerRef.current);

    return () => resizeObserver.disconnect();
  }, [isExpanded]);

  const clampedStyle: React.CSSProperties = {
    display: '-webkit-box',
    WebkitLineClamp: MAX_LINES,
    WebkitBoxOrient: 'vertical',
    overflow: 'hidden',
    transition: 'all 0.3s ease',
  };

  const expandedStyle: React.CSSProperties = {
    display: 'block',
    transition: 'all 0.3s ease',
  };

  return (
    <div ref={containerRef} style={{ position: 'relative' }}>
      <div ref={contentRef} style={isExpanded ? expandedStyle : clampedStyle}>
        <CspFlyoutMarkdown>{content}</CspFlyoutMarkdown>
        {isExpanded && isOverflowing && (
          <EuiButtonEmpty
            color="primary"
            flush="left"
            onClick={() => setIsExpanded(false)}
            style={{
              display: 'inline-block',
              verticalAlign: 'baseline',
              height: 'auto',
              minHeight: 'auto',
              fontSize: 'inherit',
            }}
          >
            <FormattedMessage
              id="xpack.csp.vulnerabilities.vulnerabilityDescriptionSection.showLess"
              defaultMessage="Show less"
            />
          </EuiButtonEmpty>
        )}
      </div>
      {isOverflowing && !isExpanded && (
        <div
          style={{
            position: 'absolute',
            bottom: '0',
            right: '0',
            backgroundColor: euiTheme.colors.emptyShade,
            paddingLeft: '4px',
          }}
        >
          <EuiButtonEmpty
            color="primary"
            onClick={() => setIsExpanded(true)}
            flush="left"
            style={{
              height: 'auto',
              minHeight: 'auto',
              fontSize: 'inherit',
            }}
          >
            <FormattedMessage
              id="xpack.csp.vulnerabilities.vulnerabilityDescriptionSection.showMore"
              defaultMessage="...Show more"
            />
          </EuiButtonEmpty>
        </div>
      )}
    </div>
  );
};
