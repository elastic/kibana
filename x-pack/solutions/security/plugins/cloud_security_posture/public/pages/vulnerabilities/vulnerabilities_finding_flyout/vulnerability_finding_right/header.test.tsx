/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React from 'react';
import { render, screen } from '@testing-library/react';
import FindingsVulnerabilityFlyoutHeader from './header';
import { mockQualysVulnerabilityHit } from '../../_mocks_/vulnerability.mock';
import {
  VULNERABILITY_HEADER_CVE_BADGE,
  VULNERABILITY_HEADER_ID,
  VULNERABILITY_HEADER_REFERENCE_LINK,
  VULNERABILITY_HEADER_TITLE,
} from '../../test_subjects';
import { TestProvider } from '../../../../test/test_provider';

describe('FindingsVulnerabilityFlyoutHeader', () => {
  it('renders the component and displays the vulnerability title and CVEs', () => {
    render(
      <TestProvider>
        <FindingsVulnerabilityFlyoutHeader finding={mockQualysVulnerabilityHit} />
      </TestProvider>
    );

    const titleElement = screen.getByTestId(VULNERABILITY_HEADER_TITLE);
    const cveslinkElement = screen.getByTestId(VULNERABILITY_HEADER_REFERENCE_LINK);
    const cvesBadge = screen.getByTestId(VULNERABILITY_HEADER_CVE_BADGE);

    expect(titleElement).toBeInTheDocument();
    expect(titleElement).toHaveTextContent(mockQualysVulnerabilityHit.vulnerability.title);
    expect(cveslinkElement).toHaveTextContent(mockQualysVulnerabilityHit.vulnerability.id[0]);
    expect(cvesBadge).toHaveTextContent(
      `${mockQualysVulnerabilityHit.vulnerability.id.length - 1} More`
    );
  });

  it('renders the component and display only CVEs when vulnerability.title is empty', () => {
    const vulnerabilityHitWithEmptyTitle = {
      ...mockQualysVulnerabilityHit,
      vulnerability: { ...mockQualysVulnerabilityHit.vulnerability, title: '' },
    };
    render(
      <TestProvider>
        <FindingsVulnerabilityFlyoutHeader finding={vulnerabilityHitWithEmptyTitle} />
      </TestProvider>
    );

    const titleElement = screen.getByTestId(VULNERABILITY_HEADER_TITLE);
    const cvesElement = screen.getByTestId(VULNERABILITY_HEADER_REFERENCE_LINK);
    const cvesBadge = screen.getByTestId(VULNERABILITY_HEADER_CVE_BADGE);

    expect(titleElement).toBeInTheDocument();
    expect(titleElement).not.toHaveTextContent(mockQualysVulnerabilityHit.vulnerability.title);
    expect(cvesElement).toHaveTextContent(vulnerabilityHitWithEmptyTitle.vulnerability.id[0]);
    expect(cvesBadge).toHaveTextContent(
      `${vulnerabilityHitWithEmptyTitle.vulnerability.id.length - 1} More`
    );
  });

  it('renders the component and display first CVE as text if there is no reference', () => {
    const vulnerabilityHitWithNoReference = {
      ...mockQualysVulnerabilityHit,
      vulnerability: { ...mockQualysVulnerabilityHit.vulnerability, reference: [] },
    };
    render(
      <TestProvider>
        <FindingsVulnerabilityFlyoutHeader finding={vulnerabilityHitWithNoReference} />
      </TestProvider>
    );

    const cvesTextElement = screen.getByTestId(VULNERABILITY_HEADER_ID);
    const cvesBadge = screen.getByTestId(VULNERABILITY_HEADER_CVE_BADGE);

    expect(cvesTextElement).toHaveTextContent(vulnerabilityHitWithNoReference.vulnerability.id[0]);
    expect(cvesBadge).toHaveTextContent(
      `${vulnerabilityHitWithNoReference.vulnerability.id.length - 1} More`
    );
  });

  it('renders the component and display onlt CVE without the badge', () => {
    const vulnerabilityHitWithSingleCVE = {
      ...mockQualysVulnerabilityHit,
      vulnerability: {
        ...mockQualysVulnerabilityHit.vulnerability,
        reference: [],
        id: 'CVE-2023-12345',
      },
    };
    render(
      <TestProvider>
        <FindingsVulnerabilityFlyoutHeader finding={vulnerabilityHitWithSingleCVE} />
      </TestProvider>
    );

    const cvesTextElement = screen.getByTestId(VULNERABILITY_HEADER_ID);
    const cvesBadge = screen.queryByTestId(VULNERABILITY_HEADER_CVE_BADGE);
    expect(cvesTextElement).toHaveTextContent(vulnerabilityHitWithSingleCVE.vulnerability.id);
    expect(cvesBadge).not.toBeInTheDocument();
  });
});
