/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
import React from 'react';
import userEvent from '@testing-library/user-event';
import { render, screen } from '@testing-library/react';
import '@kbn/code-editor-mock/jest_helper';
import { TestProvider } from '../../../test/test_provider';
import { VulnerabilityFindingFlyout } from './vulnerability_finding_flyout';
import {
  mockQualysVulnerabilityHit,
  mockVulnerabilityHit,
  mockWizVulnerabilityHit,
} from '../_mocks_/vulnerability.mock';
import { VulnerabilityOverviewTab } from './vulnerability_overview_tab';
import moment from 'moment';
import {
  DATA_SOURCE_VULNERABILITY_FLYOUT,
  FINDINGS_VULNERABILITY_FLYOUT_DESCRIPTION_LIST,
  VULNERABILITY_HEADER_CVE_BADGE,
  VULNERABILITY_HEADER_ID,
  VULNERABILITY_HEADER_REFERENCE_LINK,
  VULNERABILITY_HEADER_TITLE,
  VULNERABILITY_OVERVIEW_PUBLISHED_DATE,
  VULNERABILITY_OVERVIEW_TAB_ID_LESS_BTN,
  VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN,
  VULNERABILITY_SCORES_FLYOUT,
} from '../test_subjects';
import { EMPTY_VALUE } from '../../configurations/findings_flyout/findings_flyout';

const onPaginate = jest.fn();

const TestComponent = ({ ...overrideProps }) => (
  <TestProvider>
    <VulnerabilityFindingFlyout
      closeFlyout={jest.fn}
      flyoutIndex={0}
      totalVulnerabilitiesCount={2}
      onPaginate={onPaginate}
      vulnerabilityRecord={mockVulnerabilityHit}
      isLoading={false}
      {...overrideProps}
    />
  </TestProvider>
);

describe('<VulnerabilityFindingFlyout/>', () => {
  describe('Header Info', () => {
    it('displays text details flyout header info', () => {
      const { getAllByText, getByText, getByTestId } = render(<TestComponent />);

      getAllByText(mockVulnerabilityHit.vulnerability.id as string);
      getByText(mockVulnerabilityHit.vulnerability.description);
      const descriptionList = getByTestId(FINDINGS_VULNERABILITY_FLYOUT_DESCRIPTION_LIST);
      expect(descriptionList.textContent).toEqual(
        `Resource ID:${mockVulnerabilityHit.resource?.id} Resource Name:${mockVulnerabilityHit.resource?.name} Package:${mockVulnerabilityHit.package.name} Version:${mockVulnerabilityHit.package.version} `
      );
      getByText(mockVulnerabilityHit.vulnerability.severity!);
    });

    it('displays title and reference link for the matching id', () => {
      const { getByTestId } = render(<TestComponent />);

      expect(getByTestId(VULNERABILITY_HEADER_TITLE).textContent).toEqual(
        mockVulnerabilityHit.vulnerability.title
      );

      const idLinkElement = getByTestId(VULNERABILITY_HEADER_REFERENCE_LINK);
      expect(idLinkElement.textContent).toMatch(
        new RegExp(`^${mockVulnerabilityHit.vulnerability.id}`)
      );

      expect(idLinkElement).toHaveAttribute(
        'href',
        expect.stringContaining(mockVulnerabilityHit.vulnerability.reference as string)
      );
    });
  });

  it('displays id as a link and a badge when there are multiple ids - qualys integration', () => {
    const { getByTestId } = render(
      <TestComponent vulnerabilityRecord={mockQualysVulnerabilityHit} />
    );

    expect(getByTestId(VULNERABILITY_HEADER_TITLE).textContent).toEqual(
      mockQualysVulnerabilityHit.vulnerability.title
    );

    const idLinkElement = getByTestId(VULNERABILITY_HEADER_REFERENCE_LINK);
    expect(idLinkElement.textContent).toMatch(
      new RegExp(`^${mockQualysVulnerabilityHit.vulnerability.id[0]}`)
    );

    expect(idLinkElement).toHaveAttribute(
      'href',
      expect.stringContaining(mockQualysVulnerabilityHit.vulnerability.reference[0])
    );

    expect(getByTestId(VULNERABILITY_HEADER_CVE_BADGE).textContent).toEqual('1 More');
  });

  it('displays id as a text and a badge when there are multiple ids - qualys integration', () => {
    const { getByTestId, queryByTestId } = render(
      <TestComponent
        vulnerabilityRecord={{
          ...mockQualysVulnerabilityHit,
          vulnerability: {
            ...mockQualysVulnerabilityHit.vulnerability,
            reference: [
              'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-11111',
              'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22222',
            ],
          },
        }}
      />
    );

    expect(getByTestId(VULNERABILITY_HEADER_TITLE).textContent).toEqual(
      mockQualysVulnerabilityHit.vulnerability.title
    );

    const idLinkElement = queryByTestId(VULNERABILITY_HEADER_REFERENCE_LINK);
    expect(idLinkElement).toBeNull();

    expect(getByTestId(VULNERABILITY_HEADER_ID).textContent).toEqual(
      mockQualysVulnerabilityHit.vulnerability.id[0]
    );
    expect(getByTestId(VULNERABILITY_HEADER_CVE_BADGE).textContent).toEqual('1 More');
  });

  describe('JSON Tab', () => {
    it('show display Vulnerability JSON Tab', async () => {
      const { getAllByText } = render(<TestComponent />);

      await userEvent.click(
        screen.getByTestId(`vulnerability-finding-flyout-tab-vuln-flyout-json-tab`)
      );

      getAllByText('JSON');
    });
  });

  describe('Overview Summary Details Tab', () => {
    it('show display Vulnerability details in a Overview Tab', () => {
      const { getByText, getAllByText } = render(
        <TestProvider>
          <VulnerabilityOverviewTab vulnerabilityRecord={mockVulnerabilityHit} />
        </TestProvider>
      );
      getByText(mockVulnerabilityHit.vulnerability.data_source!.ID);
      getByText('Elastic');
      getByText(moment(mockVulnerabilityHit.vulnerability.published_date).format('LL').toString());
      getByText(mockVulnerabilityHit.vulnerability.description);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.nvd?.V3Vector as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.nvd?.V3Score?.toString() as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.redhat?.V3Vector as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.redhat?.V3Score?.toString() as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.ghsa?.V3Vector?.toString() as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.ghsa?.V3Score?.toString() as string);
      getByText(
        `${mockVulnerabilityHit.package.name} ${mockVulnerabilityHit.package.fixed_version}`
      );
    });

    it('Overview Tab with Wiz vulnerability missing fields', () => {
      const { getByTestId } = render(
        <TestProvider>
          <VulnerabilityOverviewTab vulnerabilityRecord={mockWizVulnerabilityHit} />
        </TestProvider>
      );
      const dataSource = getByTestId(DATA_SOURCE_VULNERABILITY_FLYOUT);
      const vulnerabilityScores = getByTestId(VULNERABILITY_SCORES_FLYOUT);
      const publishedDate = getByTestId(VULNERABILITY_OVERVIEW_PUBLISHED_DATE);
      expect(publishedDate.textContent).toEqual(`Published${EMPTY_VALUE}`);

      expect(dataSource.textContent).toEqual(`Data Source${EMPTY_VALUE}`);
      expect(vulnerabilityScores.textContent).toEqual(`Vulnerability Scores${EMPTY_VALUE}`);
    });

    it('Overview Tab with Qualys vulnerability renders id (CVE) item correctly', () => {
      const { getByTestId, queryByTestId } = render(
        <TestProvider>
          <VulnerabilityOverviewTab vulnerabilityRecord={mockQualysVulnerabilityHit} />
        </TestProvider>
      );
      const dataSource = getByTestId(DATA_SOURCE_VULNERABILITY_FLYOUT);
      const vulnerabilityScores = getByTestId(VULNERABILITY_SCORES_FLYOUT);
      const publishedDate = getByTestId(VULNERABILITY_OVERVIEW_PUBLISHED_DATE);
      const showMoreButton = queryByTestId(VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN);
      expect(publishedDate.textContent).toEqual(
        `Published${moment(mockQualysVulnerabilityHit.vulnerability.published_date)
          .format('LL')
          .toString()}`
      );

      expect(dataSource.textContent).toEqual(`Data Source${EMPTY_VALUE}`);
      expect(vulnerabilityScores.textContent).toEqual(`Vulnerability Scores${EMPTY_VALUE}`);
      expect(showMoreButton).toBeNull();
    });

    it('Overview Tab with Qualys vulnerability renders multiple CVEs', async () => {
      const cvesToAppend = [
        'CVE-2022-11111',
        'CVE-2022-22222',
        'CVE-2022-33333',
        'CVE-2022-44444',
        'CVE-2022-55555',
        'CVE-2022-66666',
      ];

      const { getByTestId, queryByTestId } = render(
        <TestProvider>
          <VulnerabilityOverviewTab
            vulnerabilityRecord={{
              ...mockQualysVulnerabilityHit,
              vulnerability: {
                ...mockQualysVulnerabilityHit.vulnerability,
                id: cvesToAppend,
              },
            }}
          />
        </TestProvider>
      );
      const showMoreButton = getByTestId(VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN);
      expect(showMoreButton).not.toBeNull();

      await userEvent.click(showMoreButton);
      const showMoreButtonAfterClick = queryByTestId(VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN);

      expect(showMoreButtonAfterClick).toBeNull();

      const showLessButton = getByTestId(VULNERABILITY_OVERVIEW_TAB_ID_LESS_BTN);
      expect(showLessButton).not.toBeNull();
      await userEvent.click(showLessButton);
    });

    it('displays missing info callout when data source is not CSP', () => {
      const { getByText } = render(<TestComponent vulnerabilityRecord={mockWizVulnerabilityHit} />);
      getByText('Some fields not provided by Wiz');
    });

    it('does not display missing info callout when data source is CSP', () => {
      const { queryByText } = render(<TestComponent vulnerabilityRecord={mockVulnerabilityHit} />);
      const missingInfoCallout = queryByText('Some fields not provided by Wiz');
      expect(missingInfoCallout).toBeNull();
    });

    it('show empty state for no fixes', () => {
      const { getByText } = render(
        <TestProvider>
          <VulnerabilityOverviewTab
            vulnerabilityRecord={{
              ...mockVulnerabilityHit,
              package: { ...mockVulnerabilityHit.package, fixed_version: undefined },
            }}
          />
        </TestProvider>
      );

      getByText(`No available fixes yet.`);
    });
  });

  /**
   * TODO: Enable this test once https://github.com/elastic/kibana/issues/168619 is resolved
   */
  describe.skip('Flyout Pagination', () => {
    it('should allow pagination with next', async () => {
      const { getByTestId } = render(<TestComponent />);

      await userEvent.click(getByTestId('pagination-button-next'));

      expect(onPaginate).toHaveBeenCalledWith(1);
    });

    it('should allow pagination with previous', async () => {
      const { getByTestId } = render(<TestComponent flyoutIndex={1} />);

      await userEvent.click(getByTestId('pagination-button-previous'));

      expect(onPaginate).toHaveBeenCalledWith(0);
    });
  });
});
