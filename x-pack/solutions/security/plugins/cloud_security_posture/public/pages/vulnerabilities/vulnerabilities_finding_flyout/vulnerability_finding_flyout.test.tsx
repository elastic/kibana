/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
import React from 'react';
import userEvent from '@testing-library/user-event';
import { render, screen } from '@testing-library/react';
import '@kbn/code-editor-mock/jest_helper';
import { TestProvider } from '../../../test/test_provider';

import { mockQualysVulnerabilityHit, mockVulnerabilityHit } from '../_mocks_/vulnerability.mock';
import { VulnerabilityOverviewTab } from './vulnerability_overview_tab';
import {
  DATA_SOURCE_VULNERABILITY_FLYOUT,
  VULNERABILITY_HEADER_CVE_BADGE,
  VULNERABILITY_HEADER_ID,
  VULNERABILITY_HEADER_REFERENCE_LINK,
  VULNERABILITY_HEADER_TITLE,
  VULNERABILITY_OVERVIEW_TAB_ID_LESS_BTN,
  VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN,
  VULNERABILITY_SCORES_FLYOUT,
} from '../test_subjects';
import { EMPTY_VALUE } from '../../configurations/findings_flyout/findings_flyout';
import VulnerabilityFindingFlyout from './vulnerability_finding_flyout';
import FindingsVulnerabilityFlyoutHeader from './vulnerability_finding_right/header';
import FindingsVulnerabilityFlyoutContent from './vulnerability_finding_right/content';
import FindingsVulnerabilityFlyoutFooter from './vulnerability_finding_right/footer';
import { FindingVulnerabilityFullFlyoutContentProps } from '@kbn/cloud-security-posture';
import { useVulnerabilityFinding } from '@kbn/cloud-security-posture/src/hooks/use_vulnerability_finding';

const TestComponent = () => (
  <TestProvider>
    <VulnerabilityFindingFlyout
      vulnerabilityId={'rule_id_test'}
      resourceId={'resource_id_test'}
      packageName={'package_name_test'}
      packageVersion={'package_version_test'}
      eventId={'event_id_test'}
    >
      {({ finding, createRuleFn }: FindingVulnerabilityFullFlyoutContentProps) => {
        return (
          <>
            <FindingsVulnerabilityFlyoutHeader finding={finding} />
            <FindingsVulnerabilityFlyoutContent finding={finding} />
            <FindingsVulnerabilityFlyoutFooter createRuleFn={createRuleFn} />
          </>
        );
      }}
    </VulnerabilityFindingFlyout>
  </TestProvider>
);

jest.mock('@kbn/cloud-security-posture/src/hooks/use_vulnerability_finding', () => ({
  useVulnerabilityFinding: jest.fn(),
}));

describe('<VulnerabilityFindingFlyout/>', () => {
  describe('Header Info', () => {
    it('displays text details flyout header info', () => {
      (useVulnerabilityFinding as jest.Mock).mockReturnValue({
        data: { result: { hits: [{ _source: mockVulnerabilityHit }] } },
      });
      const { getAllByText, getByText } = render(<TestComponent />);

      getByText(mockVulnerabilityHit.vulnerability.data_source!.ID);
      getByText('Elastic');
      getAllByText(mockVulnerabilityHit.vulnerability.id as string);
    });

    it('displays title and reference link for the matching id', () => {
      (useVulnerabilityFinding as jest.Mock).mockReturnValue({
        data: { result: { hits: [{ _source: mockVulnerabilityHit }] } },
      });
      const { getByTestId } = render(<TestComponent />);

      expect(getByTestId(VULNERABILITY_HEADER_TITLE).textContent).toEqual(
        mockVulnerabilityHit.vulnerability.title
      );

      const idLinkElement = getByTestId(VULNERABILITY_HEADER_REFERENCE_LINK);
      expect(idLinkElement.textContent).toMatch(
        new RegExp(`^${mockVulnerabilityHit.vulnerability.id}`)
      );

      expect(idLinkElement).toHaveAttribute(
        'href',
        expect.stringContaining(mockVulnerabilityHit.vulnerability.reference as string)
      );
    });
  });

  it('displays id as a link and a badge when there are multiple ids - qualys integration', () => {
    (useVulnerabilityFinding as jest.Mock).mockReturnValue({
      data: { result: { hits: [{ _source: mockQualysVulnerabilityHit }] } },
    });
    const { getByTestId } = render(<TestComponent />);

    expect(getByTestId(VULNERABILITY_HEADER_TITLE).textContent).toEqual(
      mockQualysVulnerabilityHit.vulnerability.title
    );

    const idLinkElement = getByTestId(VULNERABILITY_HEADER_REFERENCE_LINK);
    expect(idLinkElement.textContent).toMatch(
      new RegExp(`^${mockQualysVulnerabilityHit.vulnerability.id[0]}`)
    );

    expect(idLinkElement).toHaveAttribute(
      'href',
      expect.stringContaining(mockQualysVulnerabilityHit.vulnerability.reference[0])
    );

    expect(getByTestId(VULNERABILITY_HEADER_CVE_BADGE).textContent).toEqual('1 More');
  });

  it('displays id as a text and a badge when there are multiple ids - qualys integration', () => {
    (useVulnerabilityFinding as jest.Mock).mockReturnValue({
      data: {
        result: {
          hits: [
            {
              _source: {
                ...mockQualysVulnerabilityHit,
                vulnerability: {
                  ...mockQualysVulnerabilityHit.vulnerability,
                  reference: [
                    'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-11111',
                    'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-22222',
                  ],
                },
              },
            },
          ],
        },
      },
    });
    const { getByTestId, queryByTestId } = render(<TestComponent />);

    expect(getByTestId(VULNERABILITY_HEADER_TITLE).textContent).toEqual(
      mockQualysVulnerabilityHit.vulnerability.title
    );

    const idLinkElement = queryByTestId(VULNERABILITY_HEADER_REFERENCE_LINK);
    expect(idLinkElement).toBeNull();

    expect(getByTestId(VULNERABILITY_HEADER_ID).textContent).toEqual(
      mockQualysVulnerabilityHit.vulnerability.id[0]
    );
    expect(getByTestId(VULNERABILITY_HEADER_CVE_BADGE).textContent).toEqual('1 More');
  });

  it('Qualys vulnerability renders id (CVE) item correctly', () => {
    (useVulnerabilityFinding as jest.Mock).mockReturnValue({
      data: { result: { hits: [{ _source: mockQualysVulnerabilityHit }] } },
    });
    const { getByTestId, queryByTestId } = render(<TestComponent />);
    const dataSource = getByTestId(DATA_SOURCE_VULNERABILITY_FLYOUT);
    const vulnerabilityScores = getByTestId(VULNERABILITY_SCORES_FLYOUT);
    const showMoreButton = queryByTestId(VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN);

    expect(dataSource.textContent).toEqual(`Data source${EMPTY_VALUE}`);
    expect(vulnerabilityScores.textContent).toEqual(`CVSS${EMPTY_VALUE}`);
    expect(showMoreButton).toBeNull();
  });

  describe('JSON Tab', () => {
    it('show display Vulnerability JSON Tab', async () => {
      const { getAllByText } = render(<TestComponent />);

      await userEvent.click(
        screen.getByTestId(`vulnerability-finding-flyout-tab-vuln-flyout-json-tab`)
      );

      getAllByText('JSON');
    });
  });

  describe('Overview Summary Details Tab', () => {
    it('show display Vulnerability details in a Overview Tab', () => {
      const { getByText, getAllByText } = render(
        <TestProvider>
          <VulnerabilityOverviewTab vulnerabilityRecord={mockVulnerabilityHit} />
        </TestProvider>
      );
      getByText(mockVulnerabilityHit.vulnerability.description);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.nvd?.V3Vector as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.nvd?.V3Score?.toString() as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.redhat?.V3Vector as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.redhat?.V3Score?.toString() as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.ghsa?.V3Vector?.toString() as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.ghsa?.V3Score?.toString() as string);
      getAllByText(mockVulnerabilityHit.package.name as string);
      getAllByText(mockVulnerabilityHit.package.fixed_version as string);
    });

    it('Overview Tab with Qualys vulnerability renders multiple CVEs', async () => {
      const cvesToAppend = [
        'CVE-2022-11111',
        'CVE-2022-22222',
        'CVE-2022-33333',
        'CVE-2022-44444',
        'CVE-2022-55555',
        'CVE-2022-66666',
      ];

      const { getByTestId, queryByTestId } = render(
        <TestProvider>
          <VulnerabilityOverviewTab
            vulnerabilityRecord={{
              ...mockQualysVulnerabilityHit,
              vulnerability: {
                ...mockQualysVulnerabilityHit.vulnerability,
                id: cvesToAppend,
              },
            }}
          />
        </TestProvider>
      );
      const showMoreButton = getByTestId(VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN);
      expect(showMoreButton).not.toBeNull();

      await userEvent.click(showMoreButton);
      const showMoreButtonAfterClick = queryByTestId(VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN);

      expect(showMoreButtonAfterClick).toBeNull();

      const showLessButton = getByTestId(VULNERABILITY_OVERVIEW_TAB_ID_LESS_BTN);
      expect(showLessButton).not.toBeNull();
      await userEvent.click(showLessButton);
    });

    it('show empty state for no fixes', () => {
      const { getByText } = render(
        <TestProvider>
          <VulnerabilityOverviewTab
            vulnerabilityRecord={{
              ...mockVulnerabilityHit,
              package: { ...mockVulnerabilityHit.package, fixed_version: undefined },
            }}
          />
        </TestProvider>
      );

      getByText(`No available fixes yet.`);
    });
  });
});
