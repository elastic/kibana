/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useMemo, useState } from 'react';
import { EuiFlyoutBody, EuiSpacer, EuiTab, EuiTabs, useEuiTheme } from '@elastic/eui';
import { FindingsVulnerabilityFlyoutContentProps } from '@kbn/cloud-security-posture';
import { FormattedMessage } from '@kbn/i18n-react';
import { isNativeCspFinding } from '@kbn/cloud-security-posture/src/utils/is_native_csp_finding';
import { VulnerabilityJsonTab } from '../vulnerability_json_tab';
import { VulnerabilityOverviewTab } from '../vulnerability_overview_tab';
import { VulnerabilityTableTab } from '../vulnerability_table_tab';
import { TAB_ID_VULNERABILITY_FLYOUT } from '../../test_subjects';
import { MissingFieldsCallout } from '../../../configurations/findings_flyout/findings_flyout';

const overviewTabId = 'vuln-flyout-overview-tab';
const tableTabId = 'vuln-flyout-table-tab';
const jsonTabId = 'vuln-flyout-json-tab';

export const FindingsVulnerabilityFlyoutContent = ({
  finding,
}: FindingsVulnerabilityFlyoutContentProps) => {
  const { euiTheme } = useEuiTheme();
  const [selectedTabId, setSelectedTabId] = useState(overviewTabId);
  const tabs = useMemo(
    () => [
      {
        id: overviewTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.overviewTabLabel"
            defaultMessage="Overview"
          />
        ),
        content: <VulnerabilityOverviewTab vulnerabilityRecord={finding} />,
      },
      {
        id: tableTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.tableTabLabel"
            defaultMessage="Table"
          />
        ),
        content: <VulnerabilityTableTab vulnerabilityRecord={finding} />,
      },
      {
        id: jsonTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.jsonTabLabel"
            defaultMessage="JSON"
          />
        ),
        content: <VulnerabilityJsonTab vulnerabilityRecord={finding} />,
      },
    ],
    [finding]
  );
  const onSelectedTabChanged = (id: string) => setSelectedTabId(id);

  const selectedTabContent = useMemo(
    () => tabs.find((obj) => obj.id === selectedTabId)?.content,
    [selectedTabId, tabs]
  );

  const renderTabs = () =>
    tabs.map((tab, index) => (
      <EuiTab
        data-test-subj={TAB_ID_VULNERABILITY_FLYOUT(tab.id)}
        onClick={() => onSelectedTabChanged(tab.id)}
        isSelected={tab.id === selectedTabId}
        key={index}
      >
        {tab.name}
      </EuiTab>
    ));

  return (
    <>
      <EuiTabs expand>{renderTabs()}</EuiTabs>
      <EuiFlyoutBody>
        {!isNativeCspFinding(finding) && selectedTabId === overviewTabId && (
          <div style={{ marginBottom: euiTheme.size.base }}>
            <MissingFieldsCallout finding={finding} />
          </div>
        )}
        <EuiSpacer size="m" />
        {selectedTabContent}
      </EuiFlyoutBody>
    </>
  );
};

// eslint-disable-next-line import/no-default-export
export default FindingsVulnerabilityFlyoutContent;
