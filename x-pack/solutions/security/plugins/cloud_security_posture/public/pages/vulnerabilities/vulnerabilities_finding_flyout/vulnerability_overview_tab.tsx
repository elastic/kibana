/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import {
  EuiFlexGroup,
  EuiFlexItem,
  EuiIcon,
  EuiText,
  useEuiTheme,
  EuiAccordion,
  EuiAccordionProps,
  EuiDescriptionList,
  EuiDescriptionListProps,
  EuiSpacer,
  EuiThemeComputed,
  EuiBasicTable,
  EuiPanel,
  EuiTitle,
  EuiHorizontalRule,
} from '@elastic/eui';
import { css } from '@emotion/react';
import { FormattedMessage } from '@kbn/i18n-react';
import React, { useMemo } from 'react';
import { i18n } from '@kbn/i18n';
import {
  VectorScoreBase,
  CspVulnerabilityFinding,
  Vulnerability,
} from '@kbn/cloud-security-posture-common/schema/vulnerabilities/latest';
import { METRIC_TYPE } from '@kbn/analytics';
import {
  VULNERABILITIES_FLYOUT_VISITS,
  uiMetricService,
} from '@kbn/cloud-security-posture-common/utils/ui_metrics';
import { CVSScoreBadge, MultiValueCellPopover } from '@kbn/cloud-security-posture';
import { get } from 'lodash/fp';
import { truthy } from '@kbn/cloud-security-posture/src/utils/helpers';
import { CspFlyoutMarkdown } from '../../configurations/findings_flyout/findings_flyout';
import { NvdLogo } from '../../../assets/icons/nvd_logo_svg';
import { CVSScoreProps, Vendor } from '../types';
import { getVectorScoreList } from '../utils/get_vector_score_list';
import redhatLogo from '../../../assets/icons/redhat_logo.svg';
import { VulnerabilityDetectionRuleCounter } from './vulnerability_detection_rule_counter';
import { CopyButton } from '../../../components/copy_button';
import { columns, convertObjectToArray } from '../../configurations/findings_flyout/overview_tab';
import { VulnerabilityIdContent } from './vulnerability_id_content';

const cvssVendors: Record<string, Vendor> = {
  nvd: 'NVD',
  redhat: 'Red Hat',
  ghsa: 'GHSA',
};

const vendorIcons: Record<string, string> = {
  redhat: redhatLogo,
  ghsa: 'logoGithub',
};

interface VulnerabilityTabProps {
  vulnerabilityRecord: CspVulnerabilityFinding;
}

const EMPTY_VALUE = '-';

const CVSScore = ({ vectorBaseScore, vendor }: CVSScoreProps) => {
  const { euiTheme } = useEuiTheme();
  const vendorName = cvssVendors[vendor];

  const vectorScores = getVectorScoreList(vectorBaseScore);

  return (
    <EuiFlexGroup
      alignItems="center"
      css={css`
        border: 1px solid ${euiTheme.border.color};
        border-radius: 6px;
        padding: ${euiTheme.size.m};
      `}
    >
      <EuiFlexItem
        grow={false}
        css={css`
          width: 116px;
          font-weight: 600;
          display: flex;
          flex-direction: row;
          align-items: center;
        `}
      >
        <span
          css={css`
            margin-right: 30px;
          `}
        >
          {vendor === 'nvd' ? NvdLogo() : <EuiIcon type={vendorIcons[vendor]} size="xl" />}
        </span>

        <span>{vendorName}</span>
      </EuiFlexItem>

      <EuiFlexGroup direction="column" gutterSize="s">
        {vectorScores.length > 0 &&
          vectorScores.map((vectorScore, i) => (
            <VectorScore key={`${vectorScore}-${i}`} vectorScore={vectorScore} />
          ))}
      </EuiFlexGroup>
    </EuiFlexGroup>
  );
};

const VectorScore = ({
  vectorScore,
}: {
  vectorScore: {
    vector: string;
    score: number | undefined;
    version: string;
  };
}) => {
  const { euiTheme } = useEuiTheme();
  const { score, vector, version } = vectorScore;
  return (
    <>
      <EuiFlexGroup
        alignItems="center"
        css={css`
          background: ${euiTheme.colors.backgroundLightText};
          padding: ${euiTheme.size.xs} ${euiTheme.size.s};
          border-radius: 6px;
        `}
      >
        <EuiFlexItem>
          <EuiText
            css={css`
              font-size: ${euiTheme.size.m};
              color: ${euiTheme.colors.textParagraph};
            `}
          >
            {vector}{' '}
          </EuiText>
        </EuiFlexItem>

        <EuiFlexItem grow={false}>
          {score && <CVSScoreBadge score={score} version={version} />}
        </EuiFlexItem>
      </EuiFlexGroup>
    </>
  );
};

type Accordion = Pick<EuiAccordionProps, 'title' | 'id' | 'initialIsOpen'> &
  Pick<EuiDescriptionListProps, 'listItems'>;

const emptyFixesMessageState = i18n.translate(
  'xpack.csp.vulnerabilities.vulnerabilityOverviewTab.emptyFixesMessage',
  {
    defaultMessage: 'No available fixes yet.',
  }
);

const renderFixedBySection = (vulnerabilityRecord: CspVulnerabilityFinding, euiTheme: any) => {
  const renderFinding = (
    item: string,
    i: number,
    field: string,
    object: CspVulnerabilityFinding
  ) => (
    <EuiFlexGroup gutterSize="xs" direction="row" justifyContent="flexStart" alignItems="center">
      <EuiFlexItem>
        <EuiText
          size="s"
          css={css`
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
          `}
        >
          {item}
        </EuiText>
      </EuiFlexItem>
      <EuiFlexItem grow={false}>
        <CopyButton copyText={item} />
      </EuiFlexItem>
    </EuiFlexGroup>
  );

  const renderPackageField = (field: string) => {
    const value = get(field, vulnerabilityRecord);
    if (!value) {
      return <EuiText size="xs">{EMPTY_VALUE}</EuiText>;
    }

    return Array.isArray(value) ? (
      <MultiValueCellPopover<CspVulnerabilityFinding>
        items={value}
        field={`package.${field}`}
        object={vulnerabilityRecord}
        renderItem={renderFinding}
      />
    ) : (
      value
    );
  };

  if (!vulnerabilityRecord?.package?.fixed_version) {
    return <EuiText>{emptyFixesMessageState}</EuiText>;
  }
  return (
    <EuiFlexGroup responsive={false} gutterSize="xs" alignItems="flexStart" direction="column">
      <EuiFlexItem>
        <EuiFlexGroup
          responsive={false}
          gutterSize="xs"
          justifyContent="flexStart"
          alignItems="center"
        >
          <EuiFlexItem grow={false}>
            <EuiText
              size="xs"
              css={css`
                font-weight: ${euiTheme.font.weight.bold};
              `}
            >
              <FormattedMessage
                id="xpack.csp.vulnerabilities.vulnerabilitiesFindingFlyout.flyoutDescriptionList.packageTitle"
                defaultMessage="Package"
              />
              :
            </EuiText>
          </EuiFlexItem>
          <EuiFlexItem grow={false}>{renderPackageField('package.name')}</EuiFlexItem>
        </EuiFlexGroup>
      </EuiFlexItem>
      <EuiFlexItem css={{ marginBottom: euiTheme.size.xxs }}>
        <EuiFlexGroup
          responsive={false}
          gutterSize="xs"
          justifyContent="flexStart"
          alignItems="center"
        >
          <EuiFlexItem grow={false}>
            <EuiText
              size="xs"
              css={css`
                font-weight: ${euiTheme.font.weight.bold};
              `}
            >
              <FormattedMessage
                css={css`
                  font-weight: ${euiTheme.font.weight.medium};
                `}
                id="xpack.csp.vulnerabilities.vulnerabilitiesFindingFlyout.flyoutDescriptionList.versionTitle"
                defaultMessage="Version"
              />
              :
            </EuiText>
          </EuiFlexItem>
          <EuiFlexItem grow={false}>{renderPackageField('package.fixed_version')}</EuiFlexItem>
        </EuiFlexGroup>
      </EuiFlexItem>
    </EuiFlexGroup>
  );
};

const getVulnerabilityScoreList = (vulnerabilityData: CspVulnerabilityFinding) => [
  {
    title: '',
    description: vulnerabilityData ? (
      <EuiFlexGroup
        direction="column"
        gutterSize="l"
        css={css`
          margin-top: '4px'};
        `}
      >
        {!!renderCvssScores(vulnerabilityData.vulnerability)?.length
          ? renderCvssScores(vulnerabilityData.vulnerability)
          : EMPTY_VALUE}
      </EuiFlexGroup>
    ) : (
      EMPTY_VALUE
    ),
  },
];

const getResourceList = (vulnerabilityData: CspVulnerabilityFinding) => [
  {
    title: '',
    description: vulnerabilityData ? (
      <EuiPanel>
        <EuiPanel hasBorder>
          <EuiBasicTable
            items={
              convertObjectToArray({
                ID: vulnerabilityData?.resource?.id,
                Name: vulnerabilityData?.resource?.name,
                Package: vulnerabilityData?.package?.name,
                Version: vulnerabilityData?.package?.fixed_version,
              }) || []
            }
            rowHeader="Field"
            columns={columns}
          />
        </EuiPanel>
      </EuiPanel>
    ) : (
      EMPTY_VALUE
    ),
  },
];

const getDetailsList = (
  vulnerabilityData: CspVulnerabilityFinding,
  euiTheme: EuiThemeComputed<{}>
) => [
  {
    title: (
      <EuiTitle size="xxs" css={{ marginBottom: euiTheme.size.xs }}>
        <h1>
          {i18n.translate(
            'xpack.csp.findings.vulnerabilityFindingsFlyout.overviewTab.alertsTitle',
            {
              defaultMessage: 'Alerts',
            }
          )}
        </h1>
      </EuiTitle>
    ),
    description: vulnerabilityData.vulnerability.id ? (
      <VulnerabilityDetectionRuleCounter vulnerabilityRecord={vulnerabilityData} />
    ) : (
      EMPTY_VALUE
    ),
  },
  {
    title: (
      <EuiTitle size="xxs" css={{ marginBottom: euiTheme.size.xs }}>
        <h1>
          {i18n.translate('xpack.csp.findings.vulnerabilityFindingsFlyout.overviewTab.cveTitle', {
            defaultMessage: 'CVE',
          })}
        </h1>
      </EuiTitle>
    ),
    description: <VulnerabilityIdContent vulnerability={vulnerabilityData.vulnerability} />,
  },
  {
    title: (
      <EuiTitle size="xxs" css={{ marginBottom: euiTheme.size.xs }}>
        <h1>
          {i18n.translate(
            'xpack.csp.findings.vulnerabilityFindingsFlyout.overviewTab.publishedTitle',
            {
              defaultMessage: 'Published',
            }
          )}
        </h1>
      </EuiTitle>
    ),
    description: vulnerabilityData.vulnerability.published_date ? (
      <FormattedMessage
        id="xpack.csp.findings.vulnerabilityFindingsFlyout.overviewTab.publishedDateText"
        defaultMessage="{date}"
        values={{
          date: vulnerabilityData.vulnerability.published_date,
        }}
      />
    ) : (
      EMPTY_VALUE
    ),
  },
  {
    title: (
      <EuiTitle size="xxs" css={{ marginBottom: euiTheme.size.xs }}>
        <h1>
          {i18n.translate(
            'xpack.csp.findings.vulnerabilityFindingsFlyout.overviewTab.descriptionTitle',
            {
              defaultMessage: 'Description',
            }
          )}
        </h1>
      </EuiTitle>
    ),
    description: (
      <CspFlyoutMarkdown>
        {vulnerabilityData?.vulnerability?.description || EMPTY_VALUE}
      </CspFlyoutMarkdown>
    ),
  },
  {
    title: (
      <EuiTitle size="xxs" css={{ marginBottom: euiTheme.size.xs }}>
        <h1>
          {i18n.translate(
            'xpack.csp.findings.vulnerabilityFindingsFlyout.overviewTab.fixedByTitle',
            {
              defaultMessage: 'Fixed by',
            }
          )}
        </h1>
      </EuiTitle>
    ),
    description: renderFixedBySection(vulnerabilityData, euiTheme),
  },
];

const renderCvssScores = (vulnerability: Vulnerability | undefined) => {
  if (!vulnerability?.cvss) return [];

  return Object.entries<VectorScoreBase>(vulnerability.cvss)
    .map(([vendor, vectorScoreBase]: [string, VectorScoreBase]) => {
      if (cvssVendors[vendor]) {
        return (
          <EuiFlexItem key={vendor}>
            <CVSScore vectorBaseScore={vectorScoreBase} vendor={vendor} />
          </EuiFlexItem>
        );
      }
      return null;
    })
    .filter(Boolean); // Filter out any `undefined` values
};

export const VulnerabilityOverviewTab = ({ vulnerabilityRecord }: VulnerabilityTabProps) => {
  const { euiTheme } = useEuiTheme();
  uiMetricService.trackUiMetric(METRIC_TYPE.COUNT, VULNERABILITIES_FLYOUT_VISITS);

  const accordions: Accordion[] = useMemo(
    () =>
      [
        {
          initialIsOpen: true,
          title: i18n.translate(
            'xpack.csp.findings.vulnerabilitiesFindingFlyout.overviewTab.aboutTitle',
            {
              defaultMessage: 'About',
            }
          ),
          id: 'detailsAccordion',
          listItems: getDetailsList(vulnerabilityRecord, euiTheme),
        },
        {
          initialIsOpen: true,
          title: i18n.translate(
            'xpack.csp.findings.vulnerabilitiesFindingFlyout.overviewTab.resourceTitle',
            {
              defaultMessage: 'Resource',
            }
          ),
          id: 'resourceAccordion',
          listItems: getResourceList(vulnerabilityRecord),
        },
        {
          initialIsOpen: true,
          title: i18n.translate(
            'xpack.csp.findings.vulnerabilitiesFindingFlyout.overviewTab.vulnerabilityScoreTitle',
            {
              defaultMessage: 'Vulnerability Score',
            }
          ),
          id: 'vulnerabilityScoreAccordion',
          listItems: getVulnerabilityScoreList(vulnerabilityRecord),
        },
      ].filter(truthy),
    [euiTheme, vulnerabilityRecord]
  );

  return (
    <>
      {accordions.map((accordion) => (
        <React.Fragment key={accordion.id}>
          <EuiAccordion
            id={accordion.id}
            buttonContent={
              <EuiText>
                <strong>{accordion.title}</strong>
              </EuiText>
            }
            arrowDisplay="left"
            initialIsOpen={accordion.initialIsOpen}
          >
            <EuiSpacer size="m" />
            <EuiDescriptionList rowGutterSize="m" listItems={accordion.listItems} />
          </EuiAccordion>
          <EuiHorizontalRule />
        </React.Fragment>
      ))}
    </>
  );
};
