/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import {
  EuiFlexGroup,
  EuiFlexItem,
  EuiHorizontalRule,
  EuiIcon,
  EuiLink,
  EuiText,
  useEuiTheme,
  EuiButtonEmpty,
} from '@elastic/eui';
import { css } from '@emotion/react';
import { FormattedMessage } from '@kbn/i18n-react';
import moment from 'moment';
import React, { useState } from 'react';
import { i18n } from '@kbn/i18n';
import {
  VectorScoreBase,
  CspVulnerabilityFinding,
} from '@kbn/cloud-security-posture-common/schema/vulnerabilities/latest';
import { METRIC_TYPE } from '@kbn/analytics';
import {
  VULNERABILITIES_FLYOUT_VISITS,
  uiMetricService,
} from '@kbn/cloud-security-posture-common/utils/ui_metrics';
import { CVSScoreBadge } from '@kbn/cloud-security-posture';
import { getVendorName } from '@kbn/cloud-security-posture/src/utils/get_vendor_name';
import { CspFlyoutMarkdown } from '../../configurations/findings_flyout/findings_flyout';
import { NvdLogo } from '../../../assets/icons/nvd_logo_svg';
import { CVSScoreProps, Vendor } from '../types';
import { getVectorScoreList } from '../utils/get_vector_score_list';
import {
  DATA_SOURCE_VULNERABILITY_FLYOUT,
  OVERVIEW_TAB_VULNERABILITY_FLYOUT,
  VULNERABILITY_OVERVIEW_PUBLISHED_DATE,
  VULNERABILITY_OVERVIEW_TAB_ID,
  VULNERABILITY_OVERVIEW_TAB_ID_LESS_BTN,
  VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN,
  VULNERABILITY_SCORES_FLYOUT,
  getVulnerabilityLinkTestId,
} from '../test_subjects';
import redhatLogo from '../../../assets/icons/redhat_logo.svg';
import { VulnerabilityDetectionRuleCounter } from './vulnerability_detection_rule_counter';
import { findReferenceLink } from '../utils/find_reference_link.util';

const cvssVendors: Record<string, Vendor> = {
  nvd: 'NVD',
  redhat: 'Red Hat',
  ghsa: 'GHSA',
};

const vendorIcons: Record<string, string> = {
  redhat: redhatLogo,
  ghsa: 'logoGithub',
};

interface VulnerabilityTabProps {
  vulnerabilityRecord: CspVulnerabilityFinding;
}

const EMPTY_VALUE = '-';

const CVSScore = ({ vectorBaseScore, vendor }: CVSScoreProps) => {
  const { euiTheme } = useEuiTheme();
  const vendorName = cvssVendors[vendor];

  const vectorScores = getVectorScoreList(vectorBaseScore);

  return (
    <EuiFlexGroup
      alignItems="center"
      css={css`
        border: 1px solid ${euiTheme.border.color};
        border-radius: 6px;
        padding: ${euiTheme.size.m};
      `}
    >
      <EuiFlexItem
        grow={false}
        css={css`
          width: 116px;
          font-weight: 600;
          display: flex;
          flex-direction: row;
          align-items: center;
        `}
      >
        <span
          css={css`
            margin-right: 30px;
          `}
        >
          {vendor === 'nvd' ? NvdLogo() : <EuiIcon type={vendorIcons[vendor]} size="xl" />}
        </span>

        <span>{vendorName}</span>
      </EuiFlexItem>

      <EuiFlexGroup direction="column" gutterSize="s">
        {vectorScores.length > 0 &&
          vectorScores.map((vectorScore, i) => (
            <VectorScore key={`${vectorScore}-${i}`} vectorScore={vectorScore} />
          ))}
      </EuiFlexGroup>
    </EuiFlexGroup>
  );
};

const VectorScore = ({
  vectorScore,
}: {
  vectorScore: {
    vector: string;
    score: number | undefined;
    version: string;
  };
}) => {
  const { euiTheme } = useEuiTheme();
  const { score, vector, version } = vectorScore;
  return (
    <>
      <EuiFlexGroup
        alignItems="center"
        css={css`
          background: ${euiTheme.colors.backgroundLightText};
          padding: ${euiTheme.size.xs} ${euiTheme.size.s};
          border-radius: 6px;
        `}
      >
        <EuiFlexItem>
          <EuiText
            css={css`
              font-size: ${euiTheme.size.m};
              color: ${euiTheme.colors.textParagraph};
            `}
          >
            {vector}{' '}
          </EuiText>
        </EuiFlexItem>

        <EuiFlexItem grow={false}>
          {score && <CVSScoreBadge score={score} version={version} />}
        </EuiFlexItem>
      </EuiFlexGroup>
    </>
  );
};

const VulnerabilityOverviewTiles = ({ vulnerabilityRecord }: VulnerabilityTabProps) => {
  const { euiTheme } = useEuiTheme();
  const { vulnerability } = vulnerabilityRecord;
  const tileStyle = css`
    padding: ${euiTheme.size.m};
    background: ${euiTheme.colors.backgroundLightText};
    border-radius: 6px;
    height: 74px;
  `;
  const tileTitleTextStyle = css`
    line-height: 20px;
    margin-bottom: 6px;
  `;

  return (
    <EuiFlexGroup data-test-subj={OVERVIEW_TAB_VULNERABILITY_FLYOUT}>
      {!!vulnerability?.score?.base && (
        <EuiFlexItem css={tileStyle}>
          <EuiText css={tileTitleTextStyle}>
            <FormattedMessage
              id="xpack.csp.vulnerabilities.vulnerabilityOverviewTile.cvsScore"
              defaultMessage="CVSS"
            />
          </EuiText>
          <div>
            <CVSScoreBadge
              version={vulnerability.score?.version}
              score={vulnerability.score.base}
            />
          </div>
        </EuiFlexItem>
      )}
      {
        <EuiFlexItem css={tileStyle} data-test-subj={DATA_SOURCE_VULNERABILITY_FLYOUT}>
          <EuiText css={tileTitleTextStyle}>
            <FormattedMessage
              id="xpack.csp.vulnerabilities.vulnerabilityOverviewTile.dataSource"
              defaultMessage="Data Source"
            />
          </EuiText>
          {vulnerability.data_source?.URL ? (
            <EuiLink href={vulnerability.data_source?.URL} target="_blank">
              {vulnerability.data_source.ID}
            </EuiLink>
          ) : (
            <EuiText>{EMPTY_VALUE}</EuiText>
          )}
        </EuiFlexItem>
      }
    </EuiFlexGroup>
  );
};

export const VulnerabilityOverviewTab = ({ vulnerabilityRecord }: VulnerabilityTabProps) => {
  const { euiTheme } = useEuiTheme();
  const { vulnerability } = vulnerabilityRecord;
  uiMetricService.trackUiMetric(METRIC_TYPE.COUNT, VULNERABILITIES_FLYOUT_VISITS);

  const emptyFixesMessageState = i18n.translate(
    'xpack.csp.vulnerabilities.vulnerabilityOverviewTab.emptyFixesMessage',
    {
      defaultMessage: 'No available fixes yet.',
    }
  );

  const fixesDisplayText = vulnerabilityRecord?.package?.fixed_version
    ? `${vulnerabilityRecord?.package?.name} ${vulnerabilityRecord?.package?.fixed_version}`
    : emptyFixesMessageState;

  const cvssScores = vulnerability?.cvss
    ? Object.entries<VectorScoreBase>(vulnerability.cvss).map(
        ([vendor, vectorScoreBase]: [string, VectorScoreBase]) => {
          if (cvssVendors[vendor]) {
            return (
              <EuiFlexItem key={`${vendor}`}>
                <CVSScore vectorBaseScore={vectorScoreBase} vendor={vendor} />
              </EuiFlexItem>
            );
          }
        }
      )
    : [];

  const [showAllReferences, setShowAllReferences] = useState(false);

  const renderCVE = () => {
    if (!vulnerability?.id || vulnerability.id.length === 0) {
      return <EuiText>{EMPTY_VALUE}</EuiText>;
    }

    const sortReferencesByName = () => {
      // Handle case where either reference or id is not an array
      const ids = Array.isArray(vulnerability.id) ? vulnerability.id : [vulnerability.id];
      const references = Array.isArray(vulnerability.reference)
        ? vulnerability.reference
        : [vulnerability.reference];

      return ids.map((id) => {
        const referenceLink = findReferenceLink(references, id);

        return {
          id,
          link: referenceLink ?? '',
        };
      });
    };

    const sortedReferences = sortReferencesByName();
    const MAX_VISIBLE_ITEMS = 4;
    const hasMoreItems = sortedReferences.length > MAX_VISIBLE_ITEMS;
    const visibleReferences = showAllReferences
      ? sortedReferences
      : sortedReferences.slice(0, MAX_VISIBLE_ITEMS);

    return (
      <EuiFlexGroup
        responsive={false}
        gutterSize="xs"
        alignItems="center"
        css={css`
          max-height: 200px;
          overflow-y: auto;
          flex-wrap: wrap;
        `}
      >
        {visibleReferences.map(({ id, link }: { id: string; link: string }, index: number) => (
          <EuiFlexItem key={`${id}-${index}`} grow={false} style={{ flexShrink: 0 }}>
            {link ? (
              <EuiText size="m" color="primary" style={{ display: 'flex' }}>
                <EuiLink
                  data-test-subj={getVulnerabilityLinkTestId(id)}
                  href={link}
                  target="_blank"
                  css={css`
                    display: inline-flex;
                    align-items: center;
                  `}
                >
                  {id}
                </EuiLink>
                {index !== visibleReferences.length - 1 && ','}
              </EuiText>
            ) : (
              <EuiText data-test-subj={VULNERABILITY_OVERVIEW_TAB_ID} size="m">
                {index === visibleReferences.length - 1 ? id : `${id},`}
              </EuiText>
            )}
          </EuiFlexItem>
        ))}
        {!showAllReferences && hasMoreItems && (
          <>
            <EuiFlexItem grow={false}>
              <EuiText size="s">...</EuiText>
            </EuiFlexItem>
            <EuiFlexItem grow={false}>
              <EuiButtonEmpty
                data-test-subj={VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN}
                color="primary"
                size="xs"
                onClick={() => setShowAllReferences(true)}
              >
                <FormattedMessage
                  id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.showMore"
                  defaultMessage="Show more"
                />
              </EuiButtonEmpty>
            </EuiFlexItem>
          </>
        )}
        {showAllReferences && (
          <EuiFlexItem grow={false}>
            <EuiButtonEmpty
              data-test-subj={VULNERABILITY_OVERVIEW_TAB_ID_LESS_BTN}
              color="primary"
              size="xs"
              onClick={() => setShowAllReferences(false)}
            >
              <FormattedMessage
                id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.showLess"
                defaultMessage="Show less"
              />
            </EuiButtonEmpty>
          </EuiFlexItem>
        )}
      </EuiFlexGroup>
    );
  };

  const horizontalStyle = css`
    margin-block: 0px;
  `;

  const flyoutSubheadingStyle = css`
    font-size: ${euiTheme.size.m};
    line-height: 24px;
    margin-bottom: ${euiTheme.size.s};
    font-weight: 700;
  `;

  const date = vulnerability?.published_date
    ? moment(vulnerability?.published_date).format('LL').toString()
    : null;

  return (
    <EuiFlexGroup direction="column">
      <EuiFlexItem>
        <VulnerabilityOverviewTiles vulnerabilityRecord={vulnerabilityRecord} />
      </EuiFlexItem>

      <EuiHorizontalRule css={horizontalStyle} />

      <EuiFlexItem>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.cve"
            defaultMessage="CVE"
          />
        </h4>
        {renderCVE()}
      </EuiFlexItem>

      <EuiFlexItem data-test-subj={VULNERABILITY_OVERVIEW_PUBLISHED_DATE}>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTile.published"
            defaultMessage="Published"
          />
        </h4>
        {vulnerability?.published_date ? (
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTile.publishedDateText"
            defaultMessage="{date}"
            values={{
              date,
            }}
          />
        ) : (
          EMPTY_VALUE
        )}
      </EuiFlexItem>

      <EuiFlexItem>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.alertsTitle"
            defaultMessage="Alerts"
          />
        </h4>
        {vulnerabilityRecord.vulnerability.id ? (
          <VulnerabilityDetectionRuleCounter vulnerabilityRecord={vulnerabilityRecord} />
        ) : (
          EMPTY_VALUE
        )}
      </EuiFlexItem>

      <EuiFlexItem>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.vendorTitle"
            defaultMessage="Vendor"
          />
        </h4>
        {getVendorName(vulnerabilityRecord) || EMPTY_VALUE}
      </EuiFlexItem>

      <EuiFlexItem>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.descriptionTitle"
            defaultMessage="Description"
          />
        </h4>
        <CspFlyoutMarkdown>{vulnerability?.description || EMPTY_VALUE}</CspFlyoutMarkdown>
      </EuiFlexItem>

      <EuiHorizontalRule css={horizontalStyle} />

      <EuiFlexItem>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.fixes"
            defaultMessage="Fixed by"
          />
        </h4>
        <EuiText>{fixesDisplayText || EMPTY_VALUE}</EuiText>
      </EuiFlexItem>

      <EuiHorizontalRule css={horizontalStyle} />

      {
        <EuiFlexItem data-test-subj={VULNERABILITY_SCORES_FLYOUT}>
          <h4 css={flyoutSubheadingStyle}>
            <FormattedMessage
              id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.vulnerabilityScores"
              defaultMessage="Vulnerability Scores"
            />
          </h4>
          <EuiFlexGroup
            direction="column"
            gutterSize="l"
            css={css`
              margin-top: ${euiTheme.size.s};
            `}
          >
            {!!cvssScores?.length ? cvssScores : EMPTY_VALUE}
          </EuiFlexGroup>
        </EuiFlexItem>
      }
    </EuiFlexGroup>
  );
};
