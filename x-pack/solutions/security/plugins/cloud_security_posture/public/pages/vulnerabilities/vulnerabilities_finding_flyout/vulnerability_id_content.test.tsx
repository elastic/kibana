/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { VulnerabilityIdContent } from './vulnerability_id_content';
import { TestProvider } from '../../../test/test_provider';
import { mockQualysVulnerabilityHit } from '../_mocks_/vulnerability.mock';
import {
  getVulnerabilityIdTestId,
  getVulnerabilityLinkTestId,
  VULNERABILITY_EMPTY_VALUE,
  VULNERABILITY_OVERVIEW_TAB_ID_LESS_BTN,
  VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN,
} from '../test_subjects';

describe('VulnerabilityIdContent', () => {
  it('renders empty value when no vulnerability ID is provided', () => {
    const vulnerabilityHitWithEmptyId = {
      ...mockQualysVulnerabilityHit,
      vulnerability: { ...mockQualysVulnerabilityHit.vulnerability, id: '' },
    };
    render(
      <TestProvider>
        <VulnerabilityIdContent vulnerability={vulnerabilityHitWithEmptyId.vulnerability} />
      </TestProvider>
    );

    expect(screen.getByTestId(VULNERABILITY_EMPTY_VALUE)).toBeInTheDocument();
  });

  it('renders vulnerability IDs with links when available and show more button is not rendered', () => {
    render(<VulnerabilityIdContent vulnerability={mockQualysVulnerabilityHit.vulnerability} />);
    expect(
      screen.getByTestId(getVulnerabilityLinkTestId(mockQualysVulnerabilityHit.vulnerability.id[0]))
    ).toBeInTheDocument();
    expect(
      screen.getByTestId(getVulnerabilityLinkTestId(mockQualysVulnerabilityHit.vulnerability.id[0]))
    ).toHaveTextContent(mockQualysVulnerabilityHit.vulnerability.id[0]);

    expect(
      screen.getByTestId(getVulnerabilityLinkTestId(mockQualysVulnerabilityHit.vulnerability.id[1]))
    ).toBeInTheDocument();
    expect(
      screen.getByTestId(getVulnerabilityLinkTestId(mockQualysVulnerabilityHit.vulnerability.id[1]))
    ).toHaveTextContent(mockQualysVulnerabilityHit.vulnerability.id[1]);

    expect(screen.queryByTestId(VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN)).not.toBeInTheDocument();
  });

  it('shows all references when "Show more" is clicked', async () => {
    const vulnerabilityHitWithMultipleCVEs = {
      ...mockQualysVulnerabilityHit,
      vulnerability: {
        ...mockQualysVulnerabilityHit.vulnerability,
        id: [
          'CVE-1234-5678',
          'CVE-2345-6789',
          'CVE-3456-7890',
          'CVE-4567-8901',
          'CVE-5678-9012',
          'CVE-6789-0123',
        ],
        reference: ['https://example.com/cve-1234-5678', 'https://example.com/cve-2345-6789'],
      },
    };

    render(
      <TestProvider>
        <VulnerabilityIdContent vulnerability={vulnerabilityHitWithMultipleCVEs.vulnerability} />
      </TestProvider>
    );

    expect(
      screen.getByTestId(
        getVulnerabilityLinkTestId(vulnerabilityHitWithMultipleCVEs.vulnerability.id[0])
      )
    ).toBeInTheDocument();
    expect(
      screen.getByTestId(
        getVulnerabilityLinkTestId(vulnerabilityHitWithMultipleCVEs.vulnerability.id[1])
      )
    ).toBeInTheDocument();
    expect(
      screen.getByTestId(
        getVulnerabilityIdTestId(vulnerabilityHitWithMultipleCVEs.vulnerability.id[2])
      )
    ).toBeInTheDocument();
    expect(
      screen.getByTestId(
        getVulnerabilityIdTestId(vulnerabilityHitWithMultipleCVEs.vulnerability.id[3])
      )
    ).toBeInTheDocument();
    expect(
      screen.queryByTestId(
        getVulnerabilityIdTestId(vulnerabilityHitWithMultipleCVEs.vulnerability.id[4])
      )
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(
        getVulnerabilityIdTestId(vulnerabilityHitWithMultipleCVEs.vulnerability.id[5])
      )
    ).not.toBeInTheDocument();

    // Click "Show more" button
    const showMoreButton = screen.getByTestId(VULNERABILITY_OVERVIEW_TAB_ID_MORE_BTN);
    await userEvent.click(showMoreButton);

    // Now all 6 elements should be rendered
    expect(
      screen.getByTestId(
        getVulnerabilityIdTestId(vulnerabilityHitWithMultipleCVEs.vulnerability.id[4])
      )
    ).toBeInTheDocument();
    expect(
      screen.getByTestId(
        getVulnerabilityIdTestId(vulnerabilityHitWithMultipleCVEs.vulnerability.id[5])
      )
    ).toBeInTheDocument();

    // Click "Show less" button
    const showLessButton = screen.getByTestId(VULNERABILITY_OVERVIEW_TAB_ID_LESS_BTN);
    await userEvent.click(showLessButton);

    expect(
      screen.queryByTestId(
        getVulnerabilityIdTestId(vulnerabilityHitWithMultipleCVEs.vulnerability.id[4])
      )
    ).not.toBeInTheDocument();
    expect(
      screen.queryByTestId(
        getVulnerabilityIdTestId(vulnerabilityHitWithMultipleCVEs.vulnerability.id[5])
      )
    ).not.toBeInTheDocument();
  });
});
