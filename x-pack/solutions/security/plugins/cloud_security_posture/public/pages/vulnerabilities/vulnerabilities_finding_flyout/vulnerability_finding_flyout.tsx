/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useMemo, useState } from 'react';
import {
  EuiDescriptionListProps,
  EuiFlexGroup,
  EuiFlexItem,
  EuiFlyout,
  EuiFlyoutBody,
  EuiFlyoutFooter,
  EuiFlyoutHeader,
  EuiPagination,
  EuiSkeletonText,
  EuiTab,
  EuiTabs,
  EuiText,
  EuiTitle,
  useEuiTheme,
  EuiBadge,
  EuiLink,
} from '@elastic/eui';
import { i18n } from '@kbn/i18n';
import { FormattedMessage } from '@kbn/i18n-react';
import { css } from '@emotion/react';
import { HttpSetup } from '@kbn/core-http-browser';
import type { CspVulnerabilityFinding } from '@kbn/cloud-security-posture-common/schema/vulnerabilities/latest';
import { isNativeCspFinding } from '@kbn/cloud-security-posture/src/utils/is_native_csp_finding';
import { truthy } from '@kbn/cloud-security-posture/src/utils/helpers';
import {
  MultiValueCellPopover,
  SeverityStatusBadge,
  findReferenceLink,
  getNormalizedSeverity,
} from '@kbn/cloud-security-posture';
import { CopyButton } from '../../../components/copy_button';
import { TakeAction } from '../../../components/take_action';
import { CspInlineDescriptionList } from '../../../components/csp_inline_description_list';
import { VulnerabilityOverviewTab } from './vulnerability_overview_tab';
import { VulnerabilityJsonTab } from './vulnerability_json_tab';
import {
  FINDINGS_VULNERABILITY_FLYOUT_DESCRIPTION_LIST,
  TAB_ID_VULNERABILITY_FLYOUT,
  VULNERABILITY_HEADER_CVE_BADGE,
  VULNERABILITY_HEADER_ID,
  VULNERABILITY_HEADER_REFERENCE_LINK,
  VULNERABILITY_HEADER_TITLE,
} from '../test_subjects';
import { VulnerabilityTableTab } from './vulnerability_table_tab';
import { createDetectionRuleFromVulnerabilityFinding } from '../utils/create_detection_rule_from_vulnerability';
import { MissingFieldsCallout } from '../../configurations/findings_flyout/findings_flyout';

const overviewTabId = 'vuln-flyout-overview-tab';
const tableTabId = 'vuln-flyout-table-tab';
const jsonTabId = 'vuln-flyout-json-tab';

const renderFinding = (item: string, i: number, field: string, object: CspVulnerabilityFinding) => (
  <EuiFlexGroup gutterSize="xs" direction="row" justifyContent="flexStart" alignItems="center">
    <EuiFlexItem>
      <EuiText
        size="s"
        css={css`
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
        `}
      >
        {item}
      </EuiText>
    </EuiFlexItem>
    <EuiFlexItem grow={false}>
      <CopyButton copyText={item} />
    </EuiFlexItem>
  </EuiFlexGroup>
);

const getFlyoutDescriptionList = (
  vulnerabilityRecord: CspVulnerabilityFinding
): EuiDescriptionListProps['listItems'] =>
  [
    vulnerabilityRecord.resource?.id && {
      title: i18n.translate(
        'xpack.csp.vulnerabilities.vulnerabilitiesFindingFlyout.flyoutDescriptionList.resourceId',
        { defaultMessage: 'Resource ID' }
      ),
      description: vulnerabilityRecord.resource.id,
    },
    vulnerabilityRecord.resource?.name && {
      title: i18n.translate(
        'xpack.csp.vulnerabilities.vulnerabilitiesFindingFlyout.flyoutDescriptionList.resourceName',
        { defaultMessage: 'Resource Name' }
      ),
      description: vulnerabilityRecord.resource.name,
    },
    vulnerabilityRecord.package?.name && {
      title: i18n.translate(
        'xpack.csp.vulnerabilities.vulnerabilitiesFindingFlyout.flyoutDescriptionList.packageTitle',
        { defaultMessage: 'Package' }
      ),
      description: Array.isArray(vulnerabilityRecord.package?.name) ? (
        <div
          css={css`
            display: inline-block;
          `}
        >
          <MultiValueCellPopover<CspVulnerabilityFinding>
            items={vulnerabilityRecord.package?.name}
            field={'package.name'}
            object={vulnerabilityRecord}
            renderItem={renderFinding}
          />
        </div>
      ) : (
        vulnerabilityRecord.package?.name
      ),
    },
    vulnerabilityRecord.package?.version && {
      title: i18n.translate(
        'xpack.csp.vulnerabilities.vulnerabilitiesFindingFlyout.flyoutDescriptionList.versionTitle',
        { defaultMessage: 'Version' }
      ),
      description: Array.isArray(vulnerabilityRecord.package?.version) ? (
        <div
          css={css`
            display: inline-block;
          `}
        >
          <MultiValueCellPopover<CspVulnerabilityFinding>
            items={vulnerabilityRecord.package?.version}
            field={'package.version'}
            object={vulnerabilityRecord}
            renderItem={renderFinding}
          />
        </div>
      ) : (
        vulnerabilityRecord.package?.version
      ),
    },
  ].filter(truthy);

export const VulnerabilityFindingFlyout = ({
  closeFlyout,
  vulnerabilityRecord,
  onPaginate,
  totalVulnerabilitiesCount,
  flyoutIndex,
  isLoading = false,
}: {
  closeFlyout: () => void;
  vulnerabilityRecord: CspVulnerabilityFinding;
  onPaginate?: (pageIndex: number) => void;
  totalVulnerabilitiesCount?: number;
  flyoutIndex?: number;
  isLoading?: boolean;
}) => {
  const { euiTheme } = useEuiTheme();
  const [selectedTabId, setSelectedTabId] = useState(overviewTabId);
  const vulnerability = vulnerabilityRecord?.vulnerability;
  const tabs = useMemo(
    () => [
      {
        id: overviewTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.overviewTabLabel"
            defaultMessage="Overview"
          />
        ),
        content: <VulnerabilityOverviewTab vulnerabilityRecord={vulnerabilityRecord} />,
      },
      {
        id: tableTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.tableTabLabel"
            defaultMessage="Table"
          />
        ),
        content: <VulnerabilityTableTab vulnerabilityRecord={vulnerabilityRecord} />,
      },
      {
        id: jsonTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.jsonTabLabel"
            defaultMessage="JSON"
          />
        ),
        content: <VulnerabilityJsonTab vulnerabilityRecord={vulnerabilityRecord} />,
      },
    ],
    [vulnerabilityRecord]
  );

  const onSelectedTabChanged = (id: string) => setSelectedTabId(id);

  const renderTabs = () =>
    tabs.map((tab, index) => (
      <EuiTab
        data-test-subj={TAB_ID_VULNERABILITY_FLYOUT(tab.id)}
        onClick={() => onSelectedTabChanged(tab.id)}
        isSelected={tab.id === selectedTabId}
        key={index}
      >
        {tab.name}
      </EuiTab>
    ));

  const selectedTabContent = useMemo(
    () => tabs.find((obj) => obj.id === selectedTabId)?.content,
    [selectedTabId, tabs]
  );

  const LOADING_ARIA_LABEL = i18n.translate(
    'xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.loadingAriaLabel',
    { defaultMessage: 'Loading' }
  );

  const createVulnerabilityRuleFn = async (http: HttpSetup) =>
    await createDetectionRuleFromVulnerabilityFinding(http, vulnerabilityRecord);

  const renderCveBadge = () => {
    if (Array.isArray(vulnerability?.id) && vulnerability?.id.length > 1) {
      return (
        <EuiFlexItem grow={false}>
          <EuiBadge
            data-test-subj={VULNERABILITY_HEADER_CVE_BADGE}
            color="accent"
            css={css`
              border-radius: ${euiTheme.border.radius.small};
            `}
          >
            <FormattedMessage
              id="xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.cveTooltip"
              defaultMessage="{value} More"
              values={{ value: vulnerability?.id.length - 1 }}
            />
          </EuiBadge>
        </EuiFlexItem>
      );
    }

    return <></>;
  };

  const renderCves = () => {
    if (!vulnerability?.id || vulnerability?.id.length === 0) {
      return <></>;
    }

    const renderVulnerabilityId = () => {
      const id = Array.isArray(vulnerability.id) ? vulnerability.id[0] : vulnerability.id;

      const references = Array.isArray(vulnerability.reference)
        ? vulnerability.reference
        : [vulnerability.reference];

      const referenceLink = findReferenceLink(references, id);

      return referenceLink ? (
        <EuiLink
          data-test-subj={VULNERABILITY_HEADER_REFERENCE_LINK}
          color="primary"
          href={referenceLink}
          target="_blank"
          style={{ color: euiTheme.colors.primary, display: 'flex', alignItems: 'center' }}
        >
          {id}
        </EuiLink>
      ) : (
        <EuiText data-test-subj={VULNERABILITY_HEADER_ID}>{id}</EuiText>
      );
    };

    return (
      <EuiFlexGroup
        justifyContent="flexStart"
        alignItems="center"
        gutterSize="xs"
        responsive={false}
      >
        <EuiFlexItem grow={false}>
          <EuiTitle
            size="m"
            css={css`
              line-height: 32px;
              font-weight: normal;
            `}
          >
            {renderVulnerabilityId()}
          </EuiTitle>
        </EuiFlexItem>
        {renderCveBadge()}
      </EuiFlexGroup>
    );
  };

  return (
    <EuiFlyout onClose={closeFlyout}>
      <EuiFlyoutHeader>
        <EuiSkeletonText
          lines={10}
          size="m"
          isLoading={isLoading}
          contentAriaLabel={LOADING_ARIA_LABEL}
        >
          <EuiFlexGroup
            direction="column"
            css={css`
              gap: ${euiTheme.size.s};
            `}
          >
            <EuiFlexItem>
              <SeverityStatusBadge severity={getNormalizedSeverity(vulnerability?.severity)} />
            </EuiFlexItem>
            <EuiFlexItem>
              <EuiFlexGroup
                direction="column"
                css={css`
                  gap: ${euiTheme.size.s};
                `}
              >
                <EuiFlexItem>
                  <EuiTitle size="m" css={css``}>
                    <EuiText data-test-subj={VULNERABILITY_HEADER_TITLE}>
                      {vulnerability?.title}
                    </EuiText>
                  </EuiTitle>
                </EuiFlexItem>
                {renderCves()}
                <EuiFlexItem>
                  <div
                    css={css`
                      line-height: 20px;
                      margin-bottom: ${euiTheme.size.m};
                    `}
                  >
                    <CspInlineDescriptionList
                      testId={FINDINGS_VULNERABILITY_FLYOUT_DESCRIPTION_LIST}
                      listItems={getFlyoutDescriptionList(vulnerabilityRecord)}
                    />
                  </div>
                </EuiFlexItem>
              </EuiFlexGroup>
            </EuiFlexItem>
            <EuiFlexItem>
              <EuiTabs>{renderTabs()}</EuiTabs>
            </EuiFlexItem>
          </EuiFlexGroup>
        </EuiSkeletonText>
      </EuiFlyoutHeader>
      <EuiFlyoutBody>
        <EuiSkeletonText
          lines={10}
          size="m"
          isLoading={isLoading}
          contentAriaLabel={LOADING_ARIA_LABEL}
        >
          {!isNativeCspFinding(vulnerabilityRecord) && selectedTabId === overviewTabId && (
            <div style={{ marginBottom: euiTheme.size.base }}>
              <MissingFieldsCallout finding={vulnerabilityRecord} />
            </div>
          )}
          {selectedTabContent}
        </EuiSkeletonText>
      </EuiFlyoutBody>
      <EuiFlyoutFooter>
        <EuiFlexGroup
          gutterSize="none"
          alignItems="center"
          justifyContent={onPaginate ? 'spaceBetween' : 'flexEnd'}
        >
          {onPaginate && totalVulnerabilitiesCount && flyoutIndex && (
            <EuiFlexItem grow={false}>
              <EuiPagination
                pageCount={totalVulnerabilitiesCount}
                activePage={flyoutIndex}
                onPageClick={onPaginate}
                compressed
              />
            </EuiFlexItem>
          )}
          <EuiFlexItem grow={false}>
            <TakeAction createRuleFn={createVulnerabilityRuleFn} />
          </EuiFlexItem>
        </EuiFlexGroup>
      </EuiFlyoutFooter>
    </EuiFlyout>
  );
};
