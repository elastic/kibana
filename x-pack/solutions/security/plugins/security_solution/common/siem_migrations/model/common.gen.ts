/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: SIEM Rule Migration common components
 *   version: not applicable
 */

import { z } from '@kbn/zod';

/**
 * The GenAI connector id to use.
 */
export type ConnectorId = z.infer<typeof ConnectorId>;
export const ConnectorId = z.string();

/**
 * The LangSmith options object.
 */
export type LangSmithOptions = z.infer<typeof LangSmithOptions>;
export const LangSmithOptions = z.object({
  /**
   * The project name.
   */
  project_name: z.string(),
  /**
   * The API key to use for tracing.
   */
  api_key: z.string(),
});

/**
 * The LangSmith settings object for evaluations.
 */
export type LangSmithEvaluationOptions = z.infer<typeof LangSmithEvaluationOptions>;
export const LangSmithEvaluationOptions = LangSmithOptions.merge(
  z.object({
    /**
     * The dataset name to use for evaluations.
     */
    dataset: z.string(),
  })
);

/**
 * The status of migration.
 */
export type MigrationStatus = z.infer<typeof MigrationStatus>;
export const MigrationStatus = z.enum(['pending', 'processing', 'completed', 'failed']);
export type MigrationStatusEnum = typeof MigrationStatus.enum;
export const MigrationStatusEnum = MigrationStatus.enum;

/**
 * The status of the migration task.
 */
export type MigrationTaskStatus = z.infer<typeof MigrationTaskStatus>;
export const MigrationTaskStatus = z.enum([
  'ready',
  'running',
  'stopped',
  'finished',
  'interrupted',
]);
export type MigrationTaskStatusEnum = typeof MigrationTaskStatus.enum;
export const MigrationTaskStatusEnum = MigrationTaskStatus.enum;

/**
 * The last execution of a migration task.
 */
export type MigrationLastExecution = z.infer<typeof MigrationLastExecution>;
export const MigrationLastExecution = z.object({
  /**
   * The moment the last execution started.
   */
  started_at: z.string().optional(),
  /**
   * The moment the last execution finished.
   */
  finished_at: z.string().nullable().optional(),
  /**
   * The connector ID used for the last execution.
   */
  connector_id: z.string().optional(),
  /**
   * The error message if the last execution failed.
   */
  error: z.string().nullable().optional(),
  /**
   * Indicates if the last execution was stopped by the user.
   */
  is_stopped: z.boolean().optional(),
});
