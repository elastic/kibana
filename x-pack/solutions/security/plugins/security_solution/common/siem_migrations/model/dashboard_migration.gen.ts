/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: SIEM Dashboard Migration components
 *   version: not applicable
 */

import { z } from '@kbn/zod';

import { NonEmptyString } from '../../api/model/primitives.gen';
import { MigrationLastExecution, MigrationStatus, MigrationTaskStatus } from './common.gen';
import { SplunkOriginalDashboardProperties } from './vendor/dashboards/splunk.gen';

/**
 * The original dashboard vendor identifier.
 */
export type OriginalDashboardVendor = z.infer<typeof OriginalDashboardVendor>;
export const OriginalDashboardVendor = z.literal('splunk');

/**
 * The dashboard migration object ( without Id ) with its settings.
 */
export type DashboardMigrationData = z.infer<typeof DashboardMigrationData>;
export const DashboardMigrationData = z.object({
  /**
   * The dashboard migration name
   */
  name: NonEmptyString,
  /**
   * The user profile ID of the user who created the migration.
   */
  created_by: NonEmptyString,
  /**
   * The moment migration was created
   */
  created_at: NonEmptyString,
  /**
   * The last execution of the dashboard migration task.
   */
  last_execution: MigrationLastExecution.optional(),
});

/**
 * The dashboard migration object with its settings.
 */
export type DashboardMigration = z.infer<typeof DashboardMigration>;
export const DashboardMigration = z
  .object({
    /**
     * The dashboard migration id
     */
    id: NonEmptyString,
  })
  .merge(DashboardMigrationData);

/**
 * The raw dashboard object from different vendors
 */
export type OriginalDashboard = z.infer<typeof OriginalDashboard>;
export const OriginalDashboard = z.object({
  /**
   * The unique identifier for the dashboard
   */
  id: z.string(),
  /**
   * The original dashboard vendor identifier.
   */
  vendor: OriginalDashboardVendor,
  /**
   * The title of the dashboard
   */
  title: z.string(),
  /**
   * The description of the dashboard
   */
  description: z.string(),
  /**
   * The data of the dashboard, format could depend on the vendor
   */
  data: z.string(),
  /**
   * The last updated timestamp of the dashboard
   */
  last_updated: z.string(),
  /**
   * The format of the dashboard (e.g., 'json', 'xml')
   */
  format: z.string(),
  /**
   * Additional properties specific to the splunk
   */
  splunk_properties: SplunkOriginalDashboardProperties.optional(),
});

/**
 * The dashboard migration document object.
 */
export type DashboardMigrationDashboardData = z.infer<typeof DashboardMigrationDashboardData>;
export const DashboardMigrationDashboardData = z.object({
  /**
   * The moment of creation
   */
  '@timestamp': z.string(),
  /**
   * The migration id.
   */
  migration_id: NonEmptyString,
  /**
   * The user profile ID of the user who created the migration.
   */
  created_by: NonEmptyString,
  /**
   * The original dashboard to migrate.
   */
  original_dashboard: OriginalDashboard,
  /**
   * The status of the dashboard migration process.
   */
  status: MigrationStatus.default('pending'),
  /**
   * The moment of the last update
   */
  updated_at: z.string().optional(),
  /**
   * The user who last updated the migration
   */
  updated_by: z.string().optional(),
});

/**
 * The dashboard migration document object.
 */
export type DashboardMigrationDashboard = z.infer<typeof DashboardMigrationDashboard>;
export const DashboardMigrationDashboard = z
  .object({
    /**
     * The dashboard migration id
     */
    id: NonEmptyString,
  })
  .merge(DashboardMigrationDashboardData);

/**
 * The dashboard migration task stats object.
 */
export type DashboardMigrationTaskStats = z.infer<typeof DashboardMigrationTaskStats>;
export const DashboardMigrationTaskStats = z.object({
  /**
   * The migration id
   */
  id: NonEmptyString,
  /**
   * The migration name
   */
  name: NonEmptyString,
  /**
   * Indicates if the migration task status.
   */
  status: MigrationTaskStatus,
  /**
   * The dashboards migration stats.
   */
  dashboards: z
    .object({
      /**
       * The total number of dashboards to migrate.
       */
      total: z.number().int(),
      /**
       * The number of dashboards that are pending migration.
       */
      pending: z.number().int(),
      /**
       * The number of dashboards that are being migrated.
       */
      processing: z.number().int(),
      /**
       * The number of dashboards that have been migrated successfully.
       */
      completed: z.number().int(),
      /**
       * The number of dashboards that have failed migration.
       */
      failed: z.number().int(),
    })
    .optional(),
  /**
   * The moment the migration was created.
   */
  created_at: z.string(),
  /**
   * The moment of the last update.
   */
  last_updated_at: z.string(),
});
