/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: SIEM Dashboard Migration components
 *   version: not applicable
 */

import { z } from '@kbn/zod';

import { NonEmptyString } from '../../api/model/primitives.gen';

/**
 * The last execution of the dashboard migration task.
 */
export type DashboardMigrationLastExecution = z.infer<typeof DashboardMigrationLastExecution>;
export const DashboardMigrationLastExecution = z.object({
  /**
   * The moment the last execution started.
   */
  started_at: z.string().optional(),
  /**
   * The moment the last execution finished.
   */
  finished_at: z.string().nullable().optional(),
  /**
   * The connector ID used for the last execution.
   */
  connector_id: z.string().optional(),
  /**
   * The error message if the last execution failed.
   */
  error: z.string().nullable().optional(),
  /**
   * Indicates if the last execution was stopped by the user.
   */
  is_stopped: z.boolean().optional(),
});

/**
 * The dashboard migration object ( without Id ) with its settings.
 */
export type DashboardMigrationData = z.infer<typeof DashboardMigrationData>;
export const DashboardMigrationData = z.object({
  /**
   * The rule migration name
   */
  name: NonEmptyString.optional(),
  /**
   * The user profile ID of the user who created the migration.
   */
  created_by: NonEmptyString,
  /**
   * The moment migration was created
   */
  created_at: NonEmptyString,
  /**
   * The last execution of the rule migration task.
   */
  last_execution: DashboardMigrationLastExecution.optional(),
});

/**
 * The dashboard migration object with its settings.
 */
export type DashboardMigration = z.infer<typeof DashboardMigration>;
export const DashboardMigration = z
  .object({
    /**
     * The rule migration id
     */
    id: NonEmptyString,
  })
  .merge(DashboardMigrationData);

/**
 * The raw dashboard object.
 */
export type RawDashboard = z.infer<typeof RawDashboard>;
export const RawDashboard = z.object({
  /**
   * The dashboard ID.
   */
  id: z.string(),
  /**
   * The dashboard label.
   */
  label: z.string(),
  /**
   * The dashboard title.
   */
  title: z.string(),
  /**
   * The raw XML data of the dashboard.
   */
  xml: z.string(),
  /**
   * The app associated with the EAI ACL.
   */
  app: z.string(),
  /**
   * The sharing level of the EAI ACL.
   */
  sharing: z.string(),
  /**
   * The owner of the EAI ACL.
   */
  owner: z.string(),
  /**
   * The last updated timestamp of the dashboard.
   */
  updated: z.string(),
});

/**
 * The status of each Dashboard migration.
 */
export type DashboardMigrationStatus = z.infer<typeof DashboardMigrationStatus>;
export const DashboardMigrationStatus = z.enum(['pending', 'processing', 'completed', 'failed']);
export type DashboardMigrationStatusEnum = typeof DashboardMigrationStatus.enum;
export const DashboardMigrationStatusEnum = DashboardMigrationStatus.enum;

/**
 * The rule migration document object.
 */
export type DashboardMigrationDashboardData = z.infer<typeof DashboardMigrationDashboardData>;
export const DashboardMigrationDashboardData = z.object({
  /**
   * The moment of creation
   */
  '@timestamp': z.string(),
  /**
   * The migration id.
   */
  migration_id: NonEmptyString,
  /**
   * The user profile ID of the user who created the migration.
   */
  created_by: NonEmptyString,
  /**
   * The original rule to migrate.
   */
  raw: RawDashboard,
  /**
   * The status of the rule migration process.
   */
  status: DashboardMigrationStatus.default('pending'),
  /**
   * The moment of the last update
   */
  updated_at: z.string().optional(),
  /**
   * The user who last updated the migration
   */
  updated_by: z.string().optional(),
});

/**
 * The rule migration document object.
 */
export type DashboardMigrationDashboard = z.infer<typeof DashboardMigrationDashboard>;
export const DashboardMigrationDashboard = z
  .object({
    /**
     * The rule migration id
     */
    id: NonEmptyString,
  })
  .merge(DashboardMigrationDashboardData);

/**
 * The status of the migration task.
 */
export type DashboardMigrationTaskStatus = z.infer<typeof DashboardMigrationTaskStatus>;
export const DashboardMigrationTaskStatus = z.enum([
  'ready',
  'running',
  'stopped',
  'finished',
  'interrupted',
]);
export type DashboardMigrationTaskStatusEnum = typeof DashboardMigrationTaskStatus.enum;
export const DashboardMigrationTaskStatusEnum = DashboardMigrationTaskStatus.enum;

/**
 * The rule migration task stats object.
 */
export type DashboardMigrationTaskStats = z.infer<typeof DashboardMigrationTaskStats>;
export const DashboardMigrationTaskStats = z.object({
  /**
   * The migration id
   */
  id: NonEmptyString,
  /**
   * The migration name
   */
  name: NonEmptyString,
  /**
   * Indicates if the migration task status.
   */
  status: DashboardMigrationTaskStatus,
  /**
   * The rules migration stats.
   */
  dashboards: z
    .object({
      /**
       * The total number of rules to migrate.
       */
      total: z.number().int(),
      /**
       * The number of rules that are pending migration.
       */
      pending: z.number().int(),
      /**
       * The number of rules that are being migrated.
       */
      processing: z.number().int(),
      /**
       * The number of rules that have been migrated successfully.
       */
      completed: z.number().int(),
      /**
       * The number of rules that have failed migration.
       */
      failed: z.number().int(),
    })
    .optional(),
  /**
   * The moment the migration was created.
   */
  created_at: z.string(),
  /**
   * The moment of the last update.
   */
  last_updated_at: z.string(),
});
