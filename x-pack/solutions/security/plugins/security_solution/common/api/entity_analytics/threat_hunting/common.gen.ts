/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Threat Hunting Common Schema
 *   version: 1
 */

import { z } from '@kbn/zod';

export type ThreatHuntingQueryQuery = z.infer<typeof ThreatHuntingQueryQuery>;
export const ThreatHuntingQueryQuery = z.object({
  query: z.string(),
  indices: z.array(z.string()),
  cleanedQuery: z.string(),
});

export type ThreatHuntingQuery = z.infer<typeof ThreatHuntingQuery>;
export const ThreatHuntingQuery = z.object({
  '@timestamp': z.string().datetime().optional(),
  author: z.string(),
  category: z.string().optional(),
  description: z.string(),
  integration: z.array(z.string()),
  uuid: z.string().uuid(),
  name: z.string(),
  language: z.array(z.string()),
  license: z.string(),
  notes: z.array(z.string()),
  mitre: z.array(z.string()),
  references: z.array(z.string()),
  queries: z.array(ThreatHuntingQueryQuery),
});

export type ThreatHuntingQueryIndexStatus = z.infer<typeof ThreatHuntingQueryIndexStatus>;
export const ThreatHuntingQueryIndexStatus = z.enum(['all', 'some', 'none', 'unknown']);
export type ThreatHuntingQueryIndexStatusEnum = typeof ThreatHuntingQueryIndexStatus.enum;
export const ThreatHuntingQueryIndexStatusEnum = ThreatHuntingQueryIndexStatus.enum;

export type ThreatHuntingQueryWithIndexCheck = z.infer<typeof ThreatHuntingQueryWithIndexCheck>;
export const ThreatHuntingQueryWithIndexCheck = z
  .object({
    indexStatus: ThreatHuntingQueryIndexStatus.optional(),
  })
  .merge(ThreatHuntingQuery);
