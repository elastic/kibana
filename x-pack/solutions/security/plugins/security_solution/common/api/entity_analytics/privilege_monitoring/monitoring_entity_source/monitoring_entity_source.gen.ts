/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Monitoring Entity Source Schema
 *   version: 1
 */

import { z } from '@kbn/zod';
import { BooleanFromString } from '@kbn/zod-helpers';

export type CreateMonitoringEntitySource = z.infer<typeof CreateMonitoringEntitySource>;
export const CreateMonitoringEntitySource = z.object({
  type: z.string(),
  name: z.string(),
  managed: z.boolean().optional(),
  indexPattern: z.string().optional(),
  enabled: z.boolean().optional(),
  error: z.string().optional(),
  integrationName: z.string().optional(),
  matchers: z
    .array(
      z.object({
        fields: z.array(z.string()),
        values: z.array(z.string()),
      })
    )
    .optional(),
  filter: z
    .object({
      kuery: z.union([z.string(), z.object({})]).optional(),
    })
    .optional(),
});

export type UpdatedMonitoringEntitySource = z.infer<typeof UpdatedMonitoringEntitySource>;
export const UpdatedMonitoringEntitySource = z.object({
  type: z.string().optional(),
  name: z.string().optional(),
  managed: z.boolean().optional(),
  indexPattern: z.string().optional(),
  enabled: z.boolean().optional(),
  error: z.string().optional(),
  integrationName: z.string().optional(),
  matchers: z
    .array(
      z.object({
        fields: z.array(z.string()),
        values: z.array(z.string()),
      })
    )
    .optional(),
  filter: z
    .object({
      kuery: z.union([z.string(), z.object({})]).optional(),
    })
    .optional(),
});

export type MonitoringEntitySource = z.infer<typeof MonitoringEntitySource>;
export const MonitoringEntitySource = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  indexPattern: z.string().optional(),
  integrationName: z.string().optional(),
  enabled: z.boolean().optional(),
  matchers: z
    .array(
      z.object({
        fields: z.array(z.string()),
        values: z.array(z.string()),
      })
    )
    .optional(),
  filter: z
    .object({
      kuery: z.union([z.string(), z.object({})]).optional(),
    })
    .optional(),
});

export type CreateEntitySourceRequestBody = z.infer<typeof CreateEntitySourceRequestBody>;
export const CreateEntitySourceRequestBody = CreateMonitoringEntitySource;
export type CreateEntitySourceRequestBodyInput = z.input<typeof CreateEntitySourceRequestBody>;

export type CreateEntitySourceResponse = z.infer<typeof CreateEntitySourceResponse>;
export const CreateEntitySourceResponse = UpdatedMonitoringEntitySource;

export type DeleteEntitySourceRequestParams = z.infer<typeof DeleteEntitySourceRequestParams>;
export const DeleteEntitySourceRequestParams = z.object({
  id: z.string(),
});
export type DeleteEntitySourceRequestParamsInput = z.input<typeof DeleteEntitySourceRequestParams>;

export type GetEntitySourceRequestParams = z.infer<typeof GetEntitySourceRequestParams>;
export const GetEntitySourceRequestParams = z.object({
  id: z.string(),
});
export type GetEntitySourceRequestParamsInput = z.input<typeof GetEntitySourceRequestParams>;

export type GetEntitySourceResponse = z.infer<typeof GetEntitySourceResponse>;
export const GetEntitySourceResponse = MonitoringEntitySource;
export type ListEntitySourcesRequestQuery = z.infer<typeof ListEntitySourcesRequestQuery>;
export const ListEntitySourcesRequestQuery = z.object({
  type: z.string().optional(),
  managed: BooleanFromString.optional(),
  name: z.string().optional(),
});
export type ListEntitySourcesRequestQueryInput = z.input<typeof ListEntitySourcesRequestQuery>;

export type ListEntitySourcesResponse = z.infer<typeof ListEntitySourcesResponse>;
export const ListEntitySourcesResponse = z.array(MonitoringEntitySource);

export type UpdateEntitySourceRequestParams = z.infer<typeof UpdateEntitySourceRequestParams>;
export const UpdateEntitySourceRequestParams = z.object({
  id: z.string(),
});
export type UpdateEntitySourceRequestParamsInput = z.input<typeof UpdateEntitySourceRequestParams>;

export type UpdateEntitySourceRequestBody = z.infer<typeof UpdateEntitySourceRequestBody>;
export const UpdateEntitySourceRequestBody = MonitoringEntitySource;
export type UpdateEntitySourceRequestBodyInput = z.input<typeof UpdateEntitySourceRequestBody>;

export type UpdateEntitySourceResponse = z.infer<typeof UpdateEntitySourceResponse>;
export const UpdateEntitySourceResponse = UpdatedMonitoringEntitySource;
