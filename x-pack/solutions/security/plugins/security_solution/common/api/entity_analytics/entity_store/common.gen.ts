/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Entity Store Common Schema
 *   version: 1
 */

import { z } from '@kbn/zod';

export type EntityType = z.infer<typeof EntityType>;
export const EntityType = z.enum(['user', 'host', 'service']);
export type EntityTypeEnum = typeof EntityType.enum;
export const EntityTypeEnum = EntityType.enum;

export type IndexPattern = z.infer<typeof IndexPattern>;
export const IndexPattern = z.string();

export type EngineStatus = z.infer<typeof EngineStatus>;
export const EngineStatus = z.enum(['installing', 'started', 'stopped', 'updating', 'error']);
export type EngineStatusEnum = typeof EngineStatus.enum;
export const EngineStatusEnum = EngineStatus.enum;

export type EngineDescriptor = z.infer<typeof EngineDescriptor>;
export const EngineDescriptor = z.object({
  type: EntityType,
  indexPattern: IndexPattern,
  status: EngineStatus,
  filter: z.string().optional(),
  fieldHistoryLength: z.number().int(),
  lookbackPeriod: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('24h'),
  timestampField: z.string().optional(),
  timeout: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('180s'),
  frequency: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('1m'),
  delay: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('1m'),
  docsPerSecond: z.number().int().optional(),
  error: z.object({}).optional(),
});

export type TransformStatsMetadata = z.infer<typeof TransformStatsMetadata>;
export const TransformStatsMetadata = z.object({
  pages_processed: z.number().int(),
  documents_processed: z.number().int(),
  documents_indexed: z.number().int(),
  documents_deleted: z.number().int().optional(),
  trigger_count: z.number().int(),
  index_time_in_ms: z.number().int(),
  index_total: z.number().int(),
  index_failures: z.number().int(),
  search_time_in_ms: z.number().int(),
  search_total: z.number().int(),
  search_failures: z.number().int(),
  processing_time_in_ms: z.number().int(),
  processing_total: z.number().int(),
  delete_time_in_ms: z.number().int().optional(),
  exponential_avg_checkpoint_duration_ms: z.number().int(),
  exponential_avg_documents_indexed: z.number().int(),
  exponential_avg_documents_processed: z.number().int(),
});

export type Metadata = z.infer<typeof Metadata>;
export const Metadata = TransformStatsMetadata;

export type EngineComponentResource = z.infer<typeof EngineComponentResource>;
export const EngineComponentResource = z.enum([
  'entity_engine',
  'entity_definition',
  'index',
  'component_template',
  'index_template',
  'ingest_pipeline',
  'enrich_policy',
  'task',
  'transform',
]);
export type EngineComponentResourceEnum = typeof EngineComponentResource.enum;
export const EngineComponentResourceEnum = EngineComponentResource.enum;

export type EngineComponentStatus = z.infer<typeof EngineComponentStatus>;
export const EngineComponentStatus = z.object({
  id: z.string(),
  installed: z.boolean(),
  metadata: Metadata.optional(),
  resource: EngineComponentResource,
  health: z.enum(['green', 'yellow', 'red', 'unknown']).optional(),
  errors: z
    .array(
      z.object({
        title: z.string().optional(),
        message: z.string().optional(),
      })
    )
    .optional(),
});

export type StoreStatus = z.infer<typeof StoreStatus>;
export const StoreStatus = z.enum(['not_installed', 'installing', 'running', 'stopped', 'error']);
export type StoreStatusEnum = typeof StoreStatus.enum;
export const StoreStatusEnum = StoreStatus.enum;

export type InspectQuery = z.infer<typeof InspectQuery>;
export const InspectQuery = z.object({
  response: z.array(z.string()),
  dsl: z.array(z.string()),
});

/**
 * Interval in which enrich policy runs. For example, `"1h"` means the rule runs every hour. Must be less than or equal to half the duration of the lookback period,
 */
export type Interval = z.infer<typeof Interval>;
export const Interval = z.string().regex(/^[1-9]\d*[smh]$/);
