/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Enable Entity Store
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';

import { IndexPattern, EntityType, Interval, EngineDescriptor } from './common.gen';

export type InitEntityStoreRequestBody = z.infer<typeof InitEntityStoreRequestBody>;
export const InitEntityStoreRequestBody = z.object({
  /**
   * The number of historical values to keep for each field.
   */
  fieldHistoryLength: z.number().int().optional().default(10),
  indexPattern: IndexPattern.optional(),
  filter: z.string().optional(),
  entityTypes: z.array(EntityType).optional(),
  enrichPolicyExecutionInterval: Interval.optional(),
  /**
   * The field to use as the timestamp.
   */
  timestampField: z.string().optional().default('@timestamp'),
  /**
   * The amount of time the transform looks back to calculate the aggregations.
   */
  lookbackPeriod: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('24h'),
  /**
   * The timeout for initializing the aggregating transform.
   */
  timeout: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('180s'),
  /**
   * The frequency at which the transform will run.
   */
  frequency: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('1m'),
  /**
   * The delay before the transform will run.
   */
  delay: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('1m'),
  /**
   * The number of documents per second to process.
   */
  docsPerSecond: z.number().int().optional(),
});
export type InitEntityStoreRequestBodyInput = z.input<typeof InitEntityStoreRequestBody>;

export type InitEntityStoreResponse = z.infer<typeof InitEntityStoreResponse>;
export const InitEntityStoreResponse = z.object({
  succeeded: z.boolean().optional(),
  engines: z.array(EngineDescriptor).optional(),
});
