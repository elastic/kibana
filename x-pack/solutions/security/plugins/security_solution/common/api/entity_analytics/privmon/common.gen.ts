/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Privileged User Monitoring Common Schema
 *   version: 1
 */

import { z } from '@kbn/zod';

export type PrivilegedUserObservation = z.infer<typeof PrivilegedUserObservation>;
export const PrivilegedUserObservation = z.object({
  observation_type: z.string().optional(),
  summary: z.string().optional(),
  raw_event: z.object({}).optional(),
  timestamp: z.string().optional(),
  ingested: z.string().optional(),
});

export type PrivilegedUserDoc = z.infer<typeof PrivilegedUserDoc>;
export const PrivilegedUserDoc = z.object({
  '@timestamp': z.string(),
  created_at: z.string(),
  is_privileged: z.boolean(),
  observations: z.array(PrivilegedUserObservation).optional(),
  user: z.object({
    id: z.string().optional(),
    name: z.string(),
  }),
});

export type PrivmonLoginDoc = z.infer<typeof PrivmonLoginDoc>;
export const PrivmonLoginDoc = z.object({
  '@timestamp': z.string(),
  event: z.object({
    action: z.string().optional(),
    category: z.array(z.string()).optional(),
    type: z.array(z.string()).optional(),
    outcome: z.string().optional(),
    kind: z.string().optional(),
    id: z.string().optional(),
    provider: z.string().optional(),
    ingested: z.string(),
  }),
  user: z.object({
    id: z.string().optional(),
    name: z.string(),
    type: z.string().optional(),
    domain: z.string().optional(),
  }),
  host: z.object({
    name: z.string().optional(),
    hostname: z.string().optional(),
    ip: z.string().optional(),
    os: z
      .object({
        type: z.string().optional(),
        name: z.string().optional(),
        version: z.string().optional(),
      })
      .optional(),
  }),
  source: z.object({
    ip: z.string().optional(),
    geo: z
      .object({
        country_iso_code: z.string().optional(),
        city_name: z.string().optional(),
        location: z
          .object({
            lat: z.number().optional(),
            lon: z.number().optional(),
          })
          .optional(),
      })
      .optional(),
  }),
  destination: z
    .object({
      ip: z.string().optional(),
      port: z.number().optional(),
    })
    .optional(),
  related: z
    .object({
      user: z.array(z.string()).optional(),
      ip: z.array(z.string()).optional(),
    })
    .optional(),
  log: z
    .object({
      level: z.string().optional(),
      source: z.string().optional(),
    })
    .optional(),
  tags: z.array(z.string()).optional(),
});

export type PrivmonPrivilegeDoc = z.infer<typeof PrivmonPrivilegeDoc>;
export const PrivmonPrivilegeDoc = z.object({
  '@timestamp': z.string(),
  event: z.object({
    action: z.string().optional(),
    category: z.array(z.string()).optional(),
    type: z.array(z.string()).optional(),
    outcome: z.string().optional(),
    kind: z.string().optional(),
    id: z.string().optional(),
    provider: z.string().optional(),
    ingested: z.string(),
  }),
  user: z.object({
    id: z.string().optional(),
    name: z.string().optional(),
    type: z.string().optional(),
  }),
  target: z.object({
    user: z
      .object({
        id: z.string().optional(),
        name: z.string().optional(),
        type: z.string().optional(),
        created: z.string().optional(),
      })
      .optional(),
  }),
  group: z
    .object({
      name: z.string().optional(),
      id: z.string().optional(),
    })
    .optional(),
  source: z
    .object({
      ip: z.string().optional(),
      geo: z
        .object({
          country_iso_code: z.string().optional(),
          city_name: z.string().optional(),
          location: z
            .object({
              lat: z.number().optional(),
              lon: z.number().optional(),
            })
            .optional(),
        })
        .optional(),
    })
    .optional(),
  tags: z.array(z.string()).optional(),
});
