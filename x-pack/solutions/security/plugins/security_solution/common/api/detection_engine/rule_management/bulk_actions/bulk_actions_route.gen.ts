/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Bulk Actions API endpoint
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';
import { BooleanFromString } from '@kbn/zod-helpers';

import { RuleResponse } from '../../model/rule_schema/rule_schemas.gen';
import {
  RuleActionGroup,
  RuleActionId,
  RuleActionParams,
  RuleActionFrequency,
  RuleActionAlertsFilter,
  IndexPatternArray,
  RuleTagArray,
  InvestigationFields,
  TimelineTemplateId,
  TimelineTemplateTitle,
} from '../../model/rule_schema/common_attributes.gen';

export type BulkEditSkipReason = z.infer<typeof BulkEditSkipReason>;
export const BulkEditSkipReason = z.literal('RULE_NOT_MODIFIED');

export type BulkActionSkipResult = z.infer<typeof BulkActionSkipResult>;
export const BulkActionSkipResult = z.object({
  id: z.string(),
  name: z.string().optional(),
  skip_reason: BulkEditSkipReason,
});

export type RuleDetailsInError = z.infer<typeof RuleDetailsInError>;
export const RuleDetailsInError = z.object({
  id: z.string(),
  name: z.string().optional(),
});

export type BulkActionsDryRunErrCode = z.infer<typeof BulkActionsDryRunErrCode>;
export const BulkActionsDryRunErrCode = z.enum([
  'IMMUTABLE',
  'PREBUILT_CUSTOMIZATION_LICENSE',
  'MACHINE_LEARNING_AUTH',
  'MACHINE_LEARNING_INDEX_PATTERN',
  'ESQL_INDEX_PATTERN',
  'MANUAL_RULE_RUN_FEATURE',
  'MANUAL_RULE_RUN_DISABLED_RULE',
]);
export type BulkActionsDryRunErrCodeEnum = typeof BulkActionsDryRunErrCode.enum;
export const BulkActionsDryRunErrCodeEnum = BulkActionsDryRunErrCode.enum;

export type NormalizedRuleError = z.infer<typeof NormalizedRuleError>;
export const NormalizedRuleError = z.object({
  message: z.string(),
  status_code: z.number().int(),
  err_code: BulkActionsDryRunErrCode.optional(),
  rules: z.array(RuleDetailsInError),
});

export type BulkEditActionResults = z.infer<typeof BulkEditActionResults>;
export const BulkEditActionResults = z.object({
  updated: z.array(RuleResponse),
  created: z.array(RuleResponse),
  deleted: z.array(RuleResponse),
  skipped: z.array(BulkActionSkipResult),
});

/**
 * A rule can only be skipped when the bulk action to be performed on it results in nothing being done. For example, if the `edit` action is used to add a tag to a rule that already has that tag, or to delete an index pattern that is not specified in a rule. Objects returned in `attributes.results.skipped` will only include rules' `id`, `name`, and `skip_reason`.
 */
export type BulkEditActionSummary = z.infer<typeof BulkEditActionSummary>;
export const BulkEditActionSummary = z.object({
  failed: z.number().int(),
  skipped: z.number().int(),
  succeeded: z.number().int(),
  total: z.number().int(),
});

export type BulkEditActionResponse = z.infer<typeof BulkEditActionResponse>;
export const BulkEditActionResponse = z.object({
  success: z.boolean().optional(),
  status_code: z.number().int().optional(),
  message: z.string().optional(),
  rules_count: z.number().int().optional(),
  attributes: z.object({
    results: BulkEditActionResults,
    summary: BulkEditActionSummary,
    errors: z.array(NormalizedRuleError).optional(),
  }),
});

export type BulkExportActionResponse = z.infer<typeof BulkExportActionResponse>;
export const BulkExportActionResponse = z.string();

export type BulkActionBase = z.infer<typeof BulkActionBase>;
export const BulkActionBase = z.object({
  /**
   * Query to filter rules.
   */
  query: z.string().optional(),
  /**
   * Array of rule IDs. Array of rule IDs to which a bulk action will be applied. Only valid when query property is undefined.
   */
  ids: z.array(z.string()).min(1).optional(),
});

export type BulkDeleteRules = z.infer<typeof BulkDeleteRules>;
export const BulkDeleteRules = BulkActionBase.merge(
  z.object({
    action: z.literal('delete'),
  })
);

export type BulkDisableRules = z.infer<typeof BulkDisableRules>;
export const BulkDisableRules = BulkActionBase.merge(
  z.object({
    action: z.literal('disable'),
  })
);

export type BulkEnableRules = z.infer<typeof BulkEnableRules>;
export const BulkEnableRules = BulkActionBase.merge(
  z.object({
    action: z.literal('enable'),
  })
);

export type BulkExportRules = z.infer<typeof BulkExportRules>;
export const BulkExportRules = BulkActionBase.merge(
  z.object({
    action: z.literal('export'),
  })
);

export type BulkDuplicateRules = z.infer<typeof BulkDuplicateRules>;
export const BulkDuplicateRules = BulkActionBase.merge(
  z.object({
    action: z.literal('duplicate'),
    /**
     * Duplicate object that describes applying an update action.
     */
    duplicate: z
      .object({
        /**
         * Whether to copy exceptions from the original rule
         */
        include_exceptions: z.boolean(),
        /**
         * Whether to copy expired exceptions from the original rule
         */
        include_expired_exceptions: z.boolean(),
      })
      .optional(),
  })
);

export type BulkManualRuleRun = z.infer<typeof BulkManualRuleRun>;
export const BulkManualRuleRun = BulkActionBase.merge(
  z.object({
    action: z.literal('run'),
    /**
     * Object that describes applying a manual rule run action.
     */
    run: z.object({
      /**
       * Start date of the manual rule run
       */
      start_date: z.string(),
      /**
       * End date of the manual rule run
       */
      end_date: z.string().optional(),
    }),
  })
);

/**
  * Defines the maximum interval in which a rule’s actions are executed.
> info
> The rule level `throttle` field is deprecated in Elastic Security 8.8 and will remain active for at least the next 12 months.
> In Elastic Security 8.8 and later, you can use the `frequency` field to define frequencies for individual actions. Actions without frequencies will acquire a converted version of the rule’s `throttle` field. In the response, the converted `throttle` setting appears in the individual actions' `frequency` field.

  */
export type ThrottleForBulkActions = z.infer<typeof ThrottleForBulkActions>;
export const ThrottleForBulkActions = z.enum(['rule', '1h', '1d', '7d']);
export type ThrottleForBulkActionsEnum = typeof ThrottleForBulkActions.enum;
export const ThrottleForBulkActionsEnum = ThrottleForBulkActions.enum;

export type BulkActionType = z.infer<typeof BulkActionType>;
export const BulkActionType = z.enum([
  'enable',
  'disable',
  'export',
  'delete',
  'duplicate',
  'edit',
  'run',
]);
export type BulkActionTypeEnum = typeof BulkActionType.enum;
export const BulkActionTypeEnum = BulkActionType.enum;

export type BulkActionEditType = z.infer<typeof BulkActionEditType>;
export const BulkActionEditType = z.enum([
  'add_tags',
  'delete_tags',
  'set_tags',
  'add_index_patterns',
  'delete_index_patterns',
  'set_index_patterns',
  'set_timeline',
  'add_rule_actions',
  'set_rule_actions',
  'set_schedule',
  'add_investigation_fields',
  'delete_investigation_fields',
  'set_investigation_fields',
]);
export type BulkActionEditTypeEnum = typeof BulkActionEditType.enum;
export const BulkActionEditTypeEnum = BulkActionEditType.enum;

export type NormalizedRuleAction = z.infer<typeof NormalizedRuleAction>;
export const NormalizedRuleAction = z
  .object({
    group: RuleActionGroup.optional(),
    id: RuleActionId,
    params: RuleActionParams,
    frequency: RuleActionFrequency.optional(),
    alerts_filter: RuleActionAlertsFilter.optional(),
  })
  .strict();

export type BulkActionEditPayloadRuleActions = z.infer<typeof BulkActionEditPayloadRuleActions>;
export const BulkActionEditPayloadRuleActions = z.object({
  type: z.enum(['add_rule_actions', 'set_rule_actions']),
  value: z.object({
    throttle: ThrottleForBulkActions.optional(),
    actions: z.array(NormalizedRuleAction),
  }),
});

export type BulkActionEditPayloadSchedule = z.infer<typeof BulkActionEditPayloadSchedule>;
export const BulkActionEditPayloadSchedule = z.object({
  type: z.literal('set_schedule'),
  value: z.object({
    /**
     * Interval in which the rule runs. For example, `"1h"` means the rule runs every hour.
     */
    interval: z.string().regex(/^[1-9]\d*[smh]$/),
    /**
     * Lookback time for the rule
     */
    lookback: z.string().regex(/^[1-9]\d*[smh]$/),
  }),
});

export type BulkActionEditPayloadIndexPatterns = z.infer<typeof BulkActionEditPayloadIndexPatterns>;
export const BulkActionEditPayloadIndexPatterns = z.object({
  type: z.enum(['add_index_patterns', 'delete_index_patterns', 'set_index_patterns']),
  value: IndexPatternArray,
  overwrite_data_views: z.boolean().optional(),
});

export type BulkActionEditPayloadTags = z.infer<typeof BulkActionEditPayloadTags>;
export const BulkActionEditPayloadTags = z.object({
  type: z.enum(['add_tags', 'delete_tags', 'set_tags']),
  value: RuleTagArray,
});

export type BulkActionEditPayloadInvestigationFields = z.infer<
  typeof BulkActionEditPayloadInvestigationFields
>;
export const BulkActionEditPayloadInvestigationFields = z.object({
  type: z.enum([
    'add_investigation_fields',
    'delete_investigation_fields',
    'set_investigation_fields',
  ]),
  value: InvestigationFields,
});

export type BulkActionEditPayloadTimeline = z.infer<typeof BulkActionEditPayloadTimeline>;
export const BulkActionEditPayloadTimeline = z.object({
  type: z.literal('set_timeline'),
  value: z.object({
    timeline_id: TimelineTemplateId,
    timeline_title: TimelineTemplateTitle,
  }),
});

export const BulkActionEditPayloadInternal = z.union([
  BulkActionEditPayloadTags,
  BulkActionEditPayloadIndexPatterns,
  BulkActionEditPayloadInvestigationFields,
  BulkActionEditPayloadTimeline,
  BulkActionEditPayloadRuleActions,
  BulkActionEditPayloadSchedule,
]);

export type BulkActionEditPayload = z.infer<typeof BulkActionEditPayloadInternal>;
export const BulkActionEditPayload =
  BulkActionEditPayloadInternal as z.ZodType<BulkActionEditPayload>;

export type BulkEditRules = z.infer<typeof BulkEditRules>;
export const BulkEditRules = BulkActionBase.merge(
  z.object({
    action: z.literal('edit'),
    /**
     * Array of objects containing the edit operations
     */
    edit: z.array(BulkActionEditPayload).min(1),
  })
);

export type PerformRulesBulkActionRequestQuery = z.infer<typeof PerformRulesBulkActionRequestQuery>;
export const PerformRulesBulkActionRequestQuery = z.object({
  /** 
      * Enables dry run mode for the request call.

Enable dry run mode to verify that bulk actions can be applied to specified rules. Certain rules, such as prebuilt Elastic rules on a Basic subscription, can’t be edited and will return errors in the request response. Error details will contain an explanation, the rule name and/or ID, and additional troubleshooting information.

To enable dry run mode on a request, add the query parameter `dry_run=true` to the end of the request URL. Rules specified in the request will be temporarily updated. These updates won’t be written to Elasticsearch.
> info
> Dry run mode is not supported for the `export` bulk action. A 400 error will be returned in the request response.
 
      */
  dry_run: BooleanFromString.optional(),
});
export type PerformRulesBulkActionRequestQueryInput = z.input<
  typeof PerformRulesBulkActionRequestQuery
>;

export type PerformRulesBulkActionRequestBody = z.infer<typeof PerformRulesBulkActionRequestBody>;
export const PerformRulesBulkActionRequestBody = z.union([
  BulkDeleteRules,
  BulkDisableRules,
  BulkEnableRules,
  BulkExportRules,
  BulkDuplicateRules,
  BulkManualRuleRun,
  BulkEditRules,
]);
export type PerformRulesBulkActionRequestBodyInput = z.input<
  typeof PerformRulesBulkActionRequestBody
>;

export type PerformRulesBulkActionResponse = z.infer<typeof PerformRulesBulkActionResponse>;
export const PerformRulesBulkActionResponse = z.union([
  BulkEditActionResponse,
  BulkExportActionResponse,
]);
