openapi: 3.0.0
info:
  title: Common Rule Attributes
  version: 'not applicable'
paths: {}
components:
  x-codegen-enabled: true
  schemas:
    RuleObjectId:
      $ref: '../../../model/primitives.schema.yaml#/components/schemas/UUID'
      description: The unique identifier for the rule object.

    RuleSignatureId:
      type: string
      description: A unique identifier for the rule, which could be any string, not necessarily a UUID.

    RuleName:
      type: string
      description: The rule’s name.
      minLength: 1

    RuleDescription:
      type: string
      description: The rule’s description.
      minLength: 1

    RuleVersion:
      type: integer
      minimum: 1
      description: |
        The rule's version number.

        - For prebuilt rules it represents the version of the rule's content in the source [detection-rules](https://github.com/elastic/detection-rules) repository (and the corresponding `security_detection_engine` Fleet package that is used for distributing prebuilt rules). 
        - For custom rules it is set to `1` when the rule is created. 
        > info
        > It is not incremented on each update. Compare this to the `revision` field.

    RuleRevision:
      type: integer
      minimum: 0
      description: |
        The rule's revision number.

        It represents the version of rule's object in Kibana. It is set to `0` when the rule is installed or created and then gets incremented on each update.
        > info
        > Not all updates to any rule fields will increment the revision. Only those fields that are considered static `rule parameters` can trigger revision increments. For example, an update to a rule's query or index fields will increment the rule's revision by `1`. However, changes to dynamic or technical fields like enabled or execution_summary will not cause revision increments.

    QueryLanguage:
      type: string
      enum:
        - kuery
        - lucene
        - eql
        - esql

    KqlQueryLanguage:
      type: string
      enum:
        - kuery
        - lucene

    IsRuleImmutable:
      type: boolean
      deprecated: true
      description: This field determines whether the rule is a prebuilt Elastic rule. It will be replaced with the `rule_source` field.

    IsExternalRuleCustomized:
      type: boolean
      description: Determines whether an external/prebuilt rule has been customized by the user (i.e. any of its fields have been modified and diverged from the base value).

    InternalRuleSource:
      description: Type of rule source for internally sourced rules, i.e. created within the Kibana apps.
      type: object
      properties:
        type:
          type: string
          enum:
            - internal
      required:
        - type

    ExternalRuleSource:
      description: Type of rule source for externally sourced rules, i.e. rules that have an external source, such as the Elastic Prebuilt rules repo.
      type: object
      properties:
        type:
          type: string
          enum:
            - external
        is_customized:
          $ref: '#/components/schemas/IsExternalRuleCustomized'
      required:
        - type
        - is_customized

    RuleSource:
      description: Discriminated union that determines whether the rule is internally sourced (created within the Kibana app) or has an external source, such as the Elastic Prebuilt rules repo.
      discriminator:
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/ExternalRuleSource'
        - $ref: '#/components/schemas/InternalRuleSource'

    IsRuleEnabled:
      type: boolean
      description: Determines whether the rule is enabled. Defaults to true.

    RuleInterval:
      type: string
      description: Frequency of rule execution, using a date math range. For example, "1h" means the rule runs every hour. Defaults to 5m (5 minutes).

    RuleIntervalFrom:
      type: string
      description: Time from which data is analyzed each time the rule runs, using a date math range. For example, now-4200s means the rule analyzes data from 70 minutes before its start time. Defaults to now-6m (analyzes data from 6 minutes before the start time).
      format: date-math

    RuleIntervalTo:
      type: string

    RiskScore:
      type: integer
      description: |
        A numerical representation of the alert's severity from 0 to 100, where:
        * `0` - `21` represents low severity
        * `22` - `47` represents medium severity
        * `48` - `73` represents high severity
        * `74` - `100` represents critical severity
      minimum: 0
      maximum: 100

    RiskScoreMapping:
      type: array
      items:
        type: object
        properties:
          field:
            type: string
          operator:
            type: string
            enum:
              - equals
          value:
            type: string
          risk_score:
            $ref: '#/components/schemas/RiskScore'
        required:
          - field
          - operator
          - value
      description: |
        Overrides generated alerts' risk_score with a value from the source event:

        - field (string, required): Source event field used to override the default risk_score. This field must be an integer.
        - operator (string, required): Must be equals.
        - value(string, required): Must be an empty string ("").
    Severity:
      type: string
      enum: [low, medium, high, critical]
      description: |
        Severity level of alerts produced by the rule, which must be one of the following:
        * `low`: Alerts that are of interest but generally not considered to be security incidents
        * `medium`: Alerts that require investigation
        * `high`: Alerts that require immediate investigation
        * `critical`: Alerts that indicate it is highly likely a security incident has occurred

    SeverityMapping:
      type: array
      items:
        type: object
        properties:
          field:
            type: string
          operator:
            type: string
            enum:
              - equals
          severity:
            $ref: '#/components/schemas/Severity'
          value:
            type: string
        required:
          - field
          - operator
          - severity
          - value
      description: Overrides generated alerts' severity with values from the source event

    RuleTagArray:
      type: array
      items:
        type: string
      description: String array containing words and phrases to help categorize, filter, and search rules. Defaults to an empty array.

    RuleMetadata:
      type: object
      description: |
        Placeholder for metadata about the rule.

        > info
        > This field is overwritten when you save changes to the rule’s settings.

      additionalProperties: true

    RuleLicense:
      type: string
      description: The rule's license.

    RuleAuthorArray:
      type: array
      description: The rule’s author.
      items:
        type: string

    RuleFalsePositiveArray:
      type: array
      description: String array used to describe common reasons why the rule may issue false-positive alerts. Defaults to an empty array.
      items:
        type: string

    RuleReferenceArray:
      type: array
      description: Array containing notes about or references to relevant information about the rule. Defaults to an empty array.
      items:
        type: string

    InvestigationGuide:
      type: string
      description: Notes to help investigate alerts produced by the rule.

    SetupGuide:
      type: string
      description: Populates the rule’s setup guide with instructions on rule prerequisites such as required integrations, configuration steps, and anything else needed for the rule to work correctly.

    BuildingBlockType:
      type: string
      description: Determines if the rule acts as a building block. By default, building-block alerts are not displayed in the UI. These rules are used as a foundation for other rules that do generate alerts. Its value must be default.

    AlertsIndex:
      type: string
      description: (deprecated) Has no effect.
      deprecated: true

    AlertsIndexNamespace:
      type: string
      description: Has no effect.

    MaxSignals:
      type: integer
      description: |
        Maximum number of alerts the rule can create during a single run. Defaults to 100.

        > info
        > This setting can be superseded by the [Kibana configuration setting](https://www.elastic.co/guide/en/kibana/current/alert-action-settings-kb.html#alert-settings) xpack.alerting.rules.run.alerts.max, which determines the maximum alerts generated by any rule in the Kibana alerting framework. For example, if xpack.alerting.rules.run.alerts.max is set to 1000, the rule can generate no more than 1000 alerts even if max_signals is set higher.
      minimum: 1

    ThreatSubtechnique:
      type: object
      description: |
        Array containing more specific information on the attack technique.

        > info
        > Only threats described using the MITRE ATT&CKTM framework are displayed in the UI (Rules → Detection rules (SIEM) → Rule name).
      properties:
        id:
          type: string
          description: Subtechnique ID
        name:
          type: string
          description: Subtechnique name
        reference:
          type: string
          description: Subtechnique reference
      required:
        - id
        - name
        - reference

    ThreatTechnique:
      type: object
      properties:
        id:
          type: string
          description: Technique ID
        name:
          type: string
          description: Technique name
        reference:
          type: string
          description: Technique reference
        subtechnique:
          type: array
          items:
            $ref: '#/components/schemas/ThreatSubtechnique'
      required:
        - id
        - name
        - reference

    ThreatTactic:
      type: object
      description: |
        Object containing information on the attack type
      properties:
        id:
          type: string
          description: Tactic ID
        name:
          type: string
          description: Tactic name
        reference:
          type: string
          description: Tactic reference
      required:
        - id
        - name
        - reference

    Threat:
      type: object
      properties:
        framework:
          type: string
          description: Relevant attack framework
        tactic:
          $ref: '#/components/schemas/ThreatTactic'
        technique:
          type: array
          items:
            $ref: '#/components/schemas/ThreatTechnique'
          description: Array containing information on the attack techniques (optional)
      required:
        - framework
        - tactic

    ThreatArray:
      type: array
      items:
        $ref: '#/components/schemas/Threat'

    IndexPatternArray:
      description: |
        Indices on which the rule functions. Defaults to the Security Solution indices defined on the Kibana Advanced Settings page (Kibana → Stack Management → Advanced Settings → securitySolution:defaultIndex).

        > info
        > This field is not supported for ES|QL rules.
      type: array
      items:
        type: string

    DataViewId:
      type: string

    SavedQueryId:
      type: string
      description: Kibana saved search used by the rule to create alerts.

    RuleQuery:
      type: string
      description: My New Query description

    RuleFilterArray:
      type: array
      description: |
        The query and filter context array used to define the conditions for when alerts are created from events. Defaults to an empty array.

        > info
        > This field is not supported for ES|QL rules.
      items: {} # unknown

    RuleNameOverride:
      type: string
      description: Sets the source field for the alert's signal.rule.name value. (in the UI, this value is displayed on the Rules page in the Rule column). When unspecified, the rule’s name value is used. The source field must be a string data type.

    TimestampOverride:
      type: string
      description: Sets the time field used to query indices. When unspecified, rules query the @timestamp field. The source field must be an Elasticsearch date data type.

    TimestampOverrideFallbackDisabled:
      type: boolean
      description: Disables the fallback to the event's @timestamp field

    RequiredField:
      type: object
      description: |
        Describes an Elasticsearch field that is needed for the rule to function.

        Almost all types of Security rules check source event documents for a match to some kind of
        query or filter. If a document has certain field with certain values, then it's a match and
        the rule will generate an alert.

        Required field is an event field that must be present in the source indices of a given rule.

        @example
        const standardEcsField: RequiredField = {
          name: 'event.action',
          type: 'keyword',
          ecs: true,
        };

        @example
        const nonEcsField: RequiredField = {
          name: 'winlog.event_data.AttributeLDAPDisplayName',
          type: 'keyword',
          ecs: false,
        };
      properties:
        name:
          type: string
          format: nonempty
          minLength: 1
          description: Name of an Elasticsearch field
        type:
          type: string
          format: nonempty
          minLength: 1
          description: Type of the Elasticsearch field
        ecs:
          type: boolean
          description: Indicates whether the field is ECS-compliant. This property is only present in responses. Its value is computed based on field’s name and type.
      required:
        - name
        - type
        - ecs

    RequiredFieldInput:
      type: object
      description: Input parameters to create a RequiredField. Does not include the `ecs` field, because `ecs` is calculated on the backend based on the field name and type.
      properties:
        name:
          type: string
          format: nonempty
          minLength: 1
          description: Name of an Elasticsearch field
        type:
          type: string
          format: nonempty
          minLength: 1
          description: Type of the Elasticsearch field
      required:
        - name
        - type

    RequiredFieldArray:
      type: array
      items:
        $ref: '#/components/schemas/RequiredField'

    TimelineTemplateId:
      type: string
      description: Timeline template ID

    TimelineTemplateTitle:
      type: string
      description: Timeline template title

    SavedObjectResolveOutcome:
      type: string
      enum:
        - exactMatch
        - aliasMatch
        - conflict

    SavedObjectResolveAliasTargetId:
      type: string

    SavedObjectResolveAliasPurpose:
      type: string
      enum:
        - savedObjectConversion
        - savedObjectImport

    RelatedIntegration:
      type: object
      properties:
        package:
          $ref: '../../../model/primitives.schema.yaml#/components/schemas/NonEmptyString'
        version:
          $ref: '../../../model/primitives.schema.yaml#/components/schemas/NonEmptyString'
        integration:
          $ref: '../../../model/primitives.schema.yaml#/components/schemas/NonEmptyString'
      required:
        - package
        - version

    RelatedIntegrationArray:
      type: array
      items:
        $ref: '#/components/schemas/RelatedIntegration'

    InvestigationFields:
      type: object
      description: |
        Schema for fields relating to investigation fields. These are user defined fields we use to highlight
        in various features in the UI such as alert details flyout and exceptions auto-population from alert.
      properties:
        field_names:
          type: array
          items:
            $ref: '../../../model/primitives.schema.yaml#/components/schemas/NonEmptyString'
          minItems: 1
      required:
        - field_names

    RuleActionThrottle:
      description: |
        Defines how often rule actions are taken.
        - no_actions: Never
        - rule: Every time new alerts are detected
        - 1h: Every hour
        - 1d: Every day
        - 7d: Every week

        > info
        > The rule level throttle field is deprecated in Elastic Security 8.8 and will remain active for at least the next 12 months.
        > In Elastic Security 8.8 and later, you can use the (frequency) field to define frequencies for individual actions. Actions without frequencies will acquire a converted version of the rule’s throttle field. In the response, the converted throttle setting appears in the individual actions' frequency field.
      oneOf:
        - type: string
          enum:
            - 'no_actions'
            - 'rule'
        - type: string
          pattern: '^[1-9]\d*[smhd]$' # any number except zero followed by one of the suffixes 's', 'm', 'h', 'd'
          description: Time interval in seconds, minutes, hours, or days.
          example: '1h'

    RuleActionNotifyWhen:
      type: string
      enum:
        - 'onActiveAlert'
        - 'onThrottleInterval'
        - 'onActionGroupChange'
      description: 'The condition for throttling the notification: `onActionGroupChange`, `onActiveAlert`,  or `onThrottleInterval`'

    RuleActionFrequency:
      type: object
      description: The action frequency defines when the action runs (for example, only on rule execution or at specific time intervals).
      properties:
        summary:
          type: boolean
          description: Action summary indicates whether we will send a summary notification about all the generate alerts or notification per individual alert
        notifyWhen:
          $ref: '#/components/schemas/RuleActionNotifyWhen'
        throttle:
          $ref: '#/components/schemas/RuleActionThrottle'
          nullable: true
      required:
        - summary
        - notifyWhen
        - throttle

    RuleActionAlertsFilter:
      type: object
      description: Object containing an action’s conditional filters.
      properties:
        timeframe:
          type: object
          description: Object containing the time frame for when this action can be run.
          properties:
            days:
              type: array
              items:
                type: integer
              description: List of days of the week on which this action can be run. Days of the week are expressed as numbers between `1-7`, where `1` is Monday and `7` is Sunday. To select all days of the week, enter an empty array.
            hours:
              type: object
              description: The hours of the day during which this action can run. Hours of the day are expressed as two strings in the format `hh:mm` in `24` hour time. A start of `00:00` and an end of `24:00` means the action can run all day.
              properties:
                start:
                  type: string
                  description: Start time in `hh:mm` format.
                end:
                  type: string
                  description: End time in `hh:mm` format.
            timezone:
              type: string
              description: An ISO timezone name, such as `Europe/Madrid` or `America/New_York`. Specific offsets such as UTC or UTC+1 will also work, but lack built-in DST.
        query:
          type: object
          description: Object containing a query filter which gets applied to an action and determines whether the action should run.
          properties:
            kql:
              type: string
              description: A KQL string.
            filters:
              type: array
              items:
                type: object
                description: A filter object, as defined in the `kbn-es-query` package.

    RuleActionParams:
      type: object
      description: |
        Object containing the allowed connector fields, which varies according to the connector type.

        For Slack:

          - message (string, required): The notification message.

        For email:

          - to, cc, bcc (string): Email addresses to which the notifications are sent. At least one field must have a value.
          - subject (string, optional): Email subject line.

        For Webhook:

          - body (string, required): JSON payload.

        For PagerDuty:

          - severity (string, required): Severity of on the alert notification, can be: Critical, Error, Warning or Info.
          - eventAction (string, required): Event action type, which can be trigger, resolve, or acknowledge.
          - dedupKey (string, optional): Groups alert notifications with the same PagerDuty alert.
          - timestamp (DateTime, optional): ISO-8601 format timestamp.
          - component (string, optional): Source machine component responsible for the event, for example security-solution.
          - group (string, optional): Enables logical grouping of service components.
          - source (string, optional): The affected system. Defaults to the Kibana saved object ID of the action.
          - summary (string, options): Summary of the event. Defaults to No summary provided. Maximum length is 1024 characters.
          - class (string, optional): Value indicating the class/type of the event.

      additionalProperties: true

    RuleActionGroup:
      type: string
      description: Optionally groups actions by use cases. Use `default` for alert notifications.

    RuleActionId:
      type: string
      description: The connector ID.

    RuleAction:
      type: object
      description: Array defining the automated actions (notifications) taken when alerts are generated
      properties:
        action_type_id:
          type: string
          description: |
            The action type used for sending notifications, can be:

              - .slack
              - .slack_api
              - .email
              - .index
              - .pagerduty
              - .swimlane
              - .webhook
              - .servicenow
              - .servicenow-itom
              - .servicenow-sir
              - .jira
              - .resilient
              - .opsgenie
              - .teams
              - .torq
              - .tines
              - .d3security
        group:
          $ref: '#/components/schemas/RuleActionGroup'
        id:
          $ref: '#/components/schemas/RuleActionId'
        params:
          $ref: '#/components/schemas/RuleActionParams'
        uuid:
          $ref: '../../../model/primitives.schema.yaml#/components/schemas/NonEmptyString'
        alerts_filter:
          $ref: '#/components/schemas/RuleActionAlertsFilter'
        frequency:
          $ref: '#/components/schemas/RuleActionFrequency'
      required:
        - action_type_id
        - id
        - params

    ExceptionListType:
      type: string
      description: The exception type
      enum:
        - detection
        - rule_default
        - endpoint
        - endpoint_trusted_apps
        - endpoint_events
        - endpoint_host_isolation_exceptions
        - endpoint_blocklists

    RuleExceptionList:
      type: object
      description: |
        Array of [exception containers](https://www.elastic.co/guide/en/security/current/exceptions-api-overview.html), which define exceptions that prevent the rule from generating alerts even when its other criteria are met.
      properties:
        id:
          $ref: '../../../model/primitives.schema.yaml#/components/schemas/NonEmptyString'
          description: ID of the exception container
        list_id:
          $ref: '../../../model/primitives.schema.yaml#/components/schemas/NonEmptyString'
          description: List ID of the exception container
        type:
          $ref: '#/components/schemas/ExceptionListType'
        namespace_type:
          type: string
          description: Determines the exceptions validity in rule's Kibana space
          enum:
            - agnostic
            - single
      required:
        - id
        - list_id
        - type
        - namespace_type

    AlertSuppressionDurationUnit:
      type: string
      description: Time unit
      enum:
        - s
        - m
        - h

    AlertSuppressionDuration:
      type: object
      properties:
        value:
          type: integer
          minimum: 1
        unit:
          $ref: '#/components/schemas/AlertSuppressionDurationUnit'
      required:
        - value
        - unit

    AlertSuppressionMissingFieldsStrategy:
      type: string
      enum:
        - doNotSuppress
        - suppress
      description: |-
        Describes how alerts will be generated for documents with missing suppress by fields:
        doNotSuppress - per each document a separate alert will be created
        suppress - only alert will be created per suppress by bucket

    AlertSuppressionGroupBy:
      type: array
      items:
        type: string
      minItems: 1
      maxItems: 3

    AlertSuppression:
      type: object
      description: Defines alert suppression configuration.
      properties:
        group_by:
          $ref: '#/components/schemas/AlertSuppressionGroupBy'
        duration:
          $ref: '#/components/schemas/AlertSuppressionDuration'
        missing_fields_strategy:
          $ref: '#/components/schemas/AlertSuppressionMissingFieldsStrategy'
      required:
        - group_by

    AlertSuppressionCamel:
      type: object
      properties:
        groupBy:
          $ref: '#/components/schemas/AlertSuppressionGroupBy'
        duration:
          $ref: '#/components/schemas/AlertSuppressionDuration'
        missingFieldsStrategy:
          $ref: '#/components/schemas/AlertSuppressionMissingFieldsStrategy'
      required:
        - groupBy
