/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Threat Match Rule Attributes
 *   version: not applicable
 */

import { z } from '@kbn/zod';

import { NonEmptyString } from '../../../../model/primitives.gen';

/**
 * Query used to determine which fields in the Elasticsearch index are used for generating alerts.
 */
export type ThreatQuery = z.infer<typeof ThreatQuery>;
export const ThreatQuery = z.string();

/**
  * Array of entries objects that define mappings between the source event fields and the values in the Elasticsearch threat index. Each entries object must contain these fields:

- field: field from the event indices on which the rule runs
- type: must be mapping
- value: field from the Elasticsearch threat index
  
You can use Boolean and and or logic to define the conditions for when matching fields and values generate alerts. Sibling entries objects are evaluated using or logic, whereas multiple entries in a single entries object use and logic. See Example of Threat Match rule which uses both `and` and `or` logic.

  */
export type ThreatMapping = z.infer<typeof ThreatMapping>;
export const ThreatMapping = z
  .array(
    z.object({
      entries: z.array(
        z.object({
          field: NonEmptyString,
          type: z.literal('mapping'),
          value: NonEmptyString,
        })
      ),
    })
  )
  .min(1);

/**
 * Elasticsearch indices used to check which field values generate alerts.
 */
export type ThreatIndex = z.infer<typeof ThreatIndex>;
export const ThreatIndex = z.array(z.string());

export type ThreatFilters = z.infer<typeof ThreatFilters>;
export const ThreatFilters = z.array(z.unknown());

/**
 * Defines the path to the threat indicator in the indicator documents (optional)
 */
export type ThreatIndicatorPath = z.infer<typeof ThreatIndicatorPath>;
export const ThreatIndicatorPath = z.string();

export type ConcurrentSearches = z.infer<typeof ConcurrentSearches>;
export const ConcurrentSearches = z.number().int().min(1);

export type ItemsPerSearch = z.infer<typeof ItemsPerSearch>;
export const ItemsPerSearch = z.number().int().min(1);
