/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Set alerts status API endpoint
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';
import { isNonEmptyString } from '@kbn/zod-helpers';

import { AlertStatusExceptClosed } from '../../../model/alert.gen';

/**
 * The reason for closing the alerts
 */
export type ReasonEnum = z.infer<typeof ReasonEnum>;
export const ReasonEnum = z.enum([
  'false_positive',
  'duplicate',
  'true_positive',
  'benign_positive',
  'automated_closure',
  'other',
]);
export type ReasonEnumEnum = typeof ReasonEnum.enum;
export const ReasonEnumEnum = ReasonEnum.enum;

export type SetAlertsStatusByIdsBase = z.infer<typeof SetAlertsStatusByIdsBase>;
export const SetAlertsStatusByIdsBase = z.object({
  /**
   * List of alert ids. Use field `_id` on alert document or `kibana.alert.uuid`. Note: signals are a deprecated term for alerts.
   */
  signal_ids: z.array(z.string().min(1).superRefine(isNonEmptyString)).min(1),
  status: AlertStatusExceptClosed,
});

export type CloseAlertsByIds = z.infer<typeof CloseAlertsByIds>;
export const CloseAlertsByIds = z.object({
  /**
   * List of alert ids. Use field `_id` on alert document or `kibana.alert.uuid`. Note: signals are a deprecated term for alerts.
   */
  signal_ids: z.array(z.string().min(1).superRefine(isNonEmptyString)).min(1),
  status: z.literal('closed'),
  reason: ReasonEnum.optional(),
});

export type SetAlertsStatusByIds = z.infer<typeof SetAlertsStatusByIds>;
export const SetAlertsStatusByIds = z.discriminatedUnion('status', [
  CloseAlertsByIds,
  SetAlertsStatusByIdsBase,
]);

export type SetAlertsStatusByQueryBase = z.infer<typeof SetAlertsStatusByQueryBase>;
export const SetAlertsStatusByQueryBase = z.object({
  query: z.object({}).catchall(z.unknown()),
  status: AlertStatusExceptClosed,
  conflicts: z.enum(['abort', 'proceed']).optional().default('abort'),
});

export type CloseAlertsByQuery = z.infer<typeof CloseAlertsByQuery>;
export const CloseAlertsByQuery = z.object({
  query: z.object({}).catchall(z.unknown()),
  status: z.literal('closed'),
  conflicts: z.enum(['abort', 'proceed']).optional().default('abort'),
  reason: ReasonEnum.optional(),
});

export type SetAlertsStatusByQuery = z.infer<typeof SetAlertsStatusByQuery>;
export const SetAlertsStatusByQuery = z.discriminatedUnion('status', [
  CloseAlertsByQuery,
  SetAlertsStatusByQueryBase,
]);

export type SetAlertsStatusRequestBody = z.infer<typeof SetAlertsStatusRequestBody>;
export const SetAlertsStatusRequestBody = z.union([SetAlertsStatusByIds, SetAlertsStatusByQuery]);
export type SetAlertsStatusRequestBodyInput = z.input<typeof SetAlertsStatusRequestBody>;

/**
 * Elasticsearch update by query response
 */
export type SetAlertsStatusResponse = z.infer<typeof SetAlertsStatusResponse>;
export const SetAlertsStatusResponse = z.object({}).catchall(z.unknown());
