/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Endpoint Attributes
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';

export type Id = z.infer<typeof Id>;
export const Id = z.string();

export type IdOrUndefined = z.infer<typeof IdOrUndefined>;
export const IdOrUndefined = Id.nullable();

/**
 * Page number
 */
export type Page = z.infer<typeof Page>;
export const Page = z.number().int().min(1).default(1);

/**
 * Number of items per page
 */
export type PageSize = z.infer<typeof PageSize>;
export const PageSize = z.number().int().min(1).max(100).default(10);

/**
 * A start date in ISO 8601 format or Date Math format.
 */
export type StartDate = z.infer<typeof StartDate>;
export const StartDate = z.string();

/**
 * An end date in ISO format or Date Math format.
 */
export type EndDate = z.infer<typeof EndDate>;
export const EndDate = z.string();

/**
 * Agent ID
 */
export type AgentId = z.infer<typeof AgentId>;
export const AgentId = z.string();

/**
 * A KQL string.
 */
export type Kuery = z.infer<typeof Kuery>;
export const Kuery = z.string();

/**
 * A set of agent health statuses to filter by.
 */
export type HostStatuses = z.infer<typeof HostStatuses>;
export const HostStatuses = z.array(
  z.enum(['healthy', 'offline', 'updating', 'inactive', 'unenrolled'])
);

/**
 * Determines the sort order.
 */
export type SortDirection = z.infer<typeof SortDirection>;
export const SortDirection = z.enum(['asc', 'desc']);
export type SortDirectionEnum = typeof SortDirection.enum;
export const SortDirectionEnum = SortDirection.enum;

/**
 * Determines which field is used to sort the results.
 */
export type SortField = z.infer<typeof SortField>;
export const SortField = z.enum([
  'enrolled_at',
  'metadata.host.hostname',
  'host_status',
  'metadata.Endpoint.policy.applied.name',
  'metadata.Endpoint.policy.applied.status',
  'metadata.host.os.name',
  'metadata.host.ip',
  'metadata.agent.version',
  'last_checkin',
]);
export type SortFieldEnum = typeof SortField.enum;
export const SortFieldEnum = SortField.enum;

/**
 * A list of agent IDs. Max of 50.
 */
export type AgentIds = z.infer<typeof AgentIds>;
export const AgentIds = z.union([z.array(z.string().min(1)).min(1).max(50), z.string().min(1)]);

/**
 * The command to be executed (cannot be an empty string)
 */
export type Command = z.infer<typeof Command>;
export const Command = z.enum([
  'isolate',
  'unisolate',
  'kill-process',
  'suspend-process',
  'running-processes',
  'get-file',
  'execute',
  'upload',
  'scan',
]);
export type CommandEnum = typeof Command.enum;
export const CommandEnum = Command.enum;

/**
 * A list of response action command names.
 */
export type Commands = z.infer<typeof Commands>;
export const Commands = z.array(Command);

/**
 * The maximum timeout value in milliseconds (optional)
 */
export type Timeout = z.infer<typeof Timeout>;
export const Timeout = z.number().int().min(1);

export type Status = z.infer<typeof Status>;
export const Status = z.enum(['failed', 'pending', 'successful']);
export type StatusEnum = typeof Status.enum;
export const StatusEnum = Status.enum;

export type Statuses = z.infer<typeof Statuses>;
export const Statuses = z.array(Status);

/**
 * A list of user IDs.
 */
export type UserIds = z.infer<typeof UserIds>;
export const UserIds = z.union([z.array(z.string().min(1)).min(1), z.string().min(1)]);

/**
 * A list of action IDs that should include the complete output of the action.
 */
export type WithOutputs = z.infer<typeof WithOutputs>;
export const WithOutputs = z.union([z.array(z.string().min(1)).min(1), z.string().min(1)]);

/**
 * Type of response action
 */
export type Type = z.infer<typeof Type>;
export const Type = z.enum(['automated', 'manual']);
export type TypeEnum = typeof Type.enum;
export const TypeEnum = Type.enum;

/**
 * List of types of response actions
 */
export type Types = z.infer<typeof Types>;
export const Types = z.array(Type);

/**
 * List of endpoint IDs (cannot contain empty strings)
 */
export type EndpointIds = z.infer<typeof EndpointIds>;
export const EndpointIds = z.array(z.string().min(1)).min(1);

/**
 * Optional comment
 */
export type Comment = z.infer<typeof Comment>;
export const Comment = z.string();

/**
 * Optional parameters object
 */
export type Parameters = z.infer<typeof Parameters>;
export const Parameters = z.object({});

/**
 * List of agent types to retrieve. Defaults to `endpoint`.
 */
export type AgentTypes = z.infer<typeof AgentTypes>;
export const AgentTypes = z.enum([
  'endpoint',
  'sentinel_one',
  'crowdstrike',
  'microsoft_defender_endpoint',
]);
export type AgentTypesEnum = typeof AgentTypes.enum;
export const AgentTypesEnum = AgentTypes.enum;

export type BaseActionSchema = z.infer<typeof BaseActionSchema>;
export const BaseActionSchema = z.object({
  endpoint_ids: EndpointIds,
  /**
   * If this action is associated with any alerts, they can be specified here. The action will be logged in any cases associated with the specified alerts.
   */
  alert_ids: z.array(z.string().min(1)).min(1).optional(),
  /**
   * The IDs of cases where the action taken will be logged.
   */
  case_ids: z.array(z.string().min(1)).min(1).optional(),
  comment: Comment.optional(),
  parameters: Parameters.optional(),
  agent_type: AgentTypes.optional(),
});

export type NoParametersRequestSchema = z.infer<typeof NoParametersRequestSchema>;
export const NoParametersRequestSchema = z.object({
  body: BaseActionSchema,
});

export type ProtectionUpdatesNoteResponse = z.infer<typeof ProtectionUpdatesNoteResponse>;
export const ProtectionUpdatesNoteResponse = z.object({
  note: z.string().optional(),
});

export type ResponseActionCreateSuccessResponse = z.infer<
  typeof ResponseActionCreateSuccessResponse
>;
export const ResponseActionCreateSuccessResponse = z.object({
  /**
   * The created response action details
   */
  data: z
    .object({
      /**
       * The response action ID
       */
      id: z.string().optional(),
      /**
       * The response action command
       */
      command: z.string().optional(),
      /**
       * The response action agent type
       */
      agentType: z.string().optional(),
      /**
       * Whether the response action is expired
       */
      isExpired: z.boolean().optional(),
      /**
       * Whether the response action is complete
       */
      isComplete: z.boolean().optional(),
      /**
       * Whether the response action was successful
       */
      wasSuccessful: z.boolean().optional(),
      /**
       * The response action status
       */
      status: z.string().optional(),
      /**
       * The response action start time
       */
      startedAt: z.string().optional(),
      /**
       * The user who created the response action
       */
      createdBy: z.string().optional(),
      /**
       * The agent IDs for the hosts that the response action was sent to
       */
      agents: z.object({}).optional(),
      /**
       * The parameters of the response action. Content different depending on the response action command
       */
      parameters: z.object({}).optional(),
      /**
       * An object containing the host names associated with the agent IDs the response action was sent to
       */
      hosts: z
        .object({})
        .catchall(
          z.object({
            /**
             * The host name
             */
            name: z.string().optional(),
          })
        )
        .optional(),
      /**
       * The state of the response action for each agent ID that it was sent to
       */
      agentState: z
        .object({})
        .catchall(
          z.object({
            /**
             * Whether the response action is completed for the agent ID
             */
            isCompleted: z.boolean().optional(),
            /**
             * Whether the response action was successful for the agent ID
             */
            wasSuccessful: z.boolean().optional(),
            /**
             * The date and time the response action was completed for the agent ID
             */
            completedAt: z.string().optional(),
          })
        )
        .optional(),
      /**
       * The outputs of the response action for each agent ID that it was sent to
       */
      outputs: z
        .object({})
        .catchall(
          z.object({
            type: z.enum(['json', 'text']),
            /**
             * The response action output content for the agent ID. Exact format depends on the response action command.
             */
            content: z.union([z.object({}), z.string()]),
          })
        )
        .optional(),
    })
    .optional(),
});

export type SuccessResponse = z.infer<typeof SuccessResponse>;
export const SuccessResponse = z.object({});
