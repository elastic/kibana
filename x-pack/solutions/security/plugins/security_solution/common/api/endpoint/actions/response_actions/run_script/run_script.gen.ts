/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: RunScript Action Schema
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';

import { SuccessResponse } from '../../../model/schema/common.gen';

export type CrowdStrikeRunScriptRawParameters = z.infer<typeof CrowdStrikeRunScriptRawParameters>;
export const CrowdStrikeRunScriptRawParameters = z.object({
  /**
   * Raw script content to execute
   */
  raw: z.string().min(1),
  /**
   * Command line arguments
   */
  commandLine: z.string().min(1).optional(),
  /**
   * Timeout in milliseconds before the command is killed
   */
  timeout: z.number().int().min(1).optional(),
});

export type CrowdStrikeRunScriptHostPathParameters = z.infer<
  typeof CrowdStrikeRunScriptHostPathParameters
>;
export const CrowdStrikeRunScriptHostPathParameters = z.object({
  /**
   * Absolute or relative path of script on host machine
   */
  hostPath: z.string().min(1),
  /**
   * Command line arguments
   */
  commandLine: z.string().min(1).optional(),
  /**
   * Timeout in milliseconds before the command is killed
   */
  timeout: z.number().int().min(1).optional(),
});

export type CrowdStrikeRunScriptCloudFileParameters = z.infer<
  typeof CrowdStrikeRunScriptCloudFileParameters
>;
export const CrowdStrikeRunScriptCloudFileParameters = z.object({
  /**
   * Script name in cloud storage
   */
  cloudFile: z.string().min(1),
  /**
   * Command line arguments
   */
  commandLine: z.string().min(1).optional(),
  /**
   * Timeout in milliseconds before the command is killed
   */
  timeout: z.number().int().min(1).optional(),
});

export const CrowdStrikeRunScriptParametersInternal = z.union([
  CrowdStrikeRunScriptRawParameters,
  CrowdStrikeRunScriptHostPathParameters,
  CrowdStrikeRunScriptCloudFileParameters,
]);

export type CrowdStrikeRunScriptParameters = z.infer<typeof CrowdStrikeRunScriptParametersInternal>;
export const CrowdStrikeRunScriptParameters =
  CrowdStrikeRunScriptParametersInternal as z.ZodType<CrowdStrikeRunScriptParameters>;

export type MSDefenderRunScriptParameters = z.infer<typeof MSDefenderRunScriptParameters>;
export const MSDefenderRunScriptParameters = z.object({
  /**
   * The path to the script in the cloud to run
   */
  scriptName: z.string().min(1),
  /**
   * Optional arguments for the script
   */
  args: z.string().min(1).optional(),
});

export type SentinelOneRunScriptParameters = z.infer<typeof SentinelOneRunScriptParameters>;
export const SentinelOneRunScriptParameters = z.object({
  /**
   * The SentinelOne Script ID to be executed
   */
  scriptId: z.string().min(1),
  /**
   * Any input arguments for the selected script
   */
  scriptInput: z.string().min(1).optional(),
});

export type RunScriptRouteRequestBody = z.infer<typeof RunScriptRouteRequestBody>;
export const RunScriptRouteRequestBody = z.object({
  /**
   * A list of endpoint IDs whose hosts will run the script (Fleet Agent IDs will be retrieved for these)
   */
  endpoint_ids: z.array(z.string().min(1)).min(1),
  /**
   * If defined, any case associated with the given IDs will be updated
   */
  alert_ids: z.array(z.string().min(1)).min(1).optional(),
  /**
   * Optional comment for the action
   */
  comment: z.string().optional(),
  /**
   * Type of agent to execute the script on
   */
  agent_type: z
    .enum(['endpoint', 'sentinel_one', 'crowdstrike', 'microsoft_defender_endpoint'])
    .optional()
    .default('endpoint'),
  parameters: z.union([
    CrowdStrikeRunScriptParameters,
    MSDefenderRunScriptParameters,
    SentinelOneRunScriptParameters,
  ]),
});

export type RunScriptActionRequestBody = z.infer<typeof RunScriptActionRequestBody>;
export const RunScriptActionRequestBody = RunScriptRouteRequestBody;
export type RunScriptActionRequestBodyInput = z.input<typeof RunScriptActionRequestBody>;

export type RunScriptActionResponse = z.infer<typeof RunScriptActionResponse>;
export const RunScriptActionResponse = SuccessResponse;
