/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: RunScript Action Schema
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';

import {
  ResponseActionCreateSuccessResponse,
  BaseActionSchema,
} from '../../../model/schema/common.gen';

export type RawScriptParameters = z.infer<typeof RawScriptParameters>;
export const RawScriptParameters = z.object({
  /**
   * Raw script content.
   */
  raw: z.string().min(1),
  /**
   * Command line arguments.
   */
  commandLine: z.string().min(1).optional(),
  /**
   * Timeout in seconds.
   */
  timeout: z.number().int().min(1).optional(),
});

export type HostPathScriptParameters = z.infer<typeof HostPathScriptParameters>;
export const HostPathScriptParameters = z.object({
  /**
   * Absolute or relative path of script on host machine.
   */
  hostPath: z.string().min(1),
  /**
   * Command line arguments.
   */
  commandLine: z.string().min(1).optional(),
  /**
   * Timeout in seconds.
   */
  timeout: z.number().int().min(1).optional(),
});

export type CloudFileScriptParameters = z.infer<typeof CloudFileScriptParameters>;
export const CloudFileScriptParameters = z.object({
  /**
   * Script name in cloud storage.
   */
  cloudFile: z.string().min(1),
  /**
   * Command line arguments.
   */
  commandLine: z.string().min(1).optional(),
  /**
   * Timeout in seconds.
   */
  timeout: z.number().int().min(1).optional(),
});

/**
 * Parameters for Run Script response action against SentinelOne agent type.
 */
export type SentinelOneRunScriptParameters = z.infer<typeof SentinelOneRunScriptParameters>;
export const SentinelOneRunScriptParameters = z.object({
  /**
   * The script ID from SentinelOne scripts library that will be executed.
   */
  script: z.string().min(1),
  /**
   * The input parameter arguments for the script that was selected.
   */
  inputParams: z.string().min(1).optional(),
});

/**
 * Parameters for Run Script response action against Microsoft Defender Endpoint agent type.
 */
export type MDERunScriptParameters = z.infer<typeof MDERunScriptParameters>;
export const MDERunScriptParameters = z.object({
  /**
   * The name of the script to execute from the cloud storage.
   */
  scriptName: z.string().min(1),
  /**
   * Optional command line arguments for the script.
   */
  args: z.string().min(1).optional(),
});

export type RunScriptRouteRequestBody = z.infer<typeof RunScriptRouteRequestBody>;
export const RunScriptRouteRequestBody = BaseActionSchema.merge(
  z.object({
    /** 
      * One of the following set of parameters must be provided
 
      */
    parameters: z.union([
      RawScriptParameters,
      HostPathScriptParameters,
      CloudFileScriptParameters,
      SentinelOneRunScriptParameters,
      MDERunScriptParameters,
    ]),
  })
);

export type RunScriptActionRequestBody = z.infer<typeof RunScriptActionRequestBody>;
export const RunScriptActionRequestBody = RunScriptRouteRequestBody;
export type RunScriptActionRequestBodyInput = z.input<typeof RunScriptActionRequestBody>;

export type RunScriptActionResponse = z.infer<typeof RunScriptActionResponse>;
export const RunScriptActionResponse = ResponseActionCreateSuccessResponse;
