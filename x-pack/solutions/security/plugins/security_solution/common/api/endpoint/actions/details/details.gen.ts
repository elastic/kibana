/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Details Schema
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';

import { ResponseActionDetails } from '../../model/schema/common.gen';

export type KillProcess = z.infer<typeof KillProcess>;
export const KillProcess = ResponseActionDetails.merge(
  z.object({
    parameters: z
      .union([
        z.object({
          /**
           * The process ID (PID) of the process to terminate.
           */
          pid: z.number().min(1).optional(),
        }),
        z.object({
          /**
           * The entity ID of the process to terminate.
           */
          entity_id: z.string().min(1).optional(),
        }),
        z.object({
          /**
           * The name of the process to terminate. Valid for SentinelOne agent type only.
           */
          process_name: z.string().optional(),
        }),
      ])
      .optional(),
    outputs: z
      .object({})
      .catchall(
        z.object({
          content: z.object({
            code: z.string().optional(),
            command: z.string().optional(),
          }),
        })
      )
      .optional(),
  })
);

export type DownloadUri = z.infer<typeof DownloadUri>;
export const DownloadUri = z.object({
  /**
      * The server relative URI to download the file associated with the output of the response action.
URI does **not** include the space prefix

      */
  downloadUri: z.string().optional(),
});

export type GetFile = z.infer<typeof GetFile>;
export const GetFile = ResponseActionDetails.merge(
  z.object({
    parameters: z
      .object({
        path: z.string().optional(),
      })
      .optional(),
    outputs: z
      .object({})
      .catchall(
        z.object({
          content: DownloadUri.merge(
            z.object({
              code: z.string().optional(),
              zip_size: z.number().optional(),
              contents: z
                .array(
                  z.object({
                    path: z.string().optional(),
                    sha256: z.string().optional(),
                    size: z.number().optional(),
                    file_name: z.string().optional(),
                    type: z.string().optional(),
                  })
                )
                .optional(),
            })
          ),
        })
      )
      .optional(),
  })
);

export type Execute = z.infer<typeof Execute>;
export const Execute = ResponseActionDetails.merge(
  z.object({
    parameters: z
      .object({
        command: z.string().optional(),
        timeout: z.number().optional(),
      })
      .optional(),
    outputs: z
      .object({})
      .catchall(
        z.object({
          content: DownloadUri.merge(
            z.object({
              code: z.string().optional(),
              stdout: z.string().optional(),
              stderr: z.string().optional(),
              stdout_truncated: z.boolean().optional(),
              stderr_truncated: z.boolean().optional(),
              shell_code: z.number().optional(),
              cwd: z.string().optional(),
              output_file_id: z.string().optional(),
              output_file_stdout_truncated: z.boolean().optional(),
              output_file_stderr_truncated: z.boolean().optional(),
            })
          ),
        })
      )
      .optional(),
  })
);

export type RunscriptParamsCrowdStrike = z.infer<typeof RunscriptParamsCrowdStrike>;
export const RunscriptParamsCrowdStrike = z.object({
  raw: z.string().optional(),
  hostPath: z.string().optional(),
  cloudFile: z.string().optional(),
  commandLine: z.string().optional(),
  timeout: z.number().optional(),
});

export type RunscriptParamsMicrosoft = z.infer<typeof RunscriptParamsMicrosoft>;
export const RunscriptParamsMicrosoft = z.object({
  scriptName: z.string().optional(),
  args: z.string().optional(),
});

export type RunscriptParamsSentinelOne = z.infer<typeof RunscriptParamsSentinelOne>;
export const RunscriptParamsSentinelOne = z.object({
  scriptId: z.string().optional(),
  scriptInput: z.string().optional(),
});

export type Runscript = z.infer<typeof Runscript>;
export const Runscript = ResponseActionDetails.merge(
  z.object({
    outputs: z
      .object({})
      .catchall(
        z.object({
          content: DownloadUri.merge(
            z.object({
              code: z.string().optional(),
              stdout: z.string().optional(),
              stderr: z.string().optional(),
            })
          ),
        })
      )
      .optional(),
  })
);

export type Upload = z.infer<typeof Upload>;
export const Upload = ResponseActionDetails.merge(
  z.object({
    /**
      * The parameters for upload returned on the details are derived via the API from the file that
was uploaded at the time that the response action was submitted

      */
    parameters: z
      .object({
        file_sha256: z.string().optional(),
        file_size: z.number().optional(),
        file_name: z.string().optional(),
        file_id: z.string().optional(),
      })
      .optional(),
    outputs: z
      .object({})
      .catchall(
        z.object({
          content: z
            .object({
              code: z.string().optional(),
              path: z.string().optional(),
              disk_free_space: z.number().optional(),
            })
            .optional(),
        })
      )
      .optional(),
  })
);

export type Scan = z.infer<typeof Scan>;
export const Scan = ResponseActionDetails.merge(
  z.object({
    parameters: z
      .object({
        path: z.string().optional(),
      })
      .optional(),
    outputs: z
      .object({})
      .catchall(
        z.object({
          content: z
            .object({
              code: z.string().optional(),
            })
            .optional(),
        })
      )
      .optional(),
  })
);

export type Cancel = z.infer<typeof Cancel>;
export const Cancel = ResponseActionDetails.merge(
  z.object({
    parameters: z
      .object({
        id: z.string().uuid().optional(),
      })
      .optional(),
    outputs: z
      .object({})
      .catchall(
        z.object({
          content: z
            .object({
              code: z.string().optional(),
            })
            .optional(),
        })
      )
      .optional(),
  })
);

export type Isolate = z.infer<typeof Isolate>;
export const Isolate = ResponseActionDetails;

export type Unisolate = z.infer<typeof Unisolate>;
export const Unisolate = ResponseActionDetails;

export type SuspendProcess = z.infer<typeof SuspendProcess>;
export const SuspendProcess = ResponseActionDetails.merge(
  z.object({
    parameters: z
      .union([
        z.object({
          /**
           * The process ID (PID) of the process to terminate.
           */
          pid: z.number().min(1).optional(),
        }),
        z.object({
          /**
           * The entity ID of the process to terminate.
           */
          entity_id: z.string().min(1).optional(),
        }),
      ])
      .optional(),
    outputs: z
      .object({})
      .catchall(
        z.object({
          content: z.object({
            code: z.string().optional(),
            command: z.string().optional(),
          }),
        })
      )
      .optional(),
  })
);

/**
 * Processes output for `agentType` of `endpoint`
 */
export type RunningProcessesOutputEndpoint = z.infer<typeof RunningProcessesOutputEndpoint>;
export const RunningProcessesOutputEndpoint = z.object({
  entries: z
    .array(
      z.object({
        command: z.string().optional(),
        pid: z.number().optional(),
        entity_id: z.string().optional(),
        user: z.string().optional(),
      })
    )
    .optional(),
});

export type RunningProcessesOutputSentinelOne = z.infer<typeof RunningProcessesOutputSentinelOne>;
export const RunningProcessesOutputSentinelOne = DownloadUri.merge(z.object({}));

export type RunningProcesses = z.infer<typeof RunningProcesses>;
export const RunningProcesses = ResponseActionDetails.merge(
  z.object({
    outputs: z
      .object({})
      .catchall(
        z.object({
          content: z.object({
            code: z.string().optional(),
          }),
        })
      )
      .optional(),
  })
);

export const ActionDetailsResponseInternal = z.discriminatedUnion('command', [
  KillProcess,
  GetFile,
  Execute,
  Runscript,
  Upload,
  Scan,
  Cancel,
  Isolate,
  Unisolate,
  SuspendProcess,
  RunningProcesses,
]);

export type ActionDetailsResponse = z.infer<typeof ActionDetailsResponseInternal>;
export const ActionDetailsResponse =
  ActionDetailsResponseInternal as z.ZodType<ActionDetailsResponse>;

export type EndpointGetActionsDetailsRequestParams = z.infer<
  typeof EndpointGetActionsDetailsRequestParams
>;
export const EndpointGetActionsDetailsRequestParams = z.object({
  action_id: z.string(),
});
export type EndpointGetActionsDetailsRequestParamsInput = z.input<
  typeof EndpointGetActionsDetailsRequestParams
>;

export type EndpointGetActionsDetailsResponse = z.infer<typeof EndpointGetActionsDetailsResponse>;
export const EndpointGetActionsDetailsResponse = ActionDetailsResponse;
