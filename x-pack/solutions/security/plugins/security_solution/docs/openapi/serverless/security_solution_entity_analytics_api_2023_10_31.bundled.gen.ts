/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Security Entity Analytics API (Elastic Cloud Serverless)
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';

export type AssetCriticalityBulkUploadErrorItem = z.infer<
  typeof AssetCriticalityBulkUploadErrorItem
>;
export const AssetCriticalityBulkUploadErrorItem = z.object({
  index: z.number().int(),
  message: z.string(),
});

export type AssetCriticalityBulkUploadStats = z.infer<typeof AssetCriticalityBulkUploadStats>;
export const AssetCriticalityBulkUploadStats = z.object({
  failed: z.number().int(),
  successful: z.number().int(),
  total: z.number().int(),
});

/**
 * The criticality level of the asset.
 */
export type AssetCriticalityLevel = z.infer<typeof AssetCriticalityLevel>;
export const AssetCriticalityLevel = z.enum([
  'low_impact',
  'medium_impact',
  'high_impact',
  'extreme_impact',
]);
export type AssetCriticalityLevelEnum = typeof AssetCriticalityLevel.enum;
export const AssetCriticalityLevelEnum = AssetCriticalityLevel.enum;

/**
 * The criticality level of the asset for bulk upload. The value `unassigned` is used to indicate that the criticality level is not assigned and is only used for bulk upload.
 */
export type AssetCriticalityLevelsForBulkUpload = z.infer<
  typeof AssetCriticalityLevelsForBulkUpload
>;
export const AssetCriticalityLevelsForBulkUpload = z.enum([
  'low_impact',
  'medium_impact',
  'high_impact',
  'extreme_impact',
  'unassigned',
]);
export type AssetCriticalityLevelsForBulkUploadEnum =
  typeof AssetCriticalityLevelsForBulkUpload.enum;
export const AssetCriticalityLevelsForBulkUploadEnum = AssetCriticalityLevelsForBulkUpload.enum;

export type IdField = z.infer<typeof IdField>;
export const IdField = z.enum(['host.name', 'user.name', 'service.name', 'entity.id']);
export type IdFieldEnum = typeof IdField.enum;
export const IdFieldEnum = IdField.enum;

export type AssetCriticalityRecordIdParts = z.infer<typeof AssetCriticalityRecordIdParts>;
export const AssetCriticalityRecordIdParts = z.object({
  /**
   * The field representing the ID.
   */
  id_field: IdField,
  /**
   * The ID value of the asset.
   */
  id_value: z.string(),
});

export type CreateAssetCriticalityRecord = z.infer<typeof CreateAssetCriticalityRecord>;
export const CreateAssetCriticalityRecord = AssetCriticalityRecordIdParts.merge(
  z.object({
    criticality_level: AssetCriticalityLevel,
  })
);

export type AssetCriticalityRecordEcsParts = z.infer<typeof AssetCriticalityRecordEcsParts>;
export const AssetCriticalityRecordEcsParts = z.object({
  asset: z.object({
    criticality: AssetCriticalityLevel.optional(),
  }),
  host: z
    .object({
      asset: z
        .object({
          criticality: AssetCriticalityLevel,
        })
        .optional(),
      name: z.string(),
    })
    .optional(),
  service: z
    .object({
      asset: z
        .object({
          criticality: AssetCriticalityLevel,
        })
        .optional(),
      name: z.string(),
    })
    .optional(),
  user: z
    .object({
      asset: z
        .object({
          criticality: AssetCriticalityLevel,
        })
        .optional(),
      name: z.string(),
    })
    .optional(),
});

export type AssetCriticalityRecord = z.infer<typeof AssetCriticalityRecord>;
export const AssetCriticalityRecord = CreateAssetCriticalityRecord.merge(
  AssetCriticalityRecordEcsParts
).merge(
  z.object({
    /**
     * The time the record was created or updated.
     */
    '@timestamp': z.string().datetime(),
  })
);

export type CleanUpRiskEngineErrorResponse = z.infer<typeof CleanUpRiskEngineErrorResponse>;
export const CleanUpRiskEngineErrorResponse = z.object({
  cleanup_successful: z.boolean(),
  errors: z.array(
    z.object({
      error: z.string(),
      seq: z.number().int(),
    })
  ),
});

export type ConfigureRiskEngineSavedObjectErrorResponse = z.infer<
  typeof ConfigureRiskEngineSavedObjectErrorResponse
>;
export const ConfigureRiskEngineSavedObjectErrorResponse = z.object({
  errors: z.array(
    z.object({
      error: z.string(),
      seq: z.number().int(),
    })
  ),
  risk_engine_saved_object_configured: z.boolean(),
});

export type EngineComponentResource = z.infer<typeof EngineComponentResource>;
export const EngineComponentResource = z.enum([
  'entity_engine',
  'entity_definition',
  'index',
  'component_template',
  'index_template',
  'ingest_pipeline',
  'enrich_policy',
  'task',
  'transform',
]);
export type EngineComponentResourceEnum = typeof EngineComponentResource.enum;
export const EngineComponentResourceEnum = EngineComponentResource.enum;

export type TransformStatsMetadata = z.infer<typeof TransformStatsMetadata>;
export const TransformStatsMetadata = z.object({
  delete_time_in_ms: z.number().int().optional(),
  documents_deleted: z.number().int().optional(),
  documents_indexed: z.number().int(),
  documents_processed: z.number().int(),
  exponential_avg_checkpoint_duration_ms: z.number().int(),
  exponential_avg_documents_indexed: z.number().int(),
  exponential_avg_documents_processed: z.number().int(),
  index_failures: z.number().int(),
  index_time_in_ms: z.number().int(),
  index_total: z.number().int(),
  pages_processed: z.number().int(),
  processing_time_in_ms: z.number().int(),
  processing_total: z.number().int(),
  search_failures: z.number().int(),
  search_time_in_ms: z.number().int(),
  search_total: z.number().int(),
  trigger_count: z.number().int(),
});

export type Metadata = z.infer<typeof Metadata>;
export const Metadata = TransformStatsMetadata;

export type EngineComponentStatus = z.infer<typeof EngineComponentStatus>;
export const EngineComponentStatus = z.object({
  errors: z
    .array(
      z.object({
        message: z.string().optional(),
        title: z.string().optional(),
      })
    )
    .optional(),
  health: z.enum(['green', 'yellow', 'red', 'unknown']).optional(),
  id: z.string(),
  installed: z.boolean(),
  metadata: Metadata.optional(),
  resource: EngineComponentResource,
});

export type EngineDataviewUpdateResult = z.infer<typeof EngineDataviewUpdateResult>;
export const EngineDataviewUpdateResult = z.object({
  changes: z
    .object({
      indexPatterns: z.array(z.string()).optional(),
    })
    .optional(),
  type: z.string(),
});

export type IndexPattern = z.infer<typeof IndexPattern>;
export const IndexPattern = z.string();

export type EngineStatus = z.infer<typeof EngineStatus>;
export const EngineStatus = z.enum(['installing', 'started', 'stopped', 'updating', 'error']);
export type EngineStatusEnum = typeof EngineStatus.enum;
export const EngineStatusEnum = EngineStatus.enum;

export type EntityType = z.infer<typeof EntityType>;
export const EntityType = z.enum(['user', 'host', 'service', 'generic']);
export type EntityTypeEnum = typeof EntityType.enum;
export const EntityTypeEnum = EntityType.enum;

export type EngineDescriptor = z.infer<typeof EngineDescriptor>;
export const EngineDescriptor = z.object({
  delay: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('1m'),
  docsPerSecond: z.number().int().optional(),
  error: z.object({}).optional(),
  fieldHistoryLength: z.number().int(),
  filter: z.string().optional(),
  frequency: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('1m'),
  indexPattern: IndexPattern,
  lookbackPeriod: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('24h'),
  status: EngineStatus,
  timeout: z
    .string()
    .regex(/[smdh]$/)
    .optional()
    .default('180s'),
  timestampField: z.string().optional(),
  type: EntityType,
});

export type EntityRiskLevels = z.infer<typeof EntityRiskLevels>;
export const EntityRiskLevels = z.enum(['Unknown', 'Low', 'Moderate', 'High', 'Critical']);
export type EntityRiskLevelsEnum = typeof EntityRiskLevels.enum;
export const EntityRiskLevelsEnum = EntityRiskLevels.enum;

/**
 * A generic representation of a document contributing to a Risk Score.
 */
export type RiskScoreInput = z.infer<typeof RiskScoreInput>;
export const RiskScoreInput = z.object({
  /**
   * The risk category of the risk input document.
   */
  category: z.string(),
  contribution_score: z.number().optional(),
  /**
   * A human-readable description of the risk input document.
   */
  description: z.string(),
  /**
   * The unique identifier (`_id`) of the original source document
   */
  id: z.string(),
  /**
   * The unique index (`_index`) of the original source document
   */
  index: z.string(),
  /**
   * The weighted risk score of the risk input document.
   */
  risk_score: z.number().min(0).max(100).optional(),
  /**
   * The @timestamp of the risk input document.
   */
  timestamp: z.string().optional(),
});

export type EntityRiskScoreRecord = z.infer<typeof EntityRiskScoreRecord>;
export const EntityRiskScoreRecord = z.object({
  /**
   * The time at which the risk score was calculated.
   */
  '@timestamp': z.string().datetime(),
  /**
   * Lexical description of the entity's risk.
   */
  calculated_level: EntityRiskLevels,
  /**
   * The raw numeric value of the given entity's risk score.
   */
  calculated_score: z.number(),
  /**
   * The normalized numeric value of the given entity's risk score. Useful for comparing with other entities.
   */
  calculated_score_norm: z.number().min(0).max(100),
  /**
   * The number of risk input documents that contributed to the Category 1 score (`category_1_score`).
   */
  category_1_count: z.number(),
  /**
   * The contribution of Category 1 to the overall risk score (`calculated_score`). Category 1 contains Detection Engine Alerts.
   */
  category_1_score: z.number(),
  category_2_count: z.number().optional(),
  category_2_score: z.number().optional(),
  criticality_level: AssetCriticalityLevel.optional(),
  criticality_modifier: z.number().optional(),
  /**
   * The identifier field defining this risk score. Coupled with `id_value`, uniquely identifies the entity being scored.
   */
  id_field: z.string(),
  /**
   * The identifier value defining this risk score. Coupled with `id_field`, uniquely identifies the entity being scored.
   */
  id_value: z.string(),
  /**
   * A list of the highest-risk documents contributing to this risk score. Useful for investigative purposes.
   */
  inputs: z.array(RiskScoreInput),
  notes: z.array(z.string()),
});

export type UserEntity = z.infer<typeof UserEntity>;
export const UserEntity = z.object({
  '@timestamp': z.string().datetime().optional(),
  asset: z
    .object({
      criticality: AssetCriticalityLevel,
    })
    .optional(),
  entity: z.object({
    name: z.string(),
    source: z.string(),
  }),
  event: z
    .object({
      ingested: z.string().datetime().optional(),
    })
    .optional(),
  user: z.object({
    domain: z.array(z.string()).optional(),
    email: z.array(z.string()).optional(),
    full_name: z.array(z.string()).optional(),
    hash: z.array(z.string()).optional(),
    id: z.array(z.string()).optional(),
    name: z.string(),
    risk: EntityRiskScoreRecord.optional(),
    roles: z.array(z.string()).optional(),
  }),
});

export type HostEntity = z.infer<typeof HostEntity>;
export const HostEntity = z.object({
  '@timestamp': z.string().datetime().optional(),
  asset: z
    .object({
      criticality: AssetCriticalityLevel,
    })
    .optional(),
  entity: z.object({
    name: z.string(),
    source: z.string(),
  }),
  event: z
    .object({
      ingested: z.string().datetime().optional(),
    })
    .optional(),
  host: z.object({
    architecture: z.array(z.string()).optional(),
    domain: z.array(z.string()).optional(),
    hostname: z.array(z.string()).optional(),
    id: z.array(z.string()).optional(),
    ip: z.array(z.string()).optional(),
    mac: z.array(z.string()).optional(),
    name: z.string(),
    risk: EntityRiskScoreRecord.optional(),
    type: z.array(z.string()).optional(),
  }),
});

export type ServiceEntity = z.infer<typeof ServiceEntity>;
export const ServiceEntity = z.object({
  '@timestamp': z.string().datetime().optional(),
  asset: z
    .object({
      criticality: AssetCriticalityLevel,
    })
    .optional(),
  entity: z.object({
    name: z.string(),
    source: z.string(),
  }),
  event: z
    .object({
      ingested: z.string().datetime().optional(),
    })
    .optional(),
  service: z.object({
    name: z.string(),
    risk: EntityRiskScoreRecord.optional(),
  }),
});

export const EntityInternal = z.union([UserEntity, HostEntity, ServiceEntity]);

export type Entity = z.infer<typeof EntityInternal>;
export const Entity = EntityInternal as z.ZodType<Entity>;

export type InspectQuery = z.infer<typeof InspectQuery>;
export const InspectQuery = z.object({
  dsl: z.array(z.string()),
  response: z.array(z.string()),
});

/**
 * Interval in which enrich policy runs. For example, `"1h"` means the rule runs every hour.
 */
export type Interval = z.infer<typeof Interval>;
export const Interval = z.string().regex(/^[1-9]\d*[smh]$/);

export type RiskEngineScheduleNowErrorResponse = z.infer<typeof RiskEngineScheduleNowErrorResponse>;
export const RiskEngineScheduleNowErrorResponse = z.object({
  full_error: z.string(),
  message: z.string(),
});

export type RiskEngineScheduleNowResponse = z.infer<typeof RiskEngineScheduleNowResponse>;
export const RiskEngineScheduleNowResponse = z.object({
  success: z.boolean().optional(),
});

export type StoreStatus = z.infer<typeof StoreStatus>;
export const StoreStatus = z.enum(['not_installed', 'installing', 'running', 'stopped', 'error']);
export type StoreStatusEnum = typeof StoreStatus.enum;
export const StoreStatusEnum = StoreStatus.enum;

/**
 * Task manager is unavailable
 */
export type TaskManagerUnavailableResponse = z.infer<typeof TaskManagerUnavailableResponse>;
export const TaskManagerUnavailableResponse = z.object({
  message: z.string(),
  status_code: z.number().int().min(400),
});
