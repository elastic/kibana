/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Security Endpoint Management API (Elastic Cloud Serverless)
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';
import { isNonEmptyString } from '@kbn/zod-helpers';

export type ActionStateSuccessResponse = z.infer<typeof ActionStateSuccessResponse>;
export const ActionStateSuccessResponse = z.object({
  body: z.object({
    data: z.object({
      canEncrypt: z.boolean().optional(),
    }),
  }),
});

/**
 * Agent ID
 */
export type AgentId = z.infer<typeof AgentId>;
export const AgentId = z.string();

export type PendingActionDataType = z.infer<typeof PendingActionDataType>;
export const PendingActionDataType = z.number().int();

export type PendingActionsSchema = z.infer<typeof PendingActionsSchema>;
export const PendingActionsSchema = z.union([
  z.object({
    execute: PendingActionDataType.optional(),
    'get-file': PendingActionDataType.optional(),
    isolate: PendingActionDataType.optional(),
    'kill-process': PendingActionDataType.optional(),
    'running-processes': PendingActionDataType.optional(),
    scan: PendingActionDataType.optional(),
    'suspend-process': PendingActionDataType.optional(),
    unisolate: PendingActionDataType.optional(),
    upload: PendingActionDataType.optional(),
  }),
  z.object({}).catchall(z.unknown()),
]);

export type ActionStatusSuccessResponse = z.infer<typeof ActionStatusSuccessResponse>;
export const ActionStatusSuccessResponse = z.object({
  body: z.object({
    data: z.object({
      agent_id: AgentId,
      pending_actions: PendingActionsSchema,
    }),
  }),
});

/**
 * A list of agent IDs. Max of 50.
 */
export type AgentIds = z.infer<typeof AgentIds>;
export const AgentIds = z.union([z.array(z.string().min(1)).min(1).max(50), z.string().min(1)]);

/**
 * List of agent types to retrieve. Defaults to `endpoint`.
 */
export type AgentTypes = z.infer<typeof AgentTypes>;
export const AgentTypes = z.enum([
  'endpoint',
  'sentinel_one',
  'crowdstrike',
  'microsoft_defender_endpoint',
]);
export type AgentTypesEnum = typeof AgentTypes.enum;
export const AgentTypesEnum = AgentTypes.enum;

/**
 * A list of alerts `id`s.
 */
export type AlertIds = z.infer<typeof AlertIds>;
export const AlertIds = z.array(z.string().min(1).superRefine(isNonEmptyString)).min(1);

/**
 * Case IDs to be updated (cannot contain empty strings)
 */
export type CaseIds = z.infer<typeof CaseIds>;
export const CaseIds = z.array(z.string().min(1)).min(1);

export type CloudFileScriptParameters = z.infer<typeof CloudFileScriptParameters>;
export const CloudFileScriptParameters = z.object({
  /**
   * Script name in cloud storage.
   */
  cloudFile: z.string().min(1),
  /**
   * Command line arguments.
   */
  commandLine: z.string().min(1).optional(),
  /**
   * Timeout in seconds.
   */
  timeout: z.number().int().min(1).optional(),
});

/**
 * The command to be executed (cannot be an empty string)
 */
export type Command = z.infer<typeof Command>;
export const Command = z.enum([
  'isolate',
  'unisolate',
  'kill-process',
  'suspend-process',
  'running-processes',
  'get-file',
  'execute',
  'upload',
  'scan',
]);
export type CommandEnum = typeof Command.enum;
export const CommandEnum = Command.enum;

/**
 * A list of response action command names.
 */
export type Commands = z.infer<typeof Commands>;
export const Commands = z.array(Command);

/**
 * Optional comment
 */
export type Comment = z.infer<typeof Comment>;
export const Comment = z.string();

/**
 * An end date in ISO format or Date Math format.
 */
export type EndDate = z.infer<typeof EndDate>;
export const EndDate = z.string();

/**
 * List of endpoint IDs (cannot contain empty strings)
 */
export type EndpointIds = z.infer<typeof EndpointIds>;
export const EndpointIds = z.array(z.string().min(1)).min(1);

export type EndpointMetadataResponse = z.infer<typeof EndpointMetadataResponse>;
export const EndpointMetadataResponse = z.object({});

/**
 * Optional parameters object
 */
export type Parameters = z.infer<typeof Parameters>;
export const Parameters = z.object({});

/**
 * The maximum timeout value in milliseconds (optional)
 */
export type Timeout = z.infer<typeof Timeout>;
export const Timeout = z.number().int().min(1);

export type ExecuteRouteRequestBody = z.infer<typeof ExecuteRouteRequestBody>;
export const ExecuteRouteRequestBody = z
  .object({
    agent_type: AgentTypes.optional(),
    alert_ids: AlertIds.optional(),
    case_ids: CaseIds.optional(),
    comment: Comment.optional(),
    endpoint_ids: EndpointIds,
    parameters: Parameters.optional(),
  })
  .merge(
    z.object({
      parameters: z.object({
        command: Command,
        timeout: Timeout.optional(),
      }),
    })
  );

export type ExecuteRouteResponse = z.infer<typeof ExecuteRouteResponse>;
export const ExecuteRouteResponse = z.object({});

export type GetEndpointActionListResponse = z.infer<typeof GetEndpointActionListResponse>;
export const GetEndpointActionListResponse = z.object({});

export type GetEndpointActionResponse = z.infer<typeof GetEndpointActionResponse>;
export const GetEndpointActionResponse = z.object({});

export type GetFileRouteRequestBody = z.infer<typeof GetFileRouteRequestBody>;
export const GetFileRouteRequestBody = z
  .object({
    agent_type: AgentTypes.optional(),
    alert_ids: AlertIds.optional(),
    case_ids: CaseIds.optional(),
    comment: Comment.optional(),
    endpoint_ids: EndpointIds,
    parameters: Parameters.optional(),
  })
  .merge(
    z.object({
      parameters: z.object({
        path: z.string(),
      }),
    })
  );

export type GetFileRouteResponse = z.infer<typeof GetFileRouteResponse>;
export const GetFileRouteResponse = z.object({});

export type GetProcessesRouteRequestBody = z.infer<typeof GetProcessesRouteRequestBody>;
export const GetProcessesRouteRequestBody = z.object({
  agent_type: AgentTypes.optional(),
  alert_ids: AlertIds.optional(),
  case_ids: CaseIds.optional(),
  comment: Comment.optional(),
  endpoint_ids: EndpointIds,
  parameters: Parameters.optional(),
});

export type GetProcessesRouteResponse = z.infer<typeof GetProcessesRouteResponse>;
export const GetProcessesRouteResponse = z.object({});

export type HostPathScriptParameters = z.infer<typeof HostPathScriptParameters>;
export const HostPathScriptParameters = z.object({
  /**
   * Command line arguments.
   */
  commandLine: z.string().min(1).optional(),
  /**
   * Absolute or relative path of script on host machine.
   */
  hostPath: z.string().min(1),
  /**
   * Timeout in seconds.
   */
  timeout: z.number().int().min(1).optional(),
});

/**
 * A set of agent health statuses to filter by.
 */
export type HostStatuses = z.infer<typeof HostStatuses>;
export const HostStatuses = z.array(
  z.enum(['healthy', 'offline', 'updating', 'inactive', 'unenrolled'])
);

export type IsolateRouteResponse = z.infer<typeof IsolateRouteResponse>;
export const IsolateRouteResponse = z.object({});

export type KillProcessRouteRequestBody = z.infer<typeof KillProcessRouteRequestBody>;
export const KillProcessRouteRequestBody = z
  .object({
    agent_type: AgentTypes.optional(),
    alert_ids: AlertIds.optional(),
    case_ids: CaseIds.optional(),
    comment: Comment.optional(),
    endpoint_ids: EndpointIds,
    parameters: Parameters.optional(),
  })
  .merge(
    z.object({
      parameters: z.union([
        z.object({
          /**
           * The process ID (PID) of the process to terminate.
           */
          pid: z.number().int().min(1).optional(),
        }),
        z.object({
          /**
           * The entity ID of the process to terminate.
           */
          entity_id: z.string().min(1).optional(),
        }),
        z.object({
          /**
           * The name of the process to terminate. Valid for SentinelOne agent type only.
           */
          process_name: z.string().min(1).optional(),
        }),
      ]),
    })
  );

export type KillProcessRouteResponse = z.infer<typeof KillProcessRouteResponse>;
export const KillProcessRouteResponse = z.object({});

/**
 * A KQL string.
 */
export type Kuery = z.infer<typeof Kuery>;
export const Kuery = z.string();

export type MetadataListResponse = z.infer<typeof MetadataListResponse>;
export const MetadataListResponse = z.object({});

/**
 * Page number
 */
export type Page = z.infer<typeof Page>;
export const Page = z.number().int().min(1).default(1);

/**
 * Number of items per page
 */
export type PageSize = z.infer<typeof PageSize>;
export const PageSize = z.number().int().min(1).max(100).default(10);

export type ProtectionUpdatesNoteResponse = z.infer<typeof ProtectionUpdatesNoteResponse>;
export const ProtectionUpdatesNoteResponse = z.object({
  note: z.string().optional(),
});

export type RawScriptParameters = z.infer<typeof RawScriptParameters>;
export const RawScriptParameters = z.object({
  /**
   * Command line arguments.
   */
  commandLine: z.string().min(1).optional(),
  /**
   * Raw script content.
   */
  raw: z.string().min(1),
  /**
   * Timeout in seconds.
   */
  timeout: z.number().int().min(1).optional(),
});

export type RunScriptRouteRequestBody = z.infer<typeof RunScriptRouteRequestBody>;
export const RunScriptRouteRequestBody = z.object({
  /**
   * Exactly one of 'Raw', 'HostPath', or 'CloudFile' must be provided. CommandLine and Timeout are optional for all.
   */
  parameters: z.union([RawScriptParameters, HostPathScriptParameters, CloudFileScriptParameters]),
});

export type ScanRouteRequestBody = z.infer<typeof ScanRouteRequestBody>;
export const ScanRouteRequestBody = z
  .object({
    agent_type: AgentTypes.optional(),
    alert_ids: AlertIds.optional(),
    case_ids: CaseIds.optional(),
    comment: Comment.optional(),
    endpoint_ids: EndpointIds,
    parameters: Parameters.optional(),
  })
  .merge(
    z.object({
      parameters: z.object({
        /**
         * The folder or file’s full path (including the file name).
         */
        path: z.string(),
      }),
    })
  );

export type ScanRouteResponse = z.infer<typeof ScanRouteResponse>;
export const ScanRouteResponse = z.object({});

/**
 * Determines the sort order.
 */
export type SortDirection = z.infer<typeof SortDirection>;
export const SortDirection = z.enum(['asc', 'desc']);
export type SortDirectionEnum = typeof SortDirection.enum;
export const SortDirectionEnum = SortDirection.enum;

/**
 * Determines which field is used to sort the results.
 */
export type SortField = z.infer<typeof SortField>;
export const SortField = z.enum([
  'enrolled_at',
  'metadata.host.hostname',
  'host_status',
  'metadata.Endpoint.policy.applied.name',
  'metadata.Endpoint.policy.applied.status',
  'metadata.host.os.name',
  'metadata.host.ip',
  'metadata.agent.version',
  'last_checkin',
]);
export type SortFieldEnum = typeof SortField.enum;
export const SortFieldEnum = SortField.enum;

/**
 * A start date in ISO 8601 format or Date Math format.
 */
export type StartDate = z.infer<typeof StartDate>;
export const StartDate = z.string();

export type SuccessResponse = z.infer<typeof SuccessResponse>;
export const SuccessResponse = z.object({});

export type SuspendProcessRouteRequestBody = z.infer<typeof SuspendProcessRouteRequestBody>;
export const SuspendProcessRouteRequestBody = z
  .object({
    agent_type: AgentTypes.optional(),
    alert_ids: AlertIds.optional(),
    case_ids: CaseIds.optional(),
    comment: Comment.optional(),
    endpoint_ids: EndpointIds,
    parameters: Parameters.optional(),
  })
  .merge(
    z.object({
      parameters: z.union([
        z.object({
          /**
           * The process ID (PID) of the process to suspend.
           */
          pid: z.number().int().min(1).optional(),
        }),
        z.object({
          /**
           * The entity ID of the process to suspend.
           */
          entity_id: z.string().min(1).optional(),
        }),
      ]),
    })
  );

export type SuspendProcessRouteResponse = z.infer<typeof SuspendProcessRouteResponse>;
export const SuspendProcessRouteResponse = z.object({});

/**
 * Type of response action
 */
export type Type = z.infer<typeof Type>;
export const Type = z.enum(['automated', 'manual']);
export type TypeEnum = typeof Type.enum;
export const TypeEnum = Type.enum;

/**
 * List of types of response actions
 */
export type Types = z.infer<typeof Types>;
export const Types = z.array(Type);

export type UnisolateRouteResponse = z.infer<typeof UnisolateRouteResponse>;
export const UnisolateRouteResponse = z.object({});

export type UploadRouteRequestBody = z.infer<typeof UploadRouteRequestBody>;
export const UploadRouteRequestBody = z
  .object({
    agent_type: AgentTypes.optional(),
    alert_ids: AlertIds.optional(),
    case_ids: CaseIds.optional(),
    comment: Comment.optional(),
    endpoint_ids: EndpointIds,
    parameters: Parameters.optional(),
  })
  .merge(
    z.object({
      /**
       * The binary content of the file.
       */
      file: z.string(),
      parameters: z.object({
        /**
         * Overwrite the file on the host if it already exists.
         */
        overwrite: z.boolean().optional().default(false),
      }),
    })
  );

export type UploadRouteResponse = z.infer<typeof UploadRouteResponse>;
export const UploadRouteResponse = z.object({});

/**
 * A list of user IDs.
 */
export type UserIds = z.infer<typeof UserIds>;
export const UserIds = z.union([z.array(z.string().min(1)).min(1), z.string().min(1)]);

/**
 * A list of action IDs that should include the complete output of the action.
 */
export type WithOutputs = z.infer<typeof WithOutputs>;
export const WithOutputs = z.union([z.array(z.string().min(1)).min(1), z.string().min(1)]);
