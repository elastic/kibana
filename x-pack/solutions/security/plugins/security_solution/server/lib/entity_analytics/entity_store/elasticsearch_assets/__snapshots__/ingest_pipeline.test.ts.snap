// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ingest_pipeline createPlatformPipeline should create a platform pipeline with basic configuration 1`] = `
Array [
  Object {
    "set": Object {
      "field": "@timestamp",
      "value": "{{entity.last_seen_timestamp}}",
    },
  },
  Object {
    "script": Object {
      "lang": "painless",
      "params": Object {
        "template": "{{entity.id}}",
      },
      "source": "
          // Extract the display name field from the template
          String template = params.template;
          // Remove {{ and }} to get the field path
          String fieldPath = template.substring(2, template.length() - 2);
          
          // Navigate to the field value
          def value = ctx;
          for (String part : fieldPath.splitOnToken('.')) {
            if (value == null) break;
            value = value[part];
          }
          
          // Handle collected values (arrays/maps) by taking the first element
          if (value instanceof List && !value.isEmpty()) {
            value = value[0];
          } else if (value instanceof Map && !value.isEmpty()) {
            // Get first value from map (collected values might be in map format)
            value = value.values().toArray()[0];
          }
          
          // Set entity.name to the extracted value, or use the identity field as fallback
          if (value != null && value != '') {
            ctx.entity.name = value;
          } else {
            ctx.entity.name = ctx['entity.id'];
          }
        ",
    },
  },
  Object {
    "enrich": Object {
      "field": "entity.id",
      "policy_name": "entity_store_field_retention_generic_default_v1.0.0",
      "target_field": "historical",
    },
  },
  Object {
    "dot_expander": Object {
      "field": "destination.field",
    },
  },
  Object {
    "set": Object {
      "field": "destination.field",
      "if": "(ctx?.destination?.field == null || ((ctx.destination.field instanceof Collection || ctx.destination.field instanceof String || ctx.destination.field instanceof Map) && ctx.destination.field.isEmpty())) && !(ctx?.historical?.destination?.field == null || ((ctx.historical.destination.field instanceof Collection || ctx.historical.destination.field instanceof String || ctx.historical.destination.field instanceof Map) && ctx.historical.destination.field.isEmpty()))",
      "value": "{{historical.destination.field}}",
    },
  },
  Object {
    "remove": Object {
      "field": "destination.field",
      "if": "ctx?.destination?.field == null || ((ctx.destination.field instanceof Collection || ctx.destination.field instanceof String || ctx.destination.field instanceof Map) && ctx.destination.field.isEmpty())",
      "ignore_missing": true,
    },
  },
  Object {
    "remove": Object {
      "field": "asset",
      "if": "ctx?.asset == null || ((ctx.asset instanceof Collection || ctx.asset instanceof String || ctx.asset instanceof Map) && ctx.asset.isEmpty())",
      "ignore_missing": true,
    },
  },
  Object {
    "remove": Object {
      "field": "generic.risk",
      "if": "ctx?.generic?.risk == null || ((ctx.generic.risk instanceof Collection || ctx.generic.risk instanceof String || ctx.generic.risk instanceof Map) && ctx.generic.risk.isEmpty())",
      "ignore_missing": true,
    },
  },
  Object {
    "remove": Object {
      "field": Array [
        "entity.last_seen_timestamp",
        "entity.schema_version",
        "entity.definition_version",
        "entity.identity_fields",
        "entity.definition_id",
        "entity.display_name",
      ],
      "ignore_failure": true,
    },
  },
  Object {
    "remove": Object {
      "field": "historical",
      "ignore_failure": true,
    },
  },
]
`;
