/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { euiThemeVars } from '@kbn/ui-theme';
import { getVulnerabilityStats } from './vulnerability_helpers';
import { i18n } from '@kbn/i18n';

describe('getVulnerabilitiesAggregationCount', () => {
  const mockFilterFunction = jest.fn();
  it('should return empty array when all severity count is 0', () => {
    const result = getVulnerabilityStats({ critical: 0, high: 0, medium: 0, low: 0, none: 0 });
    expect(result).toEqual([]);
  });

  it('should return stats for low, medium, high, and critical vulnerabilities', () => {
    const result = getVulnerabilityStats({ critical: 1, high: 2, medium: 3, low: 4, none: 5 });
    const resultWithoutFunctions = result.map((item) => {
      const { filter, reset, ...rest } = item;
      return rest;
    });

    expect(resultWithoutFunctions).toEqual([
      {
        key: i18n.translate(
          'xpack.securitySolution.flyout.right.insights.vulnerabilities.noneVulnerabilitiesText',
          {
            defaultMessage: 'None',
          }
        ),
        count: 5,
        color: '#aaa',
        isCurrentFilter: false,
      },
      {
        key: i18n.translate(
          'xpack.securitySolution.flyout.right.insights.vulnerabilities.lowVulnerabilitiesText',
          {
            defaultMessage: 'Low',
          }
        ),
        count: 4,
        color: euiThemeVars.euiColorVis0,
        isCurrentFilter: false,
      },
      {
        key: i18n.translate(
          'xpack.securitySolution.flyout.right.insights.vulnerabilities.mediumVulnerabilitiesText',
          {
            defaultMessage: 'Medium',
          }
        ),
        count: 3,
        color: euiThemeVars.euiColorVis5_behindText,
        isCurrentFilter: false,
      },
      {
        key: i18n.translate(
          'xpack.securitySolution.flyout.right.insights.vulnerabilities.highVulnerabilitiesText',
          {
            defaultMessage: 'High',
          }
        ),
        count: 2,
        color: euiThemeVars.euiColorVis9_behindText,
        isCurrentFilter: false,
      },
      {
        key: i18n.translate(
          'xpack.securitySolution.flyout.right.insights.vulnerabilities.CriticalVulnerabilitiesText',
          {
            defaultMessage: 'Critical',
          }
        ),
        count: 1,
        color: euiThemeVars.euiColorDanger,
        isCurrentFilter: false,
      },
    ]);
  });

  it('should return correct stats with correct onClick functions', () => {
    const result = getVulnerabilityStats(
      { critical: 1, high: 2, medium: 3, low: 4, none: 5 },
      mockFilterFunction
    );
    const event = { stopPropagation: jest.fn() } as unknown as React.MouseEvent<
      SVGElement,
      MouseEvent
    >;
    result[1].filter?.();
    expect(mockFilterFunction).toHaveBeenCalledWith('LOW');
    result[1].reset?.(event);
    expect(mockFilterFunction).toHaveBeenCalledWith('');
  });

  it('should identify correct currentFilter', () => {
    const currentFilter = 'LOW';
    const result = getVulnerabilityStats(
      { critical: 1, high: 2, medium: 3, low: 4, none: 5 },
      mockFilterFunction,
      currentFilter
    );

    // Make sure that Low is set to Current Filter
    expect(result[1].isCurrentFilter).toBe(true);
    expect(result[1].key).toBe('Low');

    // Make sure only Low is set as Current Filter and no other severity
    result.forEach((item) => {
      if (item.key !== 'Low') {
        expect(item.isCurrentFilter).toBe(false);
      }
    });
  });
});
