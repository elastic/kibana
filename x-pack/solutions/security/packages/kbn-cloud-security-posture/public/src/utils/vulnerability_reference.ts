/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import type { CspVulnerabilityFinding } from '@kbn/cloud-security-posture-common/schema/vulnerabilities/latest';

/**
 * Checks if a reference URL contains a vulnerability ID
 */
export const isCveReference = (reference: string, id: string): boolean => {
  try {
    const url = new URL(reference);
    const hasMatchingPathname = url.pathname?.toLowerCase().includes(id?.toLowerCase());

    let hasMatchingParam = false;
    url.searchParams.forEach((value) => {
      if (value === id || value.toLowerCase().includes(id.toLowerCase())) {
        hasMatchingParam = true;
      }
    });

    return hasMatchingParam || hasMatchingPathname;
  } catch {
    return false;
  }
};

/**
 * Finds matching reference link for a vulnerability ID
 */
export const findReferenceLink = (references: string[], id: string): string | null => {
  const foundReference = references.find((ref) => isCveReference(ref, id));

  return foundReference ?? null;
};

/**
 * Get non-CVE references from vulnerability record
 */
export const getNonCveReferences = (vulnerabilityRecord: CspVulnerabilityFinding): string[] => {
  if (!vulnerabilityRecord?.vulnerability?.reference) {
    return [];
  }

  const references = Array.isArray(vulnerabilityRecord.vulnerability.reference)
    ? vulnerabilityRecord.vulnerability.reference
    : [vulnerabilityRecord.vulnerability.reference];

  const ids = Array.isArray(vulnerabilityRecord.vulnerability.id)
    ? vulnerabilityRecord.vulnerability.id
    : [vulnerabilityRecord.vulnerability.id];

  return references.filter((ref) => {
    if (!ref) return false;

    for (const id of ids) {
      if (id && isCveReference(ref, id)) {
        return false;
      }
    }

    return true;
  });
};
