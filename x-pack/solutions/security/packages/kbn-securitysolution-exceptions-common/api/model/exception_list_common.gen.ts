/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Exception List Attributes
 *   version: not applicable
 */

import { z } from '@kbn/zod';
import { isNonEmptyString } from '@kbn/zod-helpers';

import { NonEmptyString } from '@kbn/openapi-common/schemas/primitives.gen';
import { ExceptionListItemEntryArray } from './exception_list_item_entry.gen';

/**
 * Exception list's identifier.
 */
export type ExceptionListId = z.infer<typeof ExceptionListId>;
export const ExceptionListId = z.string().min(1).superRefine(isNonEmptyString);

/**
 * Exception list's human readable string identifier, e.g. `trusted-linux-processes`.
 */
export type ExceptionListHumanId = z.infer<typeof ExceptionListHumanId>;
export const ExceptionListHumanId = z.string().min(1).superRefine(isNonEmptyString);

/**
 * The type of exception list to be created. Different list types may denote where they can be utilized.
 */
export type ExceptionListType = z.infer<typeof ExceptionListType>;
export const ExceptionListType = z.enum([
  'detection',
  'rule_default',
  'endpoint',
  'endpoint_trusted_apps',
  'endpoint_events',
  'endpoint_host_isolation_exceptions',
  'endpoint_blocklists',
]);
export type ExceptionListTypeEnum = typeof ExceptionListType.enum;
export const ExceptionListTypeEnum = ExceptionListType.enum;

/**
 * The name of the exception list.
 */
export type ExceptionListName = z.infer<typeof ExceptionListName>;
export const ExceptionListName = z.string();

/**
 * Describes the exception list.
 */
export type ExceptionListDescription = z.infer<typeof ExceptionListDescription>;
export const ExceptionListDescription = z.string();

/**
 * Placeholder for metadata about the list container.
 */
export type ExceptionListMeta = z.infer<typeof ExceptionListMeta>;
export const ExceptionListMeta = z.object({}).catchall(z.unknown());

/**
  * Determines whether the exception container is available in all Kibana spaces or just the space
in which it is created, where:

- `single`: Only available in the Kibana space in which it is created.
- `agnostic`: Available in all Kibana spaces.

  */
export type ExceptionNamespaceType = z.infer<typeof ExceptionNamespaceType>;
export const ExceptionNamespaceType = z.enum(['agnostic', 'single']);
export type ExceptionNamespaceTypeEnum = typeof ExceptionNamespaceType.enum;
export const ExceptionNamespaceTypeEnum = ExceptionNamespaceType.enum;

/**
 * String array containing words and phrases to help categorize exception containers.
 */
export type ExceptionListTags = z.infer<typeof ExceptionListTags>;
export const ExceptionListTags = z.array(z.string());

/**
 * Use this field to specify the operating system.
 */
export type ExceptionListOsType = z.infer<typeof ExceptionListOsType>;
export const ExceptionListOsType = z.enum(['linux', 'macos', 'windows']);
export type ExceptionListOsTypeEnum = typeof ExceptionListOsType.enum;
export const ExceptionListOsTypeEnum = ExceptionListOsType.enum;

/**
 * Use this field to specify the operating system. Only enter one value.
 */
export type ExceptionListOsTypeArray = z.infer<typeof ExceptionListOsTypeArray>;
export const ExceptionListOsTypeArray = z.array(ExceptionListOsType);

/**
 * The document version, automatically increasd on updates.
 */
export type ExceptionListVersion = z.infer<typeof ExceptionListVersion>;
export const ExceptionListVersion = z.number().int().min(1);

export type ExceptionList = z.infer<typeof ExceptionList>;
export const ExceptionList = z.object({
  id: ExceptionListId,
  list_id: ExceptionListHumanId,
  type: ExceptionListType,
  name: ExceptionListName,
  description: ExceptionListDescription,
  immutable: z.boolean(),
  namespace_type: ExceptionNamespaceType,
  os_types: ExceptionListOsTypeArray.optional(),
  tags: ExceptionListTags.optional(),
  meta: ExceptionListMeta.optional(),
  version: ExceptionListVersion,
  /**
   * The version id, normally returned by the API when the item was retrieved. Use it ensure updates are done against the latest version.
   */
  _version: z.string().optional(),
  /**
   * Field used in search to ensure all containers are sorted and returned correctly.
   */
  tie_breaker_id: z.string(),
  /**
   * Autogenerated date of object creation.
   */
  created_at: z.string().datetime(),
  /**
   * Autogenerated value - user that created object.
   */
  created_by: z.string(),
  /**
   * Autogenerated date of last object update.
   */
  updated_at: z.string().datetime(),
  /**
   * Autogenerated value - user that last updated object.
   */
  updated_by: z.string(),
});

/**
 * Exception's identifier.
 */
export type ExceptionListItemId = z.infer<typeof ExceptionListItemId>;
export const ExceptionListItemId = z.string().min(1).superRefine(isNonEmptyString);

/**
 * Human readable string identifier, e.g. `trusted-linux-processes`
 */
export type ExceptionListItemHumanId = z.infer<typeof ExceptionListItemHumanId>;
export const ExceptionListItemHumanId = z.string().min(1).superRefine(isNonEmptyString);

export type ExceptionListItemType = z.infer<typeof ExceptionListItemType>;
export const ExceptionListItemType = z.literal('simple');

/**
 * Exception list name.
 */
export type ExceptionListItemName = z.infer<typeof ExceptionListItemName>;
export const ExceptionListItemName = z.string().min(1).superRefine(isNonEmptyString);

/**
 * Describes the exception list.
 */
export type ExceptionListItemDescription = z.infer<typeof ExceptionListItemDescription>;
export const ExceptionListItemDescription = z.string();

export type ExceptionListItemMeta = z.infer<typeof ExceptionListItemMeta>;
export const ExceptionListItemMeta = z.object({}).catchall(z.unknown());

/**
 * The exception itemâ€™s expiration date, in ISO format. This field is only available for regular exception items, not endpoint exceptions.
 */
export type ExceptionListItemExpireTime = z.infer<typeof ExceptionListItemExpireTime>;
export const ExceptionListItemExpireTime = z.string().datetime();

export type ExceptionListItemTags = z.infer<typeof ExceptionListItemTags>;
export const ExceptionListItemTags = z.array(z.string().min(1).superRefine(isNonEmptyString));

export type ExceptionListItemOsType = z.infer<typeof ExceptionListItemOsType>;
export const ExceptionListItemOsType = z.enum(['linux', 'macos', 'windows']);
export type ExceptionListItemOsTypeEnum = typeof ExceptionListItemOsType.enum;
export const ExceptionListItemOsTypeEnum = ExceptionListItemOsType.enum;

export type ExceptionListItemOsTypeArray = z.infer<typeof ExceptionListItemOsTypeArray>;
export const ExceptionListItemOsTypeArray = z.array(ExceptionListOsType);

export type ExceptionListItemComment = z.infer<typeof ExceptionListItemComment>;
export const ExceptionListItemComment = z.object({
  id: NonEmptyString,
  comment: NonEmptyString,
  /**
   * Autogenerated date of object creation.
   */
  created_at: z.string().datetime(),
  created_by: NonEmptyString,
  /**
   * Autogenerated date of last object update.
   */
  updated_at: z.string().datetime().optional(),
  updated_by: NonEmptyString.optional(),
});

/**
  * Array of comment fields:

- comment (string): Comments about the exception item.

  */
export type ExceptionListItemCommentArray = z.infer<typeof ExceptionListItemCommentArray>;
export const ExceptionListItemCommentArray = z.array(ExceptionListItemComment);

export type ExceptionListItem = z.infer<typeof ExceptionListItem>;
export const ExceptionListItem = z.object({
  id: ExceptionListItemId,
  item_id: ExceptionListItemHumanId,
  list_id: ExceptionListHumanId,
  type: ExceptionListItemType,
  name: ExceptionListItemName,
  description: ExceptionListItemDescription,
  entries: ExceptionListItemEntryArray,
  namespace_type: ExceptionNamespaceType,
  os_types: ExceptionListItemOsTypeArray.optional(),
  tags: ExceptionListItemTags.optional(),
  meta: ExceptionListItemMeta.optional(),
  expire_time: ExceptionListItemExpireTime.optional(),
  comments: ExceptionListItemCommentArray,
  /**
   * The version id, normally returned by the API when the item was retrieved. Use it ensure updates are done against the latest version.
   */
  _version: z.string().optional(),
  /**
   * Field used in search to ensure all containers are sorted and returned correctly.
   */
  tie_breaker_id: z.string(),
  /**
   * Autogenerated date of object creation.
   */
  created_at: z.string().datetime(),
  /**
   * Autogenerated value - user that created object.
   */
  created_by: z.string(),
  /**
   * Autogenerated date of last object update.
   */
  updated_at: z.string().datetime(),
  /**
   * Autogenerated value - user that last updated object.
   */
  updated_by: z.string(),
});

export type ExceptionListSO = z.infer<typeof ExceptionListSO>;
export const ExceptionListSO = z.object({
  item_id: ExceptionListItemHumanId.optional(),
  list_id: ExceptionListHumanId,
  list_type: z.enum(['item', 'list']),
  immutable: z.boolean().optional(),
  type: ExceptionListItemType,
  name: ExceptionListItemName,
  description: ExceptionListItemDescription,
  entries: ExceptionListItemEntryArray.optional(),
  os_types: ExceptionListItemOsTypeArray.optional(),
  tags: ExceptionListItemTags.optional(),
  meta: ExceptionListItemMeta.optional(),
  expire_time: ExceptionListItemExpireTime.optional(),
  comments: ExceptionListItemCommentArray.optional(),
  version: NonEmptyString.optional(),
  /**
   * Field used in search to ensure all containers are sorted and returned correctly.
   */
  tie_breaker_id: z.string(),
  /**
   * Autogenerated date of object creation.
   */
  created_at: z.string().datetime(),
  /**
   * Autogenerated value - user that created object.
   */
  created_by: z.string(),
  /**
   * Autogenerated value - user that last updated object.
   */
  updated_by: z.string(),
});
