/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Entity Analytics API client for tests
 *   version: Bundle (no version)
 */

import {
  ELASTIC_HTTP_VERSION_HEADER,
  X_ELASTIC_INTERNAL_ORIGIN_REQUEST,
} from '@kbn/core-http-common';
import { replaceParams } from '@kbn/openapi-common/shared';

import type { BulkUpsertAssetCriticalityRecordsRequestBodyInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/asset_criticality/bulk_upload_asset_criticality.gen';
import type { ConfigureRiskEngineSavedObjectRequestBodyInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/risk_engine/engine_configure_saved_object_route.gen';
import type { CreateAssetCriticalityRecordRequestBodyInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/asset_criticality/create_asset_criticality.gen';
import type {
  CreateEntitySourceRequestBodyInput,
  DeleteEntitySourceRequestParamsInput,
  GetEntitySourceRequestParamsInput,
  ListEntitySourcesRequestQueryInput,
  UpdateEntitySourceRequestParamsInput,
  UpdateEntitySourceRequestBodyInput,
} from '@kbn/security-solution-plugin/common/api/entity_analytics/monitoring/monitoring_entity_source/monitoring_entity_source.gen';
import type { CreatePrivilegesImportIndexRequestBodyInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/monitoring/create_index.gen';
import type { CreatePrivMonUserRequestBodyInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/monitoring/users/create.gen';
import type { DeleteAssetCriticalityRecordRequestQueryInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/asset_criticality/delete_asset_criticality.gen';
import type {
  DeleteEntityEngineRequestQueryInput,
  DeleteEntityEngineRequestParamsInput,
} from '@kbn/security-solution-plugin/common/api/entity_analytics/entity_store/engine/delete.gen';
import type { DeleteMonitoringEngineRequestQueryInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/monitoring/engine/delete.gen';
import type { DeletePrivMonUserRequestParamsInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/monitoring/users/delete.gen';
import type {
  DeprecatedTriggerRiskScoreCalculationRequestBodyInput,
  TriggerRiskScoreCalculationRequestBodyInput,
} from '@kbn/security-solution-plugin/common/api/entity_analytics/risk_engine/entity_calculation_route.gen';
import type { FindAssetCriticalityRecordsRequestQueryInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/asset_criticality/list_asset_criticality.gen';
import type { GetAssetCriticalityRecordRequestQueryInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/asset_criticality/get_asset_criticality.gen';
import type { GetEntityEngineRequestParamsInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/entity_store/engine/get.gen';
import type { GetEntityStoreStatusRequestQueryInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/entity_store/status.gen';
import type {
  InitEntityEngineRequestParamsInput,
  InitEntityEngineRequestBodyInput,
} from '@kbn/security-solution-plugin/common/api/entity_analytics/entity_store/engine/init.gen';
import type { InitEntityStoreRequestBodyInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/entity_store/enable.gen';
import type { ListEntitiesRequestQueryInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/entity_store/entities/list_entities.gen';
import type { ListPrivMonUsersRequestQueryInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/monitoring/users/list.gen';
import type { PreviewRiskScoreRequestBodyInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/risk_engine/preview_route.gen';
import type { SearchPrivilegesIndicesRequestQueryInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/monitoring/search_indices.gen';
import type { StartEntityEngineRequestParamsInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/entity_store/engine/start.gen';
import type { StopEntityEngineRequestParamsInput } from '@kbn/security-solution-plugin/common/api/entity_analytics/entity_store/engine/stop.gen';
import type {
  UpdatePrivMonUserRequestParamsInput,
  UpdatePrivMonUserRequestBodyInput,
} from '@kbn/security-solution-plugin/common/api/entity_analytics/monitoring/users/update.gen';
import type {
  UpsertEntityRequestQueryInput,
  UpsertEntityRequestParamsInput,
  UpsertEntityRequestBodyInput,
} from '@kbn/security-solution-plugin/common/api/entity_analytics/entity_store/entities/upsert_entity.gen';

import type { FtrProviderContext } from '@kbn/ftr-common-functional-services';
import { getRouteUrlForSpace } from '@kbn/spaces-plugin/common';

export function SecuritySolutionApiProvider({ getService }: FtrProviderContext) {
  const supertest = getService('supertest');

  return {
    applyEntityEngineDataviewIndices(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/entity_store/engines/apply_dataview_indices', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    assetCriticalityGetPrivileges(kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/internal/asset_criticality/privileges', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
      * Bulk upsert up to 1000 asset criticality records.

If asset criticality records already exist for the specified entities, those records are overwritten with the specified values. If asset criticality records don't exist for the specified entities, new records are created.

      */
    bulkUpsertAssetCriticalityRecords(
      props: BulkUpsertAssetCriticalityRecordsProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(getRouteUrlForSpace('/api/asset_criticality/bulk', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Cleaning up the the Risk Engine by removing the indices, mapping and transforms
     */
    cleanUpRiskEngine(kibanaSpace: string = 'default') {
      return supertest
        .delete(getRouteUrlForSpace('/api/risk_score/engine/dangerously_delete_data', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Configuring the Risk Engine Saved Object
     */
    configureRiskEngineSavedObject(
      props: ConfigureRiskEngineSavedObjectProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .patch(getRouteUrlForSpace('/api/risk_score/engine/saved_object/configure', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * Create or update an asset criticality record for a specific entity.

If a record already exists for the specified entity, that record is overwritten with the specified value. If a record doesn't exist for the specified entity, a new record is created.

      */
    createAssetCriticalityRecord(
      props: CreateAssetCriticalityRecordProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(getRouteUrlForSpace('/api/asset_criticality', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    createEntitySource(props: CreateEntitySourceProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/entity_analytics/monitoring/entity_source', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    createPrivilegesImportIndex(
      props: CreatePrivilegesImportIndexProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .put(
          getRouteUrlForSpace('/api/entity_analytics/monitoring/privileges/indices', kibanaSpace)
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    createPrivMonUser(props: CreatePrivMonUserProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/entity_analytics/monitoring/users', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Delete the asset criticality record for a specific entity.
     */
    deleteAssetCriticalityRecord(
      props: DeleteAssetCriticalityRecordProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .delete(getRouteUrlForSpace('/api/asset_criticality', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    deleteEntityEngine(props: DeleteEntityEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .delete(
          getRouteUrlForSpace(
            replaceParams('/api/entity_store/engines/{entityType}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    deleteEntitySource(props: DeleteEntitySourceProps, kibanaSpace: string = 'default') {
      return supertest
        .delete(
          getRouteUrlForSpace(
            replaceParams('/api/entity_analytics/monitoring/entity_source/{id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    deleteMonitoringEngine(props: DeleteMonitoringEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .delete(getRouteUrlForSpace('/api/entity_analytics/monitoring/engine/delete', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    deletePrivMonUser(props: DeletePrivMonUserProps, kibanaSpace: string = 'default') {
      return supertest
        .delete(
          getRouteUrlForSpace(
            replaceParams('/api/entity_analytics/monitoring/users/{id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Calculates and persists Risk Scores for an entity, returning the calculated risk score.
     */
    deprecatedTriggerRiskScoreCalculation(
      props: DeprecatedTriggerRiskScoreCalculationProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(getRouteUrlForSpace('/api/risk_scores/calculation/entity', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    disableMonitoringEngine(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/entity_analytics/monitoring/engine/disable', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    disableRiskEngine(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/internal/risk_score/engine/disable', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    enableRiskEngine(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/internal/risk_score/engine/enable', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    entityStoreGetPrivileges(kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/internal/entity_store/privileges', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * List asset criticality records, paging, sorting and filtering as needed.
     */
    findAssetCriticalityRecords(
      props: FindAssetCriticalityRecordsProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(getRouteUrlForSpace('/api/asset_criticality/list', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Get the asset criticality record for a specific entity.
     */
    getAssetCriticalityRecord(
      props: GetAssetCriticalityRecordProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(getRouteUrlForSpace('/api/asset_criticality', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getAssetCriticalityStatus(kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/internal/asset_criticality/status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    getEntityEngine(props: GetEntityEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          getRouteUrlForSpace(
            replaceParams('/api/entity_store/engines/{entityType}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    getEntitySource(props: GetEntitySourceProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          getRouteUrlForSpace(
            replaceParams('/api/entity_analytics/monitoring/entity_source/{id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    getEntityStoreStatus(props: GetEntityStoreStatusProps, kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/api/entity_store/status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getPrivilegedAccessDetectionPackageStatus(kibanaSpace: string = 'default') {
      return supertest
        .get(
          getRouteUrlForSpace(
            '/api/entity_analytics/privileged_user_monitoring/pad/status',
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Returns the status of both the legacy transform-based risk engine, as well as the new risk engine
     */
    getRiskEngineStatus(kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/internal/risk_score/engine/status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    initEntityEngine(props: InitEntityEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .post(
          getRouteUrlForSpace(
            replaceParams('/api/entity_store/engines/{entityType}/init', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    initEntityStore(props: InitEntityStoreProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/entity_store/enable', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    initMonitoringEngine(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/entity_analytics/monitoring/engine/init', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Initializes the Risk Engine by creating the necessary indices and mappings, removing old transforms, and starting the new risk engine
     */
    initRiskEngine(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/internal/risk_score/engine/init', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    installPrivilegedAccessDetectionPackage(kibanaSpace: string = 'default') {
      return supertest
        .post(
          getRouteUrlForSpace(
            '/api/entity_analytics/privileged_user_monitoring/pad/install',
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    internalUploadAssetCriticalityRecords(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/internal/asset_criticality/upload_csv', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * List entities records, paging, sorting and filtering as needed.
     */
    listEntities(props: ListEntitiesProps, kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/api/entity_store/entities/list', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    listEntityEngines(kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/api/entity_store/engines', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    listEntitySources(props: ListEntitySourcesProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          getRouteUrlForSpace('/api/entity_analytics/monitoring/entity_source/list', kibanaSpace)
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    listPrivMonUsers(props: ListPrivMonUsersProps, kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/api/entity_analytics/monitoring/users/list', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Calculates and returns a list of Risk Scores, sorted by identifier_type and risk score.
     */
    previewRiskScore(props: PreviewRiskScoreProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/internal/risk_score/preview', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    privmonBulkUploadUsersCsv(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/entity_analytics/monitoring/users/_csv', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    privMonHealth(kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/api/entity_analytics/monitoring/privileges/health', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Check if the current user has all required permissions for Privilege Monitoring
     */
    privMonPrivileges(kibanaSpace: string = 'default') {
      return supertest
        .get(
          getRouteUrlForSpace('/api/entity_analytics/monitoring/privileges/privileges', kibanaSpace)
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    readRiskEngineSettings(kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/internal/risk_score/engine/settings', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    riskEngineGetPrivileges(kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/internal/risk_engine/privileges', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    runEntityAnalyticsMigrations(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/internal/entity_analytics/migrations/run', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    scheduleMonitoringEngine(kibanaSpace: string = 'default') {
      return supertest
        .post(
          getRouteUrlForSpace('/api/entity_analytics/monitoring/engine/schedule_now', kibanaSpace)
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Schedule the risk scoring engine to run as soon as possible. You can use this to recalculate entity risk scores after updating their asset criticality.
     */
    scheduleRiskEngineNow(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/risk_score/engine/schedule_now', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    searchPrivilegesIndices(props: SearchPrivilegesIndicesProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          getRouteUrlForSpace('/api/entity_analytics/monitoring/privileges/indices', kibanaSpace)
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    startEntityEngine(props: StartEntityEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .post(
          getRouteUrlForSpace(
            replaceParams('/api/entity_store/engines/{entityType}/start', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    stopEntityEngine(props: StopEntityEngineProps, kibanaSpace: string = 'default') {
      return supertest
        .post(
          getRouteUrlForSpace(
            replaceParams('/api/entity_store/engines/{entityType}/stop', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Calculates and persists Risk Scores for an entity, returning the calculated risk score.
     */
    triggerRiskScoreCalculation(
      props: TriggerRiskScoreCalculationProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(getRouteUrlForSpace('/internal/risk_score/calculation/entity', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    updateEntitySource(props: UpdateEntitySourceProps, kibanaSpace: string = 'default') {
      return supertest
        .put(
          getRouteUrlForSpace(
            replaceParams('/api/entity_analytics/monitoring/entity_source/{id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    updatePrivMonUser(props: UpdatePrivMonUserProps, kibanaSpace: string = 'default') {
      return supertest
        .put(
          getRouteUrlForSpace(
            replaceParams('/api/entity_analytics/monitoring/users/{id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    uploadAssetCriticalityRecords(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/asset_criticality/upload_csv', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
      * Update or create an entity in Entity Store.
If the specified entity already exists, it is updated with the provided values.  If the entity does not exist, a new one is created. By default, only the following fields can be updated: * `entity.attributes.*` * `entity.lifecycle.*` * `entity.behavior.*` To update other fields, set the `force` query parameter to `true`. > info > Some fields always retain the first observed value. Updates to these fields will not appear in the final index.
> Due to technical limitations, not all updates are guaranteed to appear in the final list of observed values.
> Due to technical limitations, create is an async operation. The time for a document to be present in the  > final index depends on the entity store transform and usually takes more than 1 minute.

      */
    upsertEntity(props: UpsertEntityProps, kibanaSpace: string = 'default') {
      return supertest
        .put(
          getRouteUrlForSpace(
            replaceParams('/api/entity_store/entities/{entityType}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object)
        .query(props.query);
    },
  };
}

export interface BulkUpsertAssetCriticalityRecordsProps {
  body: BulkUpsertAssetCriticalityRecordsRequestBodyInput;
}
export interface ConfigureRiskEngineSavedObjectProps {
  body: ConfigureRiskEngineSavedObjectRequestBodyInput;
}
export interface CreateAssetCriticalityRecordProps {
  body: CreateAssetCriticalityRecordRequestBodyInput;
}
export interface CreateEntitySourceProps {
  body: CreateEntitySourceRequestBodyInput;
}
export interface CreatePrivilegesImportIndexProps {
  body: CreatePrivilegesImportIndexRequestBodyInput;
}
export interface CreatePrivMonUserProps {
  body: CreatePrivMonUserRequestBodyInput;
}
export interface DeleteAssetCriticalityRecordProps {
  query: DeleteAssetCriticalityRecordRequestQueryInput;
}
export interface DeleteEntityEngineProps {
  query: DeleteEntityEngineRequestQueryInput;
  params: DeleteEntityEngineRequestParamsInput;
}
export interface DeleteEntitySourceProps {
  params: DeleteEntitySourceRequestParamsInput;
}
export interface DeleteMonitoringEngineProps {
  query: DeleteMonitoringEngineRequestQueryInput;
}
export interface DeletePrivMonUserProps {
  params: DeletePrivMonUserRequestParamsInput;
}
export interface DeprecatedTriggerRiskScoreCalculationProps {
  body: DeprecatedTriggerRiskScoreCalculationRequestBodyInput;
}
export interface FindAssetCriticalityRecordsProps {
  query: FindAssetCriticalityRecordsRequestQueryInput;
}
export interface GetAssetCriticalityRecordProps {
  query: GetAssetCriticalityRecordRequestQueryInput;
}
export interface GetEntityEngineProps {
  params: GetEntityEngineRequestParamsInput;
}
export interface GetEntitySourceProps {
  params: GetEntitySourceRequestParamsInput;
}
export interface GetEntityStoreStatusProps {
  query: GetEntityStoreStatusRequestQueryInput;
}
export interface InitEntityEngineProps {
  params: InitEntityEngineRequestParamsInput;
  body: InitEntityEngineRequestBodyInput;
}
export interface InitEntityStoreProps {
  body: InitEntityStoreRequestBodyInput;
}
export interface ListEntitiesProps {
  query: ListEntitiesRequestQueryInput;
}
export interface ListEntitySourcesProps {
  query: ListEntitySourcesRequestQueryInput;
}
export interface ListPrivMonUsersProps {
  query: ListPrivMonUsersRequestQueryInput;
}
export interface PreviewRiskScoreProps {
  body: PreviewRiskScoreRequestBodyInput;
}
export interface SearchPrivilegesIndicesProps {
  query: SearchPrivilegesIndicesRequestQueryInput;
}
export interface StartEntityEngineProps {
  params: StartEntityEngineRequestParamsInput;
}
export interface StopEntityEngineProps {
  params: StopEntityEngineRequestParamsInput;
}
export interface TriggerRiskScoreCalculationProps {
  body: TriggerRiskScoreCalculationRequestBodyInput;
}
export interface UpdateEntitySourceProps {
  params: UpdateEntitySourceRequestParamsInput;
  body: UpdateEntitySourceRequestBodyInput;
}
export interface UpdatePrivMonUserProps {
  params: UpdatePrivMonUserRequestParamsInput;
  body: UpdatePrivMonUserRequestBodyInput;
}
export interface UpsertEntityProps {
  query: UpsertEntityRequestQueryInput;
  params: UpsertEntityRequestParamsInput;
  body: UpsertEntityRequestBodyInput;
}
