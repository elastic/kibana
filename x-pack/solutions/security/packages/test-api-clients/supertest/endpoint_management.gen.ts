/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Endpoint Management API client for tests
 *   version: Bundle (no version)
 */

import {
  ELASTIC_HTTP_VERSION_HEADER,
  X_ELASTIC_INTERNAL_ORIGIN_REQUEST,
} from '@kbn/core-http-common';
import { replaceParams } from '@kbn/openapi-common/shared';

import type { CancelActionRequestBodyInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/response_actions/cancel/cancel.gen';
import type {
  CreateUpdateProtectionUpdatesNoteRequestParamsInput,
  CreateUpdateProtectionUpdatesNoteRequestBodyInput,
  GetProtectionUpdatesNoteRequestParamsInput,
} from '@kbn/security-solution-plugin/common/api/endpoint/protection_updates_note/protection_updates_note.gen';
import type { EndpointExecuteActionRequestBodyInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/response_actions/execute/execute.gen';
import type { EndpointFileDownloadRequestParamsInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/file_download/file_download.gen';
import type { EndpointFileInfoRequestParamsInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/file_info/file_info.gen';
import type { EndpointGetActionsDetailsRequestParamsInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/details/details.gen';
import type { EndpointGetActionsListRequestQueryInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/list/list.gen';
import type { EndpointGetActionsStatusRequestQueryInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/status/status.gen';
import type { EndpointGetFileActionRequestBodyInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/response_actions/get_file/get_file.gen';
import type { EndpointGetProcessesActionRequestBodyInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/response_actions/running_procs/running_procs.gen';
import type { EndpointIsolateActionRequestBodyInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/response_actions/isolate/isolate.gen';
import type { EndpointKillProcessActionRequestBodyInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/response_actions/kill_process/kill_process.gen';
import type { EndpointScanActionRequestBodyInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/response_actions/scan/scan.gen';
import type { EndpointSuspendProcessActionRequestBodyInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/response_actions/suspend_process/suspend_process.gen';
import type { EndpointUnisolateActionRequestBodyInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/response_actions/unisolate/unisolate.gen';
import type { GetEndpointMetadataListRequestQueryInput } from '@kbn/security-solution-plugin/common/api/endpoint/metadata/get_metadata.gen';
import type {
  GetEndpointSuggestionsRequestParamsInput,
  GetEndpointSuggestionsRequestBodyInput,
} from '@kbn/security-solution-plugin/common/api/endpoint/suggestions/get_suggestions.gen';
import type { GetPolicyResponseRequestQueryInput } from '@kbn/security-solution-plugin/common/api/endpoint/policy/policy_response.gen';
import type {
  GetWorkflowInsightsRequestQueryInput,
  UpdateWorkflowInsightRequestParamsInput,
  UpdateWorkflowInsightRequestBodyInput,
} from '@kbn/security-solution-plugin/common/api/endpoint/workflow_insights/workflow_insights.gen';
import type { RunScriptActionRequestBodyInput } from '@kbn/security-solution-plugin/common/api/endpoint/actions/response_actions/run_script/run_script.gen';

import type { FtrProviderContext } from '@kbn/ftr-common-functional-services';
import { getRouteUrlForSpace } from '@kbn/spaces-plugin/common';

export function SecuritySolutionApiProvider({ getService }: FtrProviderContext) {
  const supertest = getService('supertest');

  return {
    /**
     * Cancel a running or pending response action (Applies only to some agent types).
     */
    cancelAction(props: CancelActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/cancel', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    createUpdateProtectionUpdatesNote(
      props: CreateUpdateProtectionUpdatesNoteProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(
          getRouteUrlForSpace(
            replaceParams(
              '/api/endpoint/protection_updates_note/{package_policy_id}',
              props.params
            ),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Run a shell command on an endpoint.
     */
    endpointExecuteAction(props: EndpointExecuteActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/execute', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
      * Download a file from an endpoint. 
> info
> To construct a `file_id`, combine the `action_id` and `agent_id` values using a dot separator:
> {`file_id`} = {`action_id`}`.`{`agent_id`}

      */
    endpointFileDownload(props: EndpointFileDownloadProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          getRouteUrlForSpace(
            replaceParams('/api/endpoint/action/{action_id}/file/{file_id}/download', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
      * Get information for the specified file using the file ID.
> info
> To construct a `file_id`, combine the `action_id` and `agent_id` values using a dot separator:
> {`file_id`} = {`action_id`}`.`{`agent_id`}

      */
    endpointFileInfo(props: EndpointFileInfoProps, kibanaSpace: string = 'default') {
      return supertest
        .get(
          getRouteUrlForSpace(
            replaceParams('/api/endpoint/action/{action_id}/file/{file_id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Get the details of a response action using the action ID.
     */
    endpointGetActionsDetails(
      props: EndpointGetActionsDetailsProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(
          getRouteUrlForSpace(
            replaceParams('/api/endpoint/action/{action_id}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Get a list of all response actions.
     */
    endpointGetActionsList(props: EndpointGetActionsListProps, kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/api/endpoint/action', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Get a response actions state, which reports whether encryption is enabled.
     */
    endpointGetActionsState(kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/api/endpoint/action/state', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    /**
     * Get the status of response actions for the specified agent IDs.
     */
    endpointGetActionsStatus(
      props: EndpointGetActionsStatusProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(getRouteUrlForSpace('/api/endpoint/action_status', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Get a file from an endpoint.
     */
    endpointGetFileAction(props: EndpointGetFileActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/get_file', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Get a list of all processes running on an endpoint.
     */
    endpointGetProcessesAction(
      props: EndpointGetProcessesActionProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/running_procs', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Isolate an endpoint from the network. The endpoint remains isolated until it's released.
     */
    endpointIsolateAction(props: EndpointIsolateActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/isolate', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Terminate a running process on an endpoint.
     */
    endpointKillProcessAction(
      props: EndpointKillProcessActionProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/kill_process', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Scan a specific file or directory on an endpoint for malware.
     */
    endpointScanAction(props: EndpointScanActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/scan', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Suspend a running process on an endpoint.
     */
    endpointSuspendProcessAction(
      props: EndpointSuspendProcessActionProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/suspend_process', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Release an isolated endpoint, allowing it to rejoin a network.
     */
    endpointUnisolateAction(props: EndpointUnisolateActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/unisolate', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    /**
     * Upload a file to an endpoint.
     */
    endpointUploadAction(kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/upload', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    getEndpointMetadataList(props: GetEndpointMetadataListProps, kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/api/endpoint/metadata', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getEndpointSuggestions(props: GetEndpointSuggestionsProps, kibanaSpace: string = 'default') {
      return supertest
        .post(
          getRouteUrlForSpace(
            replaceParams('/internal/api/endpoint/suggestions/{suggestion_type}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    getPolicyResponse(props: GetPolicyResponseProps, kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/api/endpoint/policy_response', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    getProtectionUpdatesNote(
      props: GetProtectionUpdatesNoteProps,
      kibanaSpace: string = 'default'
    ) {
      return supertest
        .get(
          getRouteUrlForSpace(
            replaceParams(
              '/api/endpoint/protection_updates_note/{package_policy_id}',
              props.params
            ),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana');
    },
    getWorkflowInsights(props: GetWorkflowInsightsProps, kibanaSpace: string = 'default') {
      return supertest
        .get(getRouteUrlForSpace('/internal/api/endpoint/workflow_insights', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .query(props.query);
    },
    /**
     * Run a script on a host. Currently supported only for some agent types.
     */
    runScriptAction(props: RunScriptActionProps, kibanaSpace: string = 'default') {
      return supertest
        .post(getRouteUrlForSpace('/api/endpoint/action/runscript', kibanaSpace))
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '2023-10-31')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
    updateWorkflowInsight(props: UpdateWorkflowInsightProps, kibanaSpace: string = 'default') {
      return supertest
        .put(
          getRouteUrlForSpace(
            replaceParams('/internal/api/endpoint/workflow_insights/{insightId}', props.params),
            kibanaSpace
          )
        )
        .set('kbn-xsrf', 'true')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .set(X_ELASTIC_INTERNAL_ORIGIN_REQUEST, 'kibana')
        .send(props.body as object);
    },
  };
}

export interface CancelActionProps {
  body: CancelActionRequestBodyInput;
}
export interface CreateUpdateProtectionUpdatesNoteProps {
  params: CreateUpdateProtectionUpdatesNoteRequestParamsInput;
  body: CreateUpdateProtectionUpdatesNoteRequestBodyInput;
}
export interface EndpointExecuteActionProps {
  body: EndpointExecuteActionRequestBodyInput;
}
export interface EndpointFileDownloadProps {
  params: EndpointFileDownloadRequestParamsInput;
}
export interface EndpointFileInfoProps {
  params: EndpointFileInfoRequestParamsInput;
}
export interface EndpointGetActionsDetailsProps {
  params: EndpointGetActionsDetailsRequestParamsInput;
}
export interface EndpointGetActionsListProps {
  query: EndpointGetActionsListRequestQueryInput;
}
export interface EndpointGetActionsStatusProps {
  query: EndpointGetActionsStatusRequestQueryInput;
}
export interface EndpointGetFileActionProps {
  body: EndpointGetFileActionRequestBodyInput;
}
export interface EndpointGetProcessesActionProps {
  body: EndpointGetProcessesActionRequestBodyInput;
}
export interface EndpointIsolateActionProps {
  body: EndpointIsolateActionRequestBodyInput;
}
export interface EndpointKillProcessActionProps {
  body: EndpointKillProcessActionRequestBodyInput;
}
export interface EndpointScanActionProps {
  body: EndpointScanActionRequestBodyInput;
}
export interface EndpointSuspendProcessActionProps {
  body: EndpointSuspendProcessActionRequestBodyInput;
}
export interface EndpointUnisolateActionProps {
  body: EndpointUnisolateActionRequestBodyInput;
}
export interface GetEndpointMetadataListProps {
  query: GetEndpointMetadataListRequestQueryInput;
}
export interface GetEndpointSuggestionsProps {
  params: GetEndpointSuggestionsRequestParamsInput;
  body: GetEndpointSuggestionsRequestBodyInput;
}
export interface GetPolicyResponseProps {
  query: GetPolicyResponseRequestQueryInput;
}
export interface GetProtectionUpdatesNoteProps {
  params: GetProtectionUpdatesNoteRequestParamsInput;
}
export interface GetWorkflowInsightsProps {
  query: GetWorkflowInsightsRequestQueryInput;
}
export interface RunScriptActionProps {
  body: RunScriptActionRequestBodyInput;
}
export interface UpdateWorkflowInsightProps {
  params: UpdateWorkflowInsightRequestParamsInput;
  body: UpdateWorkflowInsightRequestBodyInput;
}
