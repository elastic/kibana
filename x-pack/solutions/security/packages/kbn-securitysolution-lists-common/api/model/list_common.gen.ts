/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Value List Attributes
 *   version: not applicable
 */

import { z } from '@kbn/zod';
import { isNonEmptyString } from '@kbn/zod-helpers';

/**
 * Value list's identifier.
 */
export type ListId = z.infer<typeof ListId>;
export const ListId = z.string().min(1).superRefine(isNonEmptyString);

/**
  * Specifies the Elasticsearch data type of excludes the list container holds. Some common examples:

- `keyword`: Many ECS fields are Elasticsearch keywords
- `ip`: IP addresses
- `ip_range`: Range of IP addresses (supports IPv4, IPv6, and CIDR notation)

  */
export type ListType = z.infer<typeof ListType>;
export const ListType = z.enum([
  'binary',
  'boolean',
  'byte',
  'date',
  'date_nanos',
  'date_range',
  'double',
  'double_range',
  'float',
  'float_range',
  'geo_point',
  'geo_shape',
  'half_float',
  'integer',
  'integer_range',
  'ip',
  'ip_range',
  'keyword',
  'long',
  'long_range',
  'shape',
  'short',
  'text',
]);
export type ListTypeEnum = typeof ListType.enum;
export const ListTypeEnum = ListType.enum;

/**
 * Value list's name.
 */
export type ListName = z.infer<typeof ListName>;
export const ListName = z.string().min(1).superRefine(isNonEmptyString);

/**
 * Describes the value list.
 */
export type ListDescription = z.infer<typeof ListDescription>;
export const ListDescription = z.string().min(1).superRefine(isNonEmptyString);

/**
 * Placeholder for metadata about the value list.
 */
export type ListMetadata = z.infer<typeof ListMetadata>;
export const ListMetadata = z.object({}).catchall(z.unknown());

/**
  * Determines how uploaded list item values are parsed. By default, list items are parsed using these named regex groups:

- `(?<value>.+)` - Single value item types, such as ip, long, date, keyword, and text.
- `(?<gte>.+)-(?<lte>.+)|(?<value>.+)` - Range value item types, such as `date_range`, `ip_range`, `double_range`, `float_range`, `integer_range`, and `long_range`.

  */
export type ListSerializer = z.infer<typeof ListSerializer>;
export const ListSerializer = z.string();

/**
  * Determines how retrieved list item values are presented. By default list items are presented using these Handelbar expressions:

- `{{{value}}}` - Single value item types, such as `ip`, `long`, `date`, `keyword`, and `text`.
- `{{{gte}}}-{{{lte}}}` - Range value item types, such as `ip_range`, `double_range`, `float_range`, `integer_range`, and `long_range`.
- `{{{gte}}},{{{lte}}}` - Date range values.

  */
export type ListDeserializer = z.infer<typeof ListDeserializer>;
export const ListDeserializer = z.string();

/**
 * The document version number.
 */
export type ListVersion = z.infer<typeof ListVersion>;
export const ListVersion = z.number().int().min(1);

/**
  * The version id, normally returned by the API when the document is retrieved. Use it ensure updates are done against the latest version.

  */
export type ListVersionId = z.infer<typeof ListVersionId>;
export const ListVersionId = z.string();

/**
 * Value list item's identifier.
 */
export type ListItemId = z.infer<typeof ListItemId>;
export const ListItemId = z.string().min(1).superRefine(isNonEmptyString);

/**
 * The value used to evaluate exceptions.
 */
export type ListItemValue = z.infer<typeof ListItemValue>;
export const ListItemValue = z.string().min(1).superRefine(isNonEmptyString);

/**
 * Describes the value list item.
 */
export type ListItemDescription = z.infer<typeof ListItemDescription>;
export const ListItemDescription = z.string().min(1).superRefine(isNonEmptyString);

/**
 * Placeholder for metadata about the value list item.
 */
export type ListItemMetadata = z.infer<typeof ListItemMetadata>;
export const ListItemMetadata = z.object({}).catchall(z.unknown());
