openapi: 3.0.3
info:
  description: Lists API allows you to manage lists of keywords, IPs or IP ranges items.
  title: Security Lists API (Elastic Cloud Serverless)
  version: '2023-10-31'
servers:
  - url: http://{kibana_host}:{port}
    variables:
      kibana_host:
        default: localhost
      port:
        default: '5601'
paths:
  /api/lists:
    delete:
      description: |
        Delete a value list using the list ID.
        > info
        > When you delete a list, all of its list items are also deleted.
      operationId: DeleteList
      parameters:
        - in: query
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ListId'
        - description: >-
            Determines whether exception items referencing this value list
            should be deleted.
          in: query
          name: deleteReferences
          required: false
          schema:
            default: false
            example: false
            type: boolean
        - description: >-
            Determines whether to delete value list without performing any
            additional checks of where this list may be utilized.
          in: query
          name: ignoreReferences
          required: false
          schema:
            default: false
            example: false
            type: boolean
      responses:
        '200':
          content:
            application/json:
              examples:
                ipList:
                  value:
                    _version: WzIsMV0=
                    '@timestamp': 2025-01-08T04:47:34.273Z
                    created_at: 2025-01-08T04:47:34.273Z
                    created_by: elastic
                    description: List of bad internet ips.
                    id: 21b01cfb-058d-44b9-838c-282be16c91cd
                    immutable: false
                    name: Bad ips
                    tie_breaker_id: f5508188-b1e9-4e6e-9662-d039a7d89899
                    type: ip
                    updated_at: 2025-01-08T05:39:39.292Z
                    updated_by: elastic
                    version: 3
              schema:
                $ref: '#/components/schemas/List'
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error: Bad Request
                    message: '[request query]: id: Required'
                    statusCode: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [DELETE /api/lists?id=ip_list] is unauthorized for
                      user, this action is granted by the Kibana privileges
                      [lists-all]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              examples:
                notFound:
                  value:
                    message: 'list id: \"ip_list\" was not found'
                    status_code: 404
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Delete a value list
      tags:
        - Security Lists API
    get:
      description: Get the details of a value list using the list ID.
      operationId: ReadList
      parameters:
        - in: query
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/ListId'
      responses:
        '200':
          content:
            application/json:
              examples:
                ip:
                  value:
                    _version: WzEsMV0=
                    '@timestamp': 2025-01-08T04:47:34.273Z
                    created_at: 2025-01-08T04:47:34.273Z
                    created_by: elastic
                    description: This list describes bad internet ip
                    id: ip_list
                    immutable: false
                    name: My bad ips
                    tie_breaker_id: f5508188-b1e9-4e6e-9662-d039a7d89899
                    type: ip
                    updated_at: 2025-01-08T05:21:53.843Z
                    updated_by: elastic
                    version: 1
              schema:
                $ref: '#/components/schemas/List'
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error: Bad Request
                    message: '[request query]: id: Required'
                    statusCode: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: "[security_exception\n\tRoot causes:\n\t\tsecurity_exception: unable to authenticate user [elastic] for REST request [/_security/_authenticate]]: unable to authenticate user [elastic] for REST request [/_security/_authenticate]"
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [GET /api/lists?id=ip_list] is unauthorized for user,
                      this action is granted by the Kibana privileges
                      [lists-read]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              examples:
                notFound:
                  value:
                    message: 'list id: \"foo\" not found'
                    status_code: 404
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Get value list details
      tags:
        - Security Lists API
    patch:
      description: Update specific fields of an existing list using the list `id`.
      operationId: PatchList
      requestBody:
        content:
          application/json:
            schema:
              example:
                id: ip_list
                name: Bad ips list - UPDATED
              type: object
              properties:
                _version:
                  $ref: '#/components/schemas/ListVersionId'
                description:
                  $ref: '#/components/schemas/ListDescription'
                id:
                  $ref: '#/components/schemas/ListId'
                meta:
                  $ref: '#/components/schemas/ListMetadata'
                name:
                  $ref: '#/components/schemas/ListName'
                version:
                  $ref: '#/components/schemas/ListVersion'
              required:
                - id
        description: Value list's properties
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                ip:
                  value:
                    _version: WzEsMV0=
                    '@timestamp': 2025-01-08T04:47:34.273Z
                    created_at: 2025-01-08T04:47:34.273Z
                    created_by: elastic
                    description: This list describes bad internet ips
                    id: ip_list
                    immutable: false
                    name: Bad ips list - UPDATED
                    tie_breaker_id: f5508188-b1e9-4e6e-9662-d039a7d89899
                    type: ip
                    updated_at: 2025-01-08T05:21:53.843Z
                    updated_by: elastic
                    version: 2
              schema:
                $ref: '#/components/schemas/List'
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error: Bad Request
                    message: '[request body]: name: Expected string, received number'
                    statusCode: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [PATCH /api/lists] is unauthorized for user, this
                      action is granted by the Kibana privileges [lists-all]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              examples:
                notFound:
                  value:
                    message: 'list id: \"foo\" not found'
                    status_code: 404
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Patch a value list
      tags:
        - Security Lists API
    post:
      description: Create a new value list.
      operationId: CreateList
      requestBody:
        content:
          application/json:
            examples:
              ip:
                value:
                  description: This list describes bad internet ips
                  id: ip_list
                  name: Simple list with ips
                  type: ip
              ip_range:
                value:
                  description: This list has ip ranges
                  id: ip_range_list
                  name: Simple list with ip ranges
                  type: ip_range
              keyword:
                value:
                  description: This list describes bad host names
                  id: keyword_list
                  name: Simple list with a keyword
                  type: keyword
              keyword_custom_format:
                value:
                  description: This parses the first found ipv4 only
                  deserializer: '{{value}}'
                  id: keyword_custom_format_list
                  name: Simple list with a keyword using a custom format
                  serializer: >-
                    (?<value>((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))
                  type: keyword
            schema:
              type: object
              properties:
                description:
                  $ref: '#/components/schemas/ListDescription'
                deserializer:
                  $ref: '#/components/schemas/ListDeserializer'
                id:
                  $ref: '#/components/schemas/ListId'
                meta:
                  $ref: '#/components/schemas/ListMetadata'
                name:
                  $ref: '#/components/schemas/ListName'
                serializer:
                  $ref: '#/components/schemas/ListSerializer'
                type:
                  $ref: '#/components/schemas/ListType'
                version:
                  default: 1
                  minimum: 1
                  type: integer
              required:
                - name
                - description
                - type
        description: Value list's properties
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                ip:
                  value:
                    _version: WzAsMV0=
                    '@timestamp': 2025-01-08T04:47:34.273Z
                    created_at: 2025-01-08T04:47:34.273Z
                    created_by: elastic
                    description: This list describes bad internet ips
                    id: ip_list
                    immutable: false
                    name: Simple list with ips
                    tie_breaker_id: f5508188-b1e9-4e6e-9662-d039a7d89899
                    type: ip
                    updated_at: 2025-01-08T04:47:34.273Z
                    updated_by: elastic
                    version: 1
                ip_range:
                  value:
                    _version: WzAsMV0=
                    '@timestamp': 2025-01-09T18:23:52.241Z
                    created_at: 2025-01-09T18:23:52.241Z
                    created_by: elastic
                    description: This list has ip ranges
                    id: ip_range_list
                    immutable: false
                    name: Simple list with ip ranges
                    tie_breaker_id: 74aebdaf-601f-4940-b351-155728ff7003
                    type: ip_range
                    updated_at: 2025-01-09T18:23:52.241Z
                    updated_by: elastic
                    version: 1
                keyword:
                  value:
                    _version: WzEsMV0=
                    '@timestamp': 2025-01-09T18:24:55.786Z
                    created_at: 2025-01-09T18:24:55.786Z
                    created_by: elastic
                    description: This list describes bad host names
                    id: keyword_list
                    immutable: false
                    name: Simple list with a keyword
                    tie_breaker_id: f7e7dbaa-daf7-4c9a-a3dc-56643923ef68
                    type: keyword
                    updated_at: 2025-01-09T18:24:55.786Z
                    updated_by: elastic
                    version: 1
                keyword_custom_format:
                  value:
                    _version: WzIsMV0=
                    '@timestamp': 2025-01-09T18:25:39.604Z
                    created_at: 2025-01-09T18:25:39.604Z
                    created_by: elastic
                    description: This parses the first found ipv4 only
                    deserializer: '{{value}}'
                    id: keyword_custom_format_list
                    immutable: false
                    name: Simple list with a keyword using a custom format
                    serializer: >-
                      (?<value>((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))
                    tie_breaker_id: 8247ae63-b780-47b8-9a89-948b643e9ec2
                    type: keyword
                    updated_at: 2025-01-09T18:25:39.604Z
                    updated_by: elastic
                    version: 1
              schema:
                $ref: '#/components/schemas/List'
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                notFound:
                  value:
                    message: >-
                      To create a list, the data stream must exist first. Data
                      stream \".lists-default\" does not exist
                    status_code: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [POST /api/lists] is unauthorized for user, this
                      action is granted by the Kibana privileges [lists-all]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '409':
          content:
            application/json:
              examples:
                alreadyExists:
                  value:
                    message: 'list id: "keyword_custom_format_list" already exists'
                    status_code: 409
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List already exists response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Create a value list
      tags:
        - Security Lists API
    put:
      description: >
        Update a value list using the list `id`. The original list is replaced,
        and all unspecified fields are deleted.

        > info

        > You cannot modify the `id` value.
      operationId: UpdateList
      requestBody:
        content:
          application/json:
            schema:
              example:
                description: Latest list of bad ips
                id: ip_list
                name: Bad ips - updated
              type: object
              properties:
                _version:
                  $ref: '#/components/schemas/ListVersionId'
                description:
                  $ref: '#/components/schemas/ListDescription'
                id:
                  $ref: '#/components/schemas/ListId'
                meta:
                  $ref: '#/components/schemas/ListMetadata'
                name:
                  $ref: '#/components/schemas/ListName'
                version:
                  $ref: '#/components/schemas/ListVersion'
              required:
                - id
                - name
                - description
        description: Value list's properties
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                ip:
                  value:
                    _version: WzIsMV0=
                    '@timestamp': 2025-01-08T04:47:34.273Z
                    created_at: 2025-01-08T04:47:34.273Z
                    created_by: elastic
                    description: Latest list of bad ips
                    id: ip_list
                    immutable: false
                    name: Bad ips - updated
                    tie_breaker_id: f5508188-b1e9-4e6e-9662-d039a7d89899
                    type: ip
                    updated_at: 2025-01-08T05:39:39.292Z
                    updated_by: elastic
                    version: 3
              schema:
                $ref: '#/components/schemas/List'
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error: Bad Request
                    message: '[request body]: id: Expected string, received number'
                    statusCode: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [PUT /api/lists] is unauthorized for user, this action
                      is granted by the Kibana privileges [lists-all]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              examples:
                notFound:
                  value:
                    message: 'list id: \"foo\" not found'
                    status_code: 404
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Update a value list
      tags:
        - Security Lists API
  /api/lists/_find:
    get:
      description: >-
        Get a paginated subset of value lists. By default, the first page is
        returned, with 20 results per page.
      operationId: FindLists
      parameters:
        - description: The page number to return.
          in: query
          name: page
          required: false
          schema:
            example: 1
            type: integer
        - description: The number of value lists to return per page.
          in: query
          name: per_page
          required: false
          schema:
            example: 20
            type: integer
        - description: Determines which field is used to sort the results.
          in: query
          name: sort_field
          required: false
          schema:
            example: name
            format: nonempty
            minLength: 1
            type: string
        - description: Determines the sort order, which can be `desc` or `asc`
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - desc
              - asc
            example: asc
            type: string
        - description: >-
            Returns the lists that come after the last lists returned in the
            previous call (use the `cursor` value returned in the previous
            call). This parameter uses the `tie_breaker_id` field to ensure all
            lists are sorted and returned correctly.
          in: query
          name: cursor
          required: false
          schema:
            $ref: '#/components/schemas/FindListsCursor'
        - description: >
            Filters the returned results according to the value of the specified
            field,

            using the <field name>:<field value> syntax.
          in: query
          name: filter
          required: false
          schema:
            $ref: '#/components/schemas/FindListsFilter'
      responses:
        '200':
          content:
            application/json:
              examples:
                ipList:
                  value:
                    cursor: >-
                      WzIwLFsiZjU1MDgxODgtYjFlOS00ZTZlLTk2NjItZDAzOWE3ZDg5ODk5Il1d
                    data:
                      - _version: WzAsMV0=
                        '@timestamp': |
                          2025-01-08T04:47:34.273Z
                        created_at: |
                          2025-01-08T04:47:34.273Z
                        created_by: elastic
                        description: This list describes bad internet ip
                        id: ip_list
                        immutable: false
                        name: Simple list with an ip
                        tie_breaker_id: f5508188-b1e9-4e6e-9662-d039a7d89899
                        type: ip
                        updated_at: |
                          2025-01-08T04:47:34.273Z
                        updated_by: elastic
                        version: 1
                    page: 1
                    per_page: 20
                    total: 1
              schema:
                type: object
                properties:
                  cursor:
                    $ref: '#/components/schemas/FindListsCursor'
                  data:
                    items:
                      $ref: '#/components/schemas/List'
                    type: array
                  page:
                    minimum: 0
                    type: integer
                  per_page:
                    minimum: 0
                    type: integer
                  total:
                    minimum: 0
                    type: integer
                required:
                  - data
                  - page
                  - per_page
                  - total
                  - cursor
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error: Bad Request
                    message: '[request query]: page: Expected number, received nan'
                    statusCode: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [GET /api/lists/_find?page=1&per_page=20] is
                      unauthorized for user, this action is granted by the
                      Kibana privileges [lists-read]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Get value lists
      tags:
        - Security Lists API
  /api/lists/index:
    delete:
      description: Delete the `.lists` and `.items` data streams.
      operationId: DeleteListIndex
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                required:
                  - acknowledged
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List data stream not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Delete value list data streams
      tags:
        - Security Lists API
    get:
      description: Verify that `.lists` and `.items` data streams exist.
      operationId: ReadListIndex
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  list_index:
                    type: boolean
                  list_item_index:
                    type: boolean
                required:
                  - list_index
                  - list_item_index
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List data stream(s) not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Get status of value list data streams
      tags:
        - Security Lists API
    post:
      description: Create `.lists` and `.items` data streams in the relevant space.
      operationId: CreateListIndex
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                required:
                  - acknowledged
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '409':
          content:
            application/json:
              examples:
                alreadyExists:
                  value:
                    message: >-
                      data stream: \".lists-default\" and \".items-default\"
                      already exists
                    status_code: 409
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List data stream exists response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Create list data streams
      tags:
        - Security Lists API
  /api/lists/items:
    delete:
      description: >-
        Delete a value list item using its `id`, or its `list_id` and `value`
        fields.
      operationId: DeleteListItem
      parameters:
        - description: >-
            Value list item's identifier. Required if `list_id` and `value` are
            not specified.
          in: query
          name: id
          required: false
          schema:
            $ref: '#/components/schemas/ListItemId'
        - description: Value list's identifier. Required if `id` is not specified.
          in: query
          name: list_id
          required: false
          schema:
            $ref: '#/components/schemas/ListId'
        - description: >-
            The value used to evaluate exceptions. Required if `id` is not
            specified.
          in: query
          name: value
          required: false
          schema:
            example: 255.255.255.255
            type: string
        - description: >-
            Determines when changes made by the request are made visible to
            search.
          in: query
          name: refresh
          required: false
          schema:
            default: 'false'
            enum:
              - 'true'
              - 'false'
              - wait_for
            example: false
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                ip:
                  value:
                    _version: WzIwLDFd
                    '@timestamp': 2025-01-08T05:15:05.159Z
                    created_at: 2025-01-08T05:15:05.159Z
                    created_by: elastic
                    id: pd1WRJQBs4HAK3VQeHFI
                    list_id: ip_list
                    tie_breaker_id: eee41dc7-1666-4876-982f-8b0f7b59eca3
                    type: ip
                    updated_at: 2025-01-08T05:44:14.009Z
                    updated_by: elastic
                    value: 255.255.255.255
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ListItem'
                  - items:
                      $ref: '#/components/schemas/ListItem'
                    type: array
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    message: >-
                      Either \"list_id\" or \"id\" needs to be defined in the
                      request
                    status_code: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [DELETE /api/lists/items?id=pd1WRJQBs4HAK3VQeHFI] is
                      unauthorized for user, this action is granted by the
                      Kibana privileges [lists-all]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              examples:
                notFound:
                  value:
                    message: 'list item with id: \"pd1WRJQBs4HAK3VQeHFI\" not found'
                    status_code: 404
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List item not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Delete a value list item
      tags:
        - Security Lists API
    get:
      description: Get the details of a value list item.
      operationId: ReadListItem
      parameters:
        - description: >-
            Value list item identifier. Required if `list_id` and `value` are
            not specified.
          in: query
          name: id
          required: false
          schema:
            $ref: '#/components/schemas/ListId'
        - description: >-
            Value list item list's `id` identfier. Required if `id` is not
            specified.
          in: query
          name: list_id
          required: false
          schema:
            $ref: '#/components/schemas/ListId'
        - description: >-
            The value used to evaluate exceptions. Required if `id` is not
            specified.
          in: query
          name: value
          required: false
          schema:
            example: 127.0.0.2
            type: string
      responses:
        '200':
          content:
            application/json:
              examples:
                ip:
                  value:
                    _version: WzExLDFd
                    '@timestamp': 2025-01-08T05:16:25.882Z
                    created_at: 2025-01-08T05:16:25.882Z
                    created_by: elastic
                    id: qN1XRJQBs4HAK3VQs3Gc
                    list_id: ip_list
                    tie_breaker_id: a9a34c02-a385-436e-86a0-02a3942f3537
                    type: ip
                    updated_at: 2025-01-08T05:16:25.882Z
                    updated_by: elastic
                    value: 127.0.0.2
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ListItem'
                  - items:
                      $ref: '#/components/schemas/ListItem'
                    type: array
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    message: >-
                      Either \"list_id\" or \"id\" needs to be defined in the
                      request
                    status_code: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [GET /api/lists/items?id=qN1XRJQBs4HAK3VQs3Gc] is
                      unauthorized for user, this action is granted by the
                      Kibana privileges [lists-read]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              examples:
                notFound:
                  value:
                    message: 'list item id: \"foo\" not found'
                    status_code: 404
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List item not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Get a value list item
      tags:
        - Security Lists API
    patch:
      description: >-
        Update specific fields of an existing value list item using the item
        `id`.
      operationId: PatchListItem
      requestBody:
        content:
          application/json:
            schema:
              example:
                id: pd1WRJQBs4HAK3VQeHFI
                value: 255.255.255.255
              type: object
              properties:
                _version:
                  $ref: '#/components/schemas/ListVersionId'
                id:
                  $ref: '#/components/schemas/ListItemId'
                meta:
                  $ref: '#/components/schemas/ListItemMetadata'
                refresh:
                  description: >-
                    Determines when changes made by the request are made visible
                    to search.
                  enum:
                    - 'true'
                    - 'false'
                    - wait_for
                  type: string
                value:
                  $ref: '#/components/schemas/ListItemValue'
              required:
                - id
        description: Value list item's properties
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                ipItem:
                  value:
                    _version: WzE5LDFd
                    '@timestamp': 2025-01-08T05:15:05.159Z
                    created_at: 2025-01-08T05:15:05.159Z
                    created_by: elastic
                    id: pd1WRJQBs4HAK3VQeHFI
                    list_id: ip_list
                    tie_breaker_id: eee41dc7-1666-4876-982f-8b0f7b59eca3
                    type: ip
                    updated_at: 2025-01-08T05:23:37.602Z
                    updated_by: elastic
                    value: 255.255.255.255
              schema:
                $ref: '#/components/schemas/ListItem'
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    message: >-
                      {"took":15,"timed_out":false,"total":1,"updated":0,"deleted":0,"batches":1,"version_conflicts":0,"noops":0,"retries":{"bulk":0,"search":0},"throttled_millis":0,"requests_per_second":-1,"throttled_until_millis":0,"failures":[{"index":".ds-.items-default-2025.01.09-000001","id":"ip_item","cause":{"type":"document_parsing_exception","reason":"[1:107]
                      failed to parse field [ip] of type [ip] in document with
                      id ip_item. Preview of fields value:
                      2","caused_by":{"type":"illegal_argument_exception","reason":"2
                      is not an IP string literal."}},"status":400}]}
                    status_code: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [PATCH /api/lists/items] is unauthorized for user,
                      this action is granted by the Kibana privileges
                      [lists-all]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              examples:
                notFound:
                  value:
                    message: 'list item id: \"foo\" not found'
                    status_code: 404
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List item not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Patch a value list item
      tags:
        - Security Lists API
    post:
      description: >
        Create a value list item and associate it with the specified value list.


        All value list items in the same list must be the same type. For
        example, each list item in an `ip` list must define a specific IP
        address.

        > info

        > Before creating a list item, you must create a list.
      operationId: CreateListItem
      requestBody:
        content:
          application/json:
            examples:
              ip:
                value:
                  list_id: ip_list
                  value: 127.0.0.1
              ip_range:
                value:
                  list_id: ip_range_list
                  value: 192.168.0.0/16
              keyword:
                value:
                  list_id: keyword_list
                  value: zeek
            schema:
              type: object
              properties:
                id:
                  $ref: '#/components/schemas/ListItemId'
                list_id:
                  $ref: '#/components/schemas/ListId'
                meta:
                  $ref: '#/components/schemas/ListItemMetadata'
                refresh:
                  description: >-
                    Determines when changes made by the request are made visible
                    to search.
                  enum:
                    - 'true'
                    - 'false'
                    - wait_for
                  example: wait_for
                  type: string
                value:
                  $ref: '#/components/schemas/ListItemValue'
              required:
                - list_id
                - value
        description: Value list item's properties
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                ip:
                  value:
                    _version: WzAsMV0=
                    '@timestamp': 2025-01-08T04:59:06.154Z
                    created_at: 2025-01-08T04:59:06.154Z
                    created_by: elastic
                    id: 21b01cfb-058d-44b9-838c-282be16c91cc
                    list_id: ip_list
                    tie_breaker_id: b57c762c-3036-465c-9bfb-7bfb5e6e515a
                    type: ip
                    updated_at: 2025-01-08T04:59:06.154Z
                    updated_by: elastic
                    value: 127.0.0.1
                ip_range:
                  value:
                    _version: WzEsMV0=
                    '@timestamp': 2025-01-09T18:33:08.202Z
                    created_at: 2025-01-09T18:33:08.202Z
                    created_by: elastic
                    id: ip_range_item
                    list_id: ip_range_list
                    tie_breaker_id: ea1b4189-efda-4637-b8f9-74655a5ebb61
                    type: ip_range
                    updated_at: 2025-01-09T18:33:08.202Z
                    updated_by: elastic
                    value: 192.168.0.0/16
                keyword:
                  value:
                    _version: WzIsMV0=
                    '@timestamp': 2025-01-09T18:34:29.422Z
                    created_at: 2025-01-09T18:34:29.422Z
                    created_by: elastic
                    id: 7f24737d-1da8-4626-a568-33070591bb4e
                    list_id: keyword_list
                    tie_breaker_id: 2108ced2-5e5d-401e-a88e-4dd69fc5fa27
                    type: keyword
                    updated_at: 2025-01-09T18:34:29.422Z
                    updated_by: elastic
                    value: zeek
              schema:
                $ref: '#/components/schemas/ListItem'
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error: Bad Request
                    message: >-
                      uri [/api/lists/items] with method [post] exists but is
                      not available with the current configuration
                    statusCode: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [POST /api/lists/items] is unauthorized for user, this
                      action is granted by the Kibana privileges [lists-all]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              examples:
                listNotFound:
                  value:
                    message: 'list id: \"ip_list\" does not exist'
                    status_code: 404
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '409':
          content:
            application/json:
              examples:
                alreadyExists:
                  value:
                    message: 'list item id: \"ip_item\" already exists'
                    status_code: 409
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List item already exists response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Create a value list item
      tags:
        - Security Lists API
    put:
      description: >
        Update a value list item using the list item ID. The original list item
        is replaced, and all unspecified fields are deleted.

        > info

        > You cannot modify the `id` value.
      operationId: UpdateListItem
      requestBody:
        content:
          application/json:
            example:
              id: ip_item
              value: 255.255.255.255
            schema:
              type: object
              properties:
                _version:
                  $ref: '#/components/schemas/ListVersionId'
                id:
                  $ref: '#/components/schemas/ListItemId'
                meta:
                  $ref: '#/components/schemas/ListItemMetadata'
                value:
                  $ref: '#/components/schemas/ListItemValue'
              required:
                - id
                - value
        description: Value list item's properties
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                ip:
                  value:
                    _version: WzIwLDFd
                    '@timestamp': 2025-01-08T05:15:05.159Z
                    created_at: 2025-01-08T05:15:05.159Z
                    created_by: elastic
                    id: pd1WRJQBs4HAK3VQeHFI
                    list_id: ip_list
                    tie_breaker_id: eee41dc7-1666-4876-982f-8b0f7b59eca3
                    type: ip
                    updated_at: 2025-01-08T05:44:14.009Z
                    updated_by: elastic
                    value: 255.255.255.255
              schema:
                $ref: '#/components/schemas/ListItem'
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error: Bad Request
                    message: '[request body]: id: Expected string, received number'
                    statusCode: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [PATCH /api/lists/items] is unauthorized for user,
                      this action is granted by the Kibana privileges
                      [lists-all]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              examples:
                notFound:
                  value:
                    message: 'list item id: \"foo\" not found'
                    status_code: 404
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List item not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Update a value list item
      tags:
        - Security Lists API
  /api/lists/items/_export:
    post:
      description: Export list item values from the specified value list.
      operationId: ExportListItems
      parameters:
        - description: Value list's `id` to export.
          in: query
          name: list_id
          required: true
          schema:
            $ref: '#/components/schemas/ListId'
      responses:
        '200':
          content:
            application/ndjson:
              schema:
                description: A `.txt` file containing list items from the specified list
                example: |
                  127.0.0.1
                  127.0.0.2
                  127.0.0.3
                  127.0.0.4
                  127.0.0.5
                  127.0.0.6
                  127.0.0.7
                  127.0.0.8
                  127.0.0.9
                format: binary
                type: string
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error: 'Bad Request","message":"[request query]: list_id: Required'
                    statusCode: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [POST /api/lists/items/_export?list_id=ips.txt] is
                      unauthorized for user, this action is granted by the
                      Kibana privileges [lists-read]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List not found response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Export value list items
      tags:
        - Security Lists API
  /api/lists/items/_find:
    get:
      description: Get all value list items in the specified list.
      operationId: FindListItems
      parameters:
        - in: query
          name: list_id
          required: true
          schema:
            $ref: '#/components/schemas/ListId'
        - description: The page number to return.
          in: query
          name: page
          required: false
          schema:
            example: 1
            type: integer
        - description: The number of list items to return per page.
          in: query
          name: per_page
          required: false
          schema:
            example: 20
            type: integer
        - description: Determines which field is used to sort the results.
          in: query
          name: sort_field
          required: false
          schema:
            example: value
            format: nonempty
            minLength: 1
            type: string
        - description: Determines the sort order, which can be `desc` or `asc`
          in: query
          name: sort_order
          required: false
          schema:
            enum:
              - desc
              - asc
            example: asc
            type: string
        - in: query
          name: cursor
          required: false
          schema:
            $ref: '#/components/schemas/FindListItemsCursor'
        - description: >
            Filters the returned results according to the value of the specified
            field,

            using the <field name>:<field value> syntax.
          in: query
          name: filter
          required: false
          schema:
            $ref: '#/components/schemas/FindListItemsFilter'
      responses:
        '200':
          content:
            application/json:
              examples:
                ip:
                  value:
                    cursor: >-
                      WzIwLFsiYjU3Yzc2MmMtMzAzNi00NjVjLTliZmItN2JmYjVlNmU1MTVhIl1d
                    data:
                      - _version: WzAsMV0=
                        '@timestamp': 2025-01-08T04:59:06.154Z
                        created_at: 2025-01-08T04:59:06.154Z
                        created_by: elastic
                        id: 21b01cfb-058d-44b9-838c-282be16c91cc
                        list_id: ip_list
                        tie_breaker_id: b57c762c-3036-465c-9bfb-7bfb5e6e515a
                        type: ip
                        updated_at: 2025-01-08T04:59:06.154Z
                        updated_by: elastic
                        value: 127.0.0.1
                    page: 1
                    per_page: 20
                    total: 1
              schema:
                type: object
                properties:
                  cursor:
                    $ref: '#/components/schemas/FindListItemsCursor'
                  data:
                    items:
                      $ref: '#/components/schemas/ListItem'
                    type: array
                  page:
                    minimum: 0
                    type: integer
                  per_page:
                    minimum: 0
                    type: integer
                  total:
                    minimum: 0
                    type: integer
                required:
                  - data
                  - page
                  - per_page
                  - total
                  - cursor
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error: Bad Request,
                    message: '[request query]: list_id: Required'
                    statusCode: 400,
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [GET
                      /api/lists/items/_find?list_id=ip_list&page=1&per_page=20]
                      is unauthorized for user, this action is granted by the
                      Kibana privileges [lists-read]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Get value list items
      tags:
        - Security Lists API
  /api/lists/items/_import:
    post:
      description: >
        Import value list items from a TXT or CSV file. The maximum file size is
        9 million bytes.


        You can import items to a new or existing list.
      operationId: ImportListItems
      parameters:
        - description: |
            List's id.

            Required when importing to an existing list.
          in: query
          name: list_id
          required: false
          schema:
            $ref: '#/components/schemas/ListId'
        - description: |
            Type of the importing list.

            Required when importing a new list whose list `id` is not specified.
          examples:
            ip:
              value: ip
          in: query
          name: type
          required: false
          schema:
            $ref: '#/components/schemas/ListType'
        - description: >
            Determines how uploaded list item values are parsed. By default,
            list items are parsed using these named regex groups:


            - `(?<value>.+)` - Single value item types, such as ip, long, date,
            keyword, and text.

            - `(?<gte>.+)-(?<lte>.+)|(?<value>.+)` - Range value item types,
            such as `date_range`, `ip_range`, `double_range`, `float_range`,
            `integer_range`, and `long_range`.
          in: query
          name: serializer
          required: false
          schema:
            example: >-
              (?<value>((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))
            type: string
        - description: >
            Determines how retrieved list item values are presented. By default
            list items are presented using these Handelbar expressions:


            - `{{{value}}}` - Single value item types, such as `ip`, `long`,
            `date`, `keyword`, and `text`.

            - `{{{gte}}}-{{{lte}}}` - Range value item types, such as
            `ip_range`, `double_range`, `float_range`, `integer_range`, and
            `long_range`.

            - `{{{gte}}},{{{lte}}}` - Date range values.
          in: query
          name: deserializer
          required: false
          schema:
            example: '{{value}}'
            type: string
        - description: >-
            Determines when changes made by the request are made visible to
            search.
          in: query
          name: refresh
          required: false
          schema:
            enum:
              - 'true'
              - 'false'
              - wait_for
            example: true
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: >-
                    A `.txt` or `.csv` file containing newline separated list
                    items.
                  example: |
                    127.0.0.1
                    127.0.0.2
                    127.0.0.3
                    127.0.0.4
                    127.0.0.5
                    127.0.0.6
                    127.0.0.7
                    127.0.0.8
                    127.0.0.9
                  format: binary
                  type: string
        required: true
      responses:
        '200':
          content:
            application/json:
              examples:
                ip:
                  value:
                    _version: WzAsMV0=
                    '@timestamp': 2025-01-08T04:47:34.273Z
                    created_at: 2025-01-08T04:47:34.273Z
                    created_by: elastic
                    description: This list describes bad internet ip
                    id: ip_list
                    immutable: false
                    name: Simple list with an ip
                    tie_breaker_id: f5508188-b1e9-4e6e-9662-d039a7d89899
                    type: ip
                    updated_at: 2025-01-08T04:47:34.273Z
                    updated_by: elastic
                    version: 1
              schema:
                $ref: '#/components/schemas/List'
          description: Successful response
        '400':
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    message: Either type or list_id need to be defined in the query
                    status_code: 400
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [POST /api/lists/items/_import?list_id=ip_list] is
                      unauthorized for user, this action is granted by the
                      Kibana privileges [lists-all]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: List with specified list_id does not exist response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Import value list items
      tags:
        - Security Lists API
  /api/lists/privileges:
    get:
      operationId: ReadListPrivileges
      responses:
        '200':
          content:
            application/json:
              examples:
                privileges:
                  value:
                    is_authenticated: true
                    listItems:
                      application: {}
                      cluster:
                        all: true
                        manage: true
                        manage_api_key: true
                        manage_index_templates: true
                        manage_ml: true
                        manage_own_api_key: true
                        manage_pipeline: true
                        manage_security: true
                        manage_transform: true
                        monitor: true
                        monitor_ml: true
                        monitor_transform: true
                      has_all_requested: true
                      index:
                        .items-default:
                          all: true
                          create: true
                          create_doc: true
                          create_index: true
                          delete: true
                          delete_index: true
                          index: true
                          maintenance: true
                          manage: true
                          monitor: true
                          read: true
                          view_index_metadata: true
                          write: true
                      username: elastic
                    lists:
                      application: {}
                      cluster:
                        all: true
                        manage: true
                        manage_api_key: true
                        manage_index_templates: true
                        manage_ml: true
                        manage_own_api_key: true
                        manage_pipeline: true
                        manage_security: true
                        manage_transform: true
                        monitor: true
                        monitor_ml: true
                        monitor_transform: true
                      has_all_requested: true
                      index:
                        .lists-default:
                          all: true
                          create: true
                          create_doc: true
                          create_index: true
                          delete: true
                          delete_index: true
                          index: true
                          maintenance: true
                          manage: true
                          monitor: true
                          read: true
                          view_index_metadata: true
                          write: true
                      username: elastic
              schema:
                type: object
                properties:
                  is_authenticated:
                    type: boolean
                  listItems:
                    $ref: '#/components/schemas/ListItemPrivileges'
                  lists:
                    $ref: '#/components/schemas/ListPrivileges'
                required:
                  - lists
                  - listItems
                  - is_authenticated
          description: Successful response
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PlatformErrorResponse'
                  - $ref: '#/components/schemas/SiemErrorResponse'
          description: Invalid input data response
        '401':
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Unauthorized
                    message: >-
                      [security_exception\n\tRoot
                      causes:\n\t\tsecurity_exception: unable to authenticate
                      user [elastic] for REST request
                      [/_security/_authenticate]]: unable to authenticate user
                      [elastic] for REST request [/_security/_authenticate]
                    statusCode: 401
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Unsuccessful authentication response
        '403':
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Forbidden
                    message: >-
                      API [GET /api/lists/privileges] is unauthorized for user,
                      this action is granted by the Kibana privileges
                      [lists-read]
                    statusCode: 403
              schema:
                $ref: '#/components/schemas/PlatformErrorResponse'
          description: Not enough privileges response
        '500':
          content:
            application/json:
              examples:
                serverError:
                  value:
                    message: Internal Server Error
                    status_code: 500
              schema:
                $ref: '#/components/schemas/SiemErrorResponse'
          description: Internal server error response
      summary: Get value list privileges
      tags:
        - Security Lists API
components:
  schemas:
    FindListItemsCursor:
      description: >-
        Returns the items that come after the last item returned in the previous
        call (use the `cursor` value returned in the previous call). This
        parameter uses the `tie_breaker_id` field to ensure all items are sorted
        and returned correctly.
      example: WzIwLFsiYjU3Yzc2MmMtMzAzNi00NjVjLTliZmItN2JmYjVlNmU1MTVhIl1d
      format: nonempty
      minLength: 1
      type: string
    FindListItemsFilter:
      example: value:127.0.0.1
      type: string
    FindListsCursor:
      example: WzIwLFsiYjU3Yzc2MmMtMzAzNi00NjVjLTliZmItN2JmYjVlNmU1MTVhIl1d
      format: nonempty
      minLength: 1
      type: string
    FindListsFilter:
      example: value:127.0.0.1
      type: string
    List:
      type: object
      properties:
        _version:
          $ref: '#/components/schemas/ListVersionId'
        '@timestamp':
          example: 2025-01-08T04:47:34.273Z
          format: date-time
          type: string
        created_at:
          description: Autogenerated date of object creation.
          example: 2025-01-08T04:47:34.273Z
          format: date-time
          type: string
        created_by:
          description: Autogenerated value - user that created object.
          example: elastic
          type: string
        description:
          $ref: '#/components/schemas/ListDescription'
        deserializer:
          $ref: '#/components/schemas/ListDeserializer'
        id:
          $ref: '#/components/schemas/ListId'
        immutable:
          type: boolean
        meta:
          $ref: '#/components/schemas/ListMetadata'
        name:
          $ref: '#/components/schemas/ListName'
        serializer:
          $ref: '#/components/schemas/ListSerializer'
        tie_breaker_id:
          description: >-
            Field used in search to ensure all containers are sorted and
            returned correctly.
          example: f5508188-b1e9-4e6e-9662-d039a7d89899
          type: string
        type:
          $ref: '#/components/schemas/ListType'
        updated_at:
          description: Autogenerated date of last object update.
          example: 2025-01-08T04:47:34.273Z
          format: date-time
          type: string
        updated_by:
          description: Autogenerated value - user that last updated object.
          example: elastic
          type: string
        version:
          $ref: '#/components/schemas/ListVersion'
      required:
        - id
        - type
        - name
        - description
        - immutable
        - version
        - tie_breaker_id
        - created_at
        - created_by
        - updated_at
        - updated_by
    ListDescription:
      description: Describes the value list.
      format: nonempty
      minLength: 1
      type: string
    ListDeserializer:
      description: >
        Determines how retrieved list item values are presented. By default list
        items are presented using these Handelbar expressions:


        - `{{{value}}}` - Single value item types, such as `ip`, `long`, `date`,
        `keyword`, and `text`.

        - `{{{gte}}}-{{{lte}}}` - Range value item types, such as `ip_range`,
        `double_range`, `float_range`, `integer_range`, and `long_range`.

        - `{{{gte}}},{{{lte}}}` - Date range values.
      example: '{{value}}'
      type: string
    ListId:
      description: Value list's identifier.
      example: 21b01cfb-058d-44b9-838c-282be16c91cd
      format: nonempty
      minLength: 1
      type: string
    ListItem:
      type: object
      properties:
        _version:
          $ref: '#/components/schemas/ListVersionId'
        '@timestamp':
          example: 2025-01-08T04:47:34.273Z
          format: date-time
          type: string
        created_at:
          description: Autogenerated date of object creation.
          example: 2025-01-08T04:47:34.273Z
          format: date-time
          type: string
        created_by:
          description: Autogenerated value - user that created object.
          example: elastic
          type: string
        deserializer:
          $ref: '#/components/schemas/ListDeserializer'
        id:
          $ref: '#/components/schemas/ListItemId'
        list_id:
          $ref: '#/components/schemas/ListId'
        meta:
          $ref: '#/components/schemas/ListItemMetadata'
        serializer:
          $ref: '#/components/schemas/ListSerializer'
        tie_breaker_id:
          description: >-
            Field used in search to ensure all containers are sorted and
            returned correctly.
          example: f5508188-b1e9-4e6e-9662-d039a7d89899
          type: string
        type:
          $ref: '#/components/schemas/ListType'
        updated_at:
          description: Autogenerated date of last object update.
          example: 2025-01-08T04:47:34.273Z
          format: date-time
          type: string
        updated_by:
          description: Autogenerated value - user that last updated object.
          example: elastic
          type: string
        value:
          $ref: '#/components/schemas/ListItemValue'
      required:
        - id
        - type
        - list_id
        - value
        - tie_breaker_id
        - created_at
        - created_by
        - updated_at
        - updated_by
    ListItemId:
      description: Value list item's identifier.
      example: 54b01cfb-058d-44b9-838c-282be16c91cd
      format: nonempty
      minLength: 1
      type: string
    ListItemMetadata:
      additionalProperties: true
      description: Placeholder for metadata about the value list item.
      type: object
    ListItemPrivileges:
      type: object
      properties:
        application:
          additionalProperties:
            type: boolean
          type: object
        cluster:
          additionalProperties:
            type: boolean
          type: object
        has_all_requested:
          type: boolean
        index:
          additionalProperties:
            additionalProperties:
              type: boolean
            type: object
          type: object
        username:
          type: string
      required:
        - username
        - has_all_requested
        - cluster
        - index
        - application
    ListItemValue:
      description: The value used to evaluate exceptions.
      format: nonempty
      minLength: 1
      type: string
    ListMetadata:
      additionalProperties: true
      description: Placeholder for metadata about the value list.
      type: object
    ListName:
      description: Value list's name.
      example: List of bad IPs
      format: nonempty
      minLength: 1
      type: string
    ListPrivileges:
      type: object
      properties:
        application:
          additionalProperties:
            type: boolean
          type: object
        cluster:
          additionalProperties:
            type: boolean
          type: object
        has_all_requested:
          type: boolean
        index:
          additionalProperties:
            additionalProperties:
              type: boolean
            type: object
          type: object
        username:
          type: string
      required:
        - username
        - has_all_requested
        - cluster
        - index
        - application
    ListSerializer:
      description: >
        Determines how uploaded list item values are parsed. By default, list
        items are parsed using these named regex groups:


        - `(?<value>.+)` - Single value item types, such as ip, long, date,
        keyword, and text.

        - `(?<gte>.+)-(?<lte>.+)|(?<value>.+)` - Range value item types, such as
        `date_range`, `ip_range`, `double_range`, `float_range`,
        `integer_range`, and `long_range`.
      example: >-
        (?<value>((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))
      type: string
    ListType:
      description: >
        Specifies the Elasticsearch data type of excludes the list container
        holds. Some common examples:


        - `keyword`: Many ECS fields are Elasticsearch keywords

        - `ip`: IP addresses

        - `ip_range`: Range of IP addresses (supports IPv4, IPv6, and CIDR
        notation)
      enum:
        - binary
        - boolean
        - byte
        - date
        - date_nanos
        - date_range
        - double
        - double_range
        - float
        - float_range
        - geo_point
        - geo_shape
        - half_float
        - integer
        - integer_range
        - ip
        - ip_range
        - keyword
        - long
        - long_range
        - shape
        - short
        - text
      type: string
    ListVersion:
      description: The document version number.
      example: 1
      minimum: 1
      type: integer
    ListVersionId:
      description: >
        The version id, normally returned by the API when the document is
        retrieved. Use it ensure updates are done against the latest version.
      example: WzIsMV0=
      type: string
    PlatformErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        statusCode:
          type: integer
      required:
        - statusCode
        - error
        - message
    SiemErrorResponse:
      type: object
      properties:
        message:
          type: string
        status_code:
          type: integer
      required:
        - status_code
        - message
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
security:
  - BasicAuth: []
tags:
  - description: >
      Lists can be used with detection rule exceptions to define values that
      prevent a rule from generating alerts.


      Lists are made up of:


      * **List containers**: A container for values of the same Elasticsearch
      data type. The following data types can be used:
          * `boolean`
          * `byte`
          * `date`
          * `date_nanos`
          * `date_range`
          * `double`
          * `double_range`
          * `float`
          * `float_range`
          * `half_float`
          * `integer`
          * `integer_range`
          * `ip`
          * `ip_range`
          * `keyword`
          * `long`
          * `long_range`
          * `short`
          * `text`
      * **List items**: The values used to determine whether the exception
      prevents an alert from being generated.


      All list items in the same list container must be of the same data type,
      and each item defines a single value. For example, an IP list container
      named `internal-ip-addresses-southport` contains five items, where each
      item defines one internal IP address:

      1. `192.168.1.1`

      2. `192.168.1.3`

      3. `192.168.1.18`

      4. `192.168.1.12`

      5. `192.168.1.7`


      To use these IP addresses as values for defining rule exceptions, use the
      Security exceptions API to [create an exception list
      item](../operation/operation-createexceptionlistitem) that references the
      `internal-ip-addresses-southport` list.

      > info

      > Lists cannot be added directly to rules, nor do they define the
      operators used to determine when exceptions are applied (`is in list`, `is
      not in list`). Use an exception item to define the operator and associate
      it with an [exception
      container](../operation/operation-createexceptionlist). You can then add
      the exception container to a rule's `exceptions_list` object.


      ## Lists requirements


      Before you can start using lists, you must create the `.lists` and
      `.items` data streams for the relevant Kibana space. To do this, use the
      [Create list data streams](../operation/operation-createlistindex)
      endpoint. Once these data streams are created, your role needs privileges
      to manage rules. Refer to [Enable and access
      detections](https://www.elastic.co/guide/en/serverless/current/security-detections-requirements.html#enable-detections-ui)
      for a complete list of requirements.
    name: Security Lists API
    x-displayName: Security lists
