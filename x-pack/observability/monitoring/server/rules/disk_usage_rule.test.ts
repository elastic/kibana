/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { DiskUsageRule } from './disk_usage_rule';
import { RULE_DISK_USAGE } from '../../common/constants';
import { fetchDiskUsageNodeStats } from '../lib/alerts/fetch_disk_usage_node_stats';
import { fetchClusters } from '../lib/alerts/fetch_clusters';
import { alertsMock } from '@kbn/alerting-plugin/server/mocks';
import { ALERT_REASON } from '@kbn/rule-data-utils';

type IDiskUsageAlertMock = DiskUsageRule & {
  defaultParams: {
    threshold: number;
    duration: string;
  };
} & {
  actionVariables: Array<{
    name: string;
    description: string;
  }>;
};

const RealDate = Date;

jest.mock('../lib/alerts/fetch_disk_usage_node_stats', () => ({
  fetchDiskUsageNodeStats: jest.fn(),
}));
jest.mock('../lib/alerts/fetch_clusters', () => ({
  fetchClusters: jest.fn(),
}));

jest.mock('../static_globals', () => ({
  Globals: {
    app: {
      getLogger: () => ({ debug: jest.fn() }),
      url: 'http://localhost:5601',
      config: {
        ui: {
          ccs: { enabled: true },
          container: { elasticsearch: { enabled: false } },
        },
      },
    },
  },
}));

describe('DiskUsageRule', () => {
  it('should have defaults', () => {
    const alert = new DiskUsageRule() as IDiskUsageAlertMock;
    expect(alert.ruleOptions.id).toBe(RULE_DISK_USAGE);
    expect(alert.ruleOptions.name).toBe('Disk Usage');
    expect(alert.ruleOptions.throttle).toBe('1d');
    expect(alert.ruleOptions.defaultParams).toStrictEqual({ threshold: 80, duration: '5m' });
    expect(alert.ruleOptions.actionVariables).toStrictEqual([
      { name: 'node', description: 'The node reporting high disk usage.' },
      {
        name: 'internalShortMessage',
        description: 'The short internal message generated by Elastic.',
      },
      {
        name: 'internalFullMessage',
        description: 'The full internal message generated by Elastic.',
      },
      { name: 'state', description: 'The current state of the alert.' },
      { name: 'clusterName', description: 'The cluster to which the node(s) belongs.' },
      { name: 'action', description: 'The recommended action for this alert.' },
      {
        name: 'actionPlain',
        description: 'The recommended action for this alert, without any markdown.',
      },
    ]);
  });

  describe('execute', () => {
    const FakeDate = function () {};
    FakeDate.prototype.valueOf = () => 1;

    const clusterUuid = 'abc123';
    const clusterName = 'testCluster';
    const nodeId = 'myNodeId';
    const nodeName = 'myNodeName';
    const diskUsage = 91;
    const stat = {
      clusterUuid,
      nodeId,
      nodeName,
      diskUsage,
    };

    const services = alertsMock.createRuleExecutorServices();
    const executorOptions = { services, state: {} };

    beforeEach(() => {
      Date = FakeDate as DateConstructor;
      (fetchDiskUsageNodeStats as jest.Mock).mockImplementation(() => {
        return [stat];
      });
      (fetchClusters as jest.Mock).mockImplementation(() => {
        return [{ clusterUuid, clusterName }];
      });
    });

    afterEach(() => {
      Date = RealDate;
      jest.resetAllMocks();
    });

    it('should fire action', async () => {
      const rule = new DiskUsageRule() as IDiskUsageAlertMock;
      const type = rule.getRuleType();
      await type.executor({
        ...executorOptions,
        params: rule.ruleOptions.defaultParams,
      } as any);
      const count = 1;
      expect(services.alertsClient.report).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.setAlertData).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.report).toHaveBeenCalledWith({
        id: 'myNodeId',
        actionGroup: 'default',
        state: {
          alertStates: [
            {
              ccs: undefined,
              cluster: {
                clusterName: 'testCluster',
                clusterUuid: 'abc123',
              },
              diskUsage: 91,
              itemLabel: undefined,
              meta: {
                clusterUuid: 'abc123',
                diskUsage: 91,
                nodeId: 'myNodeId',
                nodeName: 'myNodeName',
              },
              nodeId: 'myNodeId',
              nodeName: 'myNodeName',
              ui: {
                isFiring: true,
                lastCheckedMS: 0,
                message: {
                  nextSteps: [
                    {
                      text: '#start_linkTune for disk usage#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/elasticsearch/reference/{docLinkVersion}/tune-for-disk-usage.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkIdentify large indices#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          startToken: '#start_link',
                          type: 'link',
                          url: 'elasticsearch/indices',
                        },
                      ],
                    },
                    {
                      text: '#start_linkImplement ILM policies#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/elasticsearch/reference/{docLinkVersion}/index-lifecycle-management.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkAdd more data nodes#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/elasticsearch/reference/{docLinkVersion}/add-elasticsearch-nodes.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkResize your deployment (ECE)#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/cloud-enterprise/current/ece-resize-deployment.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                  ],
                  text: 'Node #start_linkmyNodeName#end_link is reporting disk usage of 91% at #absolute',
                  tokens: [
                    {
                      isAbsolute: true,
                      isRelative: false,
                      startToken: '#absolute',
                      timestamp: 1,
                      type: 'time',
                    },
                    {
                      endToken: '#end_link',
                      startToken: '#start_link',
                      type: 'link',
                      url: 'elasticsearch/nodes/myNodeId',
                    },
                  ],
                },
                severity: 'danger',
                triggeredMS: 1,
              },
            },
          ],
        },
      });
      expect(services.alertsClient.setAlertData).toHaveBeenCalledWith({
        id: 'myNodeId',
        context: {
          internalFullMessage: `Disk usage alert is firing for node ${nodeName} in cluster: ${clusterName}. [View node](http://localhost:5601/app/monitoring#/elasticsearch/nodes/${nodeId}?_g=(cluster_uuid:${clusterUuid}))`,
          internalShortMessage: `Disk usage alert is firing for node ${nodeName} in cluster: ${clusterName}. Verify disk usage level of node.`,
          action: `[View node](http://localhost:5601/app/monitoring#/elasticsearch/nodes/${nodeId}?_g=(cluster_uuid:${clusterUuid}))`,
          actionPlain: 'Verify disk usage level of node.',
          clusterName,
          count,
          nodes: `${nodeName}:${diskUsage}`,
          node: `${nodeName}:${diskUsage}`,
          state: 'firing',
        },
        payload: {
          [ALERT_REASON]: `Disk usage alert is firing for node ${nodeName} in cluster: ${clusterName}. Verify disk usage level of node.`,
        },
      });
    });

    it('should handle ccs', async () => {
      const ccs = 'testCluster';
      (fetchDiskUsageNodeStats as jest.Mock).mockImplementation(() => {
        return [
          {
            ...stat,
            ccs,
          },
        ];
      });
      const rule = new DiskUsageRule() as IDiskUsageAlertMock;
      const type = rule.getRuleType();
      await type.executor({
        ...executorOptions,
        params: rule.ruleOptions.defaultParams,
      } as any);
      const count = 1;
      expect(services.alertsClient.report).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.setAlertData).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.report).toHaveBeenCalledWith({
        id: 'myNodeId',
        actionGroup: 'default',
        state: {
          alertStates: [
            {
              ccs: 'testCluster',
              cluster: {
                clusterName: 'testCluster',
                clusterUuid: 'abc123',
              },
              diskUsage: 91,
              itemLabel: undefined,
              meta: {
                ccs: 'testCluster',
                clusterUuid: 'abc123',
                diskUsage: 91,
                nodeId: 'myNodeId',
                nodeName: 'myNodeName',
              },
              nodeId: 'myNodeId',
              nodeName: 'myNodeName',
              ui: {
                isFiring: true,
                lastCheckedMS: 0,
                message: {
                  nextSteps: [
                    {
                      text: '#start_linkTune for disk usage#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/elasticsearch/reference/{docLinkVersion}/tune-for-disk-usage.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkIdentify large indices#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          startToken: '#start_link',
                          type: 'link',
                          url: 'elasticsearch/indices',
                        },
                      ],
                    },
                    {
                      text: '#start_linkImplement ILM policies#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/elasticsearch/reference/{docLinkVersion}/index-lifecycle-management.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkAdd more data nodes#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/elasticsearch/reference/{docLinkVersion}/add-elasticsearch-nodes.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkResize your deployment (ECE)#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/cloud-enterprise/current/ece-resize-deployment.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                  ],
                  text: 'Node #start_linkmyNodeName#end_link is reporting disk usage of 91% at #absolute',
                  tokens: [
                    {
                      isAbsolute: true,
                      isRelative: false,
                      startToken: '#absolute',
                      timestamp: 1,
                      type: 'time',
                    },
                    {
                      endToken: '#end_link',
                      startToken: '#start_link',
                      type: 'link',
                      url: 'elasticsearch/nodes/myNodeId',
                    },
                  ],
                },
                severity: 'danger',
                triggeredMS: 1,
              },
            },
          ],
        },
      });
      expect(services.alertsClient.setAlertData).toHaveBeenCalledWith({
        id: 'myNodeId',
        context: {
          internalFullMessage: `Disk usage alert is firing for node ${nodeName} in cluster: ${clusterName}. [View node](http://localhost:5601/app/monitoring#/elasticsearch/nodes/${nodeId}?_g=(cluster_uuid:${clusterUuid},ccs:${ccs}))`,
          internalShortMessage: `Disk usage alert is firing for node ${nodeName} in cluster: ${clusterName}. Verify disk usage level of node.`,
          action: `[View node](http://localhost:5601/app/monitoring#/elasticsearch/nodes/myNodeId?_g=(cluster_uuid:abc123,ccs:testCluster))`,
          actionPlain: 'Verify disk usage level of node.',
          clusterName,
          count,
          nodes: `${nodeName}:${diskUsage}`,
          node: `${nodeName}:${diskUsage}`,
          state: 'firing',
        },
        payload: {
          [ALERT_REASON]: `Disk usage alert is firing for node ${nodeName} in cluster: ${clusterName}. Verify disk usage level of node.`,
        },
      });
    });
  });
});
