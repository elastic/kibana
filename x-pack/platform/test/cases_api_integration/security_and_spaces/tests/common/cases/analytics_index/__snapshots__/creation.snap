// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cases security and spaces enabled: basic Common analytics indexes creation activity index should be created with the correct mappings and scripts on startup 1`] = `
Object {
  "@timestamp": Object {
    "type": "date",
  },
  "action": Object {
    "type": "keyword",
  },
  "case_id": Object {
    "type": "keyword",
  },
  "created_at": Object {
    "type": "date",
  },
  "created_at_ms": Object {
    "type": "long",
  },
  "created_by": Object {
    "properties": Object {
      "email": Object {
        "type": "keyword",
      },
      "full_name": Object {
        "type": "keyword",
      },
      "profile_uid": Object {
        "type": "keyword",
      },
      "username": Object {
        "type": "keyword",
      },
    },
  },
  "owner": Object {
    "type": "keyword",
  },
  "payload": Object {
    "properties": Object {
      "category": Object {
        "type": "keyword",
      },
      "severity": Object {
        "type": "keyword",
      },
      "status": Object {
        "type": "keyword",
      },
      "tags": Object {
        "type": "keyword",
      },
    },
  },
  "space_ids": Object {
    "type": "keyword",
  },
  "type": Object {
    "type": "keyword",
  },
}
`;

exports[`cases security and spaces enabled: basic Common analytics indexes creation activity index should be created with the correct mappings and scripts on startup 2`] = `
Object {
  "lang": "painless",
  "source": "
    def source = [:];
    source.putAll(ctx._source);
    ctx._source.clear();

    ctx._source.action = source[\\"cases-user-actions\\"].action;
    ctx._source.type = source[\\"cases-user-actions\\"].type;

    long milliSinceEpoch = new Date().getTime();
    Instant instant = Instant.ofEpochMilli(milliSinceEpoch);
    ctx._source['@timestamp'] = ZonedDateTime.ofInstant(instant, ZoneId.of('Z'));

    ZonedDateTime zdt_created =
      ZonedDateTime.parse(source[\\"cases-user-actions\\"].created_at);
    ctx._source.created_at_ms = zdt_created.toInstant().toEpochMilli();
    ctx._source.created_at = source[\\"cases-user-actions\\"].created_at;

    if (source[\\"cases-user-actions\\"].created_by != null) {
        ctx._source.created_by = new HashMap();
        ctx._source.created_by.full_name = source[\\"cases-user-actions\\"].created_by.full_name;
        ctx._source.created_by.username = source[\\"cases-user-actions\\"].created_by.username;
        ctx._source.created_by.profile_uid = source[\\"cases-user-actions\\"].created_by.profile_uid;
        ctx._source.created_by.email = source[\\"cases-user-actions\\"].created_by.email;
    }

    if (source[\\"cases-user-actions\\"].payload != null) {
      ctx._source.payload = new HashMap();

      if (source[\\"cases-user-actions\\"].type == \\"severity\\" && source[\\"cases-user-actions\\"].payload.severity != null) {
        ctx._source.payload.severity = source[\\"cases-user-actions\\"].payload.severity;
      }

      if (source[\\"cases-user-actions\\"].type == \\"category\\" && source[\\"cases-user-actions\\"].payload.category != null) {
        ctx._source.payload.category = source[\\"cases-user-actions\\"].payload.category;
      }

      if (source[\\"cases-user-actions\\"].type == \\"status\\" && source[\\"cases-user-actions\\"].payload.status != null) {
        ctx._source.payload.status = source[\\"cases-user-actions\\"].payload.status;
      }

      if (source[\\"cases-user-actions\\"].type == \\"tags\\" && source[\\"cases-user-actions\\"].payload.tags != null) {
        ctx._source.payload.tags = source[\\"cases-user-actions\\"].payload.tags;
      }
    }

    if (source.references != null) {
      for (item in source.references) {
        if (item.type == \\"cases\\") {
          ctx._source.case_id = item.id;
        }
      }
    }

    ctx._source.owner = source[\\"cases-user-actions\\"].owner;
    ctx._source.space_ids = source.namespaces;
  ",
}
`;

exports[`cases security and spaces enabled: basic Common analytics indexes creation attachments index should be created with the correct mappings and scripts on startup 1`] = `
Object {
  "@timestamp": Object {
    "type": "date",
  },
  "case_id": Object {
    "type": "keyword",
  },
  "created_at": Object {
    "type": "date",
  },
  "created_by": Object {
    "properties": Object {
      "email": Object {
        "type": "keyword",
      },
      "full_name": Object {
        "type": "keyword",
      },
      "profile_uid": Object {
        "type": "keyword",
      },
      "username": Object {
        "type": "keyword",
      },
    },
  },
  "owner": Object {
    "type": "keyword",
  },
  "payload": Object {
    "properties": Object {
      "alerts": Object {
        "properties": Object {
          "id": Object {
            "type": "keyword",
          },
          "index": Object {
            "type": "keyword",
          },
        },
      },
      "file": Object {
        "properties": Object {
          "extension": Object {
            "type": "keyword",
          },
          "id": Object {
            "type": "keyword",
          },
          "mimeType": Object {
            "type": "keyword",
          },
          "name": Object {
            "type": "keyword",
          },
        },
      },
    },
  },
  "space_ids": Object {
    "type": "keyword",
  },
  "type": Object {
    "type": "keyword",
  },
}
`;

exports[`cases security and spaces enabled: basic Common analytics indexes creation attachments index should be created with the correct mappings and scripts on startup 2`] = `
Object {
  "lang": "painless",
  "source": "
    def source = [:];
    source.putAll(ctx._source);
    ctx._source.clear();

    if (
        (
            source[\\"cases-comments\\"].type == \\"externalReference\\" &&
            source[\\"cases-comments\\"].externalReferenceAttachmentTypeId != \\".files\\"
        ) &&
        source[\\"cases-comments\\"].type != \\"alert\\"
    ) {
        ctx.op = \\"noop\\";
        return;
    }

    long timestampInMillis = new Date().getTime();
    Instant timestampInstance = Instant.ofEpochMilli(timestampInMillis);
    ctx._source['@timestamp'] = ZonedDateTime.ofInstant(timestampInstance, ZoneId.of('Z'));

    ctx._source.type = source[\\"cases-comments\\"].type;

    if (
        ctx._source.type == \\"alert\\" &&
        source[\\"cases-comments\\"].alertId != null &&
        source[\\"cases-comments\\"].index != null
    ) {
        ctx._source.payload = new HashMap();
        ctx._source.payload.alerts = new ArrayList();

        for (int y = 0; y < source[\\"cases-comments\\"].alertId.size(); y++) {
            Map alert = new HashMap();

            alert.id = source[\\"cases-comments\\"].alertId[y];
            
            if ( y < source[\\"cases-comments\\"].index.size() ) {
                alert.index = source[\\"cases-comments\\"].index[y];
            }
            
            ctx._source.payload.alerts.add(alert);
        }
    }
    
    if (
        ctx._source.type == \\"externalReference\\" &&
        source[\\"cases-comments\\"].externalReferenceAttachmentTypeId == \\".files\\" &&
        source[\\"cases-comments\\"].externalReferenceMetadata.files.size() > 0
    ) {
        ctx._source.payload = new HashMap();
        ctx._source.payload.file = new HashMap();
        ctx._source.payload.file.extension = source[\\"cases-comments\\"].externalReferenceMetadata.files[0].extension;
        ctx._source.payload.file.mimeType = source[\\"cases-comments\\"].externalReferenceMetadata.files[0].mimeType;
        ctx._source.payload.file.name = source[\\"cases-comments\\"].externalReferenceMetadata.files[0].name;
    }

    if (source.references != null) {
        for (item in source.references) {
            if (item.type == \\"file\\") {
                ctx._source.payload.file.id = item.id;
            } else if (item.type == \\"cases\\") {
                ctx._source.case_id = item.id;
            }
        }
    }

    ctx._source.owner = source[\\"cases-comments\\"].owner;
    ctx._source.space_ids = source.namespaces;
  ",
}
`;

exports[`cases security and spaces enabled: basic Common analytics indexes creation cases index should be created with the correct mappings and scripts on startup 1`] = `
Object {
  "@timestamp": Object {
    "type": "date",
  },
  "assignees": Object {
    "type": "keyword",
  },
  "category": Object {
    "type": "keyword",
  },
  "closed_at": Object {
    "type": "date",
  },
  "closed_at_ms": Object {
    "type": "long",
  },
  "closed_by": Object {
    "properties": Object {
      "email": Object {
        "type": "keyword",
      },
      "full_name": Object {
        "type": "keyword",
      },
      "profile_uid": Object {
        "type": "keyword",
      },
      "username": Object {
        "type": "keyword",
      },
    },
  },
  "created_at": Object {
    "type": "date",
  },
  "created_at_ms": Object {
    "type": "long",
  },
  "created_by": Object {
    "properties": Object {
      "email": Object {
        "type": "keyword",
      },
      "full_name": Object {
        "type": "keyword",
      },
      "profile_uid": Object {
        "type": "keyword",
      },
      "username": Object {
        "type": "keyword",
      },
    },
  },
  "custom_fields": Object {
    "properties": Object {
      "key": Object {
        "type": "keyword",
      },
      "type": Object {
        "type": "keyword",
      },
      "value": Object {
        "type": "keyword",
      },
    },
  },
  "description": Object {
    "type": "text",
  },
  "observables": Object {
    "properties": Object {
      "type": Object {
        "type": "keyword",
      },
      "value": Object {
        "type": "keyword",
      },
    },
  },
  "owner": Object {
    "type": "keyword",
  },
  "severity": Object {
    "type": "keyword",
  },
  "severity_sort": Object {
    "type": "short",
  },
  "space_ids": Object {
    "type": "keyword",
  },
  "status": Object {
    "type": "keyword",
  },
  "status_sort": Object {
    "type": "short",
  },
  "tags": Object {
    "type": "keyword",
  },
  "time_to_acknowledge": Object {
    "type": "long",
  },
  "time_to_investigate": Object {
    "type": "long",
  },
  "time_to_resolve": Object {
    "type": "long",
  },
  "title": Object {
    "fields": Object {
      "keyword": Object {
        "type": "keyword",
      },
    },
    "type": "text",
  },
  "total_alerts": Object {
    "type": "integer",
  },
  "total_assignees": Object {
    "type": "integer",
  },
  "total_comments": Object {
    "type": "integer",
  },
  "updated_at": Object {
    "type": "date",
  },
  "updated_at_ms": Object {
    "type": "long",
  },
  "updated_by": Object {
    "properties": Object {
      "email": Object {
        "type": "keyword",
      },
      "full_name": Object {
        "type": "keyword",
      },
      "profile_uid": Object {
        "type": "keyword",
      },
      "username": Object {
        "type": "keyword",
      },
    },
  },
}
`;

exports[`cases security and spaces enabled: basic Common analytics indexes creation cases index should be created with the correct mappings and scripts on startup 2`] = `
Object {
  "lang": "painless",
  "source": "
    String statusDecoder(def x) {
      if (x == 0) {
        return \\"open\\";
      }
      if (x == 10) {
        return \\"in-progress\\";
      }
      if (x == 20) {
        return \\"closed\\";
      }
      return \\"\\";
    }

    String severityDecoder(def x) {
      if (x == 0) {
        return \\"low\\"
      }
      if (x == 10) {
        return \\"medium\\"
      }
      if (x == 20) {
        return \\"high\\"
      }
      if (x == 30) {
        return \\"critical\\"
      }
      return \\"\\"
    }

    def source = [:];
    source.putAll(ctx._source);
    ctx._source.clear();

    long milliSinceEpoch = new Date().getTime();
    Instant instant = Instant.ofEpochMilli(milliSinceEpoch);
    ctx._source['@timestamp'] = ZonedDateTime.ofInstant(instant, ZoneId.of('Z'));

    ctx._source.title = source.cases.title;
    ctx._source.description = source.cases.description;
    ctx._source.tags = source.cases.tags;
    ctx._source.category = source.cases.category;
    
    ctx._source.status_sort = source.cases.status;
    ctx._source.status = statusDecoder(ctx._source.status_sort);

    ctx._source.severity_sort = source.cases.severity;
    ctx._source.severity = severityDecoder(ctx._source.severity_sort);

    ZonedDateTime zdt_created =
      ZonedDateTime.parse(source.cases.created_at);
    ctx._source.created_at_ms = zdt_created.toInstant().toEpochMilli();
    ctx._source.created_at = source.cases.created_at;

    if (source.cases.created_by != null) {
        ctx._source.created_by = new HashMap();
        ctx._source.created_by.full_name = source.cases.created_by.full_name;
        ctx._source.created_by.username = source.cases.created_by.username;
        ctx._source.created_by.profile_uid = source.cases.created_by.profile_uid;
        ctx._source.created_by.email = source.cases.created_by.email;
    }

    if ( source.cases.updated_at != null ) {
      ZonedDateTime zdt_updated =
        ZonedDateTime.parse(source.cases.updated_at);
      ctx._source.updated_at_ms = zdt_updated.toInstant().toEpochMilli();
      ctx._source.updated_at = source.cases.updated_at;
    }

    if (source.cases.updated_by != null) {
        ctx._source.updated_by = new HashMap();
        ctx._source.updated_by.full_name = source.cases.updated_by.full_name;
        ctx._source.updated_by.username = source.cases.updated_by.username;
        ctx._source.updated_by.profile_uid = source.cases.updated_by.profile_uid;
        ctx._source.updated_by.email = source.cases.updated_by.email;
    }

    if ( source.cases.closed_at != null ) {
      ZonedDateTime zdt_closed =
        ZonedDateTime.parse(source.cases.closed_at);
      ctx._source.closed_at_ms = zdt_closed.toInstant().toEpochMilli();
      ctx._source.closed_at = source.cases.closed_at;
    }

    if (source.cases.closed_by != null) {
        ctx._source.closed_by = new HashMap();
        ctx._source.closed_by.full_name = source.cases.closed_by.full_name;
        ctx._source.closed_by.username = source.cases.closed_by.username;
        ctx._source.closed_by.profile_uid = source.cases.closed_by.profile_uid;
        ctx._source.closed_by.email = source.cases.closed_by.email;
    }

    ctx._source.assignees = [];

    if (source.cases.assignees != null) {
      for (item in source.cases.assignees) {
        ctx._source.assignees.add(item.uid);
      }
      ctx._source.total_assignees = source.cases.assignees.size();
    }

    ctx._source.custom_fields = [];
    if (source.cases.customFields != null) {
      for (item in source.cases.customFields) {
          Map customField = new HashMap();

          customField.type = item.type;
          customField.value = item.value;
          customField.key = item.key;
          
          ctx._source.custom_fields.add(customField);
      }
    }

    ctx._source.observables = [];
    if (source.cases.observables != null) {
      for (item in source.cases.observables) {
          Map observable = new HashMap();

          observable.label = item.label;
          observable.type = item.typeKey;
          observable.value = item.value;

          ctx._source.observables.add(observable);
      }
    }
    
    ctx._source.owner = source.cases.owner;
    ctx._source.space_ids = source.namespaces;

    if (source.cases.time_to_acknowledge != null){
      ctx._source.time_to_acknowledge = source.cases.time_to_acknowledge;
    }

    if (source.cases.time_to_investigate != null){
      ctx._source.time_to_investigate = source.cases.time_to_investigate;
    }

    if (source.cases.time_to_resolve != null){
      ctx._source.time_to_resolve = source.cases.time_to_resolve;
    }

    if (source.cases.total_alerts != null && source.cases.total_alerts >= 0){
      ctx._source.total_alerts = source.cases.total_alerts;
    }

    if (source.cases.total_comments != null && source.cases.total_comments >= 0){
      ctx._source.total_comments = source.cases.total_comments;
    }
  ",
}
`;

exports[`cases security and spaces enabled: basic Common analytics indexes creation comments index should be created with the correct mappings and scripts on startup 1`] = `
Object {
  "@timestamp": Object {
    "type": "date",
  },
  "case_id": Object {
    "type": "keyword",
  },
  "comment": Object {
    "type": "text",
  },
  "created_at": Object {
    "type": "date",
  },
  "created_by": Object {
    "properties": Object {
      "email": Object {
        "type": "keyword",
      },
      "full_name": Object {
        "type": "keyword",
      },
      "profile_uid": Object {
        "type": "keyword",
      },
      "username": Object {
        "type": "keyword",
      },
    },
  },
  "owner": Object {
    "type": "keyword",
  },
  "space_ids": Object {
    "type": "keyword",
  },
  "updated_at": Object {
    "type": "date",
  },
  "updated_by": Object {
    "properties": Object {
      "email": Object {
        "type": "keyword",
      },
      "full_name": Object {
        "type": "keyword",
      },
      "profile_uid": Object {
        "type": "keyword",
      },
      "username": Object {
        "type": "keyword",
      },
    },
  },
}
`;

exports[`cases security and spaces enabled: basic Common analytics indexes creation comments index should be created with the correct mappings and scripts on startup 2`] = `
Object {
  "lang": "painless",
  "source": "
    def source = [:];
    source.putAll(ctx._source);
    ctx._source.clear();

    long milliSinceEpoch = new Date().getTime();
    Instant instant = Instant.ofEpochMilli(milliSinceEpoch);
    ctx._source['@timestamp'] = ZonedDateTime.ofInstant(instant, ZoneId.of('Z'));

    ctx._source.comment = source[\\"cases-comments\\"].comment;
    ctx._source.created_at = source[\\"cases-comments\\"].created_at;
    ctx._source.created_by = source[\\"cases-comments\\"].created_by;
    ctx._source.owner = source[\\"cases-comments\\"].owner;
    ctx._source.space_ids = source.namespaces;

    if ( source[\\"cases-comments\\"].updated_at != null ) {
      ctx._source.updated_at = source[\\"cases-comments\\"].updated_at;
    }

    if (source[\\"cases-comments\\"].updated_by != null) {
        ctx._source.updated_by = new HashMap();
        ctx._source.updated_by.full_name = source[\\"cases-comments\\"].updated_by.full_name;
        ctx._source.updated_by.username = source[\\"cases-comments\\"].updated_by.username;
        ctx._source.updated_by.profile_uid = source[\\"cases-comments\\"].updated_by.profile_uid;
        ctx._source.updated_by.email = source[\\"cases-comments\\"].updated_by.email;
    }
    
    if (source.references != null) {
      for (item in source.references) {
        if (item.type == \\"cases\\") {
          ctx._source.case_id = item.id;
        }
      }
    }
  ",
}
`;
