/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { LicenseExpirationRule } from './license_expiration_rule';
import { RULE_LICENSE_EXPIRATION } from '../../common/constants';
import { fetchLicenses } from '../lib/alerts/fetch_licenses';
import { fetchClusters } from '../lib/alerts/fetch_clusters';
import { alertsMock } from '@kbn/alerting-plugin/server/mocks';
import { ALERT_REASON } from '@kbn/rule-data-utils';

const RealDate = Date;

jest.mock('../lib/alerts/fetch_licenses', () => ({
  fetchLicenses: jest.fn(),
}));
jest.mock('../lib/alerts/fetch_clusters', () => ({
  fetchClusters: jest.fn(),
}));

jest.mock('../static_globals', () => ({
  Globals: {
    app: {
      getLogger: () => ({ debug: jest.fn() }),
      config: {
        ui: {
          show_license_expiration: true,
          ccs: { enabled: true },
          container: { elasticsearch: { enabled: false } },
        },
      },
    },
  },
}));

describe('LicenseExpirationRule', () => {
  it('should have defaults', () => {
    const rule = new LicenseExpirationRule();
    expect(rule.ruleOptions.id).toBe(RULE_LICENSE_EXPIRATION);
    expect(rule.ruleOptions.name).toBe('License expiration');
    expect(rule.ruleOptions.throttle).toBe('1d');
    expect(rule.ruleOptions.actionVariables).toStrictEqual([
      { name: 'expiredDate', description: 'The date when the license expires.' },
      { name: 'clusterName', description: 'The cluster to which the license belong.' },
      {
        name: 'internalShortMessage',
        description: 'The short internal message generated by Elastic.',
      },
      {
        name: 'internalFullMessage',
        description: 'The full internal message generated by Elastic.',
      },
      { name: 'state', description: 'The current state of the alert.' },
      { name: 'action', description: 'The recommended action for this alert.' },
      {
        name: 'actionPlain',
        description: 'The recommended action for this alert, without any markdown.',
      },
    ]);
  });

  describe('execute', () => {
    function FakeDate() {}

    FakeDate.prototype.valueOf = () => 1;

    const clusterUuid = 'abc123';
    const clusterName = 'testCluster';
    const license = {
      status: 'expired',
      type: 'gold',
      expiryDateMS: 1000 * 60 * 60 * 24 * 59,
      clusterUuid,
    };

    const services = alertsMock.createRuleExecutorServices();
    const executorOptions = { services, state: {} };

    beforeEach(() => {
      // @ts-ignore
      Date = FakeDate;
      (fetchLicenses as jest.Mock).mockImplementation(() => {
        return [license];
      });
      (fetchClusters as jest.Mock).mockImplementation(() => {
        return [{ clusterUuid, clusterName }];
      });
    });

    afterEach(() => {
      Date = RealDate;
      jest.resetAllMocks();
    });

    afterAll(() => {
      jest.useRealTimers();
    });

    it('should fire action', async () => {
      jest.useFakeTimers().setSystemTime(new Date('2023-03-30T00:00:00.000Z'));
      const alert = new LicenseExpirationRule();
      const type = alert.getRuleType();
      await type.executor({
        ...executorOptions,
        params: alert.ruleOptions.defaultParams,
      } as any);
      expect(services.alertsClient.report).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.setAlertData).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.report).toHaveBeenCalledWith({
        id: 'abc123',
        actionGroup: 'default',
        state: {
          alertStates: [
            {
              cluster: { clusterUuid, clusterName },
              ccs: undefined,
              itemLabel: undefined,
              meta: {
                clusterUuid: 'abc123',
                expiryDateMS: 5097600000,
                status: 'expired',
                type: 'gold',
              },
              nodeId: undefined,
              nodeName: undefined,
              ui: {
                isFiring: true,
                message: {
                  text: 'The license for this cluster expires in #relative at #absolute. #start_linkPlease update your license.#end_link',
                  tokens: [
                    {
                      startToken: '#relative',
                      type: 'time',
                      isRelative: true,
                      isAbsolute: false,
                      timestamp: 5097600000,
                    },
                    {
                      startToken: '#absolute',
                      type: 'time',
                      isAbsolute: true,
                      isRelative: false,
                      timestamp: 5097600000,
                    },
                    {
                      startToken: '#start_link',
                      endToken: '#end_link',
                      type: 'link',
                      url: 'license',
                    },
                  ],
                },
                severity: 'danger',
                triggeredMS: 1680134400000,
                lastCheckedMS: 0,
              },
            },
          ],
        },
      });
      expect(services.alertsClient.setAlertData).toHaveBeenCalledWith({
        id: 'abc123',
        context: {
          action: '[Please update your license.](elasticsearch/nodes)',
          actionPlain: 'Please update your license.',
          internalFullMessage:
            'License expiration alert is firing for testCluster. Your license expires in 53 years. [Please update your license.](elasticsearch/nodes)',
          internalShortMessage:
            'License expiration alert is firing for testCluster. Your license expires in 53 years. Please update your license.',
          clusterName,
          expiredDate: '53 years',
          state: 'firing',
        },
        payload: {
          [ALERT_REASON]:
            'License expiration alert is firing for testCluster. Your license expires in 53 years. Please update your license.',
        },
      });
    });

    it('should not fire actions if the license is not expired', async () => {
      (fetchLicenses as jest.Mock).mockImplementation(() => {
        return [
          {
            status: 'active',
            type: 'gold',
            expiryDateMS: 1000 * 60 * 60 * 24 * 61,
            clusterUuid,
          },
        ];
      });
      const rule = new LicenseExpirationRule();
      const type = rule.getRuleType();
      await type.executor({
        ...executorOptions,
        params: rule.ruleOptions.defaultParams,
      } as any);
      expect(services.alertsClient.report).not.toHaveBeenCalled();
      expect(services.alertsClient.setAlertData).not.toHaveBeenCalled();
    });

    it('should use danger severity for a license expiring soon', async () => {
      (fetchLicenses as jest.Mock).mockImplementation(() => {
        return [
          {
            status: 'active',
            type: 'gold',
            expiryDateMS: 1000 * 60 * 60 * 24 * 2,
            clusterUuid,
          },
        ];
      });
      const rule = new LicenseExpirationRule();
      const type = rule.getRuleType();
      await type.executor({
        ...executorOptions,
        params: rule.ruleOptions.defaultParams,
      } as any);
      expect(services.alertsClient.report).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.setAlertData).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.report).toHaveBeenCalledWith({
        id: 'abc123',
        actionGroup: 'default',
        state: {
          alertStates: [
            {
              cluster: { clusterUuid, clusterName },
              ccs: undefined,
              itemLabel: undefined,
              meta: {
                clusterUuid: 'abc123',
                expiryDateMS: 172800000,
                status: 'active',
                type: 'gold',
              },
              nodeId: undefined,
              nodeName: undefined,
              ui: {
                isFiring: true,
                message: {
                  text: 'The license for this cluster expires in #relative at #absolute. #start_linkPlease update your license.#end_link',
                  tokens: [
                    {
                      startToken: '#relative',
                      type: 'time',
                      isRelative: true,
                      isAbsolute: false,
                      timestamp: 172800000,
                    },
                    {
                      startToken: '#absolute',
                      type: 'time',
                      isAbsolute: true,
                      isRelative: false,
                      timestamp: 172800000,
                    },
                    {
                      startToken: '#start_link',
                      endToken: '#end_link',
                      type: 'link',
                      url: 'license',
                    },
                  ],
                },
                severity: 'danger',
                triggeredMS: 1,
                lastCheckedMS: 0,
              },
            },
          ],
        },
      });
      expect(services.alertsClient.setAlertData).toHaveBeenCalledWith({
        id: 'abc123',
        context: {
          action: '[Please update your license.](elasticsearch/nodes)',
          actionPlain: 'Please update your license.',
          internalFullMessage:
            'License expiration alert is firing for testCluster. Your license expires in 2 days. [Please update your license.](elasticsearch/nodes)',
          internalShortMessage:
            'License expiration alert is firing for testCluster. Your license expires in 2 days. Please update your license.',
          clusterName,
          expiredDate: '2 days',
          state: 'firing',
        },
        payload: {
          [ALERT_REASON]:
            'License expiration alert is firing for testCluster. Your license expires in 2 days. Please update your license.',
        },
      });
    });

    it('should use warning severity for a license expiring in a bit', async () => {
      (fetchLicenses as jest.Mock).mockImplementation(() => {
        return [
          {
            status: 'active',
            type: 'gold',
            expiryDateMS: 1000 * 60 * 60 * 24 * 31,
            clusterUuid,
          },
        ];
      });
      const rule = new LicenseExpirationRule();
      const type = rule.getRuleType();
      await type.executor({
        ...executorOptions,
        params: rule.ruleOptions.defaultParams,
      } as any);
      expect(services.alertsClient.report).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.setAlertData).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.report).toHaveBeenCalledWith({
        id: 'abc123',
        actionGroup: 'default',
        state: {
          alertStates: [
            {
              cluster: { clusterUuid, clusterName },
              ccs: undefined,
              itemLabel: undefined,
              meta: {
                clusterUuid: 'abc123',
                expiryDateMS: 2678400000,
                status: 'active',
                type: 'gold',
              },
              nodeId: undefined,
              nodeName: undefined,
              ui: {
                isFiring: true,
                message: {
                  text: 'The license for this cluster expires in #relative at #absolute. #start_linkPlease update your license.#end_link',
                  tokens: [
                    {
                      startToken: '#relative',
                      type: 'time',
                      isRelative: true,
                      isAbsolute: false,
                      timestamp: 2678400000,
                    },
                    {
                      startToken: '#absolute',
                      type: 'time',
                      isAbsolute: true,
                      isRelative: false,
                      timestamp: 2678400000,
                    },
                    {
                      startToken: '#start_link',
                      endToken: '#end_link',
                      type: 'link',
                      url: 'license',
                    },
                  ],
                },
                severity: 'warning',
                triggeredMS: 1,
                lastCheckedMS: 0,
              },
            },
          ],
        },
      });
      expect(services.alertsClient.setAlertData).toHaveBeenCalledWith({
        id: 'abc123',
        context: {
          action: '[Please update your license.](elasticsearch/nodes)',
          actionPlain: 'Please update your license.',
          internalFullMessage:
            'License expiration alert is firing for testCluster. Your license expires in a month. [Please update your license.](elasticsearch/nodes)',
          internalShortMessage:
            'License expiration alert is firing for testCluster. Your license expires in a month. Please update your license.',
          clusterName,
          expiredDate: 'a month',
          state: 'firing',
        },
        payload: {
          [ALERT_REASON]:
            'License expiration alert is firing for testCluster. Your license expires in a month. Please update your license.',
        },
      });
    });
  });
});
