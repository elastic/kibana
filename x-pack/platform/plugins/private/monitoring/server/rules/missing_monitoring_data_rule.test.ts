/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { MissingMonitoringDataRule } from './missing_monitoring_data_rule';
import { RULE_MISSING_MONITORING_DATA } from '../../common/constants';
import { fetchMissingMonitoringData } from '../lib/alerts/fetch_missing_monitoring_data';
import { fetchClusters } from '../lib/alerts/fetch_clusters';
import { alertsMock } from '@kbn/alerting-plugin/server/mocks';
import { ALERT_REASON } from '@kbn/rule-data-utils';

const RealDate = Date;

jest.mock('../lib/alerts/fetch_missing_monitoring_data', () => ({
  fetchMissingMonitoringData: jest.fn(),
}));
jest.mock('../lib/alerts/fetch_clusters', () => ({
  fetchClusters: jest.fn(),
}));

jest.mock('../static_globals', () => ({
  Globals: {
    app: {
      getLogger: () => ({ debug: jest.fn() }),
      url: 'http://localhost:5601',
      config: {
        ui: {
          show_license_expiration: true,
          ccs: { enabled: true },
          container: { elasticsearch: { enabled: false } },
        },
      },
    },
  },
}));

describe('MissingMonitoringDataRule', () => {
  it('should have defaults', () => {
    const rule = new MissingMonitoringDataRule();
    expect(rule.ruleOptions.id).toBe(RULE_MISSING_MONITORING_DATA);
    expect(rule.ruleOptions.name).toBe('Missing monitoring data');
    expect(rule.ruleOptions.throttle).toBe('6h');
    expect(rule.ruleOptions.defaultParams).toStrictEqual({ limit: '1d', duration: '15m' });
    expect(rule.ruleOptions.actionVariables).toStrictEqual([
      { name: 'node', description: 'The node missing monitoring data.' },
      {
        name: 'internalShortMessage',
        description: 'The short internal message generated by Elastic.',
      },
      {
        name: 'internalFullMessage',
        description: 'The full internal message generated by Elastic.',
      },
      { name: 'state', description: 'The current state of the alert.' },
      { name: 'clusterName', description: 'The cluster to which the node(s) belongs.' },
      { name: 'action', description: 'The recommended action for this alert.' },
      {
        name: 'actionPlain',
        description: 'The recommended action for this alert, without any markdown.',
      },
    ]);
  });

  describe('execute', () => {
    function FakeDate() {}
    FakeDate.prototype.valueOf = () => 1;

    const clusterUuid = 'abc123';
    const clusterName = 'testCluster';
    const nodeId = 'esNode1';
    const nodeName = 'esName1';
    const gapDuration = 3000001;
    const missingData = [
      {
        nodeId,
        nodeName,
        clusterUuid,
        gapDuration,
      },
    ];

    const services = alertsMock.createRuleExecutorServices();
    const executorOptions = { services, state: {} };

    beforeEach(() => {
      // @ts-ignore
      Date = FakeDate;
      (fetchMissingMonitoringData as jest.Mock).mockImplementation(() => {
        return missingData;
      });
      (fetchClusters as jest.Mock).mockImplementation(() => {
        return [{ clusterUuid, clusterName }];
      });
    });

    afterEach(() => {
      Date = RealDate;
      jest.resetAllMocks();
    });

    it('should fire action', async () => {
      const rule = new MissingMonitoringDataRule();
      const type = rule.getRuleType();
      await type.executor({
        ...executorOptions,
        params: rule.ruleOptions.defaultParams,
      } as any);
      const count = 1;
      expect(services.alertsClient.report).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.setAlertData).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.report).toHaveBeenCalledWith({
        id: 'esNode1',
        actionGroup: 'default',
        state: {
          alertStates: [
            {
              ccs: undefined,
              cluster: { clusterUuid, clusterName },
              nodeId,
              nodeName,
              gapDuration,
              itemLabel: undefined,
              meta: {
                clusterUuid,
                gapDuration,
                limit: 86400000,
                nodeId,
                nodeName,
              },
              ui: {
                isFiring: true,
                message: {
                  text: 'For the past an hour, we have not detected any monitoring data from the Elasticsearch node: esName1, starting at #absolute',
                  nextSteps: [
                    {
                      text: '#start_linkView all Elasticsearch nodes#end_link',
                      tokens: [
                        {
                          startToken: '#start_link',
                          endToken: '#end_link',
                          type: 'link',
                          url: 'elasticsearch/nodes',
                        },
                      ],
                    },
                    {
                      text: 'Verify monitoring settings on the node',
                    },
                  ],
                  tokens: [
                    {
                      startToken: '#absolute',
                      type: 'time',
                      isAbsolute: true,
                      isRelative: false,
                      timestamp: 1,
                    },
                  ],
                },
                severity: 'danger',
                triggeredMS: 1,
                lastCheckedMS: 0,
              },
            },
          ],
        },
      });
      expect(services.alertsClient.setAlertData).toHaveBeenCalledWith({
        id: 'esNode1',
        context: {
          internalFullMessage: `We have not detected any monitoring data for node ${nodeName} in cluster: ${clusterName}. [View what monitoring data we do have for this node.](http://localhost:5601/app/monitoring#/elasticsearch/nodes/${nodeId}?_g=(cluster_uuid:'${clusterUuid}'))`,
          internalShortMessage: `We have not detected any monitoring data for node ${nodeName} in cluster: ${clusterName}. Verify the node is up and running, then double check the monitoring settings.`,
          nodes: `node: ${nodeName}`,
          node: `node: ${nodeName}`,
          action: `[View what monitoring data we do have for this node.](http://localhost:5601/app/monitoring#/elasticsearch/nodes/${nodeId}?_g=(cluster_uuid:'${clusterUuid}'))`,
          actionPlain:
            'Verify the node is up and running, then double check the monitoring settings.',
          clusterName,
          count,
          state: 'firing',
        },
        payload: {
          [ALERT_REASON]: `We have not detected any monitoring data for node ${nodeName} in cluster: ${clusterName}. Verify the node is up and running, then double check the monitoring settings.`,
        },
      });
    });

    it('should not fire actions if under threshold', async () => {
      (fetchMissingMonitoringData as jest.Mock).mockImplementation(() => {
        return [
          {
            ...missingData[0],
            gapDuration: 1,
          },
        ];
      });
      const rule = new MissingMonitoringDataRule();
      const type = rule.getRuleType();
      await type.executor({
        ...executorOptions,
        params: rule.ruleOptions.defaultParams,
      } as any);
      expect(services.alertsClient.report).not.toHaveBeenCalled();
      expect(services.alertsClient.setAlertData).not.toHaveBeenCalled();
    });

    it('should handle ccs', async () => {
      const ccs = 'testCluster';
      (fetchMissingMonitoringData as jest.Mock).mockImplementation(() => {
        return [
          {
            ...missingData[0],
            ccs,
          },
        ];
      });
      const rule = new MissingMonitoringDataRule();
      const type = rule.getRuleType();
      await type.executor({
        ...executorOptions,
        params: rule.ruleOptions.defaultParams,
      } as any);
      const count = 1;
      expect(services.alertsClient.report).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.setAlertData).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.report).toHaveBeenCalledWith({
        id: 'esNode1',
        actionGroup: 'default',
        state: {
          alertStates: [
            {
              ccs: 'testCluster',
              cluster: { clusterUuid, clusterName },
              nodeId,
              nodeName,
              gapDuration,
              itemLabel: undefined,
              meta: {
                ccs: 'testCluster',
                clusterUuid,
                gapDuration,
                limit: 86400000,
                nodeId,
                nodeName,
              },
              ui: {
                isFiring: true,
                message: {
                  text: 'For the past an hour, we have not detected any monitoring data from the Elasticsearch node: esName1, starting at #absolute',
                  nextSteps: [
                    {
                      text: '#start_linkView all Elasticsearch nodes#end_link',
                      tokens: [
                        {
                          startToken: '#start_link',
                          endToken: '#end_link',
                          type: 'link',
                          url: 'elasticsearch/nodes',
                        },
                      ],
                    },
                    {
                      text: 'Verify monitoring settings on the node',
                    },
                  ],
                  tokens: [
                    {
                      startToken: '#absolute',
                      type: 'time',
                      isAbsolute: true,
                      isRelative: false,
                      timestamp: 1,
                    },
                  ],
                },
                severity: 'danger',
                triggeredMS: 1,
                lastCheckedMS: 0,
              },
            },
          ],
        },
      });
      expect(services.alertsClient.setAlertData).toHaveBeenCalledWith({
        id: 'esNode1',
        context: {
          internalFullMessage: `We have not detected any monitoring data for node ${nodeName} in cluster: ${clusterName}. [View what monitoring data we do have for this node.](http://localhost:5601/app/monitoring#/elasticsearch/nodes/${nodeId}?_g=(cluster_uuid:'${clusterUuid}',ccs:${ccs}))`,
          internalShortMessage: `We have not detected any monitoring data for node ${nodeName} in cluster: ${clusterName}. Verify the node is up and running, then double check the monitoring settings.`,
          nodes: `node: ${nodeName}`,
          node: `node: ${nodeName}`,
          action: `[View what monitoring data we do have for this node.](http://localhost:5601/app/monitoring#/elasticsearch/nodes/${nodeId}?_g=(cluster_uuid:'${clusterUuid}',ccs:${ccs}))`,
          actionPlain:
            'Verify the node is up and running, then double check the monitoring settings.',
          clusterName,
          count,
          state: 'firing',
        },
        payload: {
          [ALERT_REASON]: `We have not detected any monitoring data for node ${nodeName} in cluster: ${clusterName}. Verify the node is up and running, then double check the monitoring settings.`,
        },
      });
    });
  });
});
