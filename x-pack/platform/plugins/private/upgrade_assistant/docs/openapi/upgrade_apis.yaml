openapi: 3.0.3
info:
  title: Upgrade assistant APIs
  description: Kibana APIs for the upgrade assistant feature
  version: "1.0.0"
  license:
    name: Elastic License 2.0
    url: https://www.elastic.co/licensing/elastic-license
tags:
  - name: upgrade
    description: Check the upgrade status of your Elasticsearch cluster and reindex indices that were created in the previous major version. The assistant helps you prepare for the next major version of Elasticsearch.
    x-displayName: Upgrade assistant
servers:
  - url: /
paths:
  /api/upgrade_assistant/add_query_default_field/{index}:
    get:
      summary: Add a default field
      description: >
        In Elasticsearch 7.0 and later, some query types, such as simple query string, have a limit to the number of fields they can query against.
        To configure the cap in Elasticsearch, set the `indices.query.bool.max_clause_count` cluster setting, which is 1024 by default.
        
        For indices with more fields than the cap, add the `index.query.default_field` index setting to inform Elasticsearch which fields to use by default when no field is specified for a query.
        Use the add default field API to add the `index.query.default_field` setting to an Elasticsearch index.
        
        To add the `index.query.default_field` index setting to the specified index, Kibana generates an array of all fields from the index mapping.
        The fields contain the types specified in `fieldTypes`.
        Kibana appends any other fields specified in `otherFields` to the array of default fields.
      x-state: Technical Preview
      operationId: get-upgrade-default
      tags:
        - upgrade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fieldTypes
              properties:
                fieldTypes:
                  type: array
                  description: >
                    An array of Elasticsearch field types that generate the list of fields.
                otherFields:
                  type: array
                  description: >
                    An optional array of additional field names, dot-delimited.
            examples:
              addQueryDefaultFieldExampleRequest1:
                description: Run `GET /api/upgrade_assistant/add_query_default_field/myIndex` to add the `index.query.default_field` setting to an Elasticsearch index.
                value: |-
                  {
                    "fieldTypes": ["text", "keyword"], 
                    "otherFields": ["myField.*"] 
                  }
      responses:
        '200':
          description: Indicates a successful call.
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                    # description:
        '400':
          description: Indicates that the index already has the `index.query.default_field` setting. No changes are made to the index.
  /api/upgrade_assistant/status:
    get:
      summary: Get the upgrade readiness status
      description: Check the status of your cluster.
      x-state: Technical Preview
      operationId: get-upgrade-status
      tags:
        - upgrade
      responses:
        '200':
          description: Indicates a successful call.
          content:
            application/json:
              examples:
                getUpgradeStatusResponseExample1:
                  value: |-
                    {
                      "readyForUpgrade": false,
                      "cluster": [
                        {
                          "message": "Cluster deprecated issue",
                          "details":"You have 2 system indices that must be migrated and 5 Elasticsearch deprecation issues and 0 Kibana deprecation issues that must be resolved before upgrading."
                        }
                      ]
                    }
  /api/upgrade_assistant/reindex/{index}:
    get:
      summary: Get the reindex status
      description: >
        Check the status of the reindex task.
      x-state: Technical Preview
      operationId: get-upgrade-reindex
      tags:
        - upgrade
      parameters:
        - in: path
          name: index
          description: The name of the index that is reindexing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Indicates a successful call.
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasRequiredPrivileges:
                    type: boolean
                    description: >
                      Specifies whether the user has sufficient privileges to reindex this index.
                      When security is unavailable or disabled, it is `true`.
                  reindexOp:
                    type: object
                    properties:
                      errorMessage:
                        $ref: '#/components/schemas/errorMessage'
                      indexName:
                        $ref: '#/components/schemas/indexName'
                      lastCompletedStep:
                        $ref: '#/components/schemas/lastCompletedStep'
                      newIndexName:
                        $ref: '#/components/schemas/newIndexName'
                      reindexTaskId:
                        $ref: '#/components/schemas/reindexTaskId'
                      reindexTaskPercComplete:
                        $ref: '#/components/schemas/reindexTaskPercComplete'
                      status:
                        $ref: '#/components/schemas/status'
                  warnings:
                    type: array
                    description: >                 	
                      An array of any warning codes that explain what changes are required for this reindex.
                      For example:
                      
                      - `0` specifies to remove the `_all` meta field.
                      - `1` specifies to convert any coerced boolean values in the source document. For example, `yes`, `1`, and `off`.
                      - `2` specifies to convert documents to support Elastic Common Schema. Applies only to APM indices created in 6.x.
              examples:
                getUpgradeReindexResponseExample1:
                  value: |-
                    {
                      "reindexOp": {
                        "indexName": ".ml-state",
                        "newIndexName": ".reindexed-v7-ml-state", 
                        "status": 0, 
                        "lastCompletedStep": 40, 
                        "reindexTaskId": "QprwvTMzRQ2MLWOW22oQ4Q:11819", 
                        "reindexTaskPercComplete": 0.3, 
                        "errorMessage": null 
                      },
                      "warnings": [], 
                      "hasRequiredPrivileges": true 
                    }
    post:
      summary: Start or resume reindexing
      description: |
        Start a new reindex or resume a paused reindex.
        The following steps are performed during a reindex task:
        
        1. Set the index to read-only.
        1. Create a new index.
        1. Reindex documents into the new index.
        1. Create an index alias for the new index.
        1. Delete the old index.
      x-state: Technical Preview
      operationId: start-upgrade-reindex
      tags:
        - upgrade
      parameters:
        - in: path
          name: index
          description: The name of the index to reindex.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Indicates a successful call.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    $ref: '#/components/schemas/errorMessage'
                  indexName:
                    $ref: '#/components/schemas/indexName'
                  lastCompletedStep:
                    $ref: '#/components/schemas/lastCompletedStep'
                  newIndexName:
                    $ref: '#/components/schemas/newIndexName'
                  reindexTaskId:
                    $ref: '#/components/schemas/reindexTaskId'
                  reindexTaskPercComplete:
                    $ref: '#/components/schemas/reindexTaskPercComplete'
                  status:
                    $ref: '#/components/schemas/status'
              examples:
                startUpgradeReindexResponseExample1:
                  value: |-
                    {
                      "indexName": ".ml-state",
                      "newIndexName": ".reindexed-v7-ml-state", 
                      "status": 0, 
                      "lastCompletedStep": 0, 
                      "reindexTaskId": null, 
                      "reindexTaskPercComplete": null, 
                      "errorMessage": null 
                    }
  /api/upgrade_assistant/reindex/{index}/cancel:
    post:
      summary: Cancel reindexing
      description: >
        Cancel reindexes that are waiting for the Elasticsearch reindex task to complete.
        For example, cancel reindexing if the `lastCompletedStep` has the value `40`.
      x-state: Technical Preview
      operationId: cancel-upgrade-reindex
      tags:
        - upgrade
      parameters:
        - in: path
          name: index
          description: The name of the index that was reindexing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Indicates a successful call.
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                    # description: 
              examples:
                cancelUpgradeReindexResponseExample1:
                  value: |-
                    {
                      "acknowledged": true
                    }
  /api/upgrade_assistant/reindex/batch:
    post:
      summary: Batch start or resume reindexing
      description: >
        Start or resume multiple reindexing tasks in one request.
        Additionally, reindexing tasks started or resumed via the batch endpoint will be placed on a queue and run one-by-one, which ensures that minimal cluster resources are consumed over time.
      x-state: Technical Preview
      operationId: batch-start-upgrade-reindex
      tags:
        - upgrade
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - indexNames
              properties:
                indexNames:
                  type: array
                  items:
                    type: string
                  description: >
                    The list of index names to be reindexed.
                    The order of the indices determines the order that the reindex tasks are run.
      responses:
        '200':
          description: Indicates a successful call.
          content:
            application/json:
              schema:
                type: object
                properties:
                  enqueued:
                    type: array
                    description: >
                      A list of reindex tasks created.
                      The order in the array indicates the order in which tasks will be run.
                    items:
                      type: object
                      properties:
                        errorMessage:
                          $ref: '#/components/schemas/errorMessage'
                        indexName:
                          $ref: '#/components/schemas/indexName'
                        lastCompletedStep:
                          $ref: '#/components/schemas/lastCompletedStep'
                        locked:
                          $ref: '#/components/schemas/locked'
                        reindexOptions:
                          $ref: '#/components/schemas/reindexOptions'
                        reindexTaskId:
                          $ref: '#/components/schemas/reindexTaskId'
                        reindexTaskPercComplete:
                          $ref: '#/components/schemas/reindexTaskPercComplete'
                        runningReindexCount:
                          $ref: '#/components/schemas/runningReindexCount'
                  errors:
                    type: array
                    description: >
                      A list of errors that may have occurred preventing the reindex task from being created.
                    items:
                      - type: object
              examples:
                batchStartUpgradeReindexResponseExample1:
                  value: |-
                    {
                      "enqueued": [ 
                        {
                          "indexName": "index1",
                          "newIndexName": "reindexed-v8-index1",
                          "status": 3,
                          "lastCompletedStep": 0,
                          "locked": null,
                          "reindexTaskId": null,
                          "reindexTaskPercComplete": null,
                          "errorMessage": null,
                          "runningReindexCount": null,
                          "reindexOptions": { 
                            "queueSettings": {
                              "queuedAt": 1583406985489 
                            }
                          }
                        }
                      ],
                      "errors": [ 
                        {
                          "indexName": "index2",
                          "message": "Something went wrong!"
                        }
                      ]
                    }
  /api/upgrade_assistant/reindex/batch/queue:
    get:
      summary: Get the batch reindex queue
      description: >
        Check the current reindex batch queue.
      x-state: Technical Preview
      operationId: get-batch-upgrade-reindex
      tags:
        - upgrade
      responses:
        '200':
          description: Indicates a successful call.
          content:
            application/json:
              schema:
                type: object
                properties:
                  queue:
                    type: array
                    description: >
                      Items in this array indicate reindex tasks at a given point in time and the order in which they will be run.
                    items:
                      type: object
                      properties:
                        errorMessage:
                          $ref: '#/components/schemas/errorMessage'
                        indexName:
                          $ref: '#/components/schemas/indexName'
                        lastCompletedStep:
                          $ref: '#/components/schemas/lastCompletedStep'
                        locked:
                          $ref: '#/components/schemas/locked'
                        reindexOptions:
                          $ref: '#/components/schemas/reindexOptions'
                        reindexTaskId:
                          $ref: '#/components/schemas/reindexTaskId'
                        reindexTaskPercComplete:
                          $ref: '#/components/schemas/reindexTaskPercComplete'
                        runningReindexCount:
                          $ref: '#/components/schemas/runningReindexCount'
              examples:
                getBatchUpgradeReindexResponseExample1:
                  value: |-
                    {
                      "queue": [ 
                        {
                          "indexName": "index1",
                          "newIndexName": "reindexed-v8-index2",
                          "status": 3,
                          "lastCompletedStep": 0,
                          "locked": null,
                          "reindexTaskId": null,
                          "reindexTaskPercComplete": null,
                          "errorMessage": null,
                          "runningReindexCount": null,
                          "reindexOptions": {
                            "queueSettings": {
                              "queuedAt": 1583406985489
                            }
                          }
                        },
                        {
                          "indexName": "index2",
                          "newIndexName": "reindexed-v8-index2",
                          "status": 3,
                          "lastCompletedStep": 0,
                          "locked": null,
                          "reindexTaskId": null,
                          "reindexTaskPercComplete": null,
                          "errorMessage": null,
                          "runningReindexCount": null,
                          "reindexOptions": {
                            "queueSettings": {
                              "queuedAt": 1583406987334
                            }
                          }
                        }
                      ]
                    }
components:
  schemas:
    errorMessage:
      type: string
      description: The error that caused the reindex to fail, if it failed.
    indexName:
      type: string
      description: The name of the old index.
    lastCompletedStep:
      type: integer
      description: >
        The last successfully completed step of the reindex. For example:
        
        - `0`: The reindex task has been created in Kibana.
        - `10`: The index group services stopped. Only applies to some system indices.
        - `20`: The index is set to readonly.
        - `30`: The new destination index has been created.
        - `40`: The reindex task in Elasticsearch has started.
        - `50`: The reindex task in Elasticsearch has completed.
        - `60`: Aliases were created to point to the new index, and the old index has been deleted.
        - `70`: The index group services have resumed. Only applies to some system indices.
    locked:
      type: string
      # description: TBD
    newIndexName:
      type: string
      description: The name of the new index. 
    reindexOptions:
      type: object
      description: 	The presence of this key indicates that the reindex job will occur in the batch.
      properties:
        queueSettings:
          type: object
          # description: TBD
          properties:
            queuedAt:
              type: number
              description: A Unix timestamp of when the reindex task was placed in the queue.
    reindexTaskId:
      type: string
      description: >
        The task ID of the reindex task in Elasticsearch.
        This value appears when the reindexing starts.
    reindexTaskPercComplete:
      type: number
      description: >
        The progress of the reindexing task in Elasticsearch.
        It appears in decimal form, from 0 to 1.
    runningReindexCount:
      type: number
      # description: TBD
    status:
      type: integer
      description: >
        The reindex status. For example:
        
        - `0`: In progress
        - `1`: Completed
        - `2`: Failed
        - `3`: Paused
  