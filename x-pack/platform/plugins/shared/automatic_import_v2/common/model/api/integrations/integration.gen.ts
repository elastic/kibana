/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Automatic Import Integrations API endpoint
 *   version: 1
 */

import { z } from '@kbn/zod';

import { NonEmptyString } from '../../primitive.gen';
import { InputType, Integration } from '../../common_attributes.gen';

export type CreateAutoImportIntegrationRequestBody = z.infer<
  typeof CreateAutoImportIntegrationRequestBody
>;
export const CreateAutoImportIntegrationRequestBody = z
  .object({
    /**
     * The title of the integration
     */
    title: NonEmptyString,
    /**
     * The description of the integration
     */
    description: NonEmptyString,
    /**
     * The logo of the integration
     */
    logo: NonEmptyString.optional(),
    /**
     * The data streams of the integration
     */
    dataStreams: z
      .array(
        z
          .object({
            /**
             * The title of the data stream
             */
            title: NonEmptyString,
            /**
             * The description of the data stream
             */
            description: NonEmptyString,
            /**
             * The input types of the data stream
             */
            inputTypes: z.array(InputType).min(1),
            /**
             * The raw samples of the data stream
             */
            rawSamples: z.array(NonEmptyString).min(1),
          })
          .strict()
      )
      .min(1),
  })
  .strict();
export type CreateAutoImportIntegrationRequestBodyInput = z.input<
  typeof CreateAutoImportIntegrationRequestBody
>;

export type CreateAutoImportIntegrationResponse = z.infer<
  typeof CreateAutoImportIntegrationResponse
>;
export const CreateAutoImportIntegrationResponse = z
  .object({
    /**
     * The integration id created in state.
     */
    integration_id: NonEmptyString.optional(),
  })
  .strict();

export type DeleteAutoImportIntegrationRequestParams = z.infer<
  typeof DeleteAutoImportIntegrationRequestParams
>;
export const DeleteAutoImportIntegrationRequestParams = z.object({
  /**
   * The integration identifier
   */
  integration_id: NonEmptyString,
});
export type DeleteAutoImportIntegrationRequestParamsInput = z.input<
  typeof DeleteAutoImportIntegrationRequestParams
>;

export type GetAutoImportIntegrationRequestParams = z.infer<
  typeof GetAutoImportIntegrationRequestParams
>;
export const GetAutoImportIntegrationRequestParams = z.object({
  /**
   * The integration identifier
   */
  integration_id: NonEmptyString,
});
export type GetAutoImportIntegrationRequestParamsInput = z.input<
  typeof GetAutoImportIntegrationRequestParams
>;

export type GetAutoImportIntegrationResponse = z.infer<typeof GetAutoImportIntegrationResponse>;
export const GetAutoImportIntegrationResponse = z.object({
  integration: Integration,
});

export type GetAutoImportIntegrationsResponse = z.infer<typeof GetAutoImportIntegrationsResponse>;
export const GetAutoImportIntegrationsResponse = z.array(Integration);

export type UpdateAutoImportIntegrationRequestParams = z.infer<
  typeof UpdateAutoImportIntegrationRequestParams
>;
export const UpdateAutoImportIntegrationRequestParams = z.object({
  /**
   * The integration identifier
   */
  integration_id: NonEmptyString,
});
export type UpdateAutoImportIntegrationRequestParamsInput = z.input<
  typeof UpdateAutoImportIntegrationRequestParams
>;

export type UpdateAutoImportIntegrationRequestBody = z.infer<
  typeof UpdateAutoImportIntegrationRequestBody
>;
export const UpdateAutoImportIntegrationRequestBody = z
  .object({
    /**
     * Integration description
     */
    description: NonEmptyString.optional(),
    /**
     * Integration logo image blob
     */
    logo: NonEmptyString.optional(),
    /**
     * The data streams of the integration
     */
    dataStreams: z
      .array(
        z
          .object({
            /**
             * The description of the data stream
             */
            description: NonEmptyString.optional(),
            /**
             * The input types of the data stream
             */
            inputTypes: z.array(InputType).optional(),
            /**
             * The raw samples of the data stream
             */
            rawSamples: z.array(NonEmptyString).optional(),
          })
          .strict()
      )
      .optional(),
  })
  .strict();
export type UpdateAutoImportIntegrationRequestBodyInput = z.input<
  typeof UpdateAutoImportIntegrationRequestBody
>;
