```markdown
# Elasticsearch Query Language (ES|QL)

## Overview

The Elasticsearch Query Language (ES|QL) is a powerful and intuitive language designed for filtering, transforming, and analyzing data stored in Elasticsearch. It is built to be easy to learn and use, catering to a wide range of users, including end users, SRE teams, application developers, and administrators. ES|QL enables users to author queries for finding specific events, performing statistical analysis, and generating visualizations.

ES|QL employs a piped syntax (`|`) to chain operations, where the output of one operation becomes the input for the next. This step-by-step approach allows for complex data transformations and analysis in a clear and modular fashion.

## Key Features

- **Data Operations**: ES|QL supports filtering, aggregation, time-series analysis, and other data operations.
- **Commands and Functions**: A wide range of commands and functions are available for manipulating and analyzing data.
- **Metadata Access**: ES|QL can access metadata fields such as `_index`, `_id`, `_version`, and `_score`.
- **Cross-Cluster Queries**: ES|QL can query data across multiple clusters.
- **Integration with Kibana**: ES|QL is integrated into Kibana for querying, visualizing, and alerting.
- **REST API**: ES|QL queries can be executed via the Elasticsearch REST API.

## Known Limitations

While ES|QL is a powerful tool, it has some limitations:

### Result Set Size
- By default, ES|QL queries return up to 1,000 rows. This limit can be increased to a maximum of 10,000 rows using the `LIMIT` command.
- The upper limit applies only to the number of rows returned, not to the number of documents processed.

### Field Types
- ES|QL supports a wide range of field types, including `boolean`, `date`, `double`, `keyword`, `text`, and spatial types like `geo_point` and `geo_shape`.
- Unsupported field types include `binary`, `nested`, `rank_feature`, and `aggregate_metric_double`.
- Queries on unsupported field types return errors or `null` values.

### Full-Text Search
- Full-text search is in technical preview and must be used directly after the `FROM` command or close to it.
- Disjunctions (`OR`) in full-text search are limited unless all clauses use full-text functions.

### Multivalue Fields
- Functions applied to multivalued fields return `null` unless explicitly converted to single values using multivalue functions.

### Timezone Support
- ES|QL only supports the UTC timezone.

### Kibana Integration
- Discover in Kibana shows no more than 10,000 rows and 50 columns.
- CSV export from Discover is limited to 10,000 rows.

### Cross-Cluster Queries
- All underlying indices and shards must be active. Queries fail if any index or shard is paused or in an `UNASSIGNED` state.
- Fields with conflicting types across indices must be explicitly converted to a single type.

### Time Series Data Streams
- ES|QL does not support querying time series data streams (TSDS).

### Date Math
- Date math expressions work well when the leftmost expression is a datetime. However, subtracting two datetimes or using parentheses in date math is not fully supported.

## Using ES|QL in Kibana

ES|QL is integrated into Kibana, enabling users to query and aggregate data, create visualizations, and set up alerts. It is enabled by default in Kibana and can be disabled via the `enableESQL` setting in Advanced Settings.

### Key Features in Kibana
- **Query Bar**: Switch to ES|QL mode to write queries. Auto-complete suggestions help users write queries efficiently.
- **Visualization**: ES|QL queries can generate visualizations, such as bar charts and histograms, which can be saved to dashboards.
- **Alerts**: Create alerting rules based on ES|QL queries to monitor data thresholds.

### Example Query in Kibana
To retrieve the top 10 countries by total bytes in the `kibana_sample_data_logs` index:
```esql
FROM kibana_sample_data_logs
| STATS total_bytes = SUM(bytes) BY geo.dest
| SORT total_bytes DESC
| LIMIT 10
```

## Using ES|QL Across Clusters

ES|QL supports querying data across multiple clusters using the format `<remote_cluster_name>:<target>`. This allows users to execute a single query across indices, data streams, or aliases in different clusters.

### Example Cross-Cluster Query
To query data from two clusters:
```esql
FROM cluster_one:employees-00001,cluster_two:other-employees-*
```

### Important Notes
- Ensure all indices and shards are active.
- Fields with conflicting types across clusters must be explicitly converted to a single type using type conversion functions.

## Using the REST API

ES|QL queries can be executed via the Elasticsearch REST API. This provides flexibility for integrating ES|QL into applications and workflows.

### Example REST API Query
To execute an ES|QL query via the REST API:
```json
POST /_query
{
  "query": "FROM employees | WHERE height > 2 | LIMIT 5"
}
```

### Important Notes
- The REST API supports query parameters for dynamic values.
- Named parameters can be used for functions, enabling additional options.

### Example with Query Parameters
```json
POST /_query
{
  "query": "FROM library | WHERE match(author, ?, {\"minimum_should_match\": ?}) | LIMIT 5",
  "params": ["Frank Herbert", 2]
}
```

## Conclusion

ES|QL is a versatile and user-friendly query language for Elasticsearch, offering powerful capabilities for data analysis and visualization. While it has some limitations, its integration with Kibana, support for cross-cluster queries, and REST API compatibility make it a valuable tool for users across various domains.
```