```markdown
# ES|QL Operators

This document provides an overview of the operators supported in ES|QL, categorized into binary, unary, logical, and other operators. Each section includes examples of how to use these operators in ES|QL queries.

---

## Binary Operators

Binary operators operate on two operands and include comparison, arithmetic, and logical operations.

### Equality (`==`)
Checks if two values are equal.

```esql
FROM employees
| WHERE first_name == "John"
```

### Inequality (`!=`)
Checks if two values are not equal.

```esql
FROM employees
| WHERE department != "HR"
```

### Less Than (`<`)
Checks if the left operand is less than the right operand.

```esql
FROM employees
| WHERE salary < 50000
```

### Less Than or Equal To (`<=`)
Checks if the left operand is less than or equal to the right operand.

```esql
FROM employees
| WHERE hire_date <= "2020-01-01"
```

### Greater Than (`>`)
Checks if the left operand is greater than the right operand.

```esql
FROM employees
| WHERE age > 30
```

### Greater Than or Equal To (`>=`)
Checks if the left operand is greater than or equal to the right operand.

```esql
FROM employees
| WHERE experience_years >= 5
```

### Add (`+`)
Adds two numeric values.

```esql
FROM employees
| EVAL total_compensation = salary + bonus
```

### Subtract (`-`)
Subtracts the right operand from the left operand.

```esql
FROM employees
| EVAL remaining_leave = total_leave - used_leave
```

### Multiply (`*`)
Multiplies two numeric values.

```esql
FROM employees
| EVAL annual_salary = monthly_salary * 12
```

### Divide (`/`)
Divides the left operand by the right operand.

```esql
FROM employees
| EVAL tax_rate = tax_paid / salary
```

### Modulus (`%`)
Returns the remainder of the division of two numbers.

```esql
FROM employees
| EVAL remainder = employee_id % 10
```

---

## Unary Operators

Unary operators operate on a single operand.

### Negation (`-`)
Negates a numeric value.

```esql
ROW value = 10
| EVAL negated_value = -value
```

---

## Logical Operators

Logical operators are used to combine multiple conditions.

### AND
Returns `true` if both conditions are true.

```esql
FROM employees
| WHERE age > 30 AND department == "Engineering"
```

### OR
Returns `true` if at least one condition is true.

```esql
FROM employees
| WHERE department == "HR" OR department == "Finance"
```

### NOT
Negates a condition.

```esql
FROM employees
| WHERE NOT (age < 25)
```

---

## Other Operators

### IS NULL and IS NOT NULL
Used to check for `NULL` values.

#### IS NULL
```esql
FROM employees
| WHERE birth_date IS NULL
| KEEP first_name, last_name
```

#### IS NOT NULL
```esql
FROM employees
| WHERE is_rehired IS NOT NULL
| STATS COUNT(emp_no)
```

### Cast (`::`)
Casts a value to a specific type.

```esql
FROM employees
| EVAL salary_as_string = salary::KEYWORD
```

### IN
Checks if a value is in a list of values.

```esql
ROW a = 1, b = 4, c = 3
| WHERE c - a IN (3, b / 2, a)
```

### LIKE
Filters data based on string patterns using wildcards.

#### Example with `*` and `?` wildcards:
```esql
FROM employees
| WHERE first_name LIKE "?b*"
| KEEP first_name, last_name
```

#### Escaping special characters:
```esql
ROW message = "foo * bar"
| WHERE message LIKE """foo \* bar"""
```

### RLIKE
Filters data based on string patterns using regular expressions.

```esql
FROM employees
| WHERE first_name RLIKE ".*John.*"
| KEEP first_name, last_name
```

---

This document provides a concise overview of ES|QL operators with examples to help you understand their usage in queries.
```