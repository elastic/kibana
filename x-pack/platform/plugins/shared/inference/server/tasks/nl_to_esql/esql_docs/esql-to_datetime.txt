# TO_DATETIME

Converts an input value to a date value. A string will only be successfully converted if it follows the format `yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`. To handle dates in other formats, use the `DATE_PARSE` function.

**Note:** When converting from nanosecond resolution to millisecond resolution, the nanosecond portion is truncated, not rounded.

## Syntax

`TO_DATETIME(field)`

### Parameters

#### `field`

The input value to be converted. This can be a single- or multi-valued column or an expression.

## Examples

### Example 1: Converting strings to datetime

```esql
ROW string = ["1953-09-02T00:00:00.000Z", "1964-06-02T00:00:00.000Z", "1964-06-02 00:00:00"]
| EVAL datetime = TO_DATETIME(string)
```

In this example:
- The first two values in the `string` column are successfully converted to datetime values.
- The last value (`"1964-06-02 00:00:00"`) is not converted because it does not match the required format. This results in a `null` value for that entry.
- A **Warning** header is added to the response, providing details about the failure. For instance:
  ```
  "Line 1:112: evaluation of [TO_DATETIME(string)] failed, treating result as null. "Only first 20 failures recorded.""
  ```
  Another header will specify the failure reason and the problematic value:
  ```
  "java.lang.IllegalArgumentException: failed to parse date field [1964-06-02 00:00:00]
  with format [yyyy-MM-dd'T'HH:mm:ss.SSS'Z']"
  ```

### Example 2: Converting numeric values to datetime

If the input is numeric, it is interpreted as milliseconds since the [Unix epoch](https://en.wikipedia.org/wiki/Unix_time).

```esql
ROW int = [0, 1]
| EVAL dt = TO_DATETIME(int)
```

In this example:
- The value `0` is converted to `1970-01-01T00:00:00.000Z`.
- The value `1` is converted to `1970-01-01T00:00:00.001Z`.