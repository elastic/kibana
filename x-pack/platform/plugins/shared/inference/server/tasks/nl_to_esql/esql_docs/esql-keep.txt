## KEEP

The `KEEP` command allows you to specify which columns are included in the output and the order in which they appear.

## Syntax

`KEEP columns`

### Parameters

#### `columns`

A comma-separated list of columns to retain. Supports wildcards. If a column matches multiple wildcards or column names, precedence rules determine the final behavior.

## Examples

### Specify the order of returned columns
This example ensures the columns `emp_no`, `first_name`, `last_name`, and `height` are returned in the specified order:

```esql
FROM employees
| KEEP emp_no, first_name, last_name, height
```

### Use wildcards to match column names
This example keeps all columns with names starting with `h`:

```esql
FROM employees
| KEEP h*
```

### Combine specific columns and wildcards
The asterisk wildcard (`*`) includes all columns not explicitly matched by other arguments. This query first includes columns starting with `h`, followed by all other columns:

```esql
FROM employees
| KEEP h*, *
```

### Precedence of complete field names over wildcards
Complete field names take precedence over wildcard expressions. In this example, `first_name` is prioritized over `first_name*`:

```esql
FROM employees
| KEEP first_name, last_name, first_name*
```

### Wildcard precedence when multiple expressions match
When multiple wildcard expressions match, the last one takes precedence, even if it is less specific:

```esql
FROM employees
| KEEP first_name*, last_name, first_na*
```

### Lowest precedence for the `*` wildcard
The `*` wildcard has the lowest precedence. In this example, `first_name` is prioritized, and all other columns are included afterward:

```esql
FROM employees
| KEEP *, first_name
```

## Limitations

- When querying many indices at once without filters, using `KEEP` can help reduce the number of fields returned and avoid errors caused by excessive response sizes.