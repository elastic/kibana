/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import type { RootSchema } from '@kbn/core/public';
import { AssistantScope } from '@kbn/ai-assistant-common';
import type { Message } from '../../../common';

export const messageSchema: RootSchema<Message & { scopes: AssistantScope[] }> = {
  '@timestamp': {
    type: 'text',
    _meta: {
      description: 'The timestamp of the message.',
    },
  },
  message: {
    properties: {
      anonymized: {
        type: 'boolean',
        _meta: {
          description: 'Whether the message was anonymized.',
          optional: true,
        },
      },
      detectedEntities: {
        type: 'array',
        items: {
          properties: {
            entity: {
              type: 'text',
              _meta: {
                description: 'The entity that was detected.',
              },
            },
            class_name: {
              type: 'text',
              _meta: {
                description: 'The class name of the entity that was detected.',
              },
            },
            start_pos: {
              type: 'integer',
              _meta: {
                description: 'The start position of the entity that was detected.',
              },
            },
            end_pos: {
              type: 'integer',
              _meta: {
                description: 'The end position of the entity that was detected.',
              },
            },
            hash: {
              type: 'text',
              _meta: {
                description: 'The hash of the entity that was detected.',
              },
            },
            type: {
              type: 'text',
              _meta: {
                description: 'The type of the entity that was detected.',
              },
            },
          },
        },
        _meta: {
          description: 'The entities that were detected in the message.',
          optional: true,
        },
      },
      content: {
        type: 'text',
        _meta: {
          description: 'The response generated by the LLM.',
          optional: true,
        },
      },
      name: {
        type: 'text',
        _meta: {
          description: 'The name of the function that was executed.',
          optional: true,
        },
      },
      role: {
        type: 'text',
        _meta: {
          description: 'The actor that generated the response.',
        },
      },
      data: {
        type: 'text',
        _meta: {
          description: '',
          optional: true,
        },
      },
      function_call: {
        _meta: {
          description: 'The function call that was executed.',
          optional: true,
        },
        properties: {
          name: {
            type: 'text',
            _meta: {
              description: 'The name of the function that was executed.',
              optional: false,
            },
          },
          arguments: {
            type: 'text',
            _meta: {
              description: 'The arguments that were used when executing the function.',
              optional: true,
            },
          },
          trigger: {
            type: 'text',
            _meta: {
              description: 'The actor which triggered the execution of this function.',
            },
          },
        },
      },
    },
  },
  scopes: {
    type: 'array',
    items: {
      type: 'text',
      _meta: {
        description: 'The scopes that were used when generating the message.',
      },
    },
  },
};
