/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Osquery Attributes
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';

/**
 * The ID of the query.
 */
export type QueryId = z.infer<typeof QueryId>;
export const QueryId = z.string();

/**
 * The pack description.
 */
export type PackDescription = z.infer<typeof PackDescription>;
export const PackDescription = z.string();

export type PackDescriptionOrUndefined = z.infer<typeof PackDescriptionOrUndefined>;
export const PackDescriptionOrUndefined = PackDescription.nullable();

/**
 * Restricts the query to a specified platform. The default is all platforms. To specify multiple platforms, use commas. For example, `linux,darwin`.
 */
export type Platform = z.infer<typeof Platform>;
export const Platform = z.string();

export type PlatformOrUndefined = z.infer<typeof PlatformOrUndefined>;
export const PlatformOrUndefined = Platform.nullable();

/**
 * The SQL query you want to run.
 */
export type Query = z.infer<typeof Query>;
export const Query = z.string();

export type QueryOrUndefined = z.infer<typeof QueryOrUndefined>;
export const QueryOrUndefined = Query.nullable();

/**
 * Uses the Osquery versions greater than or equal to the specified version string.
 */
export type Version = z.infer<typeof Version>;
export const Version = z.string();

export type VersionOrUndefined = z.infer<typeof VersionOrUndefined>;
export const VersionOrUndefined = Version.nullable();

/**
 * An interval, in seconds, on which to run the query.
 */
export type Interval = z.infer<typeof Interval>;
export const Interval = z.string();

export type IntervalOrUndefined = z.infer<typeof IntervalOrUndefined>;
export const IntervalOrUndefined = Interval.nullable();

/**
 * Indicates whether the query is a snapshot.
 */
export type Snapshot = z.infer<typeof Snapshot>;
export const Snapshot = z.boolean();

export type SnapshotOrUndefined = z.infer<typeof SnapshotOrUndefined>;
export const SnapshotOrUndefined = Snapshot.nullable();

/**
 * Indicates whether the query is removed.
 */
export type Removed = z.infer<typeof Removed>;
export const Removed = z.boolean();

export type RemovedOrUndefined = z.infer<typeof RemovedOrUndefined>;
export const RemovedOrUndefined = Removed.nullable();

/**
 * The pack name.
 */
export type PackName = z.infer<typeof PackName>;
export const PackName = z.string();

/**
 * The ID of a saved query.
 */
export type SavedQueryId = z.infer<typeof SavedQueryId>;
export const SavedQueryId = z.string();

export type SavedQueryIdOrUndefined = z.infer<typeof SavedQueryIdOrUndefined>;
export const SavedQueryIdOrUndefined = SavedQueryId.nullable();

/**
 * The saved query description.
 */
export type SavedQueryDescription = z.infer<typeof SavedQueryDescription>;
export const SavedQueryDescription = z.string();

export type SavedQueryDescriptionOrUndefined = z.infer<typeof SavedQueryDescriptionOrUndefined>;
export const SavedQueryDescriptionOrUndefined = SavedQueryDescription.nullable();

/**
 * The ID of the pack you want to run, retrieve, update, or delete.
 */
export type PackId = z.infer<typeof PackId>;
export const PackId = z.string();

export type PackIdOrUndefined = z.infer<typeof PackIdOrUndefined>;
export const PackIdOrUndefined = PackId.nullable();

/**
 * Enables the pack.
 */
export type Enabled = z.infer<typeof Enabled>;
export const Enabled = z.boolean();

export type EnabledOrUndefined = z.infer<typeof EnabledOrUndefined>;
export const EnabledOrUndefined = Enabled.nullable();

/**
 * A list of agents policy IDs.
 */
export type PolicyIds = z.infer<typeof PolicyIds>;
export const PolicyIds = z.array(z.string());

export type PolicyIdsOrUndefined = z.infer<typeof PolicyIdsOrUndefined>;
export const PolicyIdsOrUndefined = PolicyIds.nullable();

export type ECSMappingItem = z.infer<typeof ECSMappingItem>;
export const ECSMappingItem = z.object({
  /**
   * The ECS field to map to.
   */
  field: z.string().optional(),
  /**
   * The value to map to the ECS field.
   */
  value: z.union([z.string(), z.array(z.string())]).optional(),
});

/**
 * Map osquery results columns or static values to Elastic Common Schema (ECS) fields
 */
export type ECSMapping = z.infer<typeof ECSMapping>;
export const ECSMapping = z.object({}).catchall(ECSMappingItem);

export type ECSMappingOrUndefined = z.infer<typeof ECSMappingOrUndefined>;
export const ECSMappingOrUndefined = ECSMapping.nullable();

export type ArrayQueriesItem = z.infer<typeof ArrayQueriesItem>;
export const ArrayQueriesItem = z.object({
  id: QueryId.optional(),
  query: Query.optional(),
  ecs_mapping: ECSMappingOrUndefined.optional(),
  version: VersionOrUndefined.optional(),
  platform: PlatformOrUndefined.optional(),
  removed: RemovedOrUndefined.optional(),
  snapshot: SnapshotOrUndefined.optional(),
});

/**
 * An array of queries to run.
 */
export type ArrayQueries = z.infer<typeof ArrayQueries>;
export const ArrayQueries = z.array(ArrayQueriesItem);

export type ObjectQueriesItem = z.infer<typeof ObjectQueriesItem>;
export const ObjectQueriesItem = z.object({
  query: Query.optional(),
  id: QueryId.optional(),
  ecs_mapping: ECSMappingOrUndefined.optional(),
  version: VersionOrUndefined.optional(),
  platform: PlatformOrUndefined.optional(),
  saved_query_id: SavedQueryIdOrUndefined.optional(),
  removed: RemovedOrUndefined.optional(),
  snapshot: SnapshotOrUndefined.optional(),
});

/**
 * An object of queries.
 */
export type ObjectQueries = z.infer<typeof ObjectQueries>;
export const ObjectQueries = z.object({}).catchall(ObjectQueriesItem);

export type Queries = z.infer<typeof Queries>;
export const Queries = z.union([ArrayQueries, ObjectQueries]);

export type QueriesOrUndefined = z.infer<typeof QueriesOrUndefined>;
export const QueriesOrUndefined = Queries.nullable();

/**
 * The kuery to filter the results by.
 */
export type KueryOrUndefined = z.infer<typeof KueryOrUndefined>;
export const KueryOrUndefined = z.string().nullable();

/**
 * The page number to return. The default is 1.
 */
export type PageOrUndefined = z.infer<typeof PageOrUndefined>;
export const PageOrUndefined = z.number().int().nullable();

/**
 * The number of results to return per page. The default is 20.
 */
export type PageSizeOrUndefined = z.infer<typeof PageSizeOrUndefined>;
export const PageSizeOrUndefined = z.number().int().nullable();

/**
 * The field that is used to sort the results.
 */
export type SortOrUndefined = z.infer<typeof SortOrUndefined>;
export const SortOrUndefined = z.string().nullable().default('createdAt');

/**
 * Specifies the sort order.
 */
export type SortOrderOrUndefined = z.infer<typeof SortOrderOrUndefined>;
export const SortOrderOrUndefined = z.enum(['asc', 'desc']);
export type SortOrderOrUndefinedEnum = typeof SortOrderOrUndefined.enum;
export const SortOrderOrUndefinedEnum = SortOrderOrUndefined.enum;

/**
 * An object with shard configuration for policies included in the pack. For each policy, set the shard configuration to a percentage (1â€“100) of target hosts.
 */
export type Shards = z.infer<typeof Shards>;
export const Shards = z.object({}).catchall(z.number());

export type DefaultSuccessResponse = z.infer<typeof DefaultSuccessResponse>;
export const DefaultSuccessResponse = z.object({});
