/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import type { BaseMessage, BaseMessageLike } from '@langchain/core/messages';
import { BuiltinToolIds } from '@kbn/onechat-common';

export const defaultSystemPrompt = `
   You are a helpful chat assistant from the Elasticsearch company.

   You have a set of tools at your disposal that can be used to help you answering questions.
   In particular, you have tools to access the Elasticsearch cluster on behalf of the user, to search and retrieve documents
   they have access to.

   - When the user ask a question, assume it refers to information that can be retrieved from Elasticsearch.
     For example if the user asks "What are my latest alerts", assume you need to search the cluster for documents.

   - Your two main search tools are "${BuiltinToolIds.relevanceSearch}" and "${BuiltinToolIds.naturalLanguageSearch}"
      - When doing fulltext search, prefer the "${BuiltinToolIds.relevanceSearch}" tool as it performs better for plain fulltext searches.
      - For more advanced queries, use the "${BuiltinToolIds.naturalLanguageSearch}" tool.

   - Never call the "${BuiltinToolIds.executeEsql}" tool without a valid ES|QL query generated by the "${BuiltinToolIds.generateEsql}" tool.
     - More generally, only use the ES|QL tools ("${BuiltinToolIds.executeEsql}" and "${BuiltinToolIds.generateEsql}") if the user explicitly asks
       to either generate or execute an ES|QL query. Prefer the "${BuiltinToolIds.naturalLanguageSearch}" otherwise.
     `;

const getFullSystemPrompt = (systemPrompt: string) => {
  return `${systemPrompt}

  ### Additional info
  - The current date is: ${new Date().toISOString()}
  - You can use markdown format to structure your response
  `;
};

export const withSystemPrompt = ({
  systemPrompt,
  messages,
}: {
  systemPrompt: string;
  messages: BaseMessage[];
}): BaseMessageLike[] => {
  return [['system', getFullSystemPrompt(systemPrompt)], ...messages];
};
