/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/**
 * PKCE (Proof Key for Code Exchange) Helper
 * 
 * Implements PKCE per RFC 7636 using Web Crypto API.
 * Required for OAuth 2.1 authorization code flow.
 */
export class PKCEHelper {
  /**
   * Generate a cryptographically random code verifier
   * 
   * Per RFC 7636: code_verifier is a high-entropy cryptographic random STRING
   * using the unreserved characters [A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"
   * with a minimum length of 43 characters and a maximum length of 128 characters.
   * 
   * @returns Base64URL-encoded code verifier (43 characters)
   */
  async generateCodeVerifier(): Promise<string> {
    const array = new Uint8Array(32); // 32 bytes = 256 bits
    crypto.getRandomValues(array);
    return this.base64URLEncode(array);
  }

  /**
   * Generate code challenge from verifier using S256 method
   * 
   * Per RFC 7636: code_challenge = BASE64URL(SHA256(ASCII(code_verifier)))
   * 
   * @param verifier Code verifier generated by generateCodeVerifier()
   * @returns Base64URL-encoded SHA-256 hash of verifier
   */
  async generateCodeChallenge(verifier: string): Promise<string> {
    const encoder = new TextEncoder();
    const data = encoder.encode(verifier);
    const hash = await crypto.subtle.digest('SHA-256', data);
    return this.base64URLEncode(new Uint8Array(hash));
  }

  /**
   * Base64URL encode (without padding)
   * 
   * Per RFC 7636: Base64url Encoding without Padding
   * 
   * @param buffer Binary data to encode
   * @returns Base64URL-encoded string
   */
  private base64URLEncode(buffer: Uint8Array): string {
    // Convert to base64
    let base64 = '';
    const bytes = new Uint8Array(buffer);
    const len = bytes.byteLength;
    
    // Use btoa for base64 encoding
    const binary = Array.from(bytes)
      .map((byte) => String.fromCharCode(byte))
      .join('');
    base64 = btoa(binary);

    // Convert to base64url: replace +/= with -_
    return base64
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, ''); // Remove padding
  }
}

