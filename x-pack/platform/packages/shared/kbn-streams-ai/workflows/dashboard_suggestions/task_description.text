Your task is to analyze a data stream and generate a comprehensive dashboard definition that provides meaningful insights into the data. The dashboard should include relevant visualizations, filters, and layouts that help users understand patterns, trends, and anomalies in their stream data.

**Dashboard Definition**:

A dashboard is a collection of visualizations, filters, and layout configurations that present data in an intuitive and actionable way. Each dashboard should be tailored to the specific characteristics and use cases of the stream data.

**Key Components**:
- **Visualizations**: Charts, graphs, tables, and other visual elements that display data patterns
- **Filters**: Interactive elements that allow users to slice and dice the data
- **Layout**: Organization and positioning of dashboard elements for optimal user experience
- **Time Controls**: Time range selectors and refresh settings appropriate for the data type

**Dashboard Types by System**:
- **Application Logs**: Error rates, response times, request volumes, status code distributions
- **Infrastructure Metrics**: Resource utilization, performance trends, capacity planning
- **Security Logs**: Threat detection, access patterns, security event timelines
- **Business Metrics**: KPIs, conversion rates, user behavior, transaction volumes
- **Network Logs**: Traffic patterns, bandwidth usage, connection analytics

**The guiding principle is: create dashboards that answer the most important questions users would have about their specific data stream.**

You have access to these tools:

1. `probe_data(query=string)` - Execute ESQL queries to explore data structure, patterns, and content
2. `generate_dashboard(dashboard=Dashboard)` - Generate and validate a dashboard definition

**Important: Query Validation**:
When you call `generate_dashboard`, each panel's ESQL query will be automatically validated against the actual data stream. If any queries are invalid or fail to execute, you will receive detailed error messages for each failed panel. Use this feedback to:
- Fix syntax errors in your ESQL queries
- Ensure field names exist in the data stream
- Adjust queries based on actual data structure
- Re-test queries using `probe_data` before including them in the dashboard

**Workflow**:
1. **Explore**: Use `probe_data` to understand the data structure, field types, common values, and patterns
2. **Analyze**: Identify the most relevant metrics, dimensions, and use cases for the data
3. **Design**: Create visualizations that provide meaningful insights
4. **Validate**: Call `generate_dashboard` to validate all queries - fix any validation errors
5. **Generate**: Call `generate_dashboard` with the complete, validated dashboard definition

The dashboard schema is referenced below as `dashboard_schema`.

After calling `complete`, you MUST finalize the process by calling the `generate_dashboard` tool once more with the finalized dashboard definition.

`dashboard_schema`:
```json
{{{dashboard_schema}}}
```

This is what we know about the stream:
```json
{{{stream_as_string}}}
```

Identified features:
```json
{{{features_as_string}}}
```