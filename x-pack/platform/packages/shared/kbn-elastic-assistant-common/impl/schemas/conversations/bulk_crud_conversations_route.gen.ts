/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Bulk Conversations Actions API endpoint
 *   version: 1
 */

import { z } from '@kbn/zod';

import { BulkActionBase, BulkCrudActionSummary } from '../common_attributes.gen';
import {
  ConversationCreateProps,
  ConversationUpdateProps,
  ConversationResponse,
} from './common_attributes.gen';

/**
 * Reason for skipping a conversation during bulk action.
 */
export type ConversationsBulkActionSkipReason = z.infer<typeof ConversationsBulkActionSkipReason>;
export const ConversationsBulkActionSkipReason = z.literal('CONVERSATION_NOT_MODIFIED');

export type ConversationsBulkActionSkipResult = z.infer<typeof ConversationsBulkActionSkipResult>;
export const ConversationsBulkActionSkipResult = z.object({
  /**
   * The ID of the conversation that was skipped.
   */
  id: z.string(),
  /**
   * The name of the conversation that was skipped.
   */
  name: z.string().optional(),
  /**
   * The reason the conversation was skipped.
   */
  skip_reason: ConversationsBulkActionSkipReason,
});

export type ConversationDetailsInError = z.infer<typeof ConversationDetailsInError>;
export const ConversationDetailsInError = z.object({
  /**
   * The ID of the conversation that encountered an error.
   */
  id: z.string(),
  /**
   * The name of the conversation in error.
   */
  name: z.string().optional(),
});

export type NormalizedConversationError = z.infer<typeof NormalizedConversationError>;
export const NormalizedConversationError = z.object({
  /**
   * Error message.
   */
  message: z.string(),
  /**
   * HTTP status code for the error.
   */
  status_code: z.number().int(),
  /**
   * A specific error code identifying the error.
   */
  err_code: z.string().optional(),
  /**
   * A list of conversations that caused errors.
   */
  conversations: z.array(ConversationDetailsInError),
});

export type ConversationsBulkCrudActionResults = z.infer<typeof ConversationsBulkCrudActionResults>;
export const ConversationsBulkCrudActionResults = z.object({
  /**
   * List of conversations that were successfully updated.
   */
  updated: z.array(ConversationResponse),
  /**
   * List of conversations that were successfully created.
   */
  created: z.array(ConversationResponse),
  /**
   * List of conversation IDs that were successfully deleted.
   */
  deleted: z.array(z.string()),
  /**
   * List of conversations that were skipped during the bulk action.
   */
  skipped: z.array(ConversationsBulkActionSkipResult),
});

export type ConversationsBulkCrudActionResponse = z.infer<
  typeof ConversationsBulkCrudActionResponse
>;
export const ConversationsBulkCrudActionResponse = z.object({
  /**
   * Indicates whether the bulk action was successful.
   */
  success: z.boolean().optional(),
  /**
   * The HTTP status code returned for the bulk action.
   */
  status_code: z.number().int().optional(),
  /**
   * A message providing additional details about the bulk action result.
   */
  message: z.string().optional(),
  /**
   * The total number of conversations involved in the bulk action.
   */
  conversations_count: z.number().int().optional(),
  attributes: z.object({
    results: ConversationsBulkCrudActionResults,
    summary: BulkCrudActionSummary,
    errors: z.array(NormalizedConversationError).optional(),
  }),
});

export type PerformBulkActionRequestBody = z.infer<typeof PerformBulkActionRequestBody>;
export const PerformBulkActionRequestBody = z.object({
  /**
   * Details of the bulk delete action to apply.
   */
  delete: BulkActionBase.optional(),
  /**
   * List of conversations to create in bulk.
   */
  create: z.array(ConversationCreateProps).optional(),
  /**
   * List of conversations to update in bulk.
   */
  update: z.array(ConversationUpdateProps).optional(),
});
export type PerformBulkActionRequestBodyInput = z.input<typeof PerformBulkActionRequestBody>;

export type PerformBulkActionResponse = z.infer<typeof PerformBulkActionResponse>;
export const PerformBulkActionResponse = ConversationsBulkCrudActionResponse;
