/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Conversation Attributes
 *   version: not applicable
 */

import { z } from '@kbn/zod';

import { NonEmptyString, User } from '../common_attributes.gen';

/**
 * trace Data
 */
export type TraceData = z.infer<typeof TraceData>;
export const TraceData = z.object({
  /**
   * Could be any string, not necessarily a UUID
   */
  transactionId: z.string().optional(),
  /**
   * Could be any string, not necessarily a UUID
   */
  traceId: z.string().optional(),
});

/**
 * Replacements object used to anonymize/deanomymize messsages
 */
export type Replacements = z.infer<typeof Replacements>;
export const Replacements = z.object({}).catchall(z.string());

export type Reader = z.infer<typeof Reader>;
export const Reader = z.object({}).catchall(z.unknown());

/**
 * Provider
 */
export type Provider = z.infer<typeof Provider>;
export const Provider = z.enum(['OpenAI', 'Azure OpenAI', 'Other']);
export type ProviderEnum = typeof Provider.enum;
export const ProviderEnum = Provider.enum;

/**
 * Message role.
 */
export type MessageRole = z.infer<typeof MessageRole>;
export const MessageRole = z.enum(['system', 'user', 'assistant']);
export type MessageRoleEnum = typeof MessageRole.enum;
export const MessageRoleEnum = MessageRole.enum;

/**
 * The conversation category.
 */
export type ConversationCategory = z.infer<typeof ConversationCategory>;
export const ConversationCategory = z.enum(['assistant', 'insights']);
export type ConversationCategoryEnum = typeof ConversationCategory.enum;
export const ConversationCategoryEnum = ConversationCategory.enum;

/**
 * The conversation confidence.
 */
export type ConversationConfidence = z.infer<typeof ConversationConfidence>;
export const ConversationConfidence = z.enum(['low', 'medium', 'high']);
export type ConversationConfidenceEnum = typeof ConversationConfidence.enum;
export const ConversationConfidenceEnum = ConversationConfidence.enum;

/** ******* Begin Content References *********/
/**
 * Data referenced by the message content
 */
export type BaseContentReference = z.infer<typeof BaseContentReference>;
export const BaseContentReference = z.object({
  /**
   * Identifies a ContentReference uniquely within a message
   */
  id: z.string(),
  /**
   * Specifies the type of ContentReference
   */
  type: z.string(),
});

/**
 * Knowledge base entry referenced by the message content
 */
export type KnowledgeBaseEntryContentReference = z.infer<typeof KnowledgeBaseEntryContentReference>;
export const KnowledgeBaseEntryContentReference = BaseContentReference.extend({
  /**
   * Specifies this is a KnowledgeBaseEntryContentReference
   */
  type: z.literal('KnowledgeBaseEntry'),
  /**
   * Id of the knowledge base entry
   */
  knowledgeBaseEntryId: z.string(),
  /**
   * Name of the knowledge base entry
   */
  knowledgeBaseEntryName: z.string(),
});

/**
 * Knowledge base entry referenced by the message content
 */
export type EsqlContentReference = z.infer<typeof EsqlContentReference>;
export const EsqlContentReference = BaseContentReference.extend({
  /**
   * Specifies this is a EsqlContentReference
   */
  type: z.literal('EsqlQuery'),
  /**
   * The ESQL query
   */
  query: z.string(),
});

/**
 * Alerts count referenced by the message content
 */
export type ProductDocumentationContentReference = z.infer<
  typeof ProductDocumentationContentReference
>;
export const ProductDocumentationContentReference = BaseContentReference.extend({
  /**
   * Specifies this is a ProductDocumentationContentReference
   */
  type: z.literal('ProductDocumentation'),
  /**
   * Title of the documentation
   */
  title: z.string(),
  /**
   * Url to the documentation
   */
  url: z.string(),
});

/**
 * Alerts count referenced by the message content
 */
export type SecurityAlertsPageContentReference = z.infer<typeof SecurityAlertsPageContentReference>;
export const SecurityAlertsPageContentReference = BaseContentReference.extend({
  /**
   * Specifies this is a SecurityAlertsPageContentReference
   */
  type: z.literal('SecurityAlertsPage'),
});

/**
 * Alert referenced by the message content
 */
export type SecurityAlertContentReference = z.infer<typeof SecurityAlertContentReference>;
export const SecurityAlertContentReference = BaseContentReference.extend({
  /**
   * Specifies this is a SecurityAlertContentReference
   */
  type: z.literal('SecurityAlert'),
  /**
   * Id of the alert
   */
  alertId: z.string(),
});

export const ContentReference = z.union([
  KnowledgeBaseEntryContentReference,
  SecurityAlertContentReference,
  SecurityAlertsPageContentReference,
  ProductDocumentationContentReference,
  EsqlContentReference,
]);
export type ContentReference = z.infer<typeof ContentReference>;
export const ContentReferences = z.record(z.string(), ContentReference);
export type ContentReferences = z.infer<typeof ContentReferences>;
/** ******* End Content References *********/

/**
 * Message specific metadata
 */
export type MessageMetadata = z.infer<typeof MessageMetadata>;
export const MessageMetadata = z.object({
  contentReferences: ContentReferences.optional(),
});

/**
 * AI assistant conversation message.
 */
export type Message = z.infer<typeof Message>;
export const Message = z.object({
  /**
   * Message content.
   */
  content: z.string(),
  /**
   * Message content.
   */
  reader: Reader.optional(),
  /**
   * Message role.
   */
  role: MessageRole,
  /**
   * The timestamp message was sent or received.
   */
  timestamp: NonEmptyString,
  /**
   * Is error message.
   */
  isError: z.boolean().optional(),
  /**
   * trace Data
   */
  traceData: TraceData.optional(),
});

export type ApiConfig = z.infer<typeof ApiConfig>;
export const ApiConfig = z.object({
  /**
   * connector id
   */
  connectorId: z.string(),
  /**
   * action type id
   */
  actionTypeId: z.string(),
  /**
   * defaultSystemPromptId
   */
  defaultSystemPromptId: z.string().optional(),
  /**
   * Provider
   */
  provider: Provider.optional(),
  /**
   * model
   */
  model: z.string().optional(),
});

export type ConversationSummary = z.infer<typeof ConversationSummary>;
export const ConversationSummary = z.object({
  /**
   * Summary text of the conversation over time.
   */
  content: z.string().optional(),
  /**
   * The timestamp summary was updated.
   */
  timestamp: NonEmptyString.optional(),
  /**
   * Define if summary is marked as publicly available.
   */
  public: z.boolean().optional(),
  /**
   * How confident you are about this being a correct and useful learning.
   */
  confidence: ConversationConfidence.optional(),
});

export type ErrorSchema = z.infer<typeof ErrorSchema>;
export const ErrorSchema = z
  .object({
    id: NonEmptyString.optional(),
    error: z.object({
      status_code: z.number().int().min(400),
      message: z.string(),
    }),
  })
  .strict();

export type ConversationResponse = z.infer<typeof ConversationResponse>;
export const ConversationResponse = z.object({
  id: NonEmptyString,
  /**
   * The conversation title.
   */
  title: z.string(),
  /**
   * The conversation category.
   */
  category: ConversationCategory,
  summary: ConversationSummary.optional(),
  timestamp: NonEmptyString.optional(),
  /**
   * The last time conversation was updated.
   */
  updatedAt: z.string().optional(),
  /**
   * The last time conversation was updated.
   */
  createdAt: z.string(),
  replacements: Replacements.optional(),
  users: z.array(User),
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * Is default conversation.
   */
  isDefault: z.boolean().optional(),
  /**
   * excludeFromLastConversationStorage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  /**
   * Kibana space
   */
  namespace: z.string(),
});

export type ConversationUpdateProps = z.infer<typeof ConversationUpdateProps>;
export const ConversationUpdateProps = z.object({
  id: NonEmptyString,
  /**
   * The conversation title.
   */
  title: z.string().optional(),
  /**
   * The conversation category.
   */
  category: ConversationCategory.optional(),
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  summary: ConversationSummary.optional(),
  /**
   * excludeFromLastConversationStorage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  replacements: Replacements.optional(),
});

export type ConversationCreateProps = z.infer<typeof ConversationCreateProps>;
export const ConversationCreateProps = z.object({
  /**
   * The conversation id.
   */
  id: z.string().optional(),
  /**
   * The conversation title.
   */
  title: z.string(),
  /**
   * The conversation category.
   */
  category: ConversationCategory.optional(),
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * Is default conversation.
   */
  isDefault: z.boolean().optional(),
  /**
   * excludeFromLastConversationStorage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  replacements: Replacements.optional(),
});

export type ConversationMessageCreateProps = z.infer<typeof ConversationMessageCreateProps>;
export const ConversationMessageCreateProps = z.object({
  /**
   * The conversation messages.
   */
  messages: z.array(Message),
});
