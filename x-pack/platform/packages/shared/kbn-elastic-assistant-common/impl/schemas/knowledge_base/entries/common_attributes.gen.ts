/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Knowledge Base Attributes
 *   version: not applicable
 */

import { z } from '@kbn/zod';

import { User, NonEmptyString } from '../../common_attributes.gen';

/**
 * Array of objects defining the input schema, allowing the LLM to extract structured data to be used in retrieval
 */
export type InputSchema = z.infer<typeof InputSchema>;
export const InputSchema = z.array(
  z.object({
    /**
     * Name of the field
     */
    fieldName: z.string(),
    /**
     * Type of the field
     */
    fieldType: z.string(),
    /**
     * Description of the field
     */
    description: z.string(),
  })
);

export type KnowledgeBaseEntryErrorSchema = z.infer<typeof KnowledgeBaseEntryErrorSchema>;
export const KnowledgeBaseEntryErrorSchema = z
  .object({
    statusCode: z.number(),
    error: z.string(),
    message: z.string(),
  })
  .strict();

/**
 * Metadata about a Knowledge Base Entry
 */
export type Metadata = z.infer<typeof Metadata>;
export const Metadata = z.object({
  /**
   * Knowledge Base resource name for grouping entries, e.g. 'esql', 'lens-docs', etc
   */
  kbResource: z.string(),
  /**
   * Source document name or filepath
   */
  source: z.string(),
  /**
   * Whether this resource should always be included
   */
  required: z.boolean(),
});

/**
 * Object containing Knowledge Base Entry text embeddings and modelId used to create the embeddings
 */
export type Vector = z.infer<typeof Vector>;
export const Vector = z.object({
  /**
   * ID of the model used to create the embeddings
   */
  modelId: z.string(),
  /**
   * Tokens with their corresponding values
   */
  tokens: z.object({}).catchall(z.number()),
});

export type BaseRequiredFields = z.infer<typeof BaseRequiredFields>;
export const BaseRequiredFields = z.object({
  /**
   * Name of the Knowledge Base Entry
   */
  name: z.string(),
});

export type BaseDefaultableFields = z.infer<typeof BaseDefaultableFields>;
export const BaseDefaultableFields = z.object({
  /**
   * Kibana Space, defaults to 'default' space
   */
  namespace: z.string().optional(),
  /**
   * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
   */
  users: z.array(User).optional(),
});

export type BaseCreateProps = z.infer<typeof BaseCreateProps>;
export const BaseCreateProps = BaseRequiredFields.merge(BaseDefaultableFields);

export type BaseUpdateProps = z.infer<typeof BaseUpdateProps>;
export const BaseUpdateProps = BaseCreateProps.partial().merge(
  z.object({
    id: NonEmptyString,
  })
);

export type BaseResponseProps = z.infer<typeof BaseResponseProps>;
export const BaseResponseProps = BaseRequiredFields.merge(BaseDefaultableFields.required());

export type ResponseFields = z.infer<typeof ResponseFields>;
export const ResponseFields = z.object({
  id: NonEmptyString,
  /**
   * Time the Knowledge Base Entry was created
   */
  createdAt: z.string(),
  /**
   * User who created the Knowledge Base Entry
   */
  createdBy: z.string(),
  /**
   * Time the Knowledge Base Entry was last updated
   */
  updatedAt: z.string(),
  /**
   * User who last updated the Knowledge Base Entry
   */
  updatedBy: z.string(),
});

export type SharedResponseProps = z.infer<typeof SharedResponseProps>;
export const SharedResponseProps = BaseResponseProps.merge(ResponseFields);

export type DocumentEntryType = z.infer<typeof DocumentEntryType>;
export const DocumentEntryType = z.literal('document');

export type DocumentEntryRequiredFields = z.infer<typeof DocumentEntryRequiredFields>;
export const DocumentEntryRequiredFields = z.object({
  /**
   * Entry type
   */
  type: z.literal('document'),
  /**
   * Knowledge Base resource name for grouping entries, e.g. 'esql', 'lens-docs', etc
   */
  kbResource: z.string(),
  /**
   * Source document name or filepath
   */
  source: z.string(),
  /**
   * Knowledge Base Entry content
   */
  text: z.string(),
});

export type DocumentEntryOptionalFields = z.infer<typeof DocumentEntryOptionalFields>;
export const DocumentEntryOptionalFields = z.object({
  /**
   * Whether this resource should always be included, defaults to false
   */
  required: z.boolean().optional(),
  vector: Vector.optional(),
});

export type DocumentEntryCreateFields = z.infer<typeof DocumentEntryCreateFields>;
export const DocumentEntryCreateFields = BaseCreateProps.merge(DocumentEntryRequiredFields).merge(
  DocumentEntryOptionalFields
);

export type DocumentEntryUpdateFields = z.infer<typeof DocumentEntryUpdateFields>;
export const DocumentEntryUpdateFields = BaseUpdateProps.merge(DocumentEntryCreateFields);

export type DocumentEntryResponseFields = z.infer<typeof DocumentEntryResponseFields>;
export const DocumentEntryResponseFields = DocumentEntryRequiredFields.merge(
  DocumentEntryOptionalFields
);

export type DocumentEntry = z.infer<typeof DocumentEntry>;
export const DocumentEntry = SharedResponseProps.merge(DocumentEntryResponseFields);

export type IndexEntryType = z.infer<typeof IndexEntryType>;
export const IndexEntryType = z.literal('index');

export type IndexEntryRequiredFields = z.infer<typeof IndexEntryRequiredFields>;
export const IndexEntryRequiredFields = z.object({
  /**
   * Entry type
   */
  type: z.literal('index'),
  /**
   * Index or Data Stream to query for Knowledge Base content
   */
  index: z.string(),
  /**
   * Field to query for Knowledge Base content
   */
  field: z.string(),
  /**
   * Description for when this index or data stream should be queried for Knowledge Base content. Passed to the LLM as a tool description
   */
  description: z.string(),
  /**
   * Description of query field used to fetch Knowledge Base content. Passed to the LLM as part of the tool input schema
   */
  queryDescription: z.string(),
});

export type IndexEntryOptionalFields = z.infer<typeof IndexEntryOptionalFields>;
export const IndexEntryOptionalFields = z.object({
  inputSchema: InputSchema.optional(),
  /**
   * Fields to extract from the query result, defaults to all fields if not provided or empty
   */
  outputFields: z.array(z.string()).optional(),
});

export type IndexEntryCreateFields = z.infer<typeof IndexEntryCreateFields>;
export const IndexEntryCreateFields =
  BaseCreateProps.merge(IndexEntryRequiredFields).merge(IndexEntryOptionalFields);

export type IndexEntryUpdateFields = z.infer<typeof IndexEntryUpdateFields>;
export const IndexEntryUpdateFields = BaseUpdateProps.merge(IndexEntryCreateFields);

export type IndexEntryResponseFields = z.infer<typeof IndexEntryResponseFields>;
export const IndexEntryResponseFields = IndexEntryRequiredFields.merge(IndexEntryOptionalFields);

export type IndexEntry = z.infer<typeof IndexEntry>;
export const IndexEntry = SharedResponseProps.merge(IndexEntryResponseFields);

export type KnowledgeBaseEntryCreateProps = z.infer<typeof KnowledgeBaseEntryCreateProps>;
export const KnowledgeBaseEntryCreateProps = z.discriminatedUnion('type', [
  DocumentEntryCreateFields,
  IndexEntryCreateFields,
]);

export type KnowledgeBaseEntryUpdateProps = z.infer<typeof KnowledgeBaseEntryUpdateProps>;
export const KnowledgeBaseEntryUpdateProps = z.discriminatedUnion('type', [
  DocumentEntryUpdateFields,
  IndexEntryUpdateFields,
]);

export type KnowledgeBaseEntryResponse = z.infer<typeof KnowledgeBaseEntryResponse>;
export const KnowledgeBaseEntryResponse = z.discriminatedUnion('type', [DocumentEntry, IndexEntry]);
