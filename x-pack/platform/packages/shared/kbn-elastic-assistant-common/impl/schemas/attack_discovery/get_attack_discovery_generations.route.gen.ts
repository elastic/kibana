/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Get attack discovery generations API endpoint
 *   version: 1
 */

import { z } from '@kbn/zod';

export type GetAttackDiscoveryGenerationsRequestQuery = z.infer<
  typeof GetAttackDiscoveryGenerationsRequestQuery
>;
export const GetAttackDiscoveryGenerationsRequestQuery = z.object({
  /**
   * Optional relative or absolute end time for filtering generations
   */
  end: z.string().optional(),
  /**
   * The maximum number of generations to retrieve
   */
  size: z.coerce.number(),
  /**
   * Optional relative or absolute start time for filtering generations
   */
  start: z.string().optional(),
});
export type GetAttackDiscoveryGenerationsRequestQueryInput = z.input<
  typeof GetAttackDiscoveryGenerationsRequestQuery
>;

export type GetAttackDiscoveryGenerationsResponse = z.infer<
  typeof GetAttackDiscoveryGenerationsResponse
>;
export const GetAttackDiscoveryGenerationsResponse = z.object({
  /**
   * List of attack discovery generations
   */
  generations: z.array(
    z.object({
      /**
       * The number of alerts sent as context (max kibana.alert.rule.execution.metrics.alert_counts.active) to the LLM for the generation
       */
      alerts_context_count: z.number().optional(),
      /**
       * The connector id (event.dataset) for this generation
       */
      connector_id: z.string(),
      /**
       * Stats applicable to the connector for this generation
       */
      connector_stats: z
        .object({
          /**
           * The average duration (avg event.duration) in nanoseconds of successful generations for the same connector id, for the current user
           */
          average_successful_duration_nanoseconds: z.number().optional(),
          /**
           * The number of successful generations for the same connector id, for the current user
           */
          successful_generations: z.number().optional(),
        })
        .optional(),
      /**
       * The number of new Attack discovery alerts (max kibana.alert.rule.execution.metrics.alert_counts.new) for this generation
       */
      discoveries: z.number(),
      /**
       * When generation ended (max event.end)
       */
      end: z.string().optional(),
      /**
       * The unique identifier (kibana.alert.rule.execution.uuid) for the generation
       */
      execution_uuid: z.string(),
      /**
       * Generation loading message (kibana.alert.rule.execution.status)
       */
      loading_message: z.string(),
      /**
       * Reason for failed generations (event.reason)
       */
      reason: z.string().optional(),
      /**
       * When generation started (min event.start)
       */
      start: z.string(),
      /**
       * The status of the attack discovery generation
       */
      status: z.enum(['canceled', 'dismissed', 'failed', 'started', 'succeeded']),
    })
  ),
});
