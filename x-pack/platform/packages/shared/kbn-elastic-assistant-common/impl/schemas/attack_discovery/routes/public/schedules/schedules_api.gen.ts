/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Attack Discovery Schedule Types (API)
 *   version: not applicable
 */

import { z } from '@kbn/zod';

import { ApiConfig } from '../../../../conversations/common_attributes.gen';
import { NonEmptyString } from '../../../../common_attributes.gen';

/**
 * An query condition to filter alerts
 */
export type Query = z.infer<typeof Query>;
export const Query = z.object({
  query: z.union([z.string(), z.object({}).catchall(z.unknown())]),
  language: z.string(),
});

/**
 * The filter array used to define the conditions for when alerts are selected as an attack discovery context. Defaults to an empty array.
 */
export type Filters = z.infer<typeof Filters>;
export const Filters = z.array(z.unknown());

/**
 * An attack discovery schedule params
 */
export type AttackDiscoveryApiScheduleParams = z.infer<typeof AttackDiscoveryApiScheduleParams>;
export const AttackDiscoveryApiScheduleParams = z.object({
  /**
   * The index pattern to get alerts from
   */
  alerts_index_pattern: z.string(),
  /**
   * LLM API configuration.
   */
  api_config: ApiConfig.merge(
    z.object({
      /**
       * The name of the connector
       */
      name: z.string(),
    })
  ),
  end: z.string().optional(),
  query: Query.optional(),
  filters: Filters.optional(),
  combined_filter: z.object({}).catchall(z.unknown()).optional(),
  size: z.number(),
  start: z.string().optional(),
});

export type IntervalApiSchedule = z.infer<typeof IntervalApiSchedule>;
export const IntervalApiSchedule = z.object({
  /**
   * The schedule interval
   */
  interval: z.string(),
});

/**
 * Groups actions by use cases. Use `default` for alert notifications.
 */
export type AttackDiscoveryApiScheduleActionGroup = z.infer<
  typeof AttackDiscoveryApiScheduleActionGroup
>;
export const AttackDiscoveryApiScheduleActionGroup = z.string();

/**
 * The connector ID.
 */
export type AttackDiscoveryApiScheduleActionId = z.infer<typeof AttackDiscoveryApiScheduleActionId>;
export const AttackDiscoveryApiScheduleActionId = z.string();

/**
 * Object containing the allowed connector fields, which varies according to the connector type.
 */
export type AttackDiscoveryApiScheduleActionParams = z.infer<
  typeof AttackDiscoveryApiScheduleActionParams
>;
export const AttackDiscoveryApiScheduleActionParams = z.object({}).catchall(z.unknown());

export type AttackDiscoveryApiScheduleActionAlertsFilter = z.infer<
  typeof AttackDiscoveryApiScheduleActionAlertsFilter
>;
export const AttackDiscoveryApiScheduleActionAlertsFilter = z.object({}).catchall(z.unknown());

/**
 * The condition for throttling the notification: `onActionGroupChange`, `onActiveAlert`,  or `onThrottleInterval`
 */
export type AttackDiscoveryApiScheduleActionNotifyWhen = z.infer<
  typeof AttackDiscoveryApiScheduleActionNotifyWhen
>;
export const AttackDiscoveryApiScheduleActionNotifyWhen = z.enum([
  'onActiveAlert',
  'onThrottleInterval',
  'onActionGroupChange',
]);
export type AttackDiscoveryApiScheduleActionNotifyWhenEnum =
  typeof AttackDiscoveryApiScheduleActionNotifyWhen.enum;
export const AttackDiscoveryApiScheduleActionNotifyWhenEnum =
  AttackDiscoveryApiScheduleActionNotifyWhen.enum;

/**
 * Defines how often schedule actions are taken. Time interval in seconds, minutes, hours, or days.
 */
export type AttackDiscoveryApiScheduleActionThrottle = z.infer<
  typeof AttackDiscoveryApiScheduleActionThrottle
>;
export const AttackDiscoveryApiScheduleActionThrottle = z.string().regex(/^[1-9]\d*[smhd]$/);

/**
 * The action frequency defines when the action runs (for example, only on schedule execution or at specific time intervals).
 */
export type AttackDiscoveryApiScheduleActionFrequency = z.infer<
  typeof AttackDiscoveryApiScheduleActionFrequency
>;
export const AttackDiscoveryApiScheduleActionFrequency = z.object({
  /**
   * Action summary indicates whether we will send a summary notification about all the generate alerts or notification per individual alert
   */
  summary: z.boolean(),
  notify_when: AttackDiscoveryApiScheduleActionNotifyWhen,
  throttle: AttackDiscoveryApiScheduleActionThrottle.nullable(),
});

export type AttackDiscoveryApiScheduleAction = z.infer<typeof AttackDiscoveryApiScheduleAction>;
export const AttackDiscoveryApiScheduleAction = z.object({
  /**
   * The action type used for sending notifications.
   */
  action_type_id: z.string(),
  group: AttackDiscoveryApiScheduleActionGroup.optional(),
  id: AttackDiscoveryApiScheduleActionId,
  params: AttackDiscoveryApiScheduleActionParams,
  uuid: NonEmptyString.optional(),
  alerts_filter: AttackDiscoveryApiScheduleActionAlertsFilter.optional(),
  frequency: AttackDiscoveryApiScheduleActionFrequency.optional(),
});

/**
 * An attack discovery schedule execution status
 */
export type AttackDiscoveryApiScheduleExecutionStatus = z.infer<
  typeof AttackDiscoveryApiScheduleExecutionStatus
>;
export const AttackDiscoveryApiScheduleExecutionStatus = z.enum([
  'ok',
  'active',
  'error',
  'unknown',
  'warning',
]);
export type AttackDiscoveryApiScheduleExecutionStatusEnum =
  typeof AttackDiscoveryApiScheduleExecutionStatus.enum;
export const AttackDiscoveryApiScheduleExecutionStatusEnum =
  AttackDiscoveryApiScheduleExecutionStatus.enum;

/**
 * An attack discovery schedule execution information
 */
export type AttackDiscoveryApiScheduleExecution = z.infer<
  typeof AttackDiscoveryApiScheduleExecution
>;
export const AttackDiscoveryApiScheduleExecution = z.object({
  /**
   * Date of the execution
   */
  date: z.string().datetime(),
  /**
   * Duration of the execution
   */
  duration: z.number().optional(),
  /**
   * Status of the execution
   */
  status: AttackDiscoveryApiScheduleExecutionStatus,
  message: z.string().optional(),
});

/**
 * An attack discovery schedule
 */
export type AttackDiscoveryApiSchedule = z.infer<typeof AttackDiscoveryApiSchedule>;
export const AttackDiscoveryApiSchedule = z.object({
  /**
   * UUID of attack discovery schedule
   */
  id: z.string(),
  /**
   * The name of the schedule
   */
  name: z.string(),
  /**
   * The name of the user that created the schedule
   */
  created_by: z.string(),
  /**
   * The name of the user that updated the schedule
   */
  updated_by: z.string(),
  /**
   * The date the schedule was created
   */
  created_at: z.string().datetime(),
  /**
   * The date the schedule was updated
   */
  updated_at: z.string().datetime(),
  /**
   * Indicates whether the schedule is enabled
   */
  enabled: z.boolean(),
  /**
   * The attack discovery schedule configuration parameters
   */
  params: AttackDiscoveryApiScheduleParams,
  /**
   * The attack discovery schedule interval
   */
  schedule: IntervalApiSchedule,
  /**
   * The attack discovery schedule actions
   */
  actions: z.array(AttackDiscoveryApiScheduleAction),
  /**
   * The attack discovery schedule last execution summary
   */
  last_execution: AttackDiscoveryApiScheduleExecution.optional(),
});

/**
 * An attack discovery schedule create properties
 */
export type AttackDiscoveryApiScheduleCreateProps = z.infer<
  typeof AttackDiscoveryApiScheduleCreateProps
>;
export const AttackDiscoveryApiScheduleCreateProps = z.object({
  /**
   * The name of the schedule
   */
  name: z.string(),
  /**
   * Indicates whether the schedule is enabled
   */
  enabled: z.boolean().optional(),
  /**
   * The attack discovery schedule configuration parameters
   */
  params: AttackDiscoveryApiScheduleParams,
  /**
   * The attack discovery schedule interval
   */
  schedule: IntervalApiSchedule,
  /**
   * The attack discovery schedule actions
   */
  actions: z.array(AttackDiscoveryApiScheduleAction).optional(),
});

/**
 * An attack discovery schedule update properties
 */
export type AttackDiscoveryApiScheduleUpdateProps = z.infer<
  typeof AttackDiscoveryApiScheduleUpdateProps
>;
export const AttackDiscoveryApiScheduleUpdateProps = z.object({
  /**
   * The name of the schedule
   */
  name: z.string(),
  /**
   * The attack discovery schedule configuration parameters
   */
  params: AttackDiscoveryApiScheduleParams,
  /**
   * The attack discovery schedule interval
   */
  schedule: IntervalApiSchedule,
  /**
   * The attack discovery schedule actions
   */
  actions: z.array(AttackDiscoveryApiScheduleAction),
});
