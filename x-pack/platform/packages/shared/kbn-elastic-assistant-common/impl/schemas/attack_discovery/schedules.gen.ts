/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Attack Discovery Schedule Types
 *   version: not applicable
 */

import { z } from '@kbn/zod';

import { ApiConfig } from '../conversations/common_attributes.gen';
import { NonEmptyString } from '../common_attributes.gen';

/**
 * An query condition to filter alerts
 */
export type Query = z.infer<typeof Query>;
export const Query = z.object({
  query: z.union([z.string(), z.object({}).catchall(z.unknown())]),
  language: z.string(),
});

/**
 * The filter array used to define the conditions for when alerts are selected as an attack discovery context. Defaults to an empty array.
 */
export type Filters = z.infer<typeof Filters>;
export const Filters = z.array(z.unknown());

/**
 * An attack discovery schedule params
 */
export type AttackDiscoveryScheduleParams = z.infer<typeof AttackDiscoveryScheduleParams>;
export const AttackDiscoveryScheduleParams = z.object({
  /**
   * The index pattern to get alerts from
   */
  alertsIndexPattern: z.string(),
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.merge(
    z.object({
      /**
       * The name of the connector
       */
      name: z.string(),
    })
  ),
  end: z.string().optional(),
  query: Query.optional(),
  filters: Filters.optional(),
  combinedFilter: z.object({}).catchall(z.unknown()).optional(),
  size: z.number(),
  start: z.string().optional(),
});

export type IntervalSchedule = z.infer<typeof IntervalSchedule>;
export const IntervalSchedule = z.object({
  /**
   * The schedule interval
   */
  interval: z.string(),
});

/**
 * Optionally groups actions by use cases. Use `default` for alert notifications.
 */
export type AttackDiscoveryScheduleActionGroup = z.infer<typeof AttackDiscoveryScheduleActionGroup>;
export const AttackDiscoveryScheduleActionGroup = z.string();

/**
 * The connector ID.
 */
export type AttackDiscoveryScheduleActionId = z.infer<typeof AttackDiscoveryScheduleActionId>;
export const AttackDiscoveryScheduleActionId = z.string();

/**
 * Object containing the allowed connector fields, which varies according to the connector type.
 */
export type AttackDiscoveryScheduleActionParams = z.infer<
  typeof AttackDiscoveryScheduleActionParams
>;
export const AttackDiscoveryScheduleActionParams = z.object({}).catchall(z.unknown());

export type AttackDiscoveryScheduleActionAlertsFilter = z.infer<
  typeof AttackDiscoveryScheduleActionAlertsFilter
>;
export const AttackDiscoveryScheduleActionAlertsFilter = z.object({}).catchall(z.unknown());

/**
 * The condition for throttling the notification: `onActionGroupChange`, `onActiveAlert`,  or `onThrottleInterval`
 */
export type AttackDiscoveryScheduleActionNotifyWhen = z.infer<
  typeof AttackDiscoveryScheduleActionNotifyWhen
>;
export const AttackDiscoveryScheduleActionNotifyWhen = z.enum([
  'onActiveAlert',
  'onThrottleInterval',
  'onActionGroupChange',
]);
export type AttackDiscoveryScheduleActionNotifyWhenEnum =
  typeof AttackDiscoveryScheduleActionNotifyWhen.enum;
export const AttackDiscoveryScheduleActionNotifyWhenEnum =
  AttackDiscoveryScheduleActionNotifyWhen.enum;

/**
 * Defines how often schedule actions are taken. Time interval in seconds, minutes, hours, or days.
 */
export type AttackDiscoveryScheduleActionThrottle = z.infer<
  typeof AttackDiscoveryScheduleActionThrottle
>;
export const AttackDiscoveryScheduleActionThrottle = z.string().regex(/^[1-9]\d*[smhd]$/);

/**
 * The action frequency defines when the action runs (for example, only on schedule execution or at specific time intervals).
 */
export type AttackDiscoveryScheduleActionFrequency = z.infer<
  typeof AttackDiscoveryScheduleActionFrequency
>;
export const AttackDiscoveryScheduleActionFrequency = z.object({
  /**
   * Action summary indicates whether we will send a summary notification about all the generate alerts or notification per individual alert
   */
  summary: z.boolean(),
  notifyWhen: AttackDiscoveryScheduleActionNotifyWhen,
  throttle: AttackDiscoveryScheduleActionThrottle.nullable(),
});

export type AttackDiscoveryScheduleAction = z.infer<typeof AttackDiscoveryScheduleAction>;
export const AttackDiscoveryScheduleAction = z.object({
  /**
   * The action type used for sending notifications.
   */
  actionTypeId: z.string(),
  group: AttackDiscoveryScheduleActionGroup,
  id: AttackDiscoveryScheduleActionId,
  params: AttackDiscoveryScheduleActionParams,
  uuid: NonEmptyString.optional(),
  alertsFilter: AttackDiscoveryScheduleActionAlertsFilter.optional(),
  frequency: AttackDiscoveryScheduleActionFrequency.optional(),
});

/**
 * An attack discovery schedule execution status
 */
export type AttackDiscoveryScheduleExecutionStatus = z.infer<
  typeof AttackDiscoveryScheduleExecutionStatus
>;
export const AttackDiscoveryScheduleExecutionStatus = z.enum([
  'ok',
  'active',
  'error',
  'unknown',
  'warning',
]);
export type AttackDiscoveryScheduleExecutionStatusEnum =
  typeof AttackDiscoveryScheduleExecutionStatus.enum;
export const AttackDiscoveryScheduleExecutionStatusEnum =
  AttackDiscoveryScheduleExecutionStatus.enum;

/**
 * An attack discovery schedule execution information
 */
export type AttackDiscoveryScheduleExecution = z.infer<typeof AttackDiscoveryScheduleExecution>;
export const AttackDiscoveryScheduleExecution = z.object({
  /**
   * Date of the execution
   */
  date: z.string().datetime(),
  /**
   * Duration of the execution
   */
  duration: z.number().optional(),
  /**
   * Status of the execution
   */
  status: AttackDiscoveryScheduleExecutionStatus,
  message: z.string().optional(),
});

/**
 * An attack discovery schedule
 */
export type AttackDiscoverySchedule = z.infer<typeof AttackDiscoverySchedule>;
export const AttackDiscoverySchedule = z.object({
  /**
   * UUID of attack discovery schedule
   */
  id: z.string(),
  /**
   * The name of the schedule
   */
  name: z.string(),
  /**
   * The name of the user that created the schedule
   */
  createdBy: z.string(),
  /**
   * The name of the user that updated the schedule
   */
  updatedBy: z.string(),
  /**
   * The date the schedule was created
   */
  createdAt: z.string().datetime(),
  /**
   * The date the schedule was updated
   */
  updatedAt: z.string().datetime(),
  /**
   * Indicates whether the schedule is enabled
   */
  enabled: z.boolean(),
  /**
   * The attack discovery schedule configuration parameters
   */
  params: AttackDiscoveryScheduleParams,
  /**
   * The attack discovery schedule interval
   */
  schedule: IntervalSchedule,
  /**
   * The attack discovery schedule actions
   */
  actions: z.array(AttackDiscoveryScheduleAction),
  /**
   * The attack discovery schedule last execution summary
   */
  lastExecution: AttackDiscoveryScheduleExecution.optional(),
});

/**
 * An attack discovery schedule create properties
 */
export type AttackDiscoveryScheduleCreateProps = z.infer<typeof AttackDiscoveryScheduleCreateProps>;
export const AttackDiscoveryScheduleCreateProps = z.object({
  /**
   * The name of the schedule
   */
  name: z.string(),
  /**
   * Indicates whether the schedule is enabled
   */
  enabled: z.boolean().optional(),
  /**
   * The attack discovery schedule configuration parameters
   */
  params: AttackDiscoveryScheduleParams,
  /**
   * The attack discovery schedule interval
   */
  schedule: IntervalSchedule,
  /**
   * The attack discovery schedule actions
   */
  actions: z.array(AttackDiscoveryScheduleAction).optional(),
});

/**
 * An attack discovery schedule update properties
 */
export type AttackDiscoveryScheduleUpdateProps = z.infer<typeof AttackDiscoveryScheduleUpdateProps>;
export const AttackDiscoveryScheduleUpdateProps = z.object({
  /**
   * The name of the schedule
   */
  name: z.string(),
  /**
   * The attack discovery schedule configuration parameters
   */
  params: AttackDiscoveryScheduleParams,
  /**
   * The attack discovery schedule interval
   */
  schedule: IntervalSchedule,
  /**
   * The attack discovery schedule actions
   */
  actions: z.array(AttackDiscoveryScheduleAction),
});
