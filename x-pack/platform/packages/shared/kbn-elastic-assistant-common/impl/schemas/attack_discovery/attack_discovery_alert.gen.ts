/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: An Attack discovery that is persisted as a (security) alert
 *   version: not applicable
 */

import { z } from '@kbn/zod';

import { Replacements } from '../conversations/common_attributes.gen';
import { NonEmptyString, User } from '../common_attributes.gen';

/**
 * An attack discovery that's also an alert
 */
export type AttackDiscoveryAlert = z.infer<typeof AttackDiscoveryAlert>;
export const AttackDiscoveryAlert = z.object({
  /**
   * The alert IDs that the attack discovery is based on
   */
  alertIds: z.array(z.string()),
  /**
   * The optional kibana.alert.rule.uuid of the rule that generated this attack discovery (not applicable to ad hock runs)
   */
  alertRuleUuid: z.string().optional(),
  /**
   * The optional kibana.alert.workflow_status of this attack discovery
   */
  alertWorkflowStatus: z.string().optional(),
  /**
   * The ID of the connector that generated the attack discovery
   */
  connectorId: z.string(),
  /**
   * The (human readable) name of the connector that generated the attack discovery
   */
  connectorName: z.string(),
  /**
   * Details of the attack with bulleted markdown that always uses special syntax for field names and values from the source data.
   */
  detailsMarkdown: z.string(),
  /**
   * An optional, short (no more than a sentence) summary of the attack discovery featuring only the host.name and user.name fields (when they are applicable), using the same syntax
   */
  entitySummaryMarkdown: z.string().optional(),
  /**
   * The generation ID of the run that created the attack discovery
   */
  generationUuid: z.string(),
  /**
   * The unique ID of the attack discovery
   */
  id: z.string(),
  /**
   * An optional array of MITRE ATT&CK tactic for the attack discovery
   */
  mitreAttackTactics: z.array(z.string()).optional(),
  /**
   * Optional Key-value pairs that are used to replace placeholders in the markdown fields
   */
  replacements: Replacements.optional(),
  /**
   * The optional, (but typically populated after generation) risk score of the alert
   */
  riskScore: z.number().int().optional(),
  /**
   * A markdown summary of attack discovery, using the same syntax
   */
  summaryMarkdown: z.string(),
  /**
   * The time the attack discovery was generated
   */
  timestamp: NonEmptyString,
  /**
   * A title for the attack discovery, in plain text
   */
  title: z.string(),
  /**
   * The optional id of the user who generated the attack discovery
   */
  userId: z.string().optional(),
  /**
   * The optional username of the user who generated the attack discovery, (not applicable to attack discoveries generated by rules)
   */
  userName: z.string().optional(),
  /**
   * The optional array of users who may view the attack discovery. When empty, (or not present), all users may view the attack discovery.
   */
  users: z.array(User).optional(),
});
