/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Bulk Prompts Actions API endpoint
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';

import {
  BulkActionBase,
  NonEmptyString,
  NonEmptyTimestamp,
  User,
  BulkCrudActionSummary,
} from '../common_attributes.gen';

/**
 * Reason why a prompt was skipped during the bulk action.
 */
export type PromptsBulkActionSkipReason = z.infer<typeof PromptsBulkActionSkipReason>;
export const PromptsBulkActionSkipReason = z.literal('PROMPT_FIELD_NOT_MODIFIED');

export type PromptsBulkActionSkipResult = z.infer<typeof PromptsBulkActionSkipResult>;
export const PromptsBulkActionSkipResult = z.object({
  /**
   * The ID of the prompt that was skipped.
   */
  id: z.string(),
  /**
   * The name of the prompt that was skipped.
   */
  name: z.string().optional(),
  /**
   * The reason for skipping the prompt.
   */
  skip_reason: PromptsBulkActionSkipReason,
});

export type PromptDetailsInError = z.infer<typeof PromptDetailsInError>;
export const PromptDetailsInError = z.object({
  /**
   * The ID of the prompt that encountered an error.
   */
  id: z.string(),
  /**
   * The name of the prompt that encountered an error.
   */
  name: z.string().optional(),
});

/**
 * Type of the prompt (either system or quick).
 */
export type PromptType = z.infer<typeof PromptType>;
export const PromptType = z.enum(['system', 'quick']);
export type PromptTypeEnum = typeof PromptType.enum;
export const PromptTypeEnum = PromptType.enum;

export type NormalizedPromptError = z.infer<typeof NormalizedPromptError>;
export const NormalizedPromptError = z.object({
  /**
   * A message describing the error encountered.
   */
  message: z.string(),
  /**
   * The HTTP status code associated with the error.
   */
  status_code: z.number().int(),
  /**
   * A code representing the error type.
   */
  err_code: z.string().optional(),
  /**
   * List of prompts that encountered errors.
   */
  prompts: z.array(PromptDetailsInError),
});

export type PromptResponse = z.infer<typeof PromptResponse>;
export const PromptResponse = z.object({
  id: NonEmptyString,
  timestamp: NonEmptyTimestamp.optional(),
  /**
   * The name of the prompt.
   */
  name: z.string(),
  /**
   * The type of the prompt.
   */
  promptType: PromptType,
  /**
   * The content of the prompt.
   */
  content: z.string(),
  /**
   * Categories associated with the prompt.
   */
  categories: z.array(z.string()).optional(),
  /**
   * The color associated with the prompt.
   */
  color: z.string().optional(),
  /**
   * Whether this prompt is the default for new conversations.
   */
  isNewConversationDefault: z.boolean().optional(),
  /**
   * Whether this prompt is the default.
   */
  isDefault: z.boolean().optional(),
  /**
   * The consumer that the prompt is associated with.
   */
  consumer: z.string().optional(),
  /**
   * The timestamp of when the prompt was last updated.
   */
  updatedAt: z.string().optional(),
  /**
   * The user who last updated the prompt.
   */
  updatedBy: z.string().optional(),
  /**
   * The timestamp of when the prompt was created.
   */
  createdAt: z.string().optional(),
  /**
   * The user who created the prompt.
   */
  createdBy: z.string().optional(),
  /**
   * List of users associated with the prompt.
   */
  users: z.array(User).optional(),
  /**
   * Kibana space where the prompt is located.
   */
  namespace: z.string().optional(),
});

export type PromptsBulkCrudActionResults = z.infer<typeof PromptsBulkCrudActionResults>;
export const PromptsBulkCrudActionResults = z.object({
  /**
   * List of prompts that were updated.
   */
  updated: z.array(PromptResponse),
  /**
   * List of prompts that were created.
   */
  created: z.array(PromptResponse),
  /**
   * List of IDs of prompts that were deleted.
   */
  deleted: z.array(z.string()),
  /**
   * List of prompts that were skipped.
   */
  skipped: z.array(PromptsBulkActionSkipResult),
});

export type PromptsBulkCrudActionResponse = z.infer<typeof PromptsBulkCrudActionResponse>;
export const PromptsBulkCrudActionResponse = z.object({
  /**
   * Indicates if the bulk action was successful.
   */
  success: z.boolean().optional(),
  /**
   * The HTTP status code of the response.
   */
  status_code: z.number().int().optional(),
  /**
   * A message describing the result of the bulk action.
   */
  message: z.string().optional(),
  /**
   * The number of prompts processed in the bulk action.
   */
  prompts_count: z.number().int().optional(),
  attributes: z.object({
    results: PromptsBulkCrudActionResults,
    summary: BulkCrudActionSummary,
    errors: z.array(NormalizedPromptError).optional(),
  }),
});

export type PromptCreateProps = z.infer<typeof PromptCreateProps>;
export const PromptCreateProps = z.object({
  /**
   * The name of the prompt.
   */
  name: z.string(),
  /**
   * The type of the prompt.
   */
  promptType: PromptType,
  /**
   * The content of the prompt.
   */
  content: z.string(),
  /**
   * The color associated with the prompt.
   */
  color: z.string().optional(),
  /**
   * List of categories for the prompt.
   */
  categories: z.array(z.string()).optional(),
  /**
   * Whether this prompt should be the default for new conversations.
   */
  isNewConversationDefault: z.boolean().optional(),
  /**
   * Whether this prompt should be the default.
   */
  isDefault: z.boolean().optional(),
  /**
   * The consumer associated with the prompt.
   */
  consumer: z.string().optional(),
});

export type PromptUpdateProps = z.infer<typeof PromptUpdateProps>;
export const PromptUpdateProps = z.object({
  /**
   * The ID of the prompt to update.
   */
  id: z.string(),
  /**
   * The updated content for the prompt.
   */
  content: z.string().optional(),
  /**
   * The updated color associated with the prompt.
   */
  color: z.string().optional(),
  /**
   * The updated categories for the prompt.
   */
  categories: z.array(z.string()).optional(),
  /**
   * Whether the prompt should be the default for new conversations.
   */
  isNewConversationDefault: z.boolean().optional(),
  /**
   * Whether this prompt should be the default.
   */
  isDefault: z.boolean().optional(),
  /**
   * The updated consumer for the prompt.
   */
  consumer: z.string().optional(),
});

export type PerformPromptsBulkActionRequestBody = z.infer<
  typeof PerformPromptsBulkActionRequestBody
>;
export const PerformPromptsBulkActionRequestBody = z.object({
  /**
   * Criteria for deleting prompts in bulk.
   */
  delete: BulkActionBase.optional(),
  /**
   * List of prompts to be created.
   */
  create: z.array(PromptCreateProps).optional(),
  /**
   * List of prompts to be updated.
   */
  update: z.array(PromptUpdateProps).optional(),
});
export type PerformPromptsBulkActionRequestBodyInput = z.input<
  typeof PerformPromptsBulkActionRequestBody
>;

export type PerformPromptsBulkActionResponse = z.infer<typeof PerformPromptsBulkActionResponse>;
export const PerformPromptsBulkActionResponse = PromptsBulkCrudActionResponse;
