/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Bulk Anonymization Fields Actions API endpoint
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';

import {
  BulkActionBase,
  NonEmptyString,
  NonEmptyTimestamp,
  BulkCrudActionSummary,
} from '../common_attributes.gen';

/**
 * Reason why the anonymization field was not modified.
 */
export type AnonymizationFieldsBulkActionSkipReason = z.infer<
  typeof AnonymizationFieldsBulkActionSkipReason
>;
export const AnonymizationFieldsBulkActionSkipReason = z.literal(
  'ANONYMIZATION_FIELD_NOT_MODIFIED'
);

export type AnonymizationFieldsBulkActionSkipResult = z.infer<
  typeof AnonymizationFieldsBulkActionSkipResult
>;
export const AnonymizationFieldsBulkActionSkipResult = z.object({
  /**
   * The ID of the anonymization field that was not modified.
   */
  id: z.string(),
  /**
   * Name of the anonymization field that was not modified.
   */
  name: z.string().optional(),
  /**
   * Reason why the anonymization field was not modified.
   */
  skip_reason: AnonymizationFieldsBulkActionSkipReason,
});

export type AnonymizationFieldDetailsInError = z.infer<typeof AnonymizationFieldDetailsInError>;
export const AnonymizationFieldDetailsInError = z.object({
  /**
   * The ID of the anonymization field.
   */
  id: z.string(),
  /**
   * Name of the anonymization field.
   */
  name: z.string().optional(),
});

export type NormalizedAnonymizationFieldError = z.infer<typeof NormalizedAnonymizationFieldError>;
export const NormalizedAnonymizationFieldError = z.object({
  /**
   * Error message.
   */
  message: z.string(),
  /**
   * Status code of the response.
   */
  status_code: z.number().int(),
  /**
   * Error code indicating the type of failure.
   */
  err_code: z.string().optional(),
  /**
   * Array of anonymization fields that caused the error.
   */
  anonymization_fields: z.array(AnonymizationFieldDetailsInError),
});

export type AnonymizationFieldResponse = z.infer<typeof AnonymizationFieldResponse>;
export const AnonymizationFieldResponse = z.object({
  /**
   * The ID of the anonymization field.
   */
  id: NonEmptyString,
  /**
   * Timestamp when the anonymization field was initially created.
   */
  timestamp: NonEmptyTimestamp.optional(),
  /**
   * Name of the anonymization field.
   */
  field: z.string(),
  /**
   * Whether this field is allowed to be sent to the model.
   */
  allowed: z.boolean().optional(),
  /**
   * Whether this field should be anonymized.
   */
  anonymized: z.boolean().optional(),
  /**
   * Timestamp of the last update.
   */
  updatedAt: z.string().optional(),
  /**
   * Username of the person who last updated the field.
   */
  updatedBy: z.string().optional(),
  /**
   * Timestamp of when the anonymization field was created.
   */
  createdAt: z.string().optional(),
  /**
   * Username of the person who created the anonymization field.
   */
  createdBy: z.string().optional(),
  /**
   * Kibana space in which this anonymization field exists.
   */
  namespace: z.string().optional(),
});

export type AnonymizationFieldsBulkCrudActionResults = z.infer<
  typeof AnonymizationFieldsBulkCrudActionResults
>;
export const AnonymizationFieldsBulkCrudActionResults = z.object({
  /**
   * List of anonymization fields successfully updated.
   */
  updated: z.array(AnonymizationFieldResponse),
  /**
   * List of anonymization fields successfully created.
   */
  created: z.array(AnonymizationFieldResponse),
  deleted: z.array(z.string()),
  /**
   * List of anonymization fields that were skipped during the operation.
   */
  skipped: z.array(AnonymizationFieldsBulkActionSkipResult),
});

export type AnonymizationFieldsBulkCrudActionResponse = z.infer<
  typeof AnonymizationFieldsBulkCrudActionResponse
>;
export const AnonymizationFieldsBulkCrudActionResponse = z.object({
  /**
   * Indicates if the bulk action was successful.
   */
  success: z.boolean().optional(),
  /**
   * HTTP status code returned.
   */
  status_code: z.number().int().optional(),
  /**
   * Message providing information about the bulk action result.
   */
  message: z.string().optional(),
  /**
   * Total number of anonymization fields processed.
   */
  anonymization_fields_count: z.number().int().optional(),
  attributes: z.object({
    results: AnonymizationFieldsBulkCrudActionResults,
    summary: BulkCrudActionSummary,
    /**
     * List of errors that occurred during the bulk operation.
     */
    errors: z.array(NormalizedAnonymizationFieldError).optional(),
  }),
});

export type AnonymizationFieldCreateProps = z.infer<typeof AnonymizationFieldCreateProps>;
export const AnonymizationFieldCreateProps = z.object({
  /**
   * Name of the anonymization field to create.
   */
  field: z.string(),
  /**
   * Whether this field is allowed to be sent to the model.
   */
  allowed: z.boolean().optional(),
  /**
   * Whether this field should be anonymized.
   */
  anonymized: z.boolean().optional(),
});

export type AnonymizationFieldUpdateProps = z.infer<typeof AnonymizationFieldUpdateProps>;
export const AnonymizationFieldUpdateProps = z.object({
  /**
   * The ID of the anonymization field to update.
   */
  id: z.string(),
  /**
   * Whether this field is allowed to be sent to the model.
   */
  allowed: z.boolean().optional(),
  /**
   * Whether this field should be anonymized.
   */
  anonymized: z.boolean().optional(),
});

export type PerformAnonymizationFieldsBulkActionRequestBody = z.infer<
  typeof PerformAnonymizationFieldsBulkActionRequestBody
>;
export const PerformAnonymizationFieldsBulkActionRequestBody = z.object({
  /**
   * Object containing the query to filter anonymization fields and/or an array of anonymization field IDs to delete.
   */
  delete: BulkActionBase.optional(),
  /**
   * Array of anonymization fields to create.
   */
  create: z.array(AnonymizationFieldCreateProps).optional(),
  /**
   * Array of anonymization fields to update.
   */
  update: z.array(AnonymizationFieldUpdateProps).optional(),
});
export type PerformAnonymizationFieldsBulkActionRequestBodyInput = z.input<
  typeof PerformAnonymizationFieldsBulkActionRequestBody
>;

export type PerformAnonymizationFieldsBulkActionResponse = z.infer<
  typeof PerformAnonymizationFieldsBulkActionResponse
>;
export const PerformAnonymizationFieldsBulkActionResponse =
  AnonymizationFieldsBulkCrudActionResponse;
