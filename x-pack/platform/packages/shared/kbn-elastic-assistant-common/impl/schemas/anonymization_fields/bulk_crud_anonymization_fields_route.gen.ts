/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Bulk Anonymization Fields Actions API endpoint
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';

import { NonEmptyString, NonEmptyTimestamp } from '../common_attributes.gen';

/**
 * Reason why the anonymization field was not modified
 */
export type AnonymizationFieldsBulkActionSkipReason = z.infer<
  typeof AnonymizationFieldsBulkActionSkipReason
>;
export const AnonymizationFieldsBulkActionSkipReason = z.literal(
  'ANONYMIZATION_FIELD_NOT_MODIFIED'
);

export type AnonymizationFieldsBulkActionSkipResult = z.infer<
  typeof AnonymizationFieldsBulkActionSkipResult
>;
export const AnonymizationFieldsBulkActionSkipResult = z.object({
  /**
   * The id of the anonymization field that was not modified
   */
  id: z.string(),
  /**
   * Name of the anonymization field that was not modified
   */
  name: z.string().optional(),
  /**
   * Reason why the anonymization field was not modified
   */
  skip_reason: AnonymizationFieldsBulkActionSkipReason,
});

export type AnonymizationFieldDetailsInError = z.infer<typeof AnonymizationFieldDetailsInError>;
export const AnonymizationFieldDetailsInError = z.object({
  /**
   * The id of the anonymization field
   */
  id: z.string(),
  /**
   * Name of the anonymization field
   */
  name: z.string().optional(),
});

export type NormalizedAnonymizationFieldError = z.infer<typeof NormalizedAnonymizationFieldError>;
export const NormalizedAnonymizationFieldError = z.object({
  /**
   * Error message
   */
  message: z.string(),
  /**
   * Status code of the response
   */
  status_code: z.number().int(),
  /**
   * Error code
   */
  err_code: z.string().optional(),
  /**
   * array of anonymization fields that caused the error
   */
  anonymization_fields: z.array(AnonymizationFieldDetailsInError),
});

export type AnonymizationFieldResponse = z.infer<typeof AnonymizationFieldResponse>;
export const AnonymizationFieldResponse = z.object({
  /**
   * The id of the anonymization field
   */
  id: NonEmptyString,
  /**
   * Timestamp of the field creation
   */
  timestamp: NonEmptyTimestamp.optional(),
  /**
   * Field name
   */
  field: z.string(),
  /**
   * Whether field is allowed to be sent to the model
   */
  allowed: z.boolean().optional(),
  /**
   * Whether field is anonymized
   */
  anonymized: z.boolean().optional(),
  /**
   * Timestamp of the last update
   */
  updatedAt: z.string().optional(),
  /**
   * User who last updated the field
   */
  updatedBy: z.string().optional(),
  /**
   * Timestamp of the creation
   */
  createdAt: z.string().optional(),
  /**
   * User who created the field
   */
  createdBy: z.string().optional(),
  /**
   * Kibana space
   */
  namespace: z.string().optional(),
});

export type AnonymizationFieldsBulkCrudActionResults = z.infer<
  typeof AnonymizationFieldsBulkCrudActionResults
>;
export const AnonymizationFieldsBulkCrudActionResults = z.object({
  updated: z.array(AnonymizationFieldResponse),
  created: z.array(AnonymizationFieldResponse),
  deleted: z.array(z.string()),
  skipped: z.array(AnonymizationFieldsBulkActionSkipResult),
});

export type BulkCrudActionSummary = z.infer<typeof BulkCrudActionSummary>;
export const BulkCrudActionSummary = z.object({
  failed: z.number().int(),
  skipped: z.number().int(),
  succeeded: z.number().int(),
  total: z.number().int(),
});

export type AnonymizationFieldsBulkCrudActionResponse = z.infer<
  typeof AnonymizationFieldsBulkCrudActionResponse
>;
export const AnonymizationFieldsBulkCrudActionResponse = z.object({
  success: z.boolean().optional(),
  status_code: z.number().int().optional(),
  message: z.string().optional(),
  anonymization_fields_count: z.number().int().optional(),
  attributes: z.object({
    results: AnonymizationFieldsBulkCrudActionResults,
    summary: BulkCrudActionSummary,
    errors: z.array(NormalizedAnonymizationFieldError).optional(),
  }),
});

export type BulkActionBase = z.infer<typeof BulkActionBase>;
export const BulkActionBase = z.object({
  query: z.string().optional(),
  ids: z.array(z.string()).min(1).optional(),
});

export type AnonymizationFieldCreateProps = z.infer<typeof AnonymizationFieldCreateProps>;
export const AnonymizationFieldCreateProps = z.object({
  field: z.string(),
  allowed: z.boolean().optional(),
  anonymized: z.boolean().optional(),
});

export type AnonymizationFieldUpdateProps = z.infer<typeof AnonymizationFieldUpdateProps>;
export const AnonymizationFieldUpdateProps = z.object({
  id: z.string(),
  allowed: z.boolean().optional(),
  anonymized: z.boolean().optional(),
});

export type PerformAnonymizationFieldsBulkActionRequestBody = z.infer<
  typeof PerformAnonymizationFieldsBulkActionRequestBody
>;
export const PerformAnonymizationFieldsBulkActionRequestBody = z.object({
  /**
   * Object with query to filter anonymization fields and array of anonymization fields IDs
   */
  delete: BulkActionBase.optional(),
  /**
   * Array of objects with anonymization fields to create
   */
  create: z.array(AnonymizationFieldCreateProps).optional(),
  /**
   * Array of objects with anonymization fields to update
   */
  update: z.array(AnonymizationFieldUpdateProps).optional(),
});
export type PerformAnonymizationFieldsBulkActionRequestBodyInput = z.input<
  typeof PerformAnonymizationFieldsBulkActionRequestBody
>;

export type PerformAnonymizationFieldsBulkActionResponse = z.infer<
  typeof PerformAnonymizationFieldsBulkActionResponse
>;
export const PerformAnonymizationFieldsBulkActionResponse =
  AnonymizationFieldsBulkCrudActionResponse;
