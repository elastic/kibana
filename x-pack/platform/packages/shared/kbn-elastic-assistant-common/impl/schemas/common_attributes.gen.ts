/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Elastic AI Assistant Attributes
 *   version: not applicable
 */

import { z } from '@kbn/zod';
import { isNonEmptyString } from '@kbn/zod-helpers';

/**
 * A string that does not contain only whitespace characters.
 */
export type NonEmptyString = z.infer<typeof NonEmptyString>;
export const NonEmptyString = z.string().min(1).superRefine(isNonEmptyString);

/**
 * A string that represents a timestamp in ISO 8601 format and does not contain only whitespace characters.
 */
export type NonEmptyTimestamp = z.infer<typeof NonEmptyTimestamp>;
export const NonEmptyTimestamp = z.string().min(1).superRefine(isNonEmptyString);

/**
 * A universally unique identifier.
 */
export type UUID = z.infer<typeof UUID>;
export const UUID = z.string().uuid();

/**
 * Could be any string, not necessarily a UUID.
 */
export type User = z.infer<typeof User>;
export const User = z.object({
  /**
   * User id.
   */
  id: z.string().optional(),
  /**
   * User name.
   */
  name: z.string().optional(),
});

/**
 * The order in which results are sorted.
 */
export type SortOrder = z.infer<typeof SortOrder>;
export const SortOrder = z.enum(['asc', 'desc']);
export type SortOrderEnum = typeof SortOrder.enum;
export const SortOrderEnum = SortOrder.enum;

/**
 * User screen context.
 */
export type ScreenContext = z.infer<typeof ScreenContext>;
export const ScreenContext = z.object({
  /**
   * The local timezone of the user.
   */
  timeZone: z.string().optional(),
});

export type BulkCrudActionSummary = z.infer<typeof BulkCrudActionSummary>;
export const BulkCrudActionSummary = z.object({
  /**
   * The number of failed actions.
   */
  failed: z.number().int(),
  /**
   * The number of skipped actions.
   */
  skipped: z.number().int(),
  /**
   * The number of successfully performed actions.
   */
  succeeded: z.number().int(),
  /**
   * The total number of actions attempted.
   */
  total: z.number().int(),
});

export type BulkActionBase = z.infer<typeof BulkActionBase>;
export const BulkActionBase = z.object({
  /**
   * Query to filter the bulk action.
   */
  query: z.string().optional(),
  /**
   * Array of IDs to apply the action to.
   */
  ids: z.array(z.string()).min(1).optional(),
});

/**
 * User screen context.
 */
export type PromptIds = z.infer<typeof PromptIds>;
export const PromptIds = z.object({
  /**
   * The unique identifier for a specific prompt.
   */
  promptId: z.string(),
  /**
   * The unique identifier for a group of prompts.
   */
  promptGroupId: z.string(),
});
