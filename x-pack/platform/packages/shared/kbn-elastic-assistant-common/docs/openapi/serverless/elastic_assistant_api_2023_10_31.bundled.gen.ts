/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Security AI Assistant API (Elastic Cloud Serverless)
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';
import { isNonEmptyString } from '@kbn/zod-helpers';

export type AnonymizationFieldCreateProps = z.infer<typeof AnonymizationFieldCreateProps>;
export const AnonymizationFieldCreateProps = z.object({
  allowed: z.boolean().optional(),
  anonymized: z.boolean().optional(),
  field: z.string(),
});

export type AnonymizationFieldDetailsInError = z.infer<typeof AnonymizationFieldDetailsInError>;
export const AnonymizationFieldDetailsInError = z.object({
  id: z.string(),
  name: z.string().optional(),
});

/**
 * A string that does not contain only whitespace characters
 */
export type NonEmptyString = z.infer<typeof NonEmptyString>;
export const NonEmptyString = z.string().min(1).superRefine(isNonEmptyString);

export type AnonymizationFieldResponse = z.infer<typeof AnonymizationFieldResponse>;
export const AnonymizationFieldResponse = z.object({
  allowed: z.boolean().optional(),
  anonymized: z.boolean().optional(),
  createdAt: z.string().optional(),
  createdBy: z.string().optional(),
  field: z.string(),
  id: NonEmptyString,
  /**
   * Kibana space
   */
  namespace: z.string().optional(),
  timestamp: NonEmptyString.optional(),
  updatedAt: z.string().optional(),
  updatedBy: z.string().optional(),
});

export type AnonymizationFieldsBulkActionSkipReason = z.infer<
  typeof AnonymizationFieldsBulkActionSkipReason
>;
export const AnonymizationFieldsBulkActionSkipReason = z.literal(
  'ANONYMIZATION_FIELD_NOT_MODIFIED'
);

export type AnonymizationFieldsBulkActionSkipResult = z.infer<
  typeof AnonymizationFieldsBulkActionSkipResult
>;
export const AnonymizationFieldsBulkActionSkipResult = z.object({
  id: z.string(),
  name: z.string().optional(),
  skip_reason: AnonymizationFieldsBulkActionSkipReason,
});

export type NormalizedAnonymizationFieldError = z.infer<typeof NormalizedAnonymizationFieldError>;
export const NormalizedAnonymizationFieldError = z.object({
  anonymization_fields: z.array(AnonymizationFieldDetailsInError),
  err_code: z.string().optional(),
  message: z.string(),
  status_code: z.number().int(),
});

export type AnonymizationFieldsBulkCrudActionResults = z.infer<
  typeof AnonymizationFieldsBulkCrudActionResults
>;
export const AnonymizationFieldsBulkCrudActionResults = z.object({
  created: z.array(AnonymizationFieldResponse),
  deleted: z.array(z.string()),
  skipped: z.array(AnonymizationFieldsBulkActionSkipResult),
  updated: z.array(AnonymizationFieldResponse),
});

export type BulkCrudActionSummary = z.infer<typeof BulkCrudActionSummary>;
export const BulkCrudActionSummary = z.object({
  failed: z.number().int(),
  skipped: z.number().int(),
  succeeded: z.number().int(),
  total: z.number().int(),
});

export type AnonymizationFieldsBulkCrudActionResponse = z.infer<
  typeof AnonymizationFieldsBulkCrudActionResponse
>;
export const AnonymizationFieldsBulkCrudActionResponse = z.object({
  anonymization_fields_count: z.number().int().optional(),
  attributes: z.object({
    errors: z.array(NormalizedAnonymizationFieldError).optional(),
    results: AnonymizationFieldsBulkCrudActionResults,
    summary: BulkCrudActionSummary,
  }),
  message: z.string().optional(),
  status_code: z.number().int().optional(),
  success: z.boolean().optional(),
});

export type AnonymizationFieldUpdateProps = z.infer<typeof AnonymizationFieldUpdateProps>;
export const AnonymizationFieldUpdateProps = z.object({
  allowed: z.boolean().optional(),
  anonymized: z.boolean().optional(),
  id: z.string(),
});

/**
 * Provider
 */
export type Provider = z.infer<typeof Provider>;
export const Provider = z.enum(['OpenAI', 'Azure OpenAI', 'Other']);
export type ProviderEnum = typeof Provider.enum;
export const ProviderEnum = Provider.enum;

export type ApiConfig = z.infer<typeof ApiConfig>;
export const ApiConfig = z.object({
  /**
   * action type id
   */
  actionTypeId: z.string(),
  /**
   * connector id
   */
  connectorId: z.string(),
  /**
   * defaultSystemPromptId
   */
  defaultSystemPromptId: z.string().optional(),
  /**
   * model
   */
  model: z.string().optional(),
  /**
   * Provider
   */
  provider: Provider.optional(),
});

/**
 * The basis of a content reference
 */
export type BaseContentReference = z.infer<typeof BaseContentReference>;
export const BaseContentReference = z.object({
  /**
   * Id of the content reference
   */
  id: z.string(),
  /**
   * Type of the content reference
   */
  type: z.string(),
});

export type MessageData = z.infer<typeof MessageData>;
export const MessageData = z.object({}).catchall(z.unknown());

/**
 * Message role.
 */
export type ChatMessageRole = z.infer<typeof ChatMessageRole>;
export const ChatMessageRole = z.enum(['system', 'user', 'assistant']);
export type ChatMessageRoleEnum = typeof ChatMessageRole.enum;
export const ChatMessageRoleEnum = ChatMessageRole.enum;

/**
 * AI assistant message.
 */
export type ChatMessage = z.infer<typeof ChatMessage>;
export const ChatMessage = z.object({
  /**
   * Message content.
   */
  content: z.string().optional(),
  /**
   * ECS object to attach to the context of the message.
   */
  data: MessageData.optional(),
  fields_to_anonymize: z.array(z.string()).optional(),
  /**
   * Message role.
   */
  role: ChatMessageRole,
});

export type ChatCompleteProps = z.infer<typeof ChatCompleteProps>;
export const ChatCompleteProps = z.object({
  connectorId: z.string(),
  conversationId: z.string().optional(),
  isStream: z.boolean().optional(),
  langSmithApiKey: z.string().optional(),
  langSmithProject: z.string().optional(),
  messages: z.array(ChatMessage),
  model: z.string().optional(),
  persist: z.boolean(),
  promptId: z.string().optional(),
  responseLanguage: z.string().optional(),
});

/**
 * References a knowledge base entry
 */
export type KnowledgeBaseEntryContentReference = z.infer<typeof KnowledgeBaseEntryContentReference>;
export const KnowledgeBaseEntryContentReference = BaseContentReference.merge(
  z.object({
    /**
     * Id of the Knowledge Base Entry
     */
    knowledgeBaseEntryId: z.string(),
    /**
     * Name of the knowledge base entry
     */
    knowledgeBaseEntryName: z.string(),
    type: z.literal('KnowledgeBaseEntry'),
  })
);

/**
 * References a security alert
 */
export type SecurityAlertContentReference = z.infer<typeof SecurityAlertContentReference>;
export const SecurityAlertContentReference = BaseContentReference.merge(
  z.object({
    /**
     * ID of the Alert
     */
    alertId: z.string(),
    type: z.literal('SecurityAlert'),
  })
);

/**
 * References the security alerts page
 */
export type SecurityAlertsPageContentReference = z.infer<typeof SecurityAlertsPageContentReference>;
export const SecurityAlertsPageContentReference = BaseContentReference.merge(
  z.object({
    type: z.literal('SecurityAlertsPage'),
  })
);

/**
 * References the product documentation
 */
export type ProductDocumentationContentReference = z.infer<
  typeof ProductDocumentationContentReference
>;
export const ProductDocumentationContentReference = BaseContentReference.merge(
  z.object({
    /**
     * Title of the documentation
     */
    title: z.string(),
    type: z.literal('ProductDocumentation'),
    /**
     * URL to the documentation
     */
    url: z.string(),
  })
);

/**
 * References an ESQL query
 */
export type EsqlContentReference = z.infer<typeof EsqlContentReference>;
export const EsqlContentReference = BaseContentReference.merge(
  z.object({
    /**
     * Label of the query
     */
    label: z.string(),
    /**
     * An ESQL query
     */
    query: z.string(),
    /**
     * Time range to select in the time picker.
     */
    timerange: z
      .object({
        from: z.string(),
        to: z.string(),
      })
      .optional(),
    type: z.literal('EsqlQuery'),
  })
);

/**
 * A union of all content reference types
 */
export type ContentReferences = z.infer<typeof ContentReferences>;
export const ContentReferences = z
  .object({})
  .catchall(
    z.union([
      KnowledgeBaseEntryContentReference,
      SecurityAlertContentReference,
      SecurityAlertsPageContentReference,
      ProductDocumentationContentReference,
      EsqlContentReference,
    ])
  );

/**
 * The conversation category.
 */
export type ConversationCategory = z.infer<typeof ConversationCategory>;
export const ConversationCategory = z.enum(['assistant', 'insights']);
export type ConversationCategoryEnum = typeof ConversationCategory.enum;
export const ConversationCategoryEnum = ConversationCategory.enum;

/**
 * The conversation confidence.
 */
export type ConversationConfidence = z.infer<typeof ConversationConfidence>;
export const ConversationConfidence = z.enum(['low', 'medium', 'high']);
export type ConversationConfidenceEnum = typeof ConversationConfidence.enum;
export const ConversationConfidenceEnum = ConversationConfidence.enum;

/**
 * Message metadata
 */
export type MessageMetadata = z.infer<typeof MessageMetadata>;
export const MessageMetadata = z.object({
  /**
   * Data refered to by the message content.
   */
  contentReferences: ContentReferences.optional(),
});

export type Reader = z.infer<typeof Reader>;
export const Reader = z.object({}).catchall(z.unknown());

/**
 * Message role.
 */
export type MessageRole = z.infer<typeof MessageRole>;
export const MessageRole = z.enum(['system', 'user', 'assistant']);
export type MessageRoleEnum = typeof MessageRole.enum;
export const MessageRoleEnum = MessageRole.enum;

/**
 * trace Data
 */
export type TraceData = z.infer<typeof TraceData>;
export const TraceData = z.object({
  /**
   * Could be any string, not necessarily a UUID
   */
  traceId: z.string().optional(),
  /**
   * Could be any string, not necessarily a UUID
   */
  transactionId: z.string().optional(),
});

/**
 * AI assistant conversation message.
 */
export type Message = z.infer<typeof Message>;
export const Message = z.object({
  /**
   * Message content.
   */
  content: z.string(),
  /**
   * Is error message.
   */
  isError: z.boolean().optional(),
  /**
   * metadata
   */
  metadata: MessageMetadata.optional(),
  /**
   * Message content.
   */
  reader: Reader.optional(),
  /**
   * Message role.
   */
  role: MessageRole,
  /**
   * The timestamp message was sent or received.
   */
  timestamp: NonEmptyString,
  /**
   * trace Data
   */
  traceData: TraceData.optional(),
});

/**
 * Replacements object used to anonymize/deanomymize messsages
 */
export type Replacements = z.infer<typeof Replacements>;
export const Replacements = z.object({}).catchall(z.string());

export type ConversationCreateProps = z.infer<typeof ConversationCreateProps>;
export const ConversationCreateProps = z.object({
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * The conversation category.
   */
  category: ConversationCategory.optional(),
  /**
   * excludeFromLastConversationStorage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  /**
   * The conversation id.
   */
  id: z.string().optional(),
  /**
   * Is default conversation.
   */
  isDefault: z.boolean().optional(),
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  replacements: Replacements.optional(),
  /**
   * The conversation title.
   */
  title: z.string(),
});

export type ConversationSummary = z.infer<typeof ConversationSummary>;
export const ConversationSummary = z.object({
  /**
   * How confident you are about this being a correct and useful learning.
   */
  confidence: ConversationConfidence.optional(),
  /**
   * Summary text of the conversation over time.
   */
  content: z.string().optional(),
  /**
   * Define if summary is marked as publicly available.
   */
  public: z.boolean().optional(),
  /**
   * The timestamp summary was updated.
   */
  timestamp: NonEmptyString.optional(),
});

/**
 * Could be any string, not necessarily a UUID
 */
export type User = z.infer<typeof User>;
export const User = z.object({
  /**
   * User id
   */
  id: z.string().optional(),
  /**
   * User name
   */
  name: z.string().optional(),
});

export type ConversationResponse = z.infer<typeof ConversationResponse>;
export const ConversationResponse = z.object({
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * The conversation category.
   */
  category: ConversationCategory,
  /**
   * The last time conversation was updated.
   */
  createdAt: z.string(),
  /**
   * excludeFromLastConversationStorage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  id: NonEmptyString,
  /**
   * Is default conversation.
   */
  isDefault: z.boolean().optional(),
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  /**
   * Kibana space
   */
  namespace: z.string(),
  replacements: Replacements.optional(),
  summary: ConversationSummary.optional(),
  timestamp: NonEmptyString.optional(),
  /**
   * The conversation title.
   */
  title: z.string(),
  /**
   * The last time conversation was updated.
   */
  updatedAt: z.string().optional(),
  users: z.array(User),
});

export type ConversationUpdateProps = z.infer<typeof ConversationUpdateProps>;
export const ConversationUpdateProps = z.object({
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * The conversation category.
   */
  category: ConversationCategory.optional(),
  /**
   * excludeFromLastConversationStorage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  id: NonEmptyString,
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  replacements: Replacements.optional(),
  summary: ConversationSummary.optional(),
  /**
   * The conversation title.
   */
  title: z.string().optional(),
});

export type DeleteResponseFields = z.infer<typeof DeleteResponseFields>;
export const DeleteResponseFields = z.object({
  id: NonEmptyString,
});

export type ResponseFields = z.infer<typeof ResponseFields>;
export const ResponseFields = z.object({
  /**
   * Time the Knowledge Base Entry was created
   */
  createdAt: z.string(),
  /**
   * User who created the Knowledge Base Entry
   */
  createdBy: z.string(),
  id: NonEmptyString,
  /**
   * Time the Knowledge Base Entry was last updated
   */
  updatedAt: z.string(),
  /**
   * User who last updated the Knowledge Base Entry
   */
  updatedBy: z.string(),
});

export type DocumentEntryRequiredFields = z.infer<typeof DocumentEntryRequiredFields>;
export const DocumentEntryRequiredFields = z.object({
  /**
   * Knowledge Base resource name for grouping entries, e.g. 'esql', 'lens-docs', etc
   */
  kbResource: z.string(),
  /**
   * Source document name or filepath
   */
  source: z.string(),
  /**
   * Knowledge Base Entry content
   */
  text: z.string(),
  /**
   * Entry type
   */
  type: z.literal('document'),
});

/**
 * Object containing Knowledge Base Entry text embeddings and modelId used to create the embeddings
 */
export type Vector = z.infer<typeof Vector>;
export const Vector = z.object({
  /**
   * ID of the model used to create the embeddings
   */
  modelId: z.string(),
  /**
   * Tokens with their corresponding values
   */
  tokens: z.object({}).catchall(z.number()),
});

export type DocumentEntryOptionalFields = z.infer<typeof DocumentEntryOptionalFields>;
export const DocumentEntryOptionalFields = z.object({
  /**
   * Whether this resource should always be included, defaults to false
   */
  required: z.boolean().optional(),
  vector: Vector.optional(),
});

export type DocumentEntryResponseFields = z.infer<typeof DocumentEntryResponseFields>;
export const DocumentEntryResponseFields = DocumentEntryRequiredFields.merge(
  DocumentEntryOptionalFields
);

export type DocumentEntry = z.infer<typeof DocumentEntry>;
export const DocumentEntry = z
  .object({
    /**
     * Name of the Knowledge Base Entry
     */
    name: z.string(),
    /**
     * Kibana Space, defaults to 'default' space
     */
    namespace: z.string(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User),
  })
  .merge(ResponseFields)
  .merge(DocumentEntryResponseFields);

export type DocumentEntryCreateFields = z.infer<typeof DocumentEntryCreateFields>;
export const DocumentEntryCreateFields = z
  .object({
    /**
     * Name of the Knowledge Base Entry
     */
    name: z.string(),
    /**
     * Kibana Space, defaults to 'default' space
     */
    namespace: z.string().optional(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User).optional(),
  })
  .merge(DocumentEntryRequiredFields)
  .merge(DocumentEntryOptionalFields);

export type DocumentEntryUpdateFields = z.infer<typeof DocumentEntryUpdateFields>;
export const DocumentEntryUpdateFields = z
  .object({
    id: NonEmptyString,
    /**
     * Name of the Knowledge Base Entry
     */
    name: z.string().optional(),
    /**
     * Kibana Space, defaults to 'default' space
     */
    namespace: z.string().optional(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User).optional(),
  })
  .merge(DocumentEntryCreateFields);

export type FindAnonymizationFieldsSortField = z.infer<typeof FindAnonymizationFieldsSortField>;
export const FindAnonymizationFieldsSortField = z.enum([
  'created_at',
  'anonymized',
  'allowed',
  'field',
  'updated_at',
]);
export type FindAnonymizationFieldsSortFieldEnum = typeof FindAnonymizationFieldsSortField.enum;
export const FindAnonymizationFieldsSortFieldEnum = FindAnonymizationFieldsSortField.enum;

export type FindConversationsSortField = z.infer<typeof FindConversationsSortField>;
export const FindConversationsSortField = z.enum([
  'created_at',
  'is_default',
  'title',
  'updated_at',
]);
export type FindConversationsSortFieldEnum = typeof FindConversationsSortField.enum;
export const FindConversationsSortFieldEnum = FindConversationsSortField.enum;

export type FindKnowledgeBaseEntriesSortField = z.infer<typeof FindKnowledgeBaseEntriesSortField>;
export const FindKnowledgeBaseEntriesSortField = z.enum([
  'created_at',
  'is_default',
  'title',
  'updated_at',
]);
export type FindKnowledgeBaseEntriesSortFieldEnum = typeof FindKnowledgeBaseEntriesSortField.enum;
export const FindKnowledgeBaseEntriesSortFieldEnum = FindKnowledgeBaseEntriesSortField.enum;

export type FindPromptsSortField = z.infer<typeof FindPromptsSortField>;
export const FindPromptsSortField = z.enum(['created_at', 'is_default', 'name', 'updated_at']);
export type FindPromptsSortFieldEnum = typeof FindPromptsSortField.enum;
export const FindPromptsSortFieldEnum = FindPromptsSortField.enum;

export type IndexEntryRequiredFields = z.infer<typeof IndexEntryRequiredFields>;
export const IndexEntryRequiredFields = z.object({
  /**
   * Description for when this index or data stream should be queried for Knowledge Base content. Passed to the LLM as a tool description
   */
  description: z.string(),
  /**
   * Field to query for Knowledge Base content
   */
  field: z.string(),
  /**
   * Index or Data Stream to query for Knowledge Base content
   */
  index: z.string(),
  /**
   * Description of query field used to fetch Knowledge Base content. Passed to the LLM as part of the tool input schema
   */
  queryDescription: z.string(),
  /**
   * Entry type
   */
  type: z.literal('index'),
});

/**
 * Array of objects defining the input schema, allowing the LLM to extract structured data to be used in retrieval
 */
export type InputSchema = z.infer<typeof InputSchema>;
export const InputSchema = z.array(
  z.object({
    /**
     * Description of the field
     */
    description: z.string(),
    /**
     * Name of the field
     */
    fieldName: z.string(),
    /**
     * Type of the field
     */
    fieldType: z.string(),
  })
);

export type IndexEntryOptionalFields = z.infer<typeof IndexEntryOptionalFields>;
export const IndexEntryOptionalFields = z.object({
  inputSchema: InputSchema.optional(),
  /**
   * Fields to extract from the query result, defaults to all fields if not provided or empty
   */
  outputFields: z.array(z.string()).optional(),
});

export type IndexEntryResponseFields = z.infer<typeof IndexEntryResponseFields>;
export const IndexEntryResponseFields = IndexEntryRequiredFields.merge(IndexEntryOptionalFields);

export type IndexEntry = z.infer<typeof IndexEntry>;
export const IndexEntry = z
  .object({
    /**
     * Name of the Knowledge Base Entry
     */
    name: z.string(),
    /**
     * Kibana Space, defaults to 'default' space
     */
    namespace: z.string(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User),
  })
  .merge(ResponseFields)
  .merge(IndexEntryResponseFields);

export type IndexEntryCreateFields = z.infer<typeof IndexEntryCreateFields>;
export const IndexEntryCreateFields = z
  .object({
    /**
     * Name of the Knowledge Base Entry
     */
    name: z.string(),
    /**
     * Kibana Space, defaults to 'default' space
     */
    namespace: z.string().optional(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User).optional(),
  })
  .merge(IndexEntryRequiredFields)
  .merge(IndexEntryOptionalFields);

export type IndexEntryUpdateFields = z.infer<typeof IndexEntryUpdateFields>;
export const IndexEntryUpdateFields = z
  .object({
    id: NonEmptyString,
    /**
     * Name of the Knowledge Base Entry
     */
    name: z.string().optional(),
    /**
     * Kibana Space, defaults to 'default' space
     */
    namespace: z.string().optional(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User).optional(),
  })
  .merge(IndexEntryCreateFields);

export type KnowledgeBaseEntryBulkActionSkipReason = z.infer<
  typeof KnowledgeBaseEntryBulkActionSkipReason
>;
export const KnowledgeBaseEntryBulkActionSkipReason = z.literal(
  'KNOWLEDGE_BASE_ENTRY_NOT_MODIFIED'
);

export type KnowledgeBaseEntryBulkActionSkipResult = z.infer<
  typeof KnowledgeBaseEntryBulkActionSkipResult
>;
export const KnowledgeBaseEntryBulkActionSkipResult = z.object({
  id: z.string(),
  name: z.string().optional(),
  skip_reason: KnowledgeBaseEntryBulkActionSkipReason,
});

export type KnowledgeBaseEntryDetailsInError = z.infer<typeof KnowledgeBaseEntryDetailsInError>;
export const KnowledgeBaseEntryDetailsInError = z.object({
  id: z.string(),
  name: z.string().optional(),
});

export type NormalizedKnowledgeBaseEntryError = z.infer<typeof NormalizedKnowledgeBaseEntryError>;
export const NormalizedKnowledgeBaseEntryError = z.object({
  err_code: z.string().optional(),
  knowledgeBaseEntries: z.array(KnowledgeBaseEntryDetailsInError),
  message: z.string(),
  statusCode: z.number().int(),
});

export type KnowledgeBaseEntryResponse = z.infer<typeof KnowledgeBaseEntryResponse>;
export const KnowledgeBaseEntryResponse = z.discriminatedUnion('type', [DocumentEntry, IndexEntry]);

export type KnowledgeBaseEntryBulkCrudActionResults = z.infer<
  typeof KnowledgeBaseEntryBulkCrudActionResults
>;
export const KnowledgeBaseEntryBulkCrudActionResults = z.object({
  created: z.array(KnowledgeBaseEntryResponse),
  deleted: z.array(z.string()),
  skipped: z.array(KnowledgeBaseEntryBulkActionSkipResult),
  updated: z.array(KnowledgeBaseEntryResponse),
});

export type KnowledgeBaseEntryBulkCrudActionSummary = z.infer<
  typeof KnowledgeBaseEntryBulkCrudActionSummary
>;
export const KnowledgeBaseEntryBulkCrudActionSummary = z.object({
  failed: z.number().int(),
  skipped: z.number().int(),
  succeeded: z.number().int(),
  total: z.number().int(),
});

export type KnowledgeBaseEntryBulkCrudActionResponse = z.infer<
  typeof KnowledgeBaseEntryBulkCrudActionResponse
>;
export const KnowledgeBaseEntryBulkCrudActionResponse = z.object({
  attributes: z.object({
    errors: z.array(NormalizedKnowledgeBaseEntryError).optional(),
    results: KnowledgeBaseEntryBulkCrudActionResults,
    summary: KnowledgeBaseEntryBulkCrudActionSummary,
  }),
  knowledgeBaseEntriesCount: z.number().int().optional(),
  message: z.string().optional(),
  statusCode: z.number().int().optional(),
  success: z.boolean().optional(),
});

export type KnowledgeBaseEntryCreateProps = z.infer<typeof KnowledgeBaseEntryCreateProps>;
export const KnowledgeBaseEntryCreateProps = z.discriminatedUnion('type', [
  DocumentEntryCreateFields,
  IndexEntryCreateFields,
]);

export type KnowledgeBaseEntryErrorSchema = z.infer<typeof KnowledgeBaseEntryErrorSchema>;
export const KnowledgeBaseEntryErrorSchema = z
  .object({
    error: z.string(),
    message: z.string(),
    statusCode: z.number(),
  })
  .strict();

export type KnowledgeBaseEntryUpdateProps = z.infer<typeof KnowledgeBaseEntryUpdateProps>;
export const KnowledgeBaseEntryUpdateProps = z.discriminatedUnion('type', [
  DocumentEntryUpdateFields,
  IndexEntryUpdateFields,
]);

/**
 * AI assistant KnowledgeBase.
 */
export type KnowledgeBaseResponse = z.infer<typeof KnowledgeBaseResponse>;
export const KnowledgeBaseResponse = z.object({
  /**
   * Identify the success of the method execution.
   */
  success: z.boolean().optional(),
});

export type PromptDetailsInError = z.infer<typeof PromptDetailsInError>;
export const PromptDetailsInError = z.object({
  id: z.string(),
  name: z.string().optional(),
});

export type NormalizedPromptError = z.infer<typeof NormalizedPromptError>;
export const NormalizedPromptError = z.object({
  err_code: z.string().optional(),
  message: z.string(),
  prompts: z.array(PromptDetailsInError),
  status_code: z.number().int(),
});

/**
 * Prompt type
 */
export type PromptType = z.infer<typeof PromptType>;
export const PromptType = z.enum(['system', 'quick']);
export type PromptTypeEnum = typeof PromptType.enum;
export const PromptTypeEnum = PromptType.enum;

export type PromptCreateProps = z.infer<typeof PromptCreateProps>;
export const PromptCreateProps = z.object({
  categories: z.array(z.string()).optional(),
  color: z.string().optional(),
  consumer: z.string().optional(),
  content: z.string(),
  isDefault: z.boolean().optional(),
  isNewConversationDefault: z.boolean().optional(),
  name: z.string(),
  promptType: PromptType,
});

export type PromptResponse = z.infer<typeof PromptResponse>;
export const PromptResponse = z.object({
  categories: z.array(z.string()).optional(),
  color: z.string().optional(),
  consumer: z.string().optional(),
  content: z.string(),
  createdAt: z.string().optional(),
  createdBy: z.string().optional(),
  id: NonEmptyString,
  isDefault: z.boolean().optional(),
  isNewConversationDefault: z.boolean().optional(),
  name: z.string(),
  /**
   * Kibana space
   */
  namespace: z.string().optional(),
  promptType: PromptType,
  timestamp: NonEmptyString.optional(),
  updatedAt: z.string().optional(),
  updatedBy: z.string().optional(),
  users: z.array(User).optional(),
});

export type PromptsBulkActionSkipReason = z.infer<typeof PromptsBulkActionSkipReason>;
export const PromptsBulkActionSkipReason = z.literal('PROMPT_FIELD_NOT_MODIFIED');

export type PromptsBulkActionSkipResult = z.infer<typeof PromptsBulkActionSkipResult>;
export const PromptsBulkActionSkipResult = z.object({
  id: z.string(),
  name: z.string().optional(),
  skip_reason: PromptsBulkActionSkipReason,
});

export type PromptsBulkCrudActionResults = z.infer<typeof PromptsBulkCrudActionResults>;
export const PromptsBulkCrudActionResults = z.object({
  created: z.array(PromptResponse),
  deleted: z.array(z.string()),
  skipped: z.array(PromptsBulkActionSkipResult),
  updated: z.array(PromptResponse),
});

export type PromptsBulkCrudActionResponse = z.infer<typeof PromptsBulkCrudActionResponse>;
export const PromptsBulkCrudActionResponse = z.object({
  attributes: z.object({
    errors: z.array(NormalizedPromptError).optional(),
    results: PromptsBulkCrudActionResults,
    summary: BulkCrudActionSummary,
  }),
  message: z.string().optional(),
  prompts_count: z.number().int().optional(),
  status_code: z.number().int().optional(),
  success: z.boolean().optional(),
});

export type PromptUpdateProps = z.infer<typeof PromptUpdateProps>;
export const PromptUpdateProps = z.object({
  categories: z.array(z.string()).optional(),
  color: z.string().optional(),
  consumer: z.string().optional(),
  content: z.string().optional(),
  id: z.string(),
  isDefault: z.boolean().optional(),
  isNewConversationDefault: z.boolean().optional(),
});

export type SortOrder = z.infer<typeof SortOrder>;
export const SortOrder = z.enum(['asc', 'desc']);
export type SortOrderEnum = typeof SortOrder.enum;
export const SortOrderEnum = SortOrder.enum;
