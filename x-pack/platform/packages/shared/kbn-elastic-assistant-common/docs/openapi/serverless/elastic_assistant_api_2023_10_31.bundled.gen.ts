/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Security AI Assistant API (Elastic Cloud Serverless)
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';
import { isNonEmptyString } from '@kbn/zod-helpers';

export type AnonymizationFieldCreateProps = z.infer<typeof AnonymizationFieldCreateProps>;
export const AnonymizationFieldCreateProps = z.object({
  /**
   * Whether this field is allowed to be sent to the model.
   */
  allowed: z.boolean().optional(),
  /**
   * Whether this field should be anonymized.
   */
  anonymized: z.boolean().optional(),
  /**
   * Name of the anonymization field to create.
   */
  field: z.string(),
});

export type AnonymizationFieldDetailsInError = z.infer<typeof AnonymizationFieldDetailsInError>;
export const AnonymizationFieldDetailsInError = z.object({
  /**
   * The ID of the anonymization field.
   */
  id: z.string(),
  /**
   * Name of the anonymization field.
   */
  name: z.string().optional(),
});

/**
 * A string that does not contain only whitespace characters.
 */
export type NonEmptyString = z.infer<typeof NonEmptyString>;
export const NonEmptyString = z.string().min(1).superRefine(isNonEmptyString);

/**
 * A string that represents a timestamp in ISO 8601 format and does not contain only whitespace characters.
 */
export type NonEmptyTimestamp = z.infer<typeof NonEmptyTimestamp>;
export const NonEmptyTimestamp = z.string().min(1).superRefine(isNonEmptyString);

export type AnonymizationFieldResponse = z.infer<typeof AnonymizationFieldResponse>;
export const AnonymizationFieldResponse = z.object({
  /**
   * Whether this field is allowed to be sent to the model.
   */
  allowed: z.boolean().optional(),
  /**
   * Whether this field should be anonymized.
   */
  anonymized: z.boolean().optional(),
  /**
   * Timestamp of when the anonymization field was created.
   */
  createdAt: z.string().optional(),
  /**
   * Username of the person who created the anonymization field.
   */
  createdBy: z.string().optional(),
  /**
   * Name of the anonymization field.
   */
  field: z.string(),
  /**
   * The ID of the anonymization field.
   */
  id: NonEmptyString,
  /**
   * Kibana space in which this anonymization field exists.
   */
  namespace: z.string().optional(),
  /**
   * Timestamp when the anonymization field was initially created.
   */
  timestamp: NonEmptyTimestamp.optional(),
  /**
   * Timestamp of the last update.
   */
  updatedAt: z.string().optional(),
  /**
   * Username of the person who last updated the field.
   */
  updatedBy: z.string().optional(),
});

/**
 * Reason why the anonymization field was not modified.
 */
export type AnonymizationFieldsBulkActionSkipReason = z.infer<
  typeof AnonymizationFieldsBulkActionSkipReason
>;
export const AnonymizationFieldsBulkActionSkipReason = z.literal(
  'ANONYMIZATION_FIELD_NOT_MODIFIED'
);

export type AnonymizationFieldsBulkActionSkipResult = z.infer<
  typeof AnonymizationFieldsBulkActionSkipResult
>;
export const AnonymizationFieldsBulkActionSkipResult = z.object({
  /**
   * The ID of the anonymization field that was not modified.
   */
  id: z.string(),
  /**
   * Name of the anonymization field that was not modified.
   */
  name: z.string().optional(),
  /**
   * Reason why the anonymization field was not modified.
   */
  skip_reason: AnonymizationFieldsBulkActionSkipReason,
});

export type NormalizedAnonymizationFieldError = z.infer<typeof NormalizedAnonymizationFieldError>;
export const NormalizedAnonymizationFieldError = z.object({
  /**
   * Array of anonymization fields that caused the error.
   */
  anonymization_fields: z.array(AnonymizationFieldDetailsInError),
  /**
   * Error code indicating the type of failure.
   */
  err_code: z.string().optional(),
  /**
   * Error message.
   */
  message: z.string(),
  /**
   * Status code of the response.
   */
  status_code: z.number().int(),
});

export type AnonymizationFieldsBulkCrudActionResults = z.infer<
  typeof AnonymizationFieldsBulkCrudActionResults
>;
export const AnonymizationFieldsBulkCrudActionResults = z.object({
  /**
   * List of anonymization fields successfully created.
   */
  created: z.array(AnonymizationFieldResponse),
  deleted: z.array(z.string()),
  /**
   * List of anonymization fields that were skipped during the operation.
   */
  skipped: z.array(AnonymizationFieldsBulkActionSkipResult),
  /**
   * List of anonymization fields successfully updated.
   */
  updated: z.array(AnonymizationFieldResponse),
});

export type BulkCrudActionSummary = z.infer<typeof BulkCrudActionSummary>;
export const BulkCrudActionSummary = z.object({
  /**
   * The number of failed actions.
   */
  failed: z.number().int(),
  /**
   * The number of skipped actions.
   */
  skipped: z.number().int(),
  /**
   * The number of successfully performed actions.
   */
  succeeded: z.number().int(),
  /**
   * The total number of actions attempted.
   */
  total: z.number().int(),
});

export type AnonymizationFieldsBulkCrudActionResponse = z.infer<
  typeof AnonymizationFieldsBulkCrudActionResponse
>;
export const AnonymizationFieldsBulkCrudActionResponse = z.object({
  /**
   * Total number of anonymization fields processed.
   */
  anonymization_fields_count: z.number().int().optional(),
  attributes: z.object({
    /**
     * List of errors that occurred during the bulk operation.
     */
    errors: z.array(NormalizedAnonymizationFieldError).optional(),
    results: AnonymizationFieldsBulkCrudActionResults,
    summary: BulkCrudActionSummary,
  }),
  /**
   * Message providing information about the bulk action result.
   */
  message: z.string().optional(),
  /**
   * HTTP status code returned.
   */
  status_code: z.number().int().optional(),
  /**
   * Indicates if the bulk action was successful.
   */
  success: z.boolean().optional(),
});

export type AnonymizationFieldUpdateProps = z.infer<typeof AnonymizationFieldUpdateProps>;
export const AnonymizationFieldUpdateProps = z.object({
  /**
   * Whether this field is allowed to be sent to the model.
   */
  allowed: z.boolean().optional(),
  /**
   * Whether this field should be anonymized.
   */
  anonymized: z.boolean().optional(),
  /**
   * The ID of the anonymization field to update.
   */
  id: z.string(),
});

/**
 * Provider
 */
export type Provider = z.infer<typeof Provider>;
export const Provider = z.enum(['OpenAI', 'Azure OpenAI', 'Other']);
export type ProviderEnum = typeof Provider.enum;
export const ProviderEnum = Provider.enum;

export type ApiConfig = z.infer<typeof ApiConfig>;
export const ApiConfig = z.object({
  /**
   * Action type ID
   */
  actionTypeId: z.string(),
  /**
   * Connector ID
   */
  connectorId: z.string(),
  /**
   * Default system prompt ID
   */
  defaultSystemPromptId: z.string().optional(),
  /**
   * Model
   */
  model: z.string().optional(),
  /**
   * Provider
   */
  provider: Provider.optional(),
});

/**
 * Replacements object used to anonymize/deanonymize messages
 */
export type Replacements = z.infer<typeof Replacements>;
export const Replacements = z.object({}).catchall(z.string());

/**
 * Could be any string, not necessarily a UUID.
 */
export type User = z.infer<typeof User>;
export const User = z.object({
  /**
   * User id.
   */
  id: z.string().optional(),
  /**
   * User name.
   */
  name: z.string().optional(),
});

/**
 * An attack discovery that's also an alert (Public API with snake_case)
 */
export type AttackDiscoveryApiAlert = z.infer<typeof AttackDiscoveryApiAlert>;
export const AttackDiscoveryApiAlert = z.object({
  /**
   * The alert IDs that the attack discovery is based on
   */
  alert_ids: z.array(z.string()),
  /**
   * The optional kibana.alert.rule.uuid of the rule that generated this attack discovery (not applicable to ad hock runs)
   */
  alert_rule_uuid: z.string().optional(),
  /**
   * The optional time the attack discovery alert was created
   */
  alert_start: z.string().optional(),
  /**
   * The optional time the attack discovery alert was last updated
   */
  alert_updated_at: z.string().optional(),
  /**
   * The optional id of the user who last updated the attack discovery alert
   */
  alert_updated_by_user_id: z.string().optional(),
  /**
   * The optional username of the user who updated the attack discovery alert
   */
  alert_updated_by_user_name: z.string().optional(),
  /**
   * The optional kibana.alert.workflow_status of this attack discovery
   */
  alert_workflow_status: z.string().optional(),
  /**
   * The optional time the attack discovery alert workflow status was last updated
   */
  alert_workflow_status_updated_at: z.string().optional(),
  /**
   * The ID of the connector that generated the attack discovery
   */
  connector_id: z.string(),
  /**
   * The (human readable) name of the connector that generated the attack discovery
   */
  connector_name: z.string(),
  /**
   * Details of the attack with bulleted markdown that always uses special syntax for field names and values from the source data.
   */
  details_markdown: z.string(),
  /**
   * An optional, short (no more than a sentence) summary of the attack discovery featuring only the host.name and user.name fields (when they are applicable), using the same syntax
   */
  entity_summary_markdown: z.string().optional(),
  /**
   * The generation ID of the run that created the attack discovery
   */
  generation_uuid: z.string(),
  /**
   * The unique ID of the attack discovery
   */
  id: z.string(),
  /**
   * An optional array of MITRE ATT&CK tactic for the attack discovery
   */
  mitre_attack_tactics: z.array(z.string()).optional(),
  /**
   * Key-value pairs that are used to replace placeholders in the markdown fields
   */
  replacements: Replacements.optional(),
  /**
   * The optional, (but typically populated after generation) risk score of the alert
   */
  risk_score: z.number().int().optional(),
  /**
   * A markdown summary of attack discovery, using the same syntax
   */
  summary_markdown: z.string(),
  /**
   * The time the attack discovery was generated
   */
  timestamp: NonEmptyTimestamp,
  /**
   * A title for the attack discovery, in plain text
   */
  title: z.string(),
  /**
   * The optional id of the user who generated the attack discovery
   */
  user_id: z.string().optional(),
  /**
   * The optional username of the user who generated the attack discovery, (not applicable to attack discoveries generated by rules)
   */
  user_name: z.string().optional(),
  /**
   * The optional array of users who may view the attack discovery. When empty, (or not present), all users may view the attack discovery.
   */
  users: z.array(User).optional(),
});

export type AttackDiscoveryApiScheduleActionAlertsFilter = z.infer<
  typeof AttackDiscoveryApiScheduleActionAlertsFilter
>;
export const AttackDiscoveryApiScheduleActionAlertsFilter = z.object({}).catchall(z.unknown());

/**
 * The condition for throttling the notification: `onActionGroupChange`, `onActiveAlert`,  or `onThrottleInterval`
 */
export type AttackDiscoveryApiScheduleActionNotifyWhen = z.infer<
  typeof AttackDiscoveryApiScheduleActionNotifyWhen
>;
export const AttackDiscoveryApiScheduleActionNotifyWhen = z.enum([
  'onActiveAlert',
  'onThrottleInterval',
  'onActionGroupChange',
]);
export type AttackDiscoveryApiScheduleActionNotifyWhenEnum =
  typeof AttackDiscoveryApiScheduleActionNotifyWhen.enum;
export const AttackDiscoveryApiScheduleActionNotifyWhenEnum =
  AttackDiscoveryApiScheduleActionNotifyWhen.enum;

/**
 * Defines how often schedule actions are taken. Time interval in seconds, minutes, hours, or days.
 */
export type AttackDiscoveryApiScheduleActionThrottle = z.infer<
  typeof AttackDiscoveryApiScheduleActionThrottle
>;
export const AttackDiscoveryApiScheduleActionThrottle = z.string().regex(/^[1-9]\d*[smhd]$/);

/**
 * The action frequency defines when the action runs (for example, only on schedule execution or at specific time intervals).
 */
export type AttackDiscoveryApiScheduleActionFrequency = z.infer<
  typeof AttackDiscoveryApiScheduleActionFrequency
>;
export const AttackDiscoveryApiScheduleActionFrequency = z.object({
  notify_when: AttackDiscoveryApiScheduleActionNotifyWhen,
  /**
   * Action summary indicates whether we will send a summary notification about all the generate alerts or notification per individual alert
   */
  summary: z.boolean(),
  throttle: AttackDiscoveryApiScheduleActionThrottle.nullable(),
});

/**
 * Groups actions by use cases. Use `default` for alert notifications.
 */
export type AttackDiscoveryApiScheduleActionGroup = z.infer<
  typeof AttackDiscoveryApiScheduleActionGroup
>;
export const AttackDiscoveryApiScheduleActionGroup = z.string();

/**
 * The connector ID.
 */
export type AttackDiscoveryApiScheduleActionId = z.infer<typeof AttackDiscoveryApiScheduleActionId>;
export const AttackDiscoveryApiScheduleActionId = z.string();

/**
 * Object containing the allowed connector fields, which varies according to the connector type.
 */
export type AttackDiscoveryApiScheduleActionParams = z.infer<
  typeof AttackDiscoveryApiScheduleActionParams
>;
export const AttackDiscoveryApiScheduleActionParams = z.object({}).catchall(z.unknown());

export type AttackDiscoveryApiScheduleAction = z.infer<typeof AttackDiscoveryApiScheduleAction>;
export const AttackDiscoveryApiScheduleAction = z.object({
  /**
   * The action type used for sending notifications.
   */
  action_type_id: z.string(),
  alerts_filter: AttackDiscoveryApiScheduleActionAlertsFilter.optional(),
  frequency: AttackDiscoveryApiScheduleActionFrequency.optional(),
  group: AttackDiscoveryApiScheduleActionGroup.optional(),
  id: AttackDiscoveryApiScheduleActionId,
  params: AttackDiscoveryApiScheduleActionParams,
  uuid: NonEmptyString.optional(),
});

/**
 * An attack discovery schedule execution status
 */
export type AttackDiscoveryApiScheduleExecutionStatus = z.infer<
  typeof AttackDiscoveryApiScheduleExecutionStatus
>;
export const AttackDiscoveryApiScheduleExecutionStatus = z.enum([
  'ok',
  'active',
  'error',
  'unknown',
  'warning',
]);
export type AttackDiscoveryApiScheduleExecutionStatusEnum =
  typeof AttackDiscoveryApiScheduleExecutionStatus.enum;
export const AttackDiscoveryApiScheduleExecutionStatusEnum =
  AttackDiscoveryApiScheduleExecutionStatus.enum;

/**
 * An attack discovery schedule execution information
 */
export type AttackDiscoveryApiScheduleExecution = z.infer<
  typeof AttackDiscoveryApiScheduleExecution
>;
export const AttackDiscoveryApiScheduleExecution = z.object({
  /**
   * Date of the execution
   */
  date: z.string().datetime(),
  /**
   * Duration of the execution
   */
  duration: z.number().optional(),
  message: z.string().optional(),
  /**
   * Status of the execution
   */
  status: AttackDiscoveryApiScheduleExecutionStatus,
});

/**
 * The filter array used to define the conditions for when alerts are selected as an attack discovery context. Defaults to an empty array.
 */
export type Filters = z.infer<typeof Filters>;
export const Filters = z.array(z.unknown());

/**
 * An query condition to filter alerts
 */
export type Query = z.infer<typeof Query>;
export const Query = z.object({
  language: z.string(),
  query: z.union([z.string(), z.object({}).catchall(z.unknown())]),
});

/**
 * An attack discovery schedule params
 */
export type AttackDiscoveryApiScheduleParams = z.infer<typeof AttackDiscoveryApiScheduleParams>;
export const AttackDiscoveryApiScheduleParams = z.object({
  /**
   * The index pattern to get alerts from
   */
  alerts_index_pattern: z.string(),
  /**
   * LLM API configuration.
   */
  api_config: ApiConfig.merge(
    z.object({
      /**
       * The name of the connector
       */
      name: z.string(),
    })
  ),
  combined_filter: z.object({}).catchall(z.unknown()).optional(),
  end: z.string().optional(),
  filters: Filters.optional(),
  query: Query.optional(),
  size: z.number(),
  start: z.string().optional(),
});

export type IntervalApiSchedule = z.infer<typeof IntervalApiSchedule>;
export const IntervalApiSchedule = z.object({
  /**
   * The schedule interval
   */
  interval: z.string(),
});

/**
 * An attack discovery schedule
 */
export type AttackDiscoveryApiSchedule = z.infer<typeof AttackDiscoveryApiSchedule>;
export const AttackDiscoveryApiSchedule = z.object({
  /**
   * The attack discovery schedule actions
   */
  actions: z.array(AttackDiscoveryApiScheduleAction),
  /**
   * The date the schedule was created
   */
  created_at: z.string().datetime(),
  /**
   * The name of the user that created the schedule
   */
  created_by: z.string(),
  /**
   * Indicates whether the schedule is enabled
   */
  enabled: z.boolean(),
  /**
   * UUID of attack discovery schedule
   */
  id: z.string(),
  /**
   * The attack discovery schedule last execution summary
   */
  last_execution: AttackDiscoveryApiScheduleExecution.optional(),
  /**
   * The name of the schedule
   */
  name: z.string(),
  /**
   * The attack discovery schedule configuration parameters
   */
  params: AttackDiscoveryApiScheduleParams,
  /**
   * The attack discovery schedule interval
   */
  schedule: IntervalApiSchedule,
  /**
   * The date the schedule was updated
   */
  updated_at: z.string().datetime(),
  /**
   * The name of the user that updated the schedule
   */
  updated_by: z.string(),
});

/**
 * An attack discovery schedule create properties
 */
export type AttackDiscoveryApiScheduleCreateProps = z.infer<
  typeof AttackDiscoveryApiScheduleCreateProps
>;
export const AttackDiscoveryApiScheduleCreateProps = z.object({
  /**
   * The attack discovery schedule actions
   */
  actions: z.array(AttackDiscoveryApiScheduleAction).optional(),
  /**
   * Indicates whether the schedule is enabled
   */
  enabled: z.boolean().optional(),
  /**
   * The name of the schedule
   */
  name: z.string(),
  /**
   * The attack discovery schedule configuration parameters
   */
  params: AttackDiscoveryApiScheduleParams,
  /**
   * The attack discovery schedule interval
   */
  schedule: IntervalApiSchedule,
});

/**
 * An attack discovery schedule update properties
 */
export type AttackDiscoveryApiScheduleUpdateProps = z.infer<
  typeof AttackDiscoveryApiScheduleUpdateProps
>;
export const AttackDiscoveryApiScheduleUpdateProps = z.object({
  /**
   * The attack discovery schedule actions
   */
  actions: z.array(AttackDiscoveryApiScheduleAction),
  /**
   * The name of the schedule
   */
  name: z.string(),
  /**
   * The attack discovery schedule configuration parameters
   */
  params: AttackDiscoveryApiScheduleParams,
  /**
   * The attack discovery schedule interval
   */
  schedule: IntervalApiSchedule,
});

/**
 * Allowed field names to sort Attack discovery results by. Clients should only pass one of the listed values.
 */
export type AttackDiscoveryFindSortField = z.infer<typeof AttackDiscoveryFindSortField>;
export const AttackDiscoveryFindSortField = z.literal('@timestamp');

export type AttackDiscoveryGeneration = z.infer<typeof AttackDiscoveryGeneration>;
export const AttackDiscoveryGeneration = z.object({
  /**
   * The number of alerts sent as context (max kibana.alert.rule.execution.metrics.alert_counts.active) to the LLM for the generation
   */
  alerts_context_count: z.number().optional(),
  /**
   * The connector id (event.dataset) for this generation
   */
  connector_id: z.string(),
  /**
   * Stats applicable to the connector for this generation
   */
  connector_stats: z
    .object({
      /**
       * The average duration (avg event.duration) in nanoseconds of successful generations for the same connector id, for the current user
       */
      average_successful_duration_nanoseconds: z.number().optional(),
      /**
       * The number of successful generations for the same connector id, for the current user
       */
      successful_generations: z.number().optional(),
    })
    .optional(),
  /**
   * The number of new Attack discovery alerts (max kibana.alert.rule.execution.metrics.alert_counts.new) for this generation
   */
  discoveries: z.number(),
  /**
   * When generation ended (max event.end)
   */
  end: z.string().optional(),
  /**
   * The unique identifier (kibana.alert.rule.execution.uuid) for the generation
   */
  execution_uuid: z.string(),
  /**
   * Generation loading message (kibana.alert.rule.execution.status)
   */
  loading_message: z.string(),
  /**
   * Reason for failed generations (event.reason)
   */
  reason: z.string().optional(),
  /**
   * When generation started (min event.start)
   */
  start: z.string(),
  /**
   * The status of the attack discovery generation
   */
  status: z.enum(['canceled', 'dismissed', 'failed', 'started', 'succeeded']),
});

export type AttackDiscoveryGenerationConfig = z.infer<typeof AttackDiscoveryGenerationConfig>;
export const AttackDiscoveryGenerationConfig = z.object({
  alertsIndexPattern: z.string(),
  anonymizationFields: z.array(AnonymizationFieldResponse),
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig,
  connectorName: z.string().optional(),
  end: z.string().optional(),
  filter: z.object({}).catchall(z.unknown()).optional(),
  langSmithApiKey: z.string().optional(),
  langSmithProject: z.string().optional(),
  model: z.string().optional(),
  replacements: Replacements.optional(),
  size: z.number(),
  start: z.string().optional(),
  subAction: z.enum(['invokeAI', 'invokeStream']),
});

/**
 * Generic error response for Attack discovery schedule operations
 */
export type AttackDiscoveryGenericError = z.infer<typeof AttackDiscoveryGenericError>;
export const AttackDiscoveryGenericError = z.object({
  /**
   * Error type
   */
  error: z.string().optional(),
  /**
   * Human-readable error message describing what went wrong
   */
  message: z.string().optional(),
  /**
   * HTTP status code
   */
  status_code: z.number().optional(),
});

/**
 * The basis of a content reference
 */
export type BaseContentReference = z.infer<typeof BaseContentReference>;
export const BaseContentReference = z.object({
  /**
   * Id of the content reference
   */
  id: z.string(),
  /**
   * Type of the content reference
   */
  type: z.string(),
});

/**
 * ECS-style metadata attached to the message.
 */
export type MessageData = z.infer<typeof MessageData>;
export const MessageData = z.object({}).catchall(z.unknown());

/**
 * The role associated with the message in the chat.
 */
export type ChatMessageRole = z.infer<typeof ChatMessageRole>;
export const ChatMessageRole = z.enum(['system', 'user', 'assistant']);
export type ChatMessageRoleEnum = typeof ChatMessageRole.enum;
export const ChatMessageRoleEnum = ChatMessageRole.enum;

/**
 * A message exchanged within the AI chat conversation.
 */
export type ChatMessage = z.infer<typeof ChatMessage>;
export const ChatMessage = z.object({
  /**
   * The textual content of the message.
   */
  content: z.string().optional(),
  /**
   * Metadata to attach to the context of the message.
   */
  data: MessageData.optional(),
  /**
   * List of field names within the data object that should be anonymized.
   */
  fields_to_anonymize: z.array(z.string()).optional(),
  /**
   * The sender role of the message.
   */
  role: ChatMessageRole,
});

/**
 * The request payload for creating a chat completion.
 */
export type ChatCompleteProps = z.infer<typeof ChatCompleteProps>;
export const ChatCompleteProps = z.object({
  /**
   * Required connector identifier to route the request.
   */
  connectorId: z.string(),
  /**
   * Existing conversation ID to continue.
   */
  conversationId: NonEmptyString.optional(),
  /**
   * If true, the response will be streamed in chunks.
   */
  isStream: z.boolean().optional(),
  /**
   * API key for LangSmith integration.
   */
  langSmithApiKey: z.string().optional(),
  /**
   * LangSmith project name for tracing.
   */
  langSmithProject: z.string().optional(),
  /**
   * List of chat messages exchanged so far.
   */
  messages: z.array(ChatMessage),
  /**
   * Model ID or name to use for the response.
   */
  model: z.string().optional(),
  /**
   * Whether to persist the chat and response to storage.
   */
  persist: z.boolean(),
  /**
   * Prompt template identifier.
   */
  promptId: z.string().optional(),
  /**
   * ISO language code for the assistant's response.
   */
  responseLanguage: z.string().optional(),
});

/**
 * References a knowledge base entry
 */
export type KnowledgeBaseEntryContentReference = z.infer<typeof KnowledgeBaseEntryContentReference>;
export const KnowledgeBaseEntryContentReference = BaseContentReference.merge(
  z.object({
    /**
     * Id of the Knowledge Base Entry
     */
    knowledgeBaseEntryId: z.string(),
    /**
     * Name of the knowledge base entry
     */
    knowledgeBaseEntryName: z.string(),
    type: z.literal('KnowledgeBaseEntry'),
  })
);

/**
 * References a security alert
 */
export type SecurityAlertContentReference = z.infer<typeof SecurityAlertContentReference>;
export const SecurityAlertContentReference = BaseContentReference.merge(
  z.object({
    /**
     * ID of the Alert
     */
    alertId: z.string(),
    type: z.literal('SecurityAlert'),
  })
);

/**
 * References the security alerts page
 */
export type SecurityAlertsPageContentReference = z.infer<typeof SecurityAlertsPageContentReference>;
export const SecurityAlertsPageContentReference = BaseContentReference.merge(
  z.object({
    type: z.literal('SecurityAlertsPage'),
  })
);

/**
 * References the product documentation
 */
export type ProductDocumentationContentReference = z.infer<
  typeof ProductDocumentationContentReference
>;
export const ProductDocumentationContentReference = BaseContentReference.merge(
  z.object({
    /**
     * Title of the documentation
     */
    title: z.string(),
    type: z.literal('ProductDocumentation'),
    /**
     * URL to the documentation
     */
    url: z.string(),
  })
);

/**
 * References an ESQL query
 */
export type EsqlContentReference = z.infer<typeof EsqlContentReference>;
export const EsqlContentReference = BaseContentReference.merge(
  z.object({
    /**
     * Label of the query
     */
    label: z.string(),
    /**
     * An ESQL query
     */
    query: z.string(),
    /**
     * Time range to select in the time picker.
     */
    timerange: z
      .object({
        from: z.string(),
        to: z.string(),
      })
      .optional(),
    type: z.literal('EsqlQuery'),
  })
);

/**
 * References an external URL
 */
export type HrefContentReference = z.infer<typeof HrefContentReference>;
export const HrefContentReference = BaseContentReference.merge(
  z.object({
    /**
     * URL to the external resource
     */
    href: z.string(),
    /**
     * Label of the query
     */
    label: z.string().optional(),
    type: z.literal('Href'),
  })
);

/**
 * A union of all content reference types
 */
export type ContentReferences = z.infer<typeof ContentReferences>;
export const ContentReferences = z
  .object({})
  .catchall(
    z.union([
      KnowledgeBaseEntryContentReference,
      SecurityAlertContentReference,
      SecurityAlertsPageContentReference,
      ProductDocumentationContentReference,
      EsqlContentReference,
      HrefContentReference,
    ])
  );

/**
 * The conversation category.
 */
export type ConversationCategory = z.infer<typeof ConversationCategory>;
export const ConversationCategory = z.enum(['assistant', 'insights']);
export type ConversationCategoryEnum = typeof ConversationCategory.enum;
export const ConversationCategoryEnum = ConversationCategory.enum;

/**
 * Message metadata
 */
export type MessageMetadata = z.infer<typeof MessageMetadata>;
export const MessageMetadata = z.object({
  /**
   * Data referred to by the message content.
   */
  contentReferences: ContentReferences.optional(),
});

export type Reader = z.infer<typeof Reader>;
export const Reader = z.object({}).catchall(z.unknown());

/**
 * Message role.
 */
export type MessageRole = z.infer<typeof MessageRole>;
export const MessageRole = z.enum(['system', 'user', 'assistant']);
export type MessageRoleEnum = typeof MessageRole.enum;
export const MessageRoleEnum = MessageRole.enum;

/**
 * Trace Data
 */
export type TraceData = z.infer<typeof TraceData>;
export const TraceData = z.object({
  /**
   * Could be any string, not necessarily a UUID
   */
  traceId: z.string().optional(),
  /**
   * Could be any string, not necessarily a UUID
   */
  transactionId: z.string().optional(),
});

/**
 * AI assistant conversation message.
 */
export type Message = z.infer<typeof Message>;
export const Message = z.object({
  /**
   * Message content.
   */
  content: z.string(),
  /**
   * Message id
   */
  id: NonEmptyString.optional(),
  /**
   * Is error message.
   */
  isError: z.boolean().optional(),
  /**
   * Metadata
   */
  metadata: MessageMetadata.optional(),
  /**
   * Message content.
   */
  reader: Reader.optional(),
  /**
   * Message role.
   */
  role: MessageRole,
  /**
   * The timestamp message was sent or received.
   */
  timestamp: NonEmptyTimestamp,
  /**
   * Trace data
   */
  traceData: TraceData.optional(),
  /**
   * The user who sent the message.
   */
  user: User.optional(),
});

export type ConversationCreateProps = z.infer<typeof ConversationCreateProps>;
export const ConversationCreateProps = z.object({
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * The conversation category.
   */
  category: ConversationCategory.optional(),
  /**
   * Exclude from last conversation storage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  /**
   * The conversation id.
   */
  id: z.string().optional(),
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  replacements: Replacements.optional(),
  /**
   * The conversation title.
   */
  title: z.string(),
});

export type ConversationResponse = z.infer<typeof ConversationResponse>;
export const ConversationResponse = z.object({
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * The conversation category.
   */
  category: ConversationCategory,
  /**
   * The time conversation was created.
   */
  createdAt: z.string(),
  /**
   * The user who created the conversation.
   */
  createdBy: User,
  /**
   * Exclude from last conversation storage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  id: NonEmptyString,
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  /**
   * Kibana space
   */
  namespace: z.string(),
  replacements: Replacements.optional(),
  timestamp: NonEmptyTimestamp.optional(),
  /**
   * The conversation title.
   */
  title: z.string(),
  /**
   * The last time conversation was updated.
   */
  updatedAt: z.string().optional(),
  users: z.array(User),
});

export type ConversationUpdateProps = z.infer<typeof ConversationUpdateProps>;
export const ConversationUpdateProps = z.object({
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * The conversation category.
   */
  category: ConversationCategory.optional(),
  /**
   * Exclude from last conversation storage.
   */
  excludeFromLastConversationStorage: z.boolean().optional(),
  id: NonEmptyString,
  /**
   * The conversation messages.
   */
  messages: z.array(Message).optional(),
  replacements: Replacements.optional(),
  /**
   * The conversation title.
   */
  title: z.string().optional(),
  users: z.array(User).optional(),
});

export type DeleteResponseFields = z.infer<typeof DeleteResponseFields>;
export const DeleteResponseFields = z.object({
  id: NonEmptyString,
});

export type ResponseFields = z.infer<typeof ResponseFields>;
export const ResponseFields = z.object({
  /**
   * Time the Knowledge Base Entry was created.
   */
  createdAt: z.string(),
  /**
   * User who created the Knowledge Base Entry.
   */
  createdBy: z.string(),
  id: NonEmptyString,
  /**
   * Time the Knowledge Base Entry was last updated.
   */
  updatedAt: z.string(),
  /**
   * User who last updated the Knowledge Base Entry.
   */
  updatedBy: z.string(),
});

/**
 * Knowledge Base resource name for grouping entries, e.g. 'security_labs', 'user', etc.
 */
export type KnowledgeBaseResource = z.infer<typeof KnowledgeBaseResource>;
export const KnowledgeBaseResource = z.enum(['security_labs', 'defend_insights', 'user']);
export type KnowledgeBaseResourceEnum = typeof KnowledgeBaseResource.enum;
export const KnowledgeBaseResourceEnum = KnowledgeBaseResource.enum;

export type DocumentEntryRequiredFields = z.infer<typeof DocumentEntryRequiredFields>;
export const DocumentEntryRequiredFields = z.object({
  kbResource: KnowledgeBaseResource,
  /**
   * Source document name or filepath.
   */
  source: z.string(),
  /**
   * Knowledge Base Entry content.
   */
  text: z.string(),
  /**
   * Entry type.
   */
  type: z.literal('document'),
});

/**
 * Object containing Knowledge Base Entry text embeddings and modelId used to create the embeddings.
 */
export type Vector = z.infer<typeof Vector>;
export const Vector = z.object({
  /**
   * ID of the model used to create the embeddings.
   */
  modelId: z.string(),
  /**
   * Tokens with their corresponding values.
   */
  tokens: z.object({}).catchall(z.number()),
});

export type DocumentEntryOptionalFields = z.infer<typeof DocumentEntryOptionalFields>;
export const DocumentEntryOptionalFields = z.object({
  /**
   * Whether this resource should always be included, defaults to false.
   */
  required: z.boolean().optional(),
  vector: Vector.optional(),
});

export type DocumentEntryResponseFields = z.infer<typeof DocumentEntryResponseFields>;
export const DocumentEntryResponseFields = DocumentEntryRequiredFields.merge(
  DocumentEntryOptionalFields
);

export type DocumentEntry = z.infer<typeof DocumentEntry>;
export const DocumentEntry = z
  .object({
    /**
     * Whether this Knowledge Base Entry is global, defaults to false.
     */
    global: z.boolean(),
    /**
     * Name of the Knowledge Base Entry.
     */
    name: z.string(),
    /**
     * Kibana Space, defaults to 'default' space.
     */
    namespace: z.string(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User),
  })
  .merge(ResponseFields)
  .merge(DocumentEntryResponseFields);

export type DocumentEntryCreateFields = z.infer<typeof DocumentEntryCreateFields>;
export const DocumentEntryCreateFields = z
  .object({
    /**
     * Whether this Knowledge Base Entry is global, defaults to false.
     */
    global: z.boolean().optional(),
    /**
     * Name of the Knowledge Base Entry.
     */
    name: z.string(),
    /**
     * Kibana Space, defaults to 'default' space.
     */
    namespace: z.string().optional(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User).optional(),
  })
  .merge(DocumentEntryRequiredFields)
  .merge(DocumentEntryOptionalFields);

export type DocumentEntryUpdateFields = z.infer<typeof DocumentEntryUpdateFields>;
export const DocumentEntryUpdateFields = z
  .object({
    /**
     * Whether this Knowledge Base Entry is global, defaults to false.
     */
    global: z.boolean().optional(),
    id: NonEmptyString,
    /**
     * Name of the Knowledge Base Entry.
     */
    name: z.string().optional(),
    /**
     * Kibana Space, defaults to 'default' space.
     */
    namespace: z.string().optional(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User).optional(),
  })
  .merge(DocumentEntryCreateFields);

export type FindAnonymizationFieldsSortField = z.infer<typeof FindAnonymizationFieldsSortField>;
export const FindAnonymizationFieldsSortField = z.enum([
  'created_at',
  'anonymized',
  'allowed',
  'field',
  'updated_at',
]);
export type FindAnonymizationFieldsSortFieldEnum = typeof FindAnonymizationFieldsSortField.enum;
export const FindAnonymizationFieldsSortFieldEnum = FindAnonymizationFieldsSortField.enum;

/**
 * The field by which to sort the conversations. Possible values are `created_at`, `title`, and `updated_at`.
 */
export type FindConversationsSortField = z.infer<typeof FindConversationsSortField>;
export const FindConversationsSortField = z.enum(['created_at', 'title', 'updated_at']);
export type FindConversationsSortFieldEnum = typeof FindConversationsSortField.enum;
export const FindConversationsSortFieldEnum = FindConversationsSortField.enum;

/**
 * Fields available for sorting Knowledge Base Entries.
 */
export type FindKnowledgeBaseEntriesSortField = z.infer<typeof FindKnowledgeBaseEntriesSortField>;
export const FindKnowledgeBaseEntriesSortField = z.enum([
  'created_at',
  'is_default',
  'title',
  'updated_at',
]);
export type FindKnowledgeBaseEntriesSortFieldEnum = typeof FindKnowledgeBaseEntriesSortField.enum;
export const FindKnowledgeBaseEntriesSortFieldEnum = FindKnowledgeBaseEntriesSortField.enum;

/**
 * Field by which to sort the prompts.
 */
export type FindPromptsSortField = z.infer<typeof FindPromptsSortField>;
export const FindPromptsSortField = z.enum(['created_at', 'is_default', 'name', 'updated_at']);
export type FindPromptsSortFieldEnum = typeof FindPromptsSortField.enum;
export const FindPromptsSortFieldEnum = FindPromptsSortField.enum;

export type IndexEntryRequiredFields = z.infer<typeof IndexEntryRequiredFields>;
export const IndexEntryRequiredFields = z.object({
  /**
   * Description for when this index or data stream should be queried for Knowledge Base content. Passed to the LLM as a tool description.
   */
  description: z.string(),
  /**
   * Field to query for Knowledge Base content.
   */
  field: z.string(),
  /**
   * Index or Data Stream to query for Knowledge Base content.
   */
  index: z.string(),
  /**
   * Description of query field used to fetch Knowledge Base content. Passed to the LLM as part of the tool input schema.
   */
  queryDescription: z.string(),
  /**
   * Entry type.
   */
  type: z.literal('index'),
});

/**
 * Array of objects defining the input schema, allowing the LLM to extract structured data to be used in retrieval.
 */
export type InputSchema = z.infer<typeof InputSchema>;
export const InputSchema = z.array(
  z.object({
    /**
     * Description of the field.
     */
    description: z.string(),
    /**
     * Name of the field.
     */
    fieldName: z.string(),
    /**
     * Type of the field.
     */
    fieldType: z.string(),
  })
);

export type IndexEntryOptionalFields = z.infer<typeof IndexEntryOptionalFields>;
export const IndexEntryOptionalFields = z.object({
  inputSchema: InputSchema.optional(),
  /**
   * Fields to extract from the query result, defaults to all fields if not provided or empty.
   */
  outputFields: z.array(z.string()).optional(),
});

export type IndexEntryResponseFields = z.infer<typeof IndexEntryResponseFields>;
export const IndexEntryResponseFields = IndexEntryRequiredFields.merge(IndexEntryOptionalFields);

export type IndexEntry = z.infer<typeof IndexEntry>;
export const IndexEntry = z
  .object({
    /**
     * Whether this Knowledge Base Entry is global, defaults to false.
     */
    global: z.boolean(),
    /**
     * Name of the Knowledge Base Entry.
     */
    name: z.string(),
    /**
     * Kibana Space, defaults to 'default' space.
     */
    namespace: z.string(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User),
  })
  .merge(ResponseFields)
  .merge(IndexEntryResponseFields);

export type IndexEntryCreateFields = z.infer<typeof IndexEntryCreateFields>;
export const IndexEntryCreateFields = z
  .object({
    /**
     * Whether this Knowledge Base Entry is global, defaults to false.
     */
    global: z.boolean().optional(),
    /**
     * Name of the Knowledge Base Entry.
     */
    name: z.string(),
    /**
     * Kibana Space, defaults to 'default' space.
     */
    namespace: z.string().optional(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User).optional(),
  })
  .merge(IndexEntryRequiredFields)
  .merge(IndexEntryOptionalFields);

export type IndexEntryUpdateFields = z.infer<typeof IndexEntryUpdateFields>;
export const IndexEntryUpdateFields = z
  .object({
    /**
     * Whether this Knowledge Base Entry is global, defaults to false.
     */
    global: z.boolean().optional(),
    id: NonEmptyString,
    /**
     * Name of the Knowledge Base Entry.
     */
    name: z.string().optional(),
    /**
     * Kibana Space, defaults to 'default' space.
     */
    namespace: z.string().optional(),
    /**
     * Users who have access to the Knowledge Base Entry, defaults to current user. Empty array provides access to all users.
     */
    users: z.array(User).optional(),
  })
  .merge(IndexEntryCreateFields);

/**
 * Reason why a Knowledge Base Entry was skipped during the bulk action.
 */
export type KnowledgeBaseEntryBulkActionSkipReason = z.infer<
  typeof KnowledgeBaseEntryBulkActionSkipReason
>;
export const KnowledgeBaseEntryBulkActionSkipReason = z.literal(
  'KNOWLEDGE_BASE_ENTRY_NOT_MODIFIED'
);

export type KnowledgeBaseEntryBulkActionSkipResult = z.infer<
  typeof KnowledgeBaseEntryBulkActionSkipResult
>;
export const KnowledgeBaseEntryBulkActionSkipResult = z.object({
  /**
   * ID of the skipped Knowledge Base Entry.
   */
  id: z.string(),
  /**
   * Name of the skipped Knowledge Base Entry.
   */
  name: z.string().optional(),
  skip_reason: KnowledgeBaseEntryBulkActionSkipReason,
});

export type KnowledgeBaseEntryDetailsInError = z.infer<typeof KnowledgeBaseEntryDetailsInError>;
export const KnowledgeBaseEntryDetailsInError = z.object({
  /**
   * ID of the Knowledge Base Entry that encountered an error.
   */
  id: z.string(),
  /**
   * Name of the Knowledge Base Entry that encountered an error.
   */
  name: z.string().optional(),
});

export type NormalizedKnowledgeBaseEntryError = z.infer<typeof NormalizedKnowledgeBaseEntryError>;
export const NormalizedKnowledgeBaseEntryError = z.object({
  /**
   * Specific error code for the issue.
   */
  err_code: z.string().optional(),
  /**
   * List of Knowledge Base Entries that encountered the error.
   */
  knowledgeBaseEntries: z.array(KnowledgeBaseEntryDetailsInError),
  /**
   * Error message describing the issue.
   */
  message: z.string(),
  /**
   * HTTP status code associated with the error.
   */
  statusCode: z.number().int(),
});

export type KnowledgeBaseEntryResponse = z.infer<typeof KnowledgeBaseEntryResponse>;
export const KnowledgeBaseEntryResponse = z.discriminatedUnion('type', [DocumentEntry, IndexEntry]);

export type KnowledgeBaseEntryBulkCrudActionResults = z.infer<
  typeof KnowledgeBaseEntryBulkCrudActionResults
>;
export const KnowledgeBaseEntryBulkCrudActionResults = z.object({
  /**
   * List of Knowledge Base Entries that were successfully created.
   */
  created: z.array(KnowledgeBaseEntryResponse),
  /**
   * List of IDs of Knowledge Base Entries that were successfully deleted.
   */
  deleted: z.array(z.string()),
  /**
   * List of Knowledge Base Entries that were skipped during the bulk action.
   */
  skipped: z.array(KnowledgeBaseEntryBulkActionSkipResult),
  /**
   * List of Knowledge Base Entries that were successfully updated.
   */
  updated: z.array(KnowledgeBaseEntryResponse),
});

export type KnowledgeBaseEntryBulkCrudActionSummary = z.infer<
  typeof KnowledgeBaseEntryBulkCrudActionSummary
>;
export const KnowledgeBaseEntryBulkCrudActionSummary = z.object({
  /**
   * Number of Knowledge Base Entries that failed during the bulk action.
   */
  failed: z.number().int(),
  /**
   * Number of Knowledge Base Entries that were skipped during the bulk action.
   */
  skipped: z.number().int(),
  /**
   * Number of Knowledge Base Entries that were successfully processed during the bulk action.
   */
  succeeded: z.number().int(),
  /**
   * Total number of Knowledge Base Entries involved in the bulk action.
   */
  total: z.number().int(),
});

export type KnowledgeBaseEntryBulkCrudActionResponse = z.infer<
  typeof KnowledgeBaseEntryBulkCrudActionResponse
>;
export const KnowledgeBaseEntryBulkCrudActionResponse = z.object({
  attributes: z.object({
    /**
     * List of errors encountered during the bulk action.
     */
    errors: z.array(NormalizedKnowledgeBaseEntryError).optional(),
    results: KnowledgeBaseEntryBulkCrudActionResults,
    summary: KnowledgeBaseEntryBulkCrudActionSummary,
  }),
  /**
   * Total number of Knowledge Base Entries processed.
   */
  knowledgeBaseEntriesCount: z.number().int().optional(),
  /**
   * Message describing the result of the bulk action.
   */
  message: z.string().optional(),
  /**
   * HTTP status code of the response.
   */
  statusCode: z.number().int().optional(),
  /**
   * Indicates whether the bulk action was successful.
   */
  success: z.boolean().optional(),
});

export type KnowledgeBaseEntryCreateProps = z.infer<typeof KnowledgeBaseEntryCreateProps>;
export const KnowledgeBaseEntryCreateProps = z.discriminatedUnion('type', [
  DocumentEntryCreateFields,
  IndexEntryCreateFields,
]);

export type KnowledgeBaseEntryErrorSchema = z.infer<typeof KnowledgeBaseEntryErrorSchema>;
export const KnowledgeBaseEntryErrorSchema = z
  .object({
    /**
     * Error type or category.
     */
    error: z.string(),
    /**
     * Detailed error message.
     */
    message: z.string(),
    /**
     * HTTP status code of the error.
     */
    statusCode: z.number(),
  })
  .strict();

export type KnowledgeBaseEntryUpdateProps = z.infer<typeof KnowledgeBaseEntryUpdateProps>;
export const KnowledgeBaseEntryUpdateProps = z.discriminatedUnion('type', [
  DocumentEntryUpdateFields,
  IndexEntryUpdateFields,
]);

export type KnowledgeBaseEntryUpdateRouteProps = z.infer<typeof KnowledgeBaseEntryUpdateRouteProps>;
export const KnowledgeBaseEntryUpdateRouteProps = z.discriminatedUnion('type', [
  DocumentEntryCreateFields,
  IndexEntryCreateFields,
]);

/**
 * AI assistant KnowledgeBase.
 */
export type KnowledgeBaseResponse = z.infer<typeof KnowledgeBaseResponse>;
export const KnowledgeBaseResponse = z.object({
  /**
   * Identify the success of the method execution.
   */
  success: z.boolean().optional(),
});

export type PromptDetailsInError = z.infer<typeof PromptDetailsInError>;
export const PromptDetailsInError = z.object({
  /**
   * The ID of the prompt that encountered an error.
   */
  id: z.string(),
  /**
   * The name of the prompt that encountered an error.
   */
  name: z.string().optional(),
});

export type NormalizedPromptError = z.infer<typeof NormalizedPromptError>;
export const NormalizedPromptError = z.object({
  /**
   * A code representing the error type.
   */
  err_code: z.string().optional(),
  /**
   * A message describing the error encountered.
   */
  message: z.string(),
  /**
   * List of prompts that encountered errors.
   */
  prompts: z.array(PromptDetailsInError),
  /**
   * The HTTP status code associated with the error.
   */
  status_code: z.number().int(),
});

/**
 * Type of the prompt (either system or quick).
 */
export type PromptType = z.infer<typeof PromptType>;
export const PromptType = z.enum(['system', 'quick']);
export type PromptTypeEnum = typeof PromptType.enum;
export const PromptTypeEnum = PromptType.enum;

export type PromptCreateProps = z.infer<typeof PromptCreateProps>;
export const PromptCreateProps = z.object({
  /**
   * List of categories for the prompt.
   */
  categories: z.array(z.string()).optional(),
  /**
   * The color associated with the prompt.
   */
  color: z.string().optional(),
  /**
   * The consumer associated with the prompt.
   */
  consumer: z.string().optional(),
  /**
   * The content of the prompt.
   */
  content: z.string(),
  /**
   * Whether this prompt should be the default.
   */
  isDefault: z.boolean().optional(),
  /**
   * Whether this prompt should be the default for new conversations.
   */
  isNewConversationDefault: z.boolean().optional(),
  /**
   * The name of the prompt.
   */
  name: z.string(),
  /**
   * The type of the prompt.
   */
  promptType: PromptType,
});

export type PromptResponse = z.infer<typeof PromptResponse>;
export const PromptResponse = z.object({
  /**
   * Categories associated with the prompt.
   */
  categories: z.array(z.string()).optional(),
  /**
   * The color associated with the prompt.
   */
  color: z.string().optional(),
  /**
   * The consumer that the prompt is associated with.
   */
  consumer: z.string().optional(),
  /**
   * The content of the prompt.
   */
  content: z.string(),
  /**
   * The timestamp of when the prompt was created.
   */
  createdAt: z.string().optional(),
  /**
   * The user who created the prompt.
   */
  createdBy: z.string().optional(),
  id: NonEmptyString,
  /**
   * Whether this prompt is the default.
   */
  isDefault: z.boolean().optional(),
  /**
   * Whether this prompt is the default for new conversations.
   */
  isNewConversationDefault: z.boolean().optional(),
  /**
   * The name of the prompt.
   */
  name: z.string(),
  /**
   * Kibana space where the prompt is located.
   */
  namespace: z.string().optional(),
  /**
   * The type of the prompt.
   */
  promptType: PromptType,
  timestamp: NonEmptyTimestamp.optional(),
  /**
   * The timestamp of when the prompt was last updated.
   */
  updatedAt: z.string().optional(),
  /**
   * The user who last updated the prompt.
   */
  updatedBy: z.string().optional(),
  /**
   * List of users associated with the prompt.
   */
  users: z.array(User).optional(),
});

/**
 * Reason why a prompt was skipped during the bulk action.
 */
export type PromptsBulkActionSkipReason = z.infer<typeof PromptsBulkActionSkipReason>;
export const PromptsBulkActionSkipReason = z.literal('PROMPT_FIELD_NOT_MODIFIED');

export type PromptsBulkActionSkipResult = z.infer<typeof PromptsBulkActionSkipResult>;
export const PromptsBulkActionSkipResult = z.object({
  /**
   * The ID of the prompt that was skipped.
   */
  id: z.string(),
  /**
   * The name of the prompt that was skipped.
   */
  name: z.string().optional(),
  /**
   * The reason for skipping the prompt.
   */
  skip_reason: PromptsBulkActionSkipReason,
});

export type PromptsBulkCrudActionResults = z.infer<typeof PromptsBulkCrudActionResults>;
export const PromptsBulkCrudActionResults = z.object({
  /**
   * List of prompts that were created.
   */
  created: z.array(PromptResponse),
  /**
   * List of IDs of prompts that were deleted.
   */
  deleted: z.array(z.string()),
  /**
   * List of prompts that were skipped.
   */
  skipped: z.array(PromptsBulkActionSkipResult),
  /**
   * List of prompts that were updated.
   */
  updated: z.array(PromptResponse),
});

export type PromptsBulkCrudActionResponse = z.infer<typeof PromptsBulkCrudActionResponse>;
export const PromptsBulkCrudActionResponse = z.object({
  attributes: z.object({
    errors: z.array(NormalizedPromptError).optional(),
    results: PromptsBulkCrudActionResults,
    summary: BulkCrudActionSummary,
  }),
  /**
   * A message describing the result of the bulk action.
   */
  message: z.string().optional(),
  /**
   * The number of prompts processed in the bulk action.
   */
  prompts_count: z.number().int().optional(),
  /**
   * The HTTP status code of the response.
   */
  status_code: z.number().int().optional(),
  /**
   * Indicates if the bulk action was successful.
   */
  success: z.boolean().optional(),
});

export type PromptUpdateProps = z.infer<typeof PromptUpdateProps>;
export const PromptUpdateProps = z.object({
  /**
   * The updated categories for the prompt.
   */
  categories: z.array(z.string()).optional(),
  /**
   * The updated color associated with the prompt.
   */
  color: z.string().optional(),
  /**
   * The updated consumer for the prompt.
   */
  consumer: z.string().optional(),
  /**
   * The updated content for the prompt.
   */
  content: z.string().optional(),
  /**
   * The ID of the prompt to update.
   */
  id: z.string(),
  /**
   * Whether this prompt should be the default.
   */
  isDefault: z.boolean().optional(),
  /**
   * Whether the prompt should be the default for new conversations.
   */
  isNewConversationDefault: z.boolean().optional(),
});

/**
 * The order in which results are sorted.
 */
export type SortOrder = z.infer<typeof SortOrder>;
export const SortOrder = z.enum(['asc', 'desc']);
export type SortOrderEnum = typeof SortOrder.enum;
export const SortOrderEnum = SortOrder.enum;
