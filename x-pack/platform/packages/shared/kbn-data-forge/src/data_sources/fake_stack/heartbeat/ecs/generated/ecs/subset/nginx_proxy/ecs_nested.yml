base:
  description: The `base` field set contains all fields which are at the root of the
    events. These fields are common across all types of events.
  fields:
    '@timestamp':
      dashed_name: timestamp
      description: 'Date/time when the event originated.

        This is the date/time extracted from the event, typically representing when
        the event was generated by the source.

        If the event source has no original timestamp, this value is typically populated
        by the first time the event was received by the pipeline.

        Required field for all events.'
      example: '2016-05-23T08:05:34.853Z'
      flat_name: '@timestamp'
      level: core
      name: '@timestamp'
      normalize: []
      required: true
      short: Date/time when the event originated.
      type: date
    labels:
      dashed_name: labels
      description: 'Custom key/value pairs.

        Can be used to add meta information to events. Should not contain nested objects.
        All values are stored as keyword.

        Example: `docker` and `k8s` labels.'
      example: '{"application": "foo-bar", "env": "production"}'
      flat_name: labels
      level: core
      name: labels
      normalize: []
      object_type: keyword
      short: Custom key/value pairs.
      type: object
    message:
      dashed_name: message
      description: 'For log events the message field contains the log message, optimized
        for viewing in a log viewer.

        For structured logs without an original message field, other fields can be
        concatenated to form a human-readable summary of the event.

        If multiple messages exist, they can be combined into one message.'
      example: Hello World
      flat_name: message
      level: core
      name: message
      normalize: []
      short: Log message optimized for viewing in a log viewer.
      type: match_only_text
    tags:
      dashed_name: tags
      description: List of keywords used to tag each event.
      example: '["production", "env2"]'
      flat_name: tags
      ignore_above: 1024
      level: core
      name: tags
      normalize:
      - array
      short: List of keywords used to tag each event.
      type: keyword
  group: 1
  name: base
  prefix: ''
  root: true
  short: All fields defined directly at the root of the events.
  title: Base
  type: group
host:
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:
    host.name:
      dashed_name: host-name
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified
        domain name, or a name specified by the user. The sender decides which value
        to use.'
      flat_name: host.name
      ignore_above: 1024
      level: core
      name: name
      normalize: []
      short: Name of the host.
      type: keyword
  group: 2
  name: host
  nestings:
  - host.geo
  - host.os
  prefix: host.
  reused_here:
  - full: host.geo
    schema_name: geo
    short: Fields describing a location.
  - full: host.os
    schema_name: os
    short: OS fields contain information about the operating system.
  short: Fields describing the relevant computing instance.
  title: Host
  type: group
http:
  description: Fields related to HTTP activity. Use the `url` field set to store the
    url of the request.
  fields:
    http.response.bytes:
      dashed_name: http-response-bytes
      description: Total size in bytes of the response (body and headers).
      example: 1437
      flat_name: http.response.bytes
      format: bytes
      level: extended
      name: response.bytes
      normalize: []
      short: Total size in bytes of the response (body and headers).
      type: long
    http.response.status_code:
      dashed_name: http-response-status-code
      description: HTTP response status code.
      example: 404
      flat_name: http.response.status_code
      format: string
      level: extended
      name: response.status_code
      normalize: []
      short: HTTP response status code.
      type: long
  group: 2
  name: http
  prefix: http.
  short: Fields describing an HTTP request.
  title: HTTP
  type: group
log:
  description: 'Details about the event''s logging mechanism or logging transport.

    The log.* fields are typically populated with details about the logging mechanism
    used to create and/or transport the event. For example, syslog details belong
    under `log.syslog.*`.

    The details specific to your event source are typically not logged under `log.*`,
    but rather in `event.*` or in other ECS fields.'
  fields:
    log.level:
      dashed_name: log-level
      description: 'Original log level of the log event.

        If the source of the event provides a log level or textual severity, this
        is the one that goes in `log.level`. If your source doesn''t specify one,
        you may put your event transport''s severity here (e.g. Syslog severity).

        Some examples are `warn`, `err`, `i`, `informational`.'
      example: error
      flat_name: log.level
      ignore_above: 1024
      level: core
      name: level
      normalize: []
      short: Log level of the log event.
      type: keyword
    log.logger:
      dashed_name: log-logger
      description: The name of the logger inside an application. This is usually the
        name of the class which initialized the logger, or can be a custom name.
      example: org.elasticsearch.bootstrap.Bootstrap
      flat_name: log.logger
      ignore_above: 1024
      level: core
      name: logger
      normalize: []
      short: Name of the logger.
      type: keyword
  group: 2
  name: log
  prefix: log.
  short: Details about the event's logging mechanism.
  title: Log
  type: group
url:
  description: URL fields provide support for complete or partial URLs, and supports
    the breaking down into scheme, domain, path, and so on.
  fields:
    url.domain:
      dashed_name: url-domain
      description: 'Domain of the url, such as "www.elastic.co".

        In some cases a URL may refer to an IP and/or port directly, without a domain
        name. In this case, the IP address would go to the `domain` field.

        If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC
        2732), the `[` and `]` characters should also be captured in the `domain`
        field.'
      example: www.elastic.co
      flat_name: url.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      short: Domain of the url.
      type: keyword
  group: 2
  name: url
  prefix: url.
  reusable:
    expected:
    - as: url
      at: threat.indicator
      full: threat.indicator.url
    - as: url
      at: threat.enrichments.indicator
      beta: Reusing the `url` fields in this location is currently considered beta.
      full: threat.enrichments.indicator.url
    top_level: true
  short: Fields that let you store URLs in various forms.
  title: URL
  type: group
