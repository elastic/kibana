base:
  description: The `base` field set contains all fields which are at the root of the
    events. These fields are common across all types of events.
  fields:
    '@timestamp':
      dashed_name: timestamp
      description: 'Date/time when the event originated.

        This is the date/time extracted from the event, typically representing when
        the event was generated by the source.

        If the event source has no original timestamp, this value is typically populated
        by the first time the event was received by the pipeline.

        Required field for all events.'
      example: '2016-05-23T08:05:34.853Z'
      flat_name: '@timestamp'
      level: core
      name: '@timestamp'
      normalize: []
      required: true
      short: Date/time when the event originated.
      type: date
    labels:
      dashed_name: labels
      description: 'Custom key/value pairs.

        Can be used to add meta information to events. Should not contain nested objects.
        All values are stored as keyword.

        Example: `docker` and `k8s` labels.'
      example: '{"application": "foo-bar", "env": "production"}'
      flat_name: labels
      level: core
      name: labels
      normalize: []
      object_type: keyword
      short: Custom key/value pairs.
      type: object
    message:
      dashed_name: message
      description: 'For log events the message field contains the log message, optimized
        for viewing in a log viewer.

        For structured logs without an original message field, other fields can be
        concatenated to form a human-readable summary of the event.

        If multiple messages exist, they can be combined into one message.'
      example: Hello World
      flat_name: message
      level: core
      name: message
      normalize: []
      short: Log message optimized for viewing in a log viewer.
      type: match_only_text
    tags:
      dashed_name: tags
      description: List of keywords used to tag each event.
      example: '["production", "env2"]'
      flat_name: tags
      ignore_above: 1024
      level: core
      name: tags
      normalize:
      - array
      short: List of keywords used to tag each event.
      type: keyword
  group: 1
  name: base
  prefix: ''
  root: true
  short: All fields defined directly at the root of the events.
  title: Base
  type: group
event:
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    measurements and the time at which the measurement was taken. Examples of metric
    events include memory pressure measured on a host and device temperature. See
    the `event.kind` definition in this section for additional details about metric
    and state events.'
  fields:
    event.action:
      dashed_name: event-action
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`.
        Examples are `group-add`, `process-started`, `file-created`. The value is
        normally defined by the implementer.'
      example: user-password-change
      flat_name: event.action
      ignore_above: 1024
      level: core
      name: action
      normalize: []
      short: The action captured by the event.
      type: keyword
    event.duration:
      dashed_name: event-duration
      description: 'Duration of the event in nanoseconds.

        If event.start and event.end are known this value should be the difference
        between the end and start time.'
      flat_name: event.duration
      format: duration
      input_format: nanoseconds
      level: core
      name: duration
      normalize: []
      output_format: asMilliseconds
      output_precision: 1
      short: Duration of the event in nanoseconds.
      type: long
    event.outcome:
      allowed_values:
      - description: Indicates that this event describes a failed result. A common
          example is `event.category:file AND event.type:access AND event.outcome:failure`
          to indicate that a file access was attempted, but was not successful.
        name: failure
      - description: Indicates that this event describes a successful result. A common
          example is `event.category:file AND event.type:create AND event.outcome:success`
          to indicate that a file was successfully created.
        name: success
      - description: Indicates that this event describes only an attempt for which
          the result is unknown from the perspective of the event producer. For example,
          if the event contains information only about the request side of a transaction
          that results in a response, populating `event.outcome:unknown` in the request
          event is appropriate. The unknown value should not be used when an outcome
          doesn't make logical sense for the event. In such cases `event.outcome`
          should not be populated.
        name: unknown
      dashed_name: event-outcome
      description: 'This is one of four ECS Categorization Fields, and indicates the
        lowest level in the ECS category hierarchy.

        `event.outcome` simply denotes whether the event represents a success or a
        failure from the perspective of the entity that produced the event.

        Note that when a single transaction is described in multiple events, each
        event may populate different values of `event.outcome`, according to their
        perspective.

        Also note that in the case of a compound event (a single event that contains
        multiple logical events), this field should be populated with the value that
        best captures the overall success or failure from the perspective of the event
        producer.

        Further note that not all events will have an associated outcome. For example,
        this field is generally not populated for metric events, events with `event.type:info`,
        or any events for which an outcome does not make logical sense.'
      example: success
      flat_name: event.outcome
      ignore_above: 1024
      level: core
      name: outcome
      normalize: []
      short: The outcome of the event. The lowest level categorization field in the
        hierarchy.
      type: keyword
    event.type:
      allowed_values:
      - description: The access event type is used for the subset of events within
          a category that indicate that something was accessed. Common examples include
          `event.category:database AND event.type:access`, or `event.category:file
          AND event.type:access`. Note for file access, both directory listings and
          file opens should be included in this subcategory. You can further distinguish
          access operations using the ECS `event.action` field.
        name: access
      - description: 'The admin event type is used for the subset of events within
          a category that are related to admin objects. For example, administrative
          changes within an IAM framework that do not specifically affect a user or
          group (e.g., adding new applications to a federation solution or connecting
          discrete forests in Active Directory) would fall into this subcategory.
          Common example: `event.category:iam AND event.type:change AND event.type:admin`.
          You can further distinguish admin operations using the ECS `event.action`
          field.'
        name: admin
      - description: The allowed event type is used for the subset of events within
          a category that indicate that something was allowed. Common examples include
          `event.category:network AND event.type:connection AND event.type:allowed`
          (to indicate a network firewall event for which the firewall disposition
          was to allow the connection to complete) and `event.category:intrusion_detection
          AND event.type:allowed` (to indicate a network intrusion prevention system
          event for which the IPS disposition was to allow the connection to complete).
          You can further distinguish allowed operations using the ECS `event.action`
          field, populating with values of your choosing, such as "allow", "detect",
          or "pass".
        name: allowed
      - description: The change event type is used for the subset of events within
          a category that indicate that something has changed. If semantics best describe
          an event as modified, then include them in this subcategory. Common examples
          include `event.category:process AND event.type:change`, and `event.category:file
          AND event.type:change`. You can further distinguish change operations using
          the ECS `event.action` field.
        name: change
      - description: Used primarily with `event.category:network` this value is used
          for the subset of network traffic that includes sufficient information for
          the event to be included in flow or connection analysis. Events in this
          subcategory will contain at least source and destination IP addresses, source
          and destination TCP/UDP ports, and will usually contain counts of bytes
          and/or packets transferred. Events in this subcategory may contain unidirectional
          or bidirectional information, including summary information. Use this subcategory
          to visualize and analyze network connections. Flow analysis, including Netflow,
          IPFIX, and other flow-related events fit in this subcategory. Note that
          firewall events from many Next-Generation Firewall (NGFW) devices will also
          fit into this subcategory.  A common filter for flow/connection information
          would be `event.category:network AND event.type:connection AND event.type:end`
          (to view or analyze all completed network connections, ignoring mid-flow
          reports). You can further distinguish connection events using the ECS `event.action`
          field, populating with values of your choosing, such as "timeout", or "reset".
        name: connection
      - description: The "creation" event type is used for the subset of events within
          a category that indicate that something was created. A common example is
          `event.category:file AND event.type:creation`.
        name: creation
      - description: The deletion event type is used for the subset of events within
          a category that indicate that something was deleted. A common example is
          `event.category:file AND event.type:deletion` to indicate that a file has
          been deleted.
        name: deletion
      - description: The denied event type is used for the subset of events within
          a category that indicate that something was denied. Common examples include
          `event.category:network AND event.type:denied` (to indicate a network firewall
          event for which the firewall disposition was to deny the connection) and
          `event.category:intrusion_detection AND event.type:denied` (to indicate
          a network intrusion prevention system event for which the IPS disposition
          was to deny the connection to complete). You can further distinguish denied
          operations using the ECS `event.action` field, populating with values of
          your choosing, such as "blocked", "dropped", or "quarantined".
        name: denied
      - description: The end event type is used for the subset of events within a
          category that indicate something has ended. A common example is `event.category:process
          AND event.type:end`.
        name: end
      - description: The error event type is used for the subset of events within
          a category that indicate or describe an error. A common example is `event.category:database
          AND event.type:error`. Note that pipeline errors that occur during the event
          ingestion process should not use this `event.type` value. Instead, they
          should use `event.kind:pipeline_error`.
        name: error
      - description: 'The group event type is used for the subset of events within
          a category that are related to group objects. Common example: `event.category:iam
          AND event.type:creation AND event.type:group`. You can further distinguish
          group operations using the ECS `event.action` field.'
        name: group
      - description: 'The indicator event type is used for the subset of events within
          a category that contain details about indicators of compromise (IOCs).

          A common example is `event.category:threat AND event.type:indicator`.'
        name: indicator
      - description: The info event type is used for the subset of events within a
          category that indicate that they are purely informational, and don't report
          a state change, or any type of action. For example, an initial run of a
          file integrity monitoring system (FIM), where an agent reports all files
          under management, would fall into the "info" subcategory. Similarly, an
          event containing a dump of all currently running processes (as opposed to
          reporting that a process started/ended) would fall into the "info" subcategory.
          An additional common examples is `event.category:intrusion_detection AND
          event.type:info`.
        name: info
      - description: The installation event type is used for the subset of events
          within a category that indicate that something was installed. A common example
          is `event.category:package` AND `event.type:installation`.
        name: installation
      - description: The protocol event type is used for the subset of events within
          a category that indicate that they contain protocol details or analysis,
          beyond simply identifying the protocol. Generally, network events that contain
          specific protocol details will fall into this subcategory. A common example
          is `event.category:network AND event.type:protocol AND event.type:connection
          AND event.type:end` (to indicate that the event is a network connection
          event sent at the end of a connection that also includes a protocol detail
          breakdown). Note that events that only indicate the name or id of the protocol
          should not use the protocol value. Further note that when the protocol subcategory
          is used, the identified protocol is populated in the ECS `network.protocol`
          field.
        name: protocol
      - description: The start event type is used for the subset of events within
          a category that indicate something has started. A common example is `event.category:process
          AND event.type:start`.
        name: start
      - description: 'The user event type is used for the subset of events within
          a category that are related to user objects. Common example: `event.category:iam
          AND event.type:deletion AND event.type:user`. You can further distinguish
          user operations using the ECS `event.action` field.'
        name: user
      dashed_name: event-type
      description: 'This is one of four ECS Categorization Fields, and indicates the
        third level in the ECS category hierarchy.

        `event.type` represents a categorization "sub-bucket" that, when used along
        with the `event.category` field values, enables filtering events down to a
        level appropriate for single visualization.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple event types.'
      flat_name: event.type
      ignore_above: 1024
      level: core
      name: type
      normalize:
      - array
      short: Event type. The third categorization field in the hierarchy.
      type: keyword
    event.url:
      dashed_name: event-url
      description: 'URL linking to an external system to continue investigation of
        this event.

        This URL links to another system where in-depth investigation of the specific
        occurrence of this event can take place. Alert events, indicated by `event.kind:alert`,
        are a common use case for this field.'
      example: https://mysystem.example.com/alert/5271dedb-f5b0-4218-87f0-4ac4870a38fe
      flat_name: event.url
      ignore_above: 1024
      level: extended
      name: url
      normalize: []
      short: Event investigation URL
      type: keyword
  group: 2
  name: event
  prefix: event.
  short: Fields breaking down the event details.
  title: Event
  type: group
log:
  description: 'Details about the event''s logging mechanism or logging transport.

    The log.* fields are typically populated with details about the logging mechanism
    used to create and/or transport the event. For example, syslog details belong
    under `log.syslog.*`.

    The details specific to your event source are typically not logged under `log.*`,
    but rather in `event.*` or in other ECS fields.'
  fields:
    log.level:
      dashed_name: log-level
      description: 'Original log level of the log event.

        If the source of the event provides a log level or textual severity, this
        is the one that goes in `log.level`. If your source doesn''t specify one,
        you may put your event transport''s severity here (e.g. Syslog severity).

        Some examples are `warn`, `err`, `i`, `informational`.'
      example: error
      flat_name: log.level
      ignore_above: 1024
      level: core
      name: level
      normalize: []
      short: Log level of the log event.
      type: keyword
    log.logger:
      dashed_name: log-logger
      description: The name of the logger inside an application. This is usually the
        name of the class which initialized the logger, or can be a custom name.
      example: org.elasticsearch.bootstrap.Bootstrap
      flat_name: log.logger
      ignore_above: 1024
      level: core
      name: logger
      normalize: []
      short: Name of the logger.
      type: keyword
  group: 2
  name: log
  prefix: log.
  short: Details about the event's logging mechanism.
  title: Log
  type: group
