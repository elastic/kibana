/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export interface components {
  schemas: {
    AgentConfig: components['schemas']['NewAgentConfig'] & {
      id: string;
      status: 'active' | 'inactive';
      datasources?: string[] | Array<components['schemas']['Datasource']>;
      updated_on?: string;
      updated_by?: string;
      revision?: number;
      agents?: number;
    };
    Datasource: {
      id: string;
      revision: number;
      inputs?: Array<{ [key: string]: any }>;
    } & components['schemas']['NewDatasource'];
    NewAgentConfig: { name?: string; namespace?: string; description?: string };
    NewDatasource: {
      enabled?: boolean;
      package?: { name: string; version: string; title: string };
      namespace?: string;
      output_id: string;
      inputs: Array<{
        type: string;
        enabled: boolean;
        processors?: string[];
        streams: Array<{ [key: string]: any }>;
        config?: { [key: string]: any };
        vars?: { [key: string]: any };
      }>;
      config_id: string;
      name: string;
      description?: string;
    };
    PackageInfo: {
      name: string;
      title: string;
      version: string;
      readme?: string;
      description: string;
      type: string;
      categories: string[];
      requirement: { kibana?: { versions?: string } } | { elasticsearch?: { versions?: string } };
      screenshots?: Array<{ src: string; title?: string }>;
      icons?: string[];
      assets: string[];
      internal?: boolean;
      format_version: string;
      datasets?: Array<{
        title: string;
        name: string;
        release: string;
        ingeset_pipeline: string;
        vars?: Array<{ name: string; default: string }>;
        type: string;
        package: string;
      }>;
      download: string;
      path: string;
    };
    SearchResult: {
      description: string;
      download: string;
      icons: string;
      name: string;
      path: string;
      title: string;
      type: string;
      version: string;
      status: string;
      savedObject?: { [key: string]: any };
    };
    AgentStatus: 'offline' | 'error' | 'online' | 'inactive' | 'warning';
    Agent: {
      type: components['schemas']['AgentType'];
      active: boolean;
      enrolled_at: string;
      shared_id?: string;
      access_api_key_id?: string;
      default_api_key_id?: string;
      config_id?: string;
      config_revision?: { [key: string]: any };
      config_newest_revision?: number;
      last_checkin?: string;
      user_provided_metadata?: components['schemas']['AgentMetadata'];
      local_metadata?: components['schemas']['AgentMetadata'];
      id: string;
      current_error_events: Array<components['schemas']['AgentEvent']>;
      access_api_key?: string;
      status: components['schemas']['AgentStatus'];
      default_api_key?: string;
    };
    AgentType: 'PERMANENT' | 'EPHEMERAL' | 'TEMPORARY';
    AgentMetadata: { [key: string]: any };
    NewAgentEvent: {
      type: 'STATE' | 'ERROR' | 'ACTION_RESULT' | 'ACTION';
      subtype:
        | 'RUNNING'
        | 'STARTING'
        | 'IN_PROGRESS'
        | 'CONFIG'
        | 'FAILED'
        | 'STOPPING'
        | 'STOPPED'
        | 'DATA_DUMP'
        | 'ACKNOWLEDGED'
        | 'UNKNOWN';
      timestamp: string;
      message: string;
      payload?: string;
      agent_id: string;
      config_id?: string;
      stream_id?: string;
      action_id?: string;
    };
    AgentEvent: { id: string } & components['schemas']['NewAgentEvent'];
    AccessApiKey: string;
    EnrollmentApiKey: string;
  };
}
