/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { EuiBadge, EuiIcon, EuiTextColor } from '@elastic/eui';
import React from 'react';
import { css } from '@emotion/react';
import { float } from '@elastic/elasticsearch/lib/api/typesWithBodyKey';
import { getCvsScoreColor, getSeverityStatusColor } from '../common/utils/get_vulnerability_colors';
import { VulnSeverity } from '../../common/types';
import { VULNERABILITIES_CVSS_SCORE_BADGE_SUBJ } from './test_subjects';

interface CVSScoreBadgeProps {
  score: float;
  version?: string;
}

interface SeverityStatusBadgeProps {
  severity: VulnSeverity;
}

export const CVSScoreBadge = ({ score, version }: CVSScoreBadgeProps) => {
  const color = getCvsScoreColor(score);
  const versionDisplay = version ? `v${version.split('.')[0]}` : null;
  return (
    <EuiBadge
      color={color}
      css={css`
        border: none;
        .euiBadge__text {
          display: flex;
        }
        width: 62px;
      `}
      data-test-subj={VULNERABILITIES_CVSS_SCORE_BADGE_SUBJ}
    >
      {versionDisplay && (
        <>
          <EuiTextColor color="ghost">{score < 10 ? score.toFixed(1) : score}</EuiTextColor>
          <hr
            css={css`
              width: 1px;
              border: 0 none;
              background-color: rgba(255, 255, 255, 0.2);
              margin: 0px 6px;
            `}
          />
          <EuiTextColor color="ghost">{versionDisplay}</EuiTextColor>
        </>
      )}
    </EuiBadge>
  );
};

export const SeverityStatusBadge = ({ severity }: SeverityStatusBadgeProps) => {
  const color = getSeverityStatusColor(severity);

  return (
    <div
      css={css`
        display: flex;
        flex-direction: row;
        align-items: center;
      `}
    >
      <EuiIcon
        type="dot"
        color={color}
        css={css`
          opacity: ${severity ? 1 : 0};
        `}
      />
      {severity}
    </div>
  );
};
