/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import {
  getVulnerabilityTags,
  getVulnerabilityRuleName,
  generateVulnerabilitiesRuleQuery,
} from './create_detection_rule_from_vulnerability';
import { CspVulnerabilityFinding, Vulnerability } from '@kbn/cloud-security-posture-common';
import { isNativeCspFinding } from '../../../common/utils/is_native_csp_finding';

// Mocking the isNativeCspFinding function
jest.mock('../../../common/utils/is_native_csp_finding', () => ({
  isNativeCspFinding: jest.fn(),
}));

describe('CreateDetectionRuleFromVulnerability', () => {
  describe('getVulnerabilityTags', () => {
    it('should return tags with CSP_RULE_TAG and vulnerability id', () => {
      const mockVulnerability = {
        vulnerability: { id: 'CVE-2024-00001' },
        observer: undefined,
        data_stream: undefined,
      } as unknown as CspVulnerabilityFinding;

      (isNativeCspFinding as jest.Mock).mockReturnValue(false);

      const tags = getVulnerabilityTags(mockVulnerability);
      expect(tags).toEqual(['Cloud Security', 'CVE-2024-00001']);
    });

    it('should include vendor tag if available', () => {
      const mockVulnerability = {
        vulnerability: { id: 'CVE-2024-00002' },
        observer: { vendor: 'Wiz' },
        data_stream: undefined,
      } as unknown as CspVulnerabilityFinding;

      (isNativeCspFinding as jest.Mock).mockReturnValue(false);

      const tags = getVulnerabilityTags(mockVulnerability);
      expect(tags).toEqual(['Cloud Security', 'CVE-2024-00002', 'Wiz']);
    });

    it('should include CNVM tags for native findings', () => {
      const mockVulnerability = {
        vulnerability: { id: 'CVE-2024-00003' },
        observer: undefined,
        data_stream: undefined,
      } as unknown as CspVulnerabilityFinding;

      (isNativeCspFinding as jest.Mock).mockReturnValue(true);

      const tags = getVulnerabilityTags(mockVulnerability);
      expect(tags).toEqual([
        'Cloud Security',
        'CNVM',
        'Data Source: Cloud Native Vulnerability Management',
        'Use Case: Vulnerability',
        'OS: Linux',
        'CVE-2024-00003',
      ]);
    });
  });

  describe('getVulnerabilityRuleName', () => {
    it('should return correct rule name for a vulnerability', () => {
      const mockVulnerability = {
        id: 'CVE-2024-00004',
        description: '',
        reference: '',
      } as Vulnerability;

      const ruleName = getVulnerabilityRuleName(mockVulnerability);
      expect(ruleName).toEqual('Vulnerability: CVE-2024-00004');
    });
  });

  describe('generateVulnerabilitiesRuleQuery', () => {
    it('should generate correct query for a vulnerability', () => {
      const mockVulnerability = {
        id: 'CVE-2024-00005',
        description: '',
        reference: '',
      } as Vulnerability;
      const currentTimestamp = new Date().toISOString();

      const query = generateVulnerabilitiesRuleQuery(mockVulnerability);
      expect(query).toEqual(
        `vulnerability.id: "CVE-2024-00005" AND event.ingested >= "${currentTimestamp}"`
      );
    });
  });
});
