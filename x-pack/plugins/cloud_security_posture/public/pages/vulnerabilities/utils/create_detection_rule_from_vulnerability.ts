/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { HttpSetup } from '@kbn/core/public';
import { i18n } from '@kbn/i18n';
import { getVulnerabilityReferenceUrl } from '../../../common/utils/get_vulnerability_reference_url';
import type { CspVulnerabilityFinding } from '../../../../common/schemas';
import {
  LATEST_VULNERABILITIES_RETENTION_POLICY,
  VULNERABILITIES_INDEX_PATTERN,
  VULNERABILITIES_SEVERITY,
} from '../../../../common/constants';
import { createDetectionRule } from '../../../common/api/create_detection_rule';

const DEFAULT_RULE_RISK_SCORE = 0;
const DEFAULT_RULE_SEVERITY = 'low';
const DEFAULT_RULE_ENABLED = true;
const DEFAULT_RULE_AUTHOR = 'Elastic';
const DEFAULT_RULE_LICENSE = 'Elastic License v2';
const DEFAULT_MAX_ALERTS_PER_RULE = 100;
const ALERT_SUPPRESSION_FIELD = 'resource.id';
const ALERT_TIMESTAMP_FIELD = 'event.ingested';
const ALERT_SEVERITY_MAP_FIELD = 'vulnerability.severity';

enum RuleSeverityMapping {
  Low = 'low',
  Medium = 'medium',
  High = 'high',
  Critical = 'critical',
}

enum AlertSuppressionMissingFieldsStrategy {
  // per each document a separate alert will be created
  DoNotSuppress = 'doNotSuppress',
  // only one alert will be created per suppress by bucket
  Suppress = 'suppress',
}

const CSP_RULE_TAG = 'Cloud Security';
const CNVM_RULE_TAG = 'CNVM';
const CNVM_RULE_TAG_DATA_SOURCE = 'Data Source: Cloud Native Vulnerability Management';
const CNVM_RULE_TAG_USE_CASE = 'Use Case: Vulnerability';
const CNVM_RULE_TAG_OS = 'OS: Linux';

const STATIC_RULE_TAGS = [
  CSP_RULE_TAG,
  CNVM_RULE_TAG,
  CNVM_RULE_TAG_DATA_SOURCE,
  CNVM_RULE_TAG_USE_CASE,
  CNVM_RULE_TAG_OS,
];

const generateVulnerabilitiesTags = (finding: CspVulnerabilityFinding) => {
  return [...STATIC_RULE_TAGS, finding.vulnerability.id];
};

const getVulnerabilityRuleName = (finding: CspVulnerabilityFinding) => {
  return i18n.translate('xpack.csp.vulnerabilities.detectionRuleNamePrefix', {
    defaultMessage: 'Vulnerability: {vulnerabilityId}',
    values: {
      vulnerabilityId: finding.vulnerability.id,
    },
  });
};

const generateVulnerabilitiesRuleQuery = (finding: CspVulnerabilityFinding) => {
  const currentTimestamp = new Date().toISOString();

  return `vulnerability.id: "${finding.vulnerability.id}" AND event.ingested >= "${currentTimestamp}"`;
};

/*
 * Creates a detection rule from a CspVulnerabilityFinding
 */
export const createDetectionRuleFromVulnerabilityFinding = async (
  http: HttpSetup,
  finding: CspVulnerabilityFinding
) => {
  const referenceUrl = getVulnerabilityReferenceUrl(finding);

  return await createDetectionRule({
    http,
    rule: {
      type: 'query',
      language: 'kuery',
      license: DEFAULT_RULE_LICENSE,
      author: [DEFAULT_RULE_AUTHOR],
      filters: [],
      false_positives: [],
      risk_score: DEFAULT_RULE_RISK_SCORE,
      risk_score_mapping: [],
      severity: DEFAULT_RULE_SEVERITY,
      severity_mapping: [
        {
          field: ALERT_SEVERITY_MAP_FIELD,
          value: VULNERABILITIES_SEVERITY.LOW,
          operator: 'equals',
          severity: RuleSeverityMapping.Low,
        },
        {
          field: ALERT_SEVERITY_MAP_FIELD,
          value: VULNERABILITIES_SEVERITY.MEDIUM,
          operator: 'equals',
          severity: RuleSeverityMapping.Medium,
        },
        {
          field: ALERT_SEVERITY_MAP_FIELD,
          value: VULNERABILITIES_SEVERITY.HIGH,
          operator: 'equals',
          severity: RuleSeverityMapping.High,
        },
        {
          field: ALERT_SEVERITY_MAP_FIELD,
          value: VULNERABILITIES_SEVERITY.CRITICAL,
          operator: 'equals',
          severity: RuleSeverityMapping.Critical,
        },
        {
          field: ALERT_SEVERITY_MAP_FIELD,
          value: VULNERABILITIES_SEVERITY.UNKNOWN,
          operator: 'equals',
          severity: RuleSeverityMapping.Low,
        },
      ],
      threat: [],
      interval: '1h',
      from: `now-${LATEST_VULNERABILITIES_RETENTION_POLICY}`,
      to: 'now',
      max_signals: DEFAULT_MAX_ALERTS_PER_RULE,
      timestamp_override: ALERT_TIMESTAMP_FIELD,
      timestamp_override_fallback_disabled: false,
      actions: [],
      enabled: DEFAULT_RULE_ENABLED,
      alert_suppression: {
        group_by: [ALERT_SUPPRESSION_FIELD],
        missing_fields_strategy: AlertSuppressionMissingFieldsStrategy.Suppress,
      },
      index: [VULNERABILITIES_INDEX_PATTERN],
      query: generateVulnerabilitiesRuleQuery(finding),
      references: referenceUrl ? [referenceUrl] : [],
      name: getVulnerabilityRuleName(finding),
      description: finding.vulnerability.description,
      tags: generateVulnerabilitiesTags(finding),
    },
  });
};
