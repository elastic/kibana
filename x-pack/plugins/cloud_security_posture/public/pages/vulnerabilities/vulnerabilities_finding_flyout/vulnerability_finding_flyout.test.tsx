/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
import React from 'react';
import userEvent from '@testing-library/user-event';
import { render, screen } from '@testing-library/react';
import { TestProvider } from '../../../test/test_provider';
import { VulnerabilityFindingFlyout } from './vulnerability_finding_flyout';
import { mockVulnerabilityHit } from '../_mocks_/vulnerability.mock';
import { VulnerabilityOverviewTab } from './vulnerability_overview_tab';
import moment from 'moment';
import { FINDINGS_VULNERABILITY_FLYOUT_DESCRIPTION_LIST } from '../test_subjects';

const onPaginate = jest.fn();

const TestComponent = ({ ...overrideProps }) => (
  <TestProvider>
    <VulnerabilityFindingFlyout
      closeFlyout={jest.fn}
      flyoutIndex={0}
      totalVulnerabilitiesCount={2}
      onPaginate={onPaginate}
      vulnerabilityRecord={mockVulnerabilityHit}
      isLoading={false}
      {...overrideProps}
    />
  </TestProvider>
);

describe('<VulnerabilityFindingFlyout/>', () => {
  describe('Header Info', () => {
    it('displays text details flyout header  info', () => {
      const { getAllByText, getByText, getByTestId } = render(<TestComponent />);

      getAllByText(mockVulnerabilityHit.vulnerability.id);
      getByText(mockVulnerabilityHit.vulnerability.description);
      const descriptionList = getByTestId(FINDINGS_VULNERABILITY_FLYOUT_DESCRIPTION_LIST);
      expect(descriptionList.textContent).toEqual(
        `Resource ID:${mockVulnerabilityHit.resource?.id}Resource Name:${mockVulnerabilityHit.resource?.name}Package:${mockVulnerabilityHit.package.name}Version:${mockVulnerabilityHit.package.version}`
      );
      getByText(mockVulnerabilityHit.vulnerability.severity);
    });
  });

  describe('JSON Tab', () => {
    it('show display Vulnerability JSON Tab', () => {
      const { getAllByText } = render(<TestComponent />);

      userEvent.click(screen.getByTestId(`vulnerability-finding-flyout-tab-vuln-flyout-json-tab`));

      getAllByText('JSON');
    });
  });

  describe('Overview Summary Details Tab', () => {
    it('show display Vulnerability details in a Overview Tab', () => {
      const { getByText, getAllByText } = render(
        <TestProvider>
          <VulnerabilityOverviewTab vulnerabilityRecord={mockVulnerabilityHit} />
        </TestProvider>
      );
      getByText(mockVulnerabilityHit.vulnerability.data_source.ID);
      getByText(moment(mockVulnerabilityHit.vulnerability.published_date).format('LL').toString());
      getByText(mockVulnerabilityHit.vulnerability.description);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.nvd?.V3Vector as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.nvd?.V3Score?.toString() as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.redhat?.V3Vector as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.redhat?.V3Score?.toString() as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.ghsa?.V3Vector?.toString() as string);
      getAllByText(mockVulnerabilityHit.vulnerability?.cvss?.ghsa?.V3Score?.toString() as string);
      getByText(
        `${mockVulnerabilityHit.package.name} ${mockVulnerabilityHit.package.fixed_version}`
      );
    });

    it('show empty state for no fixes', () => {
      const { getByText } = render(
        <TestProvider>
          <VulnerabilityOverviewTab
            vulnerabilityRecord={{
              ...mockVulnerabilityHit,
              package: { ...mockVulnerabilityHit.package, fixed_version: undefined },
            }}
          />
        </TestProvider>
      );

      getByText(`No available fixes yet.`);
    });
  });

  it('should allow pagination with next', async () => {
    const { getByTestId } = render(<TestComponent />);

    userEvent.click(getByTestId('pagination-button-next'));

    expect(onPaginate).toHaveBeenCalledWith(1);
  });

  it('should allow pagination with previous', async () => {
    const { getByTestId } = render(<TestComponent flyoutIndex={1} />);

    userEvent.click(getByTestId('pagination-button-previous'));

    expect(onPaginate).toHaveBeenCalledWith(0);
  });
});
