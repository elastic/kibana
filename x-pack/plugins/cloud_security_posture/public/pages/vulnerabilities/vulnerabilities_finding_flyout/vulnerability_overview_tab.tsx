/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import {
  EuiFlexGroup,
  EuiFlexItem,
  EuiHorizontalRule,
  EuiIcon,
  EuiLink,
  EuiText,
} from '@elastic/eui';
import { css } from '@emotion/react';
import { FormattedMessage } from '@kbn/i18n-react';
import moment from 'moment';
import React from 'react';
import { euiThemeVars } from '@kbn/ui-theme';
import { i18n } from '@kbn/i18n';
import { VectorScoreBase, CspVulnerabilityFinding } from '../../../../common/schemas';
import { CspFlyoutMarkdown } from '../../configurations/findings_flyout/findings_flyout';
import { NvdLogo } from '../../../assets/icons/nvd_logo_svg';
import { CVSScoreBadge } from '../../../components/vulnerability_badges';
import { CVSScoreProps, Vendor } from '../types';
import { getVectorScoreList } from '../utils/get_vector_score_list';
import { OVERVIEW_TAB_VULNERABILITY_FLYOUT } from '../test_subjects';
import redhatLogo from '../../../assets/icons/redhat_logo.svg';
import { VulnerabilityDetectionRuleCounter } from './vulnerability_detection_rule_counter';

const cvssVendors: Record<string, Vendor> = {
  nvd: 'NVD',
  redhat: 'Red Hat',
  ghsa: 'GHSA',
};

const vendorIcons: Record<string, string> = {
  redhat: redhatLogo,
  ghsa: 'logoGithub',
};

interface VulnerabilityTabProps {
  vulnerabilityRecord: CspVulnerabilityFinding;
}

const CVSScore = ({ vectorBaseScore, vendor }: CVSScoreProps) => {
  const vendorName =
    cvssVendors[vendor] ??
    i18n.translate(
      'xpack.csp.vulnerabilities.vulnerabilityOverviewTab.cvsScore.unknownVendorName',
      {
        defaultMessage: 'Unknown vendor',
      }
    );

  const vectorScores = getVectorScoreList(vectorBaseScore);

  return (
    <EuiFlexGroup
      alignItems="center"
      css={css`
        border: 1px solid #d3dae6;
        border-radius: 6px;
        padding: ${euiThemeVars.euiSizeM};
      `}
    >
      <EuiFlexItem
        grow={false}
        css={css`
          width: 116px;
          font-weight: 600;
          display: flex;
          flex-direction: row;
          align-items: center;
        `}
      >
        <span
          css={css`
            margin-right: 30px;
          `}
        >
          {vendor === 'nvd' ? NvdLogo() : <EuiIcon type={vendorIcons[vendor]} size="xl" />}
        </span>

        <span>{vendorName}</span>
      </EuiFlexItem>

      <EuiFlexGroup direction="column" gutterSize="s">
        {vectorScores.length > 0 &&
          vectorScores.map((vectorScore, i) => (
            <VectorScore key={`${vectorScore}-${i}`} vectorScore={vectorScore} />
          ))}
      </EuiFlexGroup>
    </EuiFlexGroup>
  );
};

const VectorScore = ({
  vectorScore,
}: {
  vectorScore: {
    vector: string;
    score: number | undefined;
    version: string;
  };
}) => {
  const { score, vector, version } = vectorScore;
  return (
    <>
      <EuiFlexGroup
        alignItems="center"
        css={css`
          background: ${euiThemeVars.euiColorLightestShade};
          padding: ${euiThemeVars.euiSizeXS} ${euiThemeVars.euiSizeS};
          border-radius: 6px;
        `}
      >
        <EuiFlexItem>
          <EuiText
            css={css`
              font-size: ${euiThemeVars.euiFontSizeM};
              color: ${euiThemeVars.euiColorFullShade};
            `}
          >
            {vector}{' '}
          </EuiText>
        </EuiFlexItem>

        <EuiFlexItem grow={false}>
          {score && <CVSScoreBadge score={score} version={version} />}
        </EuiFlexItem>
      </EuiFlexGroup>
    </>
  );
};

const VulnerabilityOverviewTiles = ({ vulnerabilityRecord }: VulnerabilityTabProps) => {
  const { vulnerability } = vulnerabilityRecord;
  const tileStyle = css`
    padding: ${euiThemeVars.euiFontSizeM};
    background: ${euiThemeVars.euiColorLightestShade};
    border-radius: 6px;
    height: 74px;
  `;
  const tileTitleTextStyle = css`
    line-height: 20px;
    margin-bottom: 6px;
  `;

  const date = moment(vulnerability?.published_date).format('LL').toString();

  return (
    <EuiFlexGroup data-test-subj={OVERVIEW_TAB_VULNERABILITY_FLYOUT}>
      {vulnerability?.score?.version && vulnerability?.score?.base && (
        <EuiFlexItem css={tileStyle}>
          <EuiText css={tileTitleTextStyle}>
            <FormattedMessage
              id="xpack.csp.vulnerabilities.vulnerabilityOverviewTile.cvsScore"
              defaultMessage="CVSS"
            />
          </EuiText>

          <div>
            <CVSScoreBadge version={vulnerability.score.version} score={vulnerability.score.base} />
          </div>
        </EuiFlexItem>
      )}
      <EuiFlexItem css={tileStyle}>
        <EuiText css={tileTitleTextStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTile.dataSource"
            defaultMessage="Data Source"
          />
        </EuiText>
        <EuiLink href={vulnerability?.data_source?.URL} target="_blank">
          {vulnerability?.data_source?.ID}
        </EuiLink>
      </EuiFlexItem>
      <EuiFlexItem css={tileStyle}>
        <EuiText css={tileTitleTextStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTile.publishedDate"
            defaultMessage="Published Date"
          />
        </EuiText>

        <strong>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTile.publishedDateText"
            defaultMessage="{date}"
            values={{
              date,
            }}
          />
        </strong>
      </EuiFlexItem>
    </EuiFlexGroup>
  );
};

export const VulnerabilityOverviewTab = ({ vulnerabilityRecord }: VulnerabilityTabProps) => {
  const { vulnerability } = vulnerabilityRecord;
  const emptyFixesMessageState = i18n.translate(
    'xpack.csp.vulnerabilities.vulnerabilityOverviewTab.emptyFixesMessage',
    {
      defaultMessage: 'No available fixes yet.',
    }
  );

  const fixesDisplayText = vulnerabilityRecord?.package?.fixed_version
    ? `${vulnerabilityRecord?.package?.name} ${vulnerabilityRecord?.package?.fixed_version}`
    : emptyFixesMessageState;

  const cvssScores: JSX.Element[] = vulnerability?.cvss
    ? Object.entries<VectorScoreBase>(vulnerability.cvss).map(
        ([vendor, vectorScoreBase]: [string, VectorScoreBase]) => {
          return (
            <EuiFlexItem key={`${vendor}`}>
              <CVSScore vectorBaseScore={vectorScoreBase} vendor={vendor} />
            </EuiFlexItem>
          );
        }
      )
    : [];

  const horizontalStyle = css`
    margin-block: 12px;
  `;

  const flyoutSubheadingStyle = css`
    font-size: ${euiThemeVars.euiFontSizeM};
    line-height: 24px;
    margin-bottom: ${euiThemeVars.euiSizeS};
    font-weight: 600;
  `;

  return (
    <EuiFlexGroup direction="column">
      <EuiFlexItem>
        <VulnerabilityOverviewTiles vulnerabilityRecord={vulnerabilityRecord} />
      </EuiFlexItem>

      <EuiHorizontalRule css={horizontalStyle} />
      <EuiFlexItem>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.alertsTitle"
            defaultMessage="Alerts"
          />
        </h4>
        <VulnerabilityDetectionRuleCounter vulnerability={vulnerability} />
      </EuiFlexItem>
      <EuiFlexItem>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.descriptionTitle"
            defaultMessage="Description"
          />
        </h4>
        <CspFlyoutMarkdown>{vulnerability?.description || ''}</CspFlyoutMarkdown>
      </EuiFlexItem>

      <EuiHorizontalRule css={horizontalStyle} />

      <EuiFlexItem>
        <h4 css={flyoutSubheadingStyle}>
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.fixes"
            defaultMessage="Fixes"
          />
        </h4>
        <EuiText>{fixesDisplayText}</EuiText>
      </EuiFlexItem>

      <EuiHorizontalRule css={horizontalStyle} />

      {cvssScores?.length > 0 && (
        <EuiFlexItem>
          <h4 css={flyoutSubheadingStyle}>
            <FormattedMessage
              id="xpack.csp.vulnerabilities.vulnerabilityOverviewTab.vulnerabilityScores"
              defaultMessage="Vulnerability Scores"
            />
          </h4>
          <EuiFlexGroup
            direction="column"
            gutterSize="l"
            css={css`
              margin-top: ${euiThemeVars.euiSizeS};
            `}
          >
            {cvssScores}
          </EuiFlexGroup>
        </EuiFlexItem>
      )}
    </EuiFlexGroup>
  );
};
