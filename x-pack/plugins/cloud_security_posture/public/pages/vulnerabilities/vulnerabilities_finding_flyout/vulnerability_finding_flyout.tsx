/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useMemo, useState } from 'react';
import {
  EuiDescriptionListProps,
  EuiFlexGroup,
  EuiFlexItem,
  EuiFlyout,
  EuiFlyoutBody,
  EuiFlyoutFooter,
  EuiFlyoutHeader,
  EuiLink,
  EuiPagination,
  EuiSkeletonText,
  EuiTab,
  EuiTabs,
  EuiText,
  EuiTitle,
} from '@elastic/eui';
import { i18n } from '@kbn/i18n';
import { FormattedMessage } from '@kbn/i18n-react';
import { euiThemeVars } from '@kbn/ui-theme';
import { css } from '@emotion/react';
import { HttpSetup } from '@kbn/core-http-browser';
import { TakeAction } from '../../../components/take_action';
import { truthy } from '../../../../common/utils/helpers';
import { CspInlineDescriptionList } from '../../../components/csp_inline_description_list';
import { VulnerabilityOverviewTab } from './vulnerability_overview_tab';
import { VulnerabilityJsonTab } from './vulnerability_json_tab';
import { SeverityStatusBadge } from '../../../components/vulnerability_badges';
import type { CspVulnerabilityFinding } from '../../../../common/schemas';
import {
  FINDINGS_VULNERABILITY_FLYOUT_DESCRIPTION_LIST,
  TAB_ID_VULNERABILITY_FLYOUT,
} from '../test_subjects';
import { VulnerabilityTableTab } from './vulnerability_table_tab';
import { createDetectionRuleFromVulnerabilityFinding } from '../utils/create_detection_rule_from_vulnerability';

const overviewTabId = 'vuln-flyout-overview-tab';
const tableTabId = 'vuln-flyout-table-tab';
const jsonTabId = 'vuln-flyout-json-tab';

const getFlyoutDescriptionList = (
  vulnerabilityRecord: CspVulnerabilityFinding
): EuiDescriptionListProps['listItems'] =>
  [
    vulnerabilityRecord.resource?.id && {
      title: i18n.translate(
        'xpack.csp.vulnerabilities.vulnerabilitiesFindingFlyout.flyoutDescriptionList.resourceId',
        { defaultMessage: 'Resource ID' }
      ),
      description: vulnerabilityRecord.resource.id,
    },
    vulnerabilityRecord.resource?.name && {
      title: i18n.translate(
        'xpack.csp.vulnerabilities.vulnerabilitiesFindingFlyout.flyoutDescriptionList.resourceName',
        { defaultMessage: 'Resource Name' }
      ),
      description: vulnerabilityRecord.resource.name,
    },
    {
      title: i18n.translate(
        'xpack.csp.vulnerabilities.vulnerabilitiesFindingFlyout.flyoutDescriptionList.packageTitle',
        { defaultMessage: 'Package' }
      ),
      description: vulnerabilityRecord.package.name,
    },
    {
      title: i18n.translate(
        'xpack.csp.vulnerabilities.vulnerabilitiesFindingFlyout.flyoutDescriptionList.versionTitle',
        { defaultMessage: 'Version' }
      ),
      description: vulnerabilityRecord.package.version,
    },
  ].filter(truthy);

export const VulnerabilityFindingFlyout = ({
  closeFlyout,
  onPaginate,
  totalVulnerabilitiesCount,
  flyoutIndex,
  vulnerabilityRecord,
  isLoading,
}: {
  closeFlyout: () => void;
  onPaginate?: (pageIndex: number) => void;
  totalVulnerabilitiesCount: number;
  flyoutIndex?: number;
  vulnerabilityRecord: CspVulnerabilityFinding;
  isLoading: boolean;
}) => {
  const [selectedTabId, setSelectedTabId] = useState(overviewTabId);
  const vulnerability = vulnerabilityRecord?.vulnerability;

  const tabs = useMemo(
    () => [
      {
        id: overviewTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.overviewTabLabel"
            defaultMessage="Overview"
          />
        ),
        content: <VulnerabilityOverviewTab vulnerabilityRecord={vulnerabilityRecord} />,
      },
      {
        id: tableTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.tableTabLabel"
            defaultMessage="Table"
          />
        ),
        content: <VulnerabilityTableTab vulnerabilityRecord={vulnerabilityRecord} />,
      },
      {
        id: jsonTabId,
        name: (
          <FormattedMessage
            id="xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.jsonTabLabel"
            defaultMessage="JSON"
          />
        ),
        content: <VulnerabilityJsonTab vulnerabilityRecord={vulnerabilityRecord} />,
      },
    ],
    [vulnerabilityRecord]
  );

  const onSelectedTabChanged = (id: string) => setSelectedTabId(id);

  const renderTabs = () =>
    tabs.map((tab, index) => (
      <EuiTab
        data-test-subj={TAB_ID_VULNERABILITY_FLYOUT(tab.id)}
        onClick={() => onSelectedTabChanged(tab.id)}
        isSelected={tab.id === selectedTabId}
        key={index}
      >
        {tab.name}
      </EuiTab>
    ));

  const selectedTabContent = useMemo(
    () => tabs.find((obj) => obj.id === selectedTabId)?.content,
    [selectedTabId, tabs]
  );

  const LOADING_ARIA_LABEL = i18n.translate(
    'xpack.csp.vulnerabilities.vulnerabilityFindingFlyout.loadingAriaLabel',
    { defaultMessage: 'Loading' }
  );

  const vulnerabilityReference = vulnerability?.reference;

  const createVulnerabilityRuleFn = async (http: HttpSetup) =>
    await createDetectionRuleFromVulnerabilityFinding(http, vulnerabilityRecord.vulnerability);

  return (
    <EuiFlyout onClose={closeFlyout}>
      <EuiFlyoutHeader>
        <EuiSkeletonText
          lines={10}
          size="m"
          isLoading={isLoading}
          contentAriaLabel={LOADING_ARIA_LABEL}
        >
          <EuiFlexGroup
            direction="column"
            css={css`
              gap: ${euiThemeVars.euiSizeS};
            `}
          >
            <EuiFlexItem>
              <SeverityStatusBadge severity={vulnerability?.severity} />
            </EuiFlexItem>
            <EuiFlexItem>
              <EuiFlexGroup
                direction="column"
                css={css`
                  gap: ${euiThemeVars.euiSizeS};
                `}
              >
                <EuiFlexItem>
                  <EuiTitle
                    size="m"
                    css={css`
                      color: ${euiThemeVars.euiColorPrimaryText};
                      line-height: 32px;
                    `}
                  >
                    {vulnerabilityReference ? (
                      <EuiLink target="_blank" href={vulnerabilityReference}>
                        {vulnerability?.id}
                      </EuiLink>
                    ) : (
                      <EuiText>{vulnerability?.id}</EuiText>
                    )}
                  </EuiTitle>
                </EuiFlexItem>
                <EuiFlexItem>
                  <div
                    css={css`
                      line-height: 20px;
                      margin-bottom: ${euiThemeVars.euiSizeM};
                    `}
                  >
                    <CspInlineDescriptionList
                      testId={FINDINGS_VULNERABILITY_FLYOUT_DESCRIPTION_LIST}
                      listItems={getFlyoutDescriptionList(vulnerabilityRecord)}
                    />
                  </div>
                </EuiFlexItem>
              </EuiFlexGroup>
            </EuiFlexItem>
            <EuiFlexItem>
              <EuiTabs>{renderTabs()}</EuiTabs>
            </EuiFlexItem>
          </EuiFlexGroup>
        </EuiSkeletonText>
      </EuiFlyoutHeader>
      <EuiFlyoutBody>
        <EuiSkeletonText
          lines={10}
          size="m"
          isLoading={isLoading}
          contentAriaLabel={LOADING_ARIA_LABEL}
        >
          {selectedTabContent}
        </EuiSkeletonText>
      </EuiFlyoutBody>
      <EuiFlyoutFooter>
        <EuiFlexGroup
          gutterSize="none"
          alignItems="center"
          justifyContent={onPaginate ? 'spaceBetween' : 'flexEnd'}
        >
          {onPaginate && (
            <EuiFlexItem grow={false}>
              <EuiPagination
                pageCount={totalVulnerabilitiesCount}
                activePage={flyoutIndex}
                onPageClick={onPaginate}
                compressed
              />
            </EuiFlexItem>
          )}
          <EuiFlexItem grow={false}>
            <TakeAction createRuleFn={createVulnerabilityRuleFn} />
          </EuiFlexItem>
        </EuiFlexGroup>
      </EuiFlyoutFooter>
    </EuiFlyout>
  );
};
