/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React from 'react';
import type { HttpSetup } from '@kbn/core/public';
import type { CspVulnerabilityFinding } from '@kbn/cloud-security-posture-common/schema/vulnerabilities/latest';
import { isNativeCspFinding } from '../../../common/utils/is_native_csp_finding';
import { DetectionRuleCounter } from '../../../components/detection_rule_counter';
import { createDetectionRuleFromVulnerabilityFinding } from '../utils/create_detection_rule_from_vulnerability';

const CNVM_TAG = 'CNVM';
const CNVM_RULE_TAG_DATA_SOURCE = 'Data Source: Cloud Native Vulnerability Management';
const CNVM_RULE_TAG_USE_CASE = 'Use Case: Vulnerability';
const CNVM_RULE_TAG_OS = 'OS: Linux';

const getTags = (vulnerabilityRecord: CspVulnerabilityFinding) => {
  let tags = [vulnerabilityRecord.vulnerability.id];
  const vendor = vulnerabilityRecord.observer?.vendor || vulnerabilityRecord?.data_stream?.dataset;

  if (isNativeCspFinding(vulnerabilityRecord)) {
    tags = [CNVM_TAG, CNVM_RULE_TAG_DATA_SOURCE, CNVM_RULE_TAG_USE_CASE, CNVM_RULE_TAG_OS, ...tags];
  } else if (!!vendor) {
    tags.push(vendor);
  }

  return tags;
};

export const VulnerabilityDetectionRuleCounter = ({
  vulnerabilityRecord,
}: {
  vulnerabilityRecord: CspVulnerabilityFinding;
}) => {
  const tags = getTags(vulnerabilityRecord);
  const createVulnerabilityRuleFn = async (http: HttpSetup) =>
    await createDetectionRuleFromVulnerabilityFinding(
      http,
      vulnerabilityRecord.vulnerability,
      tags
    );

  return <DetectionRuleCounter tags={tags} createRuleFn={createVulnerabilityRuleFn} />;
};
