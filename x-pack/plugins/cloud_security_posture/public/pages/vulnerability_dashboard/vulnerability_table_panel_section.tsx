/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useCallback, useMemo } from 'react';
import {
  EuiBasicTableColumn,
  EuiFlexGroup,
  EuiFlexItem,
  EuiIcon,
  EuiLink,
  EuiSpacer,
  useEuiTheme,
} from '@elastic/eui';
import { i18n } from '@kbn/i18n';
import {
  PatchableVulnerabilityStat,
  VulnerabilityStat,
  VulnerableResourceStat,
  VulnSeverity,
} from '../../../common/types';
import { DASHBOARD_TABLE_TYPES } from './vulnerability_table_panel.config';
import { VulnerabilityTablePanel } from './vulnerability_table_panel';
import {
  NavFilter,
  useNavigateVulnerabilities,
  useNavigateVulnerabilitiesByResource,
} from '../../common/hooks/use_navigate_findings';
import { CVSScoreBadge, SeverityStatusBadge } from '../../components/vulnerability_badges';
import { useVulnerabilityDashboardApi } from '../../common/api/use_vulnerability_dashboard_api';

export const VulnerabilityTablePanelSection = () => {
  const getVulnerabilityDashboard = useVulnerabilityDashboardApi();
  const { euiTheme } = useEuiTheme();
  const navToVulnerabilities = useNavigateVulnerabilities();
  const navToVulnerabilitiesByResource = useNavigateVulnerabilitiesByResource();

  const onCellClick = useCallback(
    (filters: NavFilter) => {
      navToVulnerabilities(filters);
    },
    [navToVulnerabilities]
  );

  const onViewVulnerabilitiesByResourceClick = useCallback(() => {
    navToVulnerabilitiesByResource();
  }, [navToVulnerabilitiesByResource]);

  const onViewVulnerabilitiesClick = useCallback(() => {
    navToVulnerabilities();
  }, [navToVulnerabilities]);

  const topVulnerableResourceColumns: Array<EuiBasicTableColumn<VulnerableResourceStat>> = useMemo(
    () => [
      {
        field: 'resource.id',
        truncateText: true,
        name: i18n.translate(
          'xpack.csp.cnvmDashboardTable.section.topVulnerableResources.column.resourceId',
          {
            defaultMessage: 'Resource ID',
          }
        ),
        render: (resourceId: string) => (
          <EuiLink
            onClick={() => onCellClick({ 'resource.id': resourceId })}
            className="eui-textTruncate"
          >
            {resourceId}
          </EuiLink>
        ),
      },
      {
        field: 'resource.name',
        truncateText: true,
        name: i18n.translate(
          'xpack.csp.cnvmDashboardTable.section.topVulnerableResources.column.resourceName',
          {
            defaultMessage: 'Resource Name',
          }
        ),
        render: (resourceName: string) => (
          <EuiLink
            onClick={() => onCellClick({ 'resource.name': resourceName })}
            className="eui-textTruncate"
            color="text"
          >
            {resourceName}
          </EuiLink>
        ),
      },
      {
        field: 'cloudRegion',
        name: i18n.translate(
          'xpack.csp.cnvmDashboardTable.section.topVulnerableResources.column.region',
          {
            defaultMessage: 'Region',
          }
        ),
        render: (region: string) => (
          <EuiLink
            onClick={() => onCellClick({ 'cloud.region': region })}
            className="eui-textTruncate"
            color="text"
          >
            {region}
          </EuiLink>
        ),
        width: '140',
      },
      {
        field: 'vulnerabilityCount',
        name: (
          <span>
            <EuiIcon type={'sortDown'} style={{ marginRight: euiTheme.size.xs }} />
            {i18n.translate(
              'xpack.csp.cnvmDashboardTable.section.topVulnerableResources.column.vulnerabilities',
              {
                defaultMessage: 'Vulnerabilities',
              }
            )}
          </span>
        ),
        width: '120',
        align: 'right',
      },
    ],
    [onCellClick, euiTheme.size.xs]
  );

  const topPatchableVulnerabilitiesColumns: Array<EuiBasicTableColumn<PatchableVulnerabilityStat>> =
    useMemo(
      () => [
        {
          field: 'cve',
          name: i18n.translate(
            'xpack.csp.cnvmDashboardTable.section.topVulnerableResources.column.cve',
            {
              defaultMessage: 'CVE',
            }
          ),
          render: (cve: string) => (
            <EuiLink
              onClick={() => onCellClick({ 'vulnerability.id': cve, 'package.fixed_version': '*' })}
              className="eui-textTruncate"
            >
              {cve}
            </EuiLink>
          ),
        },
        {
          field: 'cvss',
          name: i18n.translate(
            'xpack.csp.cnvmDashboardTable.section.topVulnerableResources.column.version',
            {
              defaultMessage: 'CVSS',
            }
          ),
          render: (cvss: PatchableVulnerabilityStat['cvss']) => {
            if (!cvss.score || !cvss.version) {
              return null;
            }

            const esQuery = { 'vulnerability.score.base': cvss.score };

            return (
              <EuiLink onClick={() => onCellClick(esQuery)}>
                <CVSScoreBadge version={cvss.version} score={cvss.score} />
              </EuiLink>
            );
          },
        },
        {
          field: 'packageFixVersion',
          truncateText: true,
          name: i18n.translate(
            'xpack.csp.cnvmDashboardTable.section.topPatchableVulnerabilities.column.fixedVersion',
            {
              defaultMessage: 'Fix Version',
            }
          ),
          render: (packageFixVersion: string) => (
            <EuiLink
              onClick={() => onCellClick({ 'package.fixed_version': packageFixVersion })}
              className="eui-textTruncate"
              color="text"
            >
              {packageFixVersion}
            </EuiLink>
          ),
        },
        {
          field: 'vulnerabilityCount',
          name: (
            <span>
              <EuiIcon type={'sortDown'} style={{ marginRight: euiTheme.size.xs }} />
              {i18n.translate(
                'xpack.csp.cnvmDashboardTable.section.topVulnerableResources.column.vulnerabilityCount',
                {
                  defaultMessage: 'Vulnerabilities',
                }
              )}
            </span>
          ),
          align: 'right',
        },
      ],
      [onCellClick, euiTheme.size.xs]
    );

  const topVulnerabilitiesColumns: Array<EuiBasicTableColumn<VulnerabilityStat>> = useMemo(
    () => [
      {
        field: 'cve',
        name: i18n.translate('xpack.csp.cnvmDashboardTable.section.topVulnerability.column.cve', {
          defaultMessage: 'CVE',
        }),
        render: (cve: string) => (
          <EuiLink
            onClick={() => onCellClick({ 'vulnerability.id': cve })}
            className="eui-textTruncate"
          >
            {cve}
          </EuiLink>
        ),
      },
      {
        field: 'cvss',
        name: i18n.translate(
          'xpack.csp.cnvmDashboardTable.section.topVulnerability.column.version',
          {
            defaultMessage: 'CVSS',
          }
        ),
        render: (cvss: VulnerabilityStat['cvss']) => {
          if (!cvss.score || !cvss.version) {
            return null;
          }

          const esQuery = { 'vulnerability.score.base': cvss.score };

          return (
            <EuiLink onClick={() => onCellClick(esQuery)}>
              <CVSScoreBadge version={cvss.version} score={cvss.score} />
            </EuiLink>
          );
        },
      },
      {
        field: 'severity',
        name: i18n.translate(
          'xpack.csp.cnvmDashboardTable.section.topVulnerability.column.severity',
          {
            defaultMessage: 'Severity',
          }
        ),
        render: (severity: VulnSeverity) => (
          <EuiLink onClick={() => onCellClick({ 'vulnerability.severity': severity })} color="text">
            <SeverityStatusBadge severity={severity} />
          </EuiLink>
        ),
      },
      {
        field: 'packageName',
        truncateText: true,
        name: i18n.translate(
          'xpack.csp.cnvmDashboardTable.section.topVulnerability.column.packageName',
          {
            defaultMessage: 'Package Name',
          }
        ),
        render: (packageName: string) => (
          <EuiLink
            onClick={() => onCellClick({ 'package.name': packageName })}
            className="eui-textTruncate"
            color="text"
          >
            {packageName}
          </EuiLink>
        ),
      },
      {
        field: 'packageVersion',
        truncateText: true,
        name: i18n.translate(
          'xpack.csp.cnvmDashboardTable.section.topVulnerability.column.packageVersion',
          {
            defaultMessage: 'Package Version',
          }
        ),
        render: (packageVersion: string) => (
          <EuiLink
            onClick={() => onCellClick({ 'package.version': packageVersion })}
            className="eui-textTruncate"
            color="text"
          >
            {packageVersion}
          </EuiLink>
        ),
      },
      {
        field: 'packageFixVersion',
        truncateText: true,
        name: i18n.translate(
          'xpack.csp.cnvmDashboardTable.section.topVulnerability.column.fixedVersion',
          {
            defaultMessage: 'Fix Version',
          }
        ),
        render: (packageFixVersion: string) => (
          <EuiLink
            onClick={() => onCellClick({ 'package.fixed_version': packageFixVersion })}
            className="eui-textTruncate"
            color="text"
          >
            {packageFixVersion}
          </EuiLink>
        ),
      },
      {
        field: 'vulnerabilityCount',
        name: (
          <span>
            <EuiIcon type={'sortDown'} style={{ marginRight: euiTheme.size.xs }} />
            {i18n.translate(
              'xpack.csp.cnvmDashboardTable.section.topVulnerability.column.vulnerabilities',
              {
                defaultMessage: 'Vulnerabilities',
              }
            )}
          </span>
        ),
        align: 'right',
      },
    ],
    [onCellClick, euiTheme.size.xs]
  );

  return (
    <>
      <EuiFlexGroup direction="row">
        {!!getVulnerabilityDashboard.data?.topVulnerableResources?.length && (
          <EuiFlexItem>
            <VulnerabilityTablePanel<VulnerableResourceStat>
              items={getVulnerabilityDashboard.data?.topVulnerableResources}
              columns={topVulnerableResourceColumns}
              tableType={DASHBOARD_TABLE_TYPES.TOP_VULNERABLE_RESOURCES}
              onViewVulnerabilitiesClick={onViewVulnerabilitiesByResourceClick}
            />
          </EuiFlexItem>
        )}
        <EuiFlexItem>
          {!!getVulnerabilityDashboard.data?.topPatchableVulnerabilities?.length && (
            <VulnerabilityTablePanel<PatchableVulnerabilityStat>
              items={getVulnerabilityDashboard.data?.topPatchableVulnerabilities}
              columns={topPatchableVulnerabilitiesColumns}
              tableType={DASHBOARD_TABLE_TYPES.TOP_PATCH_VULNERABILITIES}
              onViewVulnerabilitiesClick={onViewVulnerabilitiesClick}
            />
          )}
        </EuiFlexItem>
      </EuiFlexGroup>
      <EuiSpacer />
      {!!getVulnerabilityDashboard.data?.topVulnerabilities?.length && (
        <VulnerabilityTablePanel<VulnerabilityStat>
          items={getVulnerabilityDashboard.data?.topVulnerabilities}
          columns={topVulnerabilitiesColumns}
          tableType={DASHBOARD_TABLE_TYPES.TOP_VULNERABILITIES}
          onViewVulnerabilitiesClick={onViewVulnerabilitiesClick}
        />
      )}
    </>
  );
};
