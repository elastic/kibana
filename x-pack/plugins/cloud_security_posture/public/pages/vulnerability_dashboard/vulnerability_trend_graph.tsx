/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useMemo, useState } from 'react';
import {
  Chart,
  Settings,
  Axis,
  BarSeries,
  timeFormatter,
  niceTimeFormatByDay,
  PartialTheme,
} from '@elastic/charts';
import { EuiButton, EuiComboBox } from '@elastic/eui';
import { i18n } from '@kbn/i18n';
import { FormattedMessage } from '@kbn/i18n-react';
import { truthy } from '../../../common/utils/helpers';
import { useNavigateVulnerabilities } from '../../common/hooks/use_navigate_findings';
import { VulnStatsTrend, VulnSeverity } from '../../../common/types';
import { useVulnerabilityDashboardApi } from '../../common/api/use_vulnerability_dashboard_api';
import { getSeverityStatusColor } from '../../common/utils/get_vulnerability_colors';
import { ChartPanel } from '../../components/chart_panel';
import { VULNERABILITIES_SEVERITY } from '../../../common/constants';

const stackAccessors: VulnSeverity[] = [
  VULNERABILITIES_SEVERITY.CRITICAL,
  VULNERABILITIES_SEVERITY.HIGH,
  VULNERABILITIES_SEVERITY.MEDIUM,
  VULNERABILITIES_SEVERITY.LOW,
];

const DEFAULT_ACCOUNT = 'all';

const chartStyle = { width: '100%', height: 300 };

const theme: PartialTheme = {
  scales: {
    barsPadding: 0.05, // Maintains low margins between bars when chart is full
  },
  legend: {
    spacingBuffer: 45,
  },
};

const ViewAllButton = () => {
  const navToVulnerabilities = useNavigateVulnerabilities();

  return (
    <EuiButton onClick={() => navToVulnerabilities()} size="s">
      <FormattedMessage
        id="xpack.csp.vulnerabilityDashboard.viewAllButton.buttonTitle"
        defaultMessage="View All"
      />
    </EuiButton>
  );
};

const AccountDropDown = ({
  selectedAccount,
  setSelectedAccount,
  options = [],
}: {
  selectedAccount: string;
  setSelectedAccount: (value: string) => void;
  options: Array<{ value: string; label: string }>;
}) => (
  <EuiComboBox
    style={{ width: 320 }}
    compressed
    prepend={i18n.translate(
      'xpack.csp.vulnerabilityDashboard.trendGraphChart.accountsDropDown.prepend.accountsTitle',
      { defaultMessage: 'Accounts' }
    )}
    options={options}
    singleSelection={{ asPlainText: true }}
    isClearable={false}
    selectedOptions={options.filter((o) => o.value === selectedAccount)}
    onChange={(selectedOption) => {
      setSelectedAccount(selectedOption[0].value || DEFAULT_ACCOUNT);
    }}
  />
);

const getUniqueCloudAccountsOptions = (
  vulnTrends: VulnStatsTrend[]
): Array<{ value: string; label: string }> => {
  const uniqueCloudAccounts: Array<{ label: string; value: string }> = [];

  vulnTrends.forEach((trendTimepoint) => {
    const accountsStats = Object.values(
      trendTimepoint.vulnerabilities_stats_by_cloud_account || {}
    );

    accountsStats.forEach((accountStats) => {
      // Check if the entry already exists based on the cloudAccountId
      const isDuplicate = uniqueCloudAccounts.find(
        (account) => account.value === accountStats.cloudAccountId
      );

      // If no duplicate is found, add the account to the uniqueCloudAccounts array
      if (!isDuplicate) {
        uniqueCloudAccounts.push({
          label: accountStats.cloudAccountName,
          value: accountStats.cloudAccountId,
        });
      }
    });
  });

  uniqueCloudAccounts.unshift({
    label: i18n.translate(
      'xpack.csp.vulnerabilityDashboard.trendGraphChart.accountsDropDown.option.allTitle',
      { defaultMessage: 'All' }
    ),
    value: DEFAULT_ACCOUNT,
  });

  return uniqueCloudAccounts;
};

const getTrendData = (vulnTrends: VulnStatsTrend[], selectedAccount: string) => {
  if (selectedAccount === DEFAULT_ACCOUNT) {
    const cleanAllTrend = vulnTrends.map((trendTimepoint) => {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      const { vulnerabilities_stats_by_cloud_account, policy_template, ...allAccountsTrendData } =
        trendTimepoint;
      return allAccountsTrendData;
    });
    return cleanAllTrend;
  }

  const accountTrend = vulnTrends
    .map((trendTimepoint) => {
      const selectedAccountStats =
        trendTimepoint.vulnerabilities_stats_by_cloud_account?.[selectedAccount];

      if (selectedAccountStats)
        return {
          '@timestamp': trendTimepoint['@timestamp'],
          ...selectedAccountStats,
        };
    })
    .filter(truthy);

  return accountTrend;
};

export const VulnerabilityTrendGraph = () => {
  const getVulnerabilityDashboard = useVulnerabilityDashboardApi();
  const vulnTrends = getVulnerabilityDashboard.data?.vulnTrends || [];
  const [selectedAccount, setSelectedAccount] = useState(DEFAULT_ACCOUNT);

  const trendData = getTrendData(vulnTrends, selectedAccount);

  const bars: Array<{
    yAccessors: string[];
    color: string;
    id: VulnSeverity;
  }> = useMemo(
    () => [
      {
        id: VULNERABILITIES_SEVERITY.LOW,
        yAccessors: ['low'],
        color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.LOW),
      },
      {
        id: VULNERABILITIES_SEVERITY.MEDIUM,
        yAccessors: ['medium'],
        color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.MEDIUM),
      },
      {
        id: VULNERABILITIES_SEVERITY.HIGH,
        yAccessors: ['high'],
        color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.HIGH),
      },
      {
        id: VULNERABILITIES_SEVERITY.CRITICAL,
        yAccessors: ['critical'],
        color: getSeverityStatusColor(VULNERABILITIES_SEVERITY.CRITICAL),
      },
    ],
    []
  );

  return (
    <ChartPanel
      title={i18n.translate(
        'xpack.csp.vulnerabilityDashboard.trendGraphChart.trendBySeverityTitle',
        {
          defaultMessage: 'Trend by severity',
        }
      )}
      rightSideItems={[
        <AccountDropDown
          key="vulnerability-trend-graph-account-drop-down"
          options={getUniqueCloudAccountsOptions(vulnTrends)}
          selectedAccount={selectedAccount}
          setSelectedAccount={setSelectedAccount}
        />,
        <ViewAllButton key="vulnerability-trend-graph-view-all-button" />,
      ]}
    >
      <div style={chartStyle}>
        <Chart>
          <Settings legendPosition="right" showLegend theme={theme} locale={i18n.getLocale()} />
          <Axis
            id="bottom"
            position={'bottom'}
            tickFormat={timeFormatter(niceTimeFormatByDay(2))}
          />
          <Axis id="left" position={'left'} tickFormat={(number) => number.toLocaleString()} />
          {bars.map((bar) => (
            <BarSeries
              key={bar.id}
              id={bar.id}
              xAccessor={'@timestamp'}
              yAccessors={bar.yAccessors}
              stackAccessors={stackAccessors}
              data={trendData}
              color={bar.color}
              minBarHeight={5}
              barSeriesStyle={{
                rect: {
                  // Limiting bars max width before 25 days of data
                  widthPixel: trendData.length < 25 ? 50 : undefined,
                },
              }}
            />
          ))}
        </Chart>
      </div>
    </ChartPanel>
  );
};
