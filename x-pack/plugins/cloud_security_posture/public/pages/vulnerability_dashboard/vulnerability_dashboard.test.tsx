/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
import React from 'react';
import Chance from 'chance';
import { dataPluginMock } from '@kbn/data-plugin/public/mocks';
import { unifiedSearchPluginMock } from '@kbn/unified-search-plugin/public/mocks';
import {
  LATEST_VULNERABILITIES_INDEX_DEFAULT_NS,
  VULN_MGMT_POLICY_TEMPLATE,
} from '../../../common/constants';
import { chartPluginMock } from '@kbn/charts-plugin/public/mocks';
import { discoverPluginMock } from '@kbn/discover-plugin/public/mocks';
import { useCspSetupStatusApi } from '../../common/api/use_setup_status_api';
import { useSubscriptionStatus } from '../../common/hooks/use_subscription_status';
import { createReactQueryResponse } from '../../test/fixtures/react_query';
import { useCISIntegrationPoliciesLink } from '../../common/navigation/use_navigate_to_cis_integration_policies';
import { useCspIntegrationLink } from '../../common/navigation/use_csp_integration_link';
import { NO_VULNERABILITIES_STATUS_TEST_SUBJ } from '../../components/test_subjects';
import { render } from '@testing-library/react';
import { expectIdsInDoc } from '../../test/utils';
import { fleetMock } from '@kbn/fleet-plugin/public/mocks';
import { licensingMock } from '@kbn/licensing-plugin/public/mocks';
import { TestProvider } from '../../test/test_provider';
import { sharePluginMock } from '@kbn/share-plugin/public/mocks';
import { useLicenseManagementLocatorApi } from '../../common/api/use_license_management_locator_api';
import { VulnerabilityDashboard } from './vulnerability_dashboard';
import { VULNERABILITY_DASHBOARD_CONTAINER } from '../compliance_dashboard/test_subjects';
import { useVulnerabilityDashboardApi } from '../../common/api/use_vulnerability_dashboard_api';
import { mockCnvmDashboardData } from './_mocks_/vulnerability_dashboard.mock';

jest.mock('../../common/api/use_latest_findings_data_view');
jest.mock('../../common/api/use_setup_status_api');
jest.mock('../../common/api/use_license_management_locator_api');
jest.mock('../../common/hooks/use_subscription_status');
jest.mock('../../common/navigation/use_navigate_to_cis_integration_policies');
jest.mock('../../common/navigation/use_csp_integration_link');
jest.mock('../../common/api/use_vulnerability_dashboard_api');

const chance = new Chance();

beforeEach(() => {
  jest.restoreAllMocks();

  (useSubscriptionStatus as jest.Mock).mockImplementation(() =>
    createReactQueryResponse({
      status: 'success',
      data: true,
    })
  );

  (useLicenseManagementLocatorApi as jest.Mock).mockImplementation(() =>
    createReactQueryResponse({
      status: 'success',
      data: true,
    })
  );
});

const NO_VULNERABILITIES_STATUS_TEST_SUBJECTS = Object.values(NO_VULNERABILITIES_STATUS_TEST_SUBJ);

const renderVulnerabilityDashboardPage = () => {
  render(
    <TestProvider
      deps={{
        data: dataPluginMock.createStartContract(),
        unifiedSearch: unifiedSearchPluginMock.createStartContract(),
        charts: chartPluginMock.createStartContract(),
        discover: discoverPluginMock.createStartContract(),
        fleet: fleetMock.createStartMock(),
        licensing: licensingMock.createStart(),
        share: sharePluginMock.createStartContract(),
      }}
    >
      <VulnerabilityDashboard />
    </TestProvider>
  );
};

describe('<VulnerabilityDashboard />', () => {
  it('renders vuln_mgmt integrations installation prompt if vuln_mgmt integration is not installed', () => {
    (useCspSetupStatusApi as jest.Mock).mockImplementation(() =>
      createReactQueryResponse({
        status: 'success',
        data: {
          [VULN_MGMT_POLICY_TEMPLATE]: { status: 'not-installed' },
          indicesDetails: [{ index: LATEST_VULNERABILITIES_INDEX_DEFAULT_NS, status: 'empty' }],
        },
      })
    );

    (useCspIntegrationLink as jest.Mock).mockImplementation(() => chance.url());

    renderVulnerabilityDashboardPage();

    expectIdsInDoc({
      be: [NO_VULNERABILITIES_STATUS_TEST_SUBJ.NOT_INSTALLED],
      notToBe: NO_VULNERABILITIES_STATUS_TEST_SUBJECTS,
    });
  });

  it('No vulnerabilities  state: not-deployed - shows NotDeployed instead of vulnerabilities ', () => {
    (useCspSetupStatusApi as jest.Mock).mockImplementation(() =>
      createReactQueryResponse({
        status: 'success',
        data: {
          [VULN_MGMT_POLICY_TEMPLATE]: { status: 'not-deployed' },
          indicesDetails: [{ index: LATEST_VULNERABILITIES_INDEX_DEFAULT_NS, status: 'empty' }],
        },
      })
    );
    (useCISIntegrationPoliciesLink as jest.Mock).mockImplementation(() => chance.url());
    (useCspIntegrationLink as jest.Mock).mockImplementation(() => chance.url());

    renderVulnerabilityDashboardPage();

    expectIdsInDoc({
      be: [NO_VULNERABILITIES_STATUS_TEST_SUBJ.NOT_DEPLOYED],
      notToBe: NO_VULNERABILITIES_STATUS_TEST_SUBJECTS,
    });
  });

  it('No vulnerabilities  state: indexing - shows Indexing instead of vulnerabilities ', () => {
    (useCspSetupStatusApi as jest.Mock).mockImplementation(() =>
      createReactQueryResponse({
        status: 'success',
        data: {
          [VULN_MGMT_POLICY_TEMPLATE]: { status: 'indexing' },
          indicesDetails: [{ index: LATEST_VULNERABILITIES_INDEX_DEFAULT_NS, status: 'empty' }],
        },
      })
    );
    (useCspIntegrationLink as jest.Mock).mockImplementation(() => chance.url());

    renderVulnerabilityDashboardPage();

    expectIdsInDoc({
      be: [NO_VULNERABILITIES_STATUS_TEST_SUBJ.SCANNING_VULNERABILITIES],
      notToBe: NO_VULNERABILITIES_STATUS_TEST_SUBJECTS,
    });
  });

  it('No vulnerabilities  state: index-timeout - shows IndexTimeout instead of vulnerabilities ', () => {
    (useCspSetupStatusApi as jest.Mock).mockImplementation(() =>
      createReactQueryResponse({
        status: 'success',
        data: {
          [VULN_MGMT_POLICY_TEMPLATE]: { status: 'index-timeout' },
          indicesDetails: [{ index: LATEST_VULNERABILITIES_INDEX_DEFAULT_NS, status: 'empty' }],
        },
      })
    );
    (useCspIntegrationLink as jest.Mock).mockImplementation(() => chance.url());
    renderVulnerabilityDashboardPage();

    expectIdsInDoc({
      be: [NO_VULNERABILITIES_STATUS_TEST_SUBJ.INDEX_TIMEOUT],
      notToBe: NO_VULNERABILITIES_STATUS_TEST_SUBJECTS,
    });
  });

  it('No vulnerabilities  state: unprivileged - shows Unprivileged instead of vulnerabilities ', () => {
    (useCspSetupStatusApi as jest.Mock).mockImplementation(() =>
      createReactQueryResponse({
        status: 'success',
        data: {
          [VULN_MGMT_POLICY_TEMPLATE]: { status: 'unprivileged' },
          indicesDetails: [{ index: LATEST_VULNERABILITIES_INDEX_DEFAULT_NS, status: 'empty' }],
        },
      })
    );
    (useCspIntegrationLink as jest.Mock).mockImplementation(() => chance.url());

    renderVulnerabilityDashboardPage();

    expectIdsInDoc({
      be: [NO_VULNERABILITIES_STATUS_TEST_SUBJ.UNPRIVILEGED],
      notToBe: NO_VULNERABILITIES_STATUS_TEST_SUBJECTS,
    });
  });

  it('Vulnerabilities  state: indexed - renders dashboard container on indexed state ', () => {
    (useCspSetupStatusApi as jest.Mock).mockImplementation(() =>
      createReactQueryResponse({
        status: 'success',
        data: {
          [VULN_MGMT_POLICY_TEMPLATE]: { status: 'indexed' },
          indicesDetails: [{ index: LATEST_VULNERABILITIES_INDEX_DEFAULT_NS, status: 'not-empty' }],
        },
      })
    );
    (useCspIntegrationLink as jest.Mock).mockImplementation(() => chance.url());
    (useVulnerabilityDashboardApi as jest.Mock).mockImplementation(() =>
      createReactQueryResponse({
        status: 'success',
        data: mockCnvmDashboardData,
      })
    );

    renderVulnerabilityDashboardPage();

    expectIdsInDoc({
      be: [VULNERABILITY_DASHBOARD_CONTAINER],
      notToBe: NO_VULNERABILITIES_STATUS_TEST_SUBJECTS,
    });
  });
});
