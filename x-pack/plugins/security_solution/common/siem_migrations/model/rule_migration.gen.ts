/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Splunk Rules Attributes
 *   version: not applicable
 */

import { z } from '@kbn/zod';

/**
 * The original rule to migrate.
 */
export type OriginalRule = z.infer<typeof OriginalRule>;
export const OriginalRule = z.object({
  /**
   * The original rule id.
   */
  id: z.string(),
  /**
   * The original rule vendor identifier.
   */
  vendor: z.literal('splunk'),
  /**
   * The original rule name.
   */
  title: z.string(),
  /**
   * The original rule description.
   */
  description: z.string(),
  /**
   * The original rule query.
   */
  query: z.string(),
  /**
   * The original rule query language.
   */
  queryLanguage: z.string(),
  /**
   * The original rule Mitre Attack technique IDs.
   */
  mitreAttackIds: z.array(z.string()).optional(),
});

/**
 * The migrated elastic rule.
 */
export type ElasticRule = z.infer<typeof ElasticRule>;
export const ElasticRule = z.object({
  /**
   * The migrated rule title.
   */
  title: z.string(),
  /**
   * The migrated rule description.
   */
  description: z.string().optional(),
  /**
   * The migrated rule severity.
   */
  severity: z.string().optional(),
  /**
   * The translated elastic query.
   */
  query: z.string(),
  /**
   * The translated elastic query language.
   */
  queryLanguage: z.literal('esql').default('esql'),
  /**
   * The Elastic prebuilt rule id matched.
   */
  prebuiltRuleId: z.string().optional(),
  /**
   * The Elastic rule id installed as a result.
   */
  id: z.string().optional(),
});

/**
 * The rule migration document object.
 */
export type RuleMigration = z.infer<typeof RuleMigration>;
export const RuleMigration = z.object({
  /**
   * The moment of creation
   */
  '@timestamp': z.string().optional(),
  /**
   * The migration id.
   */
  migrationId: z.string(),
  originalRule: OriginalRule,
  elasticRule: ElasticRule.optional(),
  /**
   * The translation state.
   */
  translationState: z.enum(['complete', 'partial', 'untranslatable']).optional(),
  /**
   * The status of the rule migration.
   */
  status: z.enum(['pending', 'processing', 'finished', 'error']).default('pending'),
  /**
   * The comments for the migration including a summary from the LLM in markdown.
   */
  comments: z.array(z.string()).optional(),
  /**
   * The moment of the last update
   */
  updatedAt: z.string().optional(),
  /**
   * The user who last updated the migration
   */
  updatedBy: z.string().optional(),
});
