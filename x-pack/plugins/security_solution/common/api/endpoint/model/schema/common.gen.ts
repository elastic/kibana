/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { z } from 'zod';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 */

export type Id = string;

export const Id = z.string();

export type IdOrUndefined = Id | null;

export const IdOrUndefined = Id.nullable();

/**
 * Page number
 * @default 1
 */
export type Page = number;

export const Page = z.number().int().min(1).default(1);

/**
 * Number of items per page
 * @default 10
 */
export type PageSize = number;

export const PageSize = z.number().int().min(1).max(100).default(10);

/**
 * Start date
 */
export type StartDate = string;

export const StartDate = z.string();

/**
 * End date
 */
export type EndDate = string;

export const EndDate = z.string();

/**
 * Agent ID
 */
export type AgentId = string;

export const AgentId = z.string();

export type AgentIds = string[] | string;

export const AgentIds = z.union([z.array(z.string().min(1)).min(1).max(50), z.string().min(1)]);

/**
 * The command to be executed (cannot be an empty string)
 */
export type Command =
  | 'isolate'
  | 'unisolate'
  | 'kill-process'
  | 'suspend-process'
  | 'running-processes'
  | 'get-file'
  | 'execute'
  | 'upload';

export const Command = z.enum([
  'isolate',
  'unisolate',
  'kill-process',
  'suspend-process',
  'running-processes',
  'get-file',
  'execute',
  'upload',
]);
export const CommandEnum = Command.enum;
export type CommandEnum = typeof Command.enum;

export type Commands = Command[];

export const Commands = z.array(Command);

/**
 * The maximum timeout value in milliseconds (optional)
 */
export type Timeout = number;

export const Timeout = z.number().int().min(1);

export type Status = 'failed' | 'pending' | 'successful';

export const Status = z.enum(['failed', 'pending', 'successful']);
export const StatusEnum = Status.enum;
export type StatusEnum = typeof Status.enum;

export type Statuses = Status[];

export const Statuses = z.array(Status);

/**
 * User IDs
 */
export type UserIds = string[] | string;

export const UserIds = z.union([z.array(z.string().min(1)).min(1), z.string().min(1)]);

/**
 * With Outputs
 */
export type WithOutputs = string[] | string;

export const WithOutputs = z.union([z.array(z.string().min(1)).min(1), z.string().min(1)]);

export type Type = 'automated' | 'manual';

export const Type = z.enum(['automated', 'manual']);
export const TypeEnum = Type.enum;
export type TypeEnum = typeof Type.enum;

export type Types = Type[];

export const Types = z.array(Type);

/**
 * List of endpoint IDs (cannot contain empty strings)
 */
export type EndpointIds = string[];

export const EndpointIds = z.array(z.string().min(1)).min(1);

/**
 * If defined, any case associated with the given IDs will be updated (cannot contain empty strings)
 */
export type AlertIds = string[];

export const AlertIds = z.array(z.string().min(1)).min(1);

/**
 * Case IDs to be updated (cannot contain empty strings)
 */
export type CaseIds = string[];

export const CaseIds = z.array(z.string().min(1)).min(1);

/**
 * Optional comment
 */
export type Comment = string;

export const Comment = z.string();

/**
 * Optional parameters object
 */
export type Parameters = {} & { [key: string]: unknown };

export const Parameters = z.object({}).catchall(z.unknown());

export interface BaseActionSchema {
  endpoint_ids?: EndpointIds;
  alert_ids?: AlertIds;
  case_ids?: CaseIds;
  comment?: Comment;
  parameters?: Parameters;
}

export const BaseActionSchema = z.object({
  endpoint_ids: EndpointIds.optional(),
  alert_ids: AlertIds.optional(),
  case_ids: CaseIds.optional(),
  comment: Comment.optional(),
  parameters: Parameters.optional(),
});

export type ProcessActionSchemas = BaseActionSchema & {
  parameters:
    | {
        pid?: number;
      }
    | {
        entity_id?: string;
      };
};

export const ProcessActionSchemas = BaseActionSchema.and(
  z.object({
    parameters: z.union([
      z.object({
        pid: z.number().int().min(1).optional(),
      }),
      z.object({
        entity_id: z.string().min(1).optional(),
      }),
    ]),
  })
);

export type SuccessResponse = {} & { [key: string]: unknown };

export const SuccessResponse = z.object({}).catchall(z.unknown());
