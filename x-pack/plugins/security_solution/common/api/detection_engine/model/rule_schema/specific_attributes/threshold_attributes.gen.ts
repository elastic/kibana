/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { z } from 'zod';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 */

export type ThresholdCardinality = Array<{
  field: string;
  value: number;
}>;

export const ThresholdCardinality = z.array(
  z.object({
    field: z.string(),
    value: z.number().int().min(0),
  })
);

/**
 * Threshold value
 */
export type ThresholdValue = number;

export const ThresholdValue = z.number().int().min(1);

/**
 * Field to aggregate on
 */
export type ThresholdField = string | string[];

export const ThresholdField = z.union([z.string(), z.array(z.string())]);

/**
 * Field to aggregate on
 */
export type ThresholdFieldNormalized = string[];

export const ThresholdFieldNormalized = z.array(z.string());

export interface Threshold {
  field: ThresholdField;
  value: ThresholdValue;
  cardinality?: ThresholdCardinality;
}

export const Threshold = z.object({
  field: ThresholdField,
  value: ThresholdValue,
  cardinality: ThresholdCardinality.optional(),
});

export interface ThresholdNormalized {
  field: ThresholdFieldNormalized;
  value: ThresholdValue;
  cardinality?: ThresholdCardinality;
}

export const ThresholdNormalized = z.object({
  field: ThresholdFieldNormalized,
  value: ThresholdValue,
  cardinality: ThresholdCardinality.optional(),
});

export interface ThresholdWithCardinality {
  field: ThresholdFieldNormalized;
  value: ThresholdValue;
  cardinality: ThresholdCardinality;
}

export const ThresholdWithCardinality = z.object({
  field: ThresholdFieldNormalized,
  value: ThresholdValue,
  cardinality: ThresholdCardinality,
});
