/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { z } from 'zod';
import type { RequiredOptional } from '@kbn/zod-helpers';
import { requireOptional } from '@kbn/zod-helpers';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 */

export type ResponseActionTypes = '.osquery' | '.endpoint';

export const ResponseActionTypes = z.enum(['.osquery', '.endpoint']);
export const ResponseActionTypesEnum = ResponseActionTypes.enum;
export type ResponseActionTypesEnum = typeof ResponseActionTypes.enum;

export type EcsMapping = {} & {
  [key: string]: {
    field?: string;
    value?: string | string[];
  };
};

export const EcsMapping = z.object({}).catchall(
  z.object({
    field: z.string().optional(),
    value: z.union([z.string(), z.array(z.string())]).optional(),
  })
);

export type OsqueryQuery = RequiredOptional<{
  /**
   * Query ID
   */
  id: string;
  /**
   * Query to execute
   */
  query: string;
  ecs_mapping?: EcsMapping;
  /**
   * Query version
   */
  version?: string;
  platform?: string;
  removed?: boolean;
  snapshot?: boolean;
}>;

export const OsqueryQuery = z
  .object({
    /**
     * Query ID
     */
    id: z.string(),
    /**
     * Query to execute
     */
    query: z.string(),
    ecs_mapping: EcsMapping.optional(),
    /**
     * Query version
     */
    version: z.string().optional(),
    platform: z.string().optional(),
    removed: z.boolean().optional(),
    snapshot: z.boolean().optional(),
  })
  .transform(requireOptional);

export type OsqueryParams = RequiredOptional<{
  query?: string;
  ecs_mapping?: EcsMapping;
  queries?: OsqueryQuery[];
  pack_id?: string;
  saved_query_id?: string;
}>;

export const OsqueryParams = z
  .object({
    query: z.string().optional(),
    ecs_mapping: EcsMapping.optional(),
    queries: z.array(OsqueryQuery).optional(),
    pack_id: z.string().optional(),
    saved_query_id: z.string().optional(),
  })
  .transform(requireOptional);

export type OsqueryParamsCamelCase = RequiredOptional<{
  query?: string;
  ecsMapping?: EcsMapping;
  queries?: OsqueryQuery[];
  packId?: string;
  savedQueryId?: string;
}>;

export const OsqueryParamsCamelCase = z
  .object({
    query: z.string().optional(),
    ecsMapping: EcsMapping.optional(),
    queries: z.array(OsqueryQuery).optional(),
    packId: z.string().optional(),
    savedQueryId: z.string().optional(),
  })
  .transform(requireOptional);

export interface OsqueryResponseAction {
  action_type_id: '.osquery';
  params: OsqueryParams;
}

export const OsqueryResponseAction = z.object({
  action_type_id: z.literal('.osquery'),
  params: OsqueryParams,
});

export interface RuleResponseOsqueryAction {
  actionTypeId: '.osquery';
  params: OsqueryParamsCamelCase;
}

export const RuleResponseOsqueryAction = z.object({
  actionTypeId: z.literal('.osquery'),
  params: OsqueryParamsCamelCase,
});

export type EndpointParams = RequiredOptional<{
  command: 'isolate';
  comment?: string;
}>;

export const EndpointParams = z
  .object({
    command: z.literal('isolate'),
    comment: z.string().optional(),
  })
  .transform(requireOptional);

export interface EndpointResponseAction {
  action_type_id: '.endpoint';
  params: EndpointParams;
}

export const EndpointResponseAction = z.object({
  action_type_id: z.literal('.endpoint'),
  params: EndpointParams,
});

export interface RuleResponseEndpointAction {
  actionTypeId: '.endpoint';
  params: EndpointParams;
}

export const RuleResponseEndpointAction = z.object({
  actionTypeId: z.literal('.endpoint'),
  params: EndpointParams,
});

export type ResponseAction = OsqueryResponseAction | EndpointResponseAction;

export const ResponseAction = z.union([OsqueryResponseAction, EndpointResponseAction]);

export type RuleResponseAction = RuleResponseOsqueryAction | RuleResponseEndpointAction;

export const RuleResponseAction = z.union([RuleResponseOsqueryAction, RuleResponseEndpointAction]);
