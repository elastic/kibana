/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: External Rule Source Schema
 *   version: not applicable
 */

import { z } from 'zod';

export type GithubRuleSourceInput = z.infer<typeof GithubRuleSourceInput>;
export const GithubRuleSourceInput = z.object({
  type: z.literal('github'),
  /**
   * The owner of the GitHub repository (organization or user)
   */
  owner: z.string(),
  /**
   * The name of the GitHub repository
   */
  repo: z.string(),
  /**
   * The GitHub token to access the repository
   */
  token: z.string(),
});

export type ExternalRuleSourceInput = z.infer<typeof ExternalRuleSourceInput>;
export const ExternalRuleSourceInput = z.discriminatedUnion('type', [GithubRuleSourceInput]);

export type GithubRuleSourceOutput = z.infer<typeof GithubRuleSourceOutput>;
export const GithubRuleSourceOutput = z.object({
  type: z.literal('github'),
  /**
   * The unique identifier of the external rule source
   */
  id: z.string(),
  /**
   * The owner of the GitHub repository (organization or user)
   */
  owner: z.string(),
  /**
   * The name of the GitHub repository
   */
  repo: z.string(),
});

export type ExternalRuleSourceOutput = z.infer<typeof ExternalRuleSourceOutput>;
export const ExternalRuleSourceOutput = z.discriminatedUnion('type', [GithubRuleSourceOutput]);
