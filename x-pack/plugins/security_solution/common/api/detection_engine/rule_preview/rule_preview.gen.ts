/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Rule preview API endpoint
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';
import { BooleanFromString } from '@kbn/zod-helpers';

import {
  EqlRuleCreateProps,
  QueryRuleCreateProps,
  SavedQueryRuleCreateProps,
  ThresholdRuleCreateProps,
  ThreatMatchRuleCreateProps,
  MachineLearningRuleCreateProps,
  NewTermsRuleCreateProps,
  EsqlRuleCreateProps,
} from '../model/rule_schema/rule_schemas.gen';
import { NonEmptyString } from '../../model/primitives.gen';

export type RulePreviewParams = z.infer<typeof RulePreviewParams>;
export const RulePreviewParams = z.object({
  invocationCount: z.number().int(),
  timeframeEnd: z.string().datetime(),
});

export type RulePreviewLoggedRequest = z.infer<typeof RulePreviewLoggedRequest>;
export const RulePreviewLoggedRequest = z.object({
  request: NonEmptyString,
  description: NonEmptyString.optional(),
  duration: z.number().int().optional(),
});

export type RulePreviewLogs = z.infer<typeof RulePreviewLogs>;
export const RulePreviewLogs = z.object({
  errors: z.array(NonEmptyString),
  warnings: z.array(NonEmptyString),
  /**
   * Execution duration in milliseconds
   */
  duration: z.number().int(),
  startedAt: NonEmptyString.optional(),
  requests: z.array(RulePreviewLoggedRequest).optional(),
});

export type RulePreviewRequestQuery = z.infer<typeof RulePreviewRequestQuery>;
export const RulePreviewRequestQuery = z.object({
  /**
   * Enables logging and returning in response ES queries, performed during rule execution
   */
  enable_logged_requests: BooleanFromString.optional(),
});
export type RulePreviewRequestQueryInput = z.input<typeof RulePreviewRequestQuery>;

export type RulePreviewRequestBody = z.infer<typeof RulePreviewRequestBody>;
export const RulePreviewRequestBody = z.discriminatedUnion('type', [
  EqlRuleCreateProps.merge(RulePreviewParams),
  QueryRuleCreateProps.merge(RulePreviewParams),
  SavedQueryRuleCreateProps.merge(RulePreviewParams),
  ThresholdRuleCreateProps.merge(RulePreviewParams),
  ThreatMatchRuleCreateProps.merge(RulePreviewParams),
  MachineLearningRuleCreateProps.merge(RulePreviewParams),
  NewTermsRuleCreateProps.merge(RulePreviewParams),
  EsqlRuleCreateProps.merge(RulePreviewParams),
]);
export type RulePreviewRequestBodyInput = z.input<typeof RulePreviewRequestBody>;

export type RulePreviewResponse = z.infer<typeof RulePreviewResponse>;
export const RulePreviewResponse = z.object({
  logs: z.array(RulePreviewLogs),
  previewId: NonEmptyString.optional(),
  isAborted: z.boolean().optional(),
});
