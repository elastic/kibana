/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Alerts search API endpoint
 *   version: 2023-10-31
 */

import { z } from 'zod';

export type AlertsSortCombinations = z.infer<typeof AlertsSortCombinations>;
export const AlertsSortCombinations = z.union([z.string(), z.object({}).catchall(z.unknown())]);

export type AlertsSort = z.infer<typeof AlertsSort>;
export const AlertsSort = z.union([AlertsSortCombinations, z.array(AlertsSortCombinations)]);

/**
 * Elasticsearch query and aggregation request
 */
export type SearchAlertsRequestBody = z.infer<typeof SearchAlertsRequestBody>;
export const SearchAlertsRequestBody = z.object({
  query: z.object({}).catchall(z.unknown()).optional(),
  aggs: z.object({}).catchall(z.unknown()).optional(),
  size: z.number().int().min(0).optional(),
  track_total_hits: z.boolean().optional(),
  _source: z.union([z.boolean(), z.string(), z.array(z.string())]).optional(),
  fields: z.array(z.string()).optional(),
  runtime_mappings: z.object({}).catchall(z.unknown()).optional(),
  sort: AlertsSort.optional(),
});
export type SearchAlertsRequestBodyInput = z.input<typeof SearchAlertsRequestBody>;

/**
 * Elasticsearch search response
 */
export type SearchAlertsResponse = z.infer<typeof SearchAlertsResponse>;
export const SearchAlertsResponse = z.object({}).catchall(z.unknown());
