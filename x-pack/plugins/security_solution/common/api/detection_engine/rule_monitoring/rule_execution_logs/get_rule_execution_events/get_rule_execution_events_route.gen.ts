/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Get Rule Execution Events API endpoint
 *   version: 1
 */

import { z } from 'zod';
import { ArrayFromString } from '@kbn/zod-helpers';

import {
  RuleExecutionEventType,
  LogLevel,
  RuleExecutionEvent,
} from '../../model/execution_event.gen';
import { SortOrder } from '../../../model/sorting.gen';
import { PaginationResult } from '../../../model/pagination.gen';

export type GetRuleExecutionEventsRequestQuery = z.infer<typeof GetRuleExecutionEventsRequestQuery>;
export const GetRuleExecutionEventsRequestQuery = z.object({
  /**
   * Include events of matching the search term. If omitted, all events will be included.
   */
  search_term: z.string().optional(),
  /**
   * Include events of the specified types. If omitted, all types of events will be included.
   */
  event_types: ArrayFromString(RuleExecutionEventType).optional().default([]),
  /**
   * Include events having these log levels. If omitted, events of all levels will be included.
   */
  log_levels: ArrayFromString(LogLevel).optional().default([]),
  /**
   * Start date of the time range to query
   */
  date_start: z.string().datetime().optional(),
  /**
   * End date of the time range to query
   */
  date_end: z.string().datetime().optional(),
  /**
   * Sort order to sort results by
   */
  sort_order: SortOrder.optional().default('desc'),
  /**
   * Page number to return
   */
  page: z.coerce.number().int().optional().default(1),
  /**
   * Number of results per page
   */
  per_page: z.coerce.number().int().optional().default(20),
});
export type GetRuleExecutionEventsRequestQueryInput = z.input<
  typeof GetRuleExecutionEventsRequestQuery
>;

export type GetRuleExecutionEventsRequestParams = z.infer<
  typeof GetRuleExecutionEventsRequestParams
>;
export const GetRuleExecutionEventsRequestParams = z.object({
  ruleId: z.string().min(1),
});
export type GetRuleExecutionEventsRequestParamsInput = z.input<
  typeof GetRuleExecutionEventsRequestParams
>;

export type GetRuleExecutionEventsResponse = z.infer<typeof GetRuleExecutionEventsResponse>;
export const GetRuleExecutionEventsResponse = z.object({
  events: z.array(RuleExecutionEvent),
  pagination: PaginationResult,
});
