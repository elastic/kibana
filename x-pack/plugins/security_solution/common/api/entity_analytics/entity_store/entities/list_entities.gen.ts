/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Entities List Schema
 *   version: 2023-10-31
 */

import { z } from '@kbn/zod';
import { ArrayFromString } from '@kbn/zod-helpers';

import { EntityType, InspectQuery } from '../common.gen';
import { UserEntityRecord, HostEntityRecord } from './common.gen';

export type ListEntitiesRequestQuery = z.infer<typeof ListEntitiesRequestQuery>;
export const ListEntitiesRequestQuery = z.object({
  /**
   * The field to sort by.
   */
  sort_field: z.string().optional(),
  /**
   * The order to sort by.
   */
  sort_order: z.enum(['asc', 'desc']).optional(),
  /**
   * The page number to return.
   */
  page: z.coerce.number().int().min(1).optional(),
  /**
   * The number of records to return per page.
   */
  per_page: z.coerce.number().int().min(1).max(1000).optional(),
  /**
   * The filterQuery to filter by.
   */
  filterQuery: z.string().optional(),
  /**
   * The entity types to filter by.
   */
  entities_types: ArrayFromString(EntityType),
});
export type ListEntitiesRequestQueryInput = z.input<typeof ListEntitiesRequestQuery>;

export type ListEntitiesResponse = z.infer<typeof ListEntitiesResponse>;
export const ListEntitiesResponse = z.object({
  records: z.array(z.union([UserEntityRecord, HostEntityRecord])),
  page: z.number().int().min(1),
  per_page: z.number().int().min(1).max(1000),
  total: z.number().int().min(0),
  inspect: InspectQuery.optional(),
});
