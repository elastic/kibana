/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Entities Schemas
 *   version: 1
 */

import { z } from '@kbn/zod';

export type UserEntityRecord = z.infer<typeof UserEntityRecord>;
export const UserEntityRecord = z.object({
  user: z
    .object({
      full_name: z.array(z.string()).optional(),
      domain: z.array(z.string()).optional(),
      roles: z.array(z.string()).optional(),
      name: z.string(),
      id: z.array(z.string()).optional(),
      email: z.array(z.string()).optional(),
      hash: z.array(z.string()).optional(),
    })
    .optional(),
  entity: z
    .object({
      /**
       * The last seen timestamp of the entity.
       */
      lastSeenTimestamp: z.string().datetime(),
      /**
       * The schema version of the entity.
       */
      schemaVersion: z.string(),
      /**
       * The definition version of the entity.
       */
      definitionVersion: z.string(),
      /**
       * The display name of the entity.
       */
      displayName: z.string(),
      /**
       * The identity fields of the entity.
       */
      identityFields: z.array(z.string()),
      /**
       * The ID of the entity.
       */
      id: z.string(),
      /**
       * The type of the entity.
       */
      type: z.literal('node'),
      /**
       * The first seen timestamp of the entity.
       */
      firstSeenTimestamp: z.string().datetime(),
      /**
       * The definition ID of the entity.
       */
      definitionId: z.string(),
    })
    .optional(),
});

export type HostEntityRecord = z.infer<typeof HostEntityRecord>;
export const HostEntityRecord = z.object({
  host: z
    .object({
      hostname: z.array(z.string()).optional(),
      domain: z.array(z.string()).optional(),
      ip: z.array(z.string()).optional(),
      name: z.string(),
      id: z.array(z.string()).optional(),
      type: z.array(z.string()).optional(),
      mac: z.array(z.string()).optional(),
      architecture: z.array(z.string()).optional(),
    })
    .optional(),
  entity: z
    .object({
      /**
       * The last seen timestamp of the entity.
       */
      lastSeenTimestamp: z.string().datetime(),
      /**
       * The schema version of the entity.
       */
      schemaVersion: z.string(),
      /**
       * The definition version of the entity.
       */
      definitionVersion: z.string(),
      /**
       * The display name of the entity.
       */
      displayName: z.string(),
      /**
       * The identity fields of the entity.
       */
      identityFields: z.array(z.string()),
      /**
       * The ID of the entity.
       */
      id: z.string(),
      /**
       * The type of the entity.
       */
      type: z.literal('node'),
      /**
       * The first seen timestamp of the entity.
       */
      firstSeenTimestamp: z.string().datetime(),
      /**
       * The definition ID of the entity.
       */
      definitionId: z.string(),
    })
    .optional(),
});
