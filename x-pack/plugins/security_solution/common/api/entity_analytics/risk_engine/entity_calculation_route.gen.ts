/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Risk Scoring API
 *   version: 1
 */

import { z } from 'zod';

import { IdentifierType, EntityRiskScoreRecord } from '../common/common.gen';

export type RiskScoresEntityCalculationRequest = z.infer<typeof RiskScoresEntityCalculationRequest>;
export const RiskScoresEntityCalculationRequest = z.object({
  /**
   * Used to identify the entity.
   */
  identifier: z.string(),
  /**
   * Used to define the type of entity.
   */
  identifier_type: IdentifierType,
  /**
   * If 'wait_for' the request will wait for the index refresh.
   */
  refresh: z.literal('wait_for').optional(),
});

export type RiskScoresEntityCalculationResponse = z.infer<
  typeof RiskScoresEntityCalculationResponse
>;
export const RiskScoresEntityCalculationResponse = z.object({
  success: z.boolean(),
  score: EntityRiskScoreRecord.optional(),
});

export type DeprecatedTriggerRiskScoreCalculationRequestBody = z.infer<
  typeof DeprecatedTriggerRiskScoreCalculationRequestBody
>;
export const DeprecatedTriggerRiskScoreCalculationRequestBody = RiskScoresEntityCalculationRequest;
export type DeprecatedTriggerRiskScoreCalculationRequestBodyInput = z.input<
  typeof DeprecatedTriggerRiskScoreCalculationRequestBody
>;

export type DeprecatedTriggerRiskScoreCalculationResponse = z.infer<
  typeof DeprecatedTriggerRiskScoreCalculationResponse
>;
export const DeprecatedTriggerRiskScoreCalculationResponse = RiskScoresEntityCalculationResponse;

export type TriggerRiskScoreCalculationRequestBody = z.infer<
  typeof TriggerRiskScoreCalculationRequestBody
>;
export const TriggerRiskScoreCalculationRequestBody = RiskScoresEntityCalculationRequest;
export type TriggerRiskScoreCalculationRequestBodyInput = z.input<
  typeof TriggerRiskScoreCalculationRequestBody
>;

export type TriggerRiskScoreCalculationResponse = z.infer<
  typeof TriggerRiskScoreCalculationResponse
>;
export const TriggerRiskScoreCalculationResponse = RiskScoresEntityCalculationResponse;
