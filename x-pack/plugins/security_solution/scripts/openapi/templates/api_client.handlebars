/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { KibanaServices } from '../lib/kibana';
{{#each apiOperations}}
{{#if (or requestQuery requestBody requestParams)}}
import type { 
  {{#if requestQuery}}{{operationId}}RequestQueryInput,{{/if}}
  {{#if requestParams}}{{operationId}}RequestParamsInput,{{/if}}
  {{#if requestBody}}{{operationId}}RequestBodyInput,{{/if}}
} from '../../../common/generated_schema/{{snakeCase operationId}}/{{snakeCase operationId}}_request_schema.gen';
{{/if}}
import type { 
  {{operationId}}Response,
} from '../../../common/generated_schema/{{snakeCase operationId}}/{{snakeCase operationId}}_response_schema.gen';
{{/each}}
import { replaceParams } from './replace_params';

{{> disclaimer}}

{{#each apiOperations}}
/**
{{#if description}}
  * {{{description}}}
{{/if}}
 * @throws An error if response is not OK
 */
export const {{camelCase operationId}} = async ({ 
  {{~#if requestQuery}}query,{{/if}}
  {{~#if requestParams}}params,{{/if}}
  {{~#if requestBody}}body,{{/if}}
  signal 
}: {{operationId}}Props): Promise<{{operationId}}Response> =>
  KibanaServices.get().http.fetch<{{operationId}}Response>(
    {{#if requestParams}}replaceParams('{{path}}', params){{else}}'{{path}}'{{/if}}, 
    {
      method: '{{method}}',
      {{~#if requestQuery}}query,{{/if}}
      {{~#if requestBody}}body: JSON.stringify(body),{{/if}}
      signal,
    }
);

export interface {{operationId}}Props {
  signal?: AbortSignal;
  {{~#if requestQuery}}query: {{operationId}}RequestQueryInput;{{/if}}
  {{~#if requestParams}}params: {{operationId}}RequestParamsInput;{{/if}}
  {{~#if requestBody}}body: {{operationId}}RequestBodyInput;{{/if}}
}

{{/each}}