/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
/* eslint-disable @typescript-eslint/no-duplicate-imports */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title:
 *   version:
 */

import type {
  SetAlertAssigneesRequestBody,
  SetAlertAssigneesResponse,
} from '../../../common/api/detection_engine/alert_assignees/set_alert_assignees_route.gen';
import type {
  SuggestUserProfilesRequestQuery,
  SuggestUserProfilesResponse,
} from '../../../common/api/detection_engine/users/suggest_user_profiles_route.gen';
import type {
  GetAgentPolicySummaryRequestQuery,
  GetAgentPolicySummaryResponse,
} from '../../../common/api/endpoint/policy/policy.gen';
import type {
  GetPolicyResponseRequestQuery,
  GetPolicyResponseResponse,
} from '../../../common/api/endpoint/policy/policy.gen';
import type {
  GetEndpointSuggestionsRequestBody,
  GetEndpointSuggestionsResponse,
} from '../../../common/api/endpoint/suggestions/get_suggestions.gen';
import type {
  PerformBulkActionRequestQuery,
  PerformBulkActionRequestBody,
  PerformBulkActionResponse,
} from '../../../common/api/detection_engine/rule_management/bulk_actions/bulk_actions_route.gen';
import type {
  ExportRulesRequestQuery,
  ExportRulesRequestBody,
  ExportRulesResponse,
} from '../../../common/api/detection_engine/rule_management/export_rules/export_rules_route.gen';
import type {
  FindRulesRequestQuery,
  FindRulesResponse,
} from '../../../common/api/detection_engine/rule_management/find_rules/find_rules_route.gen';
import type {
  ImportRulesRequestQuery,
  ImportRulesResponse,
} from '../../../common/api/detection_engine/rule_management/import_rules/import_rules_route.gen';
import type { ReadTagsResponse } from '../../../common/api/detection_engine/rule_management/read_tags/read_tags_route.gen';
import type { GetPrebuiltRulesAndTimelinesStatusResponse } from '../../../common/api/detection_engine/prebuilt_rules/get_prebuilt_rules_and_timelines_status/get_prebuilt_rules_and_timelines_status_route.gen';
import type { InstallPrebuiltRulesAndTimelinesResponse } from '../../../common/api/detection_engine/prebuilt_rules/install_prebuilt_rules_and_timelines/install_prebuilt_rules_and_timelines_route.gen';
import type {
  CreateRuleRequestBody,
  CreateRuleResponse,
} from '../../../common/api/detection_engine/rule_management/crud/create_rule/create_rule_route.gen';
import type {
  PatchRuleRequestBody,
  PatchRuleResponse,
} from '../../../common/api/detection_engine/rule_management/crud/patch_rule/patch_rule_route.gen';
import type {
  DeleteRuleRequestQuery,
  DeleteRuleResponse,
} from '../../../common/api/detection_engine/rule_management/crud/delete_rule/delete_rule_route.gen';
import type {
  ReadRuleRequestQuery,
  ReadRuleResponse,
} from '../../../common/api/detection_engine/rule_management/crud/read_rule/read_rule_route.gen';
import type {
  UpdateRuleRequestBody,
  UpdateRuleResponse,
} from '../../../common/api/detection_engine/rule_management/crud/update_rule/update_rule_route.gen';
import type {
  BulkCreateRulesRequestBody,
  BulkCreateRulesResponse,
} from '../../../common/api/detection_engine/rule_management/bulk_crud/bulk_create_rules/bulk_create_rules_route.gen';
import type {
  BulkDeleteRulesRequestBody,
  BulkDeleteRulesResponse,
} from '../../../common/api/detection_engine/rule_management/bulk_crud/bulk_delete_rules/bulk_delete_rules_route.gen';
import type {
  BulkPatchRulesRequestBody,
  BulkPatchRulesResponse,
} from '../../../common/api/detection_engine/rule_management/bulk_crud/bulk_patch_rules/bulk_patch_rules_route.gen';
import type {
  BulkUpdateRulesRequestBody,
  BulkUpdateRulesResponse,
} from '../../../common/api/detection_engine/rule_management/bulk_crud/bulk_update_rules/bulk_update_rules_route.gen';
import type {
  GetRuleExecutionEventsRequestQuery,
  GetRuleExecutionEventsResponse,
} from '../../../common/api/detection_engine/rule_monitoring/rule_execution_logs/get_rule_execution_events/get_rule_execution_events_route.gen';
import type {
  GetRuleExecutionResultsRequestQuery,
  GetRuleExecutionResultsResponse,
} from '../../../common/api/detection_engine/rule_monitoring/rule_execution_logs/get_rule_execution_results/get_rule_execution_results_route.gen';
import { KibanaServices } from '../lib/kibana';

/*
 * Assigns users to alerts.
 */
export const setAlertAssignees = (params: SetAlertAssigneesRequestBody, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<SetAlertAssigneesResponse>(
    '/api/detection_engine/signals/assignees',
    {
      body: JSON.stringify(params),
      signal,
    }
  );

/*
 * Suggests user profiles.
 */
export const suggestUserProfiles = (query: SuggestUserProfilesRequestQuery, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<SuggestUserProfilesResponse>(
    '/internal/detection_engine/users/_find',
    {
      query,
      signal,
    }
  );

export const getAgentPolicySummary = (
  query: GetAgentPolicySummaryRequestQuery,
  signal?: AbortSignal
) =>
  KibanaServices.get().http.fetch<GetAgentPolicySummaryResponse>('/api/endpoint/policy/summaries', {
    query,
    signal,
  });

export const getPolicyResponse = (query: GetPolicyResponseRequestQuery, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<GetPolicyResponseResponse>('/api/endpoint/policy_response', {
    query,
    signal,
  });

export const getEndpointSuggestions = (
  params: GetEndpointSuggestionsRequestBody,
  signal?: AbortSignal
) =>
  KibanaServices.get().http.fetch<GetEndpointSuggestionsResponse>(
    '/api/endpoint/suggestions/{suggestion_type}',
    {
      body: JSON.stringify(params),
      signal,
    }
  );

/*
 * The bulk action is applied to all rules that match the filter or to the list of rules by their IDs.
 */
export const performBulkAction = (
  params: PerformBulkActionRequestBody,
  query: PerformBulkActionRequestQuery,
  signal?: AbortSignal
) =>
  KibanaServices.get().http.fetch<PerformBulkActionResponse>(
    '/api/detection_engine/rules/_bulk_action',
    {
      body: JSON.stringify(params),
      query,
      signal,
    }
  );

/*
 * Exports rules to an `.ndjson` file. The following configuration items are also included in the `.ndjson` file - Actions, Exception lists. Prebuilt rules cannot be exported.
 */
export const exportRules = (
  params: ExportRulesRequestBody,
  query: ExportRulesRequestQuery,
  signal?: AbortSignal
) =>
  KibanaServices.get().http.fetch<ExportRulesResponse>('/api/detection_engine/rules/_export', {
    body: JSON.stringify(params),
    query,
    signal,
  });

/*
 * Finds rules that match the given query.
 */
export const findRules = (query: FindRulesRequestQuery, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<FindRulesResponse>('/api/detection_engine/rules/_find', {
    query,
    signal,
  });

/*
 * Imports rules from an `.ndjson` file, including actions and exception lists.
 */
export const importRules = (query: ImportRulesRequestQuery, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<ImportRulesResponse>('/api/detection_engine/rules/_import', {
    query,
    signal,
  });

export const readTags = (signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<ReadTagsResponse>('/api/detection_engine/tags', {
    signal,
  });

export const getPrebuiltRulesAndTimelinesStatus = (signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<GetPrebuiltRulesAndTimelinesStatusResponse>(
    '/api/detection_engine/rules/prepackaged/_status',
    {
      signal,
    }
  );

export const installPrebuiltRulesAndTimelines = (signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<InstallPrebuiltRulesAndTimelinesResponse>(
    '/api/detection_engine/rules/prepackaged',
    {
      signal,
    }
  );

/*
 * Create a single detection rule
 */
export const createRule = (params: CreateRuleRequestBody, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<CreateRuleResponse>('/api/detection_engine/rules', {
    body: JSON.stringify(params),
    signal,
  });

/*
 * Patch a single rule
 */
export const patchRule = (params: PatchRuleRequestBody, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<PatchRuleResponse>('/api/detection_engine/rules', {
    body: JSON.stringify(params),
    signal,
  });

/*
 * Deletes a single rule using the `rule_id` or `id` field.
 */
export const deleteRule = (query: DeleteRuleRequestQuery, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<DeleteRuleResponse>('/api/detection_engine/rules', {
    query,
    signal,
  });

/*
 * Read a single rule
 */
export const readRule = (query: ReadRuleRequestQuery, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<ReadRuleResponse>('/api/detection_engine/rules', {
    query,
    signal,
  });

/*
 * Update a single rule
 */
export const updateRule = (params: UpdateRuleRequestBody, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<UpdateRuleResponse>('/api/detection_engine/rules', {
    body: JSON.stringify(params),
    signal,
  });

/*
 * Creates new detection rules in bulk.
 */
export const bulkCreateRules = (params: BulkCreateRulesRequestBody, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<BulkCreateRulesResponse>(
    '/api/detection_engine/rules/_bulk_create',
    {
      body: JSON.stringify(params),
      signal,
    }
  );

/*
 * Deletes multiple rules.
 */
export const bulkDeleteRules = (params: BulkDeleteRulesRequestBody, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<BulkDeleteRulesResponse>(
    '/api/detection_engine/rules/_bulk_delete',
    {
      body: JSON.stringify(params),
      signal,
    }
  );

/*
 * Updates multiple rules using the `PATCH` method.
 */
export const bulkPatchRules = (params: BulkPatchRulesRequestBody, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<BulkPatchRulesResponse>(
    '/api/detection_engine/rules/_bulk_update',
    {
      body: JSON.stringify(params),
      signal,
    }
  );

/*
 * Updates multiple rules using the `PUT` method.
 */
export const bulkUpdateRules = (params: BulkUpdateRulesRequestBody, signal?: AbortSignal) =>
  KibanaServices.get().http.fetch<BulkUpdateRulesResponse>(
    '/api/detection_engine/rules/_bulk_update',
    {
      body: JSON.stringify(params),
      signal,
    }
  );

export const getRuleExecutionEvents = (
  query: GetRuleExecutionEventsRequestQuery,
  signal?: AbortSignal
) =>
  KibanaServices.get().http.fetch<GetRuleExecutionEventsResponse>(
    '/internal/detection_engine/rules/{ruleId}/execution/events',
    {
      query,
      signal,
    }
  );

export const getRuleExecutionResults = (
  query: GetRuleExecutionResultsRequestQuery,
  signal?: AbortSignal
) =>
  KibanaServices.get().http.fetch<GetRuleExecutionResultsResponse>(
    '/internal/detection_engine/rules/{ruleId}/execution/results',
    {
      query,
      signal,
    }
  );
