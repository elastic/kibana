/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useMemo } from 'react';
import type { Storage } from '@kbn/kibana-utils-plugin/public';
import type {
  AlertsTableConfigurationRegistryContract,
  GetRenderCellValue,
} from '@kbn/triggers-actions-ui-plugin/public';

import type {
  EuiDataGridColumn,
  EuiDataGridColumnCellAction,
  EuiDataGridRefProps,
} from '@elastic/eui';
import { get, isEmpty, isEqual } from 'lodash';
import type { AlertsTableConfigurationRegistry } from '@kbn/triggers-actions-ui-plugin/public/types';
import { useSelector } from 'react-redux';
import type { Filter } from '@kbn/es-query';
import type { QueryDslQueryContainer } from '@elastic/elasticsearch/lib/api/typesWithBodyKey';
import type { SerializableRecord } from '@kbn/utility-types';
import { getAlertsDefaultModel } from '../../../detections/components/alerts_table/default_config';
import { getDefaultControlColumn } from '../../../timelines/components/timeline/body/control_columns';
import { useBulkAddToCaseActions } from '../../../detections/components/alerts_table/timeline_actions/use_bulk_add_to_case_actions';
import { useAddBulkToTimelineAction } from '../../../detections/components/alerts_table/timeline_actions/use_add_bulk_to_timeline';
import { APP_ID, CASES_FEATURE_ID } from '../../../../common/constants';
import { getDataTablesInStorageByIds } from '../../../timelines/containers/local_storage';
import type { ColumnHeaderOptions } from '../../../../common/types';
import { TimelineId } from '../../../../common/types';
import { TableId } from '../../../../common/types';
import { getColumns } from '../../../detections/configurations/security_solution_detections';
import { useRenderCellValue } from '../../../detections/configurations/security_solution_detections/render_cell_value';
import { useToGetInternalFlyout } from '../../../timelines/components/side_panel/event_details/flyout';
import type { TimelineNonEcsData } from '../../../../common/search_strategy';
import type { Ecs } from '../../../../common/ecs';
import { useSourcererDataView } from '../../containers/sourcerer';
import { SourcererScopeName } from '../../store/sourcerer/model';
import { defaultCellActions } from '../cell_actions/default_cell_actions';
import { useGlobalTime } from '../../containers/use_global_time';
import { useLicense } from '../../hooks/use_license';
import { RowAction } from '../../components/control_columns/row_action';
import type { State } from '../../../../common/store';
import { eventsViewerSelector } from '../../components/events_viewer/selectors';
import { defaultHeaders } from '../../store/data_table/defaults';

function getFiltersForDSLQuery(datafeedQuery: QueryDslQueryContainer): Filter[] {
  if (isKnownEmptyQuery(datafeedQuery)) {
    return [];
  }

  return [
    {
      meta: {
        negate: false,
        disabled: false,
        type: 'custom',
        value: JSON.stringify(datafeedQuery),
      },
      query: datafeedQuery as SerializableRecord,
    },
  ];
}

// check to see if the query is a known "empty" shape
export function isKnownEmptyQuery(query: QueryDslQueryContainer) {
  const queries = [
    // the default query used by the job wizards
    { bool: { must: [{ match_all: {} }] } },
    // the default query used created by lens created jobs
    { bool: { filter: [], must: [{ match_all: {} }], must_not: [] } },
    // variations on the two previous queries
    { bool: { filter: [], must: [{ match_all: {} }] } },
    { bool: { must: [{ match_all: {} }], must_not: [] } },
    // the query generated by QA Framework created jobs
    { match_all: {} },
  ];
  if (queries.some((q) => isEqual(q, query))) {
    return true;
  }

  return false;
}

const registerAlertsTableConfiguration = (
  registry: AlertsTableConfigurationRegistryContract,
  storage: Storage
) => {
  if (registry.has(APP_ID)) {
    return;
  }
  const dataTableStorage = getDataTablesInStorageByIds(storage, [TableId.alertsOnAlertsPage]);
  const columnsFormStorage = dataTableStorage?.[TableId.alertsOnAlertsPage]?.columns ?? [];
  const alertColumns = columnsFormStorage.length ? columnsFormStorage : getColumns();

  const useBulkActionHook: AlertsTableConfigurationRegistry['useBulkActions'] = (query) => {
    const { from, to } = useGlobalTime();
    const filters = getFiltersForDSLQuery(query);
    const timelineAction = useAddBulkToTimelineAction({
      localFilters: filters,
      from,
      to,
      scopeId: SourcererScopeName.detections,
      tableId: TableId.alertsOnAlertsPage,
    });

    const caseActions = useBulkAddToCaseActions();
    return [timelineAction, ...caseActions];
  };

  const useActionsColumn: AlertsTableConfigurationRegistry['useActionsColumn'] = () => {
    const license = useLicense();
    const isEnterprisePlus = license.isEnterprise();
    const ACTION_BUTTON_COUNT = isEnterprisePlus ? 5 : 4;

    const leadingControlColumns = useMemo(
      () => getDefaultControlColumn(ACTION_BUTTON_COUNT),
      [ACTION_BUTTON_COUNT]
    );

    const {
      filters,
      query,
      dataTable: {
        columns,
        defaultColumns,
        deletedEventIds,
        graphEventId, // If truthy, the graph viewer (Resolver) is showing
        itemsPerPage,
        itemsPerPageOptions,
        sessionViewConfig,
        showCheckboxes,
        sort,
        queryFields,
        selectAll,
        selectedEventIds,
        isSelectAllChecked,
        loadingEventIds,
        title,
      } = getAlertsDefaultModel(license),
    } = useSelector((state: State) => eventsViewerSelector(state, TableId.alertsOnAlertsPage));

    const columnHeaders = isEmpty(columns) ? defaultHeaders : columns;

    return {
      renderCustomActionsRow: ({ alert, nonEcsData, rowIndex, cveProps }) => {
        return (
          <RowAction
            columnId={`abc-${rowIndex}`}
            columnHeaders={columnHeaders}
            controlColumn={leadingControlColumns[0]}
            data={{
              _id: alert._id,
              _index: alert._index,
              data: nonEcsData,
              ecs: alert as Ecs,
            }}
            disabled={false}
            index={rowIndex}
            isDetails={cveProps.isDetails}
            isExpanded={cveProps.isExpanded}
            isEventViewer={false}
            isExpandable={cveProps.isExpandable}
            loadingEventIds={loadingEventIds}
            onRowSelected={() => {}}
            onRuleChange={() => {}}
            rowIndex={cveProps.rowIndex}
            colIndex={cveProps.colIndex}
            pageRowIndex={rowIndex}
            selectedEventIds={selectedEventIds}
            setCellProps={cveProps.setCellProps}
            showCheckboxes={showCheckboxes}
            tabType={'query'}
            tableId={TableId.alertsOnAlertsPage}
            width={124}
            setEventsLoading={() => {}}
            setEventsDeleted={() => {}}
          />
        );
      },
      width: 124,
    };
  };

  registry.register({
    id: APP_ID,
    casesFeatureId: CASES_FEATURE_ID,
    columns: alertColumns,
    getRenderCellValue: useRenderCellValue as GetRenderCellValue,
    useActionsColumn,
    useInternalFlyout: () => {
      const { header, body, footer } = useToGetInternalFlyout();
      return { header, body, footer };
    },
    useBulkActions: useBulkActionHook,
    useCellActions: ({
      columns,
      data,
      ecsData,
      dataGridRef,
      pageSize,
    }: {
      columns: EuiDataGridColumn[];
      data: unknown[][];
      ecsData: unknown[];
      dataGridRef?: EuiDataGridRefProps;
      pageSize: number;
    }) => {
      const { browserFields } = useSourcererDataView(SourcererScopeName.detections);
      return {
        cellActions: defaultCellActions.map((dca) => {
          return dca({
            browserFields,
            data: data as TimelineNonEcsData[][],
            ecsData: ecsData as Ecs[],
            header: columns.map((col) => {
              const splitCol = col.id.split('.');
              const fields =
                splitCol.length > 0
                  ? get(browserFields, [
                      splitCol.length === 1 ? 'base' : splitCol[0],
                      'fields',
                      col.id,
                    ])
                  : {};
              return {
                ...col,
                ...fields,
              };
            }) as ColumnHeaderOptions[],
            scopeId: TimelineId.casePage,
            pageSize,
            closeCellPopover: dataGridRef?.closeCellPopover,
          });
        }) as EuiDataGridColumnCellAction[],
        visibleCellActions: 3,
        disabledCellActions: [],
      };
    },
  });
};

export { registerAlertsTableConfiguration };
