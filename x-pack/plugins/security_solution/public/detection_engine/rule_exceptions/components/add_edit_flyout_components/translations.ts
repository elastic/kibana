/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { i18n } from '@kbn/i18n';

// Meta component
export const RULE_EXCEPTION_NAME_LABEL = i18n.translate(
  'xpack.securitySolution.exceptions.common.ruleExceptionNameLabel',
  {
    defaultMessage: 'Rule exception name',
  }
);

export const RULE_EXCEPTION_NAME_PLACEHOLDER = i18n.translate(
  'xpack.securitySolution.exceptions.common.ruleExceptionNamePlaceholder',
  {
    defaultMessage: 'Name your rule exception',
  }
);

// Conditions component
export const RULE_EXCEPTION_CONDITIONS = i18n.translate(
  'xpack.securitySolution.exceptions.common.conditionsTitle',
  {
    defaultMessage: 'Conditions',
  }
);

export const EXCEPTION_BUILDER_INFO = i18n.translate(
  'xpack.securitySolution.exceptions.common.infoLabel',
  {
    defaultMessage: "Alerts are generated when the rule's conditions are met, except when:",
  }
);

export const ADD_EXCEPTION_SEQUENCE_WARNING = i18n.translate(
  'xpack.securitySolution.exceptions.common.sequenceWarningAdd',
  {
    defaultMessage:
      "This rule's query contains an EQL sequence statement. The exception created will apply to all events in the sequence.",
  }
);

export const EDIT_EXCEPTION_SEQUENCE_WARNING = i18n.translate(
  'xpack.securitySolution.exceptions.common.sequenceWarningEdit',
  {
    defaultMessage:
      "This rule's query contains an EQL sequence statement. The exception modified will apply to all events in the sequence.",
  }
);

export const OPERATING_SYSTEM_PLACEHOLDER = i18n.translate(
  'xpack.securitySolution.exceptions.common.operatingSystemPlaceHolder',
  {
    defaultMessage: 'Select an operating system',
  }
);

// Alert options component
export const CLOSE_ALERTS_SECTION_TITLE = i18n.translate(
  'xpack.securitySolution.exceptions.common.closeAlertsTitle',
  {
    defaultMessage: 'Close matching alerts',
  }
);

export const BULK_CLOSE_LABEL_DISABLED = i18n.translate(
  'xpack.securitySolution.exceptions.common.bulkCloseLabel.disabled',
  {
    defaultMessage:
      'Close all alerts that match this exception and were generated by this rule (Lists and non-ECS fields are not supported)',
  }
);

export const BULK_CLOSE_LABEL = i18n.translate(
  'xpack.securitySolution.exceptions.common.bulkCloseLabel',
  {
    defaultMessage: 'Close all alerts that match this exception and were generated by this rule',
  }
);

export const ENDPOINT_QUARANTINE_TEXT = i18n.translate(
  'xpack.securitySolution.exceptions.common.endpointQuarantineText',
  {
    defaultMessage:
      'On all Endpoint hosts, quarantined files that match the exception are automatically restored to their original locations. This exception applies to all rules using Endpoint exceptions.',
  }
);

// Add to lists section
export const ADD_TO_LISTS_SECTION_TITLE = i18n.translate(
  'xpack.securitySolution.exceptions.common.addToListsLabel',
  {
    defaultMessage: 'Add to rule or lists',
  }
);

export const ADD_TO_LISTS_OPTION = i18n.translate(
  'xpack.securitySolution.exceptions.common.addToListsOptionLabel',
  {
    defaultMessage: 'Add to shared exception lists',
  }
);

export const ADD_TO_LISTS_OPTION_TOOLTIP = i18n.translate(
  'xpack.securitySolution.exceptions.common.addToListsTooltip',
  {
    defaultMessage:
      'Shared exception list is a group of exceptions. Select this option if youâ€™d like to add this exception to shared exception lists.',
  }
);

export const ADD_TO_LISTS_OPTION_TOOLTIP_TITLE = i18n.translate(
  'xpack.securitySolution.exceptions.common.addToListsTooltipTitle',
  {
    defaultMessage: 'Add to shared exception list',
  }
);

export const ADD_TO_LISTS_DESCRIPTION = i18n.translate(
  'xpack.securitySolution.exceptions.common.addToListsDescription',
  {
    defaultMessage:
      'Select shared exception list to add to. We will make a copy of this exception if multiple lists are selected.',
  }
);

export const ADD_TO_LIST_EMPTY_TITLE = i18n.translate(
  'xpack.securitySolution.exceptions.common.addToListEmptyValue',
  {
    defaultMessage: 'No exception lists',
  }
);

export const ADD_TO_LIST_EMPTY_BODY = i18n.translate(
  'xpack.securitySolution.exceptions.common.addToListEmptyValue',
  {
    defaultMessage: "Looks like you don't have any lists. Create a list first to add items to.",
  }
);

export const ADD_TO_SELECTED_RULES_DESCRIPTION = i18n.translate(
  'xpack.securitySolution.exceptions.common.addToSelectedRulesDescription',
  {
    defaultMessage:
      'Select rules add to. We will make a copy of this exception if it links to multiple rules. ',
  }
);

export const VIEW_LIST_DETAIL_ACTION = i18n.translate(
  'xpack.securitySolution.exceptions.common.viewListDetailActionLabel',
  {
    defaultMessage: 'View list detail',
  }
);

export const ERROR_EXCEPTION_LISTS = i18n.translate(
  'xpack.securitySolution.exceptions.common.errorFetching',
  {
    defaultMessage: 'Error fetching exception lists',
  }
);

export const LOADING_LISTS_MESSAGE = i18n.translate(
  'xpack.securitySolution.exceptions.common.loadingListsMessage',
  {
    defaultMessage: 'Loading exception lists',
  }
);

export const showSelectedLists = (listsCount: number) =>
  i18n.translate('xpack.securitySolution.exceptions.common.selectedListsText', {
    defaultMessage: 'Showing {listsCount} {listsCount, plural, =1 {list} other {lists}}',
    values: { listsCount },
  });

// Comments section
export const COMMENTS_SECTION_TITLE = (comments: number) =>
  i18n.translate('xpack.securitySolution.exceptions.common.commentsTitle', {
    values: { comments },
    defaultMessage: 'Add comments ({comments})',
  });

export const VIEW_RULE_DETAIL_ACTION = i18n.translate(
  'xpack.securitySolution.exceptions.common.loadingListsMessage',
  {
    defaultMessage: 'View rule detail',
  }
);
