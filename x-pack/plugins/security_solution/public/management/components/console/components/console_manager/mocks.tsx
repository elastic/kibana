/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/* eslint-disable import/no-extraneous-dependencies */

import React, { memo, useCallback } from 'react';
import { EuiButton, EuiFlexGroup, EuiFlexItem, EuiSpacer } from '@elastic/eui';
import { act } from '@testing-library/react-hooks';
import userEvent from '@testing-library/user-event';
import { waitFor } from '@testing-library/react';
import { AppContextTestRender } from '../../../../../common/mock/endpoint';
import { getCommandListMock } from '../../mocks';
import { useConsoleManager } from './console_manager';
import { ConsoleRegistrationInterface, RegisteredConsoleClient } from './types';

export const getNewConsoleRegistrationMock = (
  overrides: Partial<ConsoleRegistrationInterface> = {}
): ConsoleRegistrationInterface => {
  return {
    id: Math.random().toString(36),
    title: 'Test console',
    meta: { about: 'for unit testing ' },
    consoleProps: {
      'data-test-subj': 'testRunningConsole',
      commands: getCommandListMock(),
    },
    onBeforeTerminate: jest.fn(),
    ...overrides,
  };
};

/**
 * A set of queries and user action helper methods for interacting with the ConsoleManager test component
 * and ConsoleManager
 * @param renderResult
 */
export const getConsoleManagerMockRenderResultQueriesAndActions = (
  renderResult: ReturnType<AppContextTestRender['render']>
) => {
  return {
    /**
     * Clicks the button to register a new console. The new console registration is shown in the list of running consoles
     */
    clickOnRegisterNewConsole: async () => {
      const currentRunningCount = renderResult.queryAllByTestId('showRunningConsole').length;

      act(() => {
        userEvent.click(renderResult.getByTestId('registerNewConsole'));
      });

      await waitFor(() => {
        expect(renderResult.queryAllByTestId('showRunningConsole')).toHaveLength(
          currentRunningCount + 1
        );
      });
    },

    /**
     * Clicks one of the hidden consoles so that it can be shown.
     * @param atIndex
     */
    openRunningConsole: async (atIndex: number = 0) => {
      act(() => {
        userEvent.click(renderResult.queryAllByTestId('showRunningConsole')[atIndex]);
      });

      await waitFor(() => {
        expect(
          renderResult.getByTestId('consolePopupWrapper').classList.contains('is-hidden')
        ).toBe(false);
      });
    },

    hideOpenedConsole: async () => {
      const hideConsoleButton = renderResult.queryByTestId('consolePopupHideButton');

      if (!hideConsoleButton) {
        return;
      }

      userEvent.click(hideConsoleButton);
      await waitFor(() => {
        expect(
          renderResult.getByTestId('consolePopupWrapper').classList.contains('is-hidden')
        ).toBe(true);
      });
    },
  };
};

const RunningConsole = memo<{ registeredConsole: RegisteredConsoleClient }>(
  ({ registeredConsole }) => {
    const handleShowOnClick = useCallback(() => {
      registeredConsole.show();
    }, [registeredConsole]);

    return (
      <div data-test-subj="runningConsole">
        <EuiFlexGroup gutterSize="s">
          <EuiFlexItem grow data-test-subj="runningConsoleTitle">
            {registeredConsole.title}
          </EuiFlexItem>
          <EuiFlexItem grow={false}>
            <EuiButton
              onClick={handleShowOnClick}
              data-test-subj="showRunningConsole"
              data-console-id={registeredConsole.id}
            >
              {'show'}
            </EuiButton>
          </EuiFlexItem>
        </EuiFlexGroup>
        <EuiSpacer />
      </div>
    );
  }
);
RunningConsole.displayName = 'RunningConsole';

/**
 * A test component that enables one to open consoles managed via `ConsoleManager`.
 */
export const ConsoleManagerTestComponent = memo<{
  /**
   * A callback that can return the registration (or partial registration) for a new console. These
   * will be appended to the output generated by `getNewConsoleRegistrationMock()`
   */
  registerConsoleProps?: () => Partial<ConsoleRegistrationInterface>;
}>(({ registerConsoleProps = () => ({}) }) => {
  const consoleManager = useConsoleManager();
  const handleRegisterNewConsoleOnClick = useCallback(() => {
    consoleManager.register(getNewConsoleRegistrationMock(registerConsoleProps()));
  }, [consoleManager, registerConsoleProps]);

  return (
    <div>
      <div>
        <EuiButton data-test-subj="registerNewConsole" onClick={handleRegisterNewConsoleOnClick}>
          {'Register new console'}
        </EuiButton>
      </div>
      <div>
        {consoleManager.getList().map((registeredConsole) => {
          return (
            <RunningConsole registeredConsole={registeredConsole} key={registeredConsole.id} />
          );
        })}
      </div>
    </div>
  );
});
ConsoleManagerTestComponent.displayName = 'ConsoleManagerTestComponent';
