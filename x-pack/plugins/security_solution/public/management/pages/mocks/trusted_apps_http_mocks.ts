/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { HttpFetchOptionsWithPath } from 'kibana/public';
import {
  ENDPOINT_TRUSTED_APPS_LIST_ID,
  EXCEPTION_LIST_ITEM_URL,
} from '@kbn/securitysolution-list-constants';
import {
  ExceptionListItemSchema,
  FoundExceptionListItemSchema,
  FindExceptionListItemSchema,
  UpdateExceptionListItemSchema,
  ReadExceptionListItemSchema,
} from '@kbn/securitysolution-io-ts-list-types';
import {
  httpHandlerMockFactory,
  ResponseProvidersInterface,
} from '../../../common/mock/endpoint/http_handler_mock_factory';
import { ExceptionsListItemGenerator } from '../../../../common/endpoint/data_generators/exceptions_list_item_generator';
import { POLICY_REFERENCE_PREFIX } from '../../../../common/endpoint/service/trusted_apps/mapping';

interface FindExceptionListItemSchemaQueryParams
  extends Omit<FindExceptionListItemSchema, 'page' | 'per_page'> {
  page?: number;
  per_page?: number;
}

export type TrustedAppsGetListHttpMocksInterface = ResponseProvidersInterface<{
  trustedAppsList: (options: HttpFetchOptionsWithPath) => FoundExceptionListItemSchema;
}>;
/**
 * HTTP mock for retrieving list of Trusted Apps
 */
export const trustedAppsGetListHttpMocks =
  httpHandlerMockFactory<TrustedAppsGetListHttpMocksInterface>([
    {
      id: 'trustedAppsList',
      path: `${EXCEPTION_LIST_ITEM_URL}/_find`,
      method: 'get',
      handler: ({ query }): FoundExceptionListItemSchema => {
        const apiQueryParams = query as unknown as FindExceptionListItemSchemaQueryParams;
        const generator = new ExceptionsListItemGenerator('seed');
        const perPage = apiQueryParams.per_page ?? 10;
        const data = Array.from({ length: Math.min(perPage, 50) }, () =>
          generator.generate({ list_id: ENDPOINT_TRUSTED_APPS_LIST_ID })
        );

        // Change the 3rd entry (index 2) to be policy specific
        data[2].tags = [
          // IDs below are those generated by the `fleetGetEndpointPackagePolicyListHttpMock()` mock,
          // so if using in combination with that API mock, these should just "work"
          `${POLICY_REFERENCE_PREFIX}ddf6570b-9175-4a6d-b288-61a09771c647`,
          `${POLICY_REFERENCE_PREFIX}b8e616ae-44fc-4be7-846c-ce8fa5c082dd`,
        ];

        return {
          page: apiQueryParams.page ?? 1,
          per_page: perPage,
          total: 20,
          data,
        };
      },
    },
  ]);

export type TrustedAppPutHttpMocksInterface = ResponseProvidersInterface<{
  trustedAppUpdate: (options: HttpFetchOptionsWithPath) => ExceptionListItemSchema;
}>;
/**
 * HTTP mocks that support updating a single Trusted Apps
 */
export const trustedAppPutHttpMocks = httpHandlerMockFactory<TrustedAppPutHttpMocksInterface>([
  {
    id: 'trustedAppUpdate',
    path: EXCEPTION_LIST_ITEM_URL,
    method: 'put',
    handler: ({ body, path }): ExceptionListItemSchema => {
      const response: ExceptionListItemSchema = {
        ...(body as unknown as Required<UpdateExceptionListItemSchema>),
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        id: path.split('/').pop()!,
        comments: [],
        created_at: '2021-10-12T16:02:55.856Z',
        created_by: 'elastic',
        updated_at: '2021-10-13T16:02:55.856Z',
        updated_by: 'elastic',
        list_id: ENDPOINT_TRUSTED_APPS_LIST_ID,
        _version: 'abc',
        tie_breaker_id: '1111',
      };

      return response;
    },
  },
]);

export type TrustedAppsGetOneHttpMocksInterface = ResponseProvidersInterface<{
  trustedApp: (options: HttpFetchOptionsWithPath) => ExceptionListItemSchema;
}>;
/**
 * HTTP mock for retrieving list of Trusted Apps
 */
export const trustedAppsGetOneHttpMocks =
  httpHandlerMockFactory<TrustedAppsGetOneHttpMocksInterface>([
    {
      id: 'trustedApp',
      path: EXCEPTION_LIST_ITEM_URL,
      method: 'get',
      handler: ({ query }): ExceptionListItemSchema => {
        const apiQueryParams = query as ReadExceptionListItemSchema;
        const exceptionItem = new ExceptionsListItemGenerator('seed').generate();

        exceptionItem.item_id = apiQueryParams.item_id ?? exceptionItem.item_id;
        exceptionItem.namespace_type =
          apiQueryParams.namespace_type ?? exceptionItem.namespace_type;

        return exceptionItem;
      },
    },
  ]);
