/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useCallback, useMemo } from 'react';
import { i18n } from '@kbn/i18n';
import { FormattedMessage } from '@kbn/i18n-react';
import {
  EuiCallOut,
  EuiSpacer,
  EuiSwitch,
  EuiFlexGroup,
  EuiFlexItem,
  EuiIconTip,
} from '@elastic/eui';
import { OperatingSystem } from '@kbn/securitysolution-utils';
import { useDispatch } from 'react-redux';
import { cloneDeep } from 'lodash';
import { APP_UI_ID } from '../../../../../../../common/constants';
import { SecurityPageName } from '../../../../../../app/types';
import type {
  Immutable,
  AdditionalOnSwitchChangeParams,
  UIPolicyConfig,
} from '../../../../../../../common/endpoint/types';
import { PolicyOperatingSystem } from '../../../../../../../common/endpoint/types';
import type { MalwareProtectionOSes } from '../../../types';
import { ConfigForm } from '../../components/config_form';
import { LinkToApp } from '../../../../../../common/components/endpoint/link_to_app';
import { useLicense } from '../../../../../../common/hooks/use_license';
import { RadioButtons } from '../components/radio_buttons';
import { UserNotification } from '../components/user_notification';
import { ProtectionSwitch } from '../components/protection_switch';
import { policyConfig } from '../../../store/policy_details/selectors';
import { useShowEditableFormFields, usePolicyDetailsSelector } from '../../policy_hooks';
import type { AppAction } from '../../../../../../common/store/actions';

/** The Malware Protections form for policy details
 *  which will configure for all relevant OSes.
 */
export const MalwareProtections = React.memo(() => {
  const OSes: Immutable<MalwareProtectionOSes[]> = useMemo(
    () => [PolicyOperatingSystem.windows, PolicyOperatingSystem.mac, PolicyOperatingSystem.linux],
    []
  );
  const protection = 'malware';
  const protectionLabel = i18n.translate(
    'xpack.securitySolution.endpoint.policy.protections.malware',
    {
      defaultMessage: 'Malware protections',
    }
  );
  const blocklistLabel = i18n.translate(
    'xpack.securitySolution.endpoint.policy.protections.blocklist',
    {
      defaultMessage: 'Blocklist enabled',
    }
  );
  const showEditableFormFields = useShowEditableFormFields();
  const isPlatinumPlus = useLicense().isPlatinumPlus();
  const dispatch = useDispatch<(action: AppAction) => void>();
  const policyDetailsConfig = usePolicyDetailsSelector(policyConfig);

  const blocklistUpdate = ({
    value,
    policyConfigData,
    protectionOsList,
  }: AdditionalOnSwitchChangeParams): UIPolicyConfig => {
    const newPayload: UIPolicyConfig = cloneDeep(policyConfigData);
    for (const os of protectionOsList) {
      newPayload[os][protection].blocklist = value;
    }

    return newPayload;
  };

  const handleBlocklistSwitchChange = useCallback(
    (event) => {
      if (policyDetailsConfig) {
        const newPayload = blocklistUpdate({
          value: event.target.checked,
          policyConfigData: cloneDeep(policyDetailsConfig),
          protectionOsList: OSes,
        });
        dispatch({
          type: 'userChangedPolicyConfig',
          payload: { policyConfig: newPayload },
        });
      }
    },
    [dispatch, OSes, policyDetailsConfig]
  );

  return (
    <ConfigForm
      type={i18n.translate('xpack.securitySolution.endpoint.policy.details.malware', {
        defaultMessage: 'Malware',
      })}
      supportedOss={[OperatingSystem.WINDOWS, OperatingSystem.MAC, OperatingSystem.LINUX]}
      dataTestSubj="malwareProtectionsForm"
      rightCorner={
        <ProtectionSwitch
          protection={protection}
          protectionLabel={protectionLabel}
          osList={OSes}
          additionalOnSwitchChange={blocklistUpdate}
        />
      }
    >
      <RadioButtons protection={protection} osList={OSes} />
      <EuiSpacer size="m" />
      <EuiFlexGroup gutterSize="xs">
        <EuiFlexItem grow={false}>
          <EuiSwitch
            label={blocklistLabel}
            checked={policyDetailsConfig.windows[protection].blocklist}
            onChange={handleBlocklistSwitchChange}
            disabled={
              !showEditableFormFields || policyDetailsConfig.windows[protection].mode === 'off'
            }
          />
        </EuiFlexItem>
        <EuiFlexItem grow={false}>
          <EuiIconTip
            position="right"
            content={
              <>
                <FormattedMessage
                  id="xpack.securitySolution.endpoint.policyDetailsConfig.blocklistTooltip"
                  defaultMessage="Enables or disables the blocklist associated with this policy. The blocklist is a collection hashes, paths, or signers which extends the list of processes the endpoint considers malicious. See the blocklist tab for entry details."
                />
              </>
            }
          />
        </EuiFlexItem>
      </EuiFlexGroup>
      {isPlatinumPlus && <UserNotification protection={protection} osList={OSes} />}
      <EuiSpacer size="m" />
      <EuiCallOut iconType="iInCircle">
        <FormattedMessage
          id="xpack.securitySolution.endpoint.policy.details.detectionRulesMessage"
          defaultMessage="View {detectionRulesLink}. Prebuilt rules are tagged “Elastic” on the Detection Rules page."
          values={{
            detectionRulesLink: (
              <LinkToApp appId={APP_UI_ID} deepLinkId={SecurityPageName.rules}>
                <FormattedMessage
                  id="xpack.securitySolution.endpoint.policy.details.detectionRulesLink"
                  defaultMessage="related detection rules"
                />
              </LinkToApp>
            ),
          }}
        />
      </EuiCallOut>
    </ConfigForm>
  );
});

MalwareProtections.displayName = 'MalwareProtections';
