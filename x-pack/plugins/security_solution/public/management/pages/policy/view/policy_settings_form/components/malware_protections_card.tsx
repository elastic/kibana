/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useCallback, useMemo } from 'react';
import { i18n } from '@kbn/i18n';
import { FormattedMessage } from '@kbn/i18n-react';
import {
  EuiCallOut,
  EuiSpacer,
  EuiSwitch,
  EuiFlexGroup,
  EuiFlexItem,
  EuiIconTip,
} from '@elastic/eui';
import { OperatingSystem } from '@kbn/securitysolution-utils';
import { cloneDeep } from 'lodash';
import { NotifyUserOption } from './notify_user_option';
import { SettingCard } from './setting_card';
import type { PolicyFormComponentCommonProps } from '../types';
import { APP_UI_ID } from '../../../../../../../common';
import { SecurityPageName } from '../../../../../../app/types';
import type { Immutable } from '../../../../../../../common/endpoint/types';
import { PolicyOperatingSystem } from '../../../../../../../common/endpoint/types';
import type { MalwareProtectionOSes } from '../../../types';
import { LinkToApp } from '../../../../../../common/components/endpoint/link_to_app';
import type { ProtectionSwitchProps } from './protection_switch';
import { ProtectionSwitch } from './protection_switch';
import { DetectPreventProtectionLevel } from './detect_prevent_protection_lavel';
import { useTestIdGenerator } from '../../../../../hooks/use_test_id_generator';

export type MalwareProtectionsProps = PolicyFormComponentCommonProps;

/** The Malware Protections form for policy details
 *  which will configure for all relevant OSes.
 */
export const MalwareProtectionsCard = React.memo<MalwareProtectionsProps>(
  ({ policy, onChange, mode = 'edit', 'data-test-subj': dataTestSubj }) => {
    const getTestId = useTestIdGenerator(dataTestSubj);
    const OSes: Immutable<MalwareProtectionOSes[]> = useMemo(
      () => [PolicyOperatingSystem.windows, PolicyOperatingSystem.mac, PolicyOperatingSystem.linux],
      []
    );
    const protection = 'malware';
    const protectionLabel = i18n.translate(
      'xpack.securitySolution.endpoint.policy.protections.malware',
      {
        defaultMessage: 'Malware protections',
      }
    );
    const blocklistLabel = i18n.translate(
      'xpack.securitySolution.endpoint.policy.protections.blocklist',
      {
        defaultMessage: 'Blocklist enabled',
      }
    );
    const showEditableFormFields = mode === 'edit';
    const policyDetailsConfig = policy;

    // NOTE: it mutates `policyConfigData` passed on input
    const adjustBlocklistSettingsOnProtectionSwitch: ProtectionSwitchProps['additionalOnSwitchChange'] =
      useCallback(({ value, policyConfigData, protectionOsList }) => {
        for (const os of protectionOsList) {
          policyConfigData[os][protection].blocklist = value;
        }

        return policyConfigData;
      }, []);

    const handleBlocklistSwitchChange = useCallback(
      (event) => {
        const value = event.target.checked;
        const newPayload = cloneDeep(policy);

        adjustBlocklistSettingsOnProtectionSwitch({
          value,
          policyConfigData: newPayload,
          protectionOsList: OSes,
        });

        onChange({ isValid: true, updatedPolicy: newPayload });
      },
      [OSes, adjustBlocklistSettingsOnProtectionSwitch, onChange, policy]
    );

    return (
      <SettingCard
        type={i18n.translate('xpack.securitySolution.endpoint.policy.details.malware', {
          defaultMessage: 'Malware',
        })}
        supportedOss={[OperatingSystem.WINDOWS, OperatingSystem.MAC, OperatingSystem.LINUX]}
        dataTestSubj={getTestId('card')}
        rightCorner={
          <ProtectionSwitch
            protection={protection}
            protectionLabel={protectionLabel}
            osList={OSes}
            additionalOnSwitchChange={adjustBlocklistSettingsOnProtectionSwitch}
            policy={policy}
            onChange={onChange}
            mode={mode}
          />
        }
      >
        <DetectPreventProtectionLevel
          policy={policy}
          onChange={onChange}
          mode={mode}
          protection={protection}
          osList={OSes}
          data-test-subj={getTestId('protectionLevel')}
        />
        <EuiSpacer size="m" />

        <EuiFlexGroup gutterSize="xs">
          <EuiFlexItem grow={false}>
            <EuiSwitch
              label={blocklistLabel}
              checked={policyDetailsConfig.windows[protection].blocklist}
              onChange={handleBlocklistSwitchChange}
              disabled={
                !showEditableFormFields || policyDetailsConfig.windows[protection].mode === 'off'
              }
            />
          </EuiFlexItem>
          <EuiFlexItem grow={false}>
            <EuiIconTip
              position="right"
              content={
                <>
                  <FormattedMessage
                    id="xpack.securitySolution.endpoint.policyDetailsConfig.blocklistTooltip"
                    defaultMessage="Enables or disables the blocklist associated with this policy. The blocklist is a collection hashes, paths, or signers which extends the list of processes the endpoint considers malicious. See the blocklist tab for entry details."
                  />
                </>
              }
            />
          </EuiFlexItem>
        </EuiFlexGroup>

        <NotifyUserOption
          policy={policy}
          onChange={onChange}
          mode={mode}
          protection={protection}
          osList={OSes}
        />
        <EuiSpacer size="m" />

        <EuiCallOut iconType="iInCircle">
          <FormattedMessage
            id="xpack.securitySolution.endpoint.policy.details.detectionRulesMessage"
            defaultMessage="View {detectionRulesLink}. Prebuilt rules are tagged “Elastic” on the Detection Rules page."
            values={{
              detectionRulesLink: (
                <LinkToApp appId={APP_UI_ID} deepLinkId={SecurityPageName.rules}>
                  <FormattedMessage
                    id="xpack.securitySolution.endpoint.policy.details.detectionRulesLink"
                    defaultMessage="related detection rules"
                  />
                </LinkToApp>
              ),
            }}
          />
        </EuiCallOut>
      </SettingCard>
    );
  }
);

MalwareProtectionsCard.displayName = 'MalwareProtectionsCard';
