/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import {
  expectIsViewOnly,
  getPolicySettingsFormTestSubjects,
  matchExactTextContent,
} from '../../mocks';
import type { AppContextTestRender } from '../../../../../../../common/mock/endpoint';
import { createAppRootMockRenderer } from '../../../../../../../common/mock/endpoint';
import { FleetPackagePolicyGenerator } from '../../../../../../../../common/endpoint/data_generators/fleet_package_policy_generator';
import React from 'react';
import type { MalwareProtectionsProps } from './malware_protections_card';
import { MalwareProtectionsCard } from './malware_protections_card';
import { ProtectionModes } from '../../../../../../../../common/endpoint/types';
import { set } from 'lodash';

jest.mock('../../../../../../../common/hooks/use_license');

describe('Policy Malware Protections Card', () => {
  const testSubj = getPolicySettingsFormTestSubjects('test').malware;

  let formProps: MalwareProtectionsProps;
  let render: () => ReturnType<AppContextTestRender['render']>;
  let renderResult: ReturnType<typeof render>;

  beforeEach(() => {
    const mockedContext = createAppRootMockRenderer();

    formProps = {
      policy: new FleetPackagePolicyGenerator('seed').generateEndpointPackagePolicy().inputs[0]
        .config.policy.value,
      onChange: jest.fn(),
      mode: 'edit',
      'data-test-subj': testSubj.card,
    };

    render = () => (renderResult = mockedContext.render(<MalwareProtectionsCard {...formProps} />));
  });

  it('should render the card with expected components', () => {
    const { getByTestId } = render();

    expect(getByTestId(testSubj.enableDisableSwitch));
    expect(getByTestId(testSubj.protectionPreventRadio));
    expect(getByTestId(testSubj.notifyUserCheckbox));
    expect(getByTestId(testSubj.rulesCallout));
  });

  it('should show supported OS values', () => {
    render();

    expect(renderResult.getByTestId(testSubj.osValuesContainer)).toHaveTextContent(
      'Windows, Mac, Linux'
    );
  });

  describe('and displayed in View mode', () => {
    beforeEach(() => {
      formProps.mode = 'view';
    });

    it('should display correctly when overall card is enabled', () => {
      const { getByTestId } = render();

      expectIsViewOnly(getByTestId(testSubj.card));

      expect(getByTestId(testSubj.card)).toHaveTextContent(
        matchExactTextContent(
          'Type' +
            'Malware' +
            'Operating system' +
            'Windows, Mac, Linux ' +
            'Malware protections enabled' +
            'Protection level' +
            'Prevent' +
            'Blocklist enabled' +
            'Info' +
            'User notification' +
            'Agent version 7.11+' +
            'Notify user' +
            'Notification message' +
            '—' +
            'View related detection rules. Prebuilt rules are tagged “Elastic” on the Detection Rules page.'
        )
      );
    });

    it('should display correctly when overall card is disabled', () => {
      set(formProps.policy, 'windows.malware.mode', ProtectionModes.off);
      const { getByTestId } = render();

      expectIsViewOnly(getByTestId(testSubj.card));

      expect(getByTestId(testSubj.card)).toHaveTextContent(
        matchExactTextContent(
          'Type' +
            'Malware' +
            'Operating system' +
            'Windows, Mac, Linux ' +
            'Malware protections disabled' +
            'Protection level' +
            'Prevent' +
            'Blocklist enabled' +
            'Info' +
            'User notification' +
            'Agent version 7.11+' +
            'Notify user' +
            'Notification message' +
            '—' +
            'View related detection rules. Prebuilt rules are tagged “Elastic” on the Detection Rules page.'
        )
      );
    });

    it('should display user notification disabled', () => {
      set(formProps.policy, 'windows.popup.malware.enabled', false);

      const { getByTestId } = render();

      expectIsViewOnly(getByTestId(testSubj.card));

      expect(getByTestId(testSubj.card)).toHaveTextContent(
        matchExactTextContent(
          'Type' +
            'Malware' +
            'Operating system' +
            'Windows, Mac, Linux ' +
            'Malware protections enabled' +
            'Protection level' +
            'Prevent' +
            'Blocklist enabled' +
            'Info' +
            'User notification' +
            'Agent version 7.11+' +
            "Don't notify user" +
            'View related detection rules. Prebuilt rules are tagged “Elastic” on the Detection Rules page.'
        )
      );
    });
  });
});
