/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { memo, useCallback } from 'react';
import { i18n } from '@kbn/i18n';
import { FormattedMessage } from '@kbn/i18n-react';
import { EuiSpacer, EuiSwitch, EuiFlexGroup, EuiFlexItem, EuiIconTip } from '@elastic/eui';
import { OperatingSystem } from '@kbn/securitysolution-utils';
import { cloneDeep } from 'lodash';
import { useGetProtectionsUnavailableComponent } from '../../hooks/use_get_protections_unavailable_component';
import { RelatedDetectionRulesCallout } from '../related_detection_rules_callout';
import { NotifyUserOption } from '../notify_user_option';
import { SettingCard } from '../setting_card';
import type { PolicyFormComponentCommonProps } from '../../types';
import type { Immutable } from '../../../../../../../../common/endpoint/types';
import {
  PolicyOperatingSystem,
  ProtectionModes,
} from '../../../../../../../../common/endpoint/types';
import type { MalwareProtectionOSes } from '../../../../types';
import type { ProtectionSettingCardSwitchProps } from '../protection_setting_card_switch';
import { ProtectionSettingCardSwitch } from '../protection_setting_card_switch';
import { DetectPreventProtectionLevel } from '../detect_prevent_protection_level';
import { useTestIdGenerator } from '../../../../../../hooks/use_test_id_generator';

const BLOCKLIST_ENABLED_LABEL = i18n.translate(
  'xpack.securitySolution.endpoint.policy.protections.blocklistEnabled',
  {
    defaultMessage: 'Blocklist enabled',
  }
);

const BLOCKLIST_DISABLED_LABEL = i18n.translate(
  'xpack.securitySolution.endpoint.policy.protections.blocklistDisabled',
  {
    defaultMessage: 'Blocklist disabled',
  }
);

// NOTE: it mutates `policyConfigData` passed on input
const adjustBlocklistSettingsOnProtectionSwitch: ProtectionSettingCardSwitchProps['additionalOnSwitchChange'] =
  ({ value, policyConfigData, protectionOsList }) => {
    for (const os of protectionOsList) {
      policyConfigData[os].malware.blocklist = value;
    }

    return policyConfigData;
  };

const MALWARE_OS_VALUES: Immutable<MalwareProtectionOSes[]> = [
  PolicyOperatingSystem.windows,
  PolicyOperatingSystem.mac,
  PolicyOperatingSystem.linux,
];

export type MalwareProtectionsProps = PolicyFormComponentCommonProps;

/**
 * The Malware Protections form for policy details
 * which will configure for all relevant OSes.
 */
export const MalwareProtectionsCard = React.memo<MalwareProtectionsProps>(
  ({ policy, onChange, mode = 'edit', 'data-test-subj': dataTestSubj }) => {
    const getTestId = useTestIdGenerator(dataTestSubj);
    const isProtectionsAllowed = !useGetProtectionsUnavailableComponent();
    const protection = 'malware';
    const selected = (policy && policy.windows[protection].mode) !== ProtectionModes.off;

    const protectionLabel = i18n.translate(
      'xpack.securitySolution.endpoint.policy.protections.malware',
      {
        defaultMessage: 'Malware protections',
      }
    );

    if (!isProtectionsAllowed) {
      return null;
    }

    return (
      <SettingCard
        type={i18n.translate('xpack.securitySolution.endpoint.policy.details.malware', {
          defaultMessage: 'Malware',
        })}
        supportedOss={[OperatingSystem.WINDOWS, OperatingSystem.MAC, OperatingSystem.LINUX]}
        dataTestSubj={getTestId()}
        selected={selected}
        mode={mode}
        rightCorner={
          <ProtectionSettingCardSwitch
            selected={selected}
            protection={protection}
            protectionLabel={protectionLabel}
            osList={MALWARE_OS_VALUES}
            additionalOnSwitchChange={adjustBlocklistSettingsOnProtectionSwitch}
            policy={policy}
            onChange={onChange}
            mode={mode}
            data-test-subj={getTestId('enableDisableSwitch')}
          />
        }
      >
        <DetectPreventProtectionLevel
          policy={policy}
          onChange={onChange}
          mode={mode}
          protection={protection}
          osList={MALWARE_OS_VALUES}
          data-test-subj={getTestId('protectionLevel')}
        />
        <EuiSpacer size="m" />

        <EnableDisableBlocklist
          policy={policy}
          onChange={onChange}
          mode={mode}
          data-test-subj={getTestId('blocklist')}
        />

        <NotifyUserOption
          policy={policy}
          onChange={onChange}
          mode={mode}
          protection={protection}
          osList={MALWARE_OS_VALUES}
          data-test-subj={getTestId('notifyUser')}
        />
        <EuiSpacer size="m" />

        <RelatedDetectionRulesCallout data-test-subj={getTestId('rulesCallout')} />
      </SettingCard>
    );
  }
);

MalwareProtectionsCard.displayName = 'MalwareProtectionsCard';

type EnableDisableBlocklistProps = PolicyFormComponentCommonProps;

const EnableDisableBlocklist = memo<EnableDisableBlocklistProps>(
  ({ policy, onChange, mode, 'data-test-subj': dataTestSubj }) => {
    const getTestId = useTestIdGenerator(dataTestSubj);
    const checked = policy.windows.malware.blocklist;
    const isDisabled = policy.windows.malware.mode === 'off';
    const isEditMode = mode === 'edit';
    const label = checked ? BLOCKLIST_ENABLED_LABEL : BLOCKLIST_DISABLED_LABEL;

    const handleBlocklistSwitchChange = useCallback(
      (event) => {
        const value = event.target.checked;
        const newPayload = cloneDeep(policy);

        adjustBlocklistSettingsOnProtectionSwitch({
          value,
          policyConfigData: newPayload,
          protectionOsList: MALWARE_OS_VALUES,
        });

        onChange({ isValid: true, updatedPolicy: newPayload });
      },
      [onChange, policy]
    );

    return (
      <EuiFlexGroup gutterSize="xs" data-test-subj={getTestId()}>
        <EuiFlexItem grow={false}>
          {isEditMode ? (
            <EuiSwitch
              label={label}
              checked={checked}
              onChange={handleBlocklistSwitchChange}
              disabled={isDisabled}
              data-test-subj={getTestId('enableDisableSwitch')}
            />
          ) : (
            <>{label}</>
          )}
        </EuiFlexItem>
        <EuiFlexItem grow={false}>
          <EuiIconTip
            position="right"
            content={
              <>
                <FormattedMessage
                  id="xpack.securitySolution.endpoint.policyDetailsConfig.blocklistTooltip"
                  defaultMessage="Enables or disables the blocklist associated with this policy. The blocklist is a collection hashes, paths, or signers which extends the list of processes the endpoint considers malicious. See the blocklist tab for entry details."
                />
              </>
            }
          />
        </EuiFlexItem>
      </EuiFlexGroup>
    );
  }
);
EnableDisableBlocklist.displayName = 'EnableDisableBlocklist';
