/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { memo, useCallback } from 'react';
import { i18n } from '@kbn/i18n';
import { EuiSpacer, EuiSwitch, EuiFlexGroup, EuiFlexItem, EuiIconTip } from '@elastic/eui';
import { OperatingSystem } from '@kbn/securitysolution-utils';
import { cloneDeep } from 'lodash';
import { useIsExperimentalFeatureEnabled } from '../../../../../../../common/hooks/use_experimental_features';
import { useGetProtectionsUnavailableComponent } from '../../hooks/use_get_protections_unavailable_component';
import { NotifyUserOption } from '../notify_user_option';
import { SettingCard } from '../setting_card';
import type { PolicyFormComponentCommonProps } from '../../types';
import type { Immutable } from '../../../../../../../../common/endpoint/types';
import {
  PolicyOperatingSystem,
  ProtectionModes,
} from '../../../../../../../../common/endpoint/types';
import type { MalwareProtectionOSes } from '../../../../types';
import type { ProtectionSettingCardSwitchProps } from '../protection_setting_card_switch';
import { ProtectionSettingCardSwitch } from '../protection_setting_card_switch';
import { DetectPreventProtectionLevel } from '../detect_prevent_protection_level';
import { useTestIdGenerator } from '../../../../../../hooks/use_test_id_generator';

const BLOCKLIST_LABELS = {
  label: i18n.translate('xpack.securitySolution.endpoint.policy.protections.blocklistLabel', {
    defaultMessage: 'Blocklist',
  }),
  hint: i18n.translate('xpack.securitySolution.endpoint.policyDetailsConfig.blocklistTooltip', {
    defaultMessage:
      'Enables or disables the blocklist associated with this policy. The blocklist is a collection hashes, paths, or signers which extends the list of processes the endpoint considers malicious. See the blocklist tab for entry details.',
  }),
};

const ON_WRITE_SCAN_LABELS = {
  label: i18n.translate('xpack.securitySolution.endpoint.policy.protections.onWriteScanLabel', {
    defaultMessage: 'Scan files upon modification',
  }),
  hint: i18n.translate('xpack.securitySolution.endpoint.policyDetailsConfig.onWriteScanTooltip', {
    defaultMessage:
      "Enables or disables scanning files when they're modified. Disabling this feature improves Endpoint performance.",
  }),
  versionCompatibilityHint: i18n.translate(
    'xpack.securitySolution.endpoint.policy.protections.onWriteVersionCompatibilityHint',
    {
      defaultMessage: 'Always enabled on Agent versions 8.13 and older.',
    }
  ),
};

type AdjustSubfeatureOnProtectionSwitch = NonNullable<
  ProtectionSettingCardSwitchProps['additionalOnSwitchChange']
>;

// NOTE: it mutates `policyConfigData` passed on input
const adjustBlocklistSettingsOnProtectionSwitch: AdjustSubfeatureOnProtectionSwitch = ({
  value,
  policyConfigData,
  protectionOsList,
}) => {
  for (const os of protectionOsList) {
    policyConfigData[os].malware.blocklist = value;
  }

  return policyConfigData;
};

const adjustOnWriteSettingsOnProtectionSwitch: AdjustSubfeatureOnProtectionSwitch = ({
  value,
  policyConfigData,
  protectionOsList,
}) => {
  for (const os of protectionOsList) {
    policyConfigData[os].malware.on_write_scan = value;
  }

  return policyConfigData;
};

const adjustAllSubfeaturesOnProtectionSwitch: AdjustSubfeatureOnProtectionSwitch = ({
  policyConfigData,
  ...rest
}) => {
  const modifiedPolicy = adjustBlocklistSettingsOnProtectionSwitch({
    policyConfigData,
    ...rest,
  });
  return adjustOnWriteSettingsOnProtectionSwitch({
    policyConfigData: modifiedPolicy,
    ...rest,
  });
};

const MALWARE_OS_VALUES: Immutable<MalwareProtectionOSes[]> = [
  PolicyOperatingSystem.windows,
  PolicyOperatingSystem.mac,
  PolicyOperatingSystem.linux,
];

export type MalwareProtectionsProps = PolicyFormComponentCommonProps;

/**
 * The Malware Protections form for policy details
 * which will configure for all relevant OSes.
 */
export const MalwareProtectionsCard = React.memo<MalwareProtectionsProps>(
  ({ policy, onChange, mode = 'edit', 'data-test-subj': dataTestSubj }) => {
    const isMalwareOnwriteScanOptionAvailable = useIsExperimentalFeatureEnabled(
      'malwareOnWriteScanOptionAvailable'
    );
    const getTestId = useTestIdGenerator(dataTestSubj);
    const isProtectionsAllowed = !useGetProtectionsUnavailableComponent();
    const protection = 'malware';
    const selected = (policy && policy.windows[protection].mode) !== ProtectionModes.off;

    const protectionLabel = i18n.translate(
      'xpack.securitySolution.endpoint.policy.protections.malware',
      {
        defaultMessage: 'Malware protections',
      }
    );

    if (!isProtectionsAllowed) {
      return null;
    }

    return (
      <SettingCard
        type={i18n.translate('xpack.securitySolution.endpoint.policy.details.malware', {
          defaultMessage: 'Malware',
        })}
        supportedOss={[OperatingSystem.WINDOWS, OperatingSystem.MAC, OperatingSystem.LINUX]}
        dataTestSubj={getTestId()}
        selected={selected}
        mode={mode}
        rightCorner={
          <ProtectionSettingCardSwitch
            selected={selected}
            protection={protection}
            protectionLabel={protectionLabel}
            osList={MALWARE_OS_VALUES}
            additionalOnSwitchChange={adjustAllSubfeaturesOnProtectionSwitch}
            policy={policy}
            onChange={onChange}
            mode={mode}
            data-test-subj={getTestId('enableDisableSwitch')}
          />
        }
      >
        <DetectPreventProtectionLevel
          policy={policy}
          onChange={onChange}
          mode={mode}
          protection={protection}
          osList={MALWARE_OS_VALUES}
          data-test-subj={getTestId('protectionLevel')}
        />
        <EuiSpacer size="m" />

        <SubfeatureSwitch
          policy={policy}
          onChange={onChange}
          mode={mode}
          data-test-subj={getTestId('blocklist')}
          labels={BLOCKLIST_LABELS}
          checked={policy.windows.malware.blocklist}
          adjustSubfeatureOnProtectionSwitch={adjustBlocklistSettingsOnProtectionSwitch}
        />

        {isMalwareOnwriteScanOptionAvailable && (
          <>
            <EuiSpacer size="m" />
            <SubfeatureSwitch
              policy={policy}
              onChange={onChange}
              mode={mode}
              data-test-subj={getTestId('onWriteScan')}
              labels={ON_WRITE_SCAN_LABELS}
              checked={policy.windows.malware.on_write_scan ?? true}
              adjustSubfeatureOnProtectionSwitch={adjustOnWriteSettingsOnProtectionSwitch}
            />
          </>
        )}

        <NotifyUserOption
          policy={policy}
          onChange={onChange}
          mode={mode}
          protection={protection}
          osList={MALWARE_OS_VALUES}
          data-test-subj={getTestId('notifyUser')}
        />
        <EuiSpacer size="m" />
      </SettingCard>
    );
  }
);

MalwareProtectionsCard.displayName = 'MalwareProtectionsCard';

type SubfeatureSwitchProps = PolicyFormComponentCommonProps & {
  labels: { label: string; versionCompatibilityHint?: string; hint: string };
  adjustSubfeatureOnProtectionSwitch: AdjustSubfeatureOnProtectionSwitch;
  checked: boolean;
};

const SubfeatureSwitch = memo<SubfeatureSwitchProps>(
  ({
    policy,
    onChange,
    mode,
    'data-test-subj': dataTestSubj,
    labels,
    adjustSubfeatureOnProtectionSwitch,
    checked,
  }) => {
    const getTestId = useTestIdGenerator(dataTestSubj);

    const isEditMode = mode === 'edit';
    const isDisabled = policy.windows.malware.mode === 'off' || !isEditMode;

    const handleBlocklistSwitchChange = useCallback(
      (event) => {
        const value = event.target.checked;
        const newPayload = cloneDeep(policy);

        adjustSubfeatureOnProtectionSwitch({
          value,
          policyConfigData: newPayload,
          protectionOsList: MALWARE_OS_VALUES,
        });

        onChange({ isValid: true, updatedPolicy: newPayload });
      },
      [adjustSubfeatureOnProtectionSwitch, onChange, policy]
    );

    return (
      <EuiFlexGroup gutterSize="xs" data-test-subj={getTestId()}>
        <EuiFlexItem grow={false}>
          <EuiSwitch
            label={labels.label}
            checked={checked}
            onChange={handleBlocklistSwitchChange}
            disabled={isDisabled}
            data-test-subj={getTestId('enableDisableSwitch')}
          />
        </EuiFlexItem>
        <EuiFlexItem grow={false}>
          <EuiIconTip
            position="right"
            content={
              <>
                <p>{labels.hint}</p>
                {labels.versionCompatibilityHint && <EuiSpacer />}
                {labels.versionCompatibilityHint && <i>{labels.versionCompatibilityHint}</i>}
              </>
            }
          />
        </EuiFlexItem>
      </EuiFlexGroup>
    );
  }
);
SubfeatureSwitch.displayName = 'SubfeatureSwitch';
