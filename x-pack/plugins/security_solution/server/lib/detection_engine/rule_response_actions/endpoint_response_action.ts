/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { each } from 'lodash';
import type { EndpointAppContext } from '../../../endpoint/types';
import { createResponseActionHandler } from '../../../endpoint/routes/actions/create_response_action_handler';
import type { RuleResponseEndpointAction } from '../../../../common/detection_engine/rule_response_actions/schemas';
import type { Alerts } from './types';

export const endpointResponseAction = (
  responseAction: RuleResponseEndpointAction,
  endpointAppContext: EndpointAppContext,
  { alerts }: { alerts: Alerts }
) => {
  each(alerts, (alert) => {
    return createResponseActionHandler(
      endpointAppContext,
      {
        endpoint_ids: alert.agent?.id ? [alert.agent.id] : [],
        ...(responseAction.params.command === 'kill-process'
          ? { parameters: { pid: alert.process?.pid } }
          : {}),
        alert_ids: [(alert as unknown as { _id: string })._id],
        comment: `${responseAction.params.comment} generated by alert: ${
          (alert as unknown as { _id: string })._id
        }`,
      },
      {
        command: responseAction.params.command,
        metadata: { currentUser: undefined }, // decide if we want to pass the user
        // metadata: { currentUser: { username: 'Alert' } }, // decide if we want to pass the user
      }
    );
  });
};
