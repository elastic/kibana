/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { transformError } from '@kbn/securitysolution-es-utils';
import moment from 'moment';
import type { GetRuleExecutionResultsResponse } from '../../../../../common/generated_schema/get_rule_execution_results/get_rule_execution_results_response_schema.gen';
import {
  GetRuleExecutionResultsRequestParams,
  GetRuleExecutionResultsRequestQuery,
  GetRuleExecutionResultsRequestBody,
} from '../../../../../common/generated_schema/get_rule_execution_results/get_rule_execution_results_request_schema.gen';
import type { SecuritySolutionPluginRouter } from '../../../../types';
import { buildSiemResponse } from '../../routes/utils';
import { getRuleExecutionResultsImplementation } from './get_rule_execution_results_implementation';
import { buildRouteValidationWithZod } from '../../../../utils/build_validation/route_validation';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator `yarn openapi:generate`.
 */

/**
 * Returns execution results of a given rule (aggregated by execution UUID) from Event Log.
 */
export const getRuleExecutionResultsRoute = (router: SecuritySolutionPluginRouter) => {
  router.get(
    {
      path: '/internal/detection_engine/rules/{ruleId}/execution/results',
      validate: {
        params: buildRouteValidationWithZod(GetRuleExecutionResultsRequestParams),
        query: buildRouteValidationWithZod(GetRuleExecutionResultsRequestQuery),
        body: buildRouteValidationWithZod(GetRuleExecutionResultsRequestBody),
      },
      options: {
        tags: ['access:securitySolution'],
        timeout: {
          // FUNFACT: If we do not add a very long timeout what will happen
          // is that Chrome which receive a 408 error and then do a retry.
          // This retry can cause lots of connections to happen. Using a very
          // long timeout will ensure that Chrome does not do retries and saturate the connections.
          idleSocket: moment.duration('1', 'hour').asMilliseconds(),
        },
      },
    },
    async (context, request, response) => {
      try {
        const body: GetRuleExecutionResultsResponse = await getRuleExecutionResultsImplementation(
          context,
          request,
          response
        );

        return response.ok({ body });
      } catch (err) {
        const siemResponse = buildSiemResponse(response);
        const error = transformError(err);
        return siemResponse.error({
          body: error.message,
          statusCode: error.statusCode,
        });
      }
    }
  );
};
