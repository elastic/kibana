/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import { sortBy } from 'lodash/fp';

import { formatIndexFields } from './elasticsearch_adapter';
import { mockAuditbeatIndexField, mockFilebeatIndexField, mockPacketbeatIndexField } from './mock';

describe('Index Fields', () => {
  describe('formatIndexFields', () => {
    test('Test Basic functionality', async () => {
      expect(
        sortBy(
          'name',
          formatIndexFields(
            [mockAuditbeatIndexField, mockFilebeatIndexField, mockPacketbeatIndexField],
            ['auditbeat', 'filebeat', 'packetbeat']
          )
        )
      ).toEqual(
        sortBy('name', [
          {
            description:
              'Date/time when the event originated.\n\nThis is the date/time extracted from the event, typically representing when\nthe event was generated by the source.\n\nIf the event source has no original timestamp, this value is typically populated\nby the first time the event was received by the pipeline.\n\nRequired field for all events.',
            example: '2016-05-23T08:05:34.853Z',
            name: '@timestamp',
            type: 'date',
            searchable: true,
            aggregatable: true,
            category: 'base',
            indexes: ['auditbeat', 'filebeat', 'packetbeat'],
          },
          {
            description: 'Each document has an _id that uniquely identifies it',
            example: 'Y-6TfmcB0WOhS6qyMv3s',
            footnote: '',
            group: 1,
            level: 'core',
            name: '_id',
            required: true,
            type: 'string',
            searchable: true,
            aggregatable: false,
            readFromDocValues: true,
            category: '_id',
            indexes: ['auditbeat', 'filebeat', 'packetbeat'],
          },
          {
            description:
              'An index is like a ‘database’ in a relational database. It has a mapping which defines multiple types. An index is a logical namespace which maps to one or more primary shards and can have zero or more replica shards.',
            example: 'auditbeat-8.0.0-2019.02.19-000001',
            footnote: '',
            group: 1,
            level: 'core',
            name: '_index',
            required: true,
            type: 'string',
            searchable: true,
            aggregatable: true,
            readFromDocValues: true,
            category: '_index',
            indexes: ['auditbeat', 'filebeat', 'packetbeat'],
          },
          {
            description:
              'Ephemeral identifier of this agent (if one exists).\n\nThis id normally changes across restarts, but `agent.id` does not.',
            example: '8a4f500f',
            name: 'agent.ephemeral_id',
            type: 'string',
            searchable: true,
            aggregatable: true,
            category: 'agent',
            indexes: ['auditbeat'],
          },
          {
            name: 'agent.hostname',
            searchable: true,
            type: 'string',
            aggregatable: true,
            category: 'agent',
            indexes: ['filebeat'],
          },
          {
            description:
              'Unique identifier of this agent (if one exists).\n\nExample: For Beats this would be beat.id.',
            example: '8a4f500d',
            name: 'agent.id',
            type: 'string',
            searchable: true,
            aggregatable: true,
            category: 'agent',
            indexes: ['packetbeat'],
          },
          {
            description:
              'Custom name of the agent.\n\nThis is a name that can be given to an agent. This can be helpful if for example\ntwo Filebeat instances are running on the same host but a human readable separation\nis needed on which Filebeat instance data is coming from.\n\nIf no name is given, the name is often left empty.',
            example: 'foo',
            name: 'agent.name',
            type: 'string',
            searchable: true,
            aggregatable: true,
            category: 'agent',
            indexes: ['auditbeat', 'filebeat'],
          },
          {
            description:
              'Type of the agent.\n\nThe agent type stays always the same and should be given by the agent used.\nIn case of Filebeat the agent would always be Filebeat also if two Filebeat\ninstances are run on the same machine.',
            example: 'filebeat',
            name: 'agent.type',
            type: 'string',
            searchable: true,
            aggregatable: true,
            category: 'agent',
            indexes: ['auditbeat', 'packetbeat'],
          },
          {
            description: 'Version of the agent.',
            example: '6.0.0-rc2',
            name: 'agent.version',
            type: 'string',
            searchable: true,
            aggregatable: true,
            category: 'agent',
            indexes: ['auditbeat', 'filebeat'],
          },
        ])
      );
    });
  });
});
