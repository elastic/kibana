/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

/**
 * An instance of the unmodified schema exported from winlogbeat-8.0.0-SNAPSHOT-windows-x86_64.zip
 *
 */

import { Schema } from '../type';

export const winlogbeatSchema: Schema = [
  {
    key: 'ecs',
    title: 'ECS',
    description: 'ECS Fields.',
    fields: [
      {
        name: '@timestamp',
        level: 'core',
        required: true,
        type: 'date',
        description:
          'Date/time when the event originated.\n\nThis is the date/time extracted from the event, typically representing when\nthe event was generated by the source.\n\nIf the event source has no original timestamp, this value is typically populated\nby the first time the event was received by the pipeline.\n\nRequired field for all events.',
        example: '2016-05-23T08:05:34.853Z',
      },
      {
        name: 'labels',
        level: 'core',
        type: 'object',
        object_type: 'keyword',
        description:
          'Custom key/value pairs.\n\nCan be used to add meta information to events. Should not contain nested objects.\nAll values are stored as keyword.\n\nExample: `docker` and `k8s` labels.',
        example: {
          application: 'foo-bar',
          env: 'production',
        },
      },
      {
        name: 'message',
        level: 'core',
        type: 'text',
        description:
          'For log events the message field contains the log message, optimized\nfor viewing in a log viewer.\n\nFor structured logs without an original message field, other fields can be concatenated\nto form a human-readable summary of the event.\n\nIf multiple messages exist, they can be combined into one message.',
        example: 'Hello World',
      },
      {
        name: 'tags',
        level: 'core',
        type: 'keyword',
        description: 'List of keywords used to tag each event.',
        example: '["production", "env2"]',
      },
      {
        name: 'agent',
        title: 'Agent',
        group: 2,
        description:
          'The agent fields contain the data about the software entity, if\nany, that collects, detects, or observes events on a host, or takes measurements\non a host.\n\nExamples include Beats. Agents may also run on observers. ECS agent.* fields\nshall be populated with details of the agent running on the host or observer\nwhere the event happened or the measurement was taken.',
        footnote:
          'Examples: In the case of Beats for logs, the agent.name is filebeat.\nFor APM, it is the agent running in the app/service. The agent information does\nnot change if data is sent through queuing systems like Kafka, Redis, or processing\nsystems such as Logstash or APM Server.',
        type: 'group',
        fields: [
          {
            name: 'ephemeral_id',
            level: 'extended',
            type: 'keyword',
            description:
              'Ephemeral identifier of this agent (if one exists).\n\nThis id normally changes across restarts, but `agent.id` does not.',
            example: '8a4f500f',
          },
          {
            name: 'id',
            level: 'core',
            type: 'keyword',
            description:
              'Unique identifier of this agent (if one exists).\n\nExample: For Beats this would be beat.id.',
            example: '8a4f500d',
          },
          {
            name: 'name',
            level: 'core',
            type: 'keyword',
            description:
              'Custom name of the agent.\n\nThis is a name that can be given to an agent. This can be helpful if for example\ntwo Filebeat instances are running on the same host but a human readable separation\nis needed on which Filebeat instance data is coming from.\n\nIf no name is given, the name is often left empty.',
            example: 'foo',
          },
          {
            name: 'type',
            level: 'core',
            type: 'keyword',
            description:
              'Type of the agent.\n\nThe agent type stays always the same and should be given by the agent used.\nIn case of Filebeat the agent would always be Filebeat also if two Filebeat\ninstances are run on the same machine.',
            example: 'filebeat',
          },
          {
            name: 'version',
            level: 'core',
            type: 'keyword',
            description: 'Version of the agent.',
            example: '6.0.0-rc2',
          },
        ],
      },
      {
        name: 'client',
        title: 'Client',
        group: 2,
        description:
          'A client is defined as the initiator of a network connection for\nevents regarding sessions, connections, or bidirectional flow records.\n\nFor TCP events, the client is the initiator of the TCP connection that sends\nthe SYN packet(s). For other protocols, the client is generally the initiator\nor requestor in the network transaction. Some systems use the term "originator"\nto refer the client in TCP connections. The client fields describe details about\nthe system acting as the client in the network event. Client fields are usually\npopulated in conjunction with server fields. Client fields are generally not\npopulated for packet-level events.\n\nClient / server representations can add semantic context to an exchange, which\nis helpful to visualize the data in certain situations. If your context falls\nin that category, you should still ensure that source and destination are filled\nappropriately.',
        type: 'group',
        fields: [
          {
            name: 'address',
            level: 'extended',
            type: 'keyword',
            description:
              'Some event client addresses are defined ambiguously. The event\nwill sometimes list an IP, a domain or a unix socket.  You should always store\nthe raw address in the `.address` field.\n\nThen it should be duplicated to `.ip` or `.domain`, depending on which one\nit is.',
          },
          {
            name: 'bytes',
            level: 'core',
            type: 'long',
            format: 'bytes',
            description: 'Bytes sent from the client to the server.',
            example: 184,
          },
          {
            name: 'domain',
            level: 'core',
            type: 'keyword',
            description: 'Client domain.',
          },
          {
            name: 'geo.city_name',
            level: 'core',
            type: 'keyword',
            description: 'City name.',
            example: 'Montreal',
          },
          {
            name: 'geo.continent_name',
            level: 'core',
            type: 'keyword',
            description: 'Name of the continent.',
            example: 'North America',
          },
          {
            name: 'geo.country_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Country ISO code.',
            example: 'CA',
          },
          {
            name: 'geo.country_name',
            level: 'core',
            type: 'keyword',
            description: 'Country name.',
            example: 'Canada',
          },
          {
            name: 'geo.location',
            level: 'core',
            type: 'geo_point',
            description: 'Longitude and latitude.',
            example: '{ "lon": -73.614830, "lat": 45.505918 }',
          },
          {
            name: 'geo.name',
            level: 'extended',
            type: 'keyword',
            description:
              'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
            example: 'boston-dc',
          },
          {
            name: 'geo.region_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Region ISO code.',
            example: 'CA-QC',
          },
          {
            name: 'geo.region_name',
            level: 'core',
            type: 'keyword',
            description: 'Region name.',
            example: 'Quebec',
          },
          {
            name: 'ip',
            level: 'core',
            type: 'ip',
            description:
              'IP address of the client.\n\nCan be one or multiple IPv4 or IPv6 addresses.',
          },
          {
            name: 'mac',
            level: 'core',
            type: 'keyword',
            description: 'MAC address of the client.',
          },
          {
            name: 'packets',
            level: 'core',
            type: 'long',
            description: 'Packets sent from the client to the server.',
            example: 12,
          },
          {
            name: 'port',
            level: 'core',
            type: 'long',
            format: 'string',
            description: 'Port of the client.',
          },
          {
            name: 'user.email',
            level: 'extended',
            type: 'keyword',
            description: 'User email address.',
          },
          {
            name: 'user.full_name',
            level: 'extended',
            type: 'keyword',
            description: "User's full name, if available.",
            example: 'Albert Einstein',
          },
          {
            name: 'user.group.id',
            level: 'extended',
            type: 'keyword',
            description: 'Unique identifier for the group on the system/platform.',
          },
          {
            name: 'user.group.name',
            level: 'extended',
            type: 'keyword',
            description: 'Name of the group.',
          },
          {
            name: 'user.hash',
            level: 'extended',
            type: 'keyword',
            description:
              'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
          },
          {
            name: 'user.id',
            level: 'core',
            type: 'keyword',
            description: 'One or multiple unique identifiers of the user.',
          },
          {
            name: 'user.name',
            level: 'core',
            type: 'keyword',
            description: 'Short name or login of the user.',
            example: 'albert',
          },
        ],
      },
      {
        name: 'cloud',
        title: 'Cloud',
        group: 2,
        description: 'Fields related to the cloud or infrastructure the events are coming\nfrom.',
        footnote:
          'Examples: If Metricbeat is running on an EC2 host and fetches data\nfrom its host, the cloud info contains the data about this machine. If Metricbeat\nruns on a remote machine outside the cloud and fetches data from a service running\nin the cloud, the field contains cloud data from the machine the service is\nrunning on.',
        type: 'group',
        fields: [
          {
            name: 'account.id',
            level: 'extended',
            type: 'keyword',
            description:
              'The cloud account or organization id used to identify different\nentities in a multi-tenant environment.\n\nExamples: AWS account id, Google Cloud ORG Id, or other unique identifier.',
            example: 666777888999,
          },
          {
            name: 'availability_zone',
            level: 'extended',
            type: 'keyword',
            description: 'Availability zone in which this host is running.',
            example: 'us-east-1c',
          },
          {
            name: 'instance.id',
            level: 'extended',
            type: 'keyword',
            description: 'Instance ID of the host machine.',
            example: 'i-1234567890abcdef0',
          },
          {
            name: 'instance.name',
            level: 'extended',
            type: 'keyword',
            description: 'Instance name of the host machine.',
          },
          {
            name: 'machine.type',
            level: 'extended',
            type: 'keyword',
            description: 'Machine type of the host machine.',
            example: 't2.medium',
          },
          {
            name: 'provider',
            level: 'extended',
            type: 'keyword',
            description:
              'Name of the cloud provider. Example values are aws, azure, gcp,\nor digitalocean.',
            example: 'aws',
          },
          {
            name: 'region',
            level: 'extended',
            type: 'keyword',
            description: 'Region in which this host is running.',
            example: 'us-east-1',
          },
        ],
      },
      {
        name: 'container',
        title: 'Container',
        group: 2,
        description:
          'Container fields are used for meta information about the specific\ncontainer that is the source of information.\n\nThese fields help correlate data based containers from any runtime.',
        type: 'group',
        fields: [
          {
            name: 'id',
            level: 'core',
            type: 'keyword',
            description: 'Unique container id.',
          },
          {
            name: 'image.name',
            level: 'extended',
            type: 'keyword',
            description: 'Name of the image the container was built on.',
          },
          {
            name: 'image.tag',
            level: 'extended',
            type: 'keyword',
            description: 'Container image tag.',
          },
          {
            name: 'labels',
            level: 'extended',
            type: 'object',
            object_type: 'keyword',
            description: 'Image labels.',
          },
          {
            name: 'name',
            level: 'extended',
            type: 'keyword',
            description: 'Container name.',
          },
          {
            name: 'runtime',
            level: 'extended',
            type: 'keyword',
            description: 'Runtime managing this container.',
            example: 'docker',
          },
        ],
      },
      {
        name: 'destination',
        title: 'Destination',
        group: 2,
        description:
          'Destination fields describe details about the destination of a packet/event.\n\nDestination fields are usually populated in conjunction with source fields.',
        type: 'group',
        fields: [
          {
            name: 'address',
            level: 'extended',
            type: 'keyword',
            description:
              'Some event destination addresses are defined ambiguously. The\nevent will sometimes list an IP, a domain or a unix socket.  You should always\nstore the raw address in the `.address` field.\n\nThen it should be duplicated to `.ip` or `.domain`, depending on which one\nit is.',
          },
          {
            name: 'bytes',
            level: 'core',
            type: 'long',
            format: 'bytes',
            description: 'Bytes sent from the destination to the source.',
            example: 184,
          },
          {
            name: 'domain',
            level: 'core',
            type: 'keyword',
            description: 'Destination domain.',
          },
          {
            name: 'geo.city_name',
            level: 'core',
            type: 'keyword',
            description: 'City name.',
            example: 'Montreal',
          },
          {
            name: 'geo.continent_name',
            level: 'core',
            type: 'keyword',
            description: 'Name of the continent.',
            example: 'North America',
          },
          {
            name: 'geo.country_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Country ISO code.',
            example: 'CA',
          },
          {
            name: 'geo.country_name',
            level: 'core',
            type: 'keyword',
            description: 'Country name.',
            example: 'Canada',
          },
          {
            name: 'geo.location',
            level: 'core',
            type: 'geo_point',
            description: 'Longitude and latitude.',
            example: '{ "lon": -73.614830, "lat": 45.505918 }',
          },
          {
            name: 'geo.name',
            level: 'extended',
            type: 'keyword',
            description:
              'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
            example: 'boston-dc',
          },
          {
            name: 'geo.region_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Region ISO code.',
            example: 'CA-QC',
          },
          {
            name: 'geo.region_name',
            level: 'core',
            type: 'keyword',
            description: 'Region name.',
            example: 'Quebec',
          },
          {
            name: 'ip',
            level: 'core',
            type: 'ip',
            description:
              'IP address of the destination.\n\nCan be one or multiple IPv4 or IPv6 addresses.',
          },
          {
            name: 'mac',
            level: 'core',
            type: 'keyword',
            description: 'MAC address of the destination.',
          },
          {
            name: 'packets',
            level: 'core',
            type: 'long',
            description: 'Packets sent from the destination to the source.',
            example: 12,
          },
          {
            name: 'port',
            level: 'core',
            type: 'long',
            format: 'string',
            description: 'Port of the destination.',
          },
          {
            name: 'user.email',
            level: 'extended',
            type: 'keyword',
            description: 'User email address.',
          },
          {
            name: 'user.full_name',
            level: 'extended',
            type: 'keyword',
            description: "User's full name, if available.",
            example: 'Albert Einstein',
          },
          {
            name: 'user.group.id',
            level: 'extended',
            type: 'keyword',
            description: 'Unique identifier for the group on the system/platform.',
          },
          {
            name: 'user.group.name',
            level: 'extended',
            type: 'keyword',
            description: 'Name of the group.',
          },
          {
            name: 'user.hash',
            level: 'extended',
            type: 'keyword',
            description:
              'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
          },
          {
            name: 'user.id',
            level: 'core',
            type: 'keyword',
            description: 'One or multiple unique identifiers of the user.',
          },
          {
            name: 'user.name',
            level: 'core',
            type: 'keyword',
            description: 'Short name or login of the user.',
            example: 'albert',
          },
        ],
      },
      {
        name: 'ecs',
        title: 'ECS',
        group: 2,
        description: 'Meta-information specific to ECS.',
        type: 'group',
        fields: [
          {
            name: 'version',
            level: 'core',
            required: true,
            type: 'keyword',
            description:
              'ECS version this event conforms to. `ecs.version` is a required\nfield and must exist in all events.\n\nWhen querying across multiple indices -- which may conform to slightly different\nECS versions -- this field lets integrations adjust to the schema version\nof the events.',
            example: '1.0.0',
          },
        ],
      },
      {
        name: 'error',
        title: 'Error',
        group: 2,
        description:
          'These fields can represent errors of any kind.\n\nUse them for errors that happen while fetching events or in cases where the\nevent itself contains an error.',
        type: 'group',
        fields: [
          {
            name: 'code',
            level: 'core',
            type: 'keyword',
            description: 'Error code describing the error.',
          },
          {
            name: 'id',
            level: 'core',
            type: 'keyword',
            description: 'Unique identifier for the error.',
          },
          {
            name: 'message',
            level: 'core',
            type: 'text',
            description: 'Error message.',
          },
        ],
      },
      {
        name: 'event',
        title: 'Event',
        group: 2,
        description:
          'The event fields are used for context information about the log\nor metric event itself.\n\nA log is defined as an event containing details of something that happened.\nLog events must include the time at which the thing happened. Examples of log\nevents include a process starting on a host, a network packet being sent from\na source to a destination, or a network connection between a client and a server\nbeing initiated or closed. A metric is defined as an event containing one or\nmore numerical or categorical measurements and the time at which the measurement\nwas taken. Examples of metric events include memory pressure measured on a host,\nor vulnerabilities measured on a scanned host.',
        type: 'group',
        fields: [
          {
            name: 'action',
            level: 'core',
            type: 'keyword',
            description:
              'The action captured by the event.\n\nThis describes the information in the event. It is more specific than `event.category`.\nExamples are `group-add`, `process-started`, `file-created`. The value is\nnormally defined by the implementer.',
            example: 'user-password-change',
          },
          {
            name: 'category',
            level: 'core',
            type: 'keyword',
            description:
              'Event category.\n\nThis contains high-level information about the contents of the event. It is\nmore generic than `event.action`, in the sense that typically a category contains\nmultiple actions. Warning: In future versions of ECS, we plan to provide a\nlist of acceptable values for this field, please use with caution.',
            example: 'user-management',
          },
          {
            name: 'created',
            level: 'core',
            type: 'date',
            description:
              'event.created contains the date/time when the event was first\nread by an agent, or by your pipeline.\n\nThis field is distinct from @timestamp in that @timestamp typically contain\nthe time extracted from the original event.\n\nIn most situations, these two timestamps will be slightly different. The difference\ncan be used to calculate the delay between your source generating an event,\nand the time when your agent first processed it. This can be used to monitor\nyour agents or pipelines ability to keep up with your event source.\n\nIn case the two timestamps are identical, @timestamp should be used.',
          },
          {
            name: 'dataset',
            level: 'core',
            type: 'keyword',
            description:
              'Name of the dataset.\n\nThe concept of a `dataset` (fileset / metricset) is used in Beats as a subset\nof modules. It contains the information which is currently stored in metricset.name\nand metricset.module or fileset.name.',
            example: 'stats',
          },
          {
            name: 'duration',
            level: 'core',
            type: 'long',
            format: 'duration',
            input_format: 'nanoseconds',
            description:
              'Duration of the event in nanoseconds.\n\nIf event.start and event.end are known this value should be the difference\nbetween the end and start time.',
          },
          {
            name: 'end',
            level: 'extended',
            type: 'date',
            description:
              'event.end contains the date when the event ended or when the activity\nwas last observed.',
          },
          {
            name: 'hash',
            level: 'extended',
            type: 'keyword',
            description:
              'Hash (perhaps logstash fingerprint) of raw field to be able to\ndemonstrate log integrity.',
            example: '123456789012345678901234567890ABCD',
          },
          {
            name: 'id',
            level: 'core',
            type: 'keyword',
            description: 'Unique ID to describe the event.',
            example: '8a4f500d',
          },
          {
            name: 'kind',
            level: 'extended',
            type: 'keyword',
            description:
              'The kind of the event.\n\nThis gives information about what type of information the event contains,\nwithout being specific to the contents of the event.  Examples are `event`,\n`state`, `alarm`. Warning: In future versions of ECS, we plan to provide a\nlist of acceptable values for this field, please use with caution.',
            example: 'state',
          },
          {
            name: 'module',
            level: 'core',
            type: 'keyword',
            description:
              'Name of the module this data is coming from.\n\nThis information is coming from the modules used in Beats or Logstash.',
            example: 'mysql',
          },
          {
            name: 'original',
            level: 'core',
            type: 'keyword',
            description:
              'Raw text message of entire event. Used to demonstrate log integrity.\n\nThis field is not indexed and doc_values are disabled. It cannot be searched,\nbut it can be retrieved from `_source`.',
            example:
              'Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124;\nworm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232',
          },
          {
            name: 'outcome',
            level: 'extended',
            type: 'keyword',
            description:
              'The outcome of the event.\n\nIf the event describes an action, this fields contains the outcome of that\naction. Examples outcomes are `success` and `failure`. Warning: In future\nversions of ECS, we plan to provide a list of acceptable values for this field,\nplease use with caution.',
            example: 'success',
          },
          {
            name: 'risk_score',
            level: 'core',
            type: 'float',
            description:
              "Risk score or priority of the event (e.g. security solutions).\nUse your system's original value here.",
          },
          {
            name: 'risk_score_norm',
            level: 'extended',
            type: 'float',
            description:
              'Normalized risk score or priority of the event, on a scale of\n0 to 100.\n\nThis is mainly useful if you use more than one system that assigns risk scores,\nand you want to see a normalized value across all systems.',
          },
          {
            name: 'severity',
            level: 'core',
            type: 'long',
            format: 'string',
            description:
              "Severity describes the original severity of the event. What the\ndifferent severity values mean can very different between use cases. It's\nup to the implementer to make sure severities are consistent across events.",
            example: '7',
          },
          {
            name: 'start',
            level: 'extended',
            type: 'date',
            description:
              'event.start contains the date when the event started or when the\nactivity was first observed.',
          },
          {
            name: 'timezone',
            level: 'extended',
            type: 'keyword',
            description:
              'This field should be populated when the events timestamp does\nnot include timezone information already (e.g. default Syslog timestamps).\nIts optional otherwise.\n\nAcceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"),\nabbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").',
          },
          {
            name: 'type',
            level: 'core',
            type: 'keyword',
            description:
              'Reserved for future usage.\n\nPlease avoid using this field for user data.',
          },
        ],
      },
      {
        name: 'file',
        title: 'File',
        group: 2,
        description:
          'A file is defined as a set of information that has been created\non, or has existed on a filesystem.\n\nFile objects can be associated with host events, network events, and/or file\nevents (e.g., those produced by File Integrity Monitoring [FIM] products or\nservices). File fields provide details about the affected file associated with\nthe event or metric.',
        type: 'group',
        fields: [
          {
            name: 'ctime',
            level: 'extended',
            type: 'date',
            description: 'Last time file metadata changed.',
          },
          {
            name: 'device',
            level: 'extended',
            type: 'keyword',
            description: 'Device that is the source of the file.',
          },
          {
            name: 'extension',
            level: 'extended',
            type: 'keyword',
            description: 'File extension.\n\nThis should allow easy filtering by file extensions.',
            example: 'png',
          },
          {
            name: 'gid',
            level: 'extended',
            type: 'keyword',
            description: 'Primary group ID (GID) of the file.',
          },
          {
            name: 'group',
            level: 'extended',
            type: 'keyword',
            description: 'Primary group name of the file.',
          },
          {
            name: 'inode',
            level: 'extended',
            type: 'keyword',
            description: 'Inode representing the file in the filesystem.',
          },
          {
            name: 'mode',
            level: 'extended',
            type: 'keyword',
            description: 'Mode of the file in octal representation.',
            example: 416,
          },
          {
            name: 'mtime',
            level: 'extended',
            type: 'date',
            description: 'Last time file content was modified.',
          },
          {
            name: 'owner',
            level: 'extended',
            type: 'keyword',
            description: "File owner's username.",
          },
          {
            name: 'path',
            level: 'extended',
            type: 'keyword',
            description: 'Path to the file.',
          },
          {
            name: 'size',
            level: 'extended',
            type: 'long',
            description: 'File size in bytes (field is only added when `type` is `file`).',
          },
          {
            name: 'target_path',
            level: 'extended',
            type: 'keyword',
            description: 'Target path for symlinks.',
          },
          {
            name: 'type',
            level: 'extended',
            type: 'keyword',
            description: 'File type (file, dir, or symlink).',
          },
          {
            name: 'uid',
            level: 'extended',
            type: 'keyword',
            description: 'The user ID (UID) or security identifier (SID) of the file owner.',
          },
        ],
      },
      {
        name: 'geo',
        title: 'Geo',
        group: 2,
        description:
          'Geo fields can carry data about a specific location related to an\nevent.\n\nThis geolocation information can be derived from techniques such as Geo IP,\nor be user-supplied.',
        type: 'group',
        fields: [
          {
            name: 'city_name',
            level: 'core',
            type: 'keyword',
            description: 'City name.',
            example: 'Montreal',
          },
          {
            name: 'continent_name',
            level: 'core',
            type: 'keyword',
            description: 'Name of the continent.',
            example: 'North America',
          },
          {
            name: 'country_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Country ISO code.',
            example: 'CA',
          },
          {
            name: 'country_name',
            level: 'core',
            type: 'keyword',
            description: 'Country name.',
            example: 'Canada',
          },
          {
            name: 'location',
            level: 'core',
            type: 'geo_point',
            description: 'Longitude and latitude.',
            example: '{ "lon": -73.614830, "lat": 45.505918 }',
          },
          {
            name: 'name',
            level: 'extended',
            type: 'keyword',
            description:
              'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
            example: 'boston-dc',
          },
          {
            name: 'region_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Region ISO code.',
            example: 'CA-QC',
          },
          {
            name: 'region_name',
            level: 'core',
            type: 'keyword',
            description: 'Region name.',
            example: 'Quebec',
          },
        ],
      },
      {
        name: 'group',
        title: 'Group',
        group: 2,
        description:
          'The group fields are meant to represent groups that are relevant\nto the event.',
        type: 'group',
        fields: [
          {
            name: 'id',
            level: 'extended',
            type: 'keyword',
            description: 'Unique identifier for the group on the system/platform.',
          },
          {
            name: 'name',
            level: 'extended',
            type: 'keyword',
            description: 'Name of the group.',
          },
        ],
      },
      {
        name: 'host',
        title: 'Host',
        group: 2,
        description:
          'A host is defined as a general computing instance.\n\nECS host.* fields should be populated with details about the host on which the\nevent happened, or from which the measurement was taken. Host types include\nhardware, virtual machines, Docker containers, and Kubernetes nodes.',
        type: 'group',
        fields: [
          {
            name: 'architecture',
            level: 'core',
            type: 'keyword',
            description: 'Operating system architecture.',
            example: 'x86_64',
          },
          {
            name: 'geo.city_name',
            level: 'core',
            type: 'keyword',
            description: 'City name.',
            example: 'Montreal',
          },
          {
            name: 'geo.continent_name',
            level: 'core',
            type: 'keyword',
            description: 'Name of the continent.',
            example: 'North America',
          },
          {
            name: 'geo.country_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Country ISO code.',
            example: 'CA',
          },
          {
            name: 'geo.country_name',
            level: 'core',
            type: 'keyword',
            description: 'Country name.',
            example: 'Canada',
          },
          {
            name: 'geo.location',
            level: 'core',
            type: 'geo_point',
            description: 'Longitude and latitude.',
            example: '{ "lon": -73.614830, "lat": 45.505918 }',
          },
          {
            name: 'geo.name',
            level: 'extended',
            type: 'keyword',
            description:
              'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
            example: 'boston-dc',
          },
          {
            name: 'geo.region_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Region ISO code.',
            example: 'CA-QC',
          },
          {
            name: 'geo.region_name',
            level: 'core',
            type: 'keyword',
            description: 'Region name.',
            example: 'Quebec',
          },
          {
            name: 'hostname',
            level: 'core',
            type: 'keyword',
            description:
              'Hostname of the host.\n\nIt normally contains what the `hostname` command returns on the host machine.',
          },
          {
            name: 'id',
            level: 'core',
            type: 'keyword',
            description:
              'Unique host id.\n\nAs hostname is not always unique, use values that are meaningful in your environment.\n\nExample: The current usage of `beat.name`.',
          },
          {
            name: 'ip',
            level: 'core',
            type: 'ip',
            description: 'Host ip address.',
          },
          {
            name: 'mac',
            level: 'core',
            type: 'keyword',
            description: 'Host mac address.',
          },
          {
            name: 'name',
            level: 'core',
            type: 'keyword',
            description:
              'Name of the host.\n\nIt can contain what `hostname` returns on Unix systems, the fully qualified\ndomain name, or a name specified by the user. The sender decides which value\nto use.',
          },
          {
            name: 'os.family',
            level: 'extended',
            type: 'keyword',
            description: 'OS family (such as redhat, debian, freebsd, windows).',
            example: 'debian',
          },
          {
            name: 'os.full',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system name, including the version or code name.',
            example: 'Mac OS Mojave',
          },
          {
            name: 'os.kernel',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system kernel version as a raw string.',
            example: '4.4.0-112-generic',
          },
          {
            name: 'os.name',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system name, without the version.',
            example: 'Mac OS X',
          },
          {
            name: 'os.platform',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system platform (such centos, ubuntu, windows).',
            example: 'darwin',
          },
          {
            name: 'os.version',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system version as a raw string.',
            example: '10.14.1',
          },
          {
            name: 'type',
            level: 'core',
            type: 'keyword',
            description:
              'Type of host.\n\nFor Cloud providers this can be the machine type like `t2.medium`. If vm,\nthis could be the container, for example, or other information meaningful\nin your environment.',
          },
          {
            name: 'user.email',
            level: 'extended',
            type: 'keyword',
            description: 'User email address.',
          },
          {
            name: 'user.full_name',
            level: 'extended',
            type: 'keyword',
            description: "User's full name, if available.",
            example: 'Albert Einstein',
          },
          {
            name: 'user.group.id',
            level: 'extended',
            type: 'keyword',
            description: 'Unique identifier for the group on the system/platform.',
          },
          {
            name: 'user.group.name',
            level: 'extended',
            type: 'keyword',
            description: 'Name of the group.',
          },
          {
            name: 'user.hash',
            level: 'extended',
            type: 'keyword',
            description:
              'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
          },
          {
            name: 'user.id',
            level: 'core',
            type: 'keyword',
            description: 'One or multiple unique identifiers of the user.',
          },
          {
            name: 'user.name',
            level: 'core',
            type: 'keyword',
            description: 'Short name or login of the user.',
            example: 'albert',
          },
        ],
      },
      {
        name: 'http',
        title: 'HTTP',
        group: 2,
        description:
          'Fields related to HTTP activity. Use the `url` field set to store\nthe url of the request.',
        type: 'group',
        fields: [
          {
            name: 'request.body.bytes',
            level: 'extended',
            type: 'long',
            format: 'bytes',
            description: 'Size in bytes of the request body.',
            example: 887,
          },
          {
            name: 'request.body.content',
            level: 'extended',
            type: 'keyword',
            description: 'The full HTTP request body.',
            example: 'Hello world',
          },
          {
            name: 'request.bytes',
            level: 'extended',
            type: 'long',
            format: 'bytes',
            description: 'Total size in bytes of the request (body and headers).',
            example: 1437,
          },
          {
            name: 'request.method',
            level: 'extended',
            type: 'keyword',
            description:
              'HTTP request method.\n\nThe field value must be normalized to lowercase for querying. See the documentation\nsection "Implementing ECS".',
            example: 'get, post, put',
          },
          {
            name: 'request.referrer',
            level: 'extended',
            type: 'keyword',
            description: 'Referrer for this HTTP request.',
            example: 'https://blog.example.com/',
          },
          {
            name: 'response.body.bytes',
            level: 'extended',
            type: 'long',
            format: 'bytes',
            description: 'Size in bytes of the response body.',
            example: 887,
          },
          {
            name: 'response.body.content',
            level: 'extended',
            type: 'keyword',
            description: 'The full HTTP response body.',
            example: 'Hello world',
          },
          {
            name: 'response.bytes',
            level: 'extended',
            type: 'long',
            format: 'bytes',
            description: 'Total size in bytes of the response (body and headers).',
            example: 1437,
          },
          {
            name: 'response.status_code',
            level: 'extended',
            type: 'long',
            format: 'string',
            description: 'HTTP response status code.',
            example: 404,
          },
          {
            name: 'version',
            level: 'extended',
            type: 'keyword',
            description: 'HTTP version.',
            example: 1.1,
          },
        ],
      },
      {
        name: 'log',
        title: 'Log',
        group: 2,
        description: 'Fields which are specific to log events.',
        type: 'group',
        fields: [
          {
            name: 'level',
            level: 'core',
            type: 'keyword',
            description:
              'Original log level of the log event.\n\nSome examples are `warn`, `error`, `i`.',
            example: 'err',
          },
          {
            name: 'original',
            level: 'core',
            type: 'keyword',
            description:
              'This is the original log message and contains the full log message\nbefore splitting it up in multiple parts.\n\nIn contrast to the `message` field which can contain an extracted part of\nthe log message, this field contains the original, full log message. It can\nhave already some modifications applied like encoding or new lines removed\nto clean up the log message.\n\nThis field is not indexed and doc_values are disabled so it cant be queried\nbut the value can be retrieved from `_source`.',
            example: 'Sep 19 08:26:10 localhost My log',
          },
        ],
      },
      {
        name: 'network',
        title: 'Network',
        group: 2,
        description:
          'The network is defined as the communication path over which a host\nor network event happens.\n\nThe network.* fields should be populated with details about the network activity\nassociated with an event.',
        type: 'group',
        fields: [
          {
            name: 'application',
            level: 'extended',
            type: 'keyword',
            description:
              'A name given to an application level protocol. This can be arbitrarily\nassigned for things like microservices, but also apply to things like skype,\nicq, facebook, twitter. This would be used in situations where the vendor\nor service can be decoded such as from the source/dest IP owners, ports, or\nwire format.\n\nThe field value must be normalized to lowercase for querying. See the documentation\nsection "Implementing ECS".',
            example: 'aim',
          },
          {
            name: 'bytes',
            level: 'core',
            type: 'long',
            format: 'bytes',
            description:
              'Total bytes transferred in both directions.\n\nIf `source.bytes` and `destination.bytes` are known, `network.bytes` is their\nsum.',
            example: 368,
          },
          {
            name: 'community_id',
            level: 'extended',
            type: 'keyword',
            description:
              'A hash of source and destination IPs and ports, as well as the\nprotocol used in a communication. This is a tool-agnostic standard to identify\nflows.\n\nLearn more at https://github.com/corelight/community-id-spec.',
            example: '1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=',
          },
          {
            name: 'direction',
            level: 'core',
            type: 'keyword',
            description:
              "Direction of the network traffic. Recommended values are: * inbound  * outbound  * internal  * external  * unknown When mapping events from a host-based monitoring context, populate this field from the host's point of view. When mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of your network perimeter.",
            example: 'inbound',
          },
          {
            name: 'forwarded_ip',
            level: 'core',
            type: 'ip',
            description: 'Host IP address when the source IP address is the proxy.',
            example: '192.1.1.2',
          },
          {
            name: 'iana_number',
            level: 'extended',
            type: 'keyword',
            description:
              'IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).\nStandardized list of protocols. This aligns well with NetFlow and sFlow related\nlogs which use the IANA Protocol Number.',
            example: 6,
          },
          {
            name: 'name',
            level: 'extended',
            type: 'keyword',
            description: 'Name given by operators to sections of their network.',
            example: 'Guest Wifi',
          },
          {
            name: 'packets',
            level: 'core',
            type: 'long',
            description:
              'Total packets transferred in both directions.\n\nIf `source.packets` and `destination.packets` are known, `network.packets`\nis their sum.',
            example: 24,
          },
          {
            name: 'protocol',
            level: 'core',
            type: 'keyword',
            description:
              'L7 Network protocol name. ex. http, lumberjack, transport protocol.\n\nThe field value must be normalized to lowercase for querying. See the documentation\nsection "Implementing ECS".',
            example: 'http',
          },
          {
            name: 'transport',
            level: 'core',
            type: 'keyword',
            description:
              'Same as network.iana_number, but instead using the Keyword name\nof the transport layer (udp, tcp, ipv6-icmp, etc.)\n\nThe field value must be normalized to lowercase for querying. See the documentation\nsection "Implementing ECS".',
            example: 'tcp',
          },
          {
            name: 'type',
            level: 'core',
            type: 'keyword',
            description:
              'In the OSI Model this would be the Network Layer. ipv4, ipv6,\nipsec, pim, etc\n\nThe field value must be normalized to lowercase for querying. See the documentation\nsection "Implementing ECS".',
            example: 'ipv4',
          },
        ],
      },
      {
        name: 'observer',
        title: 'Observer',
        group: 2,
        description:
          'An observer is defined as a special network, security, or application\ndevice used to detect, observe, or create network, security, or application-related\nevents and metrics.\n\nThis could be a custom hardware appliance or a server that has been configured\nto run special network, security, or application software. Examples include\nfirewalls, intrusion detection/prevention systems, network monitoring sensors,\nweb application firewalls, data loss prevention systems, and APM servers. The\nobserver.* fields shall be populated with details of the system, if any, that\ndetects, observes and/or creates a network, security, or application event or\nmetric. Message queues and ETL components used in processing events or metrics\nare not considered observers in ECS.',
        type: 'group',
        fields: [
          {
            name: 'geo.city_name',
            level: 'core',
            type: 'keyword',
            description: 'City name.',
            example: 'Montreal',
          },
          {
            name: 'geo.continent_name',
            level: 'core',
            type: 'keyword',
            description: 'Name of the continent.',
            example: 'North America',
          },
          {
            name: 'geo.country_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Country ISO code.',
            example: 'CA',
          },
          {
            name: 'geo.country_name',
            level: 'core',
            type: 'keyword',
            description: 'Country name.',
            example: 'Canada',
          },
          {
            name: 'geo.location',
            level: 'core',
            type: 'geo_point',
            description: 'Longitude and latitude.',
            example: '{ "lon": -73.614830, "lat": 45.505918 }',
          },
          {
            name: 'geo.name',
            level: 'extended',
            type: 'keyword',
            description:
              'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
            example: 'boston-dc',
          },
          {
            name: 'geo.region_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Region ISO code.',
            example: 'CA-QC',
          },
          {
            name: 'geo.region_name',
            level: 'core',
            type: 'keyword',
            description: 'Region name.',
            example: 'Quebec',
          },
          {
            name: 'hostname',
            level: 'core',
            type: 'keyword',
            description: 'Hostname of the observer.',
          },
          {
            name: 'ip',
            level: 'core',
            type: 'ip',
            description: 'IP address of the observer.',
          },
          {
            name: 'mac',
            level: 'core',
            type: 'keyword',
            description: 'MAC address of the observer',
          },
          {
            name: 'os.family',
            level: 'extended',
            type: 'keyword',
            description: 'OS family (such as redhat, debian, freebsd, windows).',
            example: 'debian',
          },
          {
            name: 'os.full',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system name, including the version or code name.',
            example: 'Mac OS Mojave',
          },
          {
            name: 'os.kernel',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system kernel version as a raw string.',
            example: '4.4.0-112-generic',
          },
          {
            name: 'os.name',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system name, without the version.',
            example: 'Mac OS X',
          },
          {
            name: 'os.platform',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system platform (such centos, ubuntu, windows).',
            example: 'darwin',
          },
          {
            name: 'os.version',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system version as a raw string.',
            example: '10.14.1',
          },
          {
            name: 'serial_number',
            level: 'extended',
            type: 'keyword',
            description: 'Observer serial number.',
          },
          {
            name: 'type',
            level: 'core',
            type: 'keyword',
            description:
              'The type of the observer the data is coming from.\n\nThere is no predefined list of observer types. Some examples are `forwarder`,\n`firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.',
            example: 'firewall',
          },
          {
            name: 'vendor',
            level: 'core',
            type: 'keyword',
            description: 'observer vendor information.',
          },
          {
            name: 'version',
            level: 'core',
            type: 'keyword',
            description: 'Observer version.',
          },
        ],
      },
      {
        name: 'organization',
        title: 'Organization',
        group: 2,
        description:
          'The organization fields enrich data with information about the company\nor entity the data is associated with.\n\nThese fields help you arrange or filter data stored in an index by one or multiple\norganizations.',
        type: 'group',
        fields: [
          {
            name: 'id',
            level: 'extended',
            type: 'keyword',
            description: 'Unique identifier for the organization.',
          },
          {
            name: 'name',
            level: 'extended',
            type: 'keyword',
            description: 'Organization name.',
          },
        ],
      },
      {
        name: 'os',
        title: 'Operating System',
        group: 2,
        description: 'The OS fields contain information about the operating system.',
        type: 'group',
        fields: [
          {
            name: 'family',
            level: 'extended',
            type: 'keyword',
            description: 'OS family (such as redhat, debian, freebsd, windows).',
            example: 'debian',
          },
          {
            name: 'full',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system name, including the version or code name.',
            example: 'Mac OS Mojave',
          },
          {
            name: 'kernel',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system kernel version as a raw string.',
            example: '4.4.0-112-generic',
          },
          {
            name: 'name',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system name, without the version.',
            example: 'Mac OS X',
          },
          {
            name: 'platform',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system platform (such centos, ubuntu, windows).',
            example: 'darwin',
          },
          {
            name: 'version',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system version as a raw string.',
            example: '10.14.1',
          },
        ],
      },
      {
        name: 'process',
        title: 'Process',
        group: 2,
        description:
          'These fields contain information about a process.\n\nThese fields can help you correlate metrics information with a process id/name\nfrom a log message.  The `process.pid` often stays in the metric itself and\nis copied to the global field for correlation.',
        type: 'group',
        fields: [
          {
            name: 'args',
            level: 'extended',
            type: 'keyword',
            description:
              'Array of process arguments.\n\nMay be filtered to protect sensitive information.',
            example: ['ssh', '-l', 'user', '10.0.0.16'],
          },
          {
            name: 'executable',
            level: 'extended',
            type: 'keyword',
            description: 'Absolute path to the process executable.',
            example: '/usr/bin/ssh',
          },
          {
            name: 'name',
            level: 'extended',
            type: 'keyword',
            description: 'Process name.\n\nSometimes called program name or similar.',
            example: 'ssh',
          },
          {
            name: 'pid',
            level: 'core',
            type: 'long',
            format: 'string',
            description: 'Process id.',
            example: 4242,
          },
          {
            name: 'ppid',
            level: 'extended',
            type: 'long',
            format: 'string',
            description: "Parent process' pid.",
            example: 4241,
          },
          {
            name: 'start',
            level: 'extended',
            type: 'date',
            description: 'The time the process started.',
            example: '2016-05-23T08:05:34.853Z',
          },
          {
            name: 'thread.id',
            level: 'extended',
            type: 'long',
            format: 'string',
            description: 'Thread ID.',
            example: 4242,
          },
          {
            name: 'title',
            level: 'extended',
            type: 'keyword',
            description:
              'Process title.\n\nThe proctitle, some times the same as process name. Can also be different:\nfor example a browser setting its title to the web page currently opened.',
          },
          {
            name: 'working_directory',
            level: 'extended',
            type: 'keyword',
            description: 'The working directory of the process.',
            example: '/home/alice',
          },
        ],
      },
      {
        name: 'related',
        title: 'Related',
        group: 2,
        description:
          'This field set is meant to facilitate pivoting around a piece of\ndata.\n\nSome pieces of information can be seen in many places in an ECS event. To facilitate\nsearching for them, store an array of all seen values to their corresponding\nfield in `related.`.\n\nA concrete example is IP addresses, which can be under host, observer, source,\ndestination, client, server, and network.forwarded_ip. If you append all IPs\nto `related.ip`, you can then search for a given IP trivially, no matter where\nit appeared, by querying `related.ip:a.b.c.d`.',
        type: 'group',
        fields: [
          {
            name: 'ip',
            level: 'extended',
            type: 'ip',
            description: 'All of the IPs seen on your event.',
          },
        ],
      },
      {
        name: 'server',
        title: 'Server',
        group: 2,
        description:
          'A Server is defined as the responder in a network connection for\nevents regarding sessions, connections, or bidirectional flow records.\n\nFor TCP events, the server is the receiver of the initial SYN packet(s) of the\nTCP connection. For other protocols, the server is generally the responder in\nthe network transaction. Some systems actually use the term "responder" to refer\nthe server in TCP connections. The server fields describe details about the\nsystem acting as the server in the network event. Server fields are usually\npopulated in conjunction with client fields. Server fields are generally not\npopulated for packet-level events.\n\nClient / server representations can add semantic context to an exchange, which\nis helpful to visualize the data in certain situations. If your context falls\nin that category, you should still ensure that source and destination are filled\nappropriately.',
        type: 'group',
        fields: [
          {
            name: 'address',
            level: 'extended',
            type: 'keyword',
            description:
              'Some event server addresses are defined ambiguously. The event\nwill sometimes list an IP, a domain or a unix socket.  You should always store\nthe raw address in the `.address` field.\n\nThen it should be duplicated to `.ip` or `.domain`, depending on which one\nit is.',
          },
          {
            name: 'bytes',
            level: 'core',
            type: 'long',
            format: 'bytes',
            description: 'Bytes sent from the server to the client.',
            example: 184,
          },
          {
            name: 'domain',
            level: 'core',
            type: 'keyword',
            description: 'Server domain.',
          },
          {
            name: 'geo.city_name',
            level: 'core',
            type: 'keyword',
            description: 'City name.',
            example: 'Montreal',
          },
          {
            name: 'geo.continent_name',
            level: 'core',
            type: 'keyword',
            description: 'Name of the continent.',
            example: 'North America',
          },
          {
            name: 'geo.country_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Country ISO code.',
            example: 'CA',
          },
          {
            name: 'geo.country_name',
            level: 'core',
            type: 'keyword',
            description: 'Country name.',
            example: 'Canada',
          },
          {
            name: 'geo.location',
            level: 'core',
            type: 'geo_point',
            description: 'Longitude and latitude.',
            example: '{ "lon": -73.614830, "lat": 45.505918 }',
          },
          {
            name: 'geo.name',
            level: 'extended',
            type: 'keyword',
            description:
              'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
            example: 'boston-dc',
          },
          {
            name: 'geo.region_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Region ISO code.',
            example: 'CA-QC',
          },
          {
            name: 'geo.region_name',
            level: 'core',
            type: 'keyword',
            description: 'Region name.',
            example: 'Quebec',
          },
          {
            name: 'ip',
            level: 'core',
            type: 'ip',
            description:
              'IP address of the server.\n\nCan be one or multiple IPv4 or IPv6 addresses.',
          },
          {
            name: 'mac',
            level: 'core',
            type: 'keyword',
            description: 'MAC address of the server.',
          },
          {
            name: 'packets',
            level: 'core',
            type: 'long',
            description: 'Packets sent from the server to the client.',
            example: 12,
          },
          {
            name: 'port',
            level: 'core',
            type: 'long',
            format: 'string',
            description: 'Port of the server.',
          },
          {
            name: 'user.email',
            level: 'extended',
            type: 'keyword',
            description: 'User email address.',
          },
          {
            name: 'user.full_name',
            level: 'extended',
            type: 'keyword',
            description: "User's full name, if available.",
            example: 'Albert Einstein',
          },
          {
            name: 'user.group.id',
            level: 'extended',
            type: 'keyword',
            description: 'Unique identifier for the group on the system/platform.',
          },
          {
            name: 'user.group.name',
            level: 'extended',
            type: 'keyword',
            description: 'Name of the group.',
          },
          {
            name: 'user.hash',
            level: 'extended',
            type: 'keyword',
            description:
              'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
          },
          {
            name: 'user.id',
            level: 'core',
            type: 'keyword',
            description: 'One or multiple unique identifiers of the user.',
          },
          {
            name: 'user.name',
            level: 'core',
            type: 'keyword',
            description: 'Short name or login of the user.',
            example: 'albert',
          },
        ],
      },
      {
        name: 'service',
        title: 'Service',
        group: 2,
        description:
          'The service fields describe the service for or from which the data\nwas collected.\n\nThese fields help you find and correlate logs for a specific service and version.',
        type: 'group',
        fields: [
          {
            name: 'ephemeral_id',
            level: 'extended',
            type: 'keyword',
            description:
              'Ephemeral identifier of this service (if one exists).\n\nThis id normally changes across restarts, but `service.id` does not.',
            example: '8a4f500f',
          },
          {
            name: 'id',
            level: 'core',
            type: 'keyword',
            description:
              'Unique identifier of the running service.\n\nThis id should uniquely identify this service. This makes it possible to correlate\nlogs and metrics for one specific service.\n\nExample: If you are experiencing issues with one redis instance, you can filter\non that id to see metrics and logs for that single instance.',
            example: 'd37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6',
          },
          {
            name: 'name',
            level: 'core',
            type: 'keyword',
            description:
              'Name of the service data is collected from.\n\nThe name of the service is normally user given. This allows if two instances\nof the same service are running on the same machine they can be differentiated\nby the `service.name`.\n\nAlso it allows for distributed services that run on multiple hosts to correlate\nthe related instances based on the name.\n\nIn the case of Elasticsearch the service.name could contain the cluster name.\nFor Beats the service.name is by default a copy of the `service.type` field\nif no name is specified.',
            example: 'elasticsearch-metrics',
          },
          {
            name: 'state',
            level: 'core',
            type: 'keyword',
            description: 'Current state of the service.',
          },
          {
            name: 'type',
            level: 'core',
            type: 'keyword',
            description:
              'The type of the service data is collected from.\n\nThe type can be used to group and correlate logs and metrics from one service\ntype.\n\nExample: If logs or metrics are collected from Elasticsearch, `service.type`\nwould be `elasticsearch`.',
            example: 'elasticsearch',
          },
          {
            name: 'version',
            level: 'core',
            type: 'keyword',
            description:
              'Version of the service the data was collected from.\n\nThis allows to look at a data set only for a specific version of a service.',
            example: '3.2.4',
          },
        ],
      },
      {
        name: 'source',
        title: 'Source',
        group: 2,
        description:
          'Source fields describe details about the source of a packet/event.\n\nSource fields are usually populated in conjunction with destination fields.',
        type: 'group',
        fields: [
          {
            name: 'address',
            level: 'extended',
            type: 'keyword',
            description:
              'Some event source addresses are defined ambiguously. The event\nwill sometimes list an IP, a domain or a unix socket.  You should always store\nthe raw address in the `.address` field.\n\nThen it should be duplicated to `.ip` or `.domain`, depending on which one\nit is.',
          },
          {
            name: 'bytes',
            level: 'core',
            type: 'long',
            format: 'bytes',
            description: 'Bytes sent from the source to the destination.',
            example: 184,
          },
          {
            name: 'domain',
            level: 'core',
            type: 'keyword',
            description: 'Source domain.',
          },
          {
            name: 'geo.city_name',
            level: 'core',
            type: 'keyword',
            description: 'City name.',
            example: 'Montreal',
          },
          {
            name: 'geo.continent_name',
            level: 'core',
            type: 'keyword',
            description: 'Name of the continent.',
            example: 'North America',
          },
          {
            name: 'geo.country_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Country ISO code.',
            example: 'CA',
          },
          {
            name: 'geo.country_name',
            level: 'core',
            type: 'keyword',
            description: 'Country name.',
            example: 'Canada',
          },
          {
            name: 'geo.location',
            level: 'core',
            type: 'geo_point',
            description: 'Longitude and latitude.',
            example: '{ "lon": -73.614830, "lat": 45.505918 }',
          },
          {
            name: 'geo.name',
            level: 'extended',
            type: 'keyword',
            description:
              'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
            example: 'boston-dc',
          },
          {
            name: 'geo.region_iso_code',
            level: 'core',
            type: 'keyword',
            description: 'Region ISO code.',
            example: 'CA-QC',
          },
          {
            name: 'geo.region_name',
            level: 'core',
            type: 'keyword',
            description: 'Region name.',
            example: 'Quebec',
          },
          {
            name: 'ip',
            level: 'core',
            type: 'ip',
            description:
              'IP address of the source.\n\nCan be one or multiple IPv4 or IPv6 addresses.',
          },
          {
            name: 'mac',
            level: 'core',
            type: 'keyword',
            description: 'MAC address of the source.',
          },
          {
            name: 'packets',
            level: 'core',
            type: 'long',
            description: 'Packets sent from the source to the destination.',
            example: 12,
          },
          {
            name: 'port',
            level: 'core',
            type: 'long',
            format: 'string',
            description: 'Port of the source.',
          },
          {
            name: 'user.email',
            level: 'extended',
            type: 'keyword',
            description: 'User email address.',
          },
          {
            name: 'user.full_name',
            level: 'extended',
            type: 'keyword',
            description: "User's full name, if available.",
            example: 'Albert Einstein',
          },
          {
            name: 'user.group.id',
            level: 'extended',
            type: 'keyword',
            description: 'Unique identifier for the group on the system/platform.',
          },
          {
            name: 'user.group.name',
            level: 'extended',
            type: 'keyword',
            description: 'Name of the group.',
          },
          {
            name: 'user.hash',
            level: 'extended',
            type: 'keyword',
            description:
              'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
          },
          {
            name: 'user.id',
            level: 'core',
            type: 'keyword',
            description: 'One or multiple unique identifiers of the user.',
          },
          {
            name: 'user.name',
            level: 'core',
            type: 'keyword',
            description: 'Short name or login of the user.',
            example: 'albert',
          },
        ],
      },
      {
        name: 'url',
        title: 'URL',
        group: 2,
        description:
          'URL fields provide support for complete or partial URLs, and supports\nthe breaking down into scheme, domain, path, and so on.',
        type: 'group',
        fields: [
          {
            name: 'domain',
            level: 'extended',
            type: 'keyword',
            description:
              'Domain of the url, such as "www.elastic.co".\n\nIn some cases a URL may refer to an IP and/or port directly, without a domain\nname. In this case, the IP address would go to the `domain` field.',
            example: 'www.elastic.co',
          },
          {
            name: 'fragment',
            level: 'extended',
            type: 'keyword',
            description:
              'Portion of the url after the `#`, such as "top".\n\nThe `#` is not part of the fragment.',
          },
          {
            name: 'full',
            level: 'extended',
            type: 'keyword',
            description:
              'If full URLs are important to your use case, they should be stored\nin `url.full`, whether this field is reconstructed or present in the event\nsource.',
            example: 'https://www.elastic.co:443/search?q=elasticsearch#top',
          },
          {
            name: 'original',
            level: 'extended',
            type: 'keyword',
            description:
              'Unmodified original url as seen in the event source.\n\nNote that in network monitoring, the observed URL may be a full URL, whereas\nin access logs, the URL is often just represented as a path.\n\nThis field is meant to represent the URL as it was observed, complete or not.',
            example:
              'https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch',
          },
          {
            name: 'password',
            level: 'extended',
            type: 'keyword',
            description: 'Password of the request.',
          },
          {
            name: 'path',
            level: 'extended',
            type: 'keyword',
            description: 'Path of the request, such as "/search".',
          },
          {
            name: 'port',
            level: 'extended',
            type: 'long',
            format: 'string',
            description: 'Port of the request, such as 443.',
            example: 443,
          },
          {
            name: 'query',
            level: 'extended',
            type: 'keyword',
            description:
              'The query field describes the query string of the request, such\nas "q=elasticsearch".\n\nThe `?` is excluded from the query string. If a URL contains no `?`, there\nis no query field. If there is a `?` but no query, the query field exists\nwith an empty string. The `exists` query can be used to differentiate between\nthe two cases.',
          },
          {
            name: 'scheme',
            level: 'extended',
            type: 'keyword',
            description:
              'Scheme of the request, such as "https".\n\nNote: The `:` is not part of the scheme.',
            example: 'https',
          },
          {
            name: 'username',
            level: 'extended',
            type: 'keyword',
            description: 'Username of the request.',
          },
        ],
      },
      {
        name: 'user',
        title: 'User',
        group: 2,
        description:
          'The user fields describe information about the user that is relevant\nto the event.\n\nFields can have one entry or multiple entries. If a user has more than one id,\nprovide an array that includes all of them.',
        type: 'group',
        fields: [
          {
            name: 'email',
            level: 'extended',
            type: 'keyword',
            description: 'User email address.',
          },
          {
            name: 'full_name',
            level: 'extended',
            type: 'keyword',
            description: "User's full name, if available.",
            example: 'Albert Einstein',
          },
          {
            name: 'group.id',
            level: 'extended',
            type: 'keyword',
            description: 'Unique identifier for the group on the system/platform.',
          },
          {
            name: 'group.name',
            level: 'extended',
            type: 'keyword',
            description: 'Name of the group.',
          },
          {
            name: 'hash',
            level: 'extended',
            type: 'keyword',
            description:
              'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
          },
          {
            name: 'id',
            level: 'core',
            type: 'keyword',
            description: 'One or multiple unique identifiers of the user.',
          },
          {
            name: 'name',
            level: 'core',
            type: 'keyword',
            description: 'Short name or login of the user.',
            example: 'albert',
          },
        ],
      },
      {
        name: 'user_agent',
        title: 'User agent',
        group: 2,
        description:
          'The user_agent fields normally come from a browser request.\n\nThey often show up in web service logs coming from the parsed user agent string.',
        type: 'group',
        fields: [
          {
            name: 'device.name',
            level: 'extended',
            type: 'keyword',
            description: 'Name of the device.',
            example: 'iPhone',
          },
          {
            name: 'name',
            level: 'extended',
            type: 'keyword',
            description: 'Name of the user agent.',
            example: 'Safari',
          },
          {
            name: 'original',
            level: 'extended',
            type: 'keyword',
            description: 'Unparsed version of the user_agent.',
            example:
              'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15\n(KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1',
          },
          {
            name: 'os.family',
            level: 'extended',
            type: 'keyword',
            description: 'OS family (such as redhat, debian, freebsd, windows).',
            example: 'debian',
          },
          {
            name: 'os.full',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system name, including the version or code name.',
            example: 'Mac OS Mojave',
          },
          {
            name: 'os.kernel',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system kernel version as a raw string.',
            example: '4.4.0-112-generic',
          },
          {
            name: 'os.name',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system name, without the version.',
            example: 'Mac OS X',
          },
          {
            name: 'os.platform',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system platform (such centos, ubuntu, windows).',
            example: 'darwin',
          },
          {
            name: 'os.version',
            level: 'extended',
            type: 'keyword',
            description: 'Operating system version as a raw string.',
            example: '10.14.1',
          },
          {
            name: 'version',
            level: 'extended',
            type: 'keyword',
            description: 'Version of the user agent.',
            example: 12,
          },
        ],
      },
    ],
  },
  {
    key: 'beat',
    title: 'Beat',
    description: 'Contains common beat fields available in all event types.\n',
    fields: [
      {
        name: 'agent.hostname',
        type: 'keyword',
        description: 'Hostname of the agent.',
      },
      {
        name: 'beat.timezone',
        type: 'alias',
        path: 'event.timezone',
        migration: true,
      },
      {
        name: 'fields',
        type: 'object',
        object_type: 'keyword',
        description: 'Contains user configurable fields.\n',
      },
      {
        name: 'error',
        type: 'group',
        description: 'Error fields containing additional info in case of errors.\n',
        fields: [
          {
            name: 'type',
            type: 'keyword',
            description: 'Error type.\n',
          },
        ],
      },
      {
        name: 'beat.name',
        type: 'alias',
        path: 'host.name',
        migration: true,
      },
      {
        name: 'beat.hostname',
        type: 'alias',
        path: 'agent.hostname',
        migration: true,
      },
      {
        name: 'timeseries.instance',
        type: 'keyword',
        description: 'Time series instance id',
      },
    ],
  },
  {
    key: 'cloud',
    title: 'Cloud provider metadata',
    description: 'Metadata from cloud providers added by the add_cloud_metadata processor.\n',
    fields: [
      {
        name: 'cloud.project.id',
        example: 'project-x',
        description: 'Name of the project in Google Cloud.\n',
      },
      {
        name: 'meta.cloud.provider',
        type: 'alias',
        path: 'cloud.provider',
        migration: true,
      },
      {
        name: 'meta.cloud.instance_id',
        type: 'alias',
        path: 'cloud.instance.id',
        migration: true,
      },
      {
        name: 'meta.cloud.instance_name',
        type: 'alias',
        path: 'cloud.instance.name',
        migration: true,
      },
      {
        name: 'meta.cloud.machine_type',
        type: 'alias',
        path: 'cloud.machine.type',
        migration: true,
      },
      {
        name: 'meta.cloud.availability_zone',
        type: 'alias',
        path: 'cloud.availability_zone',
        migration: true,
      },
      {
        name: 'meta.cloud.project_id',
        type: 'alias',
        path: 'cloud.project.id',
        migration: true,
      },
      {
        name: 'meta.cloud.region',
        type: 'alias',
        path: 'cloud.region',
        migration: true,
      },
    ],
  },
  {
    key: 'docker',
    title: 'Docker',
    description: 'Docker stats collected from Docker.\n',
    short_config: false,
    anchor: 'docker-processor',
    fields: [
      {
        name: 'docker',
        type: 'group',
        fields: [
          {
            name: 'container.id',
            type: 'alias',
            path: 'container.id',
            migration: true,
          },
          {
            name: 'container.image',
            type: 'alias',
            path: 'container.image.name',
            migration: true,
          },
          {
            name: 'container.name',
            type: 'alias',
            path: 'container.name',
            migration: true,
          },
          {
            name: 'container.labels',
            type: 'object',
            object_type: 'keyword',
            description: 'Image labels.\n',
          },
        ],
      },
    ],
  },
  {
    key: 'host',
    title: 'Host',
    description: 'Info collected for the host machine.\n',
    anchor: 'host-processor',
    fields: [
      {
        name: 'host',
        type: 'group',
        fields: [
          {
            name: 'containerized',
            type: 'boolean',
            description: 'If the host is a container.\n',
          },
          {
            name: 'os.build',
            type: 'keyword',
            example: '18D109',
            description: 'OS build information.\n',
          },
          {
            name: 'os.codename',
            type: 'keyword',
            example: 'stretch',
            description: 'OS codename, if any.\n',
          },
        ],
      },
    ],
  },
  {
    key: 'kubernetes',
    title: 'Kubernetes',
    description: 'Kubernetes metadata added by the kubernetes processor\n',
    short_config: false,
    anchor: 'kubernetes-processor',
    fields: [
      {
        name: 'kubernetes',
        type: 'group',
        fields: [
          {
            name: 'pod.name',
            type: 'keyword',
            description: 'Kubernetes pod name\n',
          },
          {
            name: 'pod.uid',
            type: 'keyword',
            description: 'Kubernetes Pod UID\n',
          },
          {
            name: 'namespace',
            type: 'keyword',
            description: 'Kubernetes namespace\n',
          },
          {
            name: 'node.name',
            type: 'keyword',
            description: 'Kubernetes node name\n',
          },
          {
            name: 'labels',
            type: 'object',
            description: 'Kubernetes labels map\n',
          },
          {
            name: 'annotations',
            type: 'object',
            description: 'Kubernetes annotations map\n',
          },
          {
            name: 'replicaset.name',
            type: 'keyword',
            description: 'Kubernetes replicaset name\n',
          },
          {
            name: 'deployment.name',
            type: 'keyword',
            description: 'Kubernetes deployment name\n',
          },
          {
            name: 'statefulset.name',
            type: 'keyword',
            description: 'Kubernetes statefulset name\n',
          },
          {
            name: 'container.name',
            type: 'keyword',
            description: 'Kubernetes container name\n',
          },
          {
            name: 'container.image',
            type: 'keyword',
            description: 'Kubernetes container image\n',
          },
        ],
      },
    ],
  },
  {
    key: 'process',
    title: 'Process',
    description: 'Process metadata fields\n',
    fields: [
      {
        name: 'process',
        type: 'group',
        fields: [
          {
            name: 'exe',
            type: 'alias',
            path: 'process.executable',
            migration: true,
          },
        ],
      },
    ],
  },
  {
    key: 'jolokia-autodiscover',
    title: 'Jolokia Discovery autodiscover provider',
    description: 'Metadata from Jolokia Discovery added by the jolokia provider.\n',
    fields: [
      {
        name: 'jolokia.agent.version',
        type: 'keyword',
        description: 'Version number of jolokia agent.\n',
      },
      {
        name: 'jolokia.agent.id',
        type: 'keyword',
        description:
          'Each agent has a unique id which can be either provided during startup of the agent in form of a configuration parameter or being autodetected. If autodected, the id has several parts: The IP, the process id, hashcode of the agent and its type.\n',
      },
      {
        name: 'jolokia.server.product',
        type: 'keyword',
        description: 'The container product if detected.\n',
      },
      {
        name: 'jolokia.server.version',
        type: 'keyword',
        description: "The container's version (if detected).\n",
      },
      {
        name: 'jolokia.server.vendor',
        type: 'keyword',
        description: 'The vendor of the container the agent is running in.\n',
      },
      {
        name: 'jolokia.url',
        type: 'keyword',
        description: 'The URL how this agent can be contacted.\n',
      },
      {
        name: 'jolokia.secured',
        type: 'boolean',
        description: 'Whether the agent was configured for authentication or not.\n',
      },
    ],
  },
  {
    key: 'winlog',
    title: 'Windows Event Log fields emitted by Winlogbeat',
    description: 'Fields from the Windows Event Log.\n',
    fields: [
      {
        name: 'log.file.path',
        type: 'keyword',
        required: false,
        description:
          'The name of the file the event was read from when Winlogbeat is reading directly from an .evtx file.\n',
      },
      {
        name: 'event.code',
        type: 'keyword',
        required: false,
        description: 'The code for this log message (Windows event ID).\n',
      },
      {
        name: 'event.original',
        description:
          'The raw XML representation of the event obtained from Windows. This field is only available on operating systems supporting the Windows Event Log API (Microsoft Windows Vista and newer). This field is not included by default and must be enabled by setting `include_xml: true` as a configuration option for an individual event log.\nThe XML representation of the event is useful for troubleshooting purposes. The data in the fields reported by Winlogbeat can be compared to the data in the XML to diagnose problems.\n',
      },
      {
        name: 'winlog',
        type: 'group',
        description: 'All fields specific to the Windows Event Log are defined here.\n',
        fields: [
          {
            name: 'api',
            required: true,
            description:
              'The event log API type used to read the record. The possible values are "wineventlog" for the Windows Event Log API or "eventlogging" for the Event Logging API.\nThe Event Logging API was designed for Windows Server 2003 or Windows 2000 operating systems. In Windows Vista, the event logging infrastructure was redesigned. On Windows Vista or later operating systems, the Windows Event Log API is used. Winlogbeat automatically detects which API to use for reading event logs.\n',
          },
          {
            name: 'activity_id',
            type: 'keyword',
            required: false,
            description:
              'A globally unique identifier that identifies the current activity. The events that are published with this identifier are part of the same activity.\n',
          },
          {
            name: 'computer_name',
            type: 'keyword',
            required: true,
            description:
              'The name of the computer that generated the record. When using Windows event forwarding, this name can differ from `agent.hostname`.\n',
          },
          {
            name: 'event_data',
            type: 'object',
            object_type: 'keyword',
            required: false,
            description:
              'The event-specific data. This field is mutually exclusive with `user_data`. If you are capturing event data on versions prior to Windows Vista, the parameters in `event_data` are named `param1`, `param2`, and so on, because event log parameters are unnamed in earlier versions of Windows.\n',
          },
          {
            name: 'event_id',
            type: 'keyword',
            required: true,
            description:
              'The event identifier. The value is specific to the source of the event.\n',
          },
          {
            name: 'keywords',
            type: 'keyword',
            required: false,
            description: 'The keywords are used to classify an event.\n',
          },
          {
            name: 'channel',
            type: 'keyword',
            required: true,
            description:
              'The name of the channel from which this record was read. This value is one of the names from the `event_logs` collection in the configuration.\n',
          },
          {
            name: 'record_id',
            type: 'keyword',
            required: true,
            description:
              'The record ID of the event log record. The first record written to an event log is record number 1, and other records are numbered sequentially. If the record number reaches the maximum value (2^32^ for the Event Logging API and 2^64^ for the Windows Event Log API), the next record number will be 0.\n',
          },
          {
            name: 'related_activity_id',
            type: 'keyword',
            required: false,
            description:
              'A globally unique identifier that identifies the activity to which control was transferred to. The related events would then have this identifier as their `activity_id` identifier.\n',
          },
          {
            name: 'opcode',
            type: 'keyword',
            required: false,
            description:
              'The opcode defined in the event. Task and opcode are typically used to identify the location in the application from where the event was logged.\n',
          },
          {
            name: 'provider_guid',
            type: 'keyword',
            required: false,
            description:
              'A globally unique identifier that identifies the provider that logged the event.\n',
          },
          {
            name: 'process.pid',
            type: 'long',
            required: false,
            description: 'The process_id of the Client Server Runtime Process.\n',
          },
          {
            name: 'provider_name',
            type: 'keyword',
            required: true,
            description:
              'The source of the event log record (the application or service that logged the record).\n',
          },
          {
            name: 'task',
            type: 'keyword',
            required: false,
            description:
              'The task defined in the event. Task and opcode are typically used to identify the location in the application from where the event was logged. The category used by the Event Logging API (on pre Windows Vista operating systems) is written to this field.\n',
          },
          {
            name: 'process.thread.id',
            type: 'long',
            required: false,
          },
          {
            name: 'user_data',
            type: 'object',
            object_type: 'keyword',
            required: false,
            description:
              'The event specific data. This field is mutually exclusive with `event_data`.\n',
          },
          {
            name: 'user.identifier',
            type: 'keyword',
            required: false,
            example: 'S-1-5-21-3541430928-2051711210-1391384369-1001',
            description:
              'The Windows security identifier (SID) of the account associated with this event.\n\nIf Winlogbeat cannot resolve the SID to a name, then the `user.name`, `user.domain`, and `user.type` fields will be omitted from the event. If you discover Winlogbeat not resolving SIDs, review the log for clues as to what the problem may be.\n',
          },
          {
            name: 'user.domain',
            type: 'keyword',
            required: false,
            description: 'The domain that the account associated with this event is a member of.\n',
          },
          {
            name: 'user.type',
            type: 'keyword',
            required: false,
            description: 'The type of account associated with this event.\n',
          },
          {
            name: 'version',
            type: 'long',
            required: false,
            description: "The version number of the event's definition.",
          },
        ],
      },
    ],
  },
  {
    key: 'eventlog',
    title: 'Event log record',
    description: 'Contains data from a Windows event log record.\n',
    fields: [
      {
        name: 'type',
        type: 'alias',
        path: 'winlog.api',
        migration: true,
      },
      {
        name: 'activity_id',
        type: 'alias',
        path: 'winlog.activity_id',
        migration: true,
      },
      {
        name: 'computer_name',
        type: 'alias',
        path: 'winlog.computer_name',
        migration: true,
      },
      {
        name: 'event_id',
        type: 'alias',
        path: 'winlog.event_id',
        migration: true,
      },
      {
        name: 'keywords',
        type: 'alias',
        path: 'winlog.keywords',
        migration: true,
      },
      {
        name: 'log_name',
        type: 'alias',
        path: 'winlog.channel',
        migration: true,
      },
      {
        name: 'message_error',
        type: 'alias',
        path: 'error.message',
        migration: true,
      },
      {
        name: 'record_number',
        type: 'alias',
        path: 'winlog.record_id',
        migration: true,
      },
      {
        name: 'related_activity_id',
        type: 'alias',
        path: 'winlog.related_activity_id',
        migration: true,
      },
      {
        name: 'opcode',
        type: 'alias',
        path: 'winlog.opcode',
        migration: true,
      },
      {
        name: 'provider_guid',
        type: 'alias',
        path: 'winlog.provider_guid',
        migration: true,
      },
      {
        name: 'process_id',
        type: 'alias',
        path: 'winlog.process.pid',
        migration: true,
      },
      {
        name: 'source_name',
        type: 'alias',
        path: 'winlog.provider_name',
        migration: true,
      },
      {
        name: 'task',
        type: 'alias',
        path: 'winlog.task',
        migration: true,
      },
      {
        name: 'thread_id',
        type: 'alias',
        path: 'winlog.process.thread.id',
        migration: true,
      },
      {
        name: 'user.identifier',
        type: 'alias',
        path: 'winlog.user.identifier',
        migration: true,
      },
      {
        name: 'user.domain',
        type: 'alias',
        path: 'winlog.user.domain',
        migration: true,
      },
      {
        name: 'user.type',
        type: 'alias',
        path: 'winlog.user.type',
        migration: true,
      },
      {
        name: 'version',
        type: 'alias',
        path: 'winlog.version',
        migration: true,
      },
      {
        name: 'xml',
        type: 'alias',
        path: 'event.original',
        migration: true,
      },
    ],
  },
];
