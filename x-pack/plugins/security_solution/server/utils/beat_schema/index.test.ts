/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import { cloneDeep, isArray } from 'lodash/fp';

import { convertSchemaToAssociativeArray, getIndexSchemaDoc, getIndexAlias } from '.';
import { auditbeatSchema, filebeatSchema, packetbeatSchema } from './8.0.0';
import { Schema } from './type';

describe('Schema Beat', () => {
  describe('Transform Schema documentation to an associative array', () => {
    test('Auditbeat transformation', async () => {
      const convertData: Schema = cloneDeep(auditbeatSchema).slice(0, 1);
      convertData[0].fields = isArray(convertData[0].fields)
        ? convertData[0].fields!.slice(0, 6)
        : [];

      expect(convertSchemaToAssociativeArray(convertData)).toEqual({
        '@timestamp': {
          description:
            'Date/time when the event originated.\n\nThis is the date/time extracted from the event, typically representing when\nthe event was generated by the source.\n\nIf the event source has no original timestamp, this value is typically populated\nby the first time the event was received by the pipeline.\n\nRequired field for all events.',
          example: '2016-05-23T08:05:34.853Z',
          name: '@timestamp',
          type: 'date',
        },
        labels: {
          description:
            'Custom key/value pairs.\n\nCan be used to add meta information to events. Should not contain nested objects.\nAll values are stored as keyword.\n\nExample: `docker` and `k8s` labels.',
          example: '{"application": "foo-bar", "env": "production"}',
          name: 'labels',
          type: 'object',
        },
        message: {
          description:
            'For log events the message field contains the log message, optimized\nfor viewing in a log viewer.\n\nFor structured logs without an original message field, other fields can be concatenated\nto form a human-readable summary of the event.\n\nIf multiple messages exist, they can be combined into one message.',
          example: 'Hello World',
          name: 'message',
          type: 'text',
        },
        tags: {
          description: 'List of keywords used to tag each event.',
          example: '["production", "env2"]',
          name: 'tags',
          type: 'keyword',
        },
        agent: {
          description:
            'The agent fields contain the data about the software entity, if\nany, that collects, detects, or observes events on a host, or takes measurements\non a host.\n\nExamples include Beats. Agents may also run on observers. ECS agent.* fields\nshall be populated with details of the agent running on the host or observer\nwhere the event happened or the measurement was taken.',
          name: 'agent',
          type: 'group',
          fields: {
            'agent.ephemeral_id': {
              description:
                'Ephemeral identifier of this agent (if one exists).\n\nThis id normally changes across restarts, but `agent.id` does not.',
              example: '8a4f500f',
              name: 'ephemeral_id',
              type: 'keyword',
            },
            'agent.id': {
              description:
                'Unique identifier of this agent (if one exists).\n\nExample: For Beats this would be beat.id.',
              example: '8a4f500d',
              name: 'id',
              type: 'keyword',
            },
            'agent.name': {
              description:
                'Custom name of the agent.\n\nThis is a name that can be given to an agent. This can be helpful if for example\ntwo Filebeat instances are running on the same host but a human readable separation\nis needed on which Filebeat instance data is coming from.\n\nIf no name is given, the name is often left empty.',
              example: 'foo',
              name: 'name',
              type: 'keyword',
            },
            'agent.type': {
              description:
                'Type of the agent.\n\nThe agent type stays always the same and should be given by the agent used.\nIn case of Filebeat the agent would always be Filebeat also if two Filebeat\ninstances are run on the same machine.',
              example: 'filebeat',
              name: 'type',
              type: 'keyword',
            },
            'agent.version': {
              description: 'Version of the agent.',
              example: '6.0.0-rc2',
              name: 'version',
              type: 'keyword',
            },
          },
        },
        as: {
          description:
            'An autonomous system (AS) is a collection of connected Internet Protocol\n(IP) routing prefixes under the control of one or more network operators on\nbehalf of a single administrative entity or domain that presents a common, clearly\ndefined routing policy to the internet.',
          name: 'as',
          type: 'group',
          fields: {
            'as.number': {
              description:
                'Unique number allocated to the autonomous system. The autonomous\nsystem number (ASN) uniquely identifies each network on the Internet.',
              example: 15169,
              name: 'number',
              type: 'long',
            },
            'as.organization.name': {
              description: 'Organization name.',
              example: 'Google LLC',
              name: 'organization.name',
              type: 'keyword',
            },
          },
        },
      });
    });

    test('Filebeat transformation', async () => {
      const convertData: Schema = cloneDeep(filebeatSchema).slice(0, 1);
      convertData[0].fields = isArray(convertData[0].fields)
        ? convertData[0].fields!.slice(0, 6)
        : [];

      expect(convertSchemaToAssociativeArray(convertData)).toEqual({
        '@timestamp': {
          description:
            'Date/time when the event originated.\n\nThis is the date/time extracted from the event, typically representing when\nthe event was generated by the source.\n\nIf the event source has no original timestamp, this value is typically populated\nby the first time the event was received by the pipeline.\n\nRequired field for all events.',
          example: '2016-05-23T08:05:34.853Z',
          name: '@timestamp',
          type: 'date',
        },
        labels: {
          description:
            'Custom key/value pairs.\n\nCan be used to add meta information to events. Should not contain nested objects.\nAll values are stored as keyword.\n\nExample: `docker` and `k8s` labels.',
          example: '{"application": "foo-bar", "env": "production"}',
          name: 'labels',
          type: 'object',
        },
        message: {
          description:
            'For log events the message field contains the log message, optimized\nfor viewing in a log viewer.\n\nFor structured logs without an original message field, other fields can be concatenated\nto form a human-readable summary of the event.\n\nIf multiple messages exist, they can be combined into one message.',
          example: 'Hello World',
          name: 'message',
          type: 'text',
        },
        tags: {
          description: 'List of keywords used to tag each event.',
          example: '["production", "env2"]',
          name: 'tags',
          type: 'keyword',
        },
        agent: {
          description:
            'The agent fields contain the data about the software entity, if\nany, that collects, detects, or observes events on a host, or takes measurements\non a host.\n\nExamples include Beats. Agents may also run on observers. ECS agent.* fields\nshall be populated with details of the agent running on the host or observer\nwhere the event happened or the measurement was taken.',
          name: 'agent',
          type: 'group',
          fields: {
            'agent.ephemeral_id': {
              description:
                'Ephemeral identifier of this agent (if one exists).\n\nThis id normally changes across restarts, but `agent.id` does not.',
              example: '8a4f500f',
              name: 'ephemeral_id',
              type: 'keyword',
            },
            'agent.id': {
              description:
                'Unique identifier of this agent (if one exists).\n\nExample: For Beats this would be beat.id.',
              example: '8a4f500d',
              name: 'id',
              type: 'keyword',
            },
            'agent.name': {
              description:
                'Custom name of the agent.\n\nThis is a name that can be given to an agent. This can be helpful if for example\ntwo Filebeat instances are running on the same host but a human readable separation\nis needed on which Filebeat instance data is coming from.\n\nIf no name is given, the name is often left empty.',
              example: 'foo',
              name: 'name',
              type: 'keyword',
            },
            'agent.type': {
              description:
                'Type of the agent.\n\nThe agent type stays always the same and should be given by the agent used.\nIn case of Filebeat the agent would always be Filebeat also if two Filebeat\ninstances are run on the same machine.',
              example: 'filebeat',
              name: 'type',
              type: 'keyword',
            },
            'agent.version': {
              description: 'Version of the agent.',
              example: '6.0.0-rc2',
              name: 'version',
              type: 'keyword',
            },
          },
        },
        as: {
          description:
            'An autonomous system (AS) is a collection of connected Internet Protocol\n(IP) routing prefixes under the control of one or more network operators on\nbehalf of a single administrative entity or domain that presents a common, clearly\ndefined routing policy to the internet.',
          name: 'as',
          type: 'group',
          fields: {
            'as.number': {
              description:
                'Unique number allocated to the autonomous system. The autonomous\nsystem number (ASN) uniquely identifies each network on the Internet.',
              example: 15169,
              name: 'number',
              type: 'long',
            },
            'as.organization.name': {
              description: 'Organization name.',
              example: 'Google LLC',
              name: 'organization.name',
              type: 'keyword',
            },
          },
        },
      });
    });

    test('Packetbeat transformation', async () => {
      const convertData: Schema = cloneDeep(packetbeatSchema).slice(0, 1);
      convertData[0].fields = isArray(convertData[0].fields)
        ? convertData[0].fields!.slice(0, 6)
        : [];

      expect(convertSchemaToAssociativeArray(convertData)).toEqual({
        '@timestamp': {
          description:
            'Date/time when the event originated.\n\nThis is the date/time extracted from the event, typically representing when\nthe event was generated by the source.\n\nIf the event source has no original timestamp, this value is typically populated\nby the first time the event was received by the pipeline.\n\nRequired field for all events.',
          example: '2016-05-23T08:05:34.853Z',
          name: '@timestamp',
          type: 'date',
        },
        labels: {
          description:
            'Custom key/value pairs.\n\nCan be used to add meta information to events. Should not contain nested objects.\nAll values are stored as keyword.\n\nExample: `docker` and `k8s` labels.',
          example: '{"application": "foo-bar", "env": "production"}',
          name: 'labels',
          type: 'object',
        },
        message: {
          description:
            'For log events the message field contains the log message, optimized\nfor viewing in a log viewer.\n\nFor structured logs without an original message field, other fields can be concatenated\nto form a human-readable summary of the event.\n\nIf multiple messages exist, they can be combined into one message.',
          example: 'Hello World',
          name: 'message',
          type: 'text',
        },
        tags: {
          description: 'List of keywords used to tag each event.',
          example: '["production", "env2"]',
          name: 'tags',
          type: 'keyword',
        },
        agent: {
          description:
            'The agent fields contain the data about the software entity, if\nany, that collects, detects, or observes events on a host, or takes measurements\non a host.\n\nExamples include Beats. Agents may also run on observers. ECS agent.* fields\nshall be populated with details of the agent running on the host or observer\nwhere the event happened or the measurement was taken.',
          name: 'agent',
          type: 'group',
          fields: {
            'agent.ephemeral_id': {
              description:
                'Ephemeral identifier of this agent (if one exists).\n\nThis id normally changes across restarts, but `agent.id` does not.',
              example: '8a4f500f',
              name: 'ephemeral_id',
              type: 'keyword',
            },
            'agent.id': {
              description:
                'Unique identifier of this agent (if one exists).\n\nExample: For Beats this would be beat.id.',
              example: '8a4f500d',
              name: 'id',
              type: 'keyword',
            },
            'agent.name': {
              description:
                'Custom name of the agent.\n\nThis is a name that can be given to an agent. This can be helpful if for example\ntwo Filebeat instances are running on the same host but a human readable separation\nis needed on which Filebeat instance data is coming from.\n\nIf no name is given, the name is often left empty.',
              example: 'foo',
              name: 'name',
              type: 'keyword',
            },
            'agent.type': {
              description:
                'Type of the agent.\n\nThe agent type stays always the same and should be given by the agent used.\nIn case of Filebeat the agent would always be Filebeat also if two Filebeat\ninstances are run on the same machine.',
              example: 'filebeat',
              name: 'type',
              type: 'keyword',
            },
            'agent.version': {
              description: 'Version of the agent.',
              example: '6.0.0-rc2',
              name: 'version',
              type: 'keyword',
            },
          },
        },
        as: {
          description:
            'An autonomous system (AS) is a collection of connected Internet Protocol\n(IP) routing prefixes under the control of one or more network operators on\nbehalf of a single administrative entity or domain that presents a common, clearly\ndefined routing policy to the internet.',
          name: 'as',
          type: 'group',
          fields: {
            'as.number': {
              description:
                'Unique number allocated to the autonomous system. The autonomous\nsystem number (ASN) uniquely identifies each network on the Internet.',
              example: 15169,
              name: 'number',
              type: 'long',
            },
            'as.organization.name': {
              description: 'Organization name.',
              example: 'Google LLC',
              name: 'organization.name',
              type: 'keyword',
            },
          },
        },
      });
    });
  });

  describe('GetIndexSchemaDoc', () => {
    test('Filebeat transformation', async () => {
      expect(Object.keys(getIndexSchemaDoc('auditbeat'))).toEqual([
        '_id',
        '_index',
        '@timestamp',
        'labels',
        'message',
        'tags',
        'agent',
        'as',
        'client',
        'cloud',
        'code_signature',
        'container',
        'destination',
        'dll',
        'dns',
        'ecs',
        'error',
        'event',
        'file',
        'geo',
        'group',
        'hash',
        'host',
        'http',
        'interface',
        'log',
        'network',
        'observer',
        'organization',
        'os',
        'package',
        'pe',
        'process',
        'registry',
        'related',
        'rule',
        'server',
        'service',
        'source',
        'threat',
        'tls',
        'tracing',
        'url',
        'user',
        'user_agent',
        'vlan',
        'vulnerability',
        'agent.hostname',
        'beat.timezone',
        'fields',
        'beat.name',
        'beat.hostname',
        'timeseries.instance',
        'cloud.project.id',
        'cloud.image.id',
        'meta.cloud.provider',
        'meta.cloud.instance_id',
        'meta.cloud.instance_name',
        'meta.cloud.machine_type',
        'meta.cloud.availability_zone',
        'meta.cloud.project_id',
        'meta.cloud.region',
        'docker',
        'kubernetes',
        'jolokia.agent.version',
        'jolokia.agent.id',
        'jolokia.server.product',
        'jolokia.server.version',
        'jolokia.server.vendor',
        'jolokia.url',
        'jolokia.secured',
        'auditd',
        'geoip',
        'socket',
        'system.audit',
      ]);
    });
  });

  describe('getIndexAlias', () => {
    test('getIndexAlias handles values with leading wildcard', () => {
      const leadingWildcardIndex = '*-auditbeat-*';
      const result = getIndexAlias([leadingWildcardIndex], leadingWildcardIndex);
      expect(result).toBe(leadingWildcardIndex);
    });
    test('getIndexAlias no match returns "unknown" string', () => {
      const index = 'auditbeat-*';
      const result = getIndexAlias([index], 'hello');
      expect(result).toBe('unknown');
    });
  });
});
