/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
import { RequestHandler } from 'kibana/server';
import { TypeOf } from '@kbn/config-schema';
import { validateEntities } from '../../../../common/endpoint/schema/resolver';
import { ResolverEntityIndex } from '../../../../common/endpoint/types';

/**
 * This is used to get an 'entity_id' which is an internal-to-Resolver concept, from an `_id`, which
 * is the artificial ID generated by ES for each document.
 */
export function handleEntities(): RequestHandler<unknown, TypeOf<typeof validateEntities.query>> {
  return async (context, request, response) => {
    const {
      query: { _id, indices },
    } = request;

    /**
     * A safe type for the response based on the semantics of the query.
     * We specify _source, asking for `process.entity_id` and we only
     * accept documents that have it.
     * Also, we only request 1 document.
     */
    interface ExpectedQueryResponse {
      hits: {
        hits:
          | []
          | [
              {
                _source: {
                  process: {
                    entity_id: string;
                  };
                };
              }
            ];
      };
    }

    const queryResponse: ExpectedQueryResponse = await context.core.elasticsearch.legacy.client.callAsCurrentUser(
      'search',
      {
        index: indices,
        body: {
          // only return process.entity_id
          _source: 'process.entity_id',
          // only return 1 match at most
          size: 1,
          query: {
            bool: {
              filter: [
                {
                  // only return documents with the matching _id
                  ids: {
                    values: _id,
                  },
                },
                {
                  exists: {
                    // only return documents that have process.entity_id
                    field: 'process.entity_id',
                  },
                },
              ],
            },
          },
        },
      }
    );

    const responseBody: ResolverEntityIndex = [];
    for (const {
      _source: {
        process: { entity_id },
      },
    } of queryResponse.hits.hits) {
      responseBody.push({
        entity_id,
      });
    }
    return response.ok({ body: responseBody });
  };
}
