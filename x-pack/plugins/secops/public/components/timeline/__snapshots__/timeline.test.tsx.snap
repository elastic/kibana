// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Timeline rendering renders correctly against snapshot 1`] = `
<Component
  addNoteToEvent={[MockFunction]}
  columnHeaders={
    Array [
      Object {
        "category": "base",
        "columnHeaderType": "not-filtered",
        "description": "Date/time when the event originated.
For log events this is the date/time when the event was generated, and not when it was read.
Required field for all events.",
        "example": "2016-05-23T08:05:34.853Z",
        "id": "@timestamp",
        "type": "date",
        "width": 240,
      },
      Object {
        "category": "event",
        "columnHeaderType": "not-filtered",
        "description": "Severity describes the severity of the event. What the different severity values mean can very different between use cases. It's up to the implementer to make sure severities are consistent across events.",
        "example": "7",
        "id": "event.severity",
        "type": "long",
        "width": 180,
      },
      Object {
        "category": "event",
        "columnHeaderType": "not-filtered",
        "description": "Event category.
This contains high-level information about the contents of the event. It is more generic than \`event.action\`, in the sense that typically a category contains multiple actions. Warning: In future versions of ECS, we plan to provide a list of acceptable values for this field, please use with caution.",
        "example": "user-management",
        "id": "event.category",
        "type": "keyword",
        "width": 180,
      },
      Object {
        "category": "event",
        "columnHeaderType": "not-filtered",
        "description": "The action captured by the event.
This describes the information in the event. It is more specific than \`event.category\`. Examples are \`group-add\`, \`process-started\`, \`file-created\`. The value is normally defined by the implementer.",
        "example": "user-password-change",
        "id": "event.action",
        "type": "keyword",
        "width": 180,
      },
      Object {
        "category": "host",
        "columnHeaderType": "not-filtered",
        "description": "Name of the host.
It can contain what \`hostname\` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.",
        "example": "",
        "id": "host.name",
        "type": "keyword",
        "width": 180,
      },
      Object {
        "category": "source",
        "columnHeaderType": "not-filtered",
        "description": "IP address of the source.
Can be one or multiple IPv4 or IPv6 addresses.",
        "example": "",
        "id": "source.ip",
        "type": "ip",
        "width": 180,
      },
      Object {
        "category": "destination",
        "columnHeaderType": "not-filtered",
        "description": "IP address of the destination.
Can be one or multiple IPv4 or IPv6 addresses.",
        "example": "",
        "id": "destination.ip",
        "type": "ip",
        "width": 180,
      },
      Object {
        "category": "user",
        "columnHeaderType": "not-filtered",
        "description": "Short name or login of the user.",
        "example": "albert",
        "id": "user.name",
        "type": "keyword",
        "width": 180,
      },
    ]
  }
  columnRenderers={
    Array [
      Object {
        "isInstance": [Function],
        "renderColumn": [Function],
      },
      Object {
        "isInstance": [Function],
        "renderColumn": [Function],
      },
      Object {
        "isInstance": [Function],
        "renderColumn": [Function],
      },
    ]
  }
  dataProviders={
    Array [
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "id-Provider 1",
        "kqlQuery": "",
        "name": "Provider 1",
        "queryDate": Object {
          "from": 1521830963132,
          "to": 1521862432253,
        },
        "queryMatch": Object {
          "field": "name",
          "value": "Provider 1",
        },
      },
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "id-Provider 2",
        "kqlQuery": "",
        "name": "Provider 2",
        "queryDate": Object {
          "from": 1521830963132,
          "to": 1521862432253,
        },
        "queryMatch": Object {
          "field": "name",
          "value": "Provider 2",
        },
      },
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "id-Provider 3",
        "kqlQuery": "",
        "name": "Provider 3",
        "queryDate": Object {
          "from": 1521830963132,
          "to": 1521862432253,
        },
        "queryMatch": Object {
          "field": "name",
          "value": "Provider 3",
        },
      },
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "id-Provider 4",
        "kqlQuery": "",
        "name": "Provider 4",
        "queryDate": Object {
          "from": 1521830963132,
          "to": 1521862432253,
        },
        "queryMatch": Object {
          "field": "name",
          "value": "Provider 4",
        },
      },
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "id-Provider 5",
        "kqlQuery": "",
        "name": "Provider 5",
        "queryDate": Object {
          "from": 1521830963132,
          "to": 1521862432253,
        },
        "queryMatch": Object {
          "field": "name",
          "value": "Provider 5",
        },
      },
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "id-Provider 6",
        "kqlQuery": "",
        "name": "Provider 6",
        "queryDate": Object {
          "from": 1521830963132,
          "to": 1521862432253,
        },
        "queryMatch": Object {
          "field": "name",
          "value": "Provider 6",
        },
      },
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "id-Provider 7",
        "kqlQuery": "",
        "name": "Provider 7",
        "queryDate": Object {
          "from": 1521830963132,
          "to": 1521862432253,
        },
        "queryMatch": Object {
          "field": "name",
          "value": "Provider 7",
        },
      },
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "id-Provider 8",
        "kqlQuery": "",
        "name": "Provider 8",
        "queryDate": Object {
          "from": 1521830963132,
          "to": 1521862432253,
        },
        "queryMatch": Object {
          "field": "name",
          "value": "Provider 8",
        },
      },
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "id-Provider 9",
        "kqlQuery": "",
        "name": "Provider 9",
        "queryDate": Object {
          "from": 1521830963132,
          "to": 1521862432253,
        },
        "queryMatch": Object {
          "field": "name",
          "value": "Provider 9",
        },
      },
      Object {
        "and": Array [],
        "enabled": true,
        "excluded": false,
        "id": "id-Provider 10",
        "kqlQuery": "",
        "name": "Provider 10",
        "queryDate": Object {
          "from": 1521830963132,
          "to": 1521862432253,
        },
        "queryMatch": Object {
          "field": "name",
          "value": "Provider 10",
        },
      },
    ]
  }
  eventIdToNoteIds={Object {}}
  flyoutHeaderHeight={48}
  flyoutHeight={980}
  getNotesByIds={[Function]}
  id="foo"
  indexPattern={
    Object {
      "fields": Array [
        Object {
          "aggregatable": true,
          "name": "@timestamp",
          "searchable": true,
          "type": "date",
        },
        Object {
          "aggregatable": true,
          "name": "@version",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.ephemeral_id",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.hostname",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.id",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.test1",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.test2",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.test3",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.test4",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.test5",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.test6",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.test7",
          "searchable": true,
          "type": "string",
        },
        Object {
          "aggregatable": true,
          "name": "agent.test8",
          "searchable": true,
          "type": "string",
        },
      ],
      "title": "filebeat-*,auditbeat-*,packetbeat-*",
    }
  }
  itemsPerPage={5}
  itemsPerPageOptions={
    Array [
      5,
      10,
      20,
    ]
  }
  kqlMode="search"
  kqlQuery=""
  onChangeDataProviderKqlQuery={[MockFunction]}
  onChangeDroppableAndProvider={[MockFunction]}
  onChangeItemsPerPage={[MockFunction]}
  onColumnRemoved={[MockFunction]}
  onColumnResized={[MockFunction]}
  onColumnSorted={[MockFunction]}
  onDataProviderRemoved={[MockFunction]}
  onFilterChange={[MockFunction]}
  onPinEvent={[MockFunction]}
  onRangeSelected={[MockFunction]}
  onToggleDataProviderEnabled={[MockFunction]}
  onToggleDataProviderExcluded={[MockFunction]}
  onUnPinEvent={[MockFunction]}
  pinnedEventIds={Object {}}
  range="1 Day"
  rowRenderers={
    Array [
      Object {
        "isInstance": [Function],
        "renderRow": [Function],
      },
      Object {
        "isInstance": [Function],
        "renderRow": [Function],
      },
      Object {
        "isInstance": [Function],
        "renderRow": [Function],
      },
    ]
  }
  show={true}
  sort={
    Object {
      "columnId": "@timestamp",
      "sortDirection": "descending",
    }
  }
  updateNote={[MockFunction]}
/>
`;
