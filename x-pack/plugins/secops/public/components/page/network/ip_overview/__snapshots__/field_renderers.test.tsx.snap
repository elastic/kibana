// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Field Renderers #autonomousSystemRenderer it renders correctly against snapshot 1`] = `
<pure(Component)>
  <Component>
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        }
      }
    >
      <ThemeProvider
        theme={[Function]}
      >
        <DragDropContext
          onDragEnd={[MockFunction]}
        >
          <EuiFlexGroup
            alignItems="center"
            gutterSize="none"
          >
            <div
              className="euiFlexGroup euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
            >
              <EuiFlexItem
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero"
                >
                  <pure(Component)
                    field="source.autonomous_system.as_org"
                    id="ip-overview-source.autonomous_system.as_org"
                    value="Test Org"
                  >
                    <Component
                      field="source.autonomous_system.as_org"
                      id="ip-overview-source.autonomous_system.as_org"
                      value="Test Org"
                    >
                      <Connect(DraggableWrapperComponent)
                        dataProvider={
                          Object {
                            "and": Array [],
                            "enabled": true,
                            "excluded": false,
                            "id": "ip-overview-source_autonomous_system_as_org",
                            "kqlQuery": "",
                            "name": "Test Org",
                            "queryMatch": Object {
                              "field": "source.autonomous_system.as_org",
                              "value": "Test Org",
                            },
                          }
                        }
                        render={[Function]}
                      >
                        <DraggableWrapperComponent
                          dataProvider={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_autonomous_system_as_org",
                              "kqlQuery": "",
                              "name": "Test Org",
                              "queryMatch": Object {
                                "field": "source.autonomous_system.as_org",
                                "value": "Test Org",
                              },
                            }
                          }
                          ip-overview-source_autonomous_system_as_org={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_autonomous_system_as_org",
                              "kqlQuery": "",
                              "name": "Test Org",
                              "queryMatch": Object {
                                "field": "source.autonomous_system.as_org",
                                "value": "Test Org",
                              },
                            }
                          }
                          ip-overview-source_autonomous_system_asn={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_autonomous_system_asn",
                              "kqlQuery": "",
                              "name": "Test ASN",
                              "queryMatch": Object {
                                "field": "source.autonomous_system.asn",
                                "value": "Test ASN",
                              },
                            }
                          }
                          registerProvider={[Function]}
                          render={[Function]}
                          unRegisterProvider={[Function]}
                        >
                          <div
                            data-test-subj="draggableWrapperDiv"
                          >
                            <Connect(Droppable)
                              direction="vertical"
                              droppableId="droppableId.content.ip-overview-source_autonomous_system_as_org"
                              ignoreContainerClipping={false}
                              isDropDisabled={true}
                              type="DEFAULT"
                            >
                              <Droppable
                                direction="vertical"
                                dispatch={[Function]}
                                draggingOverWith={null}
                                droppableId="droppableId.content.ip-overview-source_autonomous_system_as_org"
                                ignoreContainerClipping={false}
                                isDraggingOver={false}
                                isDropDisabled={true}
                                placeholder={null}
                                type="DEFAULT"
                              >
                                <DroppableDimensionPublisher
                                  direction="vertical"
                                  droppableId="droppableId.content.ip-overview-source_autonomous_system_as_org"
                                  getDroppableRef={[Function]}
                                  ignoreContainerClipping={false}
                                  isDropDisabled={true}
                                  type="DEFAULT"
                                >
                                  <div
                                    data-react-beautiful-dnd-droppable="6"
                                  >
                                    <Connect(Draggable)
                                      disableInteractiveElementBlocking={false}
                                      draggableId="draggableId.content.ip-overview-source_autonomous_system_as_org"
                                      index={0}
                                      isDragDisabled={false}
                                      key="ip-overview-source_autonomous_system_as_org"
                                    >
                                      <Draggable
                                        dimension={null}
                                        disableInteractiveElementBlocking={false}
                                        draggableId="draggableId.content.ip-overview-source_autonomous_system_as_org"
                                        draggingOver={null}
                                        drop={[Function]}
                                        dropAnimationFinished={[Function]}
                                        index={0}
                                        isDragDisabled={false}
                                        isDragging={false}
                                        isDropAnimating={false}
                                        lift={[Function]}
                                        move={[Function]}
                                        moveByWindowScroll={[Function]}
                                        moveDown={[Function]}
                                        moveLeft={[Function]}
                                        moveRight={[Function]}
                                        moveUp={[Function]}
                                        offset={
                                          Object {
                                            "x": 0,
                                            "y": 0,
                                          }
                                        }
                                        shouldAnimateDisplacement={true}
                                        shouldAnimateDragMovement={false}
                                      >
                                        <DraggableDimensionPublisher
                                          draggableId="draggableId.content.ip-overview-source_autonomous_system_as_org"
                                          droppableId="droppableId.content.ip-overview-source_autonomous_system_as_org"
                                          getDraggableRef={[Function]}
                                          index={0}
                                          key="draggableId.content.ip-overview-source_autonomous_system_as_org"
                                          type="DEFAULT"
                                        >
                                          <Moveable
                                            destination={
                                              Object {
                                                "x": 0,
                                                "y": 0,
                                              }
                                            }
                                            onMoveEnd={[Function]}
                                            speed="INSTANT"
                                          >
                                            <Motion
                                              defaultStyle={
                                                Object {
                                                  "x": 0,
                                                  "y": 0,
                                                }
                                              }
                                              onRest={[Function]}
                                              style={
                                                Object {
                                                  "x": 0,
                                                  "y": 0,
                                                }
                                              }
                                            >
                                              <DoubleRenderBlocker
                                                change={
                                                  Object {
                                                    "x": 0,
                                                    "y": 0,
                                                  }
                                                }
                                              >
                                                <DragHandle
                                                  callbacks={
                                                    Object {
                                                      "onCancel": [Function],
                                                      "onDrop": [Function],
                                                      "onLift": [Function],
                                                      "onMove": [Function],
                                                      "onMoveDown": [Function],
                                                      "onMoveLeft": [Function],
                                                      "onMoveRight": [Function],
                                                      "onMoveUp": [Function],
                                                      "onWindowScroll": [Function],
                                                    }
                                                  }
                                                  canDragInteractiveElements={false}
                                                  draggableId="draggableId.content.ip-overview-source_autonomous_system_as_org"
                                                  getDraggableRef={[Function]}
                                                  isDragging={false}
                                                  isDropAnimating={false}
                                                  isEnabled={true}
                                                >
                                                  <styled.div
                                                    aria-roledescription="Draggable item. Press space bar to lift"
                                                    data-react-beautiful-dnd-drag-handle="6"
                                                    data-react-beautiful-dnd-draggable="6"
                                                    data-test-subj="providerContainer"
                                                    draggable={false}
                                                    innerRef={[Function]}
                                                    onBlur={[Function]}
                                                    onDragStart={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onMouseDown={[Function]}
                                                    onTouchStart={[Function]}
                                                    style={
                                                      Object {
                                                        "transform": null,
                                                        "transition": null,
                                                        "zIndex": 9000,
                                                      }
                                                    }
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-roledescription="Draggable item. Press space bar to lift"
                                                      className="sc-kEYyzF eIecMG"
                                                      data-react-beautiful-dnd-drag-handle="6"
                                                      data-react-beautiful-dnd-draggable="6"
                                                      data-test-subj="providerContainer"
                                                      draggable={false}
                                                      onBlur={[Function]}
                                                      onDragStart={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                      style={
                                                        Object {
                                                          "transform": null,
                                                          "transition": null,
                                                          "zIndex": 9000,
                                                        }
                                                      }
                                                      tabIndex={0}
                                                    >
                                                      <EuiText
                                                        data-test-subj="draggable-content"
                                                        grow={true}
                                                        size="s"
                                                      >
                                                        <div
                                                          className="euiText euiText--small"
                                                          data-test-subj="draggable-content"
                                                        >
                                                          <pure(Component)
                                                            field="source.autonomous_system.as_org"
                                                            value="Test Org"
                                                          >
                                                            <Component
                                                              field="source.autonomous_system.as_org"
                                                              value="Test Org"
                                                            >
                                                              <EuiToolTip
                                                                content="source.autonomous_system.as_org"
                                                                data-test-subj="source.autonomous_system.as_org-tooltip"
                                                                delay="regular"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                >
                                                                  Test Org
                                                                </span>
                                                              </EuiToolTip>
                                                            </Component>
                                                          </pure(Component)>
                                                        </div>
                                                      </EuiText>
                                                    </div>
                                                  </styled.div>
                                                </DragHandle>
                                              </DoubleRenderBlocker>
                                            </Motion>
                                          </Moveable>
                                        </DraggableDimensionPublisher>
                                      </Draggable>
                                    </Connect(Draggable)>
                                  </div>
                                </DroppableDimensionPublisher>
                              </Droppable>
                            </Connect(Droppable)>
                          </div>
                        </DraggableWrapperComponent>
                      </Connect(DraggableWrapperComponent)>
                    </Component>
                  </pure(Component)>
                   
                  /
                  <pure(Component)
                    field="source.autonomous_system.asn"
                    id="ip-overview-source.autonomous_system.asn"
                    value="Test ASN"
                  >
                    <Component
                      field="source.autonomous_system.asn"
                      id="ip-overview-source.autonomous_system.asn"
                      value="Test ASN"
                    >
                      <Connect(DraggableWrapperComponent)
                        dataProvider={
                          Object {
                            "and": Array [],
                            "enabled": true,
                            "excluded": false,
                            "id": "ip-overview-source_autonomous_system_asn",
                            "kqlQuery": "",
                            "name": "Test ASN",
                            "queryMatch": Object {
                              "field": "source.autonomous_system.asn",
                              "value": "Test ASN",
                            },
                          }
                        }
                        render={[Function]}
                      >
                        <DraggableWrapperComponent
                          dataProvider={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_autonomous_system_asn",
                              "kqlQuery": "",
                              "name": "Test ASN",
                              "queryMatch": Object {
                                "field": "source.autonomous_system.asn",
                                "value": "Test ASN",
                              },
                            }
                          }
                          ip-overview-source_autonomous_system_as_org={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_autonomous_system_as_org",
                              "kqlQuery": "",
                              "name": "Test Org",
                              "queryMatch": Object {
                                "field": "source.autonomous_system.as_org",
                                "value": "Test Org",
                              },
                            }
                          }
                          ip-overview-source_autonomous_system_asn={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_autonomous_system_asn",
                              "kqlQuery": "",
                              "name": "Test ASN",
                              "queryMatch": Object {
                                "field": "source.autonomous_system.asn",
                                "value": "Test ASN",
                              },
                            }
                          }
                          registerProvider={[Function]}
                          render={[Function]}
                          unRegisterProvider={[Function]}
                        >
                          <div
                            data-test-subj="draggableWrapperDiv"
                          >
                            <Connect(Droppable)
                              direction="vertical"
                              droppableId="droppableId.content.ip-overview-source_autonomous_system_asn"
                              ignoreContainerClipping={false}
                              isDropDisabled={true}
                              type="DEFAULT"
                            >
                              <Droppable
                                direction="vertical"
                                dispatch={[Function]}
                                draggingOverWith={null}
                                droppableId="droppableId.content.ip-overview-source_autonomous_system_asn"
                                ignoreContainerClipping={false}
                                isDraggingOver={false}
                                isDropDisabled={true}
                                placeholder={null}
                                type="DEFAULT"
                              >
                                <DroppableDimensionPublisher
                                  direction="vertical"
                                  droppableId="droppableId.content.ip-overview-source_autonomous_system_asn"
                                  getDroppableRef={[Function]}
                                  ignoreContainerClipping={false}
                                  isDropDisabled={true}
                                  type="DEFAULT"
                                >
                                  <div
                                    data-react-beautiful-dnd-droppable="6"
                                  >
                                    <Connect(Draggable)
                                      disableInteractiveElementBlocking={false}
                                      draggableId="draggableId.content.ip-overview-source_autonomous_system_asn"
                                      index={0}
                                      isDragDisabled={false}
                                      key="ip-overview-source_autonomous_system_asn"
                                    >
                                      <Draggable
                                        dimension={null}
                                        disableInteractiveElementBlocking={false}
                                        draggableId="draggableId.content.ip-overview-source_autonomous_system_asn"
                                        draggingOver={null}
                                        drop={[Function]}
                                        dropAnimationFinished={[Function]}
                                        index={0}
                                        isDragDisabled={false}
                                        isDragging={false}
                                        isDropAnimating={false}
                                        lift={[Function]}
                                        move={[Function]}
                                        moveByWindowScroll={[Function]}
                                        moveDown={[Function]}
                                        moveLeft={[Function]}
                                        moveRight={[Function]}
                                        moveUp={[Function]}
                                        offset={
                                          Object {
                                            "x": 0,
                                            "y": 0,
                                          }
                                        }
                                        shouldAnimateDisplacement={true}
                                        shouldAnimateDragMovement={false}
                                      >
                                        <DraggableDimensionPublisher
                                          draggableId="draggableId.content.ip-overview-source_autonomous_system_asn"
                                          droppableId="droppableId.content.ip-overview-source_autonomous_system_asn"
                                          getDraggableRef={[Function]}
                                          index={0}
                                          key="draggableId.content.ip-overview-source_autonomous_system_asn"
                                          type="DEFAULT"
                                        >
                                          <Moveable
                                            destination={
                                              Object {
                                                "x": 0,
                                                "y": 0,
                                              }
                                            }
                                            onMoveEnd={[Function]}
                                            speed="INSTANT"
                                          >
                                            <Motion
                                              defaultStyle={
                                                Object {
                                                  "x": 0,
                                                  "y": 0,
                                                }
                                              }
                                              onRest={[Function]}
                                              style={
                                                Object {
                                                  "x": 0,
                                                  "y": 0,
                                                }
                                              }
                                            >
                                              <DoubleRenderBlocker
                                                change={
                                                  Object {
                                                    "x": 0,
                                                    "y": 0,
                                                  }
                                                }
                                              >
                                                <DragHandle
                                                  callbacks={
                                                    Object {
                                                      "onCancel": [Function],
                                                      "onDrop": [Function],
                                                      "onLift": [Function],
                                                      "onMove": [Function],
                                                      "onMoveDown": [Function],
                                                      "onMoveLeft": [Function],
                                                      "onMoveRight": [Function],
                                                      "onMoveUp": [Function],
                                                      "onWindowScroll": [Function],
                                                    }
                                                  }
                                                  canDragInteractiveElements={false}
                                                  draggableId="draggableId.content.ip-overview-source_autonomous_system_asn"
                                                  getDraggableRef={[Function]}
                                                  isDragging={false}
                                                  isDropAnimating={false}
                                                  isEnabled={true}
                                                >
                                                  <styled.div
                                                    aria-roledescription="Draggable item. Press space bar to lift"
                                                    data-react-beautiful-dnd-drag-handle="6"
                                                    data-react-beautiful-dnd-draggable="6"
                                                    data-test-subj="providerContainer"
                                                    draggable={false}
                                                    innerRef={[Function]}
                                                    onBlur={[Function]}
                                                    onDragStart={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onMouseDown={[Function]}
                                                    onTouchStart={[Function]}
                                                    style={
                                                      Object {
                                                        "transform": null,
                                                        "transition": null,
                                                        "zIndex": 9000,
                                                      }
                                                    }
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-roledescription="Draggable item. Press space bar to lift"
                                                      className="sc-kEYyzF eIecMG"
                                                      data-react-beautiful-dnd-drag-handle="6"
                                                      data-react-beautiful-dnd-draggable="6"
                                                      data-test-subj="providerContainer"
                                                      draggable={false}
                                                      onBlur={[Function]}
                                                      onDragStart={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                      style={
                                                        Object {
                                                          "transform": null,
                                                          "transition": null,
                                                          "zIndex": 9000,
                                                        }
                                                      }
                                                      tabIndex={0}
                                                    >
                                                      <EuiText
                                                        data-test-subj="draggable-content"
                                                        grow={true}
                                                        size="s"
                                                      >
                                                        <div
                                                          className="euiText euiText--small"
                                                          data-test-subj="draggable-content"
                                                        >
                                                          <pure(Component)
                                                            field="source.autonomous_system.asn"
                                                            value="Test ASN"
                                                          >
                                                            <Component
                                                              field="source.autonomous_system.asn"
                                                              value="Test ASN"
                                                            >
                                                              <EuiToolTip
                                                                content="source.autonomous_system.asn"
                                                                data-test-subj="source.autonomous_system.asn-tooltip"
                                                                delay="regular"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                >
                                                                  Test ASN
                                                                </span>
                                                              </EuiToolTip>
                                                            </Component>
                                                          </pure(Component)>
                                                        </div>
                                                      </EuiText>
                                                    </div>
                                                  </styled.div>
                                                </DragHandle>
                                              </DoubleRenderBlocker>
                                            </Motion>
                                          </Moveable>
                                        </DraggableDimensionPublisher>
                                      </Draggable>
                                    </Connect(Draggable)>
                                  </div>
                                </DroppableDimensionPublisher>
                              </Droppable>
                            </Connect(Droppable)>
                          </div>
                        </DraggableWrapperComponent>
                      </Connect(DraggableWrapperComponent)>
                    </Component>
                  </pure(Component)>
                </div>
              </EuiFlexItem>
            </div>
          </EuiFlexGroup>
        </DragDropContext>
      </ThemeProvider>
    </Provider>
  </Component>
</pure(Component)>
`;

exports[`Field Renderers #dateRenderer it renders correctly against snapshot 1`] = `
<pure(Component)>
  <Component>
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        }
      }
    >
      <ThemeProvider
        theme={[Function]}
      >
        <DragDropContext
          onDragEnd={[MockFunction]}
        >
          <pure(Component)
            value={2019-02-07T17:19:41.636Z}
          >
            <Component
              value={2019-02-07T17:19:41.636Z}
            >
              Feb 7, 2019 @ 17:19:41.636
            </Component>
          </pure(Component)>
        </DragDropContext>
      </ThemeProvider>
    </Provider>
  </Component>
</pure(Component)>
`;

exports[`Field Renderers #hostIdRenderer it renders correctly against snapshot 1`] = `
<pure(Component)>
  <Component>
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        }
      }
    >
      <ThemeProvider
        theme={[Function]}
      >
        <DragDropContext
          onDragEnd={[MockFunction]}
        >
          --
        </DragDropContext>
      </ThemeProvider>
    </Provider>
  </Component>
</pure(Component)>
`;

exports[`Field Renderers #hostNameRenderer it renders correctly against snapshot 1`] = `
<pure(Component)>
  <Component>
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        }
      }
    >
      <ThemeProvider
        theme={[Function]}
      >
        <DragDropContext
          onDragEnd={[MockFunction]}
        >
          --
        </DragDropContext>
      </ThemeProvider>
    </Provider>
  </Component>
</pure(Component)>
`;

exports[`Field Renderers #locationRenderer it renders correctly against snapshot 1`] = `
<pure(Component)>
  <Component>
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        }
      }
    >
      <ThemeProvider
        theme={[Function]}
      >
        <DragDropContext
          onDragEnd={[MockFunction]}
        >
          <EuiFlexGroup
            alignItems="center"
            data-test-subj="location-field"
            gutterSize="none"
          >
            <div
              className="euiFlexGroup euiFlexGroup--alignItemsCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
              data-test-subj="location-field"
            >
              <EuiFlexItem
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero"
                >
                  <pure(Component)
                    field="source.geo.city_name"
                    id="ip-overview-source.geo.city_name"
                    value="New York"
                  >
                    <Component
                      field="source.geo.city_name"
                      id="ip-overview-source.geo.city_name"
                      value="New York"
                    >
                      <Connect(DraggableWrapperComponent)
                        dataProvider={
                          Object {
                            "and": Array [],
                            "enabled": true,
                            "excluded": false,
                            "id": "ip-overview-source_geo_city_name",
                            "kqlQuery": "",
                            "name": "New York",
                            "queryMatch": Object {
                              "field": "source.geo.city_name",
                              "value": "New York",
                            },
                          }
                        }
                        render={[Function]}
                      >
                        <DraggableWrapperComponent
                          dataProvider={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_geo_city_name",
                              "kqlQuery": "",
                              "name": "New York",
                              "queryMatch": Object {
                                "field": "source.geo.city_name",
                                "value": "New York",
                              },
                            }
                          }
                          ip-overview-source_geo_city_name={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_geo_city_name",
                              "kqlQuery": "",
                              "name": "New York",
                              "queryMatch": Object {
                                "field": "source.geo.city_name",
                                "value": "New York",
                              },
                            }
                          }
                          ip-overview-source_geo_region_name={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_geo_region_name",
                              "kqlQuery": "",
                              "name": "New York",
                              "queryMatch": Object {
                                "field": "source.geo.region_name",
                                "value": "New York",
                              },
                            }
                          }
                          registerProvider={[Function]}
                          render={[Function]}
                          unRegisterProvider={[Function]}
                        >
                          <div
                            data-test-subj="draggableWrapperDiv"
                          >
                            <Connect(Droppable)
                              direction="vertical"
                              droppableId="droppableId.content.ip-overview-source_geo_city_name"
                              ignoreContainerClipping={false}
                              isDropDisabled={true}
                              type="DEFAULT"
                            >
                              <Droppable
                                direction="vertical"
                                dispatch={[Function]}
                                draggingOverWith={null}
                                droppableId="droppableId.content.ip-overview-source_geo_city_name"
                                ignoreContainerClipping={false}
                                isDraggingOver={false}
                                isDropDisabled={true}
                                placeholder={null}
                                type="DEFAULT"
                              >
                                <DroppableDimensionPublisher
                                  direction="vertical"
                                  droppableId="droppableId.content.ip-overview-source_geo_city_name"
                                  getDroppableRef={[Function]}
                                  ignoreContainerClipping={false}
                                  isDropDisabled={true}
                                  type="DEFAULT"
                                >
                                  <div
                                    data-react-beautiful-dnd-droppable="0"
                                  >
                                    <Connect(Draggable)
                                      disableInteractiveElementBlocking={false}
                                      draggableId="draggableId.content.ip-overview-source_geo_city_name"
                                      index={0}
                                      isDragDisabled={false}
                                      key="ip-overview-source_geo_city_name"
                                    >
                                      <Draggable
                                        dimension={null}
                                        disableInteractiveElementBlocking={false}
                                        draggableId="draggableId.content.ip-overview-source_geo_city_name"
                                        draggingOver={null}
                                        drop={[Function]}
                                        dropAnimationFinished={[Function]}
                                        index={0}
                                        isDragDisabled={false}
                                        isDragging={false}
                                        isDropAnimating={false}
                                        lift={[Function]}
                                        move={[Function]}
                                        moveByWindowScroll={[Function]}
                                        moveDown={[Function]}
                                        moveLeft={[Function]}
                                        moveRight={[Function]}
                                        moveUp={[Function]}
                                        offset={
                                          Object {
                                            "x": 0,
                                            "y": 0,
                                          }
                                        }
                                        shouldAnimateDisplacement={true}
                                        shouldAnimateDragMovement={false}
                                      >
                                        <DraggableDimensionPublisher
                                          draggableId="draggableId.content.ip-overview-source_geo_city_name"
                                          droppableId="droppableId.content.ip-overview-source_geo_city_name"
                                          getDraggableRef={[Function]}
                                          index={0}
                                          key="draggableId.content.ip-overview-source_geo_city_name"
                                          type="DEFAULT"
                                        >
                                          <Moveable
                                            destination={
                                              Object {
                                                "x": 0,
                                                "y": 0,
                                              }
                                            }
                                            onMoveEnd={[Function]}
                                            speed="INSTANT"
                                          >
                                            <Motion
                                              defaultStyle={
                                                Object {
                                                  "x": 0,
                                                  "y": 0,
                                                }
                                              }
                                              onRest={[Function]}
                                              style={
                                                Object {
                                                  "x": 0,
                                                  "y": 0,
                                                }
                                              }
                                            >
                                              <DoubleRenderBlocker
                                                change={
                                                  Object {
                                                    "x": 0,
                                                    "y": 0,
                                                  }
                                                }
                                              >
                                                <DragHandle
                                                  callbacks={
                                                    Object {
                                                      "onCancel": [Function],
                                                      "onDrop": [Function],
                                                      "onLift": [Function],
                                                      "onMove": [Function],
                                                      "onMoveDown": [Function],
                                                      "onMoveLeft": [Function],
                                                      "onMoveRight": [Function],
                                                      "onMoveUp": [Function],
                                                      "onWindowScroll": [Function],
                                                    }
                                                  }
                                                  canDragInteractiveElements={false}
                                                  draggableId="draggableId.content.ip-overview-source_geo_city_name"
                                                  getDraggableRef={[Function]}
                                                  isDragging={false}
                                                  isDropAnimating={false}
                                                  isEnabled={true}
                                                >
                                                  <styled.div
                                                    aria-roledescription="Draggable item. Press space bar to lift"
                                                    data-react-beautiful-dnd-drag-handle="0"
                                                    data-react-beautiful-dnd-draggable="0"
                                                    data-test-subj="providerContainer"
                                                    draggable={false}
                                                    innerRef={[Function]}
                                                    onBlur={[Function]}
                                                    onDragStart={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onMouseDown={[Function]}
                                                    onTouchStart={[Function]}
                                                    style={
                                                      Object {
                                                        "transform": null,
                                                        "transition": null,
                                                        "zIndex": 9000,
                                                      }
                                                    }
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-roledescription="Draggable item. Press space bar to lift"
                                                      className="sc-kEYyzF eIecMG"
                                                      data-react-beautiful-dnd-drag-handle="0"
                                                      data-react-beautiful-dnd-draggable="0"
                                                      data-test-subj="providerContainer"
                                                      draggable={false}
                                                      onBlur={[Function]}
                                                      onDragStart={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                      style={
                                                        Object {
                                                          "transform": null,
                                                          "transition": null,
                                                          "zIndex": 9000,
                                                        }
                                                      }
                                                      tabIndex={0}
                                                    >
                                                      <EuiText
                                                        data-test-subj="draggable-content"
                                                        grow={true}
                                                        size="s"
                                                      >
                                                        <div
                                                          className="euiText euiText--small"
                                                          data-test-subj="draggable-content"
                                                        >
                                                          <pure(Component)
                                                            field="source.geo.city_name"
                                                            value="New York"
                                                          >
                                                            <Component
                                                              field="source.geo.city_name"
                                                              value="New York"
                                                            >
                                                              <EuiToolTip
                                                                content="source.geo.city_name"
                                                                data-test-subj="source.geo.city_name-tooltip"
                                                                delay="regular"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                >
                                                                  New York
                                                                </span>
                                                              </EuiToolTip>
                                                            </Component>
                                                          </pure(Component)>
                                                        </div>
                                                      </EuiText>
                                                    </div>
                                                  </styled.div>
                                                </DragHandle>
                                              </DoubleRenderBlocker>
                                            </Motion>
                                          </Moveable>
                                        </DraggableDimensionPublisher>
                                      </Draggable>
                                    </Connect(Draggable)>
                                  </div>
                                </DroppableDimensionPublisher>
                              </Droppable>
                            </Connect(Droppable)>
                          </div>
                        </DraggableWrapperComponent>
                      </Connect(DraggableWrapperComponent)>
                    </Component>
                  </pure(Component)>
                </div>
              </EuiFlexItem>
              , 
              <EuiFlexItem
                grow={false}
              >
                <div
                  className="euiFlexItem euiFlexItem--flexGrowZero"
                >
                  <pure(Component)
                    field="source.geo.region_name"
                    id="ip-overview-source.geo.region_name"
                    value="New York"
                  >
                    <Component
                      field="source.geo.region_name"
                      id="ip-overview-source.geo.region_name"
                      value="New York"
                    >
                      <Connect(DraggableWrapperComponent)
                        dataProvider={
                          Object {
                            "and": Array [],
                            "enabled": true,
                            "excluded": false,
                            "id": "ip-overview-source_geo_region_name",
                            "kqlQuery": "",
                            "name": "New York",
                            "queryMatch": Object {
                              "field": "source.geo.region_name",
                              "value": "New York",
                            },
                          }
                        }
                        render={[Function]}
                      >
                        <DraggableWrapperComponent
                          dataProvider={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_geo_region_name",
                              "kqlQuery": "",
                              "name": "New York",
                              "queryMatch": Object {
                                "field": "source.geo.region_name",
                                "value": "New York",
                              },
                            }
                          }
                          ip-overview-source_geo_city_name={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_geo_city_name",
                              "kqlQuery": "",
                              "name": "New York",
                              "queryMatch": Object {
                                "field": "source.geo.city_name",
                                "value": "New York",
                              },
                            }
                          }
                          ip-overview-source_geo_region_name={
                            Object {
                              "and": Array [],
                              "enabled": true,
                              "excluded": false,
                              "id": "ip-overview-source_geo_region_name",
                              "kqlQuery": "",
                              "name": "New York",
                              "queryMatch": Object {
                                "field": "source.geo.region_name",
                                "value": "New York",
                              },
                            }
                          }
                          registerProvider={[Function]}
                          render={[Function]}
                          unRegisterProvider={[Function]}
                        >
                          <div
                            data-test-subj="draggableWrapperDiv"
                          >
                            <Connect(Droppable)
                              direction="vertical"
                              droppableId="droppableId.content.ip-overview-source_geo_region_name"
                              ignoreContainerClipping={false}
                              isDropDisabled={true}
                              type="DEFAULT"
                            >
                              <Droppable
                                direction="vertical"
                                dispatch={[Function]}
                                draggingOverWith={null}
                                droppableId="droppableId.content.ip-overview-source_geo_region_name"
                                ignoreContainerClipping={false}
                                isDraggingOver={false}
                                isDropDisabled={true}
                                placeholder={null}
                                type="DEFAULT"
                              >
                                <DroppableDimensionPublisher
                                  direction="vertical"
                                  droppableId="droppableId.content.ip-overview-source_geo_region_name"
                                  getDroppableRef={[Function]}
                                  ignoreContainerClipping={false}
                                  isDropDisabled={true}
                                  type="DEFAULT"
                                >
                                  <div
                                    data-react-beautiful-dnd-droppable="0"
                                  >
                                    <Connect(Draggable)
                                      disableInteractiveElementBlocking={false}
                                      draggableId="draggableId.content.ip-overview-source_geo_region_name"
                                      index={0}
                                      isDragDisabled={false}
                                      key="ip-overview-source_geo_region_name"
                                    >
                                      <Draggable
                                        dimension={null}
                                        disableInteractiveElementBlocking={false}
                                        draggableId="draggableId.content.ip-overview-source_geo_region_name"
                                        draggingOver={null}
                                        drop={[Function]}
                                        dropAnimationFinished={[Function]}
                                        index={0}
                                        isDragDisabled={false}
                                        isDragging={false}
                                        isDropAnimating={false}
                                        lift={[Function]}
                                        move={[Function]}
                                        moveByWindowScroll={[Function]}
                                        moveDown={[Function]}
                                        moveLeft={[Function]}
                                        moveRight={[Function]}
                                        moveUp={[Function]}
                                        offset={
                                          Object {
                                            "x": 0,
                                            "y": 0,
                                          }
                                        }
                                        shouldAnimateDisplacement={true}
                                        shouldAnimateDragMovement={false}
                                      >
                                        <DraggableDimensionPublisher
                                          draggableId="draggableId.content.ip-overview-source_geo_region_name"
                                          droppableId="droppableId.content.ip-overview-source_geo_region_name"
                                          getDraggableRef={[Function]}
                                          index={0}
                                          key="draggableId.content.ip-overview-source_geo_region_name"
                                          type="DEFAULT"
                                        >
                                          <Moveable
                                            destination={
                                              Object {
                                                "x": 0,
                                                "y": 0,
                                              }
                                            }
                                            onMoveEnd={[Function]}
                                            speed="INSTANT"
                                          >
                                            <Motion
                                              defaultStyle={
                                                Object {
                                                  "x": 0,
                                                  "y": 0,
                                                }
                                              }
                                              onRest={[Function]}
                                              style={
                                                Object {
                                                  "x": 0,
                                                  "y": 0,
                                                }
                                              }
                                            >
                                              <DoubleRenderBlocker
                                                change={
                                                  Object {
                                                    "x": 0,
                                                    "y": 0,
                                                  }
                                                }
                                              >
                                                <DragHandle
                                                  callbacks={
                                                    Object {
                                                      "onCancel": [Function],
                                                      "onDrop": [Function],
                                                      "onLift": [Function],
                                                      "onMove": [Function],
                                                      "onMoveDown": [Function],
                                                      "onMoveLeft": [Function],
                                                      "onMoveRight": [Function],
                                                      "onMoveUp": [Function],
                                                      "onWindowScroll": [Function],
                                                    }
                                                  }
                                                  canDragInteractiveElements={false}
                                                  draggableId="draggableId.content.ip-overview-source_geo_region_name"
                                                  getDraggableRef={[Function]}
                                                  isDragging={false}
                                                  isDropAnimating={false}
                                                  isEnabled={true}
                                                >
                                                  <styled.div
                                                    aria-roledescription="Draggable item. Press space bar to lift"
                                                    data-react-beautiful-dnd-drag-handle="0"
                                                    data-react-beautiful-dnd-draggable="0"
                                                    data-test-subj="providerContainer"
                                                    draggable={false}
                                                    innerRef={[Function]}
                                                    onBlur={[Function]}
                                                    onDragStart={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    onMouseDown={[Function]}
                                                    onTouchStart={[Function]}
                                                    style={
                                                      Object {
                                                        "transform": null,
                                                        "transition": null,
                                                        "zIndex": 9000,
                                                      }
                                                    }
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-roledescription="Draggable item. Press space bar to lift"
                                                      className="sc-kEYyzF eIecMG"
                                                      data-react-beautiful-dnd-drag-handle="0"
                                                      data-react-beautiful-dnd-draggable="0"
                                                      data-test-subj="providerContainer"
                                                      draggable={false}
                                                      onBlur={[Function]}
                                                      onDragStart={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onMouseDown={[Function]}
                                                      onTouchStart={[Function]}
                                                      style={
                                                        Object {
                                                          "transform": null,
                                                          "transition": null,
                                                          "zIndex": 9000,
                                                        }
                                                      }
                                                      tabIndex={0}
                                                    >
                                                      <EuiText
                                                        data-test-subj="draggable-content"
                                                        grow={true}
                                                        size="s"
                                                      >
                                                        <div
                                                          className="euiText euiText--small"
                                                          data-test-subj="draggable-content"
                                                        >
                                                          <pure(Component)
                                                            field="source.geo.region_name"
                                                            value="New York"
                                                          >
                                                            <Component
                                                              field="source.geo.region_name"
                                                              value="New York"
                                                            >
                                                              <EuiToolTip
                                                                content="source.geo.region_name"
                                                                data-test-subj="source.geo.region_name-tooltip"
                                                                delay="regular"
                                                                position="top"
                                                              >
                                                                <span
                                                                  className="euiToolTipAnchor"
                                                                  onMouseOut={[Function]}
                                                                  onMouseOver={[Function]}
                                                                >
                                                                  New York
                                                                </span>
                                                              </EuiToolTip>
                                                            </Component>
                                                          </pure(Component)>
                                                        </div>
                                                      </EuiText>
                                                    </div>
                                                  </styled.div>
                                                </DragHandle>
                                              </DoubleRenderBlocker>
                                            </Motion>
                                          </Moveable>
                                        </DraggableDimensionPublisher>
                                      </Draggable>
                                    </Connect(Draggable)>
                                  </div>
                                </DroppableDimensionPublisher>
                              </Droppable>
                            </Connect(Droppable)>
                          </div>
                        </DraggableWrapperComponent>
                      </Connect(DraggableWrapperComponent)>
                    </Component>
                  </pure(Component)>
                </div>
              </EuiFlexItem>
            </div>
          </EuiFlexGroup>
        </DragDropContext>
      </ThemeProvider>
    </Provider>
  </Component>
</pure(Component)>
`;

exports[`Field Renderers #reputationRenderer it renders correctly against snapshot 1`] = `
<pure(Component)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
>
  <Component
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {
          "date": Object {
            "full": Object {
              "day": "numeric",
              "month": "long",
              "weekday": "long",
              "year": "numeric",
            },
            "long": Object {
              "day": "numeric",
              "month": "long",
              "year": "numeric",
            },
            "medium": Object {
              "day": "numeric",
              "month": "short",
              "year": "numeric",
            },
            "short": Object {
              "day": "numeric",
              "month": "numeric",
              "year": "2-digit",
            },
          },
          "number": Object {
            "currency": Object {
              "style": "currency",
            },
            "percent": Object {
              "style": "percent",
            },
          },
          "relative": Object {
            "days": Object {
              "units": "day",
            },
            "hours": Object {
              "units": "hour",
            },
            "minutes": Object {
              "units": "minute",
            },
            "months": Object {
              "units": "month",
            },
            "seconds": Object {
              "units": "second",
            },
            "years": Object {
              "units": "year",
            },
          },
          "time": Object {
            "full": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "long": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "medium": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
            },
            "short": Object {
              "hour": "numeric",
              "minute": "numeric",
            },
          },
        },
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {},
        "now": [Function],
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": null,
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        }
      }
    >
      <ThemeProvider
        theme={[Function]}
      >
        <DragDropContext
          onDragEnd={[MockFunction]}
        >
          <pure(Component)
            domain="10.10.10.10"
          >
            <Component
              domain="10.10.10.10"
            >
              <EuiLink
                color="primary"
                href="https://www.iana.org/whois?q=10.10.10.10"
                target="_blank"
                type="button"
              >
                <a
                  className="euiLink euiLink--primary"
                  href="https://www.iana.org/whois?q=10.10.10.10"
                  rel="noopener noreferrer"
                  target="_blank"
                >
                  View at iana.org
                </a>
              </EuiLink>
            </Component>
          </pure(Component)>
          <pure(Component)>
            <Component>
              <Styled(Styled(EuiIcon))
                color="subdued"
                data-test-subj="external-link-icon"
                size="s"
                type="popout"
              >
                <Styled(EuiIcon)
                  className="sc-brqgnP tIJWg"
                  color="subdued"
                  data-test-subj="external-link-icon"
                  size="s"
                  type="popout"
                >
                  <EuiIcon
                    className="sc-brqgnP tIJWg sc-jWBwVP dnHSog"
                    color="subdued"
                    data-test-subj="external-link-icon"
                    size="s"
                    type="popout"
                  >
                    <popout
                      className="euiIcon euiIcon--small euiIcon--subdued sc-brqgnP tIJWg sc-jWBwVP dnHSog"
                      data-test-subj="external-link-icon"
                      focusable="false"
                      height="16"
                      style={null}
                      viewBox="0 0 16 16"
                      width="16"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        className="euiIcon euiIcon--small euiIcon--subdued sc-brqgnP tIJWg sc-jWBwVP dnHSog"
                        data-test-subj="external-link-icon"
                        focusable="false"
                        height="16"
                        style={null}
                        viewBox="0 0 16 16"
                        width="16"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M2 14.01h12.49a.5.5 0 1 1 0 1h-13a.5.5 0 0 1-.49-.597V1.5a.5.5 0 0 1 1 0v12.51zm2.354-1.656a.5.5 0 0 1-.708-.708l8-8a.5.5 0 0 1 .708.708l-8 8zM15 5.5a.5.5 0 1 1-1 0v-3a.5.5 0 0 0-.5-.5h-3a.5.5 0 1 1 0-1h3A1.5 1.5 0 0 1 15 2.5v3z"
                          fillRule="evenodd"
                        />
                      </svg>
                    </popout>
                  </EuiIcon>
                </Styled(EuiIcon)>
              </Styled(Styled(EuiIcon))>
            </Component>
          </pure(Component)>
        </DragDropContext>
      </ThemeProvider>
    </Provider>
  </Component>
</pure(Component)>
`;

exports[`Field Renderers #whoisRenderer it renders correctly against snapshot 1`] = `
<pure(Component)
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
>
  <Component
    intl={
      Object {
        "defaultFormats": Object {},
        "defaultLocale": "en",
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {
          "date": Object {
            "full": Object {
              "day": "numeric",
              "month": "long",
              "weekday": "long",
              "year": "numeric",
            },
            "long": Object {
              "day": "numeric",
              "month": "long",
              "year": "numeric",
            },
            "medium": Object {
              "day": "numeric",
              "month": "short",
              "year": "numeric",
            },
            "short": Object {
              "day": "numeric",
              "month": "numeric",
              "year": "2-digit",
            },
          },
          "number": Object {
            "currency": Object {
              "style": "currency",
            },
            "percent": Object {
              "style": "percent",
            },
          },
          "relative": Object {
            "days": Object {
              "units": "day",
            },
            "hours": Object {
              "units": "hour",
            },
            "minutes": Object {
              "units": "minute",
            },
            "months": Object {
              "units": "month",
            },
            "seconds": Object {
              "units": "second",
            },
            "years": Object {
              "units": "year",
            },
          },
          "time": Object {
            "full": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "long": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
              "timeZoneName": "short",
            },
            "medium": Object {
              "hour": "numeric",
              "minute": "numeric",
              "second": "numeric",
            },
            "short": Object {
              "hour": "numeric",
              "minute": "numeric",
            },
          },
        },
        "formatters": Object {
          "getDateTimeFormat": [Function],
          "getMessageFormat": [Function],
          "getNumberFormat": [Function],
          "getPluralFormat": [Function],
          "getRelativeFormat": [Function],
        },
        "locale": "en",
        "messages": Object {},
        "now": [Function],
        "onError": [Function],
        "textComponent": Symbol(react.fragment),
        "timeZone": null,
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(Symbol.observable): [Function],
        }
      }
    >
      <ThemeProvider
        theme={[Function]}
      >
        <DragDropContext
          onDragEnd={[MockFunction]}
        >
          <pure(Component)
            domain="10.10.10.10"
          >
            <Component
              domain="10.10.10.10"
            >
              <EuiLink
                color="primary"
                href="https://www.iana.org/whois?q=10.10.10.10"
                target="_blank"
                type="button"
              >
                <a
                  className="euiLink euiLink--primary"
                  href="https://www.iana.org/whois?q=10.10.10.10"
                  rel="noopener noreferrer"
                  target="_blank"
                >
                  View at iana.org
                </a>
              </EuiLink>
            </Component>
          </pure(Component)>
          <pure(Component)>
            <Component>
              <Styled(Styled(EuiIcon))
                color="subdued"
                data-test-subj="external-link-icon"
                size="s"
                type="popout"
              >
                <Styled(EuiIcon)
                  className="sc-brqgnP tIJWg"
                  color="subdued"
                  data-test-subj="external-link-icon"
                  size="s"
                  type="popout"
                >
                  <EuiIcon
                    className="sc-brqgnP tIJWg sc-jWBwVP dnHSog"
                    color="subdued"
                    data-test-subj="external-link-icon"
                    size="s"
                    type="popout"
                  >
                    <popout
                      className="euiIcon euiIcon--small euiIcon--subdued sc-brqgnP tIJWg sc-jWBwVP dnHSog"
                      data-test-subj="external-link-icon"
                      focusable="false"
                      height="16"
                      style={null}
                      viewBox="0 0 16 16"
                      width="16"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <svg
                        className="euiIcon euiIcon--small euiIcon--subdued sc-brqgnP tIJWg sc-jWBwVP dnHSog"
                        data-test-subj="external-link-icon"
                        focusable="false"
                        height="16"
                        style={null}
                        viewBox="0 0 16 16"
                        width="16"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M2 14.01h12.49a.5.5 0 1 1 0 1h-13a.5.5 0 0 1-.49-.597V1.5a.5.5 0 0 1 1 0v12.51zm2.354-1.656a.5.5 0 0 1-.708-.708l8-8a.5.5 0 0 1 .708.708l-8 8zM15 5.5a.5.5 0 1 1-1 0v-3a.5.5 0 0 0-.5-.5h-3a.5.5 0 1 1 0-1h3A1.5 1.5 0 0 1 15 2.5v3z"
                          fillRule="evenodd"
                        />
                      </svg>
                    </popout>
                  </EuiIcon>
                </Styled(EuiIcon)>
              </Styled(Styled(EuiIcon))>
            </Component>
          </pure(Component)>
        </DragDropContext>
      </ThemeProvider>
    </Provider>
  </Component>
</pure(Component)>
`;
