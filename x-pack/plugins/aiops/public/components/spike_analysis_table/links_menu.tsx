/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { escapeKuery } from '@kbn/es-query';
import React, { FC, useEffect,useMemo, useState } from 'react';
import { FormattedMessage } from '@kbn/i18n-react';
import { i18n } from '@kbn/i18n';
import type { ChangePoint } from '@kbn/ml-agg-utils';
import {
  EuiButtonIcon,
  EuiContextMenuItem,
  EuiContextMenuPanel,
  EuiPopover,
  EuiProgress,
  EuiToolTip,
} from '@elastic/eui';
import { useAiOpsKibana } from '../../kibana_context';
import {
  SEARCH_QUERY_LANGUAGE,
} from '../../application/utils/search_utils';

interface LinksMenuProps {
    changePoint: ChangePoint;
    dataViewId?: string;
}

export const LinksMenu: FC<LinksMenuProps> = ({ changePoint, dataViewId }) => {
  const [isPopoverOpen, setPopoverOpen] = useState(false);
  const onButtonClick = setPopoverOpen.bind(null, !isPopoverOpen);
  const closePopover = setPopoverOpen.bind(null, false);
  const [openInDiscoverUrl, setOpenInDiscoverUrl] = useState<string | undefined>();
  const [discoverUrlError, setDiscoverUrlError] = useState<string | undefined>();
  
  const aiOpsKibana = useAiOpsKibana();
  const {
    services: { application, share, data },
  } = aiOpsKibana;

  useEffect(() => {
    let unmounted = false;

    if (!application.capabilities.discover?.show) {
      const discoverNotEnabled = i18n.translate(
        'xpack.ml.anomaliesTable.linksMenu.discoverNotEnabledErrorMessage',
        {
          defaultMessage: 'Discover is not enabled',
        }
      );

      if (!unmounted) {
        setDiscoverUrlError(discoverNotEnabled);
      }
      return;
    }

    const discoverLocator = share.url.locators.get('DISCOVER_APP_LOCATOR');
    if (!discoverLocator) {
      const discoverLocatorMissing = i18n.translate(
        'xpack.ml.anomaliesTable.linksMenu.discoverLocatorMissingErrorMessage',
        {
          defaultMessage: 'No locator for Discover detected',
        }
      );

      if (!unmounted) {
        setDiscoverUrlError(discoverLocatorMissing);
      }
      return;
    }

    if (!dataViewId && !unmounted) {
      const autoGeneratedDiscoverLinkError = i18n.translate(
        'xpack.ml.anomaliesTable.linksMenu.autoGeneratedDiscoverLinkErrorMessage',
        {
          defaultMessage: 'Unable to link to Discover; no data view exists for this index',
        }
      );

      setDiscoverUrlError(autoGeneratedDiscoverLinkError);
      return;
    }

    const generateDiscoverUrl = async () => {
      const url = await discoverLocator.getRedirectUrl({
        indexPatternId: dataViewId,
        timeRange: data.query.timefilter.timefilter.getTime(),
        filters: data.query.filterManager.getFilters(),
        query: {
          language: SEARCH_QUERY_LANGUAGE.KUERY,
          query: `${escapeKuery(changePoint.fieldName)}:${escapeKuery(String(changePoint.fieldValue))}`,
        },
      });

      if (!unmounted) {
        setOpenInDiscoverUrl(url);
      }
    };
    
    generateDiscoverUrl();

    return () => {
      unmounted = true;
    };
  }, [application.capabilities.discover?.show]);

  const contextMenuItems = useMemo(() => {
    const items = [];
    // Add item from the start, but disable it during the URL generation.
    const isLoading = discoverUrlError === undefined && openInDiscoverUrl === undefined;

    items.push(
      <EuiContextMenuItem
        key={`auto_raw_data_url`}
        icon="discoverApp"
        disabled={discoverUrlError !== undefined || isLoading}
        href={openInDiscoverUrl}
        data-test-subj={`aiopsSpikeAnalysisTableRowAction_viewInDiscoverButton`}
      >
        {discoverUrlError ? (
          <EuiToolTip content={discoverUrlError}>
            <FormattedMessage
              id="xpack.aiops.spikeAnalysisTable.linksMenu.viewInDiscover"
              defaultMessage="View in Discover"
            />
          </EuiToolTip>
        ) : (
          <FormattedMessage
            id="xpack.aiops.spikeAnalysisTable.linksMenu.viewInDiscover"
            defaultMessage="View in Discover"
          />
        )}
        {isLoading ? <EuiProgress size={'xs'} color={'accent'} /> : null}
      </EuiContextMenuItem>
    );

    return items;
  }, [openInDiscoverUrl, discoverUrlError]);

  const button = (
    <EuiButtonIcon
      size="s"
      color="text"
      onClick={onButtonClick}
      iconType="gear"
      aria-label={i18n.translate('xpack.aiops.spikeAnalysisTable.linksMenu.selectActionAriaLabel', {
        defaultMessage: 'Select action for row item',
      })}
      data-test-subj="mlAnomaliesListRowActionsButton"
    />
  );

  return (
    <div>
      <EuiPopover
        button={button}
        isOpen={isPopoverOpen}
        closePopover={closePopover}
        panelPaddingSize="none"
        anchorPosition="downLeft"
      >
        <EuiContextMenuPanel items={contextMenuItems} data-test-subj="aiopsSpikeAnalysisTableRowActionsMenu" />
      </EuiPopover>
    </div>
  );
};