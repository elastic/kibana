/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import type { HttpSetup } from '@kbn/core-http-browser';
import { i18n } from '@kbn/i18n';
import { useQuery } from '@tanstack/react-query';
import type { ToastsStart } from '@kbn/core-notifications-browser';
import { DisplayType, FieldType } from '../../lib/dynamic_config/types';
import { FieldsConfiguration } from '../types';

export interface InferenceProvider {
  provider: string;
  taskTypes: string[];
  logo?: string;
  configuration: FieldsConfiguration;
}

export const getProviders = (http: HttpSetup): Promise<InferenceProvider[]> => {
  const providers = [
    {
      provider: 'openai',
      logo: '', // should be openai logo here, the hardcoded uses assets/images
      taskTypes: ['completion', 'text_embedding'],
      configuration: {
        api_key: {
          display: DisplayType.TEXTBOX,
          label: 'API Key',
          order: 3,
          required: true,
          sensitive: true,
          tooltip: `The OpenAI API authentication key. For more details about generating OpenAI API keys, refer to the https://platform.openai.com/account/api-keys.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        model_id: {
          display: DisplayType.TEXTBOX,
          label: 'Model ID',
          order: 2,
          required: true,
          sensitive: false,
          tooltip: 'The name of the model to use for the inference task.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        organization_id: {
          display: DisplayType.TEXTBOX,
          label: 'Organization ID',
          order: 4,
          required: false,
          sensitive: false,
          tooltip: 'The unique identifier of your organization.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        url: {
          display: DisplayType.TEXTBOX,
          label: 'URL',
          order: 1,
          required: true,
          sensitive: false,
          tooltip:
            'The OpenAI API endpoint URL. For more information on the URL, refer to the https://platform.openai.com/docs/api-reference.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: 'https://api.openai.com/v1/chat/completions',
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 5,
          required: false,
          sensitive: false,
          tooltip:
            'Default number of requests allowed per minute. For text_embedding is 3000. For completion is 500.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'googleaistudio',
      logo: '', // should be googleaistudio logo here, the hardcoded uses assets/images
      taskTypes: ['completion', 'text_embedding'],
      configuration: {
        api_key: {
          display: DisplayType.TEXTBOX,
          label: 'API Key',
          order: 1,
          required: true,
          sensitive: true,
          tooltip: `API Key for the provider you're connecting to`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        model_id: {
          display: DisplayType.TEXTBOX,
          label: 'Model ID',
          order: 2,
          required: true,
          sensitive: false,
          tooltip: `ID of the LLM you're using`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 5,
          required: false,
          sensitive: false,
          tooltip: 'Minimize the number of rate limit errors.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'amazonbedrock',
      logo: '', // should be amazonbedrock logo here, the hardcoded uses assets/images
      taskTypes: ['completion', 'text_embedding'],
      configuration: {
        access_key: {
          display: DisplayType.TEXTBOX,
          label: 'Access Key',
          order: 1,
          required: true,
          sensitive: true,
          tooltip: `A valid AWS access key that has permissions to use Amazon Bedrock.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        secret_key: {
          display: DisplayType.TEXTBOX,
          label: 'Secret Key',
          order: 2,
          required: true,
          sensitive: true,
          tooltip: `A valid AWS secret key that is paired with the access_key.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        provider: {
          display: DisplayType.DROPDOWN,
          label: 'Provider',
          order: 3,
          required: true,
          options: [
            {
              label: 'amazontitan',
              value: 'amazontitan',
            },
            {
              label: 'anthropic',
              value: 'anthropic',
            },
            {
              label: 'ai21labs',
              value: 'ai21labs',
            },
            {
              label: 'cohere',
              value: 'cohere',
            },
            {
              label: 'meta',
              value: 'meta',
            },
            {
              label: 'mistral',
              value: 'mistral',
            },
          ],
          sensitive: false,
          tooltip: 'The model provider for your deployment.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        model: {
          display: DisplayType.TEXTBOX,
          label: 'Model',
          order: 4,
          required: true,
          sensitive: false,
          tooltip: `The base model ID or an ARN to a custom model based on a foundational model.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        region: {
          display: DisplayType.TEXTBOX,
          label: 'Region',
          order: 5,
          required: true,
          sensitive: false,
          tooltip: `The region that your model or ARN is deployed in.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 6,
          required: false,
          sensitive: false,
          tooltip:
            'By default, the amazonbedrock service sets the number of requests allowed per minute to 240.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'googlevertexai',
      logo: '', // should be googlevertexai logo here, the hardcoded uses assets/images
      taskTypes: ['text_embedding', 'rerank'],
      configuration: {
        service_account_json: {
          display: DisplayType.TEXTBOX,
          label: 'Credentials JSON',
          order: 1,
          required: true,
          sensitive: true,
          tooltip: `API Key for the provider you're connecting to`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        model_id: {
          display: DisplayType.TEXTBOX,
          label: 'Model ID',
          order: 2,
          required: true,
          sensitive: false,
          tooltip: `ID of the LLM you're using`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        location: {
          display: DisplayType.TEXTBOX,
          label: 'GCP Region',
          order: 2,
          required: true,
          sensitive: false,
          tooltip: `Please provide the GCP region where the Vertex AI API(s) is enabled. For more information, refer to the {geminiVertexAIDocs}.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        project_id: {
          display: DisplayType.TEXTBOX,
          label: 'GCP Project',
          order: 3,
          required: true,
          sensitive: false,
          tooltip:
            'The GCP Project ID which has Vertex AI API(s) enabled. For more information on the URL, refer to the {geminiVertexAIDocs}.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 5,
          required: false,
          sensitive: false,
          tooltip: 'Minimize the number of rate limit errors.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'mistral',
      logo: '', // should be misral logo here, the hardcoded uses assets/images
      taskTypes: ['text_embedding'],
      configuration: {
        api_key: {
          display: DisplayType.TEXTBOX,
          label: 'API Key',
          order: 1,
          required: true,
          sensitive: true,
          tooltip: `API Key for the provider you're connecting to`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        model: {
          display: DisplayType.TEXTBOX,
          label: 'Model',
          order: 2,
          required: true,
          sensitive: false,
          tooltip: `Refer to the Mistral models documentation for the list of available text embedding models`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 4,
          required: false,
          sensitive: false,
          tooltip: 'Minimize the number of rate limit errors.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: 240,
          depends_on: [],
        },
        max_input_tokens: {
          display: DisplayType.NUMERIC,
          label: 'Maximum input tokens',
          order: 3,
          required: false,
          sensitive: false,
          tooltip: 'Allows you to specify the maximum number of tokens per input.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'hugging_face',
      logo: '', // should be hugging_face logo here, the hardcoded uses assets/images
      taskTypes: ['text_embedding'],
      configuration: {
        api_key: {
          display: DisplayType.TEXTBOX,
          label: 'API Key',
          order: 2,
          required: true,
          sensitive: true,
          tooltip: `API Key for the provider you're connecting to`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        url: {
          display: DisplayType.TEXTBOX,
          label: 'URL',
          order: 1,
          required: true,
          sensitive: false,
          tooltip: 'The URL endpoint to use for the requests.',
          type: FieldType.STRING,
          validations: [],
          value: 'https://api.openai.com/v1/embeddings',
          ui_restrictions: [],
          default_value: 'https://api.openai.com/v1/embeddings',
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 3,
          required: false,
          sensitive: false,
          tooltip: 'Minimize the number of rate limit errors.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'elasticsearch',
      logo: '', // elasticsearch logo here
      taskTypes: ['sparse_embedding', 'text_embedding', 'rerank'],
      configuration: {
        model_id: {
          display: DisplayType.DROPDOWN,
          label: 'Model ID',
          order: 1,
          required: true,
          sensitive: false,
          tooltip: `The name of the model to use for the inference task.`,
          type: FieldType.STRING,
          validations: [],
          options: [
            {
              label: '.elser_model_1',
              value: '.elser_model_1',
            },
            {
              label: '.elser_model_2',
              value: '.elser_model_2',
            },
            {
              label: '.elser_model_2_linux-x86_64',
              value: '.elser_model_2_linux-x86_64',
            },
            {
              label: '.multilingual-e5-small',
              value: '.multilingual-e5-small',
            },
            {
              label: '.multilingual-e5-small_linux-x86_64',
              value: '.multilingual-e5-small_linux-x86_64',
            },
          ],
          value: null,
          ui_restrictions: [],
          default_value: '.multilingual-e5-small',
          depends_on: [],
        },
        num_allocations: {
          display: DisplayType.NUMERIC,
          label: 'Number allocations',
          order: 2,
          required: true,
          sensitive: false,
          tooltip:
            'The total number of allocations this model is assigned across machine learning nodes.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: 1,
          depends_on: [],
        },
        num_threads: {
          display: DisplayType.NUMERIC,
          label: 'Number threads',
          order: 3,
          required: true,
          sensitive: false,
          tooltip: 'Sets the number of threads used by each model allocation during inference.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: 2,
          depends_on: [],
        },
      },
    },
    {
      provider: 'cohere',
      logo: '', // should be cohere logo here, the hardcoded uses assets/images
      taskTypes: ['completion', 'text_embedding', 'rerank'],
      configuration: {
        api_key: {
          display: DisplayType.TEXTBOX,
          label: 'API Key',
          order: 1,
          required: true,
          sensitive: true,
          tooltip: `API Key for the provider you're connecting to`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 5,
          required: false,
          sensitive: false,
          tooltip: 'Minimize the number of rate limit errors.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'azureopenai',
      logo: '', // should be azureopenai logo here, the hardcoded uses assets/images
      taskTypes: ['completion', 'text_embedding'],
      configuration: {
        api_key: {
          display: DisplayType.TEXTBOX,
          label: 'API Key',
          order: 1,
          required: false,
          sensitive: true,
          tooltip: `You must provide either an API key or an Entra ID.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        entra_id: {
          display: DisplayType.TEXTBOX,
          label: 'Entra ID',
          order: 2,
          required: false,
          sensitive: true,
          tooltip: `You must provide either an API key or an Entra ID.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        resource_name: {
          display: DisplayType.TEXTBOX,
          label: 'Resource Name',
          order: 3,
          required: true,
          sensitive: false,
          tooltip: `The name of your Azure OpenAI resource`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        api_version: {
          display: DisplayType.TEXTBOX,
          label: 'API version',
          order: 4,
          required: true,
          sensitive: false,
          tooltip: 'The Azure API version ID to use.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        deployment_id: {
          display: DisplayType.TEXTBOX,
          label: 'Deployment ID',
          order: 5,
          required: true,
          sensitive: false,
          tooltip: 'The deployment name of your deployed models.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 5,
          required: false,
          sensitive: false,
          tooltip:
            'The azureopenai service sets a default number of requests allowed per minute depending on the task type.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'azureaistudio',
      logo: '', // should be azureaistudio logo here, the hardcoded uses assets/images
      taskTypes: ['completion', 'text_embedding'],
      configuration: {
        api_key: {
          display: DisplayType.TEXTBOX,
          label: 'API Key',
          order: 1,
          required: true,
          sensitive: true,
          tooltip: `API Key for the provider you're connecting to`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        target: {
          display: DisplayType.TEXTBOX,
          label: 'Target',
          order: 2,
          required: true,
          sensitive: false,
          tooltip: `The target URL of your Azure AI Studio model deployment.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        endpoint_type: {
          display: DisplayType.DROPDOWN,
          label: 'Endpoint type',
          order: 3,
          required: true,
          sensitive: false,
          tooltip: 'Specifies the type of endpoint that is used in your model deployment.',
          type: FieldType.STRING,
          options: [
            {
              label: 'token',
              value: 'token',
            },
            {
              label: 'realtime',
              value: 'realtime',
            },
          ],
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        provider: {
          display: DisplayType.DROPDOWN,
          label: 'Provider',
          order: 3,
          required: true,
          options: [
            {
              label: 'cohere',
              value: 'cohere',
            },
            {
              label: 'meta',
              value: 'meta',
            },
            {
              label: 'microsoft_phi',
              value: 'microsoft_phi',
            },
            {
              label: 'mistral',
              value: 'mistral',
            },
            {
              label: 'openai',
              value: 'openai',
            },
            {
              label: 'databricks',
              value: 'databricks',
            },
          ],
          sensitive: false,
          tooltip: 'The model provider for your deployment.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 5,
          required: false,
          sensitive: false,
          tooltip: 'Minimize the number of rate limit errors.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'anthropic',
      logo: '', // should be anthropic logo here, the hardcoded uses assets/images
      taskTypes: ['completion'],
      configuration: {
        api_key: {
          display: DisplayType.TEXTBOX,
          label: 'API Key',
          order: 1,
          required: true,
          sensitive: true,
          tooltip: `API Key for the provider you're connecting to`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        model_id: {
          display: DisplayType.TEXTBOX,
          label: 'Model ID',
          order: 2,
          required: true,
          sensitive: false,
          tooltip: `The name of the model to use for the inference task.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 5,
          required: false,
          sensitive: false,
          tooltip:
            'By default, the anthropic service sets the number of requests allowed per minute to 50.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'watsonxai',
      logo: '', // should be anthropic logo here, the hardcoded uses assets/images
      taskTypes: ['text_embedding'],
      configuration: {
        api_version: {
          display: DisplayType.TEXTBOX,
          label: 'API version',
          order: 1,
          required: true,
          sensitive: false,
          tooltip: 'The IBM Watsonx API version ID to use.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        project_id: {
          display: DisplayType.TEXTBOX,
          label: 'Project ID',
          order: 2,
          required: true,
          sensitive: false,
          tooltip: '',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        model_id: {
          display: DisplayType.TEXTBOX,
          label: 'Model ID',
          order: 3,
          required: true,
          sensitive: false,
          tooltip: `The name of the model to use for the inference task.`,
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        url: {
          display: DisplayType.TEXTBOX,
          label: 'URL',
          order: 4,
          required: true,
          sensitive: false,
          tooltip: '',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        max_input_tokens: {
          display: DisplayType.NUMERIC,
          label: 'Maximum input tokens',
          order: 5,
          required: false,
          sensitive: false,
          tooltip: 'Allows you to specify the maximum number of tokens per input.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
    {
      provider: 'alibabacloud-ai-search',
      logo: '', // should be anthropic logo here, the hardcoded uses assets/images
      taskTypes: ['completion', 'sparse_embedding', 'text_embedding', 'rerank'],
      configuration: {
        api_key: {
          display: DisplayType.TEXTBOX,
          label: 'API Key',
          order: 1,
          required: true,
          sensitive: true,
          tooltip: 'A valid API key for the AlibabaCloud AI Search API.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        service_id: {
          display: DisplayType.DROPDOWN,
          label: 'Project ID',
          order: 2,
          required: true,
          sensitive: false,
          tooltip: 'The name of the model service to use for the {infer} task.',
          type: FieldType.STRING,
          options: [
            {
              label: 'ops-text-embedding-001',
              value: 'ops-text-embedding-001',
            },
            {
              label: 'ops-text-embedding-zh-001',
              value: 'ops-text-embedding-zh-001',
            },
            {
              label: 'ops-text-embedding-en-001',
              value: 'ops-text-embedding-en-001',
            },
            {
              label: 'ops-text-embedding-002',
              value: 'ops-text-embedding-002',
            },
            {
              label: 'ops-text-sparse-embedding-001',
              value: 'ops-text-sparse-embedding-001',
            },
            {
              label: 'ops-bge-reranker-larger',
              value: 'ops-bge-reranker-larger',
            },
          ],
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        host: {
          display: DisplayType.TEXTBOX,
          label: 'Host',
          order: 3,
          required: true,
          sensitive: false,
          tooltip:
            'The name of the host address used for the {infer} task. You can find the host address at https://opensearch.console.aliyun.com/cn-shanghai/rag/api-key[ the API keys section] of the documentation.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        http_schema: {
          display: DisplayType.DROPDOWN,
          label: 'HTTP Schema',
          order: 4,
          required: true,
          sensitive: false,
          tooltip: '',
          type: FieldType.STRING,
          options: [
            {
              label: 'https',
              value: 'https',
            },
            {
              label: 'http',
              value: 'http',
            },
          ],
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        workspace: {
          display: DisplayType.TEXTBOX,
          label: 'Workspace',
          order: 5,
          required: true,
          sensitive: false,
          tooltip: 'The name of the workspace used for the {infer} task.',
          type: FieldType.STRING,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
        'rate_limit.requests_per_minute': {
          display: DisplayType.NUMERIC,
          label: 'Rate limit',
          order: 6,
          required: false,
          sensitive: false,
          tooltip: 'Minimize the number of rate limit errors.',
          type: FieldType.INTEGER,
          validations: [],
          value: null,
          ui_restrictions: [],
          default_value: null,
          depends_on: [],
        },
      },
    },
  ] as InferenceProvider[];
  return Promise.resolve(
    providers.sort((a, b) => (a.provider > b.provider ? 1 : b.provider > a.provider ? -1 : 0))
  );
};

export const useProviders = (http: HttpSetup, toasts: ToastsStart) => {
  const onErrorFn = (error: Error) => {
    if (error) {
      toasts.addDanger(
        i18n.translate(
          'xpack.stackConnectors.components.inference.unableToFindProvidersQueryMessage',
          {
            defaultMessage: 'Unable to find providers',
          }
        )
      );
    }
  };

  const query = useQuery(['user-profile'], {
    queryFn: () => getProviders(http),
    staleTime: Infinity,
    refetchOnWindowFocus: false,
    onError: onErrorFn,
  });
  return query;
};
