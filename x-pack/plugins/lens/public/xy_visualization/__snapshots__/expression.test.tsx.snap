// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`xy_expression XYChart component it renders area 1`] = `
<Chart
  renderer="canvas"
>
  <Connect(SpecInstance)
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Connect(SpecInstance)
    gridLine={
      Object {
        "strokeWidth": 2,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    title="c"
  />
  <Connect(SpecInstance)
    domain={
      Object {
        "fit": false,
        "max": undefined,
        "min": undefined,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "type": "none",
      }
    }
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "type": "none",
      }
    }
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
  <ThresholdAnnotations
    colorAssignments={
      Object {
        "mock": Object {
          "getRank": [Function],
          "totalSeriesCount": 4,
        },
      }
    }
    data={
      Object {
        "dateRange": Object {
          "fromDate": 2019-01-02T05:00:00.000Z,
          "toDate": 2019-01-03T05:00:00.000Z,
        },
        "tables": Object {
          "first": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
        "type": "lens_multitable",
      }
    }
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    syncColors={false}
    thresholdLayers={Array []}
  />
</Chart>
`;

exports[`xy_expression XYChart component it renders bar 1`] = `
<Chart
  renderer="canvas"
>
  <Connect(SpecInstance)
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Connect(SpecInstance)
    gridLine={
      Object {
        "strokeWidth": 2,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    title="c"
  />
  <Connect(SpecInstance)
    domain={
      Object {
        "fit": false,
        "max": undefined,
        "min": undefined,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
  <ThresholdAnnotations
    colorAssignments={
      Object {
        "mock": Object {
          "getRank": [Function],
          "totalSeriesCount": 4,
        },
      }
    }
    data={
      Object {
        "dateRange": Object {
          "fromDate": 2019-01-02T05:00:00.000Z,
          "toDate": 2019-01-03T05:00:00.000Z,
        },
        "tables": Object {
          "first": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
        "type": "lens_multitable",
      }
    }
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    syncColors={false}
    thresholdLayers={Array []}
  />
</Chart>
`;

exports[`xy_expression XYChart component it renders horizontal bar 1`] = `
<Chart
  renderer="canvas"
>
  <Connect(SpecInstance)
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={90}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Connect(SpecInstance)
    gridLine={
      Object {
        "strokeWidth": 2,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    title="c"
  />
  <Connect(SpecInstance)
    domain={
      Object {
        "fit": false,
        "max": undefined,
        "min": undefined,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
  <ThresholdAnnotations
    colorAssignments={
      Object {
        "mock": Object {
          "getRank": [Function],
          "totalSeriesCount": 4,
        },
      }
    }
    data={
      Object {
        "dateRange": Object {
          "fromDate": 2019-01-02T05:00:00.000Z,
          "toDate": 2019-01-03T05:00:00.000Z,
        },
        "tables": Object {
          "first": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
        "type": "lens_multitable",
      }
    }
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    syncColors={false}
    thresholdLayers={Array []}
  />
</Chart>
`;

exports[`xy_expression XYChart component it renders line 1`] = `
<Chart
  renderer="canvas"
>
  <Connect(SpecInstance)
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Connect(SpecInstance)
    gridLine={
      Object {
        "strokeWidth": 2,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    title="c"
  />
  <Connect(SpecInstance)
    domain={
      Object {
        "fit": false,
        "max": undefined,
        "min": undefined,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "type": "none",
      }
    }
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "type": "none",
      }
    }
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={Array []}
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
  <ThresholdAnnotations
    colorAssignments={
      Object {
        "mock": Object {
          "getRank": [Function],
          "totalSeriesCount": 4,
        },
      }
    }
    data={
      Object {
        "dateRange": Object {
          "fromDate": 2019-01-02T05:00:00.000Z,
          "toDate": 2019-01-03T05:00:00.000Z,
        },
        "tables": Object {
          "first": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
        "type": "lens_multitable",
      }
    }
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    syncColors={false}
    thresholdLayers={Array []}
  />
</Chart>
`;

exports[`xy_expression XYChart component it renders stacked area 1`] = `
<Chart
  renderer="canvas"
>
  <Connect(SpecInstance)
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Connect(SpecInstance)
    gridLine={
      Object {
        "strokeWidth": 2,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    title="c"
  />
  <Connect(SpecInstance)
    domain={
      Object {
        "fit": false,
        "max": undefined,
        "min": undefined,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "type": "none",
      }
    }
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    enableHistogramMode={false}
    fit={
      Object {
        "type": "none",
      }
    }
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
  <ThresholdAnnotations
    colorAssignments={
      Object {
        "mock": Object {
          "getRank": [Function],
          "totalSeriesCount": 4,
        },
      }
    }
    data={
      Object {
        "dateRange": Object {
          "fromDate": 2019-01-02T05:00:00.000Z,
          "toDate": 2019-01-03T05:00:00.000Z,
        },
        "tables": Object {
          "first": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
        "type": "lens_multitable",
      }
    }
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    syncColors={false}
    thresholdLayers={Array []}
  />
</Chart>
`;

exports[`xy_expression XYChart component it renders stacked bar 1`] = `
<Chart
  renderer="canvas"
>
  <Connect(SpecInstance)
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={0}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Connect(SpecInstance)
    gridLine={
      Object {
        "strokeWidth": 2,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    title="c"
  />
  <Connect(SpecInstance)
    domain={
      Object {
        "fit": false,
        "max": undefined,
        "min": undefined,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
  <ThresholdAnnotations
    colorAssignments={
      Object {
        "mock": Object {
          "getRank": [Function],
          "totalSeriesCount": 4,
        },
      }
    }
    data={
      Object {
        "dateRange": Object {
          "fromDate": 2019-01-02T05:00:00.000Z,
          "toDate": 2019-01-03T05:00:00.000Z,
        },
        "tables": Object {
          "first": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
        "type": "lens_multitable",
      }
    }
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    syncColors={false}
    thresholdLayers={Array []}
  />
</Chart>
`;

exports[`xy_expression XYChart component it renders stacked horizontal bar 1`] = `
<Chart
  renderer="canvas"
>
  <Connect(SpecInstance)
    baseTheme={Object {}}
    debugState={false}
    legendAction={
      Object {
        "$$typeof": Symbol(react.memo),
        "compare": null,
        "type": [Function],
      }
    }
    legendPosition="top"
    onBrushEnd={[Function]}
    onElementClick={[Function]}
    onPointerUpdate={[Function]}
    rotation={90}
    showLegend={false}
    showLegendExtra={false}
    theme={
      Object {
        "background": Object {
          "color": undefined,
        },
        "barSeriesStyle": Object {},
        "legend": Object {
          "labelOptions": Object {
            "maxLines": 0,
          },
        },
      }
    }
    tooltip={
      Object {
        "boundary": undefined,
        "headerFormatter": [Function],
      }
    }
  />
  <Connect(SpecInstance)
    gridLine={
      Object {
        "strokeWidth": 2,
        "visible": true,
      }
    }
    hide={false}
    id="x"
    position="left"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": 0,
          "visible": true,
        },
      }
    }
    tickFormat={[Function]}
    title="c"
  />
  <Connect(SpecInstance)
    domain={
      Object {
        "fit": false,
        "max": undefined,
        "min": undefined,
      }
    }
    gridLine={
      Object {
        "visible": false,
      }
    }
    groupId="left"
    id="left"
    key="left"
    position="bottom"
    style={
      Object {
        "axisTitle": Object {
          "visible": true,
        },
        "tickLabel": Object {
          "rotation": -90,
          "visible": false,
        },
      }
    }
    tickFormat={[Function]}
    title="a"
  />
  <XyEndzones
    darkMode={false}
    histogramMode={false}
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-a"
    key="0-0"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "a",
      ]
    }
    yScaleType="linear"
  />
  <Connect(SpecInstance)
    areaSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    color={[Function]}
    data={
      Array [
        Object {
          "a": 1,
          "b": 2,
          "c": "I",
          "d": "Foo",
        },
        Object {
          "a": 1,
          "b": 5,
          "c": "J",
          "d": "Bar",
        },
      ]
    }
    displayValueSettings={
      Object {
        "isAlternatingValueLabel": false,
        "isValueContainedInElement": false,
        "overflowConstraints": Array [
          "chartEdges",
          "barGeometry",
        ],
        "showValueLabel": false,
        "valueFormatter": [Function],
      }
    }
    enableHistogramMode={false}
    groupId="left"
    id="d-b"
    key="0-1"
    lineSeriesStyle={
      Object {
        "point": Object {
          "radius": 5,
          "visible": false,
        },
      }
    }
    name={[Function]}
    splitSeriesAccessors={
      Array [
        "d",
      ]
    }
    stackAccessors={
      Array [
        "c",
      ]
    }
    timeZone="UTC"
    xAccessor="c"
    xScaleType="ordinal"
    yAccessors={
      Array [
        "b",
      ]
    }
    yScaleType="linear"
  />
  <ThresholdAnnotations
    colorAssignments={
      Object {
        "mock": Object {
          "getRank": [Function],
          "totalSeriesCount": 4,
        },
      }
    }
    data={
      Object {
        "dateRange": Object {
          "fromDate": 2019-01-02T05:00:00.000Z,
          "toDate": 2019-01-03T05:00:00.000Z,
        },
        "tables": Object {
          "first": Object {
            "columns": Array [
              Object {
                "id": "a",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "0,0.000",
                    },
                  },
                  "type": "number",
                },
                "name": "a",
              },
              Object {
                "id": "b",
                "meta": Object {
                  "params": Object {
                    "id": "number",
                    "params": Object {
                      "pattern": "000,0",
                    },
                  },
                  "type": "number",
                },
                "name": "b",
              },
              Object {
                "id": "c",
                "meta": Object {
                  "field": "order_date",
                  "params": Object {
                    "id": "string",
                  },
                  "sourceParams": Object {
                    "params": Object {
                      "interval": "auto",
                    },
                    "type": "date-histogram",
                  },
                  "type": "date",
                },
                "name": "c",
              },
              Object {
                "id": "d",
                "meta": Object {
                  "type": "string",
                },
                "name": "ColD",
              },
            ],
            "rows": Array [
              Object {
                "a": 1,
                "b": 2,
                "c": "I",
                "d": "Foo",
              },
              Object {
                "a": 1,
                "b": 5,
                "c": "J",
                "d": "Bar",
              },
            ],
            "type": "datatable",
          },
        },
        "type": "lens_multitable",
      }
    }
    formatFactory={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "number",
              "params": Object {
                "pattern": "0,0.000",
              },
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
          Array [
            Object {
              "id": "string",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
          Object {
            "type": "return",
            "value": Object {
              "convert": [MockFunction] {
                "calls": Array [
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                  Array [
                    "I",
                  ],
                  Array [
                    "J",
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                  Object {
                    "type": "return",
                    "value": "I",
                  },
                  Object {
                    "type": "return",
                    "value": "J",
                  },
                ],
              },
            },
          },
        ],
      }
    }
    paletteService={
      Object {
        "get": [Function],
        "getAll": [Function],
      }
    }
    syncColors={false}
    thresholdLayers={Array []}
  />
</Chart>
`;
