.lnsDragDrop {
  border-radius: $euiBorderRadius;

  // Affix a pseudo element to handle the borders since
  // we don't want the button itself to shift in size based
  // on the border width which is anywhere between 0-2
  position: relative;

  &::after {
    content: '';
    pointer-events: none;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border-radius: $euiBorderRadius;
    border: 1px dashed $euiColorLightShade;
  }
}

.lnsDragDrop-isDraggable {
  @include euiSlightShadow;
  background: lightOrDarkTheme($euiColorEmptyShade, $euiColorLightestShade);

  &::after {
    border-color: transparent;
  }

  &:hover {
    & {
      cursor: grab;
    }

    &::after {
      border-color: $euiColorMediumShade;
    }
  }

  &:focus {
    @include euiFocusRing;
  }
}



.lnsDragDrop-isNotDroppable {
  opacity: .5;
}

// Fix specificity by chaining classes

.lnsDragDrop.lnsDragDrop-isDropTarget {
  background-color: transparentize($euiColorVis0, .9);
}

.lnsDragDrop.lnsDragDrop-isActiveDropTarget {
  background-color: transparentize($euiColorVis0, .75);

  &::after {
    border: 2px dashed $euiColorVis0;
  }
}

.lnsDragDrop-isDragging {
  opacity: .25;
}
