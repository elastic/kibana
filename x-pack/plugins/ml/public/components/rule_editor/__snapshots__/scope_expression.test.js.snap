// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ScopeExpression renders when empty list of filter IDs is supplied 1`] = `
<EuiFlexGroup
  alignItems="stretch"
  component="div"
  direction="row"
  gutterSize="m"
  justifyContent="flexStart"
  responsive={true}
  wrap={false}
>
  <EuiFlexItem
    className="scope-field-checkbox"
    component="div"
    grow={false}
  >
    <EuiCheckbox
      checked={true}
      compressed={false}
      disabled={false}
      id="scope_cb_domain"
      indeterminate={false}
      onChange={[Function]}
    />
  </EuiFlexItem>
  <EuiFlexItem
    component="div"
    grow={false}
  >
    <EuiExpression
      className="scope-field-button"
      color="secondary"
      description={
        <FormattedMessage
          defaultMessage="when"
          id="xpack.ml.ruleEditor.scopeExpression.scopeFieldWhenLabel"
          values={Object {}}
        />
      }
      isActive={false}
      onClick={[Function]}
      uppercase={true}
      value="domain"
    />
  </EuiFlexItem>
</EuiFlexGroup>
`;

exports[`ScopeExpression renders when enabled set to false 1`] = `
<EuiFlexGroup
  alignItems="stretch"
  component="div"
  direction="row"
  gutterSize="m"
  justifyContent="flexStart"
  responsive={true}
  wrap={false}
>
  <EuiFlexItem
    className="scope-field-checkbox"
    component="div"
    grow={false}
  >
    <EuiCheckbox
      checked={false}
      compressed={false}
      disabled={false}
      id="scope_cb_domain"
      indeterminate={false}
      onChange={[Function]}
    />
  </EuiFlexItem>
  <EuiFlexItem
    component="div"
    grow={false}
  >
    <EuiExpression
      className="scope-field-button"
      color="secondary"
      description={
        <FormattedMessage
          defaultMessage="when"
          id="xpack.ml.ruleEditor.scopeExpression.scopeFieldWhenLabel"
          values={Object {}}
        />
      }
      isActive={false}
      onClick={[Function]}
      uppercase={true}
      value="domain"
    />
  </EuiFlexItem>
  <EuiFlexItem
    component="div"
    grow={false}
  >
    <EuiPopover
      anchorPosition="downLeft"
      button={
        <EuiExpression
          color="secondary"
          description={
            <FormattedMessage
              defaultMessage="is {filterType}"
              id="xpack.ml.ruleEditor.scopeExpression.scopeFilterTypeButtonLabel"
              values={
                Object {
                  "filterType": "in",
                }
              }
            />
          }
          isActive={false}
          onClick={[Function]}
          uppercase={true}
          value="safe_domains"
        />
      }
      closePopover={[Function]}
      hasArrow={true}
      id="operatorValuePopover"
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="none"
      withTitle={true}
    >
      <div
        style={
          Object {
            "zIndex": "200",
          }
        }
      >
        <EuiPopoverTitle>
          <FormattedMessage
            defaultMessage="Is"
            id="xpack.ml.ruleEditor.scopeExpression.scopeFilterTypePopoverTitle"
            values={Object {}}
          />
        </EuiPopoverTitle>
        <div
          className="euiExpression"
        >
          <EuiFlexGroup
            alignItems="stretch"
            component="div"
            direction="row"
            gutterSize="l"
            justifyContent="flexStart"
            responsive={true}
            style={
              Object {
                "maxWidth": 450,
              }
            }
            wrap={false}
          >
            <EuiFlexItem
              component="div"
              grow={false}
              style={
                Object {
                  "width": 150,
                }
              }
            >
              <EuiSelect
                compressed={false}
                fullWidth={false}
                hasNoInitialSelection={false}
                isLoading={false}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "text": "in",
                      "value": "include",
                    },
                    Object {
                      "text": "not in",
                      "value": "exclude",
                    },
                  ]
                }
                value="include"
              />
            </EuiFlexItem>
            <EuiFlexItem
              component="div"
              grow={false}
              style={
                Object {
                  "width": 300,
                }
              }
            >
              <EuiSelect
                compressed={false}
                fullWidth={false}
                hasNoInitialSelection={false}
                isLoading={false}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "text": "web_domains",
                      "value": "web_domains",
                    },
                    Object {
                      "text": "safe_domains",
                      "value": "safe_domains",
                    },
                    Object {
                      "text": "uk_domains",
                      "value": "uk_domains",
                    },
                  ]
                }
                value="safe_domains"
              />
            </EuiFlexItem>
          </EuiFlexGroup>
        </div>
      </div>
    </EuiPopover>
  </EuiFlexItem>
</EuiFlexGroup>
`;

exports[`ScopeExpression renders when filter ID and type supplied 1`] = `
<EuiFlexGroup
  alignItems="stretch"
  component="div"
  direction="row"
  gutterSize="m"
  justifyContent="flexStart"
  responsive={true}
  wrap={false}
>
  <EuiFlexItem
    className="scope-field-checkbox"
    component="div"
    grow={false}
  >
    <EuiCheckbox
      checked={true}
      compressed={false}
      disabled={false}
      id="scope_cb_domain"
      indeterminate={false}
      onChange={[Function]}
    />
  </EuiFlexItem>
  <EuiFlexItem
    component="div"
    grow={false}
  >
    <EuiExpression
      className="scope-field-button"
      color="secondary"
      description={
        <FormattedMessage
          defaultMessage="when"
          id="xpack.ml.ruleEditor.scopeExpression.scopeFieldWhenLabel"
          values={Object {}}
        />
      }
      isActive={false}
      onClick={[Function]}
      uppercase={true}
      value="domain"
    />
  </EuiFlexItem>
  <EuiFlexItem
    component="div"
    grow={false}
  >
    <EuiPopover
      anchorPosition="downLeft"
      button={
        <EuiExpression
          color="secondary"
          description={
            <FormattedMessage
              defaultMessage="is {filterType}"
              id="xpack.ml.ruleEditor.scopeExpression.scopeFilterTypeButtonLabel"
              values={
                Object {
                  "filterType": "in",
                }
              }
            />
          }
          isActive={false}
          onClick={[Function]}
          uppercase={true}
          value="safe_domains"
        />
      }
      closePopover={[Function]}
      hasArrow={true}
      id="operatorValuePopover"
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="none"
      withTitle={true}
    >
      <div
        style={
          Object {
            "zIndex": "200",
          }
        }
      >
        <EuiPopoverTitle>
          <FormattedMessage
            defaultMessage="Is"
            id="xpack.ml.ruleEditor.scopeExpression.scopeFilterTypePopoverTitle"
            values={Object {}}
          />
        </EuiPopoverTitle>
        <div
          className="euiExpression"
        >
          <EuiFlexGroup
            alignItems="stretch"
            component="div"
            direction="row"
            gutterSize="l"
            justifyContent="flexStart"
            responsive={true}
            style={
              Object {
                "maxWidth": 450,
              }
            }
            wrap={false}
          >
            <EuiFlexItem
              component="div"
              grow={false}
              style={
                Object {
                  "width": 150,
                }
              }
            >
              <EuiSelect
                compressed={false}
                fullWidth={false}
                hasNoInitialSelection={false}
                isLoading={false}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "text": "in",
                      "value": "include",
                    },
                    Object {
                      "text": "not in",
                      "value": "exclude",
                    },
                  ]
                }
                value="include"
              />
            </EuiFlexItem>
            <EuiFlexItem
              component="div"
              grow={false}
              style={
                Object {
                  "width": 300,
                }
              }
            >
              <EuiSelect
                compressed={false}
                fullWidth={false}
                hasNoInitialSelection={false}
                isLoading={false}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "text": "web_domains",
                      "value": "web_domains",
                    },
                    Object {
                      "text": "safe_domains",
                      "value": "safe_domains",
                    },
                    Object {
                      "text": "uk_domains",
                      "value": "uk_domains",
                    },
                  ]
                }
                value="safe_domains"
              />
            </EuiFlexItem>
          </EuiFlexGroup>
        </div>
      </div>
    </EuiPopover>
  </EuiFlexItem>
</EuiFlexGroup>
`;

exports[`ScopeExpression renders when no filter ID or type supplied 1`] = `
<EuiFlexGroup
  alignItems="stretch"
  component="div"
  direction="row"
  gutterSize="m"
  justifyContent="flexStart"
  responsive={true}
  wrap={false}
>
  <EuiFlexItem
    className="scope-field-checkbox"
    component="div"
    grow={false}
  >
    <EuiCheckbox
      checked={true}
      compressed={false}
      disabled={false}
      id="scope_cb_domain"
      indeterminate={false}
      onChange={[Function]}
    />
  </EuiFlexItem>
  <EuiFlexItem
    component="div"
    grow={false}
  >
    <EuiExpression
      className="scope-field-button"
      color="secondary"
      description={
        <FormattedMessage
          defaultMessage="when"
          id="xpack.ml.ruleEditor.scopeExpression.scopeFieldWhenLabel"
          values={Object {}}
        />
      }
      isActive={false}
      onClick={[Function]}
      uppercase={true}
      value="domain"
    />
  </EuiFlexItem>
  <EuiFlexItem
    component="div"
    grow={false}
  >
    <EuiPopover
      anchorPosition="downLeft"
      button={
        <EuiExpression
          color="secondary"
          description={
            <FormattedMessage
              defaultMessage="is {filterType}"
              id="xpack.ml.ruleEditor.scopeExpression.scopeFilterTypeButtonLabel"
              values={
                Object {
                  "filterType": "",
                }
              }
            />
          }
          isActive={false}
          onClick={[Function]}
          uppercase={true}
          value=""
        />
      }
      closePopover={[Function]}
      hasArrow={true}
      id="operatorValuePopover"
      isOpen={false}
      ownFocus={true}
      panelPaddingSize="none"
      withTitle={true}
    >
      <div
        style={
          Object {
            "zIndex": "200",
          }
        }
      >
        <EuiPopoverTitle>
          <FormattedMessage
            defaultMessage="Is"
            id="xpack.ml.ruleEditor.scopeExpression.scopeFilterTypePopoverTitle"
            values={Object {}}
          />
        </EuiPopoverTitle>
        <div
          className="euiExpression"
        >
          <EuiFlexGroup
            alignItems="stretch"
            component="div"
            direction="row"
            gutterSize="l"
            justifyContent="flexStart"
            responsive={true}
            style={
              Object {
                "maxWidth": 450,
              }
            }
            wrap={false}
          >
            <EuiFlexItem
              component="div"
              grow={false}
              style={
                Object {
                  "width": 150,
                }
              }
            >
              <EuiSelect
                compressed={false}
                fullWidth={false}
                hasNoInitialSelection={false}
                isLoading={false}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "text": "in",
                      "value": "include",
                    },
                    Object {
                      "text": "not in",
                      "value": "exclude",
                    },
                  ]
                }
              />
            </EuiFlexItem>
            <EuiFlexItem
              component="div"
              grow={false}
              style={
                Object {
                  "width": 300,
                }
              }
            >
              <EuiSelect
                compressed={false}
                fullWidth={false}
                hasNoInitialSelection={false}
                isLoading={false}
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "text": "web_domains",
                      "value": "web_domains",
                    },
                    Object {
                      "text": "safe_domains",
                      "value": "safe_domains",
                    },
                    Object {
                      "text": "uk_domains",
                      "value": "uk_domains",
                    },
                  ]
                }
              />
            </EuiFlexItem>
          </EuiFlexGroup>
        </div>
      </div>
    </EuiPopover>
  </EuiFlexItem>
</EuiFlexGroup>
`;
