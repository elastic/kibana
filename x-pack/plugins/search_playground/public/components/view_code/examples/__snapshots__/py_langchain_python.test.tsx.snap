// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PY_LANGCHAIN function renders with correct content 1`] = `
"## Install the required packages
## pip install -qU elasticsearch langchain langchain-elasticsearch langchain-openai

from langchain_elasticsearch import ElasticsearchRetriever
from langchain_openai import ChatOpenAI
from langchain_core.runnables import RunnablePassthrough
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import format_document
from langchain.prompts.prompt import PromptTemplate
import os


es_client = Elasticsearch(
  http://my-local-cloud-instance,
  api_key=os.environ[\\"ES_API_KEY\\"]
)
      

def build_query(query):
  return {
  \\"query\\": {}
}

retriever = ElasticsearchRetriever(
  index_name=\\"{formValues.indices.join(',')}\\",
  body_func=build_query,
  content_field=\\"text\\",
  es_client=es_client
)

model = ChatOpenAI(openai_api_key=os.environ[\\"OPENAI_API_KEY\\"], model_name=\\"Your-new-model\\")


ANSWER_PROMPT = ChatPromptTemplate.from_template(
    f\\"\\"\\"
  Instructions:
  
  - Your prompt
  - Answer questions truthfully and factually using only the information presented.
  - If you don't know the answer, just say that you don't know, don't make up an answer!
  - You must always cite the document where the answer was extracted using inline academic citation style [], using the position.
  - Use markdown format for code examples.
  - You are correct, factual, precise, and reliable.
  

  Context:
  {context}

  Question: {question}
  Answer:
  \\"\\"\\"
)

DEFAULT_DOCUMENT_PROMPT = PromptTemplate.from_template(template=\\"{page_content}\\")

def _combine_documents(
  docs, document_prompt=DEFAULT_DOCUMENT_PROMPT, document_separator=\\"\\\\n\\\\n\\"
):
  doc_strings = [format_document(doc, document_prompt) for doc in docs]
  return document_separator.join(doc_strings)

_context = {
  \\"context\\": retriever | _combine_documents,
  \\"question\\": RunnablePassthrough(),
}

chain = _context | ANSWER_PROMPT | model | StrOutputParser()
ans = chain.invoke(\\"what is the nasa sales team?\\")
print(\\"---- Answer ----\\")
print(ans)"
`;
