{
  "openapi": "3.0.1",
  "info": {
    "title": "Connectors",
    "description": "OpenAPI schema for connectors in Serverless projects",
    "version": "0.1",
    "contact": {
      "name": "Connectors Team"
    },
    "license": {
      "name": "Elastic License 2.0",
      "url": "https://www.elastic.co/licensing/elastic-license"
    }
  },
  "servers": [
    {
      "url": "https://{kibanaUrl}",
      "variables": {
        "kibanaUrl": {
          "default": "localhost:5601"
        }
      }
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "connectors",
      "description": "Connector APIs enable you to create and manage connectors."
    }
  ],
  "paths": {
    "/api/actions/connector": {
      "post": {
        "summary": "Creates a connector.",
        "operationId": "createConnector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_connector_request"
              },
              "examples": {
                "createEmailConnectorRequest": {
                  "$ref": "#/components/examples/create_email_connector_request"
                },
                "createIndexConnectorRequest": {
                  "$ref": "#/components/examples/create_index_connector_request"
                },
                "createWebhookConnectorRequest": {
                  "$ref": "#/components/examples/create_webhook_connector_request"
                },
                "createXmattersConnectorRequest": {
                  "$ref": "#/components/examples/create_xmatters_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "createEmailConnectorResponse": {
                    "$ref": "#/components/examples/create_email_connector_response"
                  },
                  "createIndexConnectorResponse": {
                    "$ref": "#/components/examples/create_index_connector_response"
                  },
                  "createWebhookConnectorResponse": {
                    "$ref": "#/components/examples/create_webhook_connector_response"
                  },
                  "createXmattersConnectorResponse": {
                    "$ref": "#/components/examples/create_xmatters_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/actions/connector/{connectorId}": {
      "get": {
        "summary": "Retrieves a connector by ID.",
        "operationId": "getConnector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "getConnectorResponse": {
                    "$ref": "#/components/examples/get_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "summary": "Deletes a connector.",
        "operationId": "deleteConnector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates a successful call."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Creates a connector.",
        "operationId": "createConnectorId",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "in": "path",
            "name": "connectorId",
            "description": "A UUID v1 or v4 identifier for the connector. If you omit this parameter, an identifier is randomly generated.\n",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ac4e6b90-6be7-11eb-ba0d-9b1c1f912d74"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_connector_request"
              },
              "examples": {
                "createIndexConnectorRequest": {
                  "$ref": "#/components/examples/create_index_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "createIndexConnectorResponse": {
                    "$ref": "#/components/examples/create_index_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "summary": "Updates the attributes for a connector.",
        "operationId": "updateConnector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_connector_request"
              },
              "examples": {
                "updateIndexConnectorRequest": {
                  "$ref": "#/components/examples/update_index_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/401"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/api/actions/connectors": {
      "get": {
        "summary": "Retrieves all connectors.",
        "operationId": "getConnectors",
        "tags": [
          "connectors"
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/connector_response_properties"
                  }
                },
                "examples": {
                  "getConnectorsResponse": {
                    "$ref": "#/components/examples/get_connectors_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/actions/connector_types": {
      "get": {
        "summary": "Retrieves a list of all connector types.",
        "operationId": "getConnectorTypes",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "feature_id",
            "description": "A filter to limit the retrieved connector types to those that support a specific feature (such as alerting or cases).",
            "schema": {
              "$ref": "#/components/schemas/features"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Get connector types response body properties",
                  "description": "The properties vary for each connector type.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the connector type is enabled in Kibana.",
                        "example": true
                      },
                      "enabled_in_config": {
                        "type": "boolean",
                        "description": "Indicates whether the connector type is enabled in the Kibana configuration file.",
                        "example": true
                      },
                      "enabled_in_license": {
                        "type": "boolean",
                        "description": "Indicates whether the connector is enabled in the license.",
                        "example": true
                      },
                      "id": {
                        "$ref": "#/components/schemas/connector_types"
                      },
                      "is_system_action_type": {
                        "type": "boolean",
                        "example": false
                      },
                      "minimum_license_required": {
                        "type": "string",
                        "description": "The license that is required to use the connector type.",
                        "example": "basic"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the connector type.",
                        "example": "Index"
                      },
                      "supported_feature_ids": {
                        "type": "array",
                        "description": "The features that are supported by the connector type.",
                        "items": {
                          "$ref": "#/components/schemas/features"
                        },
                        "example": [
                          "alerting",
                          "cases",
                          "siem"
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "getConnectorTypesServerlessResponse": {
                    "$ref": "#/components/examples/get_connector_types_generativeai_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "ApiKey"
      }
    },
    "parameters": {
      "kbn_xsrf": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "kbn-xsrf",
        "description": "Cross-site request forgery protection",
        "required": true
      },
      "connector_id": {
        "in": "path",
        "name": "connectorId",
        "description": "An identifier for the connector.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "df770e30-8b8b-11ed-a780-3b746c987a81"
        }
      }
    },
    "schemas": {
      "config_properties_bedrock": {
        "title": "Connector request properties for an Amazon Bedrock connector",
        "description": "Defines properties for connectors when type is `.bedrock`.",
        "type": "object",
        "required": [
          "apiUrl"
        ],
        "properties": {
          "apiUrl": {
            "type": "string",
            "description": "The Amazon Bedrock request URL."
          },
          "defaultModel": {
            "type": "string",
            "description": "The generative artificial intelligence model for Amazon Bedrock to use. Current support is for the Anthropic Claude models.\n",
            "default": "anthropic.claude-v2"
          }
        }
      },
      "secrets_properties_bedrock": {
        "title": "Connector secrets properties for an Amazon Bedrock connector",
        "description": "Defines secrets for connectors when type is `.bedrock`.",
        "type": "object",
        "required": [
          "accessKey",
          "secret"
        ],
        "properties": {
          "accessKey": {
            "type": "string",
            "description": "The AWS access key for authentication."
          },
          "secret": {
            "type": "string",
            "description": "The AWS secret for authentication."
          }
        }
      },
      "create_connector_request_bedrock": {
        "title": "Create Amazon Bedrock connector request",
        "description": "The Amazon Bedrock connector uses axios to send a POST request to Amazon Bedrock.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_bedrock"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".bedrock"
            ],
            "example": ".bedrock"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_bedrock"
          }
        }
      },
      "config_properties_cases_webhook": {
        "title": "Connector request properties for Webhook - Case Management connector",
        "required": [
          "createIncidentJson",
          "createIncidentResponseKey",
          "createIncidentUrl",
          "getIncidentResponseExternalTitleKey",
          "getIncidentUrl",
          "updateIncidentJson",
          "updateIncidentUrl",
          "viewIncidentUrl"
        ],
        "description": "Defines properties for connectors when type is `.cases-webhook`.",
        "type": "object",
        "properties": {
          "createCommentJson": {
            "type": "string",
            "description": "A JSON payload sent to the create comment URL to create a case comment. You can use variables to add Kibana Cases data to the payload. The required variable is `case.comment`. Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated once the Mustache variables have been placed when the REST method runs. Manually ensure that the JSON is valid, disregarding the Mustache variables, so the later validation will pass.\n",
            "example": {
              "body": {
                "[object Object]": null
              }
            }
          },
          "createCommentMethod": {
            "type": "string",
            "description": "The REST API HTTP request method to create a case comment in the third-party system. Valid values are `patch`, `post`, and `put`.\n",
            "default": "put",
            "enum": [
              "patch",
              "post",
              "put"
            ]
          },
          "createCommentUrl": {
            "type": "string",
            "description": "The REST API URL to create a case comment by ID in the third-party system. You can use a variable to add the external system ID to the URL. If you are using the `xpack.actions.allowedHosts setting`, add the hostname to the allowed hosts.\n",
            "example": "https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}/comment"
          },
          "createIncidentJson": {
            "type": "string",
            "description": "A JSON payload sent to the create case URL to create a case. You can use variables to add case data to the payload. Required variables are `case.title` and `case.description`. Due to Mustache template variables (which is the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid to avoid future validation errors; disregard Mustache variables during your review.\n",
            "example": {
              "fields": {
                "summary": {
                  "[object Object]": null
                },
                "description": {
                  "[object Object]": null
                },
                "labels": {
                  "[object Object]": null
                }
              }
            }
          },
          "createIncidentMethod": {
            "type": "string",
            "description": "The REST API HTTP request method to create a case in the third-party system. Valid values are `patch`, `post`, and `put`.\n",
            "enum": [
              "patch",
              "post",
              "put"
            ],
            "default": "post"
          },
          "createIncidentResponseKey": {
            "type": "string",
            "description": "The JSON key in the create case response that contains the external case ID."
          },
          "createIncidentUrl": {
            "type": "string",
            "description": "The REST API URL to create a case in the third-party system. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n"
          },
          "getIncidentResponseExternalTitleKey": {
            "type": "string",
            "description": "The JSON key in get case response that contains the external case title."
          },
          "getIncidentUrl": {
            "type": "string",
            "description": "The REST API URL to get the case by ID from the third-party system. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts. You can use a variable to add the external system ID to the URL. Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid, disregarding the Mustache variables, so the later validation will pass.\n",
            "example": "https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}"
          },
          "hasAuth": {
            "type": "boolean",
            "description": "If true, a username and password for login type authentication must be provided.",
            "default": true
          },
          "headers": {
            "type": "string",
            "description": "A set of key-value pairs sent as headers with the request URLs for the create case, update case, get case, and create comment methods.\n"
          },
          "updateIncidentJson": {
            "type": "string",
            "description": "The JSON payload sent to the update case URL to update the case. You can use variables to add Kibana Cases data to the payload. Required variables are `case.title` and `case.description`. Due to Mustache template variables (which is the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid to avoid future validation errors; disregard Mustache variables during your review.\n",
            "example": {
              "fields": {
                "summary": {
                  "[object Object]": null
                },
                "description": {
                  "[object Object]": null
                },
                "labels": {
                  "[object Object]": null
                }
              }
            }
          },
          "updateIncidentMethod": {
            "type": "string",
            "description": "The REST API HTTP request method to update the case in the third-party system. Valid values are `patch`, `post`, and `put`.\n",
            "default": "put",
            "enum": [
              "patch",
              "post",
              "put"
            ]
          },
          "updateIncidentUrl": {
            "type": "string",
            "description": "The REST API URL to update the case by ID in the third-party system. You can use a variable to add the external system ID to the URL. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n",
            "example": "https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.ID}}}"
          },
          "viewIncidentUrl": {
            "type": "string",
            "description": "The URL to view the case in the external system. You can use variables to add the external system ID or external system title to the URL.\n",
            "example": "https://testing-jira.atlassian.net/browse/{{{external.system.title}}}"
          }
        }
      },
      "secrets_properties_cases_webhook": {
        "title": "Connector secrets properties for Webhook - Case Management connector",
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The password for HTTP basic authentication. If `hasAuth` is set to `true`, this property is required."
          },
          "user": {
            "type": "string",
            "description": "The username for HTTP basic authentication. If `hasAuth` is set to `true`, this property is required."
          }
        }
      },
      "create_connector_request_cases_webhook": {
        "title": "Create Webhook - Case Managment connector request",
        "description": "The Webhook - Case Management connector uses axios to send POST, PUT, and GET requests to a case management RESTful API web service.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_cases_webhook"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".cases-webhook"
            ],
            "example": ".cases-webhook"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_cases_webhook"
          }
        }
      },
      "config_properties_d3security": {
        "title": "Connector request properties for a D3 Security connector",
        "description": "Defines properties for connectors when type is `.d3security`.",
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "The D3 Security API request URL. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n"
          }
        }
      },
      "secrets_properties_d3security": {
        "title": "Connector secrets properties for a D3 Security connector",
        "description": "Defines secrets for connectors when type is `.d3security`.",
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The D3 Security token."
          }
        }
      },
      "create_connector_request_d3security": {
        "title": "Create D3 Security connector request",
        "description": "The connector uses axios to send a POST request to a D3 Security endpoint.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_d3security"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".d3security"
            ],
            "example": ".d3security"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_d3security"
          }
        }
      },
      "config_properties_email": {
        "title": "Connector request properties for an email connector",
        "description": "Defines properties for connectors when type is `.email`.",
        "required": [
          "from"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "description": "The client identifier, which is a part of OAuth 2.0 client credentials authentication, in GUID format. If `service` is `exchange_server`, this property is required.\n",
            "type": "string",
            "nullable": true
          },
          "from": {
            "description": "The from address for all emails sent by the connector. It must be specified in `user@host-name` format.\n",
            "type": "string"
          },
          "hasAuth": {
            "description": "Specifies whether a user and password are required inside the secrets configuration.\n",
            "default": true,
            "type": "boolean"
          },
          "host": {
            "description": "The host name of the service provider. If the `service` is `elastic_cloud` (for Elastic Cloud notifications) or one of Nodemailer's well-known email service providers, this property is ignored. If `service` is `other`, this property must be defined. \n",
            "type": "string"
          },
          "oauthTokenUrl": {
            "type": "string",
            "nullable": true
          },
          "port": {
            "description": "The port to connect to on the service provider. If the `service` is `elastic_cloud` (for Elastic Cloud notifications) or one of Nodemailer's well-known email service providers, this property is ignored. If `service` is `other`, this property must be defined. \n",
            "type": "integer"
          },
          "secure": {
            "description": "Specifies whether the connection to the service provider will use TLS. If the `service` is `elastic_cloud` (for Elastic Cloud notifications) or one of Nodemailer's well-known email service providers, this property is ignored.\n",
            "type": "boolean"
          },
          "service": {
            "description": "The name of the email service.\n",
            "type": "string",
            "enum": [
              "elastic_cloud",
              "exchange_server",
              "gmail",
              "other",
              "outlook365",
              "ses"
            ]
          },
          "tenantId": {
            "description": "The tenant identifier, which is part of OAuth 2.0 client credentials authentication, in GUID format. If `service` is `exchange_server`, this property is required.\n",
            "type": "string",
            "nullable": true
          }
        }
      },
      "secrets_properties_email": {
        "title": "Connector secrets properties for an email connector",
        "description": "Defines secrets for connectors when type is `.email`.",
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "The Microsoft Exchange Client secret for OAuth 2.0 client credentials authentication. It must be URL-encoded. If `service` is `exchange_server`, this property is required.\n"
          },
          "password": {
            "type": "string",
            "description": "The password for HTTP basic authentication. If `hasAuth` is set to `true`, this property is required.\n"
          },
          "user": {
            "type": "string",
            "description": "The username for HTTP basic authentication. If `hasAuth` is set to `true`, this property is required.\n"
          }
        }
      },
      "create_connector_request_email": {
        "title": "Create email connector request",
        "description": "The email connector uses the SMTP protocol to send mail messages, using an integration of Nodemailer. An exception is Microsoft Exchange, which uses HTTP protocol for sending emails, Send mail. Email message text is sent as both plain text and html text.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_email"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".email"
            ],
            "example": ".email"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_email"
          }
        }
      },
      "config_properties_genai": {
        "title": "Connector request properties for an OpenAI connector",
        "description": "Defines properties for connectors when type is `.gen-ai`.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "apiProvider",
              "apiUrl"
            ],
            "properties": {
              "apiProvider": {
                "type": "string",
                "description": "The OpenAI API provider.",
                "enum": [
                  "Azure OpenAI"
                ]
              },
              "apiUrl": {
                "type": "string",
                "description": "The OpenAI API endpoint."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "apiProvider",
              "apiUrl"
            ],
            "properties": {
              "apiProvider": {
                "type": "string",
                "description": "The OpenAI API provider.",
                "enum": [
                  "OpenAI"
                ]
              },
              "apiUrl": {
                "type": "string",
                "description": "The OpenAI API endpoint."
              },
              "defaultModel": {
                "type": "string",
                "description": "The default model to use for requests."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "apiProvider"
        }
      },
      "secrets_properties_genai": {
        "title": "Connector secrets properties for an OpenAI connector",
        "description": "Defines secrets for connectors when type is `.gen-ai`.",
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "The OpenAI API key."
          }
        }
      },
      "create_connector_request_genai": {
        "title": "Create OpenAI connector request",
        "description": "The OpenAI connector uses axios to send a POST request to either OpenAI or Azure OpenAPI.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_genai"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".gen-ai"
            ],
            "example": ".gen-ai"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_genai"
          }
        }
      },
      "config_properties_index": {
        "title": "Connector request properties for an index connector",
        "required": [
          "index"
        ],
        "description": "Defines properties for connectors when type is `.index`.",
        "type": "object",
        "properties": {
          "executionTimeField": {
            "description": "A field that indicates when the document was indexed.",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "index": {
            "description": "The Elasticsearch index to be written to.",
            "type": "string"
          },
          "refresh": {
            "description": "The refresh policy for the write request, which affects when changes are made visible to search. Refer to the refresh setting for Elasticsearch document APIs.\n",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "create_connector_request_index": {
        "title": "Create index connector request",
        "description": "The index connector indexes a document into Elasticsearch.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_index"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".index"
            ],
            "example": ".index"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          }
        }
      },
      "config_properties_jira": {
        "title": "Connector request properties for a Jira connector",
        "required": [
          "apiUrl",
          "projectKey"
        ],
        "description": "Defines properties for connectors when type is `.jira`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The Jira instance URL.",
            "type": "string"
          },
          "projectKey": {
            "description": "The Jira project key.",
            "type": "string"
          }
        }
      },
      "secrets_properties_jira": {
        "title": "Connector secrets properties for a Jira connector",
        "required": [
          "apiToken",
          "email"
        ],
        "description": "Defines secrets for connectors when type is `.jira`.",
        "type": "object",
        "properties": {
          "apiToken": {
            "description": "The Jira API authentication token for HTTP basic authentication.",
            "type": "string"
          },
          "email": {
            "description": "The account email for HTTP Basic authentication.",
            "type": "string"
          }
        }
      },
      "create_connector_request_jira": {
        "title": "Create Jira connector request",
        "description": "The Jira connector uses the REST API v2 to create Jira issues.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_jira"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".jira"
            ],
            "example": ".jira"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_jira"
          }
        }
      },
      "config_properties_opsgenie": {
        "title": "Connector request properties for an Opsgenie connector",
        "required": [
          "apiUrl"
        ],
        "description": "Defines properties for connectors when type is `.opsgenie`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The Opsgenie URL. For example, `https://api.opsgenie.com` or `https://api.eu.opsgenie.com`. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n",
            "type": "string"
          }
        }
      },
      "secrets_properties_opsgenie": {
        "title": "Connector secrets properties for an Opsgenie connector",
        "required": [
          "apiKey"
        ],
        "description": "Defines secrets for connectors when type is `.opsgenie`.",
        "type": "object",
        "properties": {
          "apiKey": {
            "description": "The Opsgenie API authentication key for HTTP Basic authentication.",
            "type": "string"
          }
        }
      },
      "create_connector_request_opsgenie": {
        "title": "Create Opsgenie connector request",
        "description": "The Opsgenie connector uses the Opsgenie alert API.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_opsgenie"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".opsgenie"
            ],
            "example": ".opsgenie"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_opsgenie"
          }
        }
      },
      "config_properties_pagerduty": {
        "title": "Connector request properties for a PagerDuty connector",
        "description": "Defines properties for connectors when type is `.pagerduty`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The PagerDuty event URL.",
            "type": "string",
            "nullable": true,
            "example": "https://events.pagerduty.com/v2/enqueue"
          }
        }
      },
      "secrets_properties_pagerduty": {
        "title": "Connector secrets properties for a PagerDuty connector",
        "description": "Defines secrets for connectors when type is `.pagerduty`.",
        "type": "object",
        "required": [
          "routingKey"
        ],
        "properties": {
          "routingKey": {
            "description": "A 32 character PagerDuty Integration Key for an integration on a service.\n",
            "type": "string"
          }
        }
      },
      "create_connector_request_pagerduty": {
        "title": "Create PagerDuty connector request",
        "description": "The PagerDuty connector uses the v2 Events API to trigger, acknowledge, and resolve PagerDuty alerts.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_pagerduty"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".pagerduty"
            ],
            "example": ".pagerduty"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_pagerduty"
          }
        }
      },
      "config_properties_resilient": {
        "title": "Connector request properties for a IBM Resilient connector",
        "required": [
          "apiUrl",
          "orgId"
        ],
        "description": "Defines properties for connectors when type is `.resilient`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The IBM Resilient instance URL.",
            "type": "string"
          },
          "orgId": {
            "description": "The IBM Resilient organization ID.",
            "type": "string"
          }
        }
      },
      "secrets_properties_resilient": {
        "title": "Connector secrets properties for IBM Resilient connector",
        "required": [
          "apiKeyId",
          "apiKeySecret"
        ],
        "description": "Defines secrets for connectors when type is `.resilient`.",
        "type": "object",
        "properties": {
          "apiKeyId": {
            "type": "string",
            "description": "The authentication key ID for HTTP Basic authentication."
          },
          "apiKeySecret": {
            "type": "string",
            "description": "The authentication key secret for HTTP Basic authentication."
          }
        }
      },
      "create_connector_request_resilient": {
        "title": "Create IBM Resilient connector request",
        "description": "The IBM Resilient connector uses the RESILIENT REST v2 to create IBM Resilient incidents.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_resilient"
          },
          "connector_type_id": {
            "description": "The type of connector.",
            "type": "string",
            "example": ".resilient",
            "enum": [
              ".resilient"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_resilient"
          }
        }
      },
      "create_connector_request_serverlog": {
        "title": "Create server log connector request",
        "description": "This connector writes an entry to the Kibana server log.",
        "type": "object",
        "required": [
          "connector_type_id",
          "name"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".server-log"
            ],
            "example": ".server-log"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          }
        }
      },
      "config_properties_servicenow": {
        "title": "Connector request properties for a ServiceNow ITSM connector",
        "required": [
          "apiUrl"
        ],
        "description": "Defines properties for connectors when type is `.servicenow`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "type": "string",
            "description": "The ServiceNow instance URL."
          },
          "clientId": {
            "description": "The client ID assigned to your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "isOAuth": {
            "description": "The type of authentication to use. The default value is false, which means basic authentication is used instead of open authorization (OAuth).\n",
            "default": false,
            "type": "boolean"
          },
          "jwtKeyId": {
            "description": "The key identifier assigned to the JWT verifier map of your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "userIdentifierValue": {
            "description": "The identifier to use for OAuth authentication. This identifier should be the user field you selected when you created an OAuth JWT API endpoint for external clients in your ServiceNow instance. For example, if the selected user field is `Email`, the user identifier should be the user's email address. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "usesTableApi": {
            "description": "Determines whether the connector uses the Table API or the Import Set API. This property is supported only for ServiceNow ITSM and ServiceNow SecOps connectors.  NOTE: If this property is set to `false`, the Elastic application should be installed in ServiceNow.\n",
            "default": true,
            "type": "boolean"
          }
        }
      },
      "secrets_properties_servicenow": {
        "title": "Connector secrets properties for ServiceNow ITOM, ServiceNow ITSM, and ServiceNow SecOps connectors",
        "description": "Defines secrets for connectors when type is `.servicenow`, `.servicenow-sir`, or `.servicenow-itom`.",
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "The client secret assigned to your OAuth application. This property is required when `isOAuth` is `true`."
          },
          "password": {
            "type": "string",
            "description": "The password for HTTP basic authentication. This property is required when `isOAuth` is `false`."
          },
          "privateKey": {
            "type": "string",
            "description": "The RSA private key that you created for use in ServiceNow. This property is required when `isOAuth` is `true`."
          },
          "privateKeyPassword": {
            "type": "string",
            "description": "The password for the RSA private key. This property is required when `isOAuth` is `true` and you set a password on your private key."
          },
          "username": {
            "type": "string",
            "description": "The username for HTTP basic authentication. This property is required when `isOAuth` is `false`."
          }
        }
      },
      "create_connector_request_servicenow": {
        "title": "Create ServiceNow ITSM connector request",
        "description": "The ServiceNow ITSM connector uses the import set API to create ServiceNow incidents. You can use the connector for rule actions and cases.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow"
            ],
            "example": ".servicenow"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "config_properties_servicenow_itom": {
        "title": "Connector request properties for a ServiceNow ITSM connector",
        "required": [
          "apiUrl"
        ],
        "description": "Defines properties for connectors when type is `.servicenow`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "type": "string",
            "description": "The ServiceNow instance URL."
          },
          "clientId": {
            "description": "The client ID assigned to your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "isOAuth": {
            "description": "The type of authentication to use. The default value is false, which means basic authentication is used instead of open authorization (OAuth).\n",
            "default": false,
            "type": "boolean"
          },
          "jwtKeyId": {
            "description": "The key identifier assigned to the JWT verifier map of your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "userIdentifierValue": {
            "description": "The identifier to use for OAuth authentication. This identifier should be the user field you selected when you created an OAuth JWT API endpoint for external clients in your ServiceNow instance. For example, if the selected user field is `Email`, the user identifier should be the user's email address. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          }
        }
      },
      "create_connector_request_servicenow_itom": {
        "title": "Create ServiceNow ITOM connector request",
        "description": "The ServiceNow ITOM connector uses the event API to create ServiceNow events. You can use the connector for rule actions.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow_itom"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-itom"
            ],
            "example": ".servicenow-itom"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "create_connector_request_servicenow_sir": {
        "title": "Create ServiceNow SecOps connector request",
        "description": "The ServiceNow SecOps connector uses the import set API to create ServiceNow security incidents. You can use the connector for rule actions and cases.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-sir"
            ],
            "example": ".servicenow-sir"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "secrets_properties_slack_api": {
        "title": "Connector secrets properties for a Web API Slack connector",
        "description": "Defines secrets for connectors when type is `.slack`.",
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Slack bot user OAuth token."
          }
        }
      },
      "create_connector_request_slack_api": {
        "title": "Create Slack connector request",
        "description": "The Slack connector uses Slack Incoming Webhooks.",
        "type": "object",
        "required": [
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".slack_api"
            ],
            "example": ".slack_api"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_slack_api"
          }
        }
      },
      "secrets_properties_slack_webhook": {
        "title": "Connector secrets properties for a Webhook Slack connector",
        "description": "Defines secrets for connectors when type is `.slack`.",
        "required": [
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookUrl": {
            "type": "string",
            "description": "Slack webhook url."
          }
        }
      },
      "create_connector_request_slack_webhook": {
        "title": "Create Slack connector request",
        "description": "The Slack connector uses Slack Incoming Webhooks.",
        "type": "object",
        "required": [
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".slack"
            ],
            "example": ".slack"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_slack_webhook"
          }
        }
      },
      "config_properties_swimlane": {
        "title": "Connector request properties for a Swimlane connector",
        "required": [
          "apiUrl",
          "appId",
          "connectorType"
        ],
        "description": "Defines properties for connectors when type is `.swimlane`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The Swimlane instance URL.",
            "type": "string"
          },
          "appId": {
            "description": "The Swimlane application ID.",
            "type": "string"
          },
          "connectorType": {
            "description": "The type of connector. Valid values are `all`, `alerts`, and `cases`.",
            "type": "string",
            "enum": [
              "all",
              "alerts",
              "cases"
            ]
          },
          "mappings": {
            "title": "Connector mappings properties for a Swimlane connector",
            "description": "The field mapping.",
            "type": "object",
            "properties": {
              "alertIdConfig": {
                "title": "Alert identifier mapping",
                "description": "Mapping for the alert ID.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "caseIdConfig": {
                "title": "Case identifier mapping",
                "description": "Mapping for the case ID.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "caseNameConfig": {
                "title": "Case name mapping",
                "description": "Mapping for the case name.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "commentsConfig": {
                "title": "Case comment mapping",
                "description": "Mapping for the case comments.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "descriptionConfig": {
                "title": "Case description mapping",
                "description": "Mapping for the case description.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "ruleNameConfig": {
                "title": "Rule name mapping",
                "description": "Mapping for the name of the alert's rule.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "severityConfig": {
                "title": "Severity mapping",
                "description": "Mapping for the severity.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              }
            }
          }
        }
      },
      "secrets_properties_swimlane": {
        "title": "Connector secrets properties for a Swimlane connector",
        "description": "Defines secrets for connectors when type is `.swimlane`.",
        "type": "object",
        "properties": {
          "apiToken": {
            "description": "Swimlane API authentication token.",
            "type": "string"
          }
        }
      },
      "create_connector_request_swimlane": {
        "title": "Create Swimlane connector request",
        "description": "The Swimlane connector uses the Swimlane REST API to create Swimlane records.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_swimlane"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".swimlane"
            ],
            "example": ".swimlane"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_swimlane"
          }
        }
      },
      "secrets_properties_teams": {
        "title": "Connector secrets properties for a Microsoft Teams connector",
        "description": "Defines secrets for connectors when type is `.teams`.",
        "type": "object",
        "required": [
          "webhookUrl"
        ],
        "properties": {
          "webhookUrl": {
            "type": "string",
            "description": "The URL of the incoming webhook. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n"
          }
        }
      },
      "create_connector_request_teams": {
        "title": "Create Microsoft Teams connector request",
        "description": "The Microsoft Teams connector uses Incoming Webhooks.",
        "type": "object",
        "required": [
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".teams"
            ],
            "example": ".teams"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_teams"
          }
        }
      },
      "config_properties_tines": {
        "title": "Connector request properties for a Tines connector",
        "description": "Defines properties for connectors when type is `.tines`.",
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "description": "The Tines tenant URL. If you are using the `xpack.actions.allowedHosts` setting, make sure this hostname is added to the allowed hosts.\n",
            "type": "string"
          }
        }
      },
      "secrets_properties_tines": {
        "title": "Connector secrets properties for a Tines connector",
        "description": "Defines secrets for connectors when type is `.tines`.",
        "type": "object",
        "required": [
          "email",
          "token"
        ],
        "properties": {
          "email": {
            "description": "The email used to sign in to Tines.",
            "type": "string"
          },
          "token": {
            "description": "The Tines API token.",
            "type": "string"
          }
        }
      },
      "create_connector_request_tines": {
        "title": "Create Tines connector request",
        "description": "The Tines connector uses Tines Webhook actions to send events via POST request.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_tines"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".tines"
            ],
            "example": ".tines"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_tines"
          }
        }
      },
      "config_properties_torq": {
        "title": "Connector request properties for a Torq connector",
        "description": "Defines properties for connectors when type is `.torq`.",
        "type": "object",
        "required": [
          "webhookIntegrationUrl"
        ],
        "properties": {
          "webhookIntegrationUrl": {
            "description": "The endpoint URL of the Elastic Security integration in Torq.",
            "type": "string"
          }
        }
      },
      "secrets_properties_torq": {
        "title": "Connector secrets properties for a Torq connector",
        "description": "Defines secrets for connectors when type is `.torq`.",
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "The secret of the webhook authentication header.",
            "type": "string"
          }
        }
      },
      "create_connector_request_torq": {
        "title": "Create Torq connector request",
        "description": "The Torq connector uses a Torq webhook to trigger workflows with Kibana actions.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_torq"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".torq"
            ],
            "example": ".torq"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_torq"
          }
        }
      },
      "config_properties_webhook": {
        "title": "Connector request properties for a Webhook connector",
        "description": "Defines properties for connectors when type is `.webhook`.",
        "type": "object",
        "properties": {
          "authType": {
            "type": "string",
            "enum": [
              "webhook-authentication-basic",
              "webhook-authentication-ssl",
              "null"
            ],
            "description": "The type of authentication to use: basic, SSL, or none.\n"
          },
          "ca": {
            "type": "string",
            "description": "A base64 encoded version of the certificate authority file that the connector can trust to sign and validate certificates. This option is available for all authentication types.\n"
          },
          "certType": {
            "type": "string",
            "description": "If the `authType` is `webhook-authentication-ssl`, specifies whether the certificate authentication data is in a CRT and key file format or a PFX file format.\n",
            "enum": [
              "ssl-crt-key",
              "ssl-pfx"
            ]
          },
          "hasAuth": {
            "type": "boolean",
            "description": "If `true`, a user name and password must be provided for login type authentication.\n"
          },
          "headers": {
            "type": "object",
            "nullable": true,
            "description": "A set of key-value pairs sent as headers with the request."
          },
          "method": {
            "type": "string",
            "default": "post",
            "enum": [
              "post",
              "put"
            ],
            "description": "The HTTP request method, either `post` or `put`.\n"
          },
          "url": {
            "type": "string",
            "description": "The request URL. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n"
          },
          "verificationMode": {
            "type": "string",
            "enum": [
              "certificate",
              "full",
              "none"
            ],
            "default": "full",
            "description": "Controls the verification of certificates. Use `full` to validate that the certificate has an issue date within the `not_before` and `not_after` dates, chains to a trusted certificate authority (CA), and has a hostname or IP address that matches the names within the certificate. Use `certificate` to validate the certificate and verify that it is signed by a trusted authority; this option does not check the certificate hostname. Use `none` to skip certificate validation.\n"
          }
        }
      },
      "secrets_properties_webhook": {
        "title": "Connector secrets properties for a Webhook connector",
        "description": "Defines secrets for connectors when type is `.webhook`.",
        "type": "object",
        "properties": {
          "crt": {
            "type": "string",
            "description": "If `authType` is `webhook-authentication-ssl` and `certType` is `ssl-crt-key`, it is a base64 encoded version of the CRT or CERT file."
          },
          "key": {
            "type": "string",
            "description": "If `authType` is `webhook-authentication-ssl` and `certType` is `ssl-crt-key`, it is a base64 encoded version of the KEY file."
          },
          "pfx": {
            "type": "string",
            "description": "If `authType` is `webhook-authentication-ssl` and `certType` is `ssl-pfx`, it is a base64 encoded version of the PFX or P12 file."
          },
          "password": {
            "type": "string",
            "description": "The password for HTTP basic authentication or the passphrase for the SSL certificate files. If `hasAuth` is set to `true` and `authType` is `webhook-authentication-basic`, this property is required.\n"
          },
          "user": {
            "type": "string",
            "description": "The username for HTTP basic authentication. If `hasAuth` is set to `true`  and `authType` is `webhook-authentication-basic`, this property is required.\n"
          }
        }
      },
      "create_connector_request_webhook": {
        "title": "Create Webhook connector request",
        "description": "The Webhook connector uses axios to send a POST or PUT request to a web service.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_webhook"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".webhook"
            ],
            "example": ".webhook"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_webhook"
          }
        }
      },
      "config_properties_xmatters": {
        "title": "Connector request properties for an xMatters connector",
        "description": "Defines properties for connectors when type is `.xmatters`.",
        "type": "object",
        "properties": {
          "configUrl": {
            "description": "The request URL for the Elastic Alerts trigger in xMatters. It is applicable only when `usesBasic` is `true`.\n",
            "type": "string",
            "nullable": true
          },
          "usesBasic": {
            "description": "Specifies whether the connector uses HTTP basic authentication (`true`) or URL authentication (`false`).",
            "type": "boolean",
            "default": true
          }
        }
      },
      "secrets_properties_xmatters": {
        "title": "Connector secrets properties for an xMatters connector",
        "description": "Defines secrets for connectors when type is `.xmatters`.",
        "type": "object",
        "properties": {
          "password": {
            "description": "A user name for HTTP basic authentication. It is applicable only when `usesBasic` is `true`.\n",
            "type": "string"
          },
          "secretsUrl": {
            "description": "The request URL for the Elastic Alerts trigger in xMatters with the API key included in the URL. It is applicable only when `usesBasic` is `false`.\n",
            "type": "string"
          },
          "user": {
            "description": "A password for HTTP basic authentication. It is applicable only when `usesBasic` is `true`.\n",
            "type": "string"
          }
        }
      },
      "create_connector_request_xmatters": {
        "title": "Create xMatters connector request",
        "description": "The xMatters connector uses the xMatters Workflow for Elastic to send actionable alerts to on-call xMatters resources.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_xmatters"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".xmatters"
            ],
            "example": ".xmatters"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_xmatters"
          }
        }
      },
      "create_connector_request": {
        "title": "Create connector request body properties",
        "description": "The properties vary depending on the connector type.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/create_connector_request_bedrock"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_cases_webhook"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_d3security"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_email"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_genai"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_index"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_jira"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_opsgenie"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_pagerduty"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_resilient"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_serverlog"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_servicenow"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_servicenow_itom"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_servicenow_sir"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_slack_api"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_slack_webhook"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_swimlane"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_teams"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_tines"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_torq"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_webhook"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_xmatters"
          }
        ],
        "discriminator": {
          "propertyName": "connector_type_id"
        }
      },
      "is_deprecated": {
        "type": "boolean",
        "description": "Indicates whether the connector type is deprecated.",
        "example": false
      },
      "is_missing_secrets": {
        "type": "boolean",
        "description": "Indicates whether secrets are missing for the connector. Secrets configuration properties vary depending on the connector type.",
        "example": false
      },
      "is_preconfigured": {
        "type": "boolean",
        "description": "Indicates whether it is a preconfigured connector. If true, the `config` and `is_missing_secrets` properties are omitted from the response. \n",
        "example": false
      },
      "is_system_action": {
        "type": "boolean",
        "description": "Indicates whether the connector is used for system actions.",
        "example": false
      },
      "connector_response_properties_bedrock": {
        "title": "Connector response properties for an Amazon Bedrock connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_bedrock"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".bedrock"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "referenced_by_count": {
        "type": "integer",
        "description": "Indicates the number of saved objects that reference the connector. If `is_preconfigured` is true, this value is not calculated. This property is returned only by the get all connectors API.\n",
        "example": 2
      },
      "connector_response_properties_cases_webhook": {
        "title": "Connector request properties for a Webhook - Case Management connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_cases_webhook"
          },
          "connector_type_id": {
            "description": "The type of connector.",
            "type": "string",
            "enum": [
              ".cases-webhook"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_d3security": {
        "title": "Connector response properties for a D3 Security connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_d3security"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".d3security"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_email": {
        "title": "Connector response properties for an email connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_email"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".email"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_index": {
        "title": "Connector response properties for an index connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_index"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".index"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_jira": {
        "title": "Connector response properties for a Jira connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_jira"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".jira"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_opsgenie": {
        "title": "Connector response properties for an Opsgenie connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_opsgenie"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".opsgenie"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_pagerduty": {
        "title": "Connector response properties for a PagerDuty connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_pagerduty"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".pagerduty"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_resilient": {
        "title": "Connector response properties for a IBM Resilient connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_resilient"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".resilient"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_serverlog": {
        "title": "Connector response properties for a server log connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "type": "object",
            "nullable": true
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".server-log"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_servicenow": {
        "title": "Connector response properties for a ServiceNow ITSM connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_servicenow_itom": {
        "title": "Connector response properties for a ServiceNow ITOM connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow_itom"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-itom"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_servicenow_sir": {
        "title": "Connector response properties for a ServiceNow SecOps connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-sir"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_slack_api": {
        "title": "Connector response properties for a Slack connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".slack_api"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_slack_webhook": {
        "title": "Connector response properties for a Slack connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".slack"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_swimlane": {
        "title": "Connector response properties for a Swimlane connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_swimlane"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".swimlane"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_teams": {
        "title": "Connector response properties for a Microsoft Teams connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "type": "object"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".teams"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_tines": {
        "title": "Connector response properties for a Tines connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_tines"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".tines"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_torq": {
        "title": "Connector response properties for a Torq connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_torq"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".torq"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_webhook": {
        "title": "Connector response properties for a Webhook connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_webhook"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".webhook"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_xmatters": {
        "title": "Connector response properties for an xMatters connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_xmatters"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".xmatters"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties": {
        "title": "Connector response properties",
        "description": "The properties vary depending on the connector type.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/connector_response_properties_bedrock"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_cases_webhook"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_d3security"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_email"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_index"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_jira"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_opsgenie"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_pagerduty"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_resilient"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_serverlog"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_servicenow"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_servicenow_itom"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_servicenow_sir"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_slack_api"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_slack_webhook"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_swimlane"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_teams"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_tines"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_torq"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_webhook"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_xmatters"
          }
        ],
        "discriminator": {
          "propertyName": "connector_type_id"
        }
      },
      "update_connector_request_bedrock": {
        "title": "Update Amazon Bedrock connector request",
        "type": "object",
        "required": [
          "config",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_bedrock"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_bedrock"
          }
        }
      },
      "update_connector_request_cases_webhook": {
        "title": "Update Webhook - Case Managment connector request",
        "type": "object",
        "required": [
          "config",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_cases_webhook"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_cases_webhook"
          }
        }
      },
      "update_connector_request_d3security": {
        "title": "Update D3 Security connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_d3security"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_d3security"
          }
        }
      },
      "update_connector_request_email": {
        "title": "Update email connector request",
        "type": "object",
        "required": [
          "config",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_email"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_email"
          }
        }
      },
      "update_connector_request_index": {
        "title": "Update index connector request",
        "type": "object",
        "required": [
          "config",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_index"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "update_connector_request_jira": {
        "title": "Update Jira connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_jira"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_jira"
          }
        }
      },
      "update_connector_request_opsgenie": {
        "title": "Update Opsgenie connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_opsgenie"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_opsgenie"
          }
        }
      },
      "update_connector_request_pagerduty": {
        "title": "Update PagerDuty connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_pagerduty"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_pagerduty"
          }
        }
      },
      "update_connector_request_resilient": {
        "title": "Update IBM Resilient connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_resilient"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_resilient"
          }
        }
      },
      "update_connector_request_serverlog": {
        "title": "Update server log connector request",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "update_connector_request_servicenow": {
        "title": "Update ServiceNow ITSM connector or ServiceNow SecOps request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "update_connector_request_servicenow_itom": {
        "title": "Create ServiceNow ITOM connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow_itom"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "update_connector_request_slack_api": {
        "title": "Update Slack connector request",
        "type": "object",
        "required": [
          "name",
          "secrets"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_slack_api"
          }
        }
      },
      "update_connector_request_slack_webhook": {
        "title": "Update Slack connector request",
        "type": "object",
        "required": [
          "name",
          "secrets"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_slack_webhook"
          }
        }
      },
      "update_connector_request_swimlane": {
        "title": "Update Swimlane connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_swimlane"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_swimlane"
          }
        }
      },
      "update_connector_request_teams": {
        "title": "Update Microsoft Teams connector request",
        "type": "object",
        "required": [
          "name",
          "secrets"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_teams"
          }
        }
      },
      "update_connector_request_tines": {
        "title": "Update Tines connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_tines"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_tines"
          }
        }
      },
      "update_connector_request_torq": {
        "title": "Update Torq connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_torq"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_torq"
          }
        }
      },
      "update_connector_request_webhook": {
        "title": "Update Webhook connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_webhook"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_webhook"
          }
        }
      },
      "update_connector_request_xmatters": {
        "title": "Update xMatters connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_xmatters"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_xmatters"
          }
        }
      },
      "update_connector_request": {
        "title": "Update connector request body properties",
        "description": "The properties vary depending on the connector type.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/update_connector_request_bedrock"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_cases_webhook"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_d3security"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_email"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_genai"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_index"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_jira"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_opsgenie"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_pagerduty"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_resilient"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_serverlog"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_servicenow"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_servicenow_itom"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_slack_api"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_slack_webhook"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_swimlane"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_teams"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_tines"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_torq"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_webhook"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_xmatters"
          }
        ]
      },
      "features": {
        "type": "string",
        "description": "The feature that uses the connector.\n",
        "enum": [
          "alerting",
          "cases",
          "generativeAI",
          "siem",
          "uptime"
        ]
      },
      "connector_types": {
        "title": "Connector types",
        "type": "string",
        "description": "The type of connector. For example, `.email`, `.index`, `.jira`, `.opsgenie`, or `.server-log`.",
        "enum": [
          ".bedrock",
          ".cases-webhook",
          ".d3security",
          ".email",
          ".gen-ai",
          ".index",
          ".jira",
          ".opsgenie",
          ".pagerduty",
          ".resilient",
          ".servicenow",
          ".servicenow-itom",
          ".servicenow-sir",
          ".server-log",
          ".slack",
          ".slack_api",
          ".swimlane",
          ".teams",
          ".tines",
          ".torq",
          ".webhook",
          ".xmatters"
        ],
        "example": ".server-log"
      }
    },
    "examples": {
      "create_email_connector_request": {
        "summary": "Create an email connector.",
        "value": {
          "name": "email-connector-1",
          "connector_type_id": ".email",
          "config": {
            "from": "tester@example.com",
            "hasAuth": true,
            "host": "https://example.com",
            "port": 1025,
            "secure": false,
            "service": "other"
          },
          "secrets": {
            "user": "username",
            "password": "password"
          }
        }
      },
      "create_index_connector_request": {
        "summary": "Create an index connector.",
        "value": {
          "name": "my-connector",
          "connector_type_id": ".index",
          "config": {
            "index": "test-index"
          }
        }
      },
      "create_webhook_connector_request": {
        "summary": "Create a webhook connector with SSL authentication.",
        "value": {
          "name": "my-webhook-connector",
          "connector_type_id": ".webhook",
          "config": {
            "method": "post",
            "url": "https://example.com",
            "authType": "webhook-authentication-ssl",
            "certType": "ssl-crt-key"
          },
          "secrets": {
            "crt": "QmFnIEF0dH...",
            "key": "LS0tLS1CRUdJ...",
            "password": "my-passphrase"
          }
        }
      },
      "create_xmatters_connector_request": {
        "summary": "Create an xMatters connector with URL authentication.",
        "value": {
          "name": "my-xmatters-connector",
          "connector_type_id": ".xmatters",
          "config": {
            "usesBasic": false
          },
          "secrets": {
            "secretsUrl": "https://example.com?apiKey=xxxxx"
          }
        }
      },
      "create_email_connector_response": {
        "summary": "A new email connector.",
        "value": {
          "id": "90a82c60-478f-11ee-a343-f98a117c727f",
          "connector_type_id": ".email",
          "name": "email-connector-1",
          "config": {
            "from": "tester@example.com",
            "service": "other",
            "host": "https://example.com",
            "port": 1025,
            "secure": false,
            "hasAuth": true,
            "tenantId": null,
            "clientId": null,
            "oauthTokenUrl": null
          },
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false,
          "is_system_action": false
        }
      },
      "create_index_connector_response": {
        "summary": "A new index connector.",
        "value": {
          "id": "c55b6eb0-6bad-11eb-9f3b-611eebc6c3ad",
          "connector_type_id": ".index",
          "name": "my-connector",
          "config": {
            "index": "test-index",
            "refresh": false,
            "executionTimeField": null
          },
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false,
          "is_system_action": false
        }
      },
      "create_webhook_connector_response": {
        "summary": "A new webhook connector.",
        "value": {
          "id": "900eb010-3b9d-11ee-a642-8ffbb94e38bd",
          "name": "my-webhook-connector",
          "config": {
            "method": "post",
            "url": "https://example.com",
            "authType": "webhook-authentication-ssl",
            "certType": "ssl-crt-key",
            "verificationMode": "full",
            "headers": null,
            "hasAuth": true
          },
          "connector_type_id": ".webhook",
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false,
          "is_system_action": false
        }
      },
      "create_xmatters_connector_response": {
        "summary": "A new xMatters connector.",
        "value": {
          "id": "4d2d8da0-4d1f-11ee-9367-577408be4681",
          "name": "my-xmatters-connector",
          "config": {
            "usesBasic": false,
            "configUrl": null
          },
          "connector_type_id": ".xmatters",
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false,
          "is_system_action": false
        }
      },
      "get_connector_response": {
        "summary": "Get connector details.",
        "value": {
          "id": "df770e30-8b8b-11ed-a780-3b746c987a81",
          "name": "my_server_log_connector",
          "config": {},
          "connector_type_id": ".server-log",
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false,
          "is_system_action": false
        }
      },
      "update_index_connector_request": {
        "summary": "Update an index connector.",
        "value": {
          "name": "updated-connector",
          "config": {
            "index": "updated-index"
          }
        }
      },
      "get_connectors_response": {
        "summary": "A list of connectors",
        "value": [
          {
            "id": "preconfigured-email-connector",
            "name": "my-preconfigured-email-notification",
            "connector_type_id": ".email",
            "is_preconfigured": true,
            "is_deprecated": false,
            "referenced_by_count": 0,
            "is_system_action": false
          },
          {
            "id": "e07d0c80-8b8b-11ed-a780-3b746c987a81",
            "name": "my-index-connector",
            "config": {
              "index": "test-index",
              "refresh": false,
              "executionTimeField": null
            },
            "connector_type_id": ".index",
            "is_preconfigured": false,
            "is_deprecated": false,
            "referenced_by_count": 2,
            "is_missing_secrets": false,
            "is_system_action": false
          }
        ]
      },
      "get_connector_types_generativeai_response": {
        "summary": "A list of connector types for the `generativeAI` feature.",
        "value": [
          {
            "id": ".gen-ai",
            "name": "OpenAI",
            "enabled": true,
            "enabled_in_config": true,
            "enabled_in_license": true,
            "minimum_license_required": "enterprise",
            "supported_feature_ids": [
              "generativeAI"
            ],
            "is_system_action_type": false
          },
          {
            "id": ".bedrock",
            "name": "AWS Bedrock",
            "enabled": true,
            "enabled_in_config": true,
            "enabled_in_license": true,
            "minimum_license_required": "enterprise",
            "supported_feature_ids": [
              "generativeAI"
            ],
            "is_system_action_type": false
          }
        ]
      }
    },
    "responses": {
      "401": {
        "description": "Authorization information is missing or invalid.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Unauthorized response",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Unauthorized",
                  "enum": [
                    "Unauthorized"
                  ]
                },
                "message": {
                  "type": "string"
                },
                "statusCode": {
                  "type": "integer",
                  "example": 401,
                  "enum": [
                    401
                  ]
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Object is not found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Not found response",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Not Found",
                  "enum": [
                    "Not Found"
                  ]
                },
                "message": {
                  "type": "string",
                  "example": "Saved object [action/baf33fc0-920c-11ed-b36a-874bd1548a00] not found"
                },
                "statusCode": {
                  "type": "integer",
                  "example": 404,
                  "enum": [
                    404
                  ]
                }
              }
            }
          }
        }
      }
    }
  }
}