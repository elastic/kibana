{
  "openapi": "3.1.0",
  "info": {
    "title": "Connectors",
    "description": "OpenAPI schema for Connectors endpoints",
    "version": "0.2",
    "contact": {
      "name": "Connectors Team"
    },
    "license": {
      "name": "Elastic License 2.0",
      "url": "https://www.elastic.co/licensing/elastic-license"
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "security": [
    {
      "basicAuth": []
    },
    {
      "apiKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "connectors",
      "description": "Connector APIs enable you to create and manage connectors."
    }
  ],
  "paths": {
    "/api/actions/connector": {
      "post": {
        "summary": "Creates a connector.",
        "operationId": "createConnector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_connector_request"
              },
              "examples": {
                "createEmailConnectorRequest": {
                  "$ref": "#/components/examples/create_email_connector_request"
                },
                "createIndexConnectorRequest": {
                  "$ref": "#/components/examples/create_index_connector_request"
                },
                "createWebhookConnectorRequest": {
                  "$ref": "#/components/examples/create_webhook_connector_request"
                },
                "createXmattersConnectorRequest": {
                  "$ref": "#/components/examples/create_xmatters_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "createEmailConnectorResponse": {
                    "$ref": "#/components/examples/create_email_connector_response"
                  },
                  "createIndexConnectorResponse": {
                    "$ref": "#/components/examples/create_index_connector_response"
                  },
                  "createWebhookConnectorResponse": {
                    "$ref": "#/components/examples/create_webhook_connector_response"
                  },
                  "createXmattersConnectorResponse": {
                    "$ref": "#/components/examples/create_xmatters_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/actions/connector/{connectorId}": {
      "get": {
        "summary": "Retrieves a connector by ID.",
        "operationId": "getConnector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "getConnectorResponse": {
                    "$ref": "#/components/examples/get_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "summary": "Deletes a connector.",
        "operationId": "deleteConnector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates a successful call."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Creates a connector.",
        "operationId": "createConnectorId",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "in": "path",
            "name": "connectorId",
            "description": "A UUID v1 or v4 identifier for the connector. If you omit this parameter, an identifier is randomly generated.\n",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "ac4e6b90-6be7-11eb-ba0d-9b1c1f912d74"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_connector_request"
              },
              "examples": {
                "createIndexConnectorRequest": {
                  "$ref": "#/components/examples/create_index_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "createIndexConnectorResponse": {
                    "$ref": "#/components/examples/create_index_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "summary": "Updates the attributes for a connector.",
        "operationId": "updateConnector",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_connector_request"
              },
              "examples": {
                "updateIndexConnectorRequest": {
                  "$ref": "#/components/examples/update_index_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/401"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/api/actions/connector/{connectorId}/_execute": {
      "post": {
        "summary": "Runs a connector.",
        "operationId": "runConnector",
        "description": "You can use this API to test an action that involves interaction with Kibana services or integrations with third-party systems. You must have `read` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges. If you use an index connector, you must also have `all`, `create`, `index`, or `write` indices privileges.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/run_connector_request"
              },
              "examples": {
                "runCasesWebhookConnectorRequest": {
                  "$ref": "#/components/examples/run_cases_webhook_connector_request"
                },
                "runEmailConnectorRequest": {
                  "$ref": "#/components/examples/run_email_connector_request"
                },
                "runIndexConnectorRequest": {
                  "$ref": "#/components/examples/run_index_connector_request"
                },
                "runJiraConnectorRequest": {
                  "$ref": "#/components/examples/run_jira_connector_request"
                },
                "runPagerDutyConnectorRequest": {
                  "$ref": "#/components/examples/run_pagerduty_connector_request"
                },
                "runServerLogConnectorRequest": {
                  "$ref": "#/components/examples/run_server_log_connector_request"
                },
                "runServiceNowITOMConnectorRequest": {
                  "$ref": "#/components/examples/run_servicenow_itom_connector_request"
                },
                "runSlackConnectorRequest": {
                  "$ref": "#/components/examples/run_slack_api_connector_request"
                },
                "runSwimlaneConnectorRequest": {
                  "$ref": "#/components/examples/run_swimlane_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "connector_id",
                    "status"
                  ],
                  "properties": {
                    "connector_id": {
                      "type": "string",
                      "description": "The identifier for the connector."
                    },
                    "data": {
                      "oneOf": [
                        {
                          "type": "object",
                          "description": "Information returned from the action.",
                          "additionalProperties": true
                        },
                        {
                          "type": "array",
                          "description": "An array of information returned from the action.",
                          "items": {
                            "type": "object"
                          }
                        }
                      ]
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the action.",
                      "enum": [
                        "error",
                        "ok"
                      ]
                    }
                  }
                },
                "examples": {
                  "runCasesWebhookConnectorResponse": {
                    "$ref": "#/components/examples/run_cases_webhook_connector_response"
                  },
                  "runEmailConnectorResponse": {
                    "$ref": "#/components/examples/run_email_connector_response"
                  },
                  "runIndexConnectorResponse": {
                    "$ref": "#/components/examples/run_index_connector_response"
                  },
                  "runJiraConnectorResponse": {
                    "$ref": "#/components/examples/run_jira_connector_response"
                  },
                  "runPagerDutyConnectorResponse": {
                    "$ref": "#/components/examples/run_pagerduty_connector_response"
                  },
                  "runServerLogConnectorResponse": {
                    "$ref": "#/components/examples/run_server_log_connector_response"
                  },
                  "runServiceNowITOMConnectorResponse": {
                    "$ref": "#/components/examples/run_servicenow_itom_connector_response"
                  },
                  "runSlackConnectorResponse": {
                    "$ref": "#/components/examples/run_slack_api_connector_response"
                  },
                  "runSwimlaneConnectorResponse": {
                    "$ref": "#/components/examples/run_swimlane_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/actions/connectors": {
      "get": {
        "summary": "Retrieves all connectors.",
        "operationId": "getConnectors",
        "tags": [
          "connectors"
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/connector_response_properties"
                  }
                },
                "examples": {
                  "getConnectorsResponse": {
                    "$ref": "#/components/examples/get_connectors_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/actions/connector_types": {
      "get": {
        "summary": "Retrieves a list of all connector types.",
        "operationId": "getConnectorTypes",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "feature_id",
            "description": "A filter to limit the retrieved connector types to those that support a specific feature (such as alerting or cases).",
            "schema": {
              "$ref": "#/components/schemas/features"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Get connector types response body properties",
                  "description": "The properties vary for each connector type.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the connector type is enabled in Kibana.",
                        "examples": [
                          true
                        ]
                      },
                      "enabled_in_config": {
                        "type": "boolean",
                        "description": "Indicates whether the connector type is enabled in the Kibana configuration file.",
                        "examples": [
                          true
                        ]
                      },
                      "enabled_in_license": {
                        "type": "boolean",
                        "description": "Indicates whether the connector is enabled in the license.",
                        "examples": [
                          true
                        ]
                      },
                      "id": {
                        "$ref": "#/components/schemas/connector_types"
                      },
                      "is_system_action_type": {
                        "type": "boolean",
                        "examples": [
                          false
                        ]
                      },
                      "minimum_license_required": {
                        "type": "string",
                        "description": "The license that is required to use the connector type.",
                        "examples": [
                          "basic"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the connector type.",
                        "examples": [
                          "Index"
                        ]
                      },
                      "supported_feature_ids": {
                        "type": "array",
                        "description": "The features that are supported by the connector type.",
                        "items": {
                          "$ref": "#/components/schemas/features"
                        },
                        "examples": [
                          [
                            "alerting",
                            "cases",
                            "siem"
                          ]
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "getConnectorTypesServerlessResponse": {
                    "$ref": "#/components/examples/get_connector_types_generativeai_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/s/{spaceId}/api/actions/connector": {
      "post": {
        "summary": "Creates a connector.",
        "operationId": "createConnectorWithSpaceId",
        "description": "You must have `all` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_connector_request"
              },
              "examples": {
                "createEmailConnectorRequest": {
                  "$ref": "#/components/examples/create_email_connector_request"
                },
                "createIndexConnectorRequest": {
                  "$ref": "#/components/examples/create_index_connector_request"
                },
                "createWebhookConnectorRequest": {
                  "$ref": "#/components/examples/create_webhook_connector_request"
                },
                "createXmattersConnectorRequest": {
                  "$ref": "#/components/examples/create_xmatters_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "createEmailConnectorResponse": {
                    "$ref": "#/components/examples/create_email_connector_response"
                  },
                  "createIndexConnectorResponse": {
                    "$ref": "#/components/examples/create_index_connector_response"
                  },
                  "createWebhookConnectorResponse": {
                    "$ref": "#/components/examples/create_webhook_connector_response"
                  },
                  "createXmattersConnectorResponse": {
                    "$ref": "#/components/examples/create_xmatters_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/s/{spaceId}/api/actions/connector/{connectorId}": {
      "get": {
        "summary": "Retrieves a connector by ID.",
        "operationId": "getConnectorWithSpaceId",
        "description": "You must have `read` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/connector_id"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "getConnectorResponse": {
                    "$ref": "#/components/examples/get_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "summary": "Deletes a connector.",
        "operationId": "deleteConnectorWithSpaceId",
        "description": "You must have `all` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges. WARNING: When you delete a connector, it cannot be recovered.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates a successful call."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "post": {
        "summary": "Creates a connector.",
        "operationId": "createConnectorIdWithSpaceId",
        "description": "You must have `all` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "in": "path",
            "name": "connectorId",
            "description": "A UUID v1 or v4 identifier for the connector. If you omit this parameter, an identifier is randomly generated.",
            "required": true,
            "schema": {
              "type": "string",
              "examples": [
                "ac4e6b90-6be7-11eb-ba0d-9b1c1f912d74"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_connector_request"
              },
              "examples": {
                "createIndexConnectorRequest": {
                  "$ref": "#/components/examples/create_index_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "createIndexConnectorResponse": {
                    "$ref": "#/components/examples/create_index_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "summary": "Updates the attributes for a connector.",
        "operationId": "updateConnectorWithSpaceId",
        "description": "You must have `all` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_connector_request"
              },
              "examples": {
                "updateIndexConnectorRequest": {
                  "$ref": "#/components/examples/update_index_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/401"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/s/{spaceId}/api/actions/connectors": {
      "get": {
        "summary": "Retrieves all connectors.",
        "operationId": "getConnectorsWithSpaceId",
        "description": "You must have `read` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/connector_response_properties"
                  }
                },
                "examples": {
                  "getConnectorsResponse": {
                    "$ref": "#/components/examples/get_connectors_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/s/{spaceId}/api/actions/connector_types": {
      "get": {
        "summary": "Retrieves a list of all connector types.",
        "operationId": "getConnectorTypesWithSpaceId",
        "description": "You do not need any Kibana feature privileges to run this API.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "in": "query",
            "name": "feature_id",
            "description": "A filter to limit the retrieved connector types to those that support a specific feature (such as alerting or cases).",
            "schema": {
              "$ref": "#/components/schemas/features"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Get connector types response body properties",
                  "description": "The properties vary for each connector type.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the connector type is enabled in Kibana.",
                        "examples": [
                          true
                        ]
                      },
                      "enabled_in_config": {
                        "type": "boolean",
                        "description": "Indicates whether the connector type is enabled in the Kibana `.yml` file.",
                        "examples": [
                          true
                        ]
                      },
                      "enabled_in_license": {
                        "type": "boolean",
                        "description": "Indicates whether the connector is enabled in the license.",
                        "examples": [
                          true
                        ]
                      },
                      "id": {
                        "$ref": "#/components/schemas/connector_types"
                      },
                      "minimum_license_required": {
                        "type": "string",
                        "description": "The license that is required to use the connector type.",
                        "examples": [
                          "basic"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the connector type.",
                        "examples": [
                          "Index"
                        ]
                      },
                      "supported_feature_ids": {
                        "type": "array",
                        "description": "The Kibana features that are supported by the connector type.",
                        "items": {
                          "$ref": "#/components/schemas/features"
                        },
                        "examples": [
                          [
                            "alerting",
                            "uptime",
                            "siem"
                          ]
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "getConnectorTypesResponse": {
                    "$ref": "#/components/examples/get_connector_types_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/s/{spaceId}/api/actions/connector/{connectorId}/_execute": {
      "post": {
        "summary": "Runs a connector.",
        "operationId": "runConnectorWithSpaceId",
        "description": "You can use this API to test an action that involves interaction with Kibana services or integrations with third-party systems. You must have `read` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges. If you use an index connector, you must also have `all`, `create`, `index`, or `write` indices privileges.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/run_connector_request"
              },
              "examples": {
                "runIndexConnectorRequest": {
                  "$ref": "#/components/examples/run_index_connector_request"
                },
                "runJiraConnectorRequest": {
                  "$ref": "#/components/examples/run_jira_connector_request"
                },
                "runServerLogConnectorRequest": {
                  "$ref": "#/components/examples/run_server_log_connector_request"
                },
                "runServiceNowITOMConnectorRequest": {
                  "$ref": "#/components/examples/run_servicenow_itom_connector_request"
                },
                "runSlackConnectorRequest": {
                  "$ref": "#/components/examples/run_slack_api_connector_request"
                },
                "runSwimlaneConnectorRequest": {
                  "$ref": "#/components/examples/run_swimlane_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "connector_id",
                    "status"
                  ],
                  "properties": {
                    "connector_id": {
                      "type": "string",
                      "description": "The identifier for the connector."
                    },
                    "data": {
                      "oneOf": [
                        {
                          "type": "object",
                          "description": "Information returned from the action.",
                          "additionalProperties": true
                        },
                        {
                          "type": "array",
                          "description": "An array of information returned from the action.",
                          "items": {
                            "type": "object"
                          }
                        }
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "service_message": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the action.",
                      "enum": [
                        "error",
                        "ok"
                      ]
                    }
                  }
                },
                "examples": {
                  "runIndexConnectorResponse": {
                    "$ref": "#/components/examples/run_index_connector_response"
                  },
                  "runJiraConnectorResponse": {
                    "$ref": "#/components/examples/run_jira_connector_response"
                  },
                  "runServerLogConnectorResponse": {
                    "$ref": "#/components/examples/run_server_log_connector_response"
                  },
                  "runServiceNowITOMConnectorResponse": {
                    "$ref": "#/components/examples/run_servicenow_itom_connector_response"
                  },
                  "runSlackConnectorResponse": {
                    "$ref": "#/components/examples/run_slack_api_connector_response"
                  },
                  "runSwimlaneConnectorResponse": {
                    "$ref": "#/components/examples/run_swimlane_connector_response"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/s/{spaceId}/api/actions/action/{actionId}": {
      "delete": {
        "summary": "Deletes a connector.",
        "operationId": "legacyDeleteConnector",
        "deprecated": true,
        "description": "Deprecated in 7.13.0. Use the delete connector API instead. WARNING: When you delete a connector, it cannot be recovered.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/action_id"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates a successful call."
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "get": {
        "summary": "Retrieves a connector by ID.",
        "operationId": "legacyGetConnector",
        "description": "Deprecated in 7.13.0. Use the get connector API instead.",
        "deprecated": true,
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/action_id"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_actions"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "put": {
        "summary": "Updates the attributes for a connector.",
        "operationId": "legacyUpdateConnector",
        "deprecated": true,
        "description": "Deprecated in 7.13.0. Use the update connector API instead.",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/action_id"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Legacy update connector request body properties",
                "description": "The properties vary depending on the connector type.",
                "type": "object",
                "properties": {
                  "config": {
                    "type": "object",
                    "description": "The new connector configuration. Configuration properties vary depending on the connector type."
                  },
                  "name": {
                    "type": "string",
                    "description": "The new name for the connector."
                  },
                  "secrets": {
                    "type": "object",
                    "description": "The updated secrets configuration for the connector. Secrets properties vary depending on the connector type."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_actions"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/s/{spaceId}/api/actions": {
      "get": {
        "summary": "Retrieves all connectors.",
        "operationId": "legacyGetConnectors",
        "deprecated": true,
        "description": "Deprecated in 7.13.0. Use the get all connectors API instead.",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/action_response_properties"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "summary": "Creates a connector.",
        "operationId": "legacyCreateConnector",
        "deprecated": true,
        "description": "Deprecated in 7.13.0. Use the create connector API instead.",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Legacy create connector request properties",
                "type": "object",
                "properties": {
                  "actionTypeId": {
                    "type": "string",
                    "description": "The connector type identifier."
                  },
                  "config": {
                    "type": "object",
                    "description": "The configuration for the connector. Configuration properties vary depending on the connector type."
                  },
                  "name": {
                    "type": "string",
                    "description": "The display name for the connector."
                  },
                  "secrets": {
                    "type": "object",
                    "description": "The secrets configuration for the connector. Secrets configuration properties vary depending on the connector type. NOTE: Remember these values. You must provide them each time you update the connector.\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200_actions"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/s/{spaceId}/api/actions/list_action_types": {
      "get": {
        "summary": "Retrieves a list of all connector types.",
        "operationId": "legacyGetConnectorTypes",
        "deprecated": true,
        "description": "Deprecated in 7.13.0. Use the get all connector types API instead.",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Legacy get connector types response body properties",
                  "description": "The properties vary for each connector type.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the connector type is enabled in Kibana."
                      },
                      "enabledInConfig": {
                        "type": "boolean",
                        "description": "Indicates whether the connector type is enabled in the Kibana `.yml` file."
                      },
                      "enabledInLicense": {
                        "type": "boolean",
                        "description": "Indicates whether the connector is enabled in the license.",
                        "examples": [
                          true
                        ]
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the connector type."
                      },
                      "minimumLicenseRequired": {
                        "type": "string",
                        "description": "The license that is required to use the connector type."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the connector type."
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/s/{spaceId}/api/actions/action/{actionId}/_execute": {
      "post": {
        "summary": "Runs a connector.",
        "operationId": "legacyRunConnector",
        "deprecated": true,
        "description": "Deprecated in 7.13.0. Use the run connector API instead.",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/action_id"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "Legacy run connector request body properties",
                "description": "The properties vary depending on the connector type.",
                "type": "object",
                "required": [
                  "params"
                ],
                "properties": {
                  "params": {
                    "type": "object",
                    "description": "The parameters of the connector. Parameter properties vary depending on the connector type."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "actionId": {
                      "type": "string"
                    },
                    "data": {
                      "oneOf": [
                        {
                          "type": "object",
                          "description": "Information returned from the action.",
                          "additionalProperties": true
                        },
                        {
                          "type": "array",
                          "description": "An array of information returned from the action.",
                          "items": {
                            "type": "object"
                          }
                        }
                      ]
                    },
                    "status": {
                      "type": "string",
                      "description": "The status of the action."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "e.g. Authorization: ApiKey base64AccessApiKey"
      }
    },
    "parameters": {
      "kbn_xsrf": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "kbn-xsrf",
        "description": "Cross-site request forgery protection",
        "required": true
      },
      "connector_id": {
        "in": "path",
        "name": "connectorId",
        "description": "An identifier for the connector.",
        "required": true,
        "schema": {
          "type": "string",
          "examples": [
            "df770e30-8b8b-11ed-a780-3b746c987a81"
          ]
        }
      },
      "space_id": {
        "in": "path",
        "name": "spaceId",
        "description": "An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.",
        "required": true,
        "schema": {
          "type": "string",
          "examples": [
            "default"
          ]
        }
      },
      "action_id": {
        "in": "path",
        "name": "actionId",
        "description": "An identifier for the action.",
        "required": true,
        "schema": {
          "type": "string",
          "examples": [
            "c55b6eb0-6bad-11eb-9f3b-611eebc6c3ad"
          ]
        }
      }
    },
    "schemas": {
      "create_connector_request_bedrock": {
        "title": "Create Amazon Bedrock connector request",
        "description": "The Amazon Bedrock connector uses axios to send a POST request to Amazon Bedrock.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_bedrock"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".bedrock"
            ],
            "examples": [
              ".bedrock"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_bedrock"
          }
        }
      },
      "create_connector_request_cases_webhook": {
        "title": "Create Webhook - Case Managment connector request",
        "description": "The Webhook - Case Management connector uses axios to send POST, PUT, and GET requests to a case management RESTful API web service.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_cases_webhook"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".cases-webhook"
            ],
            "examples": [
              ".cases-webhook"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_cases_webhook"
          }
        }
      },
      "create_connector_request_d3security": {
        "title": "Create D3 Security connector request",
        "description": "The connector uses axios to send a POST request to a D3 Security endpoint.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_d3security"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".d3security"
            ],
            "examples": [
              ".d3security"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_d3security"
          }
        }
      },
      "create_connector_request_email": {
        "title": "Create email connector request",
        "description": "The email connector uses the SMTP protocol to send mail messages, using an integration of Nodemailer. An exception is Microsoft Exchange, which uses HTTP protocol for sending emails, Send mail. Email message text is sent as both plain text and html text.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_email"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".email"
            ],
            "examples": [
              ".email"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_email"
          }
        }
      },
      "create_connector_request_genai": {
        "title": "Create OpenAI connector request",
        "description": "The OpenAI connector uses axios to send a POST request to either OpenAI or Azure OpenAPI.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_genai"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".gen-ai"
            ],
            "examples": [
              ".gen-ai"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_genai"
          }
        }
      },
      "create_connector_request_index": {
        "title": "Create index connector request",
        "description": "The index connector indexes a document into Elasticsearch.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_index"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".index"
            ],
            "examples": [
              ".index"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          }
        }
      },
      "create_connector_request_jira": {
        "title": "Create Jira connector request",
        "description": "The Jira connector uses the REST API v2 to create Jira issues.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_jira"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".jira"
            ],
            "examples": [
              ".jira"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_jira"
          }
        }
      },
      "create_connector_request_opsgenie": {
        "title": "Create Opsgenie connector request",
        "description": "The Opsgenie connector uses the Opsgenie alert API.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_opsgenie"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".opsgenie"
            ],
            "examples": [
              ".opsgenie"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_opsgenie"
          }
        }
      },
      "create_connector_request_pagerduty": {
        "title": "Create PagerDuty connector request",
        "description": "The PagerDuty connector uses the v2 Events API to trigger, acknowledge, and resolve PagerDuty alerts.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_pagerduty"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".pagerduty"
            ],
            "examples": [
              ".pagerduty"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_pagerduty"
          }
        }
      },
      "create_connector_request_resilient": {
        "title": "Create IBM Resilient connector request",
        "description": "The IBM Resilient connector uses the RESILIENT REST v2 to create IBM Resilient incidents.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_resilient"
          },
          "connector_type_id": {
            "description": "The type of connector.",
            "type": "string",
            "examples": [
              ".resilient"
            ],
            "enum": [
              ".resilient"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_resilient"
          }
        }
      },
      "create_connector_request_sentinelone": {
        "title": "Create SentinelOne connector request",
        "description": "The SentinelOne connector communicates with SentinelOne Management Console via REST API. This functionality is in technical preview and may be changed or removed in a future release. Elastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.\n",
        "x-technical-preview": true,
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_sentinelone"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".sentinelone"
            ],
            "examples": [
              ".sentinelone"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_sentinelone"
          }
        }
      },
      "create_connector_request_serverlog": {
        "title": "Create server log connector request",
        "description": "This connector writes an entry to the Kibana server log.",
        "type": "object",
        "required": [
          "connector_type_id",
          "name"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".server-log"
            ],
            "examples": [
              ".server-log"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          }
        }
      },
      "create_connector_request_servicenow": {
        "title": "Create ServiceNow ITSM connector request",
        "description": "The ServiceNow ITSM connector uses the import set API to create ServiceNow incidents. You can use the connector for rule actions and cases.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow"
            ],
            "examples": [
              ".servicenow"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "create_connector_request_servicenow_itom": {
        "title": "Create ServiceNow ITOM connector request",
        "description": "The ServiceNow ITOM connector uses the event API to create ServiceNow events. You can use the connector for rule actions.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow_itom"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-itom"
            ],
            "examples": [
              ".servicenow-itom"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "create_connector_request_servicenow_sir": {
        "title": "Create ServiceNow SecOps connector request",
        "description": "The ServiceNow SecOps connector uses the import set API to create ServiceNow security incidents. You can use the connector for rule actions and cases.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-sir"
            ],
            "examples": [
              ".servicenow-sir"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "create_connector_request_slack_api": {
        "title": "Create Slack connector request",
        "description": "The Slack connector uses an API method to send Slack messages.",
        "type": "object",
        "required": [
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_slack_api"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".slack_api"
            ],
            "examples": [
              ".slack_api"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_slack_api"
          }
        }
      },
      "create_connector_request_slack_webhook": {
        "title": "Create Slack connector request",
        "description": "The Slack connector uses Slack Incoming Webhooks.",
        "type": "object",
        "required": [
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".slack"
            ],
            "examples": [
              ".slack"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_slack_webhook"
          }
        }
      },
      "create_connector_request_swimlane": {
        "title": "Create Swimlane connector request",
        "description": "The Swimlane connector uses the Swimlane REST API to create Swimlane records.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_swimlane"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".swimlane"
            ],
            "examples": [
              ".swimlane"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_swimlane"
          }
        }
      },
      "create_connector_request_teams": {
        "title": "Create Microsoft Teams connector request",
        "description": "The Microsoft Teams connector uses Incoming Webhooks.",
        "type": "object",
        "required": [
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".teams"
            ],
            "examples": [
              ".teams"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_teams"
          }
        }
      },
      "create_connector_request_tines": {
        "title": "Create Tines connector request",
        "description": "The Tines connector uses Tines Webhook actions to send events via POST request.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_tines"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".tines"
            ],
            "examples": [
              ".tines"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_tines"
          }
        }
      },
      "create_connector_request_torq": {
        "title": "Create Torq connector request",
        "description": "The Torq connector uses a Torq webhook to trigger workflows with Kibana actions.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_torq"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".torq"
            ],
            "examples": [
              ".torq"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_torq"
          }
        }
      },
      "create_connector_request_webhook": {
        "title": "Create Webhook connector request",
        "description": "The Webhook connector uses axios to send a POST or PUT request to a web service.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_webhook"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".webhook"
            ],
            "examples": [
              ".webhook"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_webhook"
          }
        }
      },
      "create_connector_request_xmatters": {
        "title": "Create xMatters connector request",
        "description": "The xMatters connector uses the xMatters Workflow for Elastic to send actionable alerts to on-call xMatters resources.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_xmatters"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".xmatters"
            ],
            "examples": [
              ".xmatters"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_xmatters"
          }
        }
      },
      "config_properties_bedrock": {
        "title": "Connector request properties for an Amazon Bedrock connector",
        "description": "Defines properties for connectors when type is `.bedrock`.",
        "type": "object",
        "required": [
          "apiUrl"
        ],
        "properties": {
          "apiUrl": {
            "type": "string",
            "description": "The Amazon Bedrock request URL."
          },
          "defaultModel": {
            "type": "string",
            "description": "The generative artificial intelligence model for Amazon Bedrock to use. Current support is for the Anthropic Claude models.\n",
            "default": "anthropic.claude-3-sonnet-20240229-v1:0"
          }
        }
      },
      "secrets_properties_bedrock": {
        "title": "Connector secrets properties for an Amazon Bedrock connector",
        "description": "Defines secrets for connectors when type is `.bedrock`.",
        "type": "object",
        "required": [
          "accessKey",
          "secret"
        ],
        "properties": {
          "accessKey": {
            "type": "string",
            "description": "The AWS access key for authentication."
          },
          "secret": {
            "type": "string",
            "description": "The AWS secret for authentication."
          }
        }
      },
      "config_properties_cases_webhook": {
        "title": "Connector request properties for Webhook - Case Management connector",
        "required": [
          "createIncidentJson",
          "createIncidentResponseKey",
          "createIncidentUrl",
          "getIncidentResponseExternalTitleKey",
          "getIncidentUrl",
          "updateIncidentJson",
          "updateIncidentUrl",
          "viewIncidentUrl"
        ],
        "description": "Defines properties for connectors when type is `.cases-webhook`.",
        "type": "object",
        "properties": {
          "createCommentJson": {
            "type": "string",
            "description": "A JSON payload sent to the create comment URL to create a case comment. You can use variables to add Kibana Cases data to the payload. The required variable is `case.comment`. Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated once the Mustache variables have been placed when the REST method runs. Manually ensure that the JSON is valid, disregarding the Mustache variables, so the later validation will pass.\n",
            "examples": [
              {
                "body": {
                  "[object Object]": null
                }
              }
            ]
          },
          "createCommentMethod": {
            "type": "string",
            "description": "The REST API HTTP request method to create a case comment in the third-party system. Valid values are `patch`, `post`, and `put`.\n",
            "default": "put",
            "enum": [
              "patch",
              "post",
              "put"
            ]
          },
          "createCommentUrl": {
            "type": "string",
            "description": "The REST API URL to create a case comment by ID in the third-party system. You can use a variable to add the external system ID to the URL. If you are using the `xpack.actions.allowedHosts setting`, add the hostname to the allowed hosts.\n",
            "examples": [
              "https://example.com/issue/{{{external.system.id}}}/comment"
            ]
          },
          "createIncidentJson": {
            "type": "string",
            "description": "A JSON payload sent to the create case URL to create a case. You can use variables to add case data to the payload. Required variables are `case.title` and `case.description`. Due to Mustache template variables (which is the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid to avoid future validation errors; disregard Mustache variables during your review.\n",
            "examples": [
              {
                "fields": {
                  "summary": {
                    "[object Object]": null
                  },
                  "description": {
                    "[object Object]": null
                  },
                  "labels": {
                    "[object Object]": null
                  }
                }
              }
            ]
          },
          "createIncidentMethod": {
            "type": "string",
            "description": "The REST API HTTP request method to create a case in the third-party system. Valid values are `patch`, `post`, and `put`.\n",
            "enum": [
              "patch",
              "post",
              "put"
            ],
            "default": "post"
          },
          "createIncidentResponseKey": {
            "type": "string",
            "description": "The JSON key in the create external case response that contains the case ID."
          },
          "createIncidentUrl": {
            "type": "string",
            "description": "The REST API URL to create a case in the third-party system. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n"
          },
          "getIncidentResponseExternalTitleKey": {
            "type": "string",
            "description": "The JSON key in get external case response that contains the case title."
          },
          "getIncidentUrl": {
            "type": "string",
            "description": "The REST API URL to get the case by ID from the third-party system. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts. You can use a variable to add the external system ID to the URL. Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid, disregarding the Mustache variables, so the later validation will pass.\n",
            "examples": [
              "https://example.com/issue/{{{external.system.id}}}"
            ]
          },
          "hasAuth": {
            "type": "boolean",
            "description": "If true, a username and password for login type authentication must be provided.",
            "default": true
          },
          "headers": {
            "type": "string",
            "description": "A set of key-value pairs sent as headers with the request URLs for the create case, update case, get case, and create comment methods.\n"
          },
          "updateIncidentJson": {
            "type": "string",
            "description": "The JSON payload sent to the update case URL to update the case. You can use variables to add Kibana Cases data to the payload. Required variables are `case.title` and `case.description`. Due to Mustache template variables (which is the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid to avoid future validation errors; disregard Mustache variables during your review.\n",
            "examples": [
              {
                "fields": {
                  "summary": {
                    "[object Object]": null
                  },
                  "description": {
                    "[object Object]": null
                  },
                  "labels": {
                    "[object Object]": null
                  }
                }
              }
            ]
          },
          "updateIncidentMethod": {
            "type": "string",
            "description": "The REST API HTTP request method to update the case in the third-party system. Valid values are `patch`, `post`, and `put`.\n",
            "default": "put",
            "enum": [
              "patch",
              "post",
              "put"
            ]
          },
          "updateIncidentUrl": {
            "type": "string",
            "description": "The REST API URL to update the case by ID in the third-party system. You can use a variable to add the external system ID to the URL. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n",
            "examples": [
              "https://example.com/issue/{{{external.system.ID}}}"
            ]
          },
          "viewIncidentUrl": {
            "type": "string",
            "description": "The URL to view the case in the external system. You can use variables to add the external system ID or external system title to the URL.\n",
            "examples": [
              "https://testing-jira.atlassian.net/browse/{{{external.system.title}}}"
            ]
          }
        }
      },
      "secrets_properties_cases_webhook": {
        "title": "Connector secrets properties for Webhook - Case Management connector",
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The password for HTTP basic authentication. If `hasAuth` is set to `true`, this property is required."
          },
          "user": {
            "type": "string",
            "description": "The username for HTTP basic authentication. If `hasAuth` is set to `true`, this property is required."
          }
        }
      },
      "config_properties_d3security": {
        "title": "Connector request properties for a D3 Security connector",
        "description": "Defines properties for connectors when type is `.d3security`.",
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "The D3 Security API request URL. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n"
          }
        }
      },
      "secrets_properties_d3security": {
        "title": "Connector secrets properties for a D3 Security connector",
        "description": "Defines secrets for connectors when type is `.d3security`.",
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "The D3 Security token."
          }
        }
      },
      "config_properties_email": {
        "title": "Connector request properties for an email connector",
        "description": "Defines properties for connectors when type is `.email`.",
        "required": [
          "from"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "description": "The client identifier, which is a part of OAuth 2.0 client credentials authentication, in GUID format. If `service` is `exchange_server`, this property is required.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "from": {
            "description": "The from address for all emails sent by the connector. It must be specified in `user@host-name` format.\n",
            "type": "string"
          },
          "hasAuth": {
            "description": "Specifies whether a user and password are required inside the secrets configuration.\n",
            "default": true,
            "type": "boolean"
          },
          "host": {
            "description": "The host name of the service provider. If the `service` is `elastic_cloud` (for Elastic Cloud notifications) or one of Nodemailer's well-known email service providers, this property is ignored. If `service` is `other`, this property must be defined. \n",
            "type": "string"
          },
          "oauthTokenUrl": {
            "type": [
              "string",
              "null"
            ]
          },
          "port": {
            "description": "The port to connect to on the service provider. If the `service` is `elastic_cloud` (for Elastic Cloud notifications) or one of Nodemailer's well-known email service providers, this property is ignored. If `service` is `other`, this property must be defined. \n",
            "type": "integer"
          },
          "secure": {
            "description": "Specifies whether the connection to the service provider will use TLS. If the `service` is `elastic_cloud` (for Elastic Cloud notifications) or one of Nodemailer's well-known email service providers, this property is ignored.\n",
            "type": "boolean"
          },
          "service": {
            "description": "The name of the email service.\n",
            "type": "string",
            "enum": [
              "elastic_cloud",
              "exchange_server",
              "gmail",
              "other",
              "outlook365",
              "ses"
            ]
          },
          "tenantId": {
            "description": "The tenant identifier, which is part of OAuth 2.0 client credentials authentication, in GUID format. If `service` is `exchange_server`, this property is required.\n",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "secrets_properties_email": {
        "title": "Connector secrets properties for an email connector",
        "description": "Defines secrets for connectors when type is `.email`.",
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "The Microsoft Exchange Client secret for OAuth 2.0 client credentials authentication. It must be URL-encoded. If `service` is `exchange_server`, this property is required.\n"
          },
          "password": {
            "type": "string",
            "description": "The password for HTTP basic authentication. If `hasAuth` is set to `true`, this property is required.\n"
          },
          "user": {
            "type": "string",
            "description": "The username for HTTP basic authentication. If `hasAuth` is set to `true`, this property is required.\n"
          }
        }
      },
      "config_properties_genai_azure": {
        "title": "Connector request properties for an OpenAI connector that uses Azure OpenAI",
        "description": "Defines properties for connectors when type is `.gen-ai` and the API provider is `Azure OpenAI'.\n",
        "type": "object",
        "required": [
          "apiProvider",
          "apiUrl"
        ],
        "properties": {
          "apiProvider": {
            "type": "string",
            "description": "The OpenAI API provider.",
            "enum": [
              "Azure OpenAI"
            ]
          },
          "apiUrl": {
            "type": "string",
            "description": "The OpenAI API endpoint."
          }
        }
      },
      "config_properties_genai_openai": {
        "title": "Connector request properties for an OpenAI connector",
        "description": "Defines properties for connectors when type is `.gen-ai` and the API provider is `OpenAI'.\n",
        "type": "object",
        "required": [
          "apiProvider",
          "apiUrl"
        ],
        "properties": {
          "apiProvider": {
            "type": "string",
            "description": "The OpenAI API provider.",
            "enum": [
              "OpenAI"
            ]
          },
          "apiUrl": {
            "type": "string",
            "description": "The OpenAI API endpoint."
          },
          "defaultModel": {
            "type": "string",
            "description": "The default model to use for requests."
          }
        }
      },
      "config_properties_genai": {
        "title": "Connector request properties for an OpenAI connector",
        "description": "Defines properties for connectors when type is `.gen-ai`.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/config_properties_genai_azure"
          },
          {
            "$ref": "#/components/schemas/config_properties_genai_openai"
          }
        ],
        "discriminator": {
          "propertyName": "apiProvider",
          "mapping": {
            "Azure OpenAI": "#/components/schemas/config_properties_genai_azure",
            "OpenAI": "#/components/schemas/config_properties_genai_openai"
          }
        }
      },
      "secrets_properties_genai": {
        "title": "Connector secrets properties for an OpenAI connector",
        "description": "Defines secrets for connectors when type is `.gen-ai`.",
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "The OpenAI API key."
          }
        }
      },
      "config_properties_index": {
        "title": "Connector request properties for an index connector",
        "required": [
          "index"
        ],
        "description": "Defines properties for connectors when type is `.index`.",
        "type": "object",
        "properties": {
          "executionTimeField": {
            "description": "A field that indicates when the document was indexed.",
            "default": null,
            "type": [
              "string",
              "null"
            ]
          },
          "index": {
            "description": "The Elasticsearch index to be written to.",
            "type": "string"
          },
          "refresh": {
            "description": "The refresh policy for the write request, which affects when changes are made visible to search. Refer to the refresh setting for Elasticsearch document APIs.\n",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "config_properties_jira": {
        "title": "Connector request properties for a Jira connector",
        "required": [
          "apiUrl",
          "projectKey"
        ],
        "description": "Defines properties for connectors when type is `.jira`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The Jira instance URL.",
            "type": "string"
          },
          "projectKey": {
            "description": "The Jira project key.",
            "type": "string"
          }
        }
      },
      "secrets_properties_jira": {
        "title": "Connector secrets properties for a Jira connector",
        "required": [
          "apiToken",
          "email"
        ],
        "description": "Defines secrets for connectors when type is `.jira`.",
        "type": "object",
        "properties": {
          "apiToken": {
            "description": "The Jira API authentication token for HTTP basic authentication.",
            "type": "string"
          },
          "email": {
            "description": "The account email for HTTP Basic authentication.",
            "type": "string"
          }
        }
      },
      "config_properties_opsgenie": {
        "title": "Connector request properties for an Opsgenie connector",
        "required": [
          "apiUrl"
        ],
        "description": "Defines properties for connectors when type is `.opsgenie`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The Opsgenie URL. For example, `https://api.opsgenie.com` or `https://api.eu.opsgenie.com`. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n",
            "type": "string"
          }
        }
      },
      "secrets_properties_opsgenie": {
        "title": "Connector secrets properties for an Opsgenie connector",
        "required": [
          "apiKey"
        ],
        "description": "Defines secrets for connectors when type is `.opsgenie`.",
        "type": "object",
        "properties": {
          "apiKey": {
            "description": "The Opsgenie API authentication key for HTTP Basic authentication.",
            "type": "string"
          }
        }
      },
      "config_properties_pagerduty": {
        "title": "Connector request properties for a PagerDuty connector",
        "description": "Defines properties for connectors when type is `.pagerduty`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The PagerDuty event URL.",
            "type": [
              "string",
              "null"
            ],
            "examples": [
              "https://events.pagerduty.com/v2/enqueue"
            ]
          }
        }
      },
      "secrets_properties_pagerduty": {
        "title": "Connector secrets properties for a PagerDuty connector",
        "description": "Defines secrets for connectors when type is `.pagerduty`.",
        "type": "object",
        "required": [
          "routingKey"
        ],
        "properties": {
          "routingKey": {
            "description": "A 32 character PagerDuty Integration Key for an integration on a service.\n",
            "type": "string"
          }
        }
      },
      "config_properties_resilient": {
        "title": "Connector request properties for a IBM Resilient connector",
        "required": [
          "apiUrl",
          "orgId"
        ],
        "description": "Defines properties for connectors when type is `.resilient`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The IBM Resilient instance URL.",
            "type": "string"
          },
          "orgId": {
            "description": "The IBM Resilient organization ID.",
            "type": "string"
          }
        }
      },
      "secrets_properties_resilient": {
        "title": "Connector secrets properties for IBM Resilient connector",
        "required": [
          "apiKeyId",
          "apiKeySecret"
        ],
        "description": "Defines secrets for connectors when type is `.resilient`.",
        "type": "object",
        "properties": {
          "apiKeyId": {
            "type": "string",
            "description": "The authentication key ID for HTTP Basic authentication."
          },
          "apiKeySecret": {
            "type": "string",
            "description": "The authentication key secret for HTTP Basic authentication."
          }
        }
      },
      "config_properties_sentinelone": {
        "title": "Connector request properties for a SentinelOne connector",
        "required": [
          "url"
        ],
        "description": "Defines properties for connectors when type is `.sentinelone`.",
        "type": "object",
        "properties": {
          "url": {
            "description": "The SentinelOne tenant URL. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n",
            "type": "string"
          }
        }
      },
      "secrets_properties_sentinelone": {
        "title": "Connector secrets properties for a SentinelOne connector",
        "description": "Defines secrets for connectors when type is `.sentinelone`.",
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "The A SentinelOne API token.",
            "type": "string"
          }
        }
      },
      "config_properties_servicenow": {
        "title": "Connector request properties for a ServiceNow ITSM connector",
        "required": [
          "apiUrl"
        ],
        "description": "Defines properties for connectors when type is `.servicenow`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "type": "string",
            "description": "The ServiceNow instance URL."
          },
          "clientId": {
            "description": "The client ID assigned to your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "isOAuth": {
            "description": "The type of authentication to use. The default value is false, which means basic authentication is used instead of open authorization (OAuth).\n",
            "default": false,
            "type": "boolean"
          },
          "jwtKeyId": {
            "description": "The key identifier assigned to the JWT verifier map of your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "userIdentifierValue": {
            "description": "The identifier to use for OAuth authentication. This identifier should be the user field you selected when you created an OAuth JWT API endpoint for external clients in your ServiceNow instance. For example, if the selected user field is `Email`, the user identifier should be the user's email address. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "usesTableApi": {
            "description": "Determines whether the connector uses the Table API or the Import Set API. This property is supported only for ServiceNow ITSM and ServiceNow SecOps connectors.  NOTE: If this property is set to `false`, the Elastic application should be installed in ServiceNow.\n",
            "default": true,
            "type": "boolean"
          }
        }
      },
      "secrets_properties_servicenow": {
        "title": "Connector secrets properties for ServiceNow ITOM, ServiceNow ITSM, and ServiceNow SecOps connectors",
        "description": "Defines secrets for connectors when type is `.servicenow`, `.servicenow-sir`, or `.servicenow-itom`.",
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "The client secret assigned to your OAuth application. This property is required when `isOAuth` is `true`."
          },
          "password": {
            "type": "string",
            "description": "The password for HTTP basic authentication. This property is required when `isOAuth` is `false`."
          },
          "privateKey": {
            "type": "string",
            "description": "The RSA private key that you created for use in ServiceNow. This property is required when `isOAuth` is `true`."
          },
          "privateKeyPassword": {
            "type": "string",
            "description": "The password for the RSA private key. This property is required when `isOAuth` is `true` and you set a password on your private key."
          },
          "username": {
            "type": "string",
            "description": "The username for HTTP basic authentication. This property is required when `isOAuth` is `false`."
          }
        }
      },
      "config_properties_servicenow_itom": {
        "title": "Connector request properties for a ServiceNow ITSM connector",
        "required": [
          "apiUrl"
        ],
        "description": "Defines properties for connectors when type is `.servicenow`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "type": "string",
            "description": "The ServiceNow instance URL."
          },
          "clientId": {
            "description": "The client ID assigned to your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "isOAuth": {
            "description": "The type of authentication to use. The default value is false, which means basic authentication is used instead of open authorization (OAuth).\n",
            "default": false,
            "type": "boolean"
          },
          "jwtKeyId": {
            "description": "The key identifier assigned to the JWT verifier map of your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "userIdentifierValue": {
            "description": "The identifier to use for OAuth authentication. This identifier should be the user field you selected when you created an OAuth JWT API endpoint for external clients in your ServiceNow instance. For example, if the selected user field is `Email`, the user identifier should be the user's email address. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          }
        }
      },
      "config_properties_slack_api": {
        "title": "Connector request properties for a Slack connector",
        "description": "Defines properties for connectors when type is `.slack_api`.",
        "type": "object",
        "properties": {
          "allowedChannels": {
            "type": "array",
            "description": "A list of valid Slack channels.",
            "items": {
              "type": "object",
              "required": [
                "id",
                "name"
              ],
              "maxItems": 25,
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The Slack channel ID.",
                  "example": "C123ABC456",
                  "minLength": 1
                },
                "name": {
                  "type": "string",
                  "description": "The Slack channel name.",
                  "minLength": 1
                }
              }
            }
          }
        }
      },
      "secrets_properties_slack_api": {
        "title": "Connector secrets properties for a Web API Slack connector",
        "description": "Defines secrets for connectors when type is `.slack`.",
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Slack bot user OAuth token."
          }
        }
      },
      "secrets_properties_slack_webhook": {
        "title": "Connector secrets properties for a Webhook Slack connector",
        "description": "Defines secrets for connectors when type is `.slack`.",
        "required": [
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookUrl": {
            "type": "string",
            "description": "Slack webhook url."
          }
        }
      },
      "config_properties_swimlane": {
        "title": "Connector request properties for a Swimlane connector",
        "required": [
          "apiUrl",
          "appId",
          "connectorType"
        ],
        "description": "Defines properties for connectors when type is `.swimlane`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The Swimlane instance URL.",
            "type": "string"
          },
          "appId": {
            "description": "The Swimlane application ID.",
            "type": "string"
          },
          "connectorType": {
            "description": "The type of connector. Valid values are `all`, `alerts`, and `cases`.",
            "type": "string",
            "enum": [
              "all",
              "alerts",
              "cases"
            ]
          },
          "mappings": {
            "title": "Connector mappings properties for a Swimlane connector",
            "description": "The field mapping.",
            "type": "object",
            "properties": {
              "alertIdConfig": {
                "title": "Alert identifier mapping",
                "description": "Mapping for the alert ID.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "caseIdConfig": {
                "title": "Case identifier mapping",
                "description": "Mapping for the case ID.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "caseNameConfig": {
                "title": "Case name mapping",
                "description": "Mapping for the case name.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "commentsConfig": {
                "title": "Case comment mapping",
                "description": "Mapping for the case comments.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "descriptionConfig": {
                "title": "Case description mapping",
                "description": "Mapping for the case description.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "ruleNameConfig": {
                "title": "Rule name mapping",
                "description": "Mapping for the name of the alert's rule.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "severityConfig": {
                "title": "Severity mapping",
                "description": "Mapping for the severity.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              }
            }
          }
        }
      },
      "secrets_properties_swimlane": {
        "title": "Connector secrets properties for a Swimlane connector",
        "description": "Defines secrets for connectors when type is `.swimlane`.",
        "type": "object",
        "properties": {
          "apiToken": {
            "description": "Swimlane API authentication token.",
            "type": "string"
          }
        }
      },
      "secrets_properties_teams": {
        "title": "Connector secrets properties for a Microsoft Teams connector",
        "description": "Defines secrets for connectors when type is `.teams`.",
        "type": "object",
        "required": [
          "webhookUrl"
        ],
        "properties": {
          "webhookUrl": {
            "type": "string",
            "description": "The URL of the incoming webhook. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n"
          }
        }
      },
      "config_properties_tines": {
        "title": "Connector request properties for a Tines connector",
        "description": "Defines properties for connectors when type is `.tines`.",
        "type": "object",
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "description": "The Tines tenant URL. If you are using the `xpack.actions.allowedHosts` setting, make sure this hostname is added to the allowed hosts.\n",
            "type": "string"
          }
        }
      },
      "secrets_properties_tines": {
        "title": "Connector secrets properties for a Tines connector",
        "description": "Defines secrets for connectors when type is `.tines`.",
        "type": "object",
        "required": [
          "email",
          "token"
        ],
        "properties": {
          "email": {
            "description": "The email used to sign in to Tines.",
            "type": "string"
          },
          "token": {
            "description": "The Tines API token.",
            "type": "string"
          }
        }
      },
      "config_properties_torq": {
        "title": "Connector request properties for a Torq connector",
        "description": "Defines properties for connectors when type is `.torq`.",
        "type": "object",
        "required": [
          "webhookIntegrationUrl"
        ],
        "properties": {
          "webhookIntegrationUrl": {
            "description": "The endpoint URL of the Elastic Security integration in Torq.",
            "type": "string"
          }
        }
      },
      "secrets_properties_torq": {
        "title": "Connector secrets properties for a Torq connector",
        "description": "Defines secrets for connectors when type is `.torq`.",
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "description": "The secret of the webhook authentication header.",
            "type": "string"
          }
        }
      },
      "config_properties_webhook": {
        "title": "Connector request properties for a Webhook connector",
        "description": "Defines properties for connectors when type is `.webhook`.",
        "type": "object",
        "properties": {
          "authType": {
            "type": "string",
            "enum": [
              "webhook-authentication-basic",
              "webhook-authentication-ssl",
              "null"
            ],
            "description": "The type of authentication to use: basic, SSL, or none.\n"
          },
          "ca": {
            "type": "string",
            "description": "A base64 encoded version of the certificate authority file that the connector can trust to sign and validate certificates. This option is available for all authentication types.\n"
          },
          "certType": {
            "type": "string",
            "description": "If the `authType` is `webhook-authentication-ssl`, specifies whether the certificate authentication data is in a CRT and key file format or a PFX file format.\n",
            "enum": [
              "ssl-crt-key",
              "ssl-pfx"
            ]
          },
          "hasAuth": {
            "type": "boolean",
            "description": "If `true`, a user name and password must be provided for login type authentication.\n"
          },
          "headers": {
            "type": [
              "object",
              "null"
            ],
            "description": "A set of key-value pairs sent as headers with the request."
          },
          "method": {
            "type": "string",
            "default": "post",
            "enum": [
              "post",
              "put"
            ],
            "description": "The HTTP request method, either `post` or `put`.\n"
          },
          "url": {
            "type": "string",
            "description": "The request URL. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n"
          },
          "verificationMode": {
            "type": "string",
            "enum": [
              "certificate",
              "full",
              "none"
            ],
            "default": "full",
            "description": "Controls the verification of certificates. Use `full` to validate that the certificate has an issue date within the `not_before` and `not_after` dates, chains to a trusted certificate authority (CA), and has a hostname or IP address that matches the names within the certificate. Use `certificate` to validate the certificate and verify that it is signed by a trusted authority; this option does not check the certificate hostname. Use `none` to skip certificate validation.\n"
          }
        }
      },
      "secrets_properties_webhook": {
        "title": "Connector secrets properties for a Webhook connector",
        "description": "Defines secrets for connectors when type is `.webhook`.",
        "type": "object",
        "properties": {
          "crt": {
            "type": "string",
            "description": "If `authType` is `webhook-authentication-ssl` and `certType` is `ssl-crt-key`, it is a base64 encoded version of the CRT or CERT file."
          },
          "key": {
            "type": "string",
            "description": "If `authType` is `webhook-authentication-ssl` and `certType` is `ssl-crt-key`, it is a base64 encoded version of the KEY file."
          },
          "pfx": {
            "type": "string",
            "description": "If `authType` is `webhook-authentication-ssl` and `certType` is `ssl-pfx`, it is a base64 encoded version of the PFX or P12 file."
          },
          "password": {
            "type": "string",
            "description": "The password for HTTP basic authentication or the passphrase for the SSL certificate files. If `hasAuth` is set to `true` and `authType` is `webhook-authentication-basic`, this property is required.\n"
          },
          "user": {
            "type": "string",
            "description": "The username for HTTP basic authentication. If `hasAuth` is set to `true`  and `authType` is `webhook-authentication-basic`, this property is required.\n"
          }
        }
      },
      "config_properties_xmatters": {
        "title": "Connector request properties for an xMatters connector",
        "description": "Defines properties for connectors when type is `.xmatters`.",
        "type": "object",
        "properties": {
          "configUrl": {
            "description": "The request URL for the Elastic Alerts trigger in xMatters. It is applicable only when `usesBasic` is `true`.\n",
            "type": [
              "string",
              "null"
            ]
          },
          "usesBasic": {
            "description": "Specifies whether the connector uses HTTP basic authentication (`true`) or URL authentication (`false`).",
            "type": "boolean",
            "default": true
          }
        }
      },
      "secrets_properties_xmatters": {
        "title": "Connector secrets properties for an xMatters connector",
        "description": "Defines secrets for connectors when type is `.xmatters`.",
        "type": "object",
        "properties": {
          "password": {
            "description": "A user name for HTTP basic authentication. It is applicable only when `usesBasic` is `true`.\n",
            "type": "string"
          },
          "secretsUrl": {
            "description": "The request URL for the Elastic Alerts trigger in xMatters with the API key included in the URL. It is applicable only when `usesBasic` is `false`.\n",
            "type": "string"
          },
          "user": {
            "description": "A password for HTTP basic authentication. It is applicable only when `usesBasic` is `true`.\n",
            "type": "string"
          }
        }
      },
      "create_connector_request": {
        "title": "Create connector request body properties",
        "description": "The properties vary depending on the connector type.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/create_connector_request_bedrock"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_cases_webhook"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_d3security"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_email"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_genai"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_index"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_jira"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_opsgenie"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_pagerduty"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_resilient"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_sentinelone"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_serverlog"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_servicenow"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_servicenow_itom"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_servicenow_sir"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_slack_api"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_slack_webhook"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_swimlane"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_teams"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_tines"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_torq"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_webhook"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_xmatters"
          }
        ],
        "discriminator": {
          "propertyName": "connector_type_id",
          "mapping": {
            ".bedrock": "#/components/schemas/create_connector_request_bedrock",
            ".cases-webhook": "#/components/schemas/create_connector_request_cases_webhook",
            ".d3security": "#/components/schemas/create_connector_request_d3security",
            ".email": "#/components/schemas/create_connector_request_email",
            ".gen-ai": "#/components/schemas/create_connector_request_genai",
            ".index": "#/components/schemas/create_connector_request_index",
            ".jira": "#/components/schemas/create_connector_request_jira",
            ".opsgenie": "#/components/schemas/create_connector_request_opsgenie",
            ".pagerduty": "#/components/schemas/create_connector_request_pagerduty",
            ".resilient": "#/components/schemas/create_connector_request_resilient",
            ".sentinelone": "#/components/schemas/create_connector_request_sentinelone",
            ".server-log": "#/components/schemas/create_connector_request_serverlog",
            ".servicenow": "#/components/schemas/create_connector_request_servicenow",
            ".servicenow-itom": "#/components/schemas/create_connector_request_servicenow_itom",
            ".servicenow-sir": "#/components/schemas/create_connector_request_servicenow_sir",
            ".slack_api": "#/components/schemas/create_connector_request_slack_api",
            ".slack": "#/components/schemas/create_connector_request_slack_webhook",
            ".swimlane": "#/components/schemas/create_connector_request_swimlane",
            ".teams": "#/components/schemas/create_connector_request_teams",
            ".tines": "#/components/schemas/create_connector_request_tines",
            ".torq": "#/components/schemas/create_connector_request_torq",
            ".webhook": "#/components/schemas/create_connector_request_webhook",
            ".xmatters": "#/components/schemas/create_connector_request_xmatters"
          }
        }
      },
      "connector_response_properties_bedrock": {
        "title": "Connector response properties for an Amazon Bedrock connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_bedrock"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".bedrock"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties_cases_webhook": {
        "title": "Connector request properties for a Webhook - Case Management connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_cases_webhook"
          },
          "connector_type_id": {
            "description": "The type of connector.",
            "type": "string",
            "enum": [
              ".cases-webhook"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_d3security": {
        "title": "Connector response properties for a D3 Security connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_d3security"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".d3security"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_email": {
        "title": "Connector response properties for an email connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_email"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".email"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_genai": {
        "title": "Connector response properties for an OpenAI connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_genai"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".gen-ai"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_index": {
        "title": "Connector response properties for an index connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_index"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".index"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_jira": {
        "title": "Connector response properties for a Jira connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_jira"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".jira"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_opsgenie": {
        "title": "Connector response properties for an Opsgenie connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_opsgenie"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".opsgenie"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_pagerduty": {
        "title": "Connector response properties for a PagerDuty connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_pagerduty"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".pagerduty"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_resilient": {
        "title": "Connector response properties for a IBM Resilient connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_resilient"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".resilient"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_sentinelone": {
        "title": "Connector response properties for a SentinelOne connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_sentinelone"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".sentinelone"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_serverlog": {
        "title": "Connector response properties for a server log connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "type": [
              "object",
              "null"
            ]
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".server-log"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_servicenow": {
        "title": "Connector response properties for a ServiceNow ITSM connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_servicenow_itom": {
        "title": "Connector response properties for a ServiceNow ITOM connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow_itom"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-itom"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_servicenow_sir": {
        "title": "Connector response properties for a ServiceNow SecOps connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-sir"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_slack_api": {
        "title": "Connector response properties for a Slack connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_slack_api"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".slack_api"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_slack_webhook": {
        "title": "Connector response properties for a Slack connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".slack"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_swimlane": {
        "title": "Connector response properties for a Swimlane connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_swimlane"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".swimlane"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_teams": {
        "title": "Connector response properties for a Microsoft Teams connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "type": "object"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".teams"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_tines": {
        "title": "Connector response properties for a Tines connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_tines"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".tines"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_torq": {
        "title": "Connector response properties for a Torq connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_torq"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".torq"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_webhook": {
        "title": "Connector response properties for a Webhook connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_webhook"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".webhook"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "connector_response_properties_xmatters": {
        "title": "Connector response properties for an xMatters connector",
        "type": "object",
        "required": [
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_xmatters"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".xmatters"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "is_system_action": {
            "$ref": "#/components/schemas/is_system_action"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "referenced_by_count": {
            "$ref": "#/components/schemas/referenced_by_count"
          }
        }
      },
      "is_deprecated": {
        "type": "boolean",
        "description": "Indicates whether the connector type is deprecated.",
        "examples": [
          false
        ]
      },
      "is_missing_secrets": {
        "type": "boolean",
        "description": "Indicates whether secrets are missing for the connector. Secrets configuration properties vary depending on the connector type.",
        "examples": [
          false
        ]
      },
      "is_preconfigured": {
        "type": "boolean",
        "description": "Indicates whether it is a preconfigured connector. If true, the `config` and `is_missing_secrets` properties are omitted from the response. \n",
        "examples": [
          false
        ]
      },
      "is_system_action": {
        "type": "boolean",
        "description": "Indicates whether the connector is used for system actions.",
        "examples": [
          false
        ]
      },
      "referenced_by_count": {
        "type": "integer",
        "description": "Indicates the number of saved objects that reference the connector. If `is_preconfigured` is true, this value is not calculated. This property is returned only by the get all connectors API.\n",
        "examples": [
          2
        ]
      },
      "connector_response_properties": {
        "title": "Connector response properties",
        "description": "The properties vary depending on the connector type.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/connector_response_properties_bedrock"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_cases_webhook"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_d3security"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_email"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_genai"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_index"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_jira"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_opsgenie"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_pagerduty"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_resilient"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_sentinelone"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_serverlog"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_servicenow"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_servicenow_itom"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_servicenow_sir"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_slack_api"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_slack_webhook"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_swimlane"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_teams"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_tines"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_torq"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_webhook"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_xmatters"
          }
        ],
        "discriminator": {
          "propertyName": "connector_type_id",
          "mapping": {
            ".bedrock": "#/components/schemas/connector_response_properties_bedrock",
            ".cases-webhook": "#/components/schemas/connector_response_properties_cases_webhook",
            ".d3security": "#/components/schemas/connector_response_properties_d3security",
            ".email": "#/components/schemas/connector_response_properties_email",
            ".gen-ai": "#/components/schemas/connector_response_properties_genai",
            ".index": "#/components/schemas/connector_response_properties_index",
            ".jira": "#/components/schemas/connector_response_properties_jira",
            ".opsgenie": "#/components/schemas/connector_response_properties_opsgenie",
            ".pagerduty": "#/components/schemas/connector_response_properties_pagerduty",
            ".resilient": "#/components/schemas/connector_response_properties_resilient",
            ".sentinelone": "#/components/schemas/connector_response_properties_sentinelone",
            ".server-log": "#/components/schemas/connector_response_properties_serverlog",
            ".servicenow": "#/components/schemas/connector_response_properties_servicenow",
            ".servicenow-itom": "#/components/schemas/connector_response_properties_servicenow_itom",
            ".servicenow-sir": "#/components/schemas/connector_response_properties_servicenow_sir",
            ".slack_api": "#/components/schemas/connector_response_properties_slack_api",
            ".slack": "#/components/schemas/connector_response_properties_slack_webhook",
            ".swimlane": "#/components/schemas/connector_response_properties_swimlane",
            ".teams": "#/components/schemas/connector_response_properties_teams",
            ".tines": "#/components/schemas/connector_response_properties_tines",
            ".torq": "#/components/schemas/connector_response_properties_torq",
            ".webhook": "#/components/schemas/connector_response_properties_webhook",
            ".xmatters": "#/components/schemas/connector_response_properties_xmatters"
          }
        }
      },
      "update_connector_request_bedrock": {
        "title": "Update Amazon Bedrock connector request",
        "type": "object",
        "required": [
          "config",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_bedrock"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_bedrock"
          }
        }
      },
      "update_connector_request_cases_webhook": {
        "title": "Update Webhook - Case Managment connector request",
        "type": "object",
        "required": [
          "config",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_cases_webhook"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_cases_webhook"
          }
        }
      },
      "update_connector_request_d3security": {
        "title": "Update D3 Security connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_d3security"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_d3security"
          }
        }
      },
      "update_connector_request_email": {
        "title": "Update email connector request",
        "type": "object",
        "required": [
          "config",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_email"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_email"
          }
        }
      },
      "update_connector_request_index": {
        "title": "Update index connector request",
        "type": "object",
        "required": [
          "config",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_index"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "update_connector_request_jira": {
        "title": "Update Jira connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_jira"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_jira"
          }
        }
      },
      "update_connector_request_opsgenie": {
        "title": "Update Opsgenie connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_opsgenie"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_opsgenie"
          }
        }
      },
      "update_connector_request_pagerduty": {
        "title": "Update PagerDuty connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_pagerduty"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_pagerduty"
          }
        }
      },
      "update_connector_request_resilient": {
        "title": "Update IBM Resilient connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_resilient"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_resilient"
          }
        }
      },
      "update_connector_request_sentinelone": {
        "title": "Update SentinelOne connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_sentinelone"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_sentinelone"
          }
        }
      },
      "update_connector_request_serverlog": {
        "title": "Update server log connector request",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "update_connector_request_servicenow": {
        "title": "Update ServiceNow ITSM connector or ServiceNow SecOps request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "update_connector_request_servicenow_itom": {
        "title": "Create ServiceNow ITOM connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow_itom"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "update_connector_request_slack_api": {
        "title": "Update Slack connector request",
        "type": "object",
        "required": [
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_slack_api"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_slack_api"
          }
        }
      },
      "update_connector_request_slack_webhook": {
        "title": "Update Slack connector request",
        "type": "object",
        "required": [
          "name",
          "secrets"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_slack_webhook"
          }
        }
      },
      "update_connector_request_swimlane": {
        "title": "Update Swimlane connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_swimlane"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "examples": [
              "my-connector"
            ]
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_swimlane"
          }
        }
      },
      "update_connector_request_teams": {
        "title": "Update Microsoft Teams connector request",
        "type": "object",
        "required": [
          "name",
          "secrets"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_teams"
          }
        }
      },
      "update_connector_request_tines": {
        "title": "Update Tines connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_tines"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_tines"
          }
        }
      },
      "update_connector_request_torq": {
        "title": "Update Torq connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_torq"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_torq"
          }
        }
      },
      "update_connector_request_webhook": {
        "title": "Update Webhook connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_webhook"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_webhook"
          }
        }
      },
      "update_connector_request_xmatters": {
        "title": "Update xMatters connector request",
        "type": "object",
        "required": [
          "config",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_xmatters"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_xmatters"
          }
        }
      },
      "update_connector_request": {
        "title": "Update connector request body properties",
        "description": "The properties vary depending on the connector type.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/update_connector_request_bedrock"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_cases_webhook"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_d3security"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_email"
          },
          {
            "$ref": "#/components/schemas/create_connector_request_genai"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_index"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_jira"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_opsgenie"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_pagerduty"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_resilient"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_sentinelone"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_serverlog"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_servicenow"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_servicenow_itom"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_slack_api"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_slack_webhook"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_swimlane"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_teams"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_tines"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_torq"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_webhook"
          },
          {
            "$ref": "#/components/schemas/update_connector_request_xmatters"
          }
        ]
      },
      "run_connector_params_acknowledge_resolve_pagerduty": {
        "title": "PagerDuty connector parameters",
        "description": "Test an action that acknowledges or resolves a PagerDuty alert.",
        "type": "object",
        "required": [
          "dedupKey",
          "eventAction"
        ],
        "properties": {
          "dedupKey": {
            "description": "The deduplication key for the PagerDuty alert.",
            "type": "string",
            "maxLength": 255
          },
          "eventAction": {
            "description": "The type of event.",
            "type": "string",
            "enum": [
              "acknowledge",
              "resolve"
            ]
          }
        }
      },
      "run_connector_params_documents": {
        "title": "Index connector parameters",
        "description": "Test an action that indexes a document into Elasticsearch.",
        "type": "object",
        "required": [
          "documents"
        ],
        "properties": {
          "documents": {
            "type": "array",
            "description": "The documents in JSON format for index connectors.",
            "items": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "run_connector_params_message_email": {
        "title": "Email connector parameters",
        "description": "Test an action that sends an email message. There must be at least one recipient in `to`, `cc`, or `bcc`.\n",
        "type": "object",
        "anyOf": [
          {
            "required": [
              "bcc",
              "message",
              "subject"
            ]
          },
          {
            "required": [
              "cc",
              "message",
              "subject"
            ]
          },
          {
            "required": [
              "to",
              "message",
              "subject"
            ]
          }
        ],
        "properties": {
          "bcc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of \"blind carbon copy\" email addresses. Addresses can be specified in `user@host-name` format or in name `<user@host-name>` format\n"
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of \"carbon copy\" email addresses. Addresses can be specified in `user@host-name` format or in name `<user@host-name>` format \n"
          },
          "message": {
            "type": "string",
            "description": "The email message text. Markdown format is supported."
          },
          "subject": {
            "type": "string",
            "description": "The subject line of the email."
          },
          "to": {
            "type": "array",
            "description": "A list of email addresses. Addresses can be specified in `user@host-name` format or in name `<user@host-name>` format.\n",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "run_connector_params_message_serverlog": {
        "title": "Server log connector parameters",
        "description": "Test an action that writes an entry to the Kibana server log.",
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "level": {
            "type": "string",
            "description": "The log level of the message for server log connectors.",
            "enum": [
              "debug",
              "error",
              "fatal",
              "info",
              "trace",
              "warn"
            ],
            "default": "info"
          },
          "message": {
            "type": "string",
            "description": "The message for server log connectors."
          }
        }
      },
      "run_connector_params_message_slack": {
        "title": "Slack connector parameters",
        "description": "Test an action that sends a message to Slack. It is applicable only when the connector type is `.slack`.\n",
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "The Slack message text, which cannot contain Markdown, images, or other advanced formatting."
          }
        }
      },
      "run_connector_params_trigger_pagerduty": {
        "title": "PagerDuty connector parameters",
        "description": "Test an action that triggers a PagerDuty alert.",
        "type": "object",
        "required": [
          "eventAction"
        ],
        "properties": {
          "class": {
            "description": "The class or type of the event.",
            "type": "string",
            "examples": [
              "cpu load"
            ]
          },
          "component": {
            "description": "The component of the source machine that is responsible for the event.",
            "type": "string",
            "examples": [
              "eth0"
            ]
          },
          "customDetails": {
            "description": "Additional details to add to the event.",
            "type": "object"
          },
          "dedupKey": {
            "description": "All actions sharing this key will be associated with the same PagerDuty alert. This value is used to correlate trigger and resolution.\n",
            "type": "string",
            "maxLength": 255
          },
          "eventAction": {
            "description": "The type of event.",
            "type": "string",
            "enum": [
              "trigger"
            ]
          },
          "group": {
            "description": "The logical grouping of components of a service.",
            "type": "string",
            "examples": [
              "app-stack"
            ]
          },
          "links": {
            "description": "A list of links to add to the event.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "href": {
                  "description": "The URL for the link.",
                  "type": "string"
                },
                "text": {
                  "description": "A plain text description of the purpose of the link.",
                  "type": "string"
                }
              }
            }
          },
          "severity": {
            "description": "The severity of the event on the affected system.",
            "type": "string",
            "enum": [
              "critical",
              "error",
              "info",
              "warning"
            ],
            "default": "info"
          },
          "source": {
            "description": "The affected system, such as a hostname or fully qualified domain name. Defaults to the Kibana saved object id of the action.\n",
            "type": "string"
          },
          "summary": {
            "description": "A summery of the event.",
            "type": "string",
            "maxLength": 1024
          },
          "timestamp": {
            "description": "An ISO-8601 timestamp that indicates when the event was detected or generated.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "run_connector_subaction_addevent": {
        "title": "The addEvent subaction",
        "type": "object",
        "required": [
          "subAction"
        ],
        "description": "The `addEvent` subaction for ServiceNow ITOM connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "addEvent"
            ]
          },
          "subActionParams": {
            "type": "object",
            "description": "The set of configuration properties for the action.",
            "properties": {
              "additional_info": {
                "type": "string",
                "description": "Additional information about the event."
              },
              "description": {
                "type": "string",
                "description": "The details about the event."
              },
              "event_class": {
                "type": "string",
                "description": "A specific instance of the source."
              },
              "message_key": {
                "type": "string",
                "description": "All actions sharing this key are associated with the same ServiceNow alert. The default value is `<rule ID>:<alert instance ID>`."
              },
              "metric_name": {
                "type": "string",
                "description": "The name of the metric."
              },
              "node": {
                "type": "string",
                "description": "The host that the event was triggered for."
              },
              "resource": {
                "type": "string",
                "description": "The name of the resource."
              },
              "severity": {
                "type": "string",
                "description": "The severity of the event."
              },
              "source": {
                "type": "string",
                "description": "The name of the event source type."
              },
              "time_of_event": {
                "type": "string",
                "description": "The time of the event."
              },
              "type": {
                "type": "string",
                "description": "The type of event."
              }
            }
          }
        }
      },
      "run_connector_subaction_closealert": {
        "title": "The closeAlert subaction",
        "type": "object",
        "required": [
          "subAction",
          "subActionParams"
        ],
        "description": "The `closeAlert` subaction for Opsgenie connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "closeAlert"
            ]
          },
          "subActionParams": {
            "type": "object",
            "required": [
              "alias"
            ],
            "properties": {
              "alias": {
                "type": "string",
                "description": "The unique identifier used for alert deduplication in Opsgenie. The alias must match the value used when creating the alert."
              },
              "note": {
                "type": "string",
                "description": "Additional information for the alert."
              },
              "source": {
                "type": "string",
                "description": "The display name for the source of the alert."
              },
              "user": {
                "type": "string",
                "description": "The display name for the owner."
              }
            }
          }
        }
      },
      "run_connector_subaction_closeincident": {
        "title": "The closeIncident subaction",
        "type": "object",
        "required": [
          "subAction",
          "subActionParams"
        ],
        "description": "The `closeIncident` subaction for ServiceNow ITSM connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "closeIncident"
            ]
          },
          "subActionParams": {
            "type": "object",
            "required": [
              "incident"
            ],
            "properties": {
              "incident": {
                "type": "object",
                "anyOf": [
                  {
                    "required": [
                      "correlation_id"
                    ]
                  },
                  {
                    "required": [
                      "externalId"
                    ]
                  }
                ],
                "properties": {
                  "correlation_id": {
                    "type": [
                      "null",
                      "string"
                    ],
                    "description": "An identifier that is assigned to the incident when it is created by the connector. NOTE: If you use the default value and the rule generates multiple alerts that use the same alert IDs, the latest open incident for this correlation ID is closed unless you specify the external ID.\n",
                    "maxLength": 100,
                    "default": "{{rule.id}}:{{alert.id}}"
                  },
                  "externalId": {
                    "type": [
                      "null",
                      "string"
                    ],
                    "description": "The unique identifier (`incidentId`) for the incident in ServiceNow."
                  }
                }
              }
            }
          }
        }
      },
      "run_connector_subaction_createalert": {
        "title": "The createAlert subaction",
        "type": "object",
        "required": [
          "subAction",
          "subActionParams"
        ],
        "description": "The `createAlert` subaction for Opsgenie connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "createAlert"
            ]
          },
          "subActionParams": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "actions": {
                "type": "array",
                "description": "The custom actions available to the alert.",
                "items": {
                  "type": "string"
                }
              },
              "alias": {
                "type": "string",
                "description": "The unique identifier used for alert deduplication in Opsgenie."
              },
              "description": {
                "type": "string",
                "description": "A description that provides detailed information about the alert."
              },
              "details": {
                "type": "object",
                "description": "The custom properties of the alert.",
                "additionalProperties": true,
                "examples": [
                  {
                    "key1": "value1",
                    "key2": "value2"
                  }
                ]
              },
              "entity": {
                "type": "string",
                "description": "The domain of the alert. For example, the application or server name."
              },
              "message": {
                "type": "string",
                "description": "The alert message."
              },
              "note": {
                "type": "string",
                "description": "Additional information for the alert."
              },
              "priority": {
                "type": "string",
                "description": "The priority level for the alert.",
                "enum": [
                  "P1",
                  "P2",
                  "P3",
                  "P4",
                  "P5"
                ]
              },
              "responders": {
                "type": "array",
                "description": "The entities to receive notifications about the alert. If `type` is `user`, either `id` or `username` is required. If `type` is `team`, either `id` or `name` is required.\n",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The identifier for the entity."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the entity."
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of responders, in this case `escalation`.",
                      "enum": [
                        "escalation",
                        "schedule",
                        "team",
                        "user"
                      ]
                    },
                    "username": {
                      "type": "string",
                      "description": "A valid email address for the user."
                    }
                  }
                }
              },
              "source": {
                "type": "string",
                "description": "The display name for the source of the alert."
              },
              "tags": {
                "type": "array",
                "description": "The tags for the alert.",
                "items": {
                  "type": "string"
                }
              },
              "user": {
                "type": "string",
                "description": "The display name for the owner."
              },
              "visibleTo": {
                "type": "array",
                "description": "The teams and users that the alert will be visible to without sending a notification. Only one of `id`, `name`, or `username` is required.",
                "items": {
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The identifier for the entity."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the entity."
                    },
                    "type": {
                      "type": "string",
                      "description": "Valid values are `team` and `user`.",
                      "enum": [
                        "team",
                        "user"
                      ]
                    },
                    "username": {
                      "type": "string",
                      "description": "The user name. This property is required only when the `type` is `user`."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "run_connector_subaction_fieldsbyissuetype": {
        "title": "The fieldsByIssueType subaction",
        "type": "object",
        "required": [
          "subAction",
          "subActionParams"
        ],
        "description": "The `fieldsByIssueType` subaction for Jira connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "fieldsByIssueType"
            ]
          },
          "subActionParams": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The Jira issue type identifier.",
                "examples": [
                  10024
                ]
              }
            }
          }
        }
      },
      "run_connector_subaction_getchoices": {
        "title": "The getChoices subaction",
        "type": "object",
        "required": [
          "subAction",
          "subActionParams"
        ],
        "description": "The `getChoices` subaction for ServiceNow ITOM, ServiceNow ITSM, and ServiceNow SecOps connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "getChoices"
            ]
          },
          "subActionParams": {
            "type": "object",
            "description": "The set of configuration properties for the action.",
            "required": [
              "fields"
            ],
            "properties": {
              "fields": {
                "type": "array",
                "description": "An array of fields.",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "run_connector_subaction_getfields": {
        "title": "The getFields subaction",
        "type": "object",
        "required": [
          "subAction"
        ],
        "description": "The `getFields` subaction for Jira, ServiceNow ITSM, and ServiceNow SecOps connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "getFields"
            ]
          }
        }
      },
      "run_connector_subaction_getincident": {
        "title": "The getIncident subaction",
        "type": "object",
        "description": "The `getIncident` subaction for Jira, ServiceNow ITSM, and ServiceNow SecOps connectors.",
        "required": [
          "subAction",
          "subActionParams"
        ],
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "getIncident"
            ]
          },
          "subActionParams": {
            "type": "object",
            "required": [
              "externalId"
            ],
            "properties": {
              "externalId": {
                "type": "string",
                "description": "The Jira, ServiceNow ITSM, or ServiceNow SecOps issue identifier.",
                "examples": [
                  71778
                ]
              }
            }
          }
        }
      },
      "run_connector_subaction_issue": {
        "title": "The issue subaction",
        "type": "object",
        "required": [
          "subAction"
        ],
        "description": "The `issue` subaction for Jira connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "issue"
            ]
          },
          "subActionParams": {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The Jira issue identifier.",
                "examples": [
                  71778
                ]
              }
            }
          }
        }
      },
      "run_connector_subaction_issues": {
        "title": "The issues subaction",
        "type": "object",
        "required": [
          "subAction",
          "subActionParams"
        ],
        "description": "The `issues` subaction for Jira connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "issues"
            ]
          },
          "subActionParams": {
            "type": "object",
            "required": [
              "title"
            ],
            "properties": {
              "title": {
                "type": "string",
                "description": "The title of the Jira issue."
              }
            }
          }
        }
      },
      "run_connector_subaction_issuetypes": {
        "title": "The issueTypes subaction",
        "type": "object",
        "required": [
          "subAction"
        ],
        "description": "The `issueTypes` subaction for Jira connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "issueTypes"
            ]
          }
        }
      },
      "run_connector_subaction_pushtoservice": {
        "title": "The pushToService subaction",
        "type": "object",
        "required": [
          "subAction",
          "subActionParams"
        ],
        "description": "The `pushToService` subaction for Jira, ServiceNow ITSM, ServiceNow SecOps, Swimlane, and Webhook - Case Management connectors.",
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "pushToService"
            ]
          },
          "subActionParams": {
            "type": "object",
            "description": "The set of configuration properties for the action.",
            "properties": {
              "comments": {
                "type": "array",
                "description": "Additional information that is sent to Jira, ServiceNow ITSM, ServiceNow SecOps, or Swimlane.",
                "items": {
                  "type": "object",
                  "properties": {
                    "comment": {
                      "type": "string",
                      "description": "A comment related to the incident. For example, describe how to troubleshoot the issue."
                    },
                    "commentId": {
                      "type": "integer",
                      "description": "A unique identifier for the comment."
                    }
                  }
                }
              },
              "incident": {
                "type": "object",
                "description": "Information necessary to create or update a Jira, ServiceNow ITSM, ServiveNow SecOps, or Swimlane incident.",
                "properties": {
                  "alertId": {
                    "type": "string",
                    "description": "The alert identifier for Swimlane connectors."
                  },
                  "caseId": {
                    "type": "string",
                    "description": "The case identifier for the incident for Swimlane connectors."
                  },
                  "caseName": {
                    "type": "string",
                    "description": "The case name for the incident for Swimlane connectors."
                  },
                  "category": {
                    "type": "string",
                    "description": "The category of the incident for ServiceNow ITSM and ServiceNow SecOps connectors."
                  },
                  "correlation_display": {
                    "type": "string",
                    "description": "A descriptive label of the alert for correlation purposes for ServiceNow ITSM and ServiceNow SecOps connectors."
                  },
                  "correlation_id": {
                    "type": "string",
                    "description": "The correlation identifier for the security incident for ServiceNow ITSM and ServiveNow SecOps connectors. Connectors using the same correlation ID are associated with the same ServiceNow incident. This value determines whether a new ServiceNow incident is created or an existing one is updated. Modifying this value is optional; if not modified, the rule ID and alert ID are combined as `{{ruleID}}:{{alert ID}}` to form the correlation ID value in ServiceNow. The maximum character length for this value is 100 characters. NOTE: Using the default configuration of `{{ruleID}}:{{alert ID}}` ensures that ServiceNow creates a separate incident record for every generated alert that uses a unique alert ID. If the rule generates multiple alerts that use the same alert IDs, ServiceNow creates and continually updates a single incident record for the alert.\n"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident for Jira, ServiceNow ITSM, ServiceNow SecOps, Swimlane, and Webhook - Case Management connectors."
                  },
                  "dest_ip": {
                    "description": "A list of destination IP addresses related to the security incident for ServiceNow SecOps connectors. The IPs are added as observables to the security incident.\n",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    ]
                  },
                  "externalId": {
                    "type": "string",
                    "description": "The Jira, ServiceNow ITSM, or ServiceNow SecOps issue identifier. If present, the incident is updated. Otherwise, a new incident is created.\n"
                  },
                  "id": {
                    "type": "string",
                    "description": "The external case identifier for Webhook - Case Management connectors."
                  },
                  "impact": {
                    "type": "string",
                    "description": "The impact of the incident for ServiceNow ITSM connectors."
                  },
                  "issueType": {
                    "type": "integer",
                    "description": "The type of incident for Jira connectors. For example, 10006. To obtain the list of valid values, set `subAction` to `issueTypes`."
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The labels for the incident for Jira connectors. NOTE: Labels cannot contain spaces.\n"
                  },
                  "malware_hash": {
                    "description": "A list of malware hashes related to the security incident for ServiceNow SecOps connectors. The hashes are added as observables to the security incident.",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    ]
                  },
                  "malware_url": {
                    "type": "string",
                    "description": "A list of malware URLs related to the security incident for ServiceNow SecOps connectors. The URLs are added as observables to the security incident.",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    ]
                  },
                  "otherFields": {
                    "type": "object",
                    "additionalProperties": true,
                    "maxProperties": 20,
                    "description": "Custom field identifiers and their values for Jira connectors.\n"
                  },
                  "parent": {
                    "type": "string",
                    "description": "The ID or key of the parent issue for Jira connectors. Applies only to `Sub-task` types of issues."
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of the incident in Jira and ServiceNow SecOps connectors."
                  },
                  "ruleName": {
                    "type": "string",
                    "description": "The rule name for Swimlane connectors."
                  },
                  "severity": {
                    "type": "string",
                    "description": "The severity of the incident for ServiceNow ITSM and Swimlane connectors."
                  },
                  "short_description": {
                    "type": "string",
                    "description": "A short description of the incident for ServiceNow ITSM and ServiceNow SecOps connectors. It is used for searching the contents of the knowledge base.\n"
                  },
                  "source_ip": {
                    "description": "A list of source IP addresses related to the security incident for ServiceNow SecOps connectors. The IPs are added as observables to the security incident.",
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    ]
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of the incident for Webhook - Case Management connectors."
                  },
                  "subcategory": {
                    "type": "string",
                    "description": "The subcategory of the incident for ServiceNow ITSM and ServiceNow SecOps connectors."
                  },
                  "summary": {
                    "type": "string",
                    "description": "A summary of the incident for Jira connectors."
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A list of tags for Webhook - Case Management connectors."
                  },
                  "title": {
                    "type": "string",
                    "description": "A title for the incident for Jira and Webhook - Case Management connectors. It is used for searching the contents of the knowledge base.\n"
                  },
                  "urgency": {
                    "type": "string",
                    "description": "The urgency of the incident for ServiceNow ITSM connectors."
                  }
                }
              }
            }
          }
        }
      },
      "run_connector_subaction_postmessage": {
        "title": "The postMessage subaction",
        "type": "object",
        "description": "Test an action that sends a message to Slack. It is applicable only when the connector type is `.slack_api`.\n",
        "required": [
          "subAction",
          "subActionParams"
        ],
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "postMessage"
            ]
          },
          "subActionParams": {
            "type": "object",
            "description": "The set of configuration properties for the action.",
            "properties": {
              "channelIds": {
                "type": "array",
                "maxItems": 1,
                "description": "The Slack channel identifier, which must be one of the `allowedChannels` in the connector configuration.\n",
                "items": {
                  "type": "string"
                }
              },
              "channels": {
                "type": "array",
                "deprecated": true,
                "description": "The name of a channel that your Slack app has access to.\n",
                "maxItems": 1,
                "items": {
                  "type": "string"
                }
              },
              "text": {
                "type": "string",
                "description": "The Slack message text. If it is a Slack webhook connector, the text cannot contain Markdown, images, or other advanced formatting. If it is a Slack web API connector, it can contain either plain text or block kit messages.\n",
                "minLength": 1
              }
            }
          }
        }
      },
      "run_connector_subaction_validchannelid": {
        "title": "The validChannelId subaction",
        "type": "object",
        "description": "Retrieves information about a valid Slack channel identifier. It is applicable only when the connector type is `.slack_api`.\n",
        "required": [
          "subAction",
          "subActionParams"
        ],
        "properties": {
          "subAction": {
            "type": "string",
            "description": "The action to test.",
            "enum": [
              "validChannelId"
            ]
          },
          "subActionParams": {
            "type": "object",
            "required": [
              "channelId"
            ],
            "properties": {
              "channelId": {
                "type": "string",
                "description": "The Slack channel identifier.",
                "example": "C123ABC456"
              }
            }
          }
        }
      },
      "run_connector_request": {
        "title": "Run connector request body properties",
        "description": "The properties vary depending on the connector type.",
        "type": "object",
        "required": [
          "params"
        ],
        "properties": {
          "params": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/run_connector_params_acknowledge_resolve_pagerduty"
              },
              {
                "$ref": "#/components/schemas/run_connector_params_documents"
              },
              {
                "$ref": "#/components/schemas/run_connector_params_message_email"
              },
              {
                "$ref": "#/components/schemas/run_connector_params_message_serverlog"
              },
              {
                "$ref": "#/components/schemas/run_connector_params_message_slack"
              },
              {
                "$ref": "#/components/schemas/run_connector_params_trigger_pagerduty"
              },
              {
                "title": "Subaction parameters",
                "description": "Test an action that involves a subaction.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_addevent"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_closealert"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_closeincident"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_createalert"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_fieldsbyissuetype"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_getchoices"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_getfields"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_getincident"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_issue"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_issues"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_issuetypes"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_postmessage"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_pushtoservice"
                  },
                  {
                    "$ref": "#/components/schemas/run_connector_subaction_validchannelid"
                  }
                ],
                "discriminator": {
                  "propertyName": "subAction",
                  "mapping": {
                    "addEvent": "#/components/schemas/run_connector_subaction_addevent",
                    "closeAlert": "#/components/schemas/run_connector_subaction_closealert",
                    "closeIncident": "#/components/schemas/run_connector_subaction_closeincident",
                    "createAlert": "#/components/schemas/run_connector_subaction_createalert",
                    "fieldsByIssueType": "#/components/schemas/run_connector_subaction_fieldsbyissuetype",
                    "getChoices": "#/components/schemas/run_connector_subaction_getchoices",
                    "getFields": "#/components/schemas/run_connector_subaction_getfields",
                    "getIncident": "#/components/schemas/run_connector_subaction_getincident",
                    "issue": "#/components/schemas/run_connector_subaction_issue",
                    "issues": "#/components/schemas/run_connector_subaction_issues",
                    "issueTypes": "#/components/schemas/run_connector_subaction_issuetypes",
                    "pushToService": "#/components/schemas/run_connector_subaction_pushtoservice"
                  }
                }
              }
            ]
          }
        }
      },
      "features": {
        "type": "string",
        "description": "The feature that uses the connector.\n",
        "enum": [
          "alerting",
          "cases",
          "generativeAI",
          "siem",
          "uptime"
        ]
      },
      "connector_types": {
        "title": "Connector types",
        "type": "string",
        "description": "The type of connector. For example, `.email`, `.index`, `.jira`, `.opsgenie`, or `.server-log`.",
        "enum": [
          ".bedrock",
          ".cases-webhook",
          ".d3security",
          ".email",
          ".gen-ai",
          ".index",
          ".jira",
          ".opsgenie",
          ".pagerduty",
          ".resilient",
          ".sentinelone",
          ".servicenow",
          ".servicenow-itom",
          ".servicenow-sir",
          ".server-log",
          ".slack",
          ".slack_api",
          ".swimlane",
          ".teams",
          ".tines",
          ".torq",
          ".webhook",
          ".xmatters"
        ],
        "examples": [
          ".server-log"
        ]
      },
      "action_response_properties": {
        "title": "Action response properties",
        "description": "The properties vary depending on the action type.",
        "type": "object",
        "properties": {
          "actionTypeId": {
            "type": "string"
          },
          "config": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "isDeprecated": {
            "type": "boolean",
            "description": "Indicates whether the action type is deprecated."
          },
          "isMissingSecrets": {
            "type": "boolean",
            "description": "Indicates whether secrets are missing for the action."
          },
          "isPreconfigured": {
            "type": "boolean",
            "description": "Indicates whether it is a preconfigured action."
          },
          "name": {
            "type": "string"
          }
        }
      }
    },
    "examples": {
      "create_email_connector_request": {
        "summary": "Create an email connector.",
        "value": {
          "name": "email-connector-1",
          "connector_type_id": ".email",
          "config": {
            "from": "tester@example.com",
            "hasAuth": true,
            "host": "https://example.com",
            "port": 1025,
            "secure": false,
            "service": "other"
          },
          "secrets": {
            "user": "username",
            "password": "password"
          }
        }
      },
      "create_index_connector_request": {
        "summary": "Create an index connector.",
        "value": {
          "name": "my-connector",
          "connector_type_id": ".index",
          "config": {
            "index": "test-index"
          }
        }
      },
      "create_webhook_connector_request": {
        "summary": "Create a webhook connector with SSL authentication.",
        "value": {
          "name": "my-webhook-connector",
          "connector_type_id": ".webhook",
          "config": {
            "method": "post",
            "url": "https://example.com",
            "authType": "webhook-authentication-ssl",
            "certType": "ssl-crt-key"
          },
          "secrets": {
            "crt": "QmFnIEF0dH...",
            "key": "LS0tLS1CRUdJ...",
            "password": "my-passphrase"
          }
        }
      },
      "create_xmatters_connector_request": {
        "summary": "Create an xMatters connector with URL authentication.",
        "value": {
          "name": "my-xmatters-connector",
          "connector_type_id": ".xmatters",
          "config": {
            "usesBasic": false
          },
          "secrets": {
            "secretsUrl": "https://example.com?apiKey=xxxxx"
          }
        }
      },
      "create_email_connector_response": {
        "summary": "A new email connector.",
        "value": {
          "id": "90a82c60-478f-11ee-a343-f98a117c727f",
          "connector_type_id": ".email",
          "name": "email-connector-1",
          "config": {
            "from": "tester@example.com",
            "service": "other",
            "host": "https://example.com",
            "port": 1025,
            "secure": false,
            "hasAuth": true,
            "tenantId": null,
            "clientId": null,
            "oauthTokenUrl": null
          },
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false,
          "is_system_action": false
        }
      },
      "create_index_connector_response": {
        "summary": "A new index connector.",
        "value": {
          "id": "c55b6eb0-6bad-11eb-9f3b-611eebc6c3ad",
          "connector_type_id": ".index",
          "name": "my-connector",
          "config": {
            "index": "test-index",
            "refresh": false,
            "executionTimeField": null
          },
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false,
          "is_system_action": false
        }
      },
      "create_webhook_connector_response": {
        "summary": "A new webhook connector.",
        "value": {
          "id": "900eb010-3b9d-11ee-a642-8ffbb94e38bd",
          "name": "my-webhook-connector",
          "config": {
            "method": "post",
            "url": "https://example.com",
            "authType": "webhook-authentication-ssl",
            "certType": "ssl-crt-key",
            "verificationMode": "full",
            "headers": null,
            "hasAuth": true
          },
          "connector_type_id": ".webhook",
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false,
          "is_system_action": false
        }
      },
      "create_xmatters_connector_response": {
        "summary": "A new xMatters connector.",
        "value": {
          "id": "4d2d8da0-4d1f-11ee-9367-577408be4681",
          "name": "my-xmatters-connector",
          "config": {
            "usesBasic": false,
            "configUrl": null
          },
          "connector_type_id": ".xmatters",
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false,
          "is_system_action": false
        }
      },
      "get_connector_response": {
        "summary": "Get connector details.",
        "value": {
          "id": "df770e30-8b8b-11ed-a780-3b746c987a81",
          "name": "my_server_log_connector",
          "config": {},
          "connector_type_id": ".server-log",
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false,
          "is_system_action": false
        }
      },
      "update_index_connector_request": {
        "summary": "Update an index connector.",
        "value": {
          "name": "updated-connector",
          "config": {
            "index": "updated-index"
          }
        }
      },
      "run_cases_webhook_connector_request": {
        "summary": "Run a Webhook - Case Management connector to create a case.",
        "value": {
          "params": {
            "subAction": "pushToService",
            "subActionParams": {
              "comments": [
                {
                  "commentId": 1,
                  "comment": "A comment about the incident."
                }
              ],
              "incident": {
                "title": "Case title",
                "description": "Description of the incident.",
                "tags": [
                  "tag1",
                  "tag2"
                ],
                "severity": "low",
                "status": "open",
                "id": "caseID"
              }
            }
          }
        }
      },
      "run_email_connector_request": {
        "summary": "Send an email message from an email connector.",
        "value": {
          "params": {
            "bcc": [
              "user1@example.com"
            ],
            "cc": [
              "user2@example.com",
              "user3@example.com"
            ],
            "message": "Test email message.",
            "subject": "Test message subject",
            "to": [
              "user4@example.com"
            ]
          }
        }
      },
      "run_index_connector_request": {
        "summary": "Run an index connector.",
        "value": {
          "params": {
            "documents": [
              {
                "id": "my_doc_id",
                "name": "my_doc_name",
                "message": "hello, world"
              }
            ]
          }
        }
      },
      "run_jira_connector_request": {
        "summary": "Run a Jira connector to retrieve the list of issue types.",
        "value": {
          "params": {
            "subAction": "issueTypes"
          }
        }
      },
      "run_pagerduty_connector_request": {
        "summary": "Run a PagerDuty connector to trigger an alert.",
        "value": {
          "params": {
            "eventAction": "trigger",
            "summary": "A brief event summary",
            "links": [
              {
                "href": "http://example.com/pagerduty",
                "text": "An example link"
              }
            ],
            "customDetails": {
              "my_data_1": "test data"
            }
          }
        }
      },
      "run_server_log_connector_request": {
        "summary": "Run a server log connector.",
        "value": {
          "params": {
            "level": "warn",
            "message": "Test warning message."
          }
        }
      },
      "run_servicenow_itom_connector_request": {
        "summary": "Run a ServiceNow ITOM connector to retrieve the list of choices.",
        "value": {
          "params": {
            "subAction": "getChoices",
            "subActionParams": {
              "fields": [
                "severity",
                "urgency"
              ]
            }
          }
        }
      },
      "run_slack_api_connector_request": {
        "summary": "Run a Slack connector that uses the web API method to post a message on a channel.",
        "value": {
          "params": {
            "subAction": "postMessage",
            "subActionParams": {
              "channelIds": [
                "C123ABC456"
              ],
              "text": "A test message."
            }
          }
        }
      },
      "run_swimlane_connector_request": {
        "summary": "Run a Swimlane connector to create an incident.",
        "value": {
          "params": {
            "subAction": "pushToService",
            "subActionParams": {
              "comments": [
                {
                  "commentId": 1,
                  "comment": "A comment about the incident."
                }
              ],
              "incident": {
                "caseId": "1000",
                "caseName": "Case name",
                "description": "Description of the incident."
              }
            }
          }
        }
      },
      "run_cases_webhook_connector_response": {
        "summary": "Response from a pushToService action for a Webhook - Case Management connector.",
        "value": {
          "connector_id": "1824b5b8-c005-4dcc-adac-57f92db46459",
          "data": {
            "id": 100665,
            "title": "TEST-29034",
            "url": "https://example.com/browse/TEST-29034",
            "pushedDate": "2023-12-05T19:43:36.360Z",
            "comments": [
              {
                "commentId": 1,
                "pushedDate": "2023-12-05T19:43:36.360Z"
              }
            ]
          },
          "status": "ok"
        }
      },
      "run_email_connector_response": {
        "summary": "Response for sending a message from an email connector.",
        "value": {
          "connector_id": "7fc7b9a0-ecc9-11ec-8736-e7d63118c907",
          "data": {
            "accepted": [
              "user1@example.com",
              "user2@example.com",
              "user3@example.com",
              "user4@example.com"
            ],
            "envelope": {
              "from": "tester@example.com",
              "to": [
                "user1@example.com",
                "user2@example.com",
                "user3@example.com",
                "user4@example.com"
              ]
            },
            "envelopeTime": 8,
            "messageTime": 3,
            "messageSize": 729,
            "response": "250 Message queued as QzEXKcGJ",
            "messageId": "<08a92d29-642a-0706-750c-de5996bd5cf3@example.com>",
            "rejected": []
          },
          "status": "ok"
        }
      },
      "run_index_connector_response": {
        "summary": "Response from running an index connector.",
        "value": {
          "connector_id": "fd38c600-96a5-11ed-bb79-353b74189cba",
          "data": {
            "errors": false,
            "items": [
              {
                "create": {
                  "_id": "4JtvwYUBrcyxt2NnfW3y",
                  "_index": "my-index",
                  "_primary_term": 1,
                  "_seq_no": 0,
                  "_shards": {
                    "failed": 0,
                    "successful": 1,
                    "total": 2
                  },
                  "_version": 1,
                  "result": "created",
                  "status": 201
                }
              }
            ],
            "took": 135
          },
          "status": "ok"
        }
      },
      "run_jira_connector_response": {
        "summary": "Response from retrieving the list of issue types for a Jira connector.",
        "value": {
          "connector_id": "b3aad810-edbe-11ec-82d1-11348ecbf4a6",
          "data": [
            {
              "id": 10024,
              "name": "Improvement"
            },
            {
              "id": 10006,
              "name": "Task"
            },
            {
              "id": 10007,
              "name": "Sub-task"
            },
            {
              "id": 10025,
              "name": "New Feature"
            },
            {
              "id": 10023,
              "name": "Bug"
            },
            {
              "id": 10000,
              "name": "Epic"
            }
          ],
          "status": "ok"
        }
      },
      "run_pagerduty_connector_response": {
        "summary": "Response from running a PagerDuty connector.",
        "value": {
          "connector_id": "45de9f70-954f-4608-b12a-db7cf808e49d",
          "data": {
            "dedup_key": "5115e138b26b484a81eaea779faa6016",
            "message": "Event processed",
            "status": "success"
          },
          "status": "ok"
        }
      },
      "run_server_log_connector_response": {
        "summary": "Response from running a server log connector.",
        "value": {
          "connector_id": "7fc7b9a0-ecc9-11ec-8736-e7d63118c907",
          "status": "ok"
        }
      },
      "run_servicenow_itom_connector_response": {
        "summary": "Response from retrieving the list of choices for a ServiceNow ITOM connector.",
        "value": {
          "connector_id": "9d9be270-2fd2-11ed-b0e0-87533c532698",
          "data": [
            {
              "dependent_value": "",
              "element": "severity",
              "label": "Critical",
              "value": 1
            },
            {
              "dependent_value": "",
              "element": "severity",
              "label": "Major",
              "value": 2
            },
            {
              "dependent_value": "",
              "element": "severity",
              "label": "Minor",
              "value": 3
            },
            {
              "dependent_value": "",
              "element": "severity",
              "label": "Warning",
              "value": 4
            },
            {
              "dependent_value": "",
              "element": "severity",
              "label": "OK",
              "value": 5
            },
            {
              "dependent_value": "",
              "element": "severity",
              "label": "Clear",
              "value": 0
            },
            {
              "dependent_value": "",
              "element": "urgency",
              "label": "1 - High",
              "value": 1
            },
            {
              "dependent_value": "",
              "element": "urgency",
              "label": "2 - Medium",
              "value": 2
            },
            {
              "dependent_value": "",
              "element": "urgency",
              "label": "3 - Low",
              "value": 3
            }
          ],
          "status": "ok"
        }
      },
      "run_slack_api_connector_response": {
        "summary": "Response from posting a message with a Slack connector.",
        "value": {
          "status": "ok",
          "data": {
            "ok": true,
            "channel": "C123ABC456",
            "ts": "1234567890.123456",
            "message": {
              "bot_id": "B12BCDEFGHI",
              "type": "message",
              "text": "A test message",
              "user": "U12A345BC6D",
              "ts": "1234567890.123456",
              "app_id": "A01BC2D34EF",
              "blocks": [
                {
                  "type": "rich_text",
                  "block_id": "/NXe",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "text",
                          "text": "A test message."
                        }
                      ]
                    }
                  ]
                }
              ],
              "team": "T01ABCDE2F",
              "bot_profile": {
                "id": "B12BCDEFGHI",
                "app_id": "A01BC2D34EF",
                "name": "test",
                "icons": {
                  "image_36": "https://a.slack-edge.com/80588/img/plugins/app/bot_36.png"
                },
                "deleted": false,
                "updated": 1672169705,
                "team_id": "T01ABCDE2F"
              }
            }
          },
          "connector_id": ".slack_api"
        }
      },
      "run_swimlane_connector_response": {
        "summary": "Response from creating a Swimlane incident.",
        "value": {
          "connector_id": "a4746470-2f94-11ed-b0e0-87533c532698",
          "data": {
            "id": "aKPmBHWzmdRQtx6Mx",
            "title": "TEST-457",
            "url": "https://elastic.swimlane.url.us/record/aNcL2xniGHGpa2AHb/aKPmBHWzmdRQtx6Mx",
            "pushedDate": "2022-09-08T16:52:27.866Z",
            "comments": [
              {
                "commentId": 1,
                "pushedDate": "2022-09-08T16:52:27.865Z"
              }
            ]
          },
          "status": "ok"
        }
      },
      "get_connectors_response": {
        "summary": "A list of connectors",
        "value": [
          {
            "id": "preconfigured-email-connector",
            "name": "my-preconfigured-email-notification",
            "connector_type_id": ".email",
            "is_preconfigured": true,
            "is_deprecated": false,
            "referenced_by_count": 0,
            "is_system_action": false
          },
          {
            "id": "e07d0c80-8b8b-11ed-a780-3b746c987a81",
            "name": "my-index-connector",
            "config": {
              "index": "test-index",
              "refresh": false,
              "executionTimeField": null
            },
            "connector_type_id": ".index",
            "is_preconfigured": false,
            "is_deprecated": false,
            "referenced_by_count": 2,
            "is_missing_secrets": false,
            "is_system_action": false
          }
        ]
      },
      "get_connector_types_generativeai_response": {
        "summary": "A list of connector types for the `generativeAI` feature.",
        "value": [
          {
            "id": ".gen-ai",
            "name": "OpenAI",
            "enabled": true,
            "enabled_in_config": true,
            "enabled_in_license": true,
            "minimum_license_required": "enterprise",
            "supported_feature_ids": [
              "generativeAI"
            ],
            "is_system_action_type": false
          },
          {
            "id": ".bedrock",
            "name": "AWS Bedrock",
            "enabled": true,
            "enabled_in_config": true,
            "enabled_in_license": true,
            "minimum_license_required": "enterprise",
            "supported_feature_ids": [
              "generativeAI"
            ],
            "is_system_action_type": false
          }
        ]
      },
      "get_connector_types_response": {
        "summary": "A list of connector types",
        "value": [
          {
            "id": ".swimlane",
            "name": "Swimlane",
            "enabled": true,
            "enabled_in_config": true,
            "enabled_in_license": true,
            "minimum_license_required": "gold",
            "supported_feature_ids": [
              "alerting",
              "cases",
              "siem"
            ]
          },
          {
            "id": ".index",
            "name": "Index",
            "enabled": true,
            "enabled_in_config": true,
            "enabled_in_license": true,
            "minimum_license_required": "basic",
            "supported_feature_ids": [
              "alerting",
              "uptime",
              "siem"
            ]
          },
          {
            "id": ".server-log",
            "name": "Server log",
            "enabled": true,
            "enabled_in_config": true,
            "enabled_in_license": true,
            "minimum_license_required": "basic",
            "supported_feature_ids": [
              "alerting",
              "uptime"
            ]
          }
        ]
      }
    },
    "responses": {
      "401": {
        "description": "Authorization information is missing or invalid.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Unauthorized response",
              "properties": {
                "error": {
                  "type": "string",
                  "examples": [
                    "Unauthorized"
                  ],
                  "enum": [
                    "Unauthorized"
                  ]
                },
                "message": {
                  "type": "string"
                },
                "statusCode": {
                  "type": "integer",
                  "examples": [
                    401
                  ],
                  "enum": [
                    401
                  ]
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Object is not found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "title": "Not found response",
              "properties": {
                "error": {
                  "type": "string",
                  "examples": [
                    "Not Found"
                  ],
                  "enum": [
                    "Not Found"
                  ]
                },
                "message": {
                  "type": "string",
                  "examples": [
                    "Saved object [action/baf33fc0-920c-11ed-b36a-874bd1548a00] not found"
                  ]
                },
                "statusCode": {
                  "type": "integer",
                  "examples": [
                    404
                  ],
                  "enum": [
                    404
                  ]
                }
              }
            }
          }
        }
      },
      "200_actions": {
        "description": "Indicates a successful call.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/action_response_properties"
            }
          }
        }
      }
    }
  }
}