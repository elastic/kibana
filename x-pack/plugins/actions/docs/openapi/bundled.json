{
  "openapi": "3.0.1",
  "info": {
    "title": "Connectors",
    "description": "OpenAPI schema for Connectors endpoints",
    "version": "0.1",
    "contact": {
      "name": "Connectors Team"
    },
    "license": {
      "name": "Elastic License 2.0",
      "url": "https://www.elastic.co/licensing/elastic-license"
    }
  },
  "tags": [
    {
      "name": "connectors",
      "description": "Connector APIs enable you to create and manage connectors."
    }
  ],
  "servers": [
    {
      "url": "http://localhost:5601",
      "description": "local"
    }
  ],
  "paths": {
    "/s/{spaceId}/api/actions/connector": {
      "post": {
        "summary": "Creates a connector.",
        "operationId": "createConnector",
        "description": "You must have `all` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/create_connector_request_cases_webhook"
                  },
                  {
                    "$ref": "#/components/schemas/create_connector_request_index"
                  },
                  {
                    "$ref": "#/components/schemas/create_connector_request_jira"
                  },
                  {
                    "$ref": "#/components/schemas/create_connector_request_opsgenie"
                  },
                  {
                    "$ref": "#/components/schemas/create_connector_request_resilient"
                  },
                  {
                    "$ref": "#/components/schemas/create_connector_request_serverlog"
                  },
                  {
                    "$ref": "#/components/schemas/create_connector_request_servicenow"
                  },
                  {
                    "$ref": "#/components/schemas/create_connector_request_servicenow_itom"
                  },
                  {
                    "$ref": "#/components/schemas/create_connector_request_servicenow_sir"
                  },
                  {
                    "$ref": "#/components/schemas/create_connector_request_swimlane"
                  }
                ],
                "discriminator": {
                  "propertyName": "connector_type_id"
                },
                "additionalProperties": true
              },
              "examples": {
                "createIndexConnectorRequest": {
                  "$ref": "#/components/examples/create_index_connector_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "createIndexConnectorResponse": {
                    "$ref": "#/components/examples/create_index_connector_response"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://localhost:5601"
          }
        ]
      },
      "servers": [
        {
          "url": "https://localhost:5601"
        }
      ]
    },
    "/s/{spaceId}/api/actions/connector/{connectorId}": {
      "get": {
        "summary": "Retrieves a connector by ID.",
        "operationId": "getConnector",
        "description": "You must have `read` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/connector_id"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/connector_response_properties"
                },
                "examples": {
                  "getConnectorResponse": {
                    "$ref": "#/components/examples/get_connector_response"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://localhost:5601"
          }
        ]
      },
      "delete": {
        "summary": "Deletes a connector.",
        "operationId": "deleteConnector",
        "description": "You must have `all` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges. WARNING: When you delete a connector, it cannot be recovered.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kbn_xsrf"
          },
          {
            "$ref": "#/components/parameters/connector_id"
          },
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates a successful call."
          }
        },
        "servers": [
          {
            "url": "https://localhost:5601"
          }
        ]
      },
      "servers": [
        {
          "url": "https://localhost:5601"
        }
      ]
    },
    "/s/{spaceId}/api/actions/connectors": {
      "get": {
        "summary": "Retrieves all connectors.",
        "operationId": "getConnectors",
        "description": "You must have `read` privileges for the **Actions and Connectors** feature in the **Management** section of the Kibana feature privileges.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "connector_type_id",
                      "id",
                      "is_deprecated",
                      "is_preconfigured",
                      "name",
                      "referenced_by_count"
                    ],
                    "properties": {
                      "connector_type_id": {
                        "$ref": "#/components/schemas/connector_types"
                      },
                      "config": {
                        "type": "object",
                        "description": "The configuration for the connector. Configuration properties vary depending on the connector type.",
                        "additionalProperties": true,
                        "nullable": true
                      },
                      "id": {
                        "type": "string",
                        "description": "The identifier for the connector.",
                        "example": "b0766e10-d190-11ec-b04c-776c77d14fca"
                      },
                      "is_deprecated": {
                        "$ref": "#/components/schemas/is_deprecated"
                      },
                      "is_missing_secrets": {
                        "$ref": "#/components/schemas/is_missing_secrets"
                      },
                      "is_preconfigured": {
                        "$ref": "#/components/schemas/is_preconfigured"
                      },
                      "name": {
                        "type": "string",
                        "description": "The display name for the connector.",
                        "example": "my-connector"
                      },
                      "referenced_by_count": {
                        "type": "integer",
                        "description": "Indicates the number of saved objects that reference the connector. If `is_preconfigured` is true, this value is not calculated.",
                        "example": 2,
                        "default": 0
                      }
                    }
                  }
                },
                "examples": {
                  "getConnectorsResponse": {
                    "$ref": "#/components/examples/get_connectors_response"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://localhost:5601"
          }
        ]
      },
      "servers": [
        {
          "url": "https://localhost:5601"
        }
      ]
    },
    "/s/{spaceId}/api/actions/connector_types": {
      "get": {
        "summary": "Retrieves a list of all connector types.",
        "operationId": "getConnectorTypes",
        "description": "You do not need any Kibana feature privileges to run this API.\n",
        "tags": [
          "connectors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/space_id"
          },
          {
            "in": "query",
            "name": "feature_id",
            "description": "A filter to limit the retrieved connector types to those that support a specific feature (such as alerting or cases).",
            "schema": {
              "$ref": "#/components/schemas/features"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates a successful call.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether the connector type is enabled in Kibana.",
                        "example": true
                      },
                      "enabled_in_config": {
                        "type": "boolean",
                        "description": "Indicates whether the connector type is enabled in the Kibana `.yml` file.",
                        "example": true
                      },
                      "enabled_in_license": {
                        "type": "boolean",
                        "description": "Indicates whether the connector is enabled in the license.",
                        "example": true
                      },
                      "id": {
                        "$ref": "#/components/schemas/connector_types"
                      },
                      "minimum_license_required": {
                        "type": "string",
                        "description": "The license that is required to use the connector type.",
                        "example": "basic"
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the connector type.",
                        "example": "Index"
                      },
                      "supported_feature_ids": {
                        "type": "array",
                        "description": "The Kibana features that are supported by the connector type.",
                        "items": {
                          "$ref": "#/components/schemas/features"
                        },
                        "example": [
                          "alerting",
                          "uptime",
                          "siem"
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "getConnectorTypesResponse": {
                    "$ref": "#/components/examples/get_connector_types_response"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://localhost:5601"
          }
        ]
      },
      "servers": [
        {
          "url": "https://localhost:5601"
        }
      ]
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "ApiKey"
      }
    },
    "parameters": {
      "kbn_xsrf": {
        "schema": {
          "type": "string"
        },
        "in": "header",
        "name": "kbn-xsrf",
        "required": true
      },
      "space_id": {
        "in": "path",
        "name": "spaceId",
        "description": "An identifier for the space. If `/s/` and the identifier are omitted from the path, the default space is used.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "default"
        }
      },
      "connector_id": {
        "in": "path",
        "name": "connectorId",
        "description": "An identifier for the connector.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "df770e30-8b8b-11ed-a780-3b746c987a81"
        }
      }
    },
    "schemas": {
      "config_properties_cases_webhook": {
        "title": "Create connector request properties for Webhook - Case Management connector",
        "required": [
          "createIncidentJson",
          "createIncidentResponseKey",
          "createIncidentUrl",
          "getIncidentResponseExternalTitleKey",
          "getIncidentUrl",
          "updateIncidentJson",
          "updateIncidentUrl",
          "viewIncidentUrl"
        ],
        "description": "Defines properties for connectors when type is `.cases-webhook`.",
        "type": "object",
        "properties": {
          "createCommentJson": {
            "type": "string",
            "description": "A JSON payload sent to the create comment URL to create a case comment. You can use variables to add Kibana Cases data to the payload. The required variable is `case.comment`. Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated once the Mustache variables have been placed when the REST method runs. Manually ensure that the JSON is valid, disregarding the Mustache variables, so the later validation will pass.\n",
            "example": {
              "body": {
                "[object Object]": null
              }
            }
          },
          "createCommentMethod": {
            "type": "string",
            "description": "The REST API HTTP request method to create a case comment in the third-party system. Valid values are `patch`, `post`, and `put`.\n",
            "default": "put",
            "enum": [
              "patch",
              "post",
              "put"
            ]
          },
          "createCommentUrl": {
            "type": "string",
            "description": "The REST API URL to create a case comment by ID in the third-party system. You can use a variable to add the external system ID to the URL. If you are using the `xpack.actions.allowedHosts setting`, add the hostname to the allowed hosts.\n",
            "example": "https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}/comment"
          },
          "createIncidentJson": {
            "type": "string",
            "description": "A JSON payload sent to the create case URL to create a case. You can use variables to add case data to the payload. Required variables are `case.title` and `case.description`. Due to Mustache template variables (which is the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid to avoid future validation errors; disregard Mustache variables during your review.\n",
            "example": {
              "fields": {
                "summary": {
                  "[object Object]": null
                },
                "description": {
                  "[object Object]": null
                },
                "labels": {
                  "[object Object]": null
                }
              }
            }
          },
          "createIncidentMethod": {
            "type": "string",
            "description": "The REST API HTTP request method to create a case in the third-party system. Valid values are `patch`, `post`, and `put`.\n",
            "enum": [
              "patch",
              "post",
              "put"
            ],
            "default": "post"
          },
          "createIncidentResponseKey": {
            "type": "string",
            "description": "The JSON key in the create case response that contains the external case ID."
          },
          "createIncidentUrl": {
            "type": "string",
            "description": "The REST API URL to create a case in the third-party system. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n"
          },
          "getIncidentResponseExternalTitleKey": {
            "type": "string",
            "description": "The JSON key in get case response that contains the external case title."
          },
          "getIncidentUrl": {
            "type": "string",
            "description": "The REST API URL to get the case by ID from the third-party system. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts. You can use a variable to add the external system ID to the URL. Due to Mustache template variables (the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid, disregarding the Mustache variables, so the later validation will pass.\n",
            "example": "https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.id}}}"
          },
          "hasAuth": {
            "type": "boolean",
            "description": "If true, a username and password for login type authentication must be provided.",
            "default": true
          },
          "headers": {
            "type": "string",
            "description": "A set of key-value pairs sent as headers with the request URLs for the create case, update case, get case, and create comment methods.\n"
          },
          "updateIncidentJson": {
            "type": "string",
            "description": "The JSON payload sent to the update case URL to update the case. You can use variables to add Kibana Cases data to the payload. Required variables are `case.title` and `case.description`. Due to Mustache template variables (which is the text enclosed in triple braces, for example, `{{{case.title}}}`), the JSON is not validated when you create the connector. The JSON is validated after the Mustache variables have been placed when REST method runs. Manually ensure that the JSON is valid to avoid future validation errors; disregard Mustache variables during your review.\n",
            "example": {
              "fields": {
                "summary": {
                  "[object Object]": null
                },
                "description": {
                  "[object Object]": null
                },
                "labels": {
                  "[object Object]": null
                }
              }
            }
          },
          "updateIncidentMethod": {
            "type": "string",
            "description": "The REST API HTTP request method to update the case in the third-party system. Valid values are `patch`, `post`, and `put`.\n",
            "default": "put",
            "enum": [
              "patch",
              "post",
              "put"
            ]
          },
          "updateIncidentUrl": {
            "type": "string",
            "description": "The REST API URL to update the case by ID in the third-party system. You can use a variable to add the external system ID to the URL. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n",
            "example": "https://testing-jira.atlassian.net/rest/api/2/issue/{{{external.system.ID}}}"
          },
          "viewIncidentUrl": {
            "type": "string",
            "description": "The URL to view the case in the external system. You can use variables to add the external system ID or external system title to the URL.\n",
            "example": "https://testing-jira.atlassian.net/browse/{{{external.system.title}}}"
          }
        }
      },
      "secrets_properties_cases_webhook": {
        "title": "Connector secrets properties for Webhook - Case Management connector",
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "The password for HTTP basic authentication. If `hasAuth` is set to `true`, this property is required."
          },
          "user": {
            "type": "string",
            "description": "The username for HTTP basic authentication. If `hasAuth` is set to `true`, this property is required."
          }
        }
      },
      "create_connector_request_cases_webhook": {
        "title": "Create Webhook - Case Managment connector request",
        "description": "The Webhook - Case Management connector uses axios to send POST, PUT, and GET requests to a case management RESTful API web service.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_cases_webhook"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".cases-webhook"
            ],
            "example": ".cases-webhook"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_cases_webhook"
          }
        }
      },
      "config_properties_index": {
        "title": "Create connector request properties for an index connector",
        "required": [
          "index"
        ],
        "description": "Defines properties for connectors when type is `.index`.",
        "type": "object",
        "properties": {
          "executionTimeField": {
            "description": "Specifies a field that will contain the time the alert condition was detected.",
            "default": null,
            "type": "string",
            "nullable": true
          },
          "index": {
            "description": "The Elasticsearch index to be written to.",
            "type": "string"
          },
          "refresh": {
            "description": "The refresh policy for the write request, which affects when changes are made visible to search. Refer to the refresh setting for Elasticsearch document APIs.\n",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "create_connector_request_index": {
        "title": "Create index connector request",
        "description": "The index connector indexes a document into Elasticsearch.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_index"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".index"
            ],
            "example": ".index"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          }
        }
      },
      "config_properties_jira": {
        "title": "Create connector request properties for a Jira connector",
        "required": [
          "apiUrl",
          "projectKey"
        ],
        "description": "Defines properties for connectors when type is `.jira`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The Jira instance URL.",
            "type": "string"
          },
          "projectKey": {
            "description": "The Jira project key.",
            "type": "string"
          }
        }
      },
      "secrets_properties_jira": {
        "title": "Connector secrets properties for a Jira connector",
        "required": [
          "apiToken",
          "email"
        ],
        "description": "Defines secrets for connectors when type is `.jira`.",
        "type": "object",
        "properties": {
          "apiToken": {
            "description": "The Jira API authentication token for HTTP basic authentication.",
            "type": "string"
          },
          "email": {
            "description": "The account email for HTTP Basic authentication.",
            "type": "string"
          }
        }
      },
      "create_connector_request_jira": {
        "title": "Create Jira connector request",
        "description": "The Jira connector uses the REST API v2 to create Jira issues.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_jira"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".jira"
            ],
            "example": ".jira"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_jira"
          }
        }
      },
      "config_properties_opsgenie": {
        "title": "Create connector request properties for an Opsgenie connector",
        "required": [
          "apiUrl"
        ],
        "description": "Defines properties for connectors when type is `.opsgenie`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The Opsgenie URL. For example, `https://api.opsgenie.com` or `https://api.eu.opsgenie.com`. If you are using the `xpack.actions.allowedHosts` setting, add the hostname to the allowed hosts.\n",
            "type": "string"
          }
        }
      },
      "secrets_properties_opsgenie": {
        "title": "Connector secrets properties for an Opsgenie connector",
        "required": [
          "apiKey"
        ],
        "description": "Defines secrets for connectors when type is `.opsgenie`.",
        "type": "object",
        "properties": {
          "apiKey": {
            "description": "The Opsgenie API authentication key for HTTP Basic authentication.",
            "type": "string"
          }
        }
      },
      "create_connector_request_opsgenie": {
        "title": "Create Opsgenie connector request",
        "description": "The Opsgenie connector uses the Opsgenie alert API.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_opsgenie"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".opsgenie"
            ],
            "example": ".opsgenie"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_opsgenie"
          }
        }
      },
      "config_properties_resilient": {
        "title": "Create connector request properties for a IBM Resilient connector",
        "required": [
          "apiUrl",
          "orgId"
        ],
        "description": "Defines properties for connectors when type is `.resilient`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The IBM Resilient instance URL.",
            "type": "string"
          },
          "orgId": {
            "description": "The IBM Resilient organization ID.",
            "type": "string"
          }
        }
      },
      "secrets_properties_resilient": {
        "title": "Connector secrets properties for IBM Resilient connector",
        "required": [
          "apiKeyId",
          "apiKeySecret"
        ],
        "description": "Defines secrets for connectors when type is `.resilient`.",
        "type": "object",
        "properties": {
          "apiKeyId": {
            "type": "string",
            "description": "The authentication key ID for HTTP Basic authentication."
          },
          "apiKeySecret": {
            "type": "string",
            "description": "The authentication key secret for HTTP Basic authentication."
          }
        }
      },
      "create_connector_request_resilient": {
        "title": "Create IBM Resilient connector request",
        "description": "The IBM Resilient connector uses the RESILIENT REST v2 to create IBM Resilient incidents.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_resilient"
          },
          "connector_type_id": {
            "description": "The type of connector.",
            "type": "string",
            "example": ".resilient",
            "enum": [
              ".resilient"
            ]
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_resilient"
          }
        }
      },
      "create_connector_request_serverlog": {
        "title": "Create server log connector request",
        "description": "This connector writes an entry to the Kibana server log.",
        "type": "object",
        "required": [
          "connector_type_id",
          "name"
        ],
        "properties": {
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".server-log"
            ],
            "example": ".server-log"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          }
        }
      },
      "config_properties_servicenow": {
        "title": "Create case request properties for a ServiceNow ITSM connector",
        "required": [
          "apiUrl"
        ],
        "description": "Defines properties for connectors when type is `.servicenow`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "type": "string",
            "description": "The ServiceNow instance URL."
          },
          "clientId": {
            "description": "The client ID assigned to your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "isOAuth": {
            "description": "The type of authentication to use. The default value is false, which means basic authentication is used instead of open authorization (OAuth).\n",
            "default": false,
            "type": "string"
          },
          "jwtKeyId": {
            "description": "The key identifier assigned to the JWT verifier map of your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "userIdentifierValue": {
            "description": "The identifier to use for OAuth authentication. This identifier should be the user field you selected when you created an OAuth JWT API endpoint for external clients in your ServiceNow instance. For example, if the selected user field is `Email`, the user identifier should be the user's email address. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "usesTableApi": {
            "description": "Determines whether the connector uses the Table API or the Import Set API. This property is supported only for ServiceNow ITSM and ServiceNow SecOps connectors.  NOTE: If this property is set to `false`, the Elastic application should be installed in ServiceNow.\n",
            "default": true,
            "type": "boolean"
          }
        }
      },
      "secrets_properties_servicenow": {
        "title": "Connector secrets properties for ServiceNow ITOM, ServiceNow ITSM, and ServiceNow SecOps connectors",
        "description": "Defines secrets for connectors when type is `.servicenow`, `.servicenow-sir`, or `.servicenow-itom`.",
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "The client secret assigned to your OAuth application. This property is required when `isOAuth` is `true`."
          },
          "password": {
            "type": "string",
            "description": "The password for HTTP basic authentication. This property is required when `isOAuth` is `false`."
          },
          "privateKey": {
            "type": "string",
            "description": "The RSA private key that you created for use in ServiceNow. This property is required when `isOAuth` is `true`."
          },
          "privateKeyPassword": {
            "type": "string",
            "description": "The password for the RSA private key. This property is required when `isOAuth` is `true` and you set a password on your private key."
          },
          "username": {
            "type": "string",
            "description": "The username for HTTP basic authentication. This property is required when `isOAuth` is `false`."
          }
        }
      },
      "create_connector_request_servicenow": {
        "title": "Create ServiceNow ITSM connector request",
        "description": "The ServiceNow ITSM connector uses the import set API to create ServiceNow incidents. You can use the connector for rule actions and cases.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow"
            ],
            "example": ".servicenow"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "config_properties_servicenow_itom": {
        "title": "Create case request properties for a ServiceNow ITSM connector",
        "required": [
          "apiUrl"
        ],
        "description": "Defines properties for connectors when type is `.servicenow`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "type": "string",
            "description": "The ServiceNow instance URL."
          },
          "clientId": {
            "description": "The client ID assigned to your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "isOAuth": {
            "description": "The type of authentication to use. The default value is false, which means basic authentication is used instead of open authorization (OAuth).\n",
            "default": false,
            "type": "string"
          },
          "jwtKeyId": {
            "description": "The key identifier assigned to the JWT verifier map of your OAuth application. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          },
          "userIdentifierValue": {
            "description": "The identifier to use for OAuth authentication. This identifier should be the user field you selected when you created an OAuth JWT API endpoint for external clients in your ServiceNow instance. For example, if the selected user field is `Email`, the user identifier should be the user's email address. This property is required when `isOAuth` is `true`.\n",
            "type": "string"
          }
        }
      },
      "create_connector_request_servicenow_itom": {
        "title": "Create ServiceNow ITOM connector request",
        "description": "The ServiceNow ITOM connector uses the event API to create ServiceNow events. You can use the connector for rule actions.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow_itom"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-itom"
            ],
            "example": ".servicenow-itom"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "create_connector_request_servicenow_sir": {
        "title": "Create ServiceNow SecOps connector request",
        "description": "The ServiceNow SecOps connector uses the import set API to create ServiceNow security incidents. You can use the connector for rule actions and cases.\n",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-sir"
            ],
            "example": ".servicenow-sir"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_servicenow"
          }
        }
      },
      "config_properties_swimlane": {
        "title": "Create connector request properties for a Swimlane connector",
        "required": [
          "apiUrl",
          "appId",
          "connectorType"
        ],
        "description": "Defines properties for connectors when type is `.swimlane`.",
        "type": "object",
        "properties": {
          "apiUrl": {
            "description": "The Swimlane instance URL.",
            "type": "string"
          },
          "appId": {
            "description": "The Swimlane application ID.",
            "type": "string"
          },
          "connectorType": {
            "description": "The type of connector. Valid values are `all`, `alerts`, and `cases`.",
            "type": "string",
            "enum": [
              "all",
              "alerts",
              "cases"
            ]
          },
          "mappings": {
            "description": "The field mapping.",
            "type": "object",
            "properties": {
              "alertIdConfig": {
                "description": "Mapping for the alert ID.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "caseIdConfig": {
                "description": "Mapping for the case ID.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "caseNameConfig": {
                "description": "Mapping for the case name.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "commentsConfig": {
                "description": "Mapping for the case comments.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "descriptionConfig": {
                "description": "Mapping for the case description.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "ruleNameConfig": {
                "description": "Mapping for the name of the alert's rule.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              },
              "severityConfig": {
                "description": "Mapping for the severity.",
                "type": "object",
                "required": [
                  "fieldType",
                  "id",
                  "key",
                  "name"
                ],
                "properties": {
                  "fieldType": {
                    "type": "string",
                    "description": "The type of field in Swimlane."
                  },
                  "id": {
                    "type": "string",
                    "description": "The identifier for the field in Swimlane."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key for the field in Swimlane."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the field in Swimlane."
                  }
                }
              }
            }
          }
        }
      },
      "secrets_properties_swimlane": {
        "title": "Connector secrets properties for a Swimlane connector",
        "description": "Defines secrets for connectors when type is `.swimlane`.",
        "type": "object",
        "properties": {
          "apiToken": {
            "description": "Swimlane API authentication token.",
            "type": "string"
          }
        }
      },
      "create_connector_request_swimlane": {
        "title": "Create Swimlane connector request",
        "description": "The Swimlane connector uses the Swimlane REST API to create Swimlane records.",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "name",
          "secrets"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_swimlane"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".swimlane"
            ],
            "example": ".swimlane"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector.",
            "example": "my-connector"
          },
          "secrets": {
            "$ref": "#/components/schemas/secrets_properties_swimlane"
          }
        }
      },
      "is_deprecated": {
        "type": "boolean",
        "description": "Indicates whether the connector type is deprecated.",
        "example": false
      },
      "is_missing_secrets": {
        "type": "boolean",
        "description": "Indicates whether secrets are missing for the connector. Secrets configuration properties vary depending on the connector type.",
        "example": false
      },
      "is_preconfigured": {
        "type": "boolean",
        "description": "Indicates whether it is a preconfigured connector. If true, the `config` and `is_missing_secrets` properties are omitted from the response.",
        "example": false
      },
      "connector_response_properties_cases_webhook": {
        "title": "Connector request properties for a Webhook - Case Management connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_cases_webhook"
          },
          "connector_type_id": {
            "description": "The type of connector.",
            "type": "string",
            "enum": [
              ".cases-webhook"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties_index": {
        "title": "Connector response properties for an index connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_index"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".index"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties_jira": {
        "title": "Connector response properties for a Jira connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_jira"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".jira"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties_opsgenie": {
        "title": "Connector response properties for an Opsgenie connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_opsgenie"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".opsgenie"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties_resilient": {
        "title": "Connector response properties for a IBM Resilient connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_resilient"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".resilient"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties_serverlog": {
        "title": "Connector response properties for a server log connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "type": "object",
            "nullable": true
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".server-log"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties_servicenow": {
        "title": "Connector response properties for a ServiceNow ITSM connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties_servicenow_itom": {
        "title": "Connector response properties for a ServiceNow ITOM connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow_itom"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-itom"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties_servicenow_sir": {
        "title": "Connector response properties for a ServiceNow SecOps connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_servicenow"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".servicenow-sir"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties_swimlane": {
        "title": "Connector response properties for a Swimlane connector",
        "type": "object",
        "required": [
          "config",
          "connector_type_id",
          "id",
          "is_deprecated",
          "is_preconfigured",
          "name"
        ],
        "properties": {
          "config": {
            "$ref": "#/components/schemas/config_properties_swimlane"
          },
          "connector_type_id": {
            "type": "string",
            "description": "The type of connector.",
            "enum": [
              ".swimlane"
            ]
          },
          "id": {
            "type": "string",
            "description": "The identifier for the connector."
          },
          "is_deprecated": {
            "$ref": "#/components/schemas/is_deprecated"
          },
          "is_missing_secrets": {
            "$ref": "#/components/schemas/is_missing_secrets"
          },
          "is_preconfigured": {
            "$ref": "#/components/schemas/is_preconfigured"
          },
          "name": {
            "type": "string",
            "description": "The display name for the connector."
          }
        }
      },
      "connector_response_properties": {
        "title": "Connector response properties",
        "oneOf": [
          {
            "$ref": "#/components/schemas/connector_response_properties_cases_webhook"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_index"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_jira"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_opsgenie"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_resilient"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_serverlog"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_servicenow"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_servicenow_itom"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_servicenow_sir"
          },
          {
            "$ref": "#/components/schemas/connector_response_properties_swimlane"
          }
        ],
        "discriminator": {
          "propertyName": "connector_type_id"
        }
      },
      "connector_types": {
        "type": "string",
        "description": "The type of connector. For example, `.email`, `.index`, `.jira`, `.opsgenie`, or `.server-log`.",
        "enum": [
          ".cases-webhook",
          ".email",
          ".index",
          ".jira",
          ".opsgenie",
          ".pagerduty",
          ".resilient",
          ".servicenow",
          ".servicenow-itom",
          ".servicenow-sir",
          ".server-log",
          ".slack",
          ".swimlane",
          ".teams",
          ".tines",
          ".webhook",
          ".xmatters"
        ],
        "example": ".server-log"
      },
      "features": {
        "type": "string",
        "description": "The feature that uses the connector. Valid values are `alerting`, `cases`, `uptime`, and `siem`.\n",
        "enum": [
          "alerting",
          "cases",
          "uptime",
          "siem"
        ]
      }
    },
    "examples": {
      "create_index_connector_request": {
        "summary": "Create an index connector.",
        "value": {
          "name": "my-connector",
          "connector_type_id": ".index",
          "config": {
            "index": "test-index"
          }
        }
      },
      "create_index_connector_response": {
        "summary": "A new index connector.",
        "value": {
          "id": "c55b6eb0-6bad-11eb-9f3b-611eebc6c3ad",
          "connector_type_id": ".index",
          "name": "my-connector",
          "config": {
            "index": "test-index",
            "refresh": false,
            "executionTimeField": null
          },
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false
        }
      },
      "get_connector_response": {
        "summary": "A list of connector types",
        "value": {
          "id": "df770e30-8b8b-11ed-a780-3b746c987a81",
          "name": "my_server_log_connector",
          "config": {},
          "connector_type_id": ".server-log",
          "is_preconfigured": false,
          "is_deprecated": false,
          "is_missing_secrets": false
        }
      },
      "get_connectors_response": {
        "summary": "A list of connectors",
        "value": [
          {
            "id": "preconfigured-email-connector",
            "name": "my-preconfigured-email-notification",
            "connector_type_id": ".email",
            "is_preconfigured": true,
            "is_deprecated": false,
            "referenced_by_count": 0
          },
          {
            "id": "e07d0c80-8b8b-11ed-a780-3b746c987a81",
            "name": "my-index-connector",
            "config": {
              "index": "test-index",
              "refresh": false,
              "executionTimeField": null
            },
            "connector_type_id": ".index",
            "is_preconfigured": false,
            "is_deprecated": false,
            "referenced_by_count": 2,
            "is_missing_secrets": false
          }
        ]
      },
      "get_connector_types_response": {
        "summary": "A list of connector types",
        "value": [
          {
            "id": ".swimlane",
            "name": "Swimlane",
            "enabled": true,
            "enabled_in_config": true,
            "enabled_in_license": true,
            "minimum_license_required": "gold",
            "supported_feature_ids": [
              "alerting",
              "cases",
              "siem"
            ]
          },
          {
            "id": ".index",
            "name": "Index",
            "enabled": true,
            "enabled_in_config": true,
            "enabled_in_license": true,
            "minimum_license_required": "basic",
            "supported_feature_ids": [
              "alerting",
              "uptime",
              "siem"
            ]
          },
          {
            "id": ".server-log",
            "name": "Server log",
            "enabled": true,
            "enabled_in_config": true,
            "enabled_in_license": true,
            "minimum_license_required": "basic",
            "supported_feature_ids": [
              "alerting",
              "uptime"
            ]
          }
        ]
      }
    }
  },
  "security": [
    {
      "basicAuth": []
    },
    {
      "apiKeyAuth": []
    }
  ]
}