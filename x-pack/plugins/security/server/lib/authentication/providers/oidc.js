/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import Boom from 'boom';
import { canRedirectRequest } from '../../can_redirect_request';
import { AuthenticationResult } from '../authentication_result';
import { DeauthenticationResult } from '../deauthentication_result';

/**
 * Object that represents available provider options.
 * @typedef {{
 *  realm: string,
 *  basePath: string,
 *  client: Client,
 *  log: Function
 * }} ProviderOptions
 */

/**
 * Object that represents return value of internal header auth
 * @typedef {{
 *  authenticationResult: AuthenticationResult,
 *  headerNotRecognized?: boolean
 * }} HeaderAuthAttempt
 */

/**
 * Checks the error returned by Elasticsearch as the result of `authenticate` call and returns `true` if request
 * has been rejected because of expired token, otherwise returns `false`.
 * @param {Object} err Error returned from Elasticsearch.
 * @returns {boolean}
 */
function isAccessTokenExpiredError(err) {
  return err.body
    && err.body.error
    && err.body.error.reason === 'token expired';
}

/**
 * Checks the error returned by Elasticsearch as the result of `getAccessToken` call and returns `true` if
 * request has been rejected because of invalid refresh token (expired after 24 hours or have been used already),
 * otherwise returns `false`.
 * @param {Object} err Error returned from Elasticsearch.
 * @returns {boolean}
 */
function isInvalidRefreshTokenError(err) {
  return err.body
    && (err.body.error_description === 'token has already been refreshed'
      || err.body.error_description === 'refresh token is expired');
}

/**
 * Provider that supports authentication using an OpenID Connect realm in Elasticsearch.
 */
export class OpenIdConnectAuthenticationProvider {
  /**
   * Server options that may be needed by authentication provider.
   * @type {?ProviderOptions}
   * @protected
   */
  _options = null;

  /**
   * Instantiates OpenIdConnectAuthenticationProvider.
   * @param {ProviderOptions} options Provider options object.
   */
  constructor(options) {
    this._options = options;
  }

  /**
   * Performs OpenID Connect request authentication.
   * @param {Hapi.Request} request HapiJS request instance.
   * @param {Object} [state] Optional state object associated with the provider.
   * @returns {Promise.<AuthenticationResult>}
   */
  async authenticate(request, state) {
    this._options.log(['debug', 'security', 'oidc'], `Trying to authenticate user request to ${request.url.path}.`);

    let {
      authenticationResult,
      headerNotRecognized, // eslint-disable-line prefer-const
    } = await this._authenticateViaHeader(request);
    if (headerNotRecognized) {
      return authenticationResult;
    }

    if (state && authenticationResult.notHandled()) {
      authenticationResult = await this._authenticateViaState(request, state);
      if (authenticationResult.failed() && isAccessTokenExpiredError(authenticationResult.error)) {
        authenticationResult = await this._authenticateViaRefreshToken(request, state);
      }
    }

    if (authenticationResult.notHandled()) {
      // This might be the OpenID Connect Provider redirecting the user to `redirect_uri` after authentication or
      // a third party initiating an authentication
      authenticationResult = await this._authenticateViaResponseUrl(request, state);
    }

    // If we couldn't authenticate by means of all methods above, let's try to
    // initiate an OpenID Connect based authentication, otherwise just return the authentication result we have.
    // We might already have a state and nonce generated by Elasticsearch (from an unfinished authentication in
    // another tab)
    const params = this._addStateNonceFromSession({ realm: this._getRealmName() }, state);
    return authenticationResult.notHandled()
      ? await this._initiateOpenIdConnectAuthentication(request, params)
      : authenticationResult;
  }

  /**
   * Attempts to handle a request that might be a third party initiated OpenID connect authentication attempt or the
   * OpenID Connect Provider redirecting back the UA after an authentication success/failure. In the former case which
   * is signified by the existence of an iss parameter (either in the query of a GET request or the body of a POST
   * request) it attempts to start the authentication flow by calling _initiateOpenIdConnectAuthentication.
   *
   * In the latter case, it attempts to exchange the authentication response to an Elasticsearch access token, passing
   * along to Elasticsearch the state and nonce parameters from the user's session.
   *
   * When login succeeds the Elasticsearch access token and refresh token are stored in the state and user is redirected
   * to the URL that was requested before authentication flow started or to default Kibana location in case of a third
   * party initiated login
   * @param {Hapi.Request} request HapiJS request instance.
   * @param {Object} [sessionState] Optional state object associated with the provider.
   * @returns {Promise.<AuthenticationResult>}
   * @private
   */
  async _authenticateViaResponseUrl(request, sessionState) {
    this._options.log(['debug', 'security', 'oidc'], 'Trying to authenticate via OpenId Connect response query.');
    // First check to see if this is a Third Party initiated authentication (which can happen via POST or GET)
    let iss = null;
    if (request.query) {
      iss = request.query.iss;
    } else if (request.payload) {
      iss = request.payload.iss;
    }
    if (iss) {
      this._options.log(['debug', 'security', 'oidc'], 'Authentication has been initiated by a Third Party.');
      // We might already have a state and nonce generated by Elasticsearch (from an unfinished authentication in
      // another tab)
      const params = this._addStateNonceFromSession({ iss: iss }, sessionState);
      return this._initiateOpenIdConnectAuthentication(request, params);
    }

    if (!request.query || !request.query.code) {
      this._options.log(['debug', 'security', 'oidc'], 'OpenID Connect Authentication response is not found.');
      return AuthenticationResult.notHandled();
    }

    // If it is an authentication response and the users' session state doesn't contain all the necessary information,
    // then something unexpected happened and we should fail because Elasticsearch won't be able to validate the
    // response.
    const { nonce: stateNonce, state: stateOidcState, nextURL: stateRedirectURL } = sessionState || {};
    if (!sessionState || (!stateNonce || !stateOidcState || !stateRedirectURL)) {
      const message = 'Response session state does not have corresponding state or nonce parameters or redirect URL.';
      this._options.log(['debug', 'security', 'oidc'], message);

      return AuthenticationResult.failed(Boom.badRequest(message));
    }

    // We have all the necessary parameters, so attempt to complete the OpenID Connect Authentication
    try {
      // This operation should be performed on behalf of the user with a privilege that normal
      // user usually doesn't have `cluster:admin/xpack/security/oidc/authenticate`.
      const {
        access_token: accessToken,
        refresh_token: refreshToken
      } = await this._options.client.callWithInternalUser(
        'shield.oidcAuthenticate',
        // pass the path only as we can't be sure of the full URL and Elasticsearch doesn't need it anyway
        { body: { state: stateOidcState, nonce: stateNonce, redirect_uri: request.url.path } }
      );

      this._options.log(['debug', 'security', 'oidc'], 'Request has been authenticated via OpenID Connect.');

      return AuthenticationResult.redirectTo(
        stateRedirectURL || `${this._options.basePath}/`,
        { accessToken, refreshToken }
      );
    } catch (err) {
      this._options.log(
        ['debug', 'security', 'oidc'],
        `Failed to authenticate request via OpenIdConnect: ${err.message}`
      );
      return AuthenticationResult.failed(err);
    }
  }

  /**
   * Initiates an authentication attempt by either providing the realm name or the issuer to Elasticsearch
   *
   * @param {Hapi.Request} request HapiJS request instance.
   * @param params
   * @returns {Promise.<AuthenticationResult>}
   * @private
   */
  async _initiateOpenIdConnectAuthentication(request, params) {
    this._options.log(['debug', 'security', 'oidc'], 'Trying to initiate OpenID Connect authentication.');

    // If client can't handle redirect response, we shouldn't initiate OpenID Connect authentication.
    if (!canRedirectRequest(request)) {
      this._options.log(['debug', 'security', 'oidc'],
        'OpenID Connect authentication can not be initiated by AJAX requests.');
      return AuthenticationResult.notHandled();
    }

    try {
      // This operation should be performed on behalf of the user with a privilege that normal
      // user usually doesn't have `cluster:admin/xpack/security/oidc/prepare`.
      const { state, nonce, redirect } = await this._options.client.callWithInternalUser(
        'shield.oidcPrepare',
        { body: params }
      );

      this._options.log(['debug', 'security', 'oidc'],
        'Redirecting to OpenID Connect Provider with authentication request.');
      // If this is a third party initiated login, redirect to /
      const redirectAfterLogin = params.iss ? `${request.getBasePath()}` : `${request.getBasePath()}${request.url.path}`;

      return AuthenticationResult.redirectTo(
        redirect,
        // Store the state and nonce parameters in the session state of the user
        { state, nonce, nextURL: redirectAfterLogin }
      );
    } catch (err) {
      this._options.log(['debug', 'security', 'oidc'],
        `Failed to initiate OpenID Connect authentication: ${err.message}`);
      return AuthenticationResult.failed(err);
    }
  }


  /**
   * Validates whether request contains `Bearer ***` Authorization header and just passes it
   * forward to Elasticsearch backend.
   * @param {Hapi.Request} request HapiJS request instance.
   * @returns {Promise.<HeaderAuthAttempt>}
   * @private
   */
  async _authenticateViaHeader(request) {
    this._options.log(['debug', 'security', 'oidc'], 'Trying to authenticate via header.');

    const authorization = request.headers.authorization;
    if (!authorization) {
      this._options.log(['debug', 'security', 'oidc'], 'Authorization header is not presented.');
      return {
        authenticationResult: AuthenticationResult.notHandled()
      };
    }

    const authenticationSchema = authorization.split(/\s+/)[0];
    if (authenticationSchema.toLowerCase() !== 'bearer') {
      this._options.log(['debug', 'security', 'oidc'], `Unsupported authentication schema: ${authenticationSchema}`);
      return {
        authenticationResult: AuthenticationResult.notHandled(),
        headerNotRecognized: true
      };
    }

    try {
      const user = await this._options.client.callWithRequest(
        request,
        'shield.authenticate'
      );

      this._options.log(['debug', 'security', 'oidc'], 'Request has been authenticated via header.');

      return {
        authenticationResult: AuthenticationResult.succeeded(user)
      };
    } catch (err) {
      this._options.log(['debug', 'security', 'oidc'], `Failed to authenticate request via header: ${err.message}`);
      return {
        authenticationResult: AuthenticationResult.failed(err)
      };
    }
  }

  /**
   * Tries to extract an Elasticsearch access token from state and adds it to the request before it's
   * forwarded to Elasticsearch backend.
   * @param {Hapi.Request} request HapiJS request instance.
   * @param {Object} state State value previously stored by the provider.
   * @returns {Promise.<AuthenticationResult>}
   * @private
   */
  async _authenticateViaState(request, { accessToken }) {
    this._options.log(['debug', 'security', 'oidc'], 'Trying to authenticate via state.');

    if (!accessToken) {
      this._options.log(['debug', 'security', 'oidc'], 'Elasticsearch access token is not found in state.');
      return AuthenticationResult.notHandled();
    }

    request.headers.authorization = `Bearer ${accessToken}`;

    try {
      const user = await this._options.client.callWithRequest(
        request,
        'shield.authenticate'
      );

      this._options.log(['debug', 'security', 'oidc'], 'Request has been authenticated via state.');

      return AuthenticationResult.succeeded(user);
    } catch (err) {
      this._options.log(['debug', 'security', 'oidc'], `Failed to authenticate request via state: ${err.message}`);

      // Reset `Authorization` header we've just set. We know for sure that it hasn't been defined before,
      // otherwise it would have been used or completely rejected by the `authenticateViaHeader`.
      // We can't just set `authorization` to `undefined` or `null`, we should remove this property
      // entirely, otherwise `authorization` header without value will cause `callWithRequest` to fail if
      // it's called with this request once again down the line (e.g. in the next authentication provider).
      delete request.headers.authorization;

      return AuthenticationResult.failed(err);
    }
  }

  /**
   * This method is only called when authentication via access token stored in the state failed because of expired
   * token. So we should use refresh token, that is also stored in the state, to extend expired access token and
   * authenticate user with it.
   * @param {Hapi.Request} request HapiJS request instance.
   * @param {Object} state State value previously stored by the provider.
   * @returns {Promise.<AuthenticationResult>}
   * @private
   */
  async _authenticateViaRefreshToken(request, { refreshToken }) {
    this._options.log(['debug', 'security', 'oidc'], 'Trying to refresh elasticsearch access token.');

    if (!refreshToken) {
      this._options.log(['debug', 'security', 'oidc'], 'Refresh token is not found in state.');
      return AuthenticationResult.notHandled();
    }
    try {
      // Token should be refreshed by the same user that obtained that token.
      const {
        access_token: newAccessToken,
        refresh_token: newRefreshToken
      } = await this._options.client.callWithInternalUser(
        'shield.getAccessToken',
        { body: { grant_type: 'refresh_token', refresh_token: refreshToken } }
      );

      this._options.log(['debug', 'security', 'oidc'], 'Elasticsearch access token has been successfully refreshed.');

      request.headers.authorization = `Bearer ${newAccessToken}`;

      const user = await this._options.client.callWithRequest(request, 'shield.authenticate');

      this._options.log(['debug', 'security', 'oidc'], 'Request has been authenticated via refreshed token.');

      return AuthenticationResult.succeeded(
        user,
        { accessToken: newAccessToken, refreshToken: newRefreshToken }
      );
    } catch (err) {
      this._options.log(['debug', 'security', 'oidc'], `Failed to refresh elasticsearch access token: ${err.message}`);

      // Reset `Authorization` header we've just set. We know for sure that it hasn't been defined before,
      // otherwise it would have been used or completely rejected by the `authenticateViaHeader`.
      // We can't just set `authorization` to `undefined` or `null`, we should remove this property
      // entirely, otherwise `authorization` header without value will cause `callWithRequest` to fail if
      // it's called with this request once again down the line (e.g. in the next authentication provider).
      delete request.headers.authorization;

      // There are at least two common cases when refresh token request can fail:
      // 1. Refresh token is valid only for 24 hours and if it hasn't been used it expires.
      //
      // 2. Refresh token is one-time use token and if it has been used already, it is treated in the same way as
      // expired token. Even though it's an edge case, there are several perfectly valid scenarios when it can
      // happen. E.g. when several simultaneous AJAX request has been sent to Kibana, but Elasticsearch access token has
      // expired already, so the first request that reaches Kibana uses refresh token to get a new elasticsearch access
      // token, but the second concurrent request has no idea about that and tries to refresh access token as well. All
      // ends well when first request refreshes access token and updates session cookie with fresh access/refresh token
      // pair. But if user navigates to another page _before_ AJAX request (the one that triggered token refresh)
      // responds with updated cookie, then user will have only that old cookie with expired access token and refresh
      // token that has been used already.
      //
      // When user has neither valid access nor refresh token, the only way to resolve this issue is to re-initiate the
      // OpenID Connect authentication by requesting a new authentication request to send to the OpenID Connect Provider
      // and exchange it's forthcoming response for a new Elasticsearch access/refresh token pair. In case this is an
      // AJAX request, we just reply with `400` and clear error message.
      // There are two reasons for `400` and not `401`: Elasticsearch search responds with `400` so it seems logical
      // to do the same on Kibana side and `401` would force user to logout and do full SLO if it's supported.
      if (isInvalidRefreshTokenError(err)) {
        if (canRedirectRequest(request)) {
          this._options.log(
            ['debug', 'security', 'oidc'],
            'Both access and refresh tokens are expired. Re-initiating OpenID Connect authentication.'
          );
          return this._initiateOpenIdConnectAuthentication(request, { realm: this._getRealmName() });
        }

        return AuthenticationResult.failed(Boom.badRequest('Both access and refresh tokens are expired.'));
      }

      return AuthenticationResult.failed(err);
    }
  }

  /**
   * Invalidates an Elasticsearch access token and refresh token that was originally created as an successful response
   * to an OpenID Connect based authentication. This does not handle OP initiated Single Logout
   * @param {Hapi.Request} request HapiJS request instance.
   * @param {Object} state State value previously stored by the provider.
   * @returns {Promise.<DeauthenticationResult>}
   */
  async deauthenticate(request, state) {
    this._options.log(['debug', 'security', 'oidc'], `Trying to deauthenticate user via ${request.url.path}.`);

    if ((!state || !state.accessToken)) {
      this._options.log(['debug', 'security', 'oidc'], 'There is no Elasticsearch access token to invalidate.');
      return DeauthenticationResult.notHandled();
    }

    const logoutArgs = [
      'shield.oidcLogout',
      { body: { token: state.accessToken, refresh_token: state.refreshToken } }
    ];

    try {
      // This operation should be performed on behalf of the user with a privilege that normal
      // user usually doesn't have `cluster:admin/xpack/security/oidc/logout`.
      const { redirect } = await this._options.client.callWithInternalUser(...logoutArgs);

      this._options.log(['debug', 'security', 'oidc'], 'User session has been successfully invalidated.');

      // Having non-null `redirect` field within logout response means that the OpenID Connect realm configuration
      // supports RP initiated Single Logout and we should redirect user to the specified location in the OpenID Connect
      // Provider to properly complete logout.
      if (redirect != null) {
        this._options.log(['debug', 'security', 'oidc'],
          'Redirecting user to the OpenID Connect Provider to complete logout.');
        return DeauthenticationResult.redirectTo(redirect);
      }

      return DeauthenticationResult.redirectTo(`${this._options.basePath}/logged_out`);
    } catch(err) {
      this._options.log(['debug', 'security', 'oidc'], `Failed to deauthenticate user: ${err.message}`);
      return DeauthenticationResult.failed(err);
    }
  }

  /**
   * Gets Elasticsearch OpenID Connect Realm name
   * @returns {string}
   * @private
   */
  _getRealmName() {
    return `${this._options.realm}`;
  }

  /**
   * Possibly adds the state and nonce parameter that was saved in the user's session state to the
   * {@code params}. There is no use case where we would have only a state parameter or only a nonce
   * parameter in the session state so we only enrich the params object if we have both
   * @param params Object containing existing parameters
   * @param {Object} sessionState State value previously stored by the provider.
   * @returns {object}
   * @private
   */
  _addStateNonceFromSession(params, sessionState) {
    const { nonce: stateNonce, state: stateOidcState } = sessionState || {};
    if (stateOidcState && stateNonce) {
      return { ...params, ...{ nonce: stateNonce, state: stateOidcState } };
    } else {
      return params;
    }
  }
}
