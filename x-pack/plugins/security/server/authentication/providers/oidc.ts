/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import Boom from 'boom';
import type from 'type-detect';
import { canRedirectRequest } from '../';
import { KibanaRequest } from '../../../../../../src/core/server';
import { AuthenticationResult } from '../authentication_result';
import { DeauthenticationResult } from '../deauthentication_result';
import { Tokens, TokenPair } from '../tokens';
import {
  AuthenticationProviderOptions,
  BaseAuthenticationProvider,
  AuthenticationProviderSpecificOptions,
} from './base';

/**
 * Describes possible OpenID Connect authentication flows.
 */
export enum OIDCAuthenticationFlow {
  Implicit = 'implicit',
  AuthorizationCode = 'authorization-code',
  InitiatedBy3rdParty = 'initiated-by-3rd-party',
}

/**
 * Describes the parameters that are required by the provider to process the initial login request.
 */
export type ProviderLoginAttempt =
  | {
      flow: OIDCAuthenticationFlow.Implicit | OIDCAuthenticationFlow.AuthorizationCode;
      authenticationResponseURI: string;
    }
  | { flow: OIDCAuthenticationFlow.InitiatedBy3rdParty; iss: string; loginHint?: string };

/**
 * The state supported by the provider (for the OpenID Connect handshake or established session).
 */
interface ProviderState extends Partial<TokenPair> {
  /**
   * Unique identifier of the OpenID Connect request initiated the handshake used to mitigate
   * replay attacks.
   */
  nonce?: string;

  /**
   * Unique identifier of the OpenID Connect request initiated the handshake used to mitigate
   * CSRF.
   */
  state?: string;

  /**
   * URL to redirect user to after successful OpenID Connect handshake.
   */
  nextURL?: string;
}

/**
 * Provider that supports authentication using an OpenID Connect realm in Elasticsearch.
 */
export class OIDCAuthenticationProvider extends BaseAuthenticationProvider {
  /**
   * Specifies Elasticsearch OIDC realm name that Kibana should use.
   */
  private readonly realm: string;

  constructor(
    protected readonly options: Readonly<AuthenticationProviderOptions>,
    oidcOptions?: Readonly<AuthenticationProviderSpecificOptions>
  ) {
    super(options);
    if (!oidcOptions || !oidcOptions.realm) {
      throw new Error('Realm name must be specified');
    }

    if (type(oidcOptions.realm) !== 'string') {
      throw new Error('Realm must be a string');
    }

    this.realm = oidcOptions.realm as string;
  }

  /**
   * Performs OpenID Connect request authentication.
   * @param request Request instance.
   * @param attempt Login attempt description.
   * @param [state] Optional state object associated with the provider.
   */
  public async login(
    request: KibanaRequest,
    attempt: ProviderLoginAttempt,
    state?: ProviderState | null
  ) {
    this.logger.debug('Trying to perform a login.');

    if (attempt.flow === OIDCAuthenticationFlow.InitiatedBy3rdParty) {
      this.logger.debug('Authentication has been initiated by a Third Party.');
      // We might already have a state and nonce generated by Elasticsearch (from an unfinished authentication in
      // another tab)
      const oidcPrepareParams = attempt.loginHint
        ? { iss: attempt.iss, login_hint: attempt.loginHint }
        : { iss: attempt.iss };
      return this.initiateOIDCAuthentication(request, oidcPrepareParams);
    } else if (attempt.flow === OIDCAuthenticationFlow.Implicit) {
      this.logger.debug('OpenID Connect Implicit Authentication flow is used.');
    } else {
      this.logger.debug('OpenID Connect Authorization Code Authentication flow is used.');
    }

    return await this.loginWithAuthenticationResponse(
      request,
      attempt.authenticationResponseURI,
      state
    );
  }

  /**
   * Performs OpenID Connect request authentication.
   * @param request Request instance.
   * @param [state] Optional state object associated with the provider.
   */
  public async authenticate(request: KibanaRequest, state?: ProviderState | null) {
    this.logger.debug(`Trying to authenticate user request to ${request.url.path}.`);

    // We should get rid of `Bearer` scheme support as soon as Reporting doesn't need it anymore.
    let {
      authenticationResult,
      headerNotRecognized, // eslint-disable-line prefer-const
    } = await this.authenticateViaHeader(request);
    if (headerNotRecognized) {
      return authenticationResult;
    }

    if (state && authenticationResult.notHandled()) {
      authenticationResult = await this.authenticateViaState(request, state);
      if (
        authenticationResult.failed() &&
        Tokens.isAccessTokenExpiredError(authenticationResult.error)
      ) {
        authenticationResult = await this.authenticateViaRefreshToken(request, state);
      }
    }

    // If we couldn't authenticate by means of all methods above, let's try to
    // initiate an OpenID Connect based authentication, otherwise just return the authentication result we have.
    // We might already have a state and nonce generated by Elasticsearch (from an unfinished authentication in
    // another tab)
    return authenticationResult.notHandled()
      ? await this.initiateOIDCAuthentication(request, { realm: this.realm })
      : authenticationResult;
  }

  /**
   * Attempts to handle a request that might be a third party initiated OpenID connect authentication attempt or the
   * OpenID Connect Provider redirecting back the UA after an authentication success/failure. In the former case which
   * is signified by the existence of an iss parameter (either in the query of a GET request or the body of a POST
   * request) it attempts to start the authentication flow by calling initiateOIDCAuthentication.
   *
   * In the latter case, it attempts to exchange the authentication response to an elasticsearch access token, passing
   * along to Elasticsearch the state and nonce parameters from the user's session.
   *
   * When login succeeds the elasticsearch access token and refresh token are stored in the state and user is redirected
   * to the URL that was requested before authentication flow started or to default Kibana location in case of a third
   * party initiated login
   * @param request Request instance.
   * @param authenticationResponseURI This URI contains the authentication response returned from the OP and may contain
   * authorization code that es will exchange for an ID Token in case of Authorization Code authentication flow. Or
   * id/access tokens in case of Implicit authentication flow. Elasticsearch will do all the required validation and
   * parsing for both successful and failed responses.
   * @param [sessionState] Optional state object associated with the provider.
   */
  private async loginWithAuthenticationResponse(
    request: KibanaRequest,
    authenticationResponseURI: string,
    sessionState?: ProviderState | null
  ) {
    // If it is an authentication response and the users' session state doesn't contain all the necessary information,
    // then something unexpected happened and we should fail because Elasticsearch won't be able to validate the
    // response.
    const { nonce: stateNonce = '', state: stateOIDCState = '', nextURL: stateRedirectURL = '' } =
      sessionState || {};
    if (!stateNonce || !stateOIDCState || !stateRedirectURL) {
      const message =
        'Response session state does not have corresponding state or nonce parameters or redirect URL.';
      this.logger.debug(message);
      return AuthenticationResult.failed(Boom.badRequest(message));
    }

    // We have all the necessary parameters, so attempt to complete the OpenID Connect Authentication
    try {
      // This operation should be performed on behalf of the user with a privilege that normal
      // user usually doesn't have `cluster:admin/xpack/security/oidc/authenticate`.
      const {
        access_token: accessToken,
        refresh_token: refreshToken,
      } = await this.options.client.callAsInternalUser('shield.oidcAuthenticate', {
        body: { state: stateOIDCState, nonce: stateNonce, redirect_uri: authenticationResponseURI },
      });

      this.logger.debug('Request has been authenticated via OpenID Connect.');

      return AuthenticationResult.redirectTo(stateRedirectURL, {
        state: { accessToken, refreshToken },
      });
    } catch (err) {
      this.logger.debug(`Failed to authenticate request via OpenID Connect: ${err.message}`);
      return AuthenticationResult.failed(err);
    }
  }

  /**
   * Initiates an authentication attempt by either providing the realm name or the issuer to Elasticsearch
   *
   * @param request Request instance.
   * @param params OIDC authentication parameters.
   * @param [sessionState] Optional state object associated with the provider.
   */
  private async initiateOIDCAuthentication(
    request: KibanaRequest,
    params: { realm: string } | { iss: string; login_hint?: string },
    sessionState?: ProviderState | null
  ) {
    this.logger.debug('Trying to initiate OpenID Connect authentication.');

    // If client can't handle redirect response, we shouldn't initiate OpenID Connect authentication.
    if (!canRedirectRequest(request)) {
      this.logger.debug('OpenID Connect authentication can not be initiated by AJAX requests.');
      return AuthenticationResult.notHandled();
    }

    try {
      /*
       * Possibly adds the state and nonce parameter that was saved in the user's session state to
       * the params. There is no use case where we would have only a state parameter or only a nonce
       * parameter in the session state so we only enrich the params object if we have both
       */
      const oidcPrepareParams =
        sessionState && sessionState.nonce && sessionState.state
          ? { ...params, nonce: sessionState.nonce, state: sessionState.state }
          : params;
      // This operation should be performed on behalf of the user with a privilege that normal
      // user usually doesn't have `cluster:admin/xpack/security/oidc/prepare`.
      const { state, nonce, redirect } = await this.options.client.callAsInternalUser(
        'shield.oidcPrepare',
        { body: oidcPrepareParams }
      );

      this.logger.debug('Redirecting to OpenID Connect Provider with authentication request.');
      // If this is a third party initiated login, redirect to the base path
      const redirectAfterLogin = `${this.options.basePath.get(request)}${
        'iss' in params ? '/' : request.url.path
      }`;
      return AuthenticationResult.redirectTo(
        redirect,
        // Store the state and nonce parameters in the session state of the user
        { state: { state, nonce, nextURL: redirectAfterLogin } }
      );
    } catch (err) {
      this.logger.debug(`Failed to initiate OpenID Connect authentication: ${err.message}`);
      return AuthenticationResult.failed(err);
    }
  }

  /**
   * Validates whether request contains `Bearer ***` Authorization header and just passes it
   * forward to Elasticsearch backend.
   * @param request Request instance.
   */
  private async authenticateViaHeader(request: KibanaRequest) {
    this.logger.debug('Trying to authenticate via header.');

    const authorization = request.headers.authorization;
    if (!authorization || typeof authorization !== 'string') {
      this.logger.debug('Authorization header is not presented.');
      return {
        authenticationResult: AuthenticationResult.notHandled(),
      };
    }

    const authenticationSchema = authorization.split(/\s+/)[0];
    if (authenticationSchema.toLowerCase() !== 'bearer') {
      this.logger.debug(`Unsupported authentication schema: ${authenticationSchema}`);
      return {
        authenticationResult: AuthenticationResult.notHandled(),
        headerNotRecognized: true,
      };
    }

    try {
      const user = await this.getUser(request);

      this.logger.debug('Request has been authenticated via header.');
      return {
        authenticationResult: AuthenticationResult.succeeded(user),
      };
    } catch (err) {
      this.logger.debug(`Failed to authenticate request via header: ${err.message}`);
      return {
        authenticationResult: AuthenticationResult.failed(err),
      };
    }
  }

  /**
   * Tries to extract an elasticsearch access token from state and adds it to the request before it's
   * forwarded to Elasticsearch backend.
   * @param request Request instance.
   * @param state State value previously stored by the provider.
   */
  private async authenticateViaState(request: KibanaRequest, { accessToken }: ProviderState) {
    this.logger.debug('Trying to authenticate via state.');

    if (!accessToken) {
      this.logger.debug('Elasticsearch access token is not found in state.');
      return AuthenticationResult.notHandled();
    }

    try {
      const authHeaders = { authorization: `Bearer ${accessToken}` };
      const user = await this.getUser(request, authHeaders);

      this.logger.debug('Request has been authenticated via state.');
      return AuthenticationResult.succeeded(user, { authHeaders });
    } catch (err) {
      this.logger.debug(`Failed to authenticate request via state: ${err.message}`);
      return AuthenticationResult.failed(err);
    }
  }

  /**
   * This method is only called when authentication via an elasticsearch access token stored in the state failed because
   * of expired token. So we should use the elasticsearch refresh token, that is also stored in the state, to extend
   * expired elasticsearch access token and authenticate user with it.
   * @param request Request instance.
   * @param state State value previously stored by the provider.
   */
  private async authenticateViaRefreshToken(
    request: KibanaRequest,
    { refreshToken }: ProviderState
  ) {
    this.logger.debug('Trying to refresh elasticsearch access token.');

    if (!refreshToken) {
      this.logger.debug('Refresh token is not found in state.');
      return AuthenticationResult.notHandled();
    }

    let refreshedTokenPair: TokenPair | null;
    try {
      refreshedTokenPair = await this.options.tokens.refresh(refreshToken);
    } catch (err) {
      return AuthenticationResult.failed(err);
    }

    // When user has neither valid access nor refresh token, the only way to resolve this issue is to redirect
    // user to OpenID Connect provider, re-initiate the authentication flow and get a new access/refresh token
    // pair as result. Obviously we can't do that for AJAX requests, so we just reply with `400` and clear error
    // message. There are two reasons for `400` and not `401`: Elasticsearch search responds with `400` so it
    // seems logical to do the same on Kibana side and `401` would force user to logout and do full SLO if it's
    // supported.
    if (refreshedTokenPair === null) {
      if (canRedirectRequest(request)) {
        this.logger.debug(
          'Both elasticsearch access and refresh tokens are expired. Re-initiating OpenID Connect authentication.'
        );
        return this.initiateOIDCAuthentication(request, { realm: this.realm });
      }

      return AuthenticationResult.failed(
        Boom.badRequest('Both access and refresh tokens are expired.')
      );
    }

    try {
      const authHeaders = { authorization: `Bearer ${refreshedTokenPair.accessToken}` };
      const user = await this.getUser(request, authHeaders);

      this.logger.debug('Request has been authenticated via refreshed token.');
      return AuthenticationResult.succeeded(user, { authHeaders, state: refreshedTokenPair });
    } catch (err) {
      this.logger.debug(`Failed to refresh elasticsearch access token: ${err.message}`);
      return AuthenticationResult.failed(err);
    }
  }

  /**
   * Invalidates an elasticsearch access token and refresh token that were originally created as a successful response
   * to an OpenID Connect based authentication. This does not handle OP initiated Single Logout
   * @param request Request instance.
   * @param state State value previously stored by the provider.
   */
  public async logout(request: KibanaRequest, state: ProviderState) {
    this.logger.debug(`Trying to log user out via ${request.url.path}.`);

    if (!state || !state.accessToken) {
      this.logger.debug('There is no elasticsearch access token to invalidate.');
      return DeauthenticationResult.notHandled();
    }

    try {
      const logoutBody = {
        body: {
          token: state.accessToken,
          refresh_token: state.refreshToken,
        },
      };
      // This operation should be performed on behalf of the user with a privilege that normal
      // user usually doesn't have `cluster:admin/xpack/security/oidc/logout`.
      const { redirect } = await this.options.client.callAsInternalUser(
        'shield.oidcLogout',
        logoutBody
      );

      this.logger.debug('User session has been successfully invalidated.');

      // Having non-null `redirect` field within logout response means that the OpenID Connect realm configuration
      // supports RP initiated Single Logout and we should redirect user to the specified location in the OpenID Connect
      // Provider to properly complete logout.
      if (redirect != null) {
        this.logger.debug('Redirecting user to the OpenID Connect Provider to complete logout.');
        return DeauthenticationResult.redirectTo(redirect);
      }

      return DeauthenticationResult.redirectTo(`${this.options.basePath.get(request)}/logged_out`);
    } catch (err) {
      this.logger.debug(`Failed to deauthenticate user: ${err.message}`);
      return DeauthenticationResult.failed(err);
    }
  }
}
