// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<PrivilegeSpaceForm> renders without crashing 1`] = `
<EuiOverlayMask>
  <EuiFlyout
    closeButtonAriaLabel="Closes this dialog"
    hideCloseButton={false}
    maxWidth={true}
    onClose={[Function]}
    ownFocus={false}
    size="m"
  >
    <EuiFlyoutHeader
      hasBorder={true}
    >
      <EuiTitle
        size="m"
        textTransform="none"
      >
        <h2>
          <FormattedMessage
            defaultMessage="Spaces privileges"
            id="foo"
            values={Object {}}
          />
        </h2>
      </EuiTitle>
    </EuiFlyoutHeader>
    <EuiFlyoutBody>
      <EuiForm>
        <EuiFormRow
          describedByIds={Array []}
          fullWidth={true}
          hasEmptyLabelSpace={false}
          label="Spaces"
        >
          <SpaceSelector
            onChange={[Function]}
            selectedSpaceIds={Array []}
            spaces={
              Array [
                Object {
                  "_reserved": true,
                  "description": "",
                  "disabledFeatures": Array [],
                  "id": "default",
                  "name": "Default Space",
                },
                Object {
                  "description": "",
                  "disabledFeatures": Array [],
                  "id": "marketing",
                  "name": "Marketing",
                },
              ]
            }
          />
        </EuiFormRow>
        <EuiFormRow
          describedByIds={Array []}
          fullWidth={true}
          hasEmptyLabelSpace={false}
          label="Privilege"
        >
          <EuiSuperSelect
            compressed={false}
            data-test-subj="basePrivilegeComboBox"
            fullWidth={true}
            hasDividers={true}
            onChange={[Function]}
            options={
              Array [
                Object {
                  "dropdownDisplay": <EuiText
                    grow={true}
                    size="m"
                  >
                    <strong>
                      Custom
                    </strong>
                    <p>
                      Customize access by feature. Defaults to none for features not listed in the table below.
                    </p>
                  </EuiText>,
                  "inputDisplay": <EuiText
                    grow={true}
                    size="m"
                  >
                    Custom
                  </EuiText>,
                  "value": "basePrivilege_custom",
                },
                Object {
                  "disabled": false,
                  "dropdownDisplay": <EuiText
                    grow={true}
                    size="m"
                  >
                    <strong>
                      Read
                    </strong>
                    <p>
                      Grants read-only access to all features in selected spaces
                    </p>
                  </EuiText>,
                  "inputDisplay": <EuiText
                    grow={true}
                    size="m"
                  >
                    Read
                  </EuiText>,
                  "value": "basePrivilege_read",
                },
                Object {
                  "disabled": false,
                  "dropdownDisplay": <EuiText
                    grow={true}
                    size="m"
                  >
                    <strong>
                      All
                    </strong>
                    <p>
                      Grants full access to all features in selected spaces
                    </p>
                  </EuiText>,
                  "inputDisplay": <EuiText
                    grow={true}
                    size="m"
                  >
                    All
                  </EuiText>,
                  "value": "basePrivilege_all",
                },
              ]
            }
            valueOfSelected="basePrivilege_custom"
          />
        </EuiFormRow>
        <EuiSpacer
          size="s"
        />
        <EuiTitle
          size="xxs"
          textTransform="none"
        >
          <h3>
            Customize by feature
          </h3>
        </EuiTitle>
        <EuiSpacer
          size="xs"
        />
        <EuiText
          grow={true}
          size="s"
        >
          <p>
            Increase privilege levels from base privilege on a per-feature basis. Remember, some of these features may have been turned off by the space itself or affected by a global space privilege.
          </p>
        </EuiText>
        <EuiSpacer
          size="l"
        />
        <FeatureTable
          disabled={false}
          effectivePrivileges={
            EffectivePrivileges {
              "assignedGlobalBaseActions": Array [],
              "globalPrivilege": Object {
                "base": Array [],
                "feature": Object {},
                "spaces": Array [],
              },
              "privilegeDefinition": PrivilegeDefinition {
                "privilegeActionMap": Object {
                  "features": Object {},
                  "global": Object {},
                  "space": Object {},
                },
              },
              "rankedFeaturePrivileges": Object {},
              "role": Object {
                "elasticsearch": Object {
                  "cluster": Array [
                    "all",
                  ],
                  "indices": Array [],
                  "run_as": Array [],
                },
                "kibana": Array [
                  Object {
                    "base": Array [],
                    "feature": Object {},
                    "spaces": Array [],
                  },
                ],
                "name": "test role",
              },
            }
          }
          features={Array []}
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatHTMLMessage": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatPlural": [Function],
              "formatRelative": [Function],
              "formatTime": [Function],
              "formats": Object {
                "date": Object {
                  "full": Object {
                    "day": "numeric",
                    "month": "long",
                    "weekday": "long",
                    "year": "numeric",
                  },
                  "long": Object {
                    "day": "numeric",
                    "month": "long",
                    "year": "numeric",
                  },
                  "medium": Object {
                    "day": "numeric",
                    "month": "short",
                    "year": "numeric",
                  },
                  "short": Object {
                    "day": "numeric",
                    "month": "numeric",
                    "year": "2-digit",
                  },
                },
                "number": Object {
                  "currency": Object {
                    "style": "currency",
                  },
                  "percent": Object {
                    "style": "percent",
                  },
                },
                "relative": Object {
                  "days": Object {
                    "units": "day",
                  },
                  "hours": Object {
                    "units": "hour",
                  },
                  "minutes": Object {
                    "units": "minute",
                  },
                  "months": Object {
                    "units": "month",
                  },
                  "seconds": Object {
                    "units": "second",
                  },
                  "years": Object {
                    "units": "year",
                  },
                },
                "time": Object {
                  "full": Object {
                    "hour": "numeric",
                    "minute": "numeric",
                    "second": "numeric",
                    "timeZoneName": "short",
                  },
                  "long": Object {
                    "hour": "numeric",
                    "minute": "numeric",
                    "second": "numeric",
                    "timeZoneName": "short",
                  },
                  "medium": Object {
                    "hour": "numeric",
                    "minute": "numeric",
                    "second": "numeric",
                  },
                  "short": Object {
                    "hour": "numeric",
                    "minute": "numeric",
                  },
                },
              },
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralFormat": [Function],
                "getRelativeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "now": [Function],
              "onError": [Function],
              "textComponent": Symbol(react.fragment),
              "timeZone": null,
            }
          }
          onChange={[Function]}
          onChangeAll={[Function]}
          privilegeDefinition={
            PrivilegeDefinition {
              "privilegeActionMap": Object {
                "features": Object {},
                "global": Object {},
                "space": Object {},
              },
            }
          }
          role={
            Object {
              "elasticsearch": Object {
                "cluster": Array [
                  "all",
                ],
                "indices": Array [],
                "run_as": Array [],
              },
              "kibana": Array [
                Object {
                  "base": Array [],
                  "feature": Object {},
                  "spaces": Array [],
                },
              ],
              "name": "test role",
            }
          }
          showLocks={true}
          spacesIndex={0}
        />
      </EuiForm>
    </EuiFlyoutBody>
    <EuiFlyoutFooter>
      <EuiFlexGroup
        alignItems="stretch"
        component="div"
        direction="row"
        gutterSize="l"
        justifyContent="spaceBetween"
        responsive={true}
        wrap={false}
      >
        <EuiFlexItem
          component="div"
          grow={false}
        >
          <EuiButtonEmpty
            color="primary"
            data-test-subj="cancelSpacePrivilegeButton"
            flush="left"
            iconSide="left"
            iconType="cross"
            onClick={[Function]}
            type="button"
          >
            Cancel
          </EuiButtonEmpty>
        </EuiFlexItem>
        <EuiFlexItem
          component="div"
          grow={false}
        >
          <EuiButton
            color="primary"
            data-test-subj="createSpacePrivilegeButton"
            disabled={true}
            fill={true}
            iconSide="left"
            onClick={[Function]}
            type="button"
          >
            Create space privilege
          </EuiButton>
        </EuiFlexItem>
      </EuiFlexGroup>
    </EuiFlyoutFooter>
  </EuiFlyout>
</EuiOverlayMask>
`;
