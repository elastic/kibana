delete:
  summary: Permanently removes an alert.
  operationId: legaryDeleteAlert
  deprecated: true
  description: >
    Deprecated in 7.13.0. Use the delete rule API instead.
    WARNING: After you delete an alert, you cannot recover it.
  tags:
    - alerting
  parameters:
    - $ref: ../components/headers/kbn_xsrf.yaml
    - $ref: '../components/parameters/space_id.yaml'
    - in: path
      name: alertId
      description: The identifier for the alert.
      required: true
      schema:
        type: string
        example: 41893910-6bca-11eb-9e0d-85d233e3ee35
  responses:
    '204':
      description: Indicates a successful call.
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/401_response.yaml'
  servers:
    - url: https://localhost:5601

get:
  summary: Retrieves an alert by its identifier.
  operationId: legacyGetAlert
  deprecated: true
  description: Deprecated in 7.13.0. Use the get rule API instead.
  tags:
    - alerting
  parameters:
    - $ref: '../components/parameters/space_id.yaml'
    - in: path
      name: alertId
      description: The identifier for the alert.
      required: true
      schema:
        type: string
        example: 41893910-6bca-11eb-9e0d-85d233e3ee35
  responses:
    '200':
      description: Indicates a successful call.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/alert_response_properties.yaml' 
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/401_response.yaml'
  servers:
    - url: https://localhost:5601

post:
  summary: Create an alert.
  operationId: legacyCreateAlert
  deprecated: true
  description: Deprecated in 7.13.0. Use the create rule API instead.
  tags:
    - alerting
  parameters:
    - $ref: ../components/headers/kbn_xsrf.yaml
    - in: path
      name: alertId
      description: An UUID v1 or v4 identifier for the alert. If this parameter is omitted, the identifier is randomly generated.
      required: true
      schema:
        type: string
        example: 41893910-6bca-11eb-9e0d-85d233e3ee35
    - $ref: '../components/parameters/space_id.yaml'
  requestBody:
    required: true
    content:
      application/json:
        schema:
          title: Legacy create alert request properties
          type: object
          required:
            - alertTypeId
            - consumer
            - name
            - notifyWhen
            - params
            - schedule
          properties:
            actions:
              type: array
              items:
                type: object
                required:
                  - actionTypeId
                  - group
                  - id
                  - params
                properties:
                  actionTypeId:
                    type: string
                    description: The identifier for the action type.
                  group:
                    type: string
                    description: >
                      Grouping actions is recommended for escalations for different types of alert instances.
                      If you don't need this functionality, set it to `default`.
                  id:
                    type: string
                    description: The ID of the action saved object to execute.
                  params:
                    type: object
                    description: >
                      The map to the `params` that the action type will receive.
                      `params` are handled as Mustache templates and passed a default set of context.
            alertTypeId:
              type: string
              description: The ID of the alert type that you want to call when the alert is scheduled to run.
            consumer:
              type: string
              description: The name of the application that owns the alert. This name has to match the Kibana feature name, as that dictates the required role-based access control privileges.
            enabled:
              type: boolean
              description: Indicates if you want to run the alert on an interval basis after it is created.
            name:
              type: string
              description: A name to reference and search.
            notifyWhen:
              type: string
              description: The condition for throttling the notification.
              enum:
                - onActionGroupChange
                - onActiveAlert
                - onThrottleInterval
            params:
              type: object
              description: The parameters to pass to the alert type executor `params` value. This will also validate against the alert type params validator, if defined.
            schedule:
              type: object
              description: >
                The schedule specifying when this alert should be run.
                A schedule is structured such that the key specifies the format you wish to use and its value specifies the schedule.
              properties:
                interval:
                  type: string
                  description: The interval format specifies the interval in seconds, minutes, hours or days at which the alert should execute.
                  example: "10s"
            tags:
              type: array
              items:
                type: string
              description: A list of keywords to reference and search.
            throttle:
              type: string
              description: >
                How often this alert should fire the same actions.
                This will prevent the alert from sending out the same notification over and over.
                For example, if an alert with a schedule of 1 minute stays in a triggered state for 90 minutes,
                setting a throttle of `10m` or `1h` will prevent it from sending 90 notifications during this period.
  responses:
    '200':
      description: Indicates a successful call.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/alert_response_properties.yaml' 
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/401_response.yaml'
  servers:
    - url: https://localhost:5601

put:
  summary: Updates the attributes for an alert.
  operationId: legacyUpdateAlert
  deprecated: true
  description: Deprecated in 7.13.0. Use the update rule API instead.
  tags:
    - alerting
  parameters:
    - $ref: ../components/headers/kbn_xsrf.yaml
    - $ref: '../components/parameters/space_id.yaml'
    - in: path
      name: alertId
      description: The identifier for the alert.
      required: true
      schema:
        type: string
        example: 41893910-6bca-11eb-9e0d-85d233e3ee35
  requestBody:
    required: true
    content:
      application/json:
        schema:
          title: Legacy update alert request properties
          type: object
          required:
            - name
            - notifyWhen
            - params
            - schedule
          properties:
            actions:
              type: array
              items:
                type: object
                required:
                  - actionTypeId
                  - group
                  - id
                  - params
                properties:
                  actionTypeId:
                    type: string
                    description: The identifier for the action type.
                  group:
                    type: string
                    description: >
                      Grouping actions is recommended for escalations for different types of alert instances.
                      If you don't need this functionality, set it to `default`.
                  id:
                    type: string
                    description: The ID of the action saved object to execute.
                  params:
                    type: object
                    description: >
                      The map to the `params` that the action type will receive.
                      `params` are handled as Mustache templates and passed a default set of context.
            name:
              type: string
              description: A name to reference and search.
            notifyWhen:
              type: string
              description: The condition for throttling the notification.
              enum:
                - onActionGroupChange
                - onActiveAlert
                - onThrottleInterval
            params:
              type: object
              description: The parameters to pass to the alert type executor `params` value. This will also validate against the alert type params validator, if defined.
            schedule:
              type: object
              description: >
                The schedule specifying when this alert should be run.
                A schedule is structured such that the key specifies the format you wish to use and its value specifies the schedule.
              properties:
                interval:
                  type: string
                  description: The interval format specifies the interval in seconds, minutes, hours or days at which the alert should execute.
                  example: "1d"
            tags:
              type: array
              items:
                type: string
              description: A list of keywords to reference and search.
            throttle:
              type: string
              description: >
                How often this alert should fire the same actions.
                This will prevent the alert from sending out the same notification over and over.
                For example, if an alert with a schedule of 1 minute stays in a triggered state for 90 minutes,
                setting a throttle of `10m` or `1h` will prevent it from sending 90 notifications during this period.
  responses:
    '200':
      description: Indicates a successful call.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/alert_response_properties.yaml' 
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/401_response.yaml'
  servers:
    - url: https://localhost:5601

servers:
  - url: https://localhost:5601