get:
  summary: Retrieves a rule by its identifier.
  operationId: getRule
  description: >
    You must have `read` privileges for the appropriate Kibana features,
    depending on the `consumer` and `rule_type_id` of the rules you're seeking.
    For example, the **Management > Stack Rules** feature,
    **Analytics > Discover** and **Machine Learning** features, **Observability**
    features, or **Security** features. To get rules associated with the
    **Stack Monitoring** feature, use the `monitoring_user` built-in role.
  tags:
    - alerting
  parameters:
    - $ref: '../components/parameters/rule_id.yaml'
    - $ref: '../components/parameters/space_id.yaml'
  responses:
    '200':
      description: Indicates a successful call.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/rule_response_properties.yaml' 
          examples:
            getRuleResponse:
              $ref: '../components/examples/get_rule_response.yaml'
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/401_response.yaml'
    '404':
      description: Object is not found.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/404_response.yaml'

delete:
  summary: Deletes a rule.
  operationId: deleteRule
  description: >
    To delete a rule, you must have `all` privileges for the appropriate Kibana features, depending on the `consumer` and `rule_type_id` of the rule you're deleting.
    For example, the **Management** > **Stack Rules** feature, **Analytics** > **Discover** or **Machine Learning** features, **Observability**, or **Security** features.
    WARNING: After you delete a rule, you cannot recover it.
    If the API key that is used by the rule was created automatically, it is deleted.
  tags:
    - alerting
  parameters:
    - $ref: ../components/headers/kbn_xsrf.yaml
    - $ref: '../components/parameters/rule_id.yaml'
    - $ref: '../components/parameters/space_id.yaml'
  responses:
    '204':
      description: Indicates a successful call.
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/401_response.yaml'
    '404':
      description: Object is not found.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/404_response.yaml'

post:
  summary: Creates a rule with a specific rule identifier.
  operationId: createRuleId
  description: >
    To create a rule, you must have `all` privileges for the appropriate Kibana features, depending on the `consumer` and `rule_type_id` of the rule you're creating.
    For example, you must have privileges for the **Management > Stack rules** feature, **Analytics > Discover** and **Machine Learning** features, **Observability** features, or **Security** features.
    If the rule has actions, you must also have `read` privileges for the **Management > Actions and Connectors** feature.
    This API supports both key- and token-based authentication.
    To use key-based authentication, create an API key in Kibana and use it in the header of the API call.
    To use token-based authentication, provide a username and password; an API key that matches the current privileges of the user is created automatically.
    In both cases, the API key is subsequently used for authorization when the rule runs.
  tags:
    - alerting
  parameters:
    - $ref: ../components/headers/kbn_xsrf.yaml
    - $ref: '../components/parameters/space_id.yaml'
    - in: path
      name: ruleId
      description: >
        An UUID v1 or v4 identifier for the rule. If you omit this parameter,
        an identifier is randomly generated.
      required: true
      schema:
        type: string
        example: ac4e6b90-6be7-11eb-ba0d-9b1c1f912d74
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '../components/schemas/create_rule_request.yaml'
        examples:
          createEsQueryEsqlRuleIdRequest:
            $ref: '../components/examples/create_es_query_esql_rule_request.yaml'
          createEsQueryRuleIdRequest:
            $ref: '../components/examples/create_es_query_rule_request.yaml'
          createEsQueryKqlRuleIdRequest:
            $ref: '../components/examples/create_es_query_kql_rule_request.yaml'
          createIndexThreholdRuleIdRequest:
            $ref: '../components/examples/create_index_threshold_rule_request.yaml'
  responses:
    '200':
      description: Indicates a successful call.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/rule_response_properties.yaml' 
          examples:
            createEsQueryEsqlRuleIdResponse:
              $ref: '../components/examples/create_es_query_esql_rule_response.yaml'
            createEsQueryRuleIdResponse:
              $ref: '../components/examples/create_es_query_rule_response.yaml'
            createEsQueryKqlRuleIdResponse:
              $ref: '../components/examples/create_es_query_kql_rule_response.yaml'
            createIndexThresholdRuleIdResponse:
              $ref: '../components/examples/create_index_threshold_rule_response.yaml'
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/401_response.yaml'
    '404':
      description: Object is not found.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/404_response.yaml'

put:
  summary: Updates the attributes for a rule.
  operationId: updateRule
  description: >
    To update a rule, you must have `all` privileges for the appropriate Kibana features, depending on the `consumer` and `rule_type_id` of the rule you're updating.
    For example, you must have privileges for the **Management > Stack rules** feature, **Analytics > Discover** and **Machine Learning** features, **Observability** features, or **Security** features.
    If the rule has actions, you must also have `read` privileges for the **Management > Actions and Connectors** feature.
    This API supports both key- and token-based authentication.
    To use key-based authentication, create an API key in Kibana and use it in the header of the API call.
    To use token-based authentication, provide a username and password; an API key that matches the current privileges of the user is created automatically.
    In both cases, the API key is subsequently used for authorization when the rule runs.
    NOTE: If the API key has different privileges than the key that created or most recently updated the rule, the rule behavior might change.
    Though some properties are optional, when you update the rule the existing property values are overwritten with default values.
    Therefore, it is recommended to explicitly set all property values.
  tags:
    - alerting
  parameters:
    - $ref: ../components/headers/kbn_xsrf.yaml
    - $ref: '../components/parameters/rule_id.yaml'
    - $ref: '../components/parameters/space_id.yaml'
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: '../components/schemas/update_rule_request.yaml' 
        examples:
          updateRuleRequest:
            $ref: '../components/examples/update_rule_request.yaml'
  responses:
    '200':
      description: Indicates a successful call.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/rule_response_properties.yaml' 
          examples:
            updateRuleResponse:
              $ref: '../components/examples/update_rule_response.yaml'
    '401':
      description: Authorization information is missing or invalid.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/401_response.yaml'
    '404':
      description: Object is not found.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/404_response.yaml'