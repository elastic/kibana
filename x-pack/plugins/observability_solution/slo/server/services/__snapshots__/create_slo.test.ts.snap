// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateSLO happy path calls the expected services 1`] = `
Array [
  Object {
    "_meta": Object {
      "description": "Ingest pipeline for SLO rollup data",
      "managed": true,
      "managed_by": "observability",
      "version": 3.3,
    },
    "description": "Ingest pipeline for SLO rollup data [id: unique-id, revision: 1]",
    "id": ".slo-observability.sli.pipeline-unique-id-1",
    "processors": Array [
      Object {
        "set": Object {
          "field": "event.ingested",
          "value": "{{{_ingest.timestamp}}}",
        },
      },
      Object {
        "set": Object {
          "field": "slo.id",
          "value": "unique-id",
        },
      },
      Object {
        "set": Object {
          "field": "slo.revision",
          "value": 1,
        },
      },
      Object {
        "date_index_name": Object {
          "date_formats": Array [
            "UNIX_MS",
            "ISO8601",
            "yyyy-MM-dd'T'HH:mm:ss.SSSXX",
          ],
          "date_rounding": "M",
          "field": "@timestamp",
          "index_name_prefix": ".slo-observability.sli-v3.3.",
        },
      },
      Object {
        "script": Object {
          "description": "Generated the instanceId field for SLO rollup data",
          "source": "
        // This function will recursively collect all the values of a HashMap of HashMaps
        Collection collectValues(HashMap subject) {
          Collection values = new ArrayList();
          // Iterate through the values
          for(Object value: subject.values()) {
            // If the value is a HashMap, recurse
            if (value instanceof HashMap) {
              values.addAll(collectValues((HashMap) value));
            } else {
              values.add(String.valueOf(value));
            } 
          }
          return values;
        }

        // Create the string builder
        StringBuilder instanceId = new StringBuilder();

        if (ctx[\\"slo\\"][\\"groupings\\"] == null) {
          ctx[\\"slo\\"][\\"instanceId\\"] = \\"*\\";
        } else {
          // Get the values as a collection
          Collection values = collectValues(ctx[\\"slo\\"][\\"groupings\\"]);

          // Convert to a list and sort
          List sortedValues = new ArrayList(values);
          Collections.sort(sortedValues);

          // Create comma delimited string
          for(String instanceValue: sortedValues) {
            instanceId.append(instanceValue);
            instanceId.append(\\",\\");
          }

            // Assign the slo.instanceId
          ctx[\\"slo\\"][\\"instanceId\\"] = instanceId.length() > 0 ? instanceId.substring(0, instanceId.length() - 1) : \\"*\\";
        }
       ",
        },
      },
    ],
  },
]
`;

exports[`CreateSLO happy path calls the expected services 2`] = `
Array [
  Object {
    "document": Object {
      "errorBudgetConsumed": 0,
      "errorBudgetEstimated": false,
      "errorBudgetInitial": 0.010000000000000009,
      "errorBudgetRemaining": 1,
      "fiveMinuteBurnRate": Object {
        "goodEvents": 0,
        "totalEvents": 0,
        "value": 0,
      },
      "goodEvents": 0,
      "isTempDoc": true,
      "kibanaUrl": "http://myhost.com/mock-server-basepath",
      "latestSliTimestamp": null,
      "monitor": Object {
        "config_id": null,
        "name": null,
      },
      "observer": Object {
        "geo": Object {
          "name": null,
        },
        "name": null,
      },
      "oneDayBurnRate": Object {
        "goodEvents": 0,
        "totalEvents": 0,
        "value": 0,
      },
      "oneHourBurnRate": Object {
        "goodEvents": 0,
        "totalEvents": 0,
        "value": 0,
      },
      "service": Object {
        "environment": "irrelevant",
        "name": "irrelevant",
      },
      "sliValue": -1,
      "slo": Object {
        "budgetingMethod": "occurrences",
        "createdAt": "2024-01-01T00:00:00.000Z",
        "description": "irrelevant",
        "groupBy": "*",
        "groupings": Object {},
        "id": "unique-id",
        "indicator": Object {
          "params": Object {
            "environment": "irrelevant",
            "index": "metrics-apm*",
            "service": "irrelevant",
            "transactionName": "irrelevant",
            "transactionType": "irrelevant",
          },
          "type": "sli.apm.transactionErrorRate",
        },
        "instanceId": "*",
        "name": "irrelevant",
        "objective": Object {
          "target": 0.99,
          "timesliceTarget": undefined,
          "timesliceWindow": undefined,
        },
        "revision": 1,
        "tags": Array [],
        "timeWindow": Object {
          "duration": "7d",
          "type": "rolling",
        },
        "updatedAt": "2024-01-01T00:00:00.000Z",
      },
      "spaceId": "some-space",
      "status": "NO_DATA",
      "statusCode": 0,
      "summaryUpdatedAt": null,
      "totalEvents": 0,
      "transaction": Object {
        "name": "irrelevant",
        "type": "irrelevant",
      },
    },
    "id": "slo-unique-id",
    "index": ".slo-observability.summary-v3.3.temp",
    "refresh": true,
  },
]
`;
