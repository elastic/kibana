STATS ... BY

Syntax
STATS [column1 =] expression1[, ..., [columnN =] expressionN]
[BY grouping_expression1[, ..., grouping_expressionN]]
Parameters
columnX
The name by which the aggregated value is returned. If omitted, the name is
equal to the corresponding expression (expressionX).
expressionX
An expression that computes an aggregated value.
grouping_expressionX
An expression that outputs the values to group by.
Individual null values are skipped when computing aggregations.
DescriptionThe STATS ... BY processing command groups rows according to a common value
and calculate one or more aggregated values over the grouped rows. If BY is
omitted, the output table contains exactly one row with the aggregations applied
over the entire dataset.The following aggregation functions are supported:
AVG
COUNT
COUNT_DISTINCT
MAX
MEDIAN
MEDIAN_ABSOLUTE_DEVIATION
MIN
PERCENTILE
[preview]
This functionality is in technical preview and may be changed or removed in a future release. Elastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.
ST_CENTROID_AGG
SUM
VALUES
STATS without any groups is much much faster than adding a group.
Grouping on a single expression is currently much more optimized than grouping
      on many expressions. In some tests we have seen grouping on a single keyword
      column to be five times faster than grouping on two keyword columns. Do
      not try to work around this by combining the two columns together with
      something like CONCAT and then grouping - that is not going to be
      faster.
ExamplesCalculating a statistic and grouping by the values of another column:
```esql
FROM employees
| STATS count = COUNT(emp_no) BY languages
| SORT languages
```

Omitting BY returns one row with the aggregations applied over the entire
dataset:
```esql
FROM employees
| STATS avg_lang = AVG(languages)
```

It’s possible to calculate multiple values:
```esql
FROM employees
| STATS avg_lang = AVG(languages), max_lang = MAX(languages)
```

It’s also possible to group by multiple values (only supported for long and
keyword family fields):
```esql
FROM employees
| EVAL hired = DATE_FORMAT("YYYY", hire_date)
| STATS avg_salary = AVG(salary) BY hired, languages.long
| EVAL avg_salary = ROUND(avg_salary)
| SORT hired, languages.long
```

Both the aggregating functions and the grouping expressions accept other
functions. This is useful for using STATS...BY on multivalue columns.
For example, to calculate the average salary change, you can use MV_AVG to
first average the multiple values per employee, and use the result with the
AVG function:
```esql
FROM employees
| STATS avg_salary_change = ROUND(AVG(MV_AVG(salary_change)), 10)
```

An example of grouping by an expression is grouping employees on the first
letter of their last name:
```esql
FROM employees
| STATS my_count = COUNT() BY LEFT(last_name, 1)
| SORT `LEFT(last_name, 1)`
```

Specifying the output column name is optional. If not specified, the new column
name is equal to the expression. The following query returns a column named
AVG(salary):
```esql
FROM employees
| STATS AVG(salary)
```

Because this name contains special characters, it needs to be
quoted with backticks (`) when using it in subsequent commands:
```esql
FROM employees
| STATS AVG(salary)
| EVAL avg_salary_rounded = ROUND(`AVG(salary)`)
```
