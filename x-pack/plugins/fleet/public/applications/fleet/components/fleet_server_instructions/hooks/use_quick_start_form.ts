/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { useState, useCallback, useEffect } from 'react';
import { i18n } from '@kbn/i18n';

import type { useComboInput, useInput, useSwitchInput } from '../../../hooks';
import { sendCreateAgentPolicy, sendGetOneAgentPolicy, useStartServices } from '../../../hooks';

import type { NewAgentPolicy } from '../../../types';

import type { FleetServerHost } from '../../../types';

import { useSelectFleetServerPolicy } from './use_select_fleet_server_policy';
import { useServiceToken } from './use_service_token';
import { useFleetServerHost } from './use_fleet_server_host';

const QUICK_START_FLEET_SERVER_POLICY_FIELDS: NewAgentPolicy = {
  id: 'fleet-server-policy',
  name: 'Fleet Server Policy',
  description: 'Fleet Server policy generated by Kibana',
  namespace: 'default',
  has_fleet_server: true,
  monitoring_enabled: ['logs', 'metrics'],
  is_default_fleet_server: true,
};

export type QuickStartCreateFormStatus = 'initial' | 'loading' | 'error' | 'success';

export interface QuickStartCreateForm {
  status: QuickStartCreateFormStatus;
  fleetServerHosts: FleetServerHost[];
  error?: string;
  submit: () => void;
  setFleetServerHost: React.Dispatch<React.SetStateAction<FleetServerHost | undefined | null>>;
  fleetServerHost?: FleetServerHost | null;
  isFleetServerHostSubmitted: boolean;
  fleetServerPolicyId?: string;
  serviceToken?: string;
  inputs: {
    hostUrlsInput: ReturnType<typeof useComboInput>;
    nameInput: ReturnType<typeof useInput>;
    isDefaultInput: ReturnType<typeof useSwitchInput>;
  };
  onClose?: () => void;
}

/**
 * Provides a unified interface that combines the following operations:
 * 1. Setting a Fleet Server host in Fleet's settings
 * 2. Creating an agent policy that contains the `fleet_server` integration
 * 3. Generating a service token used by Fleet Server
 */
export const useQuickStartCreateForm = (): QuickStartCreateForm => {
  const [status, setStatus] = useState<'initial' | 'loading' | 'error' | 'success'>('initial');
  const [error, setError] = useState<string | undefined>();

  const {
    fleetServerHosts,
    fleetServerHost,
    isFleetServerHostSubmitted,
    saveFleetServerHost,
    error: fleetServerError,
    setFleetServerHost,
    validate,
    inputs,
  } = useFleetServerHost();

  // When a validation error is surfaced from the Fleet Server host form, we want to treat it
  // the same way we do errors from the service token or policy creation steps
  useEffect(() => {
    setStatus('error');
    setError(fleetServerError);
  }, [fleetServerError]);

  const { notifications } = useStartServices();
  const { fleetServerPolicyId, setFleetServerPolicyId } = useSelectFleetServerPolicy();
  const { serviceToken, generateServiceToken } = useServiceToken();

  const submit = useCallback(async () => {
    try {
      if ((!fleetServerHost && validate()) || fleetServerHost) {
        setStatus('loading');

        const newFleetServerHost = {
          name: inputs.nameInput.value,
          host_urls: inputs.hostUrlsInput.value,
          is_default: inputs.isDefaultInput.value,
          is_preconfigured: false,
        };

        if (!fleetServerHost) {
          const res = await saveFleetServerHost(newFleetServerHost);
          setFleetServerHost(res);
        }

        await generateServiceToken();

        const existingPolicy = await sendGetOneAgentPolicy(
          QUICK_START_FLEET_SERVER_POLICY_FIELDS.id!
        );

        // Don't attempt to create the policy if it's already been created in a previous quick start flow
        if (existingPolicy.data?.item) {
          setFleetServerPolicyId(existingPolicy.data?.item.id);
        } else {
          const createPolicyResponse = await sendCreateAgentPolicy(
            QUICK_START_FLEET_SERVER_POLICY_FIELDS,
            {
              withSysMonitoring: true,
            }
          );
          setFleetServerPolicyId(createPolicyResponse.data?.item.id);
        }

        setStatus('success');
      }
    } catch (err) {
      notifications.toasts.addError(err, {
        title: i18n.translate('xpack.fleet.fleetServerSetup.errorAddingFleetServerHostTitle', {
          defaultMessage: 'Error adding Fleet Server host',
        }),
      });

      setStatus('error');
      setError(err.message);
    }
  }, [
    validate,
    fleetServerHost,
    inputs.nameInput.value,
    inputs.hostUrlsInput.value,
    inputs.isDefaultInput.value,
    setFleetServerHost,
    saveFleetServerHost,
    generateServiceToken,
    setFleetServerPolicyId,
    notifications.toasts,
  ]);

  return {
    status,
    error,
    submit,
    fleetServerPolicyId,
    fleetServerHosts,
    fleetServerHost,
    setFleetServerHost,
    isFleetServerHostSubmitted,
    serviceToken,
    inputs,
  };
};
