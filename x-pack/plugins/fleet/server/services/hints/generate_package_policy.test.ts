/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import type { Agent, FullAgentPolicy, PackageInfo } from '../../types';

import { generatePackagePolicy } from './generate_package_policy';
import redisPkgRaw from './redis_pkg.json';
const redisPkg = redisPkgRaw as unknown as PackageInfo;
const expectedRedisPolicy = {
  name: 'my-policy',
  description: 'This agent policy was auto generated by Fleet',
  namespace: 'default',
  policy_id: '1234',
  enabled: true,
  output_id: '',
  package: { name: redisPkg.name, title: redisPkg.title, version: redisPkg.version },
  inputs: [
    {
      type: 'logfile',
      policy_template: 'redis',
      enabled: false,
      streams: [],
    },
    {
      type: 'redis',
      policy_template: 'redis',
      enabled: false,
      streams: [],
    },
    {
      type: 'redis/metrics',
      policy_template: 'redis',
      enabled: true,
      streams: [
        {
          enabled: true,
          data_stream: { type: 'metrics', dataset: 'redis.info' },
          vars: { period: { value: '10s', type: 'text' } },
        },
        {
          enabled: true,
          data_stream: { type: 'metrics', dataset: 'redis.key' },
          vars: {
            'key.patterns': { value: "- limit: 20\n  pattern: '*'\n", type: 'yaml' },
            period: { value: '10s', type: 'text' },
          },
        },
        {
          enabled: true,
          data_stream: { type: 'metrics', dataset: 'redis.keyspace' },
          vars: { period: { value: '10s', type: 'text' } },
        },
      ],
      vars: {
        hosts: { value: ['host1:8080'], type: 'text' },
        idle_timeout: { value: '20s', type: 'text' },
        maxconn: { value: 10, type: 'integer' },
        network: { value: 'tcp', type: 'text' },
        password: { value: '', type: 'password' },
      },
    },
  ],
};
const expectedNginxPolicy = {
  name: 'my-policy',
  namespace: 'default',
  description: 'This agent policy was auto generated by Fleet',
  package: {
    name: 'nginx',
    title: 'Nginx',
    version: '1.3.2',
  },
  enabled: true,
  policy_id: '1234',
  output_id: '',
  inputs: [
    {
      type: 'logfile',
      policy_template: 'nginx',
      enabled: false,
      streams: [],
    },
    {
      type: 'httpjson',
      policy_template: 'nginx',
      enabled: false,
      streams: [],
      vars: {
        url: {
          value: 'https://server.example.com:8089',
          type: 'text',
        },
        username: {
          type: 'text',
        },
        password: {
          type: 'password',
        },
        token: {
          type: 'password',
        },
        ssl: {
          value:
            '#certificate_authorities:\n#  - |\n#    -----BEGIN CERTIFICATE-----\n#    MIIDCjCCAfKgAwIBAgITJ706Mu2wJlKckpIvkWxEHvEyijANBgkqhkiG9w0BAQsF\n#    ADAUMRIwEAYDVQQDDAlsb2NhbGhvc3QwIBcNMTkwNzIyMTkyOTA0WhgPMjExOTA2\n#    MjgxOTI5MDRaMBQxEjAQBgNVBAMMCWxvY2FsaG9zdDCCASIwDQYJKoZIhvcNAQEB\n#    BQADggEPADCCAQoCggEBANce58Y/JykI58iyOXpxGfw0/gMvF0hUQAcUrSMxEO6n\n#    fZRA49b4OV4SwWmA3395uL2eB2NB8y8qdQ9muXUdPBWE4l9rMZ6gmfu90N5B5uEl\n#    94NcfBfYOKi1fJQ9i7WKhTjlRkMCgBkWPkUokvBZFRt8RtF7zI77BSEorHGQCk9t\n#    /D7BS0GJyfVEhftbWcFEAG3VRcoMhF7kUzYwp+qESoriFRYLeDWv68ZOvG7eoWnP\n#    PsvZStEVEimjvK5NSESEQa9xWyJOmlOKXhkdymtcUd/nXnx6UTCFgnkgzSdTWV41\n#    CI6B6aJ9svCTI2QuoIq2HxX/ix7OvW1huVmcyHVxyUECAwEAAaNTMFEwHQYDVR0O\n#    BBYEFPwN1OceFGm9v6ux8G+DZ3TUDYxqMB8GA1UdIwQYMBaAFPwN1OceFGm9v6ux\n#    8G+DZ3TUDYxqMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAG5D\n#    874A4YI7YUwOVsVAdbWtgp1d0zKcPRR+r2OdSbTAV5/gcS3jgBJ3i1BN34JuDVFw\n#    3DeJSYT3nxy2Y56lLnxDeF8CUTUtVQx3CuGkRg1ouGAHpO/6OqOhwLLorEmxi7tA\n#    H2O8mtT0poX5AnOAhzVy7QW0D/k4WaoLyckM5hUa6RtvgvLxOwA0U+VGurCDoctu\n#    8F4QOgTAWyh8EZIwaKCliFRSynDpv3JTUwtfZkxo6K6nce1RhCWFAsMvDZL8Dgc0\n#    yvgJ38BRsFOtkRuAGSf6ZUwTO8JJRRIFnpUzXflAnGivK9M13D5GEQMmIl6U9Pvk\n#    sxSmbIUfc2SGJGCJD4I=\n#    -----END CERTIFICATE-----\n',
          type: 'yaml',
        },
      },
    },
    {
      type: 'nginx/metrics',
      policy_template: 'nginx',
      enabled: true,
      streams: [
        {
          enabled: true,
          data_stream: {
            type: 'metrics',
            dataset: 'nginx.stubstatus',
          },
          vars: {
            period: {
              value: '10s',
              type: 'text',
            },
            server_status_path: {
              value: '/nginx_status',
              type: 'text',
            },
          },
          id: 'nginx/metrics-nginx.stubstatus-86ef4ed4-5b4c-411c-9ffd-305a3632ddd3',
          compiled_stream: {
            metricsets: ['stubstatus'],
            hosts: ['host1:80'],
            period: '10s',
            server_status_path: '/nginx_status',
          },
        },
      ],
      vars: {
        hosts: {
          type: 'text',
          value: ['host1:80'],
        },
      },
    },
  ],
};

describe('generatePackagePolicy', () => {
  it('should return the right policy for redis (host)', () => {
    const agent = {} as Agent;
    const agentPolicy = {
      id: '1234',
    } as FullAgentPolicy;
    const annotations = {
      host: 'host1:8080',
      package: 'redis',
    };
    const generatedPolicy = generatePackagePolicy(
      'my-policy',
      agent,
      agentPolicy,
      redisPkg,
      annotations
    );

    expect(generatedPolicy).toEqual(expectedRedisPolicy);
  });
  it('should return the right policy for nginx (host)', () => {
    const agent = {} as Agent;
    const agentPolicy = {
      id: '1234',
    } as FullAgentPolicy;
    const annotations = {
      host: 'host1:8080',
      package: 'nginx',
    };
    const generatedPolicy = generatePackagePolicy(
      'my-policy',
      agent,
      agentPolicy,
      redisPkg,
      annotations
    );

    expect(generatedPolicy).toEqual(expectedRedisPolicy);
  });
});
