/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import type { Agent, FullAgentPolicy, PackageInfo } from '../../types';

import { generatePackagePolicy } from './generate_package_policy';
import redisPkgRaw from './redis_pkg.json';
const redisPkg = redisPkgRaw as unknown as PackageInfo;
const expectedPolicy = {
  name: expect.any(String),
  description: 'This agent policy was auto generated by Fleet',
  namespace: 'default',
  policy_id: '1234',
  enabled: true,
  output_id: '',
  package: { name: redisPkg.name, title: redisPkg.title, version: redisPkg.version },
  inputs: [
    {
      type: 'logfile',
      policy_template: 'redis',
      enabled: false,
      streams: [],
    },
    {
      type: 'redis',
      policy_template: 'redis',
      enabled: false,
      streams: [],
    },
    {
      type: 'redis/metrics',
      policy_template: 'redis',
      enabled: true,
      streams: [
        {
          enabled: true,
          data_stream: { type: 'metrics', dataset: 'redis.info' },
          vars: { period: { value: '10s', type: 'text' } },
        },
        {
          enabled: true,
          data_stream: { type: 'metrics', dataset: 'redis.key' },
          vars: {
            'key.patterns': { value: "- limit: 20\n  pattern: '*'\n", type: 'yaml' },
            period: { value: '10s', type: 'text' },
          },
        },
        {
          enabled: true,
          data_stream: { type: 'metrics', dataset: 'redis.keyspace' },
          vars: { period: { value: '10s', type: 'text' } },
        },
      ],
      vars: {
        hosts: { value: ['host1:8080'], type: 'text' },
        idle_timeout: { value: '20s', type: 'text' },
        maxconn: { value: 10, type: 'integer' },
        network: { value: 'tcp', type: 'text' },
        password: { value: '', type: 'password' },
      },
    },
  ],
};

describe('generatePackagePolicy', () => {
  it('should return the right policy', () => {
    const agent = {} as Agent;
    const agentPolicy = {
      id: '1234',
    } as FullAgentPolicy;
    const annotations = {
      host: 'host1:8080',
      package: 'redis',
    };
    const generatedPolicy = generatePackagePolicy(agent, agentPolicy, redisPkg, annotations);

    expect(generatedPolicy).toEqual(expectedPolicy);
  });
});
