/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
import type { Logger } from '@kbn/core/server';

import type {
  Agent,
  FullAgentPolicy,
  PackageInfo,
  NewPackagePolicy,
  RegistryDataStream,
  RegistryStream,
} from '../../types';

import type { ParsedAnnotations } from './types';

export const generatePackagePolicy = (
  agent: Agent,
  agentPolicy: FullAgentPolicy,
  packageInfo: PackageInfo,
  annotations: ParsedAnnotations,
  logger?: Logger
): NewPackagePolicy | null => {
  return {
    name: 'Autodiscover redis policy' + Math.round(Math.random() * 10000),
    description: 'This agent policy was auto generated by Fleet',
    namespace: agentPolicy?.agent?.monitoring.namespace || 'default',
    policy_id: agentPolicy.id,
    enabled: true,
    output_id: '',
    package: { name: packageInfo.name, title: packageInfo.title, version: packageInfo.version },
    inputs: generatePackagePolicyInputs(packageInfo, annotations, logger),
  };
};

const generatePackagePolicyInputs = (
  packageInfo: PackageInfo,
  annotations: ParsedAnnotations,
  logger?: Logger
): NewPackagePolicy['inputs'] => {
  // TODO: the clever stuff
  return [
    {
      type: 'logfile',
      policy_template: 'redis',
      enabled: false,
      streams: [],
    },
    {
      type: 'redis',
      policy_template: 'redis',
      enabled: false,
      streams: [],
    },
    {
      type: 'redis/metrics',
      policy_template: 'redis',
      enabled: true,
      streams: [
        {
          enabled: true,
          data_stream: { type: 'metrics', dataset: 'redis.info' },
          vars: { period: { value: '10s', type: 'text' } },
        },
        {
          enabled: true,
          data_stream: { type: 'metrics', dataset: 'redis.key' },
          vars: {
            'key.patterns': { value: "- limit: 20\n  pattern: '*'\n", type: 'yaml' },
            period: { value: '10s', type: 'text' },
          },
        },
        {
          enabled: true,
          data_stream: { type: 'metrics', dataset: 'redis.keyspace' },
          vars: { period: { value: '10s', type: 'text' } },
        },
      ],
      vars: {
        hosts: { value: ['127.0.0.1:6379'], type: 'text' },
        idle_timeout: { value: '20s', type: 'text' },
        maxconn: { value: 10, type: 'integer' },
        network: { value: 'tcp', type: 'text' },
        password: { value: '', type: 'password' },
      },
    },
  ];
};

const generatePackagePolicyInput = (
  dataStream: RegistryDataStream,
  policyTemplate: string,
  annotations: ParsedAnnotations
): NewPackagePolicy['inputs'][number] => {
  const streams = (dataStream.streams || []).map((stream) =>
    generatePackagePolicyStream(stream, annotations)
  );

  const enabled = streams.some((s) => s.enabled);
  return {
    type: dataStream.type,
    policy_template: policyTemplate,
    enabled,
    streams: enabled ? streams : [],
  };
};

const generatePackagePolicyStream = (
  stream: RegistryStream,
  annotations: ParsedAnnotations
): NewPackagePolicy['inputs'][number]['streams'][number] => {
  return {
    enabled: false,
    data_stream: { type: 'logs', dataset: 'redis.slowlog' },
    vars: {
      hosts: { value: ['127.0.0.1:6379'], type: 'text' },
      password: { value: '', type: 'password' },
    },
  };
};
