## EVAL

The `EVAL` processing command enables you to append new columns with calculated values. This command is useful for creating new data points derived from existing columns, such as performing arithmetic operations, applying functions, or using expressions. 

### Use Cases
- **Data Transformation**: Create new columns based on existing data, such as converting units or calculating derived metrics.
- **Data Enrichment**: Add additional context to your data by computing new values.
- **Data Cleaning**: Standardize or normalize data by applying transformations.

### Limitations
- If a column with the same name already exists, the existing column is dropped.
- If a column name is used more than once, only the rightmost duplicate creates a column.

### Examples

#### Example 1: Converting Height to Different Units
This example demonstrates how to convert the height from meters to feet and centimeters.

```esql
FROM employees
| SORT emp_no
| KEEP first_name, last_name, height
| EVAL height_feet = height * 3.281, height_cm = height * 100
```

#### Example 2: Overwriting an Existing Column
In this example, the `height` column is overwritten with its value in feet.

```esql
FROM employees
| SORT emp_no
| KEEP first_name, last_name, height
| EVAL height = height * 3.281
```

#### Example 3: Using an Expression as Column Name
Here, a new column is created with a name equal to the expression used to calculate its value.

```esql
FROM employees
| SORT emp_no
| KEEP first_name, last_name, height
| EVAL height * 3.281
```

#### Example 4: Using Special Characters in Column Names
This example shows how to handle special characters in column names by quoting them with backticks.

```esql
FROM employees
| EVAL height * 3.281
| STATS avg_height_feet = AVG(`height * 3.281`)
```

These examples illustrate the versatility of the `EVAL` command in transforming and enriching your data within Elasticsearch.