## KEEP

The `KEEP` processing command in ES|QL enables you to specify which columns are returned and the order in which they are returned. This command is particularly useful when you want to focus on specific fields in your dataset, either by explicitly naming them or by using wildcard patterns. The `KEEP` command supports a variety of use cases, such as filtering out unnecessary columns, reordering columns for better readability, and ensuring that only relevant data is processed in subsequent commands.

### Use Cases
- **Selective Column Retrieval**: Retrieve only the columns you need for analysis, reducing the amount of data processed.
- **Column Reordering**: Specify the order in which columns should appear in the result set.
- **Wildcard Support**: Use wildcards to include multiple columns that match a pattern, simplifying queries when dealing with numerous fields.

### Limitations
- **Precedence Rules**: When a field name matches multiple expressions, precedence rules are applied. Complete field names take the highest precedence, followed by partial wildcard expressions, and finally, the wildcard `*`.
- **Column Conflicts**: If a field matches two expressions with the same precedence, the rightmost expression wins.

### Examples

#### Example 1: Specifying Columns Explicitly
This example demonstrates how to explicitly specify the columns to be returned.

```esql
FROM employees
| KEEP emp_no, first_name, last_name, height
```

#### Example 2: Using Wildcards to Match Column Names
This example shows how to use wildcards to return all columns that match a specific pattern.

```esql
FROM employees
| KEEP h*
```

#### Example 3: Combining Wildcards and Explicit Column Names
This example illustrates how to combine wildcards and explicit column names, and how precedence rules are applied.

```esql
FROM employees
| KEEP h*, *
```

#### Example 4: Precedence Rules with Complete Field Names
This example demonstrates how complete field names take precedence over wildcard expressions.

```esql
FROM employees
| KEEP first_name, last_name, first_name*
```

#### Example 5: Wildcard Expressions with Same Priority
This example shows how the last wildcard expression wins when multiple wildcard expressions have the same priority.

```esql
FROM employees
| KEEP first_name*, last_name, first_na*
```

#### Example 6: Simple Wildcard Expression with Lowest Precedence
This example illustrates how the simple wildcard expression `*` has the lowest precedence.

```esql
FROM employees
| KEEP *, first_name
```

These examples showcase the versatility and utility of the `KEEP` command in various scenarios, making it a powerful tool for data manipulation in ES|QL.