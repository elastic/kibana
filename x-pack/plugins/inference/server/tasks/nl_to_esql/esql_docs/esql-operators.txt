# ES|QL Operators

## Binary Operators

### Equality (`==`)
Check if two fields are equal. If either field is multivalued, the result is null. This is pushed to the underlying search index if one side of the comparison is constant and the other side is a field in the index that has both an index and doc_values.

#### Example:
```esql
FROM employees
| WHERE first_name == "John"
| KEEP first_name, last_name
```

### Inequality (`!=`)
Check if two fields are unequal. If either field is multivalued, the result is null. This is pushed to the underlying search index if one side of the comparison is constant and the other side is a field in the index that has both an index and doc_values.

#### Example:
```esql
FROM employees
| WHERE first_name != "John"
| KEEP first_name, last_name
```

### Less than (`<`)
Check if one field is less than another. If either field is multivalued, the result is null. This is pushed to the underlying search index if one side of the comparison is constant and the other side is a field in the index that has both an index and doc_values.

#### Example:
```esql
FROM employees
| WHERE age < 30
| KEEP first_name, last_name, age
```

### Less than or equal to (`<=`)
Check if one field is less than or equal to another. If either field is multivalued, the result is null. This is pushed to the underlying search index if one side of the comparison is constant and the other side is a field in the index that has both an index and doc_values.

#### Example:
```esql
FROM employees
| WHERE age <= 30
| KEEP first_name, last_name, age
```

### Greater than (`>`)
Check if one field is greater than another. If either field is multivalued, the result is null. This is pushed to the underlying search index if one side of the comparison is constant and the other side is a field in the index that has both an index and doc_values.

#### Example:
```esql
FROM employees
| WHERE age > 30
| KEEP first_name, last_name, age
```

### Greater than or equal to (`>=`)
Check if one field is greater than or equal to another. If either field is multivalued, the result is null. This is pushed to the underlying search index if one side of the comparison is constant and the other side is a field in the index that has both an index and doc_values.

#### Example:
```esql
FROM employees
| WHERE age >= 30
| KEEP first_name, last_name, age
```

### Add (`+`)
Add two numbers together. If either field is multivalued, the result is null.

#### Example:
```esql
FROM employees
| EVAL total_salary = base_salary + bonus
| KEEP first_name, last_name, total_salary
```

### Subtract (`-`)
Subtract one number from another. If either field is multivalued, the result is null.

#### Example:
```esql
FROM employees
| EVAL net_salary = gross_salary - tax
| KEEP first_name, last_name, net_salary
```

### Multiply (`*`)
Multiply two numbers together. If either field is multivalued, the result is null.

#### Example:
```esql
FROM employees
| EVAL annual_salary = monthly_salary * 12
| KEEP first_name, last_name, annual_salary
```

### Divide (`/`)
Divide one number by another. If either field is multivalued, the result is null. Division of two integer types will yield an integer result, rounding towards 0. If you need floating point division, cast one of the arguments to a `DOUBLE`.

#### Example:
```esql
FROM employees
| EVAL average_salary = total_salary / months_worked
| KEEP first_name, last_name, average_salary
```

### Modulus (`%`)
Divide one number by another and return the remainder. If either field is multivalued, the result is null.

#### Example:
```esql
FROM employees
| EVAL remainder = total_days % 7
| KEEP first_name, last_name, remainder
```

## Unary Operators

### Negation (`-`)
The only unary operator is negation.

#### Example:
```esql
FROM employees
| EVAL negative_salary = -salary
| KEEP first_name, last_name, negative_salary
```

## Logical Operators

### AND
Logical AND operator.

#### Example:
```esql
FROM employees
| WHERE age > 30 AND department == "Engineering"
| KEEP first_name, last_name, age, department
```

### OR
Logical OR operator.

#### Example:
```esql
FROM employees
| WHERE age > 30 OR department == "Engineering"
| KEEP first_name, last_name, age, department
```

### NOT
Logical NOT operator.

#### Example:
```esql
FROM employees
| WHERE NOT (age > 30)
| KEEP first_name, last_name, age
```

## Other Operators

### IS NULL and IS NOT NULL
For NULL comparison, use the `IS NULL` and `IS NOT NULL` predicates.

#### Example:
```esql
FROM employees
| WHERE birth_date IS NULL
| KEEP first_name, last_name
| SORT first_name
| LIMIT 3
```

```esql
FROM employees
| WHERE is_rehired IS NOT NULL
| STATS COUNT(emp_no)
```

### Cast (`::`)
The `::` operator provides a convenient alternative syntax to the `TO_<type>` conversion functions.

#### Example:
```esql
ROW ver = CONCAT(("0"::INT + 1)::STRING, ".2.3")::VERSION
```

### IN
The `IN` operator allows testing whether a field or expression equals an element in a list of literals, fields, or expressions.

#### Example:
```esql
ROW a = 1, b = 4, c = 3
| WHERE c-a IN (3, b / 2, a)
```

### LIKE
Use `LIKE` to filter data based on string patterns using wildcards. The following wildcard characters are supported:
- `*` matches zero or more characters.
- `?` matches one character.

#### Example:
```esql
FROM employees
| WHERE first_name LIKE "?b*"
| KEEP first_name, last_name
```

### RLIKE
Use `RLIKE` to filter data based on string patterns using regular expressions.

#### Example:
```esql
FROM employees
| WHERE first_name RLIKE ".leja.*"
| KEEP first_name, last_name
```