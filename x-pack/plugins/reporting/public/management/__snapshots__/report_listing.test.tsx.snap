// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ReportListing Report job listing with some items 1`] = `
<div
  className="euiBasicTable"
  data-test-subj="reportJobListing"
>
  <div>
    <EuiTableHeaderMobile>
      <div
        className="euiTableHeaderMobile"
      >
        <EuiFlexGroup
          alignItems="baseline"
          justifyContent="spaceBetween"
          responsive={false}
        >
          <div
            className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsBaseline euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
          >
            <EuiFlexItem
              grow={false}
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
              >
                <EuiI18n
                  default="Select all rows"
                  token="euiBasicTable.selectAllRows"
                >
                  <EuiCheckbox
                    aria-label="Select all rows"
                    checked={false}
                    compressed={false}
                    disabled={false}
                    id="_selection_column-checkbox_generated-id"
                    indeterminate={false}
                    label="Select all rows"
                    onChange={[Function]}
                  >
                    <div
                      className="euiCheckbox"
                    >
                      <input
                        aria-label="Select all rows"
                        checked={false}
                        className="euiCheckbox__input"
                        disabled={false}
                        id="_selection_column-checkbox_generated-id"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <div
                        className="euiCheckbox__square"
                      />
                      <label
                        className="euiCheckbox__label"
                        htmlFor="_selection_column-checkbox_generated-id"
                      >
                        Select all rows
                      </label>
                    </div>
                  </EuiCheckbox>
                </EuiI18n>
              </div>
            </EuiFlexItem>
            <EuiFlexItem
              grow={false}
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
              />
            </EuiFlexItem>
          </div>
        </EuiFlexGroup>
      </div>
    </EuiTableHeaderMobile>
    <EuiTable
      id="generated-id"
      responsive={true}
      tableLayout="fixed"
    >
      <table
        className="euiTable euiTable--responsive"
        id="generated-id"
        tabIndex={-1}
      >
        <EuiScreenReaderOnly>
          <caption
            className="euiScreenReaderOnly euiTableCaption"
          >
            <EuiDelayRender
              delay={500}
            />
          </caption>
        </EuiScreenReaderOnly>
        <EuiTableHeader>
          <thead>
            <tr>
              <EuiTableHeaderCellCheckbox
                key="_selection_column_h"
              >
                <th
                  className="euiTableHeaderCellCheckbox"
                  scope="col"
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                >
                  <div
                    className="euiTableCellContent"
                  >
                    <EuiI18n
                      default="Select all rows"
                      token="euiBasicTable.selectAllRows"
                    >
                      <EuiCheckbox
                        aria-label="Select all rows"
                        checked={false}
                        compressed={false}
                        data-test-subj="checkboxSelectAll"
                        disabled={false}
                        id="_selection_column-checkbox_generated-id"
                        indeterminate={false}
                        label={null}
                        onChange={[Function]}
                        type="inList"
                      >
                        <div
                          className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                        >
                          <input
                            aria-label="Select all rows"
                            checked={false}
                            className="euiCheckbox__input"
                            data-test-subj="checkboxSelectAll"
                            disabled={false}
                            id="_selection_column-checkbox_generated-id"
                            onChange={[Function]}
                            type="checkbox"
                          />
                          <div
                            className="euiCheckbox__square"
                          />
                        </div>
                      </EuiCheckbox>
                    </EuiI18n>
                  </div>
                </th>
              </EuiTableHeaderCellCheckbox>
              <EuiTableHeaderCell
                align="left"
                data-test-subj="tableHeaderCell_object_title_0"
                key="_data_h_object_title_0"
              >
                <th
                  className="euiTableHeaderCell"
                  data-test-subj="tableHeaderCell_object_title_0"
                  role="columnheader"
                  scope="col"
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                >
                  <CellContents
                    className="euiTableCellContent"
                    showSortMsg={false}
                  >
                    <span
                      className="euiTableCellContent"
                    >
                      <EuiInnerText>
                        <EuiI18n
                          default="{innerText}; {description}"
                          token="euiTableHeaderCell.titleTextWithDesc"
                          values={
                            Object {
                              "description": undefined,
                              "innerText": "Report",
                            }
                          }
                        >
                          <span
                            className="euiTableCellContent__text"
                            title="Report"
                          >
                            Report
                          </span>
                        </EuiI18n>
                      </EuiInnerText>
                    </span>
                  </CellContents>
                </th>
              </EuiTableHeaderCell>
              <EuiTableHeaderCell
                align="left"
                data-test-subj="tableHeaderCell_created_at_1"
                key="_data_h_created_at_1"
              >
                <th
                  className="euiTableHeaderCell"
                  data-test-subj="tableHeaderCell_created_at_1"
                  role="columnheader"
                  scope="col"
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                >
                  <CellContents
                    className="euiTableCellContent"
                    showSortMsg={false}
                  >
                    <span
                      className="euiTableCellContent"
                    >
                      <EuiInnerText>
                        <EuiI18n
                          default="{innerText}; {description}"
                          token="euiTableHeaderCell.titleTextWithDesc"
                          values={
                            Object {
                              "description": undefined,
                              "innerText": "Created at",
                            }
                          }
                        >
                          <span
                            className="euiTableCellContent__text"
                            title="Created at"
                          >
                            Created at
                          </span>
                        </EuiI18n>
                      </EuiInnerText>
                    </span>
                  </CellContents>
                </th>
              </EuiTableHeaderCell>
              <EuiTableHeaderCell
                align="left"
                data-test-subj="tableHeaderCell_status_2"
                key="_data_h_status_2"
              >
                <th
                  className="euiTableHeaderCell"
                  data-test-subj="tableHeaderCell_status_2"
                  role="columnheader"
                  scope="col"
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                >
                  <CellContents
                    className="euiTableCellContent"
                    showSortMsg={false}
                  >
                    <span
                      className="euiTableCellContent"
                    >
                      <EuiInnerText>
                        <EuiI18n
                          default="{innerText}; {description}"
                          token="euiTableHeaderCell.titleTextWithDesc"
                          values={
                            Object {
                              "description": undefined,
                              "innerText": "Status",
                            }
                          }
                        >
                          <span
                            className="euiTableCellContent__text"
                            title="Status"
                          >
                            Status
                          </span>
                        </EuiI18n>
                      </EuiInnerText>
                    </span>
                  </CellContents>
                </th>
              </EuiTableHeaderCell>
              <EuiTableHeaderCell
                align="right"
                key="_actions_h_3"
              >
                <th
                  className="euiTableHeaderCell"
                  role="columnheader"
                  scope="col"
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                >
                  <CellContents
                    className="euiTableCellContent euiTableCellContent--alignRight"
                    showSortMsg={false}
                  >
                    <span
                      className="euiTableCellContent euiTableCellContent--alignRight"
                    >
                      <EuiInnerText>
                        <EuiI18n
                          default="{innerText}; {description}"
                          token="euiTableHeaderCell.titleTextWithDesc"
                          values={
                            Object {
                              "description": undefined,
                              "innerText": "Actions",
                            }
                          }
                        >
                          <span
                            className="euiTableCellContent__text"
                            title="Actions"
                          >
                            Actions
                          </span>
                        </EuiI18n>
                      </EuiInnerText>
                    </span>
                  </CellContents>
                </th>
              </EuiTableHeaderCell>
            </tr>
          </thead>
        </EuiTableHeader>
        <EuiTableBody
          bodyRef={[Function]}
        >
          <tbody>
            <EuiTableRow
              hasActions={true}
              isSelectable={true}
              isSelected={false}
            >
              <tr
                className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
              >
                <EuiTableRowCellCheckbox
                  key="_selection_column_k90e51pk1ieucbae0c3t8wo2"
                >
                  <td
                    className="euiTableRowCellCheckbox"
                  >
                    <div
                      className="euiTableCellContent"
                    >
                      <EuiI18n
                        default="Select this row"
                        token="euiBasicTable.selectThisRow"
                      >
                        <EuiCheckbox
                          aria-label="Select this row"
                          checked={false}
                          compressed={false}
                          data-test-subj="checkboxSelectRow-k90e51pk1ieucbae0c3t8wo2"
                          disabled={false}
                          id="_selection_column_k90e51pk1ieucbae0c3t8wo2-checkbox"
                          indeterminate={false}
                          onChange={[Function]}
                          title="Select this row"
                          type="inList"
                        >
                          <div
                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                          >
                            <input
                              aria-label="Select this row"
                              checked={false}
                              className="euiCheckbox__input"
                              data-test-subj="checkboxSelectRow-k90e51pk1ieucbae0c3t8wo2"
                              disabled={false}
                              id="_selection_column_k90e51pk1ieucbae0c3t8wo2-checkbox"
                              onChange={[Function]}
                              title="Select this row"
                              type="checkbox"
                            />
                            <div
                              className="euiCheckbox__square"
                            />
                          </div>
                        </EuiCheckbox>
                      </EuiI18n>
                    </div>
                  </td>
                </EuiTableRowCellCheckbox>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_object_title_k90e51pk1ieucbae0c3t8wo2_0"
                  mobileOptions={
                    Object {
                      "header": "Report",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Report
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        data-test-subj="reportingListItemObjectTitle"
                        key=".0"
                      >
                        <div>
                          My Canvas Workpad
                        </div>
                        <EuiText
                          size="s"
                        >
                          <div
                            className="euiText euiText--small"
                          >
                            <EuiTextColor
                              color="subdued"
                            >
                              <span
                                className="euiTextColor euiTextColor--subdued"
                              >
                                canvas workpad
                              </span>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_created_at_k90e51pk1ieucbae0c3t8wo2_1"
                  mobileOptions={
                    Object {
                      "header": "Created at",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Created at
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <div>
                          2020-04-14 @ 05:01 PM
                        </div>
                        <span>
                          elastic
                        </span>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_status_k90e51pk1ieucbae0c3t8wo2_2"
                  mobileOptions={
                    Object {
                      "header": "Status",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Status
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <FormattedMessage
                          defaultMessage="Pending - waiting for job to be processed"
                          id="xpack.reporting.listing.tableValue.statusDetail.pendingStatusReachedText"
                          values={Object {}}
                        >
                          Pending - waiting for job to be processed
                        </FormattedMessage>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="right"
                  hasActions={true}
                  key="record_actions_k90e51pk1ieucbae0c3t8wo2_3"
                  showOnHover={true}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell euiTableRowCell--hasActions"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                    >
                      <ExpandedItemActions
                        actionEnabled={[Function]}
                        actions={
                          Array [
                            Object {
                              "render": [Function],
                            },
                          ]
                        }
                        className="euiTableCellContent__hoverItem"
                        item={
                          Object {
                            "attempts": 0,
                            "completed_at": undefined,
                            "created_at": "2020-04-14T21:01:13.064Z",
                            "created_by": "elastic",
                            "csv_contains_formulas": undefined,
                            "id": "k90e51pk1ieucbae0c3t8wo2",
                            "max_attempts": 1,
                            "max_size_reached": false,
                            "object_title": "My Canvas Workpad",
                            "object_type": "canvas workpad",
                            "started_at": undefined,
                            "status": "pending",
                            "statusLabel": "Pending",
                            "type": "printable_pdf",
                            "warnings": undefined,
                          }
                        }
                        itemId="k90e51pk1ieucbae0c3t8wo2"
                        key=".0"
                      >
                        <CustomItemAction
                          action={
                            Object {
                              "render": [Function],
                            }
                          }
                          className="euiTableCellContent__hoverItem"
                          enabled={true}
                          index={0}
                          item={
                            Object {
                              "attempts": 0,
                              "completed_at": undefined,
                              "created_at": "2020-04-14T21:01:13.064Z",
                              "created_by": "elastic",
                              "csv_contains_formulas": undefined,
                              "id": "k90e51pk1ieucbae0c3t8wo2",
                              "max_attempts": 1,
                              "max_size_reached": false,
                              "object_title": "My Canvas Workpad",
                              "object_type": "canvas workpad",
                              "started_at": undefined,
                              "status": "pending",
                              "statusLabel": "Pending",
                              "type": "printable_pdf",
                              "warnings": undefined,
                            }
                          }
                          key="item_action_k90e51pk1ieucbae0c3t8wo2_0"
                        >
                          <div
                            className="euiTableCellContent__hoverItem"
                          >
                            <div
                              onBlur={[Function]}
                              onFocus={[Function]}
                            >
                              <ReportDownloadButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 0,
                                    "completed_at": undefined,
                                    "created_at": "2020-04-14T21:01:13.064Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k90e51pk1ieucbae0c3t8wo2",
                                    "max_attempts": 1,
                                    "max_size_reached": false,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": undefined,
                                    "status": "pending",
                                    "statusLabel": "Pending",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              />
                              <InjectIntl(ReportErrorButtonUi)
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 0,
                                    "completed_at": undefined,
                                    "created_at": "2020-04-14T21:01:13.064Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k90e51pk1ieucbae0c3t8wo2",
                                    "max_attempts": 1,
                                    "max_size_reached": false,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": undefined,
                                    "status": "pending",
                                    "statusLabel": "Pending",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <ReportErrorButtonUi
                                  apiClient={
                                    Object {
                                      "list": [Function],
                                      "migrateReportingIndicesIlmPolicy": [MockFunction],
                                      "total": [Function],
                                    }
                                  }
                                  ilmPolicyContextValue={
                                    Object {
                                      "isLoading": false,
                                      "recheckStatus": [Function],
                                      "status": undefined,
                                    }
                                  }
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      },
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": Object {},
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": Symbol(react.fragment),
                                      "timeZone": null,
                                    }
                                  }
                                  license$={
                                    Object {
                                      "subscribe": [Function],
                                    }
                                  }
                                  navigateToUrl={[MockFunction]}
                                  pollConfig={
                                    Object {
                                      "jobCompletionNotifier": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                      "jobsRefresh": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                    }
                                  }
                                  record={
                                    Object {
                                      "attempts": 0,
                                      "completed_at": undefined,
                                      "created_at": "2020-04-14T21:01:13.064Z",
                                      "created_by": "elastic",
                                      "csv_contains_formulas": undefined,
                                      "id": "k90e51pk1ieucbae0c3t8wo2",
                                      "max_attempts": 1,
                                      "max_size_reached": false,
                                      "object_title": "My Canvas Workpad",
                                      "object_type": "canvas workpad",
                                      "started_at": undefined,
                                      "status": "pending",
                                      "statusLabel": "Pending",
                                      "type": "printable_pdf",
                                      "warnings": undefined,
                                    }
                                  }
                                  redirect={[MockFunction]}
                                  toasts={
                                    Object {
                                      "add": [MockFunction],
                                      "addDanger": [MockFunction],
                                      "addError": [MockFunction],
                                      "addInfo": [MockFunction],
                                      "addSuccess": [MockFunction],
                                      "addWarning": [MockFunction],
                                      "get$": [MockFunction],
                                      "remove": [MockFunction],
                                    }
                                  }
                                  urlService={
                                    Object {
                                      "locators": Object {
                                        "get": [Function],
                                      },
                                    }
                                  }
                                />
                              </InjectIntl(ReportErrorButtonUi)>
                              <ReportInfoButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                jobId="k90e51pk1ieucbae0c3t8wo2"
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiButtonIcon
                                  aria-label="Show report info"
                                  color="primary"
                                  data-test-subj="reportInfoButton"
                                  iconType="iInCircle"
                                  onClick={[Function]}
                                >
                                  <button
                                    aria-label="Show report info"
                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                    data-test-subj="reportInfoButton"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiIcon
                                      aria-hidden="true"
                                      className="euiButtonIcon__icon"
                                      color="inherit"
                                      size="m"
                                      type="iInCircle"
                                    >
                                      <span
                                        aria-hidden="true"
                                        className="euiButtonIcon__icon"
                                        color="inherit"
                                        data-euiicon-type="iInCircle"
                                        size="m"
                                      />
                                    </EuiIcon>
                                  </button>
                                </EuiButtonIcon>
                              </ReportInfoButton>
                            </div>
                          </div>
                        </CustomItemAction>
                      </ExpandedItemActions>
                    </div>
                  </td>
                </EuiTableRowCell>
              </tr>
            </EuiTableRow>
            <EuiTableRow
              hasActions={true}
              isSelectable={true}
              isSelected={false}
            >
              <tr
                className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
              >
                <EuiTableRowCellCheckbox
                  key="_selection_column_k90e51pk1ieucbae0c3t8wo1"
                >
                  <td
                    className="euiTableRowCellCheckbox"
                  >
                    <div
                      className="euiTableCellContent"
                    >
                      <EuiI18n
                        default="Select this row"
                        token="euiBasicTable.selectThisRow"
                      >
                        <EuiCheckbox
                          aria-label="Select this row"
                          checked={false}
                          compressed={false}
                          data-test-subj="checkboxSelectRow-k90e51pk1ieucbae0c3t8wo1"
                          disabled={false}
                          id="_selection_column_k90e51pk1ieucbae0c3t8wo1-checkbox"
                          indeterminate={false}
                          onChange={[Function]}
                          title="Select this row"
                          type="inList"
                        >
                          <div
                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                          >
                            <input
                              aria-label="Select this row"
                              checked={false}
                              className="euiCheckbox__input"
                              data-test-subj="checkboxSelectRow-k90e51pk1ieucbae0c3t8wo1"
                              disabled={false}
                              id="_selection_column_k90e51pk1ieucbae0c3t8wo1-checkbox"
                              onChange={[Function]}
                              title="Select this row"
                              type="checkbox"
                            />
                            <div
                              className="euiCheckbox__square"
                            />
                          </div>
                        </EuiCheckbox>
                      </EuiI18n>
                    </div>
                  </td>
                </EuiTableRowCellCheckbox>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_object_title_k90e51pk1ieucbae0c3t8wo1_0"
                  mobileOptions={
                    Object {
                      "header": "Report",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Report
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        data-test-subj="reportingListItemObjectTitle"
                        key=".0"
                      >
                        <div>
                          My Canvas Workpad
                        </div>
                        <EuiText
                          size="s"
                        >
                          <div
                            className="euiText euiText--small"
                          >
                            <EuiTextColor
                              color="subdued"
                            >
                              <span
                                className="euiTextColor euiTextColor--subdued"
                              >
                                canvas workpad
                              </span>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_created_at_k90e51pk1ieucbae0c3t8wo1_1"
                  mobileOptions={
                    Object {
                      "header": "Created at",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Created at
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <div>
                          2020-04-14 @ 05:01 PM
                        </div>
                        <span>
                          elastic
                        </span>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_status_k90e51pk1ieucbae0c3t8wo1_2"
                  mobileOptions={
                    Object {
                      "header": "Status",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Status
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <FormattedMessage
                          defaultMessage="{statusLabel} at {statusTimestamp}"
                          id="xpack.reporting.listing.tableValue.statusDetail.statusTimestampText"
                          values={
                            Object {
                              "statusLabel": "Processing (attempt 1 of 1)",
                              "statusTimestamp": <span
                                className="eui-textNoWrap"
                              >
                                2020-04-14 @ 05:01 PM
                              </span>,
                            }
                          }
                        >
                          Processing (attempt 1 of 1) at 
                          <span
                            className="eui-textNoWrap"
                          >
                            2020-04-14 @ 05:01 PM
                          </span>
                        </FormattedMessage>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="right"
                  hasActions={true}
                  key="record_actions_k90e51pk1ieucbae0c3t8wo1_3"
                  showOnHover={true}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell euiTableRowCell--hasActions"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                    >
                      <ExpandedItemActions
                        actionEnabled={[Function]}
                        actions={
                          Array [
                            Object {
                              "render": [Function],
                            },
                          ]
                        }
                        className="euiTableCellContent__hoverItem"
                        item={
                          Object {
                            "attempts": 1,
                            "completed_at": undefined,
                            "created_at": "2020-04-14T21:01:13.064Z",
                            "created_by": "elastic",
                            "csv_contains_formulas": undefined,
                            "id": "k90e51pk1ieucbae0c3t8wo1",
                            "max_attempts": 1,
                            "max_size_reached": false,
                            "object_title": "My Canvas Workpad",
                            "object_type": "canvas workpad",
                            "started_at": "2020-04-14T21:01:14.526Z",
                            "status": "processing",
                            "statusLabel": "Processing",
                            "type": "printable_pdf",
                            "warnings": undefined,
                          }
                        }
                        itemId="k90e51pk1ieucbae0c3t8wo1"
                        key=".0"
                      >
                        <CustomItemAction
                          action={
                            Object {
                              "render": [Function],
                            }
                          }
                          className="euiTableCellContent__hoverItem"
                          enabled={true}
                          index={0}
                          item={
                            Object {
                              "attempts": 1,
                              "completed_at": undefined,
                              "created_at": "2020-04-14T21:01:13.064Z",
                              "created_by": "elastic",
                              "csv_contains_formulas": undefined,
                              "id": "k90e51pk1ieucbae0c3t8wo1",
                              "max_attempts": 1,
                              "max_size_reached": false,
                              "object_title": "My Canvas Workpad",
                              "object_type": "canvas workpad",
                              "started_at": "2020-04-14T21:01:14.526Z",
                              "status": "processing",
                              "statusLabel": "Processing",
                              "type": "printable_pdf",
                              "warnings": undefined,
                            }
                          }
                          key="item_action_k90e51pk1ieucbae0c3t8wo1_0"
                        >
                          <div
                            className="euiTableCellContent__hoverItem"
                          >
                            <div
                              onBlur={[Function]}
                              onFocus={[Function]}
                            >
                              <ReportDownloadButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": undefined,
                                    "created_at": "2020-04-14T21:01:13.064Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k90e51pk1ieucbae0c3t8wo1",
                                    "max_attempts": 1,
                                    "max_size_reached": false,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T21:01:14.526Z",
                                    "status": "processing",
                                    "statusLabel": "Processing",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              />
                              <InjectIntl(ReportErrorButtonUi)
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": undefined,
                                    "created_at": "2020-04-14T21:01:13.064Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k90e51pk1ieucbae0c3t8wo1",
                                    "max_attempts": 1,
                                    "max_size_reached": false,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T21:01:14.526Z",
                                    "status": "processing",
                                    "statusLabel": "Processing",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <ReportErrorButtonUi
                                  apiClient={
                                    Object {
                                      "list": [Function],
                                      "migrateReportingIndicesIlmPolicy": [MockFunction],
                                      "total": [Function],
                                    }
                                  }
                                  ilmPolicyContextValue={
                                    Object {
                                      "isLoading": false,
                                      "recheckStatus": [Function],
                                      "status": undefined,
                                    }
                                  }
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      },
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": Object {},
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": Symbol(react.fragment),
                                      "timeZone": null,
                                    }
                                  }
                                  license$={
                                    Object {
                                      "subscribe": [Function],
                                    }
                                  }
                                  navigateToUrl={[MockFunction]}
                                  pollConfig={
                                    Object {
                                      "jobCompletionNotifier": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                      "jobsRefresh": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                    }
                                  }
                                  record={
                                    Object {
                                      "attempts": 1,
                                      "completed_at": undefined,
                                      "created_at": "2020-04-14T21:01:13.064Z",
                                      "created_by": "elastic",
                                      "csv_contains_formulas": undefined,
                                      "id": "k90e51pk1ieucbae0c3t8wo1",
                                      "max_attempts": 1,
                                      "max_size_reached": false,
                                      "object_title": "My Canvas Workpad",
                                      "object_type": "canvas workpad",
                                      "started_at": "2020-04-14T21:01:14.526Z",
                                      "status": "processing",
                                      "statusLabel": "Processing",
                                      "type": "printable_pdf",
                                      "warnings": undefined,
                                    }
                                  }
                                  redirect={[MockFunction]}
                                  toasts={
                                    Object {
                                      "add": [MockFunction],
                                      "addDanger": [MockFunction],
                                      "addError": [MockFunction],
                                      "addInfo": [MockFunction],
                                      "addSuccess": [MockFunction],
                                      "addWarning": [MockFunction],
                                      "get$": [MockFunction],
                                      "remove": [MockFunction],
                                    }
                                  }
                                  urlService={
                                    Object {
                                      "locators": Object {
                                        "get": [Function],
                                      },
                                    }
                                  }
                                />
                              </InjectIntl(ReportErrorButtonUi)>
                              <ReportInfoButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                jobId="k90e51pk1ieucbae0c3t8wo1"
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiButtonIcon
                                  aria-label="Show report info"
                                  color="primary"
                                  data-test-subj="reportInfoButton"
                                  iconType="iInCircle"
                                  onClick={[Function]}
                                >
                                  <button
                                    aria-label="Show report info"
                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                    data-test-subj="reportInfoButton"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiIcon
                                      aria-hidden="true"
                                      className="euiButtonIcon__icon"
                                      color="inherit"
                                      size="m"
                                      type="iInCircle"
                                    >
                                      <span
                                        aria-hidden="true"
                                        className="euiButtonIcon__icon"
                                        color="inherit"
                                        data-euiicon-type="iInCircle"
                                        size="m"
                                      />
                                    </EuiIcon>
                                  </button>
                                </EuiButtonIcon>
                              </ReportInfoButton>
                            </div>
                          </div>
                        </CustomItemAction>
                      </ExpandedItemActions>
                    </div>
                  </td>
                </EuiTableRowCell>
              </tr>
            </EuiTableRow>
            <EuiTableRow
              hasActions={true}
              isSelectable={true}
              isSelected={false}
            >
              <tr
                className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
              >
                <EuiTableRowCellCheckbox
                  key="_selection_column_k90cmthd1gv8cbae0c2le8bo"
                >
                  <td
                    className="euiTableRowCellCheckbox"
                  >
                    <div
                      className="euiTableCellContent"
                    >
                      <EuiI18n
                        default="Select this row"
                        token="euiBasicTable.selectThisRow"
                      >
                        <EuiCheckbox
                          aria-label="Select this row"
                          checked={false}
                          compressed={false}
                          data-test-subj="checkboxSelectRow-k90cmthd1gv8cbae0c2le8bo"
                          disabled={false}
                          id="_selection_column_k90cmthd1gv8cbae0c2le8bo-checkbox"
                          indeterminate={false}
                          onChange={[Function]}
                          title="Select this row"
                          type="inList"
                        >
                          <div
                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                          >
                            <input
                              aria-label="Select this row"
                              checked={false}
                              className="euiCheckbox__input"
                              data-test-subj="checkboxSelectRow-k90cmthd1gv8cbae0c2le8bo"
                              disabled={false}
                              id="_selection_column_k90cmthd1gv8cbae0c2le8bo-checkbox"
                              onChange={[Function]}
                              title="Select this row"
                              type="checkbox"
                            />
                            <div
                              className="euiCheckbox__square"
                            />
                          </div>
                        </EuiCheckbox>
                      </EuiI18n>
                    </div>
                  </td>
                </EuiTableRowCellCheckbox>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_object_title_k90cmthd1gv8cbae0c2le8bo_0"
                  mobileOptions={
                    Object {
                      "header": "Report",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Report
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        data-test-subj="reportingListItemObjectTitle"
                        key=".0"
                      >
                        <div>
                          My Canvas Workpad
                        </div>
                        <EuiText
                          size="s"
                        >
                          <div
                            className="euiText euiText--small"
                          >
                            <EuiTextColor
                              color="subdued"
                            >
                              <span
                                className="euiTextColor euiTextColor--subdued"
                              >
                                canvas workpad
                              </span>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_created_at_k90cmthd1gv8cbae0c2le8bo_1"
                  mobileOptions={
                    Object {
                      "header": "Created at",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Created at
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <div>
                          2020-04-14 @ 04:19 PM
                        </div>
                        <span>
                          elastic
                        </span>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_status_k90cmthd1gv8cbae0c2le8bo_2"
                  mobileOptions={
                    Object {
                      "header": "Status",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Status
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <FormattedMessage
                          defaultMessage="{statusLabel} at {statusTimestamp}"
                          id="xpack.reporting.listing.tableValue.statusDetail.statusTimestampText"
                          values={
                            Object {
                              "statusLabel": "Completed",
                              "statusTimestamp": <span
                                className="eui-textNoWrap"
                              >
                                2020-04-14 @ 04:19 PM
                              </span>,
                            }
                          }
                        >
                          Completed at 
                          <span
                            className="eui-textNoWrap"
                          >
                            2020-04-14 @ 04:19 PM
                          </span>
                        </FormattedMessage>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="right"
                  hasActions={true}
                  key="record_actions_k90cmthd1gv8cbae0c2le8bo_3"
                  showOnHover={true}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell euiTableRowCell--hasActions"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                    >
                      <ExpandedItemActions
                        actionEnabled={[Function]}
                        actions={
                          Array [
                            Object {
                              "render": [Function],
                            },
                          ]
                        }
                        className="euiTableCellContent__hoverItem"
                        item={
                          Object {
                            "attempts": 1,
                            "completed_at": "2020-04-14T20:19:14.748Z",
                            "created_at": "2020-04-14T20:19:02.977Z",
                            "created_by": "elastic",
                            "csv_contains_formulas": undefined,
                            "id": "k90cmthd1gv8cbae0c2le8bo",
                            "max_attempts": 1,
                            "max_size_reached": undefined,
                            "object_title": "My Canvas Workpad",
                            "object_type": "canvas workpad",
                            "started_at": "2020-04-14T20:19:04.073Z",
                            "status": "completed",
                            "statusLabel": "Completed",
                            "type": "printable_pdf",
                            "warnings": undefined,
                          }
                        }
                        itemId="k90cmthd1gv8cbae0c2le8bo"
                        key=".0"
                      >
                        <CustomItemAction
                          action={
                            Object {
                              "render": [Function],
                            }
                          }
                          className="euiTableCellContent__hoverItem"
                          enabled={true}
                          index={0}
                          item={
                            Object {
                              "attempts": 1,
                              "completed_at": "2020-04-14T20:19:14.748Z",
                              "created_at": "2020-04-14T20:19:02.977Z",
                              "created_by": "elastic",
                              "csv_contains_formulas": undefined,
                              "id": "k90cmthd1gv8cbae0c2le8bo",
                              "max_attempts": 1,
                              "max_size_reached": undefined,
                              "object_title": "My Canvas Workpad",
                              "object_type": "canvas workpad",
                              "started_at": "2020-04-14T20:19:04.073Z",
                              "status": "completed",
                              "statusLabel": "Completed",
                              "type": "printable_pdf",
                              "warnings": undefined,
                            }
                          }
                          key="item_action_k90cmthd1gv8cbae0c2le8bo_0"
                        >
                          <div
                            className="euiTableCellContent__hoverItem"
                          >
                            <div
                              onBlur={[Function]}
                              onFocus={[Function]}
                            >
                              <ReportDownloadButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T20:19:14.748Z",
                                    "created_at": "2020-04-14T20:19:02.977Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k90cmthd1gv8cbae0c2le8bo",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T20:19:04.073Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiToolTip
                                  content="Download report"
                                  delay="regular"
                                  position="top"
                                >
                                  <span
                                    className="euiToolTipAnchor"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <EuiButtonIcon
                                      aria-label="Download report"
                                      iconType="importAction"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                    >
                                      <button
                                        aria-label="Download report"
                                        className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        type="button"
                                      >
                                        <EuiIcon
                                          aria-hidden="true"
                                          className="euiButtonIcon__icon"
                                          color="inherit"
                                          size="m"
                                          type="importAction"
                                        >
                                          <span
                                            aria-hidden="true"
                                            className="euiButtonIcon__icon"
                                            color="inherit"
                                            data-euiicon-type="importAction"
                                            size="m"
                                          />
                                        </EuiIcon>
                                      </button>
                                    </EuiButtonIcon>
                                  </span>
                                </EuiToolTip>
                              </ReportDownloadButton>
                              <InjectIntl(ReportErrorButtonUi)
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T20:19:14.748Z",
                                    "created_at": "2020-04-14T20:19:02.977Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k90cmthd1gv8cbae0c2le8bo",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T20:19:04.073Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <ReportErrorButtonUi
                                  apiClient={
                                    Object {
                                      "list": [Function],
                                      "migrateReportingIndicesIlmPolicy": [MockFunction],
                                      "total": [Function],
                                    }
                                  }
                                  ilmPolicyContextValue={
                                    Object {
                                      "isLoading": false,
                                      "recheckStatus": [Function],
                                      "status": undefined,
                                    }
                                  }
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      },
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": Object {},
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": Symbol(react.fragment),
                                      "timeZone": null,
                                    }
                                  }
                                  license$={
                                    Object {
                                      "subscribe": [Function],
                                    }
                                  }
                                  navigateToUrl={[MockFunction]}
                                  pollConfig={
                                    Object {
                                      "jobCompletionNotifier": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                      "jobsRefresh": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                    }
                                  }
                                  record={
                                    Object {
                                      "attempts": 1,
                                      "completed_at": "2020-04-14T20:19:14.748Z",
                                      "created_at": "2020-04-14T20:19:02.977Z",
                                      "created_by": "elastic",
                                      "csv_contains_formulas": undefined,
                                      "id": "k90cmthd1gv8cbae0c2le8bo",
                                      "max_attempts": 1,
                                      "max_size_reached": undefined,
                                      "object_title": "My Canvas Workpad",
                                      "object_type": "canvas workpad",
                                      "started_at": "2020-04-14T20:19:04.073Z",
                                      "status": "completed",
                                      "statusLabel": "Completed",
                                      "type": "printable_pdf",
                                      "warnings": undefined,
                                    }
                                  }
                                  redirect={[MockFunction]}
                                  toasts={
                                    Object {
                                      "add": [MockFunction],
                                      "addDanger": [MockFunction],
                                      "addError": [MockFunction],
                                      "addInfo": [MockFunction],
                                      "addSuccess": [MockFunction],
                                      "addWarning": [MockFunction],
                                      "get$": [MockFunction],
                                      "remove": [MockFunction],
                                    }
                                  }
                                  urlService={
                                    Object {
                                      "locators": Object {
                                        "get": [Function],
                                      },
                                    }
                                  }
                                />
                              </InjectIntl(ReportErrorButtonUi)>
                              <ReportInfoButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                jobId="k90cmthd1gv8cbae0c2le8bo"
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiButtonIcon
                                  aria-label="Show report info"
                                  color="primary"
                                  data-test-subj="reportInfoButton"
                                  iconType="iInCircle"
                                  onClick={[Function]}
                                >
                                  <button
                                    aria-label="Show report info"
                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                    data-test-subj="reportInfoButton"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiIcon
                                      aria-hidden="true"
                                      className="euiButtonIcon__icon"
                                      color="inherit"
                                      size="m"
                                      type="iInCircle"
                                    >
                                      <span
                                        aria-hidden="true"
                                        className="euiButtonIcon__icon"
                                        color="inherit"
                                        data-euiicon-type="iInCircle"
                                        size="m"
                                      />
                                    </EuiIcon>
                                  </button>
                                </EuiButtonIcon>
                              </ReportInfoButton>
                            </div>
                          </div>
                        </CustomItemAction>
                      </ExpandedItemActions>
                    </div>
                  </td>
                </EuiTableRowCell>
              </tr>
            </EuiTableRow>
            <EuiTableRow
              hasActions={true}
              isSelectable={true}
              isSelected={false}
            >
              <tr
                className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
              >
                <EuiTableRowCellCheckbox
                  key="_selection_column_k906958e1d4wcbae0c9hip1a"
                >
                  <td
                    className="euiTableRowCellCheckbox"
                  >
                    <div
                      className="euiTableCellContent"
                    >
                      <EuiI18n
                        default="Select this row"
                        token="euiBasicTable.selectThisRow"
                      >
                        <EuiCheckbox
                          aria-label="Select this row"
                          checked={false}
                          compressed={false}
                          data-test-subj="checkboxSelectRow-k906958e1d4wcbae0c9hip1a"
                          disabled={false}
                          id="_selection_column_k906958e1d4wcbae0c9hip1a-checkbox"
                          indeterminate={false}
                          onChange={[Function]}
                          title="Select this row"
                          type="inList"
                        >
                          <div
                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                          >
                            <input
                              aria-label="Select this row"
                              checked={false}
                              className="euiCheckbox__input"
                              data-test-subj="checkboxSelectRow-k906958e1d4wcbae0c9hip1a"
                              disabled={false}
                              id="_selection_column_k906958e1d4wcbae0c9hip1a-checkbox"
                              onChange={[Function]}
                              title="Select this row"
                              type="checkbox"
                            />
                            <div
                              className="euiCheckbox__square"
                            />
                          </div>
                        </EuiCheckbox>
                      </EuiI18n>
                    </div>
                  </td>
                </EuiTableRowCellCheckbox>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_object_title_k906958e1d4wcbae0c9hip1a_0"
                  mobileOptions={
                    Object {
                      "header": "Report",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Report
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        data-test-subj="reportingListItemObjectTitle"
                        key=".0"
                      >
                        <div>
                          My Canvas Workpad
                        </div>
                        <EuiText
                          size="s"
                        >
                          <div
                            className="euiText euiText--small"
                          >
                            <EuiTextColor
                              color="subdued"
                            >
                              <span
                                className="euiTextColor euiTextColor--subdued"
                              >
                                canvas workpad
                              </span>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_created_at_k906958e1d4wcbae0c9hip1a_1"
                  mobileOptions={
                    Object {
                      "header": "Created at",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Created at
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <div>
                          2020-04-14 @ 01:20 PM
                        </div>
                        <span>
                          elastic
                        </span>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_status_k906958e1d4wcbae0c9hip1a_2"
                  mobileOptions={
                    Object {
                      "header": "Status",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Status
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <FormattedMessage
                          defaultMessage="{statusLabel} at {statusTimestamp}"
                          id="xpack.reporting.listing.tableValue.statusDetail.statusTimestampText"
                          values={
                            Object {
                              "statusLabel": "Completed with warnings",
                              "statusTimestamp": <span
                                className="eui-textNoWrap"
                              >
                                2020-04-14 @ 01:21 PM
                              </span>,
                            }
                          }
                        >
                          Completed with warnings at 
                          <span
                            className="eui-textNoWrap"
                          >
                            2020-04-14 @ 01:21 PM
                          </span>
                        </FormattedMessage>
                        <EuiText
                          size="s"
                        >
                          <div
                            className="euiText euiText--small"
                          >
                            <EuiTextColor
                              color="subdued"
                            >
                              <span
                                className="euiTextColor euiTextColor--subdued"
                              >
                                <FormattedMessage
                                  defaultMessage="Errors occurred: see job info for details."
                                  id="xpack.reporting.listing.tableValue.statusDetail.warningsText"
                                  values={Object {}}
                                >
                                  Errors occurred: see job info for details.
                                </FormattedMessage>
                              </span>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="right"
                  hasActions={true}
                  key="record_actions_k906958e1d4wcbae0c9hip1a_3"
                  showOnHover={true}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell euiTableRowCell--hasActions"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                    >
                      <ExpandedItemActions
                        actionEnabled={[Function]}
                        actions={
                          Array [
                            Object {
                              "render": [Function],
                            },
                          ]
                        }
                        className="euiTableCellContent__hoverItem"
                        item={
                          Object {
                            "attempts": 1,
                            "completed_at": "2020-04-14T17:21:08.223Z",
                            "created_at": "2020-04-14T17:20:27.326Z",
                            "created_by": "elastic",
                            "csv_contains_formulas": undefined,
                            "id": "k906958e1d4wcbae0c9hip1a",
                            "max_attempts": 1,
                            "max_size_reached": undefined,
                            "object_title": "My Canvas Workpad",
                            "object_type": "canvas workpad",
                            "started_at": "2020-04-14T17:20:29.444Z",
                            "status": "completed_with_warnings",
                            "statusLabel": "Completed with warnings",
                            "type": "printable_pdf",
                            "warnings": Array [
                              "An error occurred when trying to read the page for visualization panel info. You may need to increase 'xpack.reporting.capture.timeouts.waitForElements'. TimeoutError: waiting for selector \\"[data-shared-item],[data-shared-items-count]\\" failed: timeout 30000ms exceeded",
                            ],
                          }
                        }
                        itemId="k906958e1d4wcbae0c9hip1a"
                        key=".0"
                      >
                        <CustomItemAction
                          action={
                            Object {
                              "render": [Function],
                            }
                          }
                          className="euiTableCellContent__hoverItem"
                          enabled={true}
                          index={0}
                          item={
                            Object {
                              "attempts": 1,
                              "completed_at": "2020-04-14T17:21:08.223Z",
                              "created_at": "2020-04-14T17:20:27.326Z",
                              "created_by": "elastic",
                              "csv_contains_formulas": undefined,
                              "id": "k906958e1d4wcbae0c9hip1a",
                              "max_attempts": 1,
                              "max_size_reached": undefined,
                              "object_title": "My Canvas Workpad",
                              "object_type": "canvas workpad",
                              "started_at": "2020-04-14T17:20:29.444Z",
                              "status": "completed_with_warnings",
                              "statusLabel": "Completed with warnings",
                              "type": "printable_pdf",
                              "warnings": Array [
                                "An error occurred when trying to read the page for visualization panel info. You may need to increase 'xpack.reporting.capture.timeouts.waitForElements'. TimeoutError: waiting for selector \\"[data-shared-item],[data-shared-items-count]\\" failed: timeout 30000ms exceeded",
                              ],
                            }
                          }
                          key="item_action_k906958e1d4wcbae0c9hip1a_0"
                        >
                          <div
                            className="euiTableCellContent__hoverItem"
                          >
                            <div
                              onBlur={[Function]}
                              onFocus={[Function]}
                            >
                              <ReportDownloadButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T17:21:08.223Z",
                                    "created_at": "2020-04-14T17:20:27.326Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k906958e1d4wcbae0c9hip1a",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T17:20:29.444Z",
                                    "status": "completed_with_warnings",
                                    "statusLabel": "Completed with warnings",
                                    "type": "printable_pdf",
                                    "warnings": Array [
                                      "An error occurred when trying to read the page for visualization panel info. You may need to increase 'xpack.reporting.capture.timeouts.waitForElements'. TimeoutError: waiting for selector \\"[data-shared-item],[data-shared-items-count]\\" failed: timeout 30000ms exceeded",
                                    ],
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiToolTip
                                  content="Download report"
                                  delay="regular"
                                  position="top"
                                >
                                  <span
                                    className="euiToolTipAnchor"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <EuiButtonIcon
                                      aria-label="Download report"
                                      iconType="importAction"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                    >
                                      <button
                                        aria-label="Download report"
                                        className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        type="button"
                                      >
                                        <EuiIcon
                                          aria-hidden="true"
                                          className="euiButtonIcon__icon"
                                          color="inherit"
                                          size="m"
                                          type="importAction"
                                        >
                                          <span
                                            aria-hidden="true"
                                            className="euiButtonIcon__icon"
                                            color="inherit"
                                            data-euiicon-type="importAction"
                                            size="m"
                                          />
                                        </EuiIcon>
                                      </button>
                                    </EuiButtonIcon>
                                  </span>
                                </EuiToolTip>
                              </ReportDownloadButton>
                              <InjectIntl(ReportErrorButtonUi)
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T17:21:08.223Z",
                                    "created_at": "2020-04-14T17:20:27.326Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k906958e1d4wcbae0c9hip1a",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T17:20:29.444Z",
                                    "status": "completed_with_warnings",
                                    "statusLabel": "Completed with warnings",
                                    "type": "printable_pdf",
                                    "warnings": Array [
                                      "An error occurred when trying to read the page for visualization panel info. You may need to increase 'xpack.reporting.capture.timeouts.waitForElements'. TimeoutError: waiting for selector \\"[data-shared-item],[data-shared-items-count]\\" failed: timeout 30000ms exceeded",
                                    ],
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <ReportErrorButtonUi
                                  apiClient={
                                    Object {
                                      "list": [Function],
                                      "migrateReportingIndicesIlmPolicy": [MockFunction],
                                      "total": [Function],
                                    }
                                  }
                                  ilmPolicyContextValue={
                                    Object {
                                      "isLoading": false,
                                      "recheckStatus": [Function],
                                      "status": undefined,
                                    }
                                  }
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      },
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": Object {},
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": Symbol(react.fragment),
                                      "timeZone": null,
                                    }
                                  }
                                  license$={
                                    Object {
                                      "subscribe": [Function],
                                    }
                                  }
                                  navigateToUrl={[MockFunction]}
                                  pollConfig={
                                    Object {
                                      "jobCompletionNotifier": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                      "jobsRefresh": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                    }
                                  }
                                  record={
                                    Object {
                                      "attempts": 1,
                                      "completed_at": "2020-04-14T17:21:08.223Z",
                                      "created_at": "2020-04-14T17:20:27.326Z",
                                      "created_by": "elastic",
                                      "csv_contains_formulas": undefined,
                                      "id": "k906958e1d4wcbae0c9hip1a",
                                      "max_attempts": 1,
                                      "max_size_reached": undefined,
                                      "object_title": "My Canvas Workpad",
                                      "object_type": "canvas workpad",
                                      "started_at": "2020-04-14T17:20:29.444Z",
                                      "status": "completed_with_warnings",
                                      "statusLabel": "Completed with warnings",
                                      "type": "printable_pdf",
                                      "warnings": Array [
                                        "An error occurred when trying to read the page for visualization panel info. You may need to increase 'xpack.reporting.capture.timeouts.waitForElements'. TimeoutError: waiting for selector \\"[data-shared-item],[data-shared-items-count]\\" failed: timeout 30000ms exceeded",
                                      ],
                                    }
                                  }
                                  redirect={[MockFunction]}
                                  toasts={
                                    Object {
                                      "add": [MockFunction],
                                      "addDanger": [MockFunction],
                                      "addError": [MockFunction],
                                      "addInfo": [MockFunction],
                                      "addSuccess": [MockFunction],
                                      "addWarning": [MockFunction],
                                      "get$": [MockFunction],
                                      "remove": [MockFunction],
                                    }
                                  }
                                  urlService={
                                    Object {
                                      "locators": Object {
                                        "get": [Function],
                                      },
                                    }
                                  }
                                />
                              </InjectIntl(ReportErrorButtonUi)>
                              <ReportInfoButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                jobId="k906958e1d4wcbae0c9hip1a"
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiButtonIcon
                                  aria-label="Show report info"
                                  color="primary"
                                  data-test-subj="reportInfoButton"
                                  iconType="iInCircle"
                                  onClick={[Function]}
                                >
                                  <button
                                    aria-label="Show report info"
                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                    data-test-subj="reportInfoButton"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiIcon
                                      aria-hidden="true"
                                      className="euiButtonIcon__icon"
                                      color="inherit"
                                      size="m"
                                      type="iInCircle"
                                    >
                                      <span
                                        aria-hidden="true"
                                        className="euiButtonIcon__icon"
                                        color="inherit"
                                        data-euiicon-type="iInCircle"
                                        size="m"
                                      />
                                    </EuiIcon>
                                  </button>
                                </EuiButtonIcon>
                              </ReportInfoButton>
                            </div>
                          </div>
                        </CustomItemAction>
                      </ExpandedItemActions>
                    </div>
                  </td>
                </EuiTableRowCell>
              </tr>
            </EuiTableRow>
            <EuiTableRow
              hasActions={true}
              isSelectable={true}
              isSelected={false}
            >
              <tr
                className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
              >
                <EuiTableRowCellCheckbox
                  key="_selection_column_k9067y2a1d4wcbae0cad38n0"
                >
                  <td
                    className="euiTableRowCellCheckbox"
                  >
                    <div
                      className="euiTableCellContent"
                    >
                      <EuiI18n
                        default="Select this row"
                        token="euiBasicTable.selectThisRow"
                      >
                        <EuiCheckbox
                          aria-label="Select this row"
                          checked={false}
                          compressed={false}
                          data-test-subj="checkboxSelectRow-k9067y2a1d4wcbae0cad38n0"
                          disabled={false}
                          id="_selection_column_k9067y2a1d4wcbae0cad38n0-checkbox"
                          indeterminate={false}
                          onChange={[Function]}
                          title="Select this row"
                          type="inList"
                        >
                          <div
                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                          >
                            <input
                              aria-label="Select this row"
                              checked={false}
                              className="euiCheckbox__input"
                              data-test-subj="checkboxSelectRow-k9067y2a1d4wcbae0cad38n0"
                              disabled={false}
                              id="_selection_column_k9067y2a1d4wcbae0cad38n0-checkbox"
                              onChange={[Function]}
                              title="Select this row"
                              type="checkbox"
                            />
                            <div
                              className="euiCheckbox__square"
                            />
                          </div>
                        </EuiCheckbox>
                      </EuiI18n>
                    </div>
                  </td>
                </EuiTableRowCellCheckbox>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_object_title_k9067y2a1d4wcbae0cad38n0_0"
                  mobileOptions={
                    Object {
                      "header": "Report",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Report
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        data-test-subj="reportingListItemObjectTitle"
                        key=".0"
                      >
                        <div>
                          My Canvas Workpad
                        </div>
                        <EuiText
                          size="s"
                        >
                          <div
                            className="euiText euiText--small"
                          >
                            <EuiTextColor
                              color="subdued"
                            >
                              <span
                                className="euiTextColor euiTextColor--subdued"
                              >
                                canvas workpad
                              </span>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_created_at_k9067y2a1d4wcbae0cad38n0_1"
                  mobileOptions={
                    Object {
                      "header": "Created at",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Created at
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <div>
                          2020-04-14 @ 01:19 PM
                        </div>
                        <span>
                          elastic
                        </span>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_status_k9067y2a1d4wcbae0cad38n0_2"
                  mobileOptions={
                    Object {
                      "header": "Status",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Status
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <FormattedMessage
                          defaultMessage="{statusLabel} at {statusTimestamp}"
                          id="xpack.reporting.listing.tableValue.statusDetail.statusTimestampText"
                          values={
                            Object {
                              "statusLabel": "Completed",
                              "statusTimestamp": <span
                                className="eui-textNoWrap"
                              >
                                2020-04-14 @ 01:19 PM
                              </span>,
                            }
                          }
                        >
                          Completed at 
                          <span
                            className="eui-textNoWrap"
                          >
                            2020-04-14 @ 01:19 PM
                          </span>
                        </FormattedMessage>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="right"
                  hasActions={true}
                  key="record_actions_k9067y2a1d4wcbae0cad38n0_3"
                  showOnHover={true}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell euiTableRowCell--hasActions"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                    >
                      <ExpandedItemActions
                        actionEnabled={[Function]}
                        actions={
                          Array [
                            Object {
                              "render": [Function],
                            },
                          ]
                        }
                        className="euiTableCellContent__hoverItem"
                        item={
                          Object {
                            "attempts": 1,
                            "completed_at": "2020-04-14T17:19:53.244Z",
                            "created_at": "2020-04-14T17:19:31.379Z",
                            "created_by": "elastic",
                            "csv_contains_formulas": undefined,
                            "id": "k9067y2a1d4wcbae0cad38n0",
                            "max_attempts": 1,
                            "max_size_reached": undefined,
                            "object_title": "My Canvas Workpad",
                            "object_type": "canvas workpad",
                            "started_at": "2020-04-14T17:19:39.883Z",
                            "status": "completed",
                            "statusLabel": "Completed",
                            "type": "printable_pdf",
                            "warnings": undefined,
                          }
                        }
                        itemId="k9067y2a1d4wcbae0cad38n0"
                        key=".0"
                      >
                        <CustomItemAction
                          action={
                            Object {
                              "render": [Function],
                            }
                          }
                          className="euiTableCellContent__hoverItem"
                          enabled={true}
                          index={0}
                          item={
                            Object {
                              "attempts": 1,
                              "completed_at": "2020-04-14T17:19:53.244Z",
                              "created_at": "2020-04-14T17:19:31.379Z",
                              "created_by": "elastic",
                              "csv_contains_formulas": undefined,
                              "id": "k9067y2a1d4wcbae0cad38n0",
                              "max_attempts": 1,
                              "max_size_reached": undefined,
                              "object_title": "My Canvas Workpad",
                              "object_type": "canvas workpad",
                              "started_at": "2020-04-14T17:19:39.883Z",
                              "status": "completed",
                              "statusLabel": "Completed",
                              "type": "printable_pdf",
                              "warnings": undefined,
                            }
                          }
                          key="item_action_k9067y2a1d4wcbae0cad38n0_0"
                        >
                          <div
                            className="euiTableCellContent__hoverItem"
                          >
                            <div
                              onBlur={[Function]}
                              onFocus={[Function]}
                            >
                              <ReportDownloadButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T17:19:53.244Z",
                                    "created_at": "2020-04-14T17:19:31.379Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k9067y2a1d4wcbae0cad38n0",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T17:19:39.883Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiToolTip
                                  content="Download report"
                                  delay="regular"
                                  position="top"
                                >
                                  <span
                                    className="euiToolTipAnchor"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <EuiButtonIcon
                                      aria-label="Download report"
                                      iconType="importAction"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                    >
                                      <button
                                        aria-label="Download report"
                                        className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        type="button"
                                      >
                                        <EuiIcon
                                          aria-hidden="true"
                                          className="euiButtonIcon__icon"
                                          color="inherit"
                                          size="m"
                                          type="importAction"
                                        >
                                          <span
                                            aria-hidden="true"
                                            className="euiButtonIcon__icon"
                                            color="inherit"
                                            data-euiicon-type="importAction"
                                            size="m"
                                          />
                                        </EuiIcon>
                                      </button>
                                    </EuiButtonIcon>
                                  </span>
                                </EuiToolTip>
                              </ReportDownloadButton>
                              <InjectIntl(ReportErrorButtonUi)
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T17:19:53.244Z",
                                    "created_at": "2020-04-14T17:19:31.379Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k9067y2a1d4wcbae0cad38n0",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T17:19:39.883Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <ReportErrorButtonUi
                                  apiClient={
                                    Object {
                                      "list": [Function],
                                      "migrateReportingIndicesIlmPolicy": [MockFunction],
                                      "total": [Function],
                                    }
                                  }
                                  ilmPolicyContextValue={
                                    Object {
                                      "isLoading": false,
                                      "recheckStatus": [Function],
                                      "status": undefined,
                                    }
                                  }
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      },
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": Object {},
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": Symbol(react.fragment),
                                      "timeZone": null,
                                    }
                                  }
                                  license$={
                                    Object {
                                      "subscribe": [Function],
                                    }
                                  }
                                  navigateToUrl={[MockFunction]}
                                  pollConfig={
                                    Object {
                                      "jobCompletionNotifier": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                      "jobsRefresh": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                    }
                                  }
                                  record={
                                    Object {
                                      "attempts": 1,
                                      "completed_at": "2020-04-14T17:19:53.244Z",
                                      "created_at": "2020-04-14T17:19:31.379Z",
                                      "created_by": "elastic",
                                      "csv_contains_formulas": undefined,
                                      "id": "k9067y2a1d4wcbae0cad38n0",
                                      "max_attempts": 1,
                                      "max_size_reached": undefined,
                                      "object_title": "My Canvas Workpad",
                                      "object_type": "canvas workpad",
                                      "started_at": "2020-04-14T17:19:39.883Z",
                                      "status": "completed",
                                      "statusLabel": "Completed",
                                      "type": "printable_pdf",
                                      "warnings": undefined,
                                    }
                                  }
                                  redirect={[MockFunction]}
                                  toasts={
                                    Object {
                                      "add": [MockFunction],
                                      "addDanger": [MockFunction],
                                      "addError": [MockFunction],
                                      "addInfo": [MockFunction],
                                      "addSuccess": [MockFunction],
                                      "addWarning": [MockFunction],
                                      "get$": [MockFunction],
                                      "remove": [MockFunction],
                                    }
                                  }
                                  urlService={
                                    Object {
                                      "locators": Object {
                                        "get": [Function],
                                      },
                                    }
                                  }
                                />
                              </InjectIntl(ReportErrorButtonUi)>
                              <ReportInfoButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                jobId="k9067y2a1d4wcbae0cad38n0"
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiButtonIcon
                                  aria-label="Show report info"
                                  color="primary"
                                  data-test-subj="reportInfoButton"
                                  iconType="iInCircle"
                                  onClick={[Function]}
                                >
                                  <button
                                    aria-label="Show report info"
                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                    data-test-subj="reportInfoButton"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiIcon
                                      aria-hidden="true"
                                      className="euiButtonIcon__icon"
                                      color="inherit"
                                      size="m"
                                      type="iInCircle"
                                    >
                                      <span
                                        aria-hidden="true"
                                        className="euiButtonIcon__icon"
                                        color="inherit"
                                        data-euiicon-type="iInCircle"
                                        size="m"
                                      />
                                    </EuiIcon>
                                  </button>
                                </EuiButtonIcon>
                              </ReportInfoButton>
                            </div>
                          </div>
                        </CustomItemAction>
                      </ExpandedItemActions>
                    </div>
                  </td>
                </EuiTableRowCell>
              </tr>
            </EuiTableRow>
            <EuiTableRow
              hasActions={true}
              isSelectable={true}
              isSelected={false}
            >
              <tr
                className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
              >
                <EuiTableRowCellCheckbox
                  key="_selection_column_k9067s1m1d4wcbae0cdnvcms"
                >
                  <td
                    className="euiTableRowCellCheckbox"
                  >
                    <div
                      className="euiTableCellContent"
                    >
                      <EuiI18n
                        default="Select this row"
                        token="euiBasicTable.selectThisRow"
                      >
                        <EuiCheckbox
                          aria-label="Select this row"
                          checked={false}
                          compressed={false}
                          data-test-subj="checkboxSelectRow-k9067s1m1d4wcbae0cdnvcms"
                          disabled={false}
                          id="_selection_column_k9067s1m1d4wcbae0cdnvcms-checkbox"
                          indeterminate={false}
                          onChange={[Function]}
                          title="Select this row"
                          type="inList"
                        >
                          <div
                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                          >
                            <input
                              aria-label="Select this row"
                              checked={false}
                              className="euiCheckbox__input"
                              data-test-subj="checkboxSelectRow-k9067s1m1d4wcbae0cdnvcms"
                              disabled={false}
                              id="_selection_column_k9067s1m1d4wcbae0cdnvcms-checkbox"
                              onChange={[Function]}
                              title="Select this row"
                              type="checkbox"
                            />
                            <div
                              className="euiCheckbox__square"
                            />
                          </div>
                        </EuiCheckbox>
                      </EuiI18n>
                    </div>
                  </td>
                </EuiTableRowCellCheckbox>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_object_title_k9067s1m1d4wcbae0cdnvcms_0"
                  mobileOptions={
                    Object {
                      "header": "Report",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Report
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        data-test-subj="reportingListItemObjectTitle"
                        key=".0"
                      >
                        <div>
                          My Canvas Workpad
                        </div>
                        <EuiText
                          size="s"
                        >
                          <div
                            className="euiText euiText--small"
                          >
                            <EuiTextColor
                              color="subdued"
                            >
                              <span
                                className="euiTextColor euiTextColor--subdued"
                              >
                                canvas workpad
                              </span>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_created_at_k9067s1m1d4wcbae0cdnvcms_1"
                  mobileOptions={
                    Object {
                      "header": "Created at",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Created at
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <div>
                          2020-04-14 @ 01:19 PM
                        </div>
                        <span>
                          elastic
                        </span>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_status_k9067s1m1d4wcbae0cdnvcms_2"
                  mobileOptions={
                    Object {
                      "header": "Status",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Status
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <FormattedMessage
                          defaultMessage="{statusLabel} at {statusTimestamp}"
                          id="xpack.reporting.listing.tableValue.statusDetail.statusTimestampText"
                          values={
                            Object {
                              "statusLabel": "Completed",
                              "statusTimestamp": <span
                                className="eui-textNoWrap"
                              >
                                2020-04-14 @ 01:19 PM
                              </span>,
                            }
                          }
                        >
                          Completed at 
                          <span
                            className="eui-textNoWrap"
                          >
                            2020-04-14 @ 01:19 PM
                          </span>
                        </FormattedMessage>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="right"
                  hasActions={true}
                  key="record_actions_k9067s1m1d4wcbae0cdnvcms_3"
                  showOnHover={true}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell euiTableRowCell--hasActions"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                    >
                      <ExpandedItemActions
                        actionEnabled={[Function]}
                        actions={
                          Array [
                            Object {
                              "render": [Function],
                            },
                          ]
                        }
                        className="euiTableCellContent__hoverItem"
                        item={
                          Object {
                            "attempts": 1,
                            "completed_at": "2020-04-14T17:19:36.822Z",
                            "created_at": "2020-04-14T17:19:23.578Z",
                            "created_by": "elastic",
                            "csv_contains_formulas": undefined,
                            "id": "k9067s1m1d4wcbae0cdnvcms",
                            "max_attempts": 1,
                            "max_size_reached": undefined,
                            "object_title": "My Canvas Workpad",
                            "object_type": "canvas workpad",
                            "started_at": "2020-04-14T17:19:25.247Z",
                            "status": "completed",
                            "statusLabel": "Completed",
                            "type": "printable_pdf",
                            "warnings": undefined,
                          }
                        }
                        itemId="k9067s1m1d4wcbae0cdnvcms"
                        key=".0"
                      >
                        <CustomItemAction
                          action={
                            Object {
                              "render": [Function],
                            }
                          }
                          className="euiTableCellContent__hoverItem"
                          enabled={true}
                          index={0}
                          item={
                            Object {
                              "attempts": 1,
                              "completed_at": "2020-04-14T17:19:36.822Z",
                              "created_at": "2020-04-14T17:19:23.578Z",
                              "created_by": "elastic",
                              "csv_contains_formulas": undefined,
                              "id": "k9067s1m1d4wcbae0cdnvcms",
                              "max_attempts": 1,
                              "max_size_reached": undefined,
                              "object_title": "My Canvas Workpad",
                              "object_type": "canvas workpad",
                              "started_at": "2020-04-14T17:19:25.247Z",
                              "status": "completed",
                              "statusLabel": "Completed",
                              "type": "printable_pdf",
                              "warnings": undefined,
                            }
                          }
                          key="item_action_k9067s1m1d4wcbae0cdnvcms_0"
                        >
                          <div
                            className="euiTableCellContent__hoverItem"
                          >
                            <div
                              onBlur={[Function]}
                              onFocus={[Function]}
                            >
                              <ReportDownloadButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T17:19:36.822Z",
                                    "created_at": "2020-04-14T17:19:23.578Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k9067s1m1d4wcbae0cdnvcms",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T17:19:25.247Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiToolTip
                                  content="Download report"
                                  delay="regular"
                                  position="top"
                                >
                                  <span
                                    className="euiToolTipAnchor"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <EuiButtonIcon
                                      aria-label="Download report"
                                      iconType="importAction"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                    >
                                      <button
                                        aria-label="Download report"
                                        className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        type="button"
                                      >
                                        <EuiIcon
                                          aria-hidden="true"
                                          className="euiButtonIcon__icon"
                                          color="inherit"
                                          size="m"
                                          type="importAction"
                                        >
                                          <span
                                            aria-hidden="true"
                                            className="euiButtonIcon__icon"
                                            color="inherit"
                                            data-euiicon-type="importAction"
                                            size="m"
                                          />
                                        </EuiIcon>
                                      </button>
                                    </EuiButtonIcon>
                                  </span>
                                </EuiToolTip>
                              </ReportDownloadButton>
                              <InjectIntl(ReportErrorButtonUi)
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T17:19:36.822Z",
                                    "created_at": "2020-04-14T17:19:23.578Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k9067s1m1d4wcbae0cdnvcms",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T17:19:25.247Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <ReportErrorButtonUi
                                  apiClient={
                                    Object {
                                      "list": [Function],
                                      "migrateReportingIndicesIlmPolicy": [MockFunction],
                                      "total": [Function],
                                    }
                                  }
                                  ilmPolicyContextValue={
                                    Object {
                                      "isLoading": false,
                                      "recheckStatus": [Function],
                                      "status": undefined,
                                    }
                                  }
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      },
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": Object {},
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": Symbol(react.fragment),
                                      "timeZone": null,
                                    }
                                  }
                                  license$={
                                    Object {
                                      "subscribe": [Function],
                                    }
                                  }
                                  navigateToUrl={[MockFunction]}
                                  pollConfig={
                                    Object {
                                      "jobCompletionNotifier": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                      "jobsRefresh": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                    }
                                  }
                                  record={
                                    Object {
                                      "attempts": 1,
                                      "completed_at": "2020-04-14T17:19:36.822Z",
                                      "created_at": "2020-04-14T17:19:23.578Z",
                                      "created_by": "elastic",
                                      "csv_contains_formulas": undefined,
                                      "id": "k9067s1m1d4wcbae0cdnvcms",
                                      "max_attempts": 1,
                                      "max_size_reached": undefined,
                                      "object_title": "My Canvas Workpad",
                                      "object_type": "canvas workpad",
                                      "started_at": "2020-04-14T17:19:25.247Z",
                                      "status": "completed",
                                      "statusLabel": "Completed",
                                      "type": "printable_pdf",
                                      "warnings": undefined,
                                    }
                                  }
                                  redirect={[MockFunction]}
                                  toasts={
                                    Object {
                                      "add": [MockFunction],
                                      "addDanger": [MockFunction],
                                      "addError": [MockFunction],
                                      "addInfo": [MockFunction],
                                      "addSuccess": [MockFunction],
                                      "addWarning": [MockFunction],
                                      "get$": [MockFunction],
                                      "remove": [MockFunction],
                                    }
                                  }
                                  urlService={
                                    Object {
                                      "locators": Object {
                                        "get": [Function],
                                      },
                                    }
                                  }
                                />
                              </InjectIntl(ReportErrorButtonUi)>
                              <ReportInfoButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                jobId="k9067s1m1d4wcbae0cdnvcms"
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiButtonIcon
                                  aria-label="Show report info"
                                  color="primary"
                                  data-test-subj="reportInfoButton"
                                  iconType="iInCircle"
                                  onClick={[Function]}
                                >
                                  <button
                                    aria-label="Show report info"
                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                    data-test-subj="reportInfoButton"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiIcon
                                      aria-hidden="true"
                                      className="euiButtonIcon__icon"
                                      color="inherit"
                                      size="m"
                                      type="iInCircle"
                                    >
                                      <span
                                        aria-hidden="true"
                                        className="euiButtonIcon__icon"
                                        color="inherit"
                                        data-euiicon-type="iInCircle"
                                        size="m"
                                      />
                                    </EuiIcon>
                                  </button>
                                </EuiButtonIcon>
                              </ReportInfoButton>
                            </div>
                          </div>
                        </CustomItemAction>
                      </ExpandedItemActions>
                    </div>
                  </td>
                </EuiTableRowCell>
              </tr>
            </EuiTableRow>
            <EuiTableRow
              hasActions={true}
              isSelectable={true}
              isSelected={false}
            >
              <tr
                className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
              >
                <EuiTableRowCellCheckbox
                  key="_selection_column_k9065q3s1d4wcbae0c00fxlh"
                >
                  <td
                    className="euiTableRowCellCheckbox"
                  >
                    <div
                      className="euiTableCellContent"
                    >
                      <EuiI18n
                        default="Select this row"
                        token="euiBasicTable.selectThisRow"
                      >
                        <EuiCheckbox
                          aria-label="Select this row"
                          checked={false}
                          compressed={false}
                          data-test-subj="checkboxSelectRow-k9065q3s1d4wcbae0c00fxlh"
                          disabled={false}
                          id="_selection_column_k9065q3s1d4wcbae0c00fxlh-checkbox"
                          indeterminate={false}
                          onChange={[Function]}
                          title="Select this row"
                          type="inList"
                        >
                          <div
                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                          >
                            <input
                              aria-label="Select this row"
                              checked={false}
                              className="euiCheckbox__input"
                              data-test-subj="checkboxSelectRow-k9065q3s1d4wcbae0c00fxlh"
                              disabled={false}
                              id="_selection_column_k9065q3s1d4wcbae0c00fxlh-checkbox"
                              onChange={[Function]}
                              title="Select this row"
                              type="checkbox"
                            />
                            <div
                              className="euiCheckbox__square"
                            />
                          </div>
                        </EuiCheckbox>
                      </EuiI18n>
                    </div>
                  </td>
                </EuiTableRowCellCheckbox>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_object_title_k9065q3s1d4wcbae0c00fxlh_0"
                  mobileOptions={
                    Object {
                      "header": "Report",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Report
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        data-test-subj="reportingListItemObjectTitle"
                        key=".0"
                      >
                        <div>
                          My Canvas Workpad
                        </div>
                        <EuiText
                          size="s"
                        >
                          <div
                            className="euiText euiText--small"
                          >
                            <EuiTextColor
                              color="subdued"
                            >
                              <span
                                className="euiTextColor euiTextColor--subdued"
                              >
                                canvas workpad
                              </span>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_created_at_k9065q3s1d4wcbae0c00fxlh_1"
                  mobileOptions={
                    Object {
                      "header": "Created at",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Created at
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <div>
                          2020-04-14 @ 01:17 PM
                        </div>
                        <span>
                          elastic
                        </span>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_status_k9065q3s1d4wcbae0c00fxlh_2"
                  mobileOptions={
                    Object {
                      "header": "Status",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Status
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <FormattedMessage
                          defaultMessage="{statusLabel} at {statusTimestamp}"
                          id="xpack.reporting.listing.tableValue.statusDetail.statusTimestampText"
                          values={
                            Object {
                              "statusLabel": "Completed",
                              "statusTimestamp": <span
                                className="eui-textNoWrap"
                              >
                                2020-04-14 @ 01:18 PM
                              </span>,
                            }
                          }
                        >
                          Completed at 
                          <span
                            className="eui-textNoWrap"
                          >
                            2020-04-14 @ 01:18 PM
                          </span>
                        </FormattedMessage>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="right"
                  hasActions={true}
                  key="record_actions_k9065q3s1d4wcbae0c00fxlh_3"
                  showOnHover={true}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell euiTableRowCell--hasActions"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                    >
                      <ExpandedItemActions
                        actionEnabled={[Function]}
                        actions={
                          Array [
                            Object {
                              "render": [Function],
                            },
                          ]
                        }
                        className="euiTableCellContent__hoverItem"
                        item={
                          Object {
                            "attempts": 1,
                            "completed_at": "2020-04-14T17:18:03.910Z",
                            "created_at": "2020-04-14T17:17:47.752Z",
                            "created_by": "elastic",
                            "csv_contains_formulas": undefined,
                            "id": "k9065q3s1d4wcbae0c00fxlh",
                            "max_attempts": 1,
                            "max_size_reached": undefined,
                            "object_title": "My Canvas Workpad",
                            "object_type": "canvas workpad",
                            "started_at": "2020-04-14T17:17:50.379Z",
                            "status": "completed",
                            "statusLabel": "Completed",
                            "type": "printable_pdf",
                            "warnings": undefined,
                          }
                        }
                        itemId="k9065q3s1d4wcbae0c00fxlh"
                        key=".0"
                      >
                        <CustomItemAction
                          action={
                            Object {
                              "render": [Function],
                            }
                          }
                          className="euiTableCellContent__hoverItem"
                          enabled={true}
                          index={0}
                          item={
                            Object {
                              "attempts": 1,
                              "completed_at": "2020-04-14T17:18:03.910Z",
                              "created_at": "2020-04-14T17:17:47.752Z",
                              "created_by": "elastic",
                              "csv_contains_formulas": undefined,
                              "id": "k9065q3s1d4wcbae0c00fxlh",
                              "max_attempts": 1,
                              "max_size_reached": undefined,
                              "object_title": "My Canvas Workpad",
                              "object_type": "canvas workpad",
                              "started_at": "2020-04-14T17:17:50.379Z",
                              "status": "completed",
                              "statusLabel": "Completed",
                              "type": "printable_pdf",
                              "warnings": undefined,
                            }
                          }
                          key="item_action_k9065q3s1d4wcbae0c00fxlh_0"
                        >
                          <div
                            className="euiTableCellContent__hoverItem"
                          >
                            <div
                              onBlur={[Function]}
                              onFocus={[Function]}
                            >
                              <ReportDownloadButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T17:18:03.910Z",
                                    "created_at": "2020-04-14T17:17:47.752Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k9065q3s1d4wcbae0c00fxlh",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T17:17:50.379Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiToolTip
                                  content="Download report"
                                  delay="regular"
                                  position="top"
                                >
                                  <span
                                    className="euiToolTipAnchor"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <EuiButtonIcon
                                      aria-label="Download report"
                                      iconType="importAction"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                    >
                                      <button
                                        aria-label="Download report"
                                        className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        type="button"
                                      >
                                        <EuiIcon
                                          aria-hidden="true"
                                          className="euiButtonIcon__icon"
                                          color="inherit"
                                          size="m"
                                          type="importAction"
                                        >
                                          <span
                                            aria-hidden="true"
                                            className="euiButtonIcon__icon"
                                            color="inherit"
                                            data-euiicon-type="importAction"
                                            size="m"
                                          />
                                        </EuiIcon>
                                      </button>
                                    </EuiButtonIcon>
                                  </span>
                                </EuiToolTip>
                              </ReportDownloadButton>
                              <InjectIntl(ReportErrorButtonUi)
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T17:18:03.910Z",
                                    "created_at": "2020-04-14T17:17:47.752Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k9065q3s1d4wcbae0c00fxlh",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T17:17:50.379Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <ReportErrorButtonUi
                                  apiClient={
                                    Object {
                                      "list": [Function],
                                      "migrateReportingIndicesIlmPolicy": [MockFunction],
                                      "total": [Function],
                                    }
                                  }
                                  ilmPolicyContextValue={
                                    Object {
                                      "isLoading": false,
                                      "recheckStatus": [Function],
                                      "status": undefined,
                                    }
                                  }
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      },
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": Object {},
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": Symbol(react.fragment),
                                      "timeZone": null,
                                    }
                                  }
                                  license$={
                                    Object {
                                      "subscribe": [Function],
                                    }
                                  }
                                  navigateToUrl={[MockFunction]}
                                  pollConfig={
                                    Object {
                                      "jobCompletionNotifier": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                      "jobsRefresh": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                    }
                                  }
                                  record={
                                    Object {
                                      "attempts": 1,
                                      "completed_at": "2020-04-14T17:18:03.910Z",
                                      "created_at": "2020-04-14T17:17:47.752Z",
                                      "created_by": "elastic",
                                      "csv_contains_formulas": undefined,
                                      "id": "k9065q3s1d4wcbae0c00fxlh",
                                      "max_attempts": 1,
                                      "max_size_reached": undefined,
                                      "object_title": "My Canvas Workpad",
                                      "object_type": "canvas workpad",
                                      "started_at": "2020-04-14T17:17:50.379Z",
                                      "status": "completed",
                                      "statusLabel": "Completed",
                                      "type": "printable_pdf",
                                      "warnings": undefined,
                                    }
                                  }
                                  redirect={[MockFunction]}
                                  toasts={
                                    Object {
                                      "add": [MockFunction],
                                      "addDanger": [MockFunction],
                                      "addError": [MockFunction],
                                      "addInfo": [MockFunction],
                                      "addSuccess": [MockFunction],
                                      "addWarning": [MockFunction],
                                      "get$": [MockFunction],
                                      "remove": [MockFunction],
                                    }
                                  }
                                  urlService={
                                    Object {
                                      "locators": Object {
                                        "get": [Function],
                                      },
                                    }
                                  }
                                />
                              </InjectIntl(ReportErrorButtonUi)>
                              <ReportInfoButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                jobId="k9065q3s1d4wcbae0c00fxlh"
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiButtonIcon
                                  aria-label="Show report info"
                                  color="primary"
                                  data-test-subj="reportInfoButton"
                                  iconType="iInCircle"
                                  onClick={[Function]}
                                >
                                  <button
                                    aria-label="Show report info"
                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                    data-test-subj="reportInfoButton"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiIcon
                                      aria-hidden="true"
                                      className="euiButtonIcon__icon"
                                      color="inherit"
                                      size="m"
                                      type="iInCircle"
                                    >
                                      <span
                                        aria-hidden="true"
                                        className="euiButtonIcon__icon"
                                        color="inherit"
                                        data-euiicon-type="iInCircle"
                                        size="m"
                                      />
                                    </EuiIcon>
                                  </button>
                                </EuiButtonIcon>
                              </ReportInfoButton>
                            </div>
                          </div>
                        </CustomItemAction>
                      </ExpandedItemActions>
                    </div>
                  </td>
                </EuiTableRowCell>
              </tr>
            </EuiTableRow>
            <EuiTableRow
              hasActions={true}
              isSelectable={true}
              isSelected={false}
            >
              <tr
                className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
              >
                <EuiTableRowCellCheckbox
                  key="_selection_column_k905zdw11d34cbae0c3y6tzh"
                >
                  <td
                    className="euiTableRowCellCheckbox"
                  >
                    <div
                      className="euiTableCellContent"
                    >
                      <EuiI18n
                        default="Select this row"
                        token="euiBasicTable.selectThisRow"
                      >
                        <EuiCheckbox
                          aria-label="Select this row"
                          checked={false}
                          compressed={false}
                          data-test-subj="checkboxSelectRow-k905zdw11d34cbae0c3y6tzh"
                          disabled={false}
                          id="_selection_column_k905zdw11d34cbae0c3y6tzh-checkbox"
                          indeterminate={false}
                          onChange={[Function]}
                          title="Select this row"
                          type="inList"
                        >
                          <div
                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                          >
                            <input
                              aria-label="Select this row"
                              checked={false}
                              className="euiCheckbox__input"
                              data-test-subj="checkboxSelectRow-k905zdw11d34cbae0c3y6tzh"
                              disabled={false}
                              id="_selection_column_k905zdw11d34cbae0c3y6tzh-checkbox"
                              onChange={[Function]}
                              title="Select this row"
                              type="checkbox"
                            />
                            <div
                              className="euiCheckbox__square"
                            />
                          </div>
                        </EuiCheckbox>
                      </EuiI18n>
                    </div>
                  </td>
                </EuiTableRowCellCheckbox>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_object_title_k905zdw11d34cbae0c3y6tzh_0"
                  mobileOptions={
                    Object {
                      "header": "Report",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Report
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        data-test-subj="reportingListItemObjectTitle"
                        key=".0"
                      >
                        <div>
                          My Canvas Workpad
                        </div>
                        <EuiText
                          size="s"
                        >
                          <div
                            className="euiText euiText--small"
                          >
                            <EuiTextColor
                              color="subdued"
                            >
                              <span
                                className="euiTextColor euiTextColor--subdued"
                              >
                                canvas workpad
                              </span>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_created_at_k905zdw11d34cbae0c3y6tzh_1"
                  mobileOptions={
                    Object {
                      "header": "Created at",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Created at
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <div>
                          2020-04-14 @ 01:12 PM
                        </div>
                        <span>
                          elastic
                        </span>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_status_k905zdw11d34cbae0c3y6tzh_2"
                  mobileOptions={
                    Object {
                      "header": "Status",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Status
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <FormattedMessage
                          defaultMessage="{statusLabel} at {statusTimestamp}"
                          id="xpack.reporting.listing.tableValue.statusDetail.statusTimestampText"
                          values={
                            Object {
                              "statusLabel": "Completed",
                              "statusTimestamp": <span
                                className="eui-textNoWrap"
                              >
                                2020-04-14 @ 01:13 PM
                              </span>,
                            }
                          }
                        >
                          Completed at 
                          <span
                            className="eui-textNoWrap"
                          >
                            2020-04-14 @ 01:13 PM
                          </span>
                        </FormattedMessage>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="right"
                  hasActions={true}
                  key="record_actions_k905zdw11d34cbae0c3y6tzh_3"
                  showOnHover={true}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell euiTableRowCell--hasActions"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                    >
                      <ExpandedItemActions
                        actionEnabled={[Function]}
                        actions={
                          Array [
                            Object {
                              "render": [Function],
                            },
                          ]
                        }
                        className="euiTableCellContent__hoverItem"
                        item={
                          Object {
                            "attempts": 1,
                            "completed_at": "2020-04-14T17:13:03.719Z",
                            "created_at": "2020-04-14T17:12:51.985Z",
                            "created_by": "elastic",
                            "csv_contains_formulas": undefined,
                            "id": "k905zdw11d34cbae0c3y6tzh",
                            "max_attempts": 1,
                            "max_size_reached": undefined,
                            "object_title": "My Canvas Workpad",
                            "object_type": "canvas workpad",
                            "started_at": "2020-04-14T17:12:52.431Z",
                            "status": "completed",
                            "statusLabel": "Completed",
                            "type": "printable_pdf",
                            "warnings": undefined,
                          }
                        }
                        itemId="k905zdw11d34cbae0c3y6tzh"
                        key=".0"
                      >
                        <CustomItemAction
                          action={
                            Object {
                              "render": [Function],
                            }
                          }
                          className="euiTableCellContent__hoverItem"
                          enabled={true}
                          index={0}
                          item={
                            Object {
                              "attempts": 1,
                              "completed_at": "2020-04-14T17:13:03.719Z",
                              "created_at": "2020-04-14T17:12:51.985Z",
                              "created_by": "elastic",
                              "csv_contains_formulas": undefined,
                              "id": "k905zdw11d34cbae0c3y6tzh",
                              "max_attempts": 1,
                              "max_size_reached": undefined,
                              "object_title": "My Canvas Workpad",
                              "object_type": "canvas workpad",
                              "started_at": "2020-04-14T17:12:52.431Z",
                              "status": "completed",
                              "statusLabel": "Completed",
                              "type": "printable_pdf",
                              "warnings": undefined,
                            }
                          }
                          key="item_action_k905zdw11d34cbae0c3y6tzh_0"
                        >
                          <div
                            className="euiTableCellContent__hoverItem"
                          >
                            <div
                              onBlur={[Function]}
                              onFocus={[Function]}
                            >
                              <ReportDownloadButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T17:13:03.719Z",
                                    "created_at": "2020-04-14T17:12:51.985Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k905zdw11d34cbae0c3y6tzh",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T17:12:52.431Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiToolTip
                                  content="Download report"
                                  delay="regular"
                                  position="top"
                                >
                                  <span
                                    className="euiToolTipAnchor"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <EuiButtonIcon
                                      aria-label="Download report"
                                      iconType="importAction"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                    >
                                      <button
                                        aria-label="Download report"
                                        className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        type="button"
                                      >
                                        <EuiIcon
                                          aria-hidden="true"
                                          className="euiButtonIcon__icon"
                                          color="inherit"
                                          size="m"
                                          type="importAction"
                                        >
                                          <span
                                            aria-hidden="true"
                                            className="euiButtonIcon__icon"
                                            color="inherit"
                                            data-euiicon-type="importAction"
                                            size="m"
                                          />
                                        </EuiIcon>
                                      </button>
                                    </EuiButtonIcon>
                                  </span>
                                </EuiToolTip>
                              </ReportDownloadButton>
                              <InjectIntl(ReportErrorButtonUi)
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-14T17:13:03.719Z",
                                    "created_at": "2020-04-14T17:12:51.985Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k905zdw11d34cbae0c3y6tzh",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "My Canvas Workpad",
                                    "object_type": "canvas workpad",
                                    "started_at": "2020-04-14T17:12:52.431Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "printable_pdf",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <ReportErrorButtonUi
                                  apiClient={
                                    Object {
                                      "list": [Function],
                                      "migrateReportingIndicesIlmPolicy": [MockFunction],
                                      "total": [Function],
                                    }
                                  }
                                  ilmPolicyContextValue={
                                    Object {
                                      "isLoading": false,
                                      "recheckStatus": [Function],
                                      "status": undefined,
                                    }
                                  }
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      },
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": Object {},
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": Symbol(react.fragment),
                                      "timeZone": null,
                                    }
                                  }
                                  license$={
                                    Object {
                                      "subscribe": [Function],
                                    }
                                  }
                                  navigateToUrl={[MockFunction]}
                                  pollConfig={
                                    Object {
                                      "jobCompletionNotifier": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                      "jobsRefresh": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                    }
                                  }
                                  record={
                                    Object {
                                      "attempts": 1,
                                      "completed_at": "2020-04-14T17:13:03.719Z",
                                      "created_at": "2020-04-14T17:12:51.985Z",
                                      "created_by": "elastic",
                                      "csv_contains_formulas": undefined,
                                      "id": "k905zdw11d34cbae0c3y6tzh",
                                      "max_attempts": 1,
                                      "max_size_reached": undefined,
                                      "object_title": "My Canvas Workpad",
                                      "object_type": "canvas workpad",
                                      "started_at": "2020-04-14T17:12:52.431Z",
                                      "status": "completed",
                                      "statusLabel": "Completed",
                                      "type": "printable_pdf",
                                      "warnings": undefined,
                                    }
                                  }
                                  redirect={[MockFunction]}
                                  toasts={
                                    Object {
                                      "add": [MockFunction],
                                      "addDanger": [MockFunction],
                                      "addError": [MockFunction],
                                      "addInfo": [MockFunction],
                                      "addSuccess": [MockFunction],
                                      "addWarning": [MockFunction],
                                      "get$": [MockFunction],
                                      "remove": [MockFunction],
                                    }
                                  }
                                  urlService={
                                    Object {
                                      "locators": Object {
                                        "get": [Function],
                                      },
                                    }
                                  }
                                />
                              </InjectIntl(ReportErrorButtonUi)>
                              <ReportInfoButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                jobId="k905zdw11d34cbae0c3y6tzh"
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiButtonIcon
                                  aria-label="Show report info"
                                  color="primary"
                                  data-test-subj="reportInfoButton"
                                  iconType="iInCircle"
                                  onClick={[Function]}
                                >
                                  <button
                                    aria-label="Show report info"
                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                    data-test-subj="reportInfoButton"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiIcon
                                      aria-hidden="true"
                                      className="euiButtonIcon__icon"
                                      color="inherit"
                                      size="m"
                                      type="iInCircle"
                                    >
                                      <span
                                        aria-hidden="true"
                                        className="euiButtonIcon__icon"
                                        color="inherit"
                                        data-euiicon-type="iInCircle"
                                        size="m"
                                      />
                                    </EuiIcon>
                                  </button>
                                </EuiButtonIcon>
                              </ReportInfoButton>
                            </div>
                          </div>
                        </CustomItemAction>
                      </ExpandedItemActions>
                    </div>
                  </td>
                </EuiTableRowCell>
              </tr>
            </EuiTableRow>
            <EuiTableRow
              hasActions={true}
              isSelectable={true}
              isSelected={false}
            >
              <tr
                className="euiTableRow euiTableRow-isSelectable euiTableRow-hasActions"
              >
                <EuiTableRowCellCheckbox
                  key="_selection_column_k8t4ylcb07mi9d006214ifyg"
                >
                  <td
                    className="euiTableRowCellCheckbox"
                  >
                    <div
                      className="euiTableCellContent"
                    >
                      <EuiI18n
                        default="Select this row"
                        token="euiBasicTable.selectThisRow"
                      >
                        <EuiCheckbox
                          aria-label="Select this row"
                          checked={false}
                          compressed={false}
                          data-test-subj="checkboxSelectRow-k8t4ylcb07mi9d006214ifyg"
                          disabled={false}
                          id="_selection_column_k8t4ylcb07mi9d006214ifyg-checkbox"
                          indeterminate={false}
                          onChange={[Function]}
                          title="Select this row"
                          type="inList"
                        >
                          <div
                            className="euiCheckbox euiCheckbox--inList euiCheckbox--noLabel"
                          >
                            <input
                              aria-label="Select this row"
                              checked={false}
                              className="euiCheckbox__input"
                              data-test-subj="checkboxSelectRow-k8t4ylcb07mi9d006214ifyg"
                              disabled={false}
                              id="_selection_column_k8t4ylcb07mi9d006214ifyg-checkbox"
                              onChange={[Function]}
                              title="Select this row"
                              type="checkbox"
                            />
                            <div
                              className="euiCheckbox__square"
                            />
                          </div>
                        </EuiCheckbox>
                      </EuiI18n>
                    </div>
                  </td>
                </EuiTableRowCellCheckbox>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_object_title_k8t4ylcb07mi9d006214ifyg_0"
                  mobileOptions={
                    Object {
                      "header": "Report",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Report
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        data-test-subj="reportingListItemObjectTitle"
                        key=".0"
                      >
                        <div>
                          count
                        </div>
                        <EuiText
                          size="s"
                        >
                          <div
                            className="euiText euiText--small"
                          >
                            <EuiTextColor
                              color="subdued"
                            >
                              <span
                                className="euiTextColor euiTextColor--subdued"
                              >
                                visualization
                              </span>
                            </EuiTextColor>
                          </div>
                        </EuiText>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_created_at_k8t4ylcb07mi9d006214ifyg_1"
                  mobileOptions={
                    Object {
                      "header": "Created at",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Created at
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <div>
                          2020-04-09 @ 03:09 PM
                        </div>
                        <span>
                          elastic
                        </span>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="left"
                  key="_data_column_status_k8t4ylcb07mi9d006214ifyg_2"
                  mobileOptions={
                    Object {
                      "header": "Status",
                      "render": undefined,
                    }
                  }
                  setScopeRow={false}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableRowCell__mobileHeader euiTableRowCell--hideForDesktop"
                    >
                      Status
                    </div>
                    <div
                      className="euiTableCellContent euiTableCellContent--overflowingContent"
                    >
                      <div
                        className=""
                        key=".0"
                      >
                        <FormattedMessage
                          defaultMessage="{statusLabel} at {statusTimestamp}"
                          id="xpack.reporting.listing.tableValue.statusDetail.statusTimestampText"
                          values={
                            Object {
                              "statusLabel": "Completed",
                              "statusTimestamp": <span
                                className="eui-textNoWrap"
                              >
                                2020-04-09 @ 03:10 PM
                              </span>,
                            }
                          }
                        >
                          Completed at 
                          <span
                            className="eui-textNoWrap"
                          >
                            2020-04-09 @ 03:10 PM
                          </span>
                        </FormattedMessage>
                      </div>
                    </div>
                  </td>
                </EuiTableRowCell>
                <EuiTableRowCell
                  align="right"
                  hasActions={true}
                  key="record_actions_k8t4ylcb07mi9d006214ifyg_3"
                  showOnHover={true}
                  textOnly={false}
                >
                  <td
                    className="euiTableRowCell euiTableRowCell--hasActions"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <div
                      className="euiTableCellContent euiTableCellContent--alignRight euiTableCellContent--showOnHover euiTableCellContent--overflowingContent"
                    >
                      <ExpandedItemActions
                        actionEnabled={[Function]}
                        actions={
                          Array [
                            Object {
                              "render": [Function],
                            },
                          ]
                        }
                        className="euiTableCellContent__hoverItem"
                        item={
                          Object {
                            "attempts": 1,
                            "completed_at": "2020-04-09T19:10:10.049Z",
                            "created_at": "2020-04-09T19:09:52.139Z",
                            "created_by": "elastic",
                            "csv_contains_formulas": undefined,
                            "id": "k8t4ylcb07mi9d006214ifyg",
                            "max_attempts": 1,
                            "max_size_reached": undefined,
                            "object_title": "count",
                            "object_type": "visualization",
                            "started_at": "2020-04-09T19:09:54.570Z",
                            "status": "completed",
                            "statusLabel": "Completed",
                            "type": "PNG",
                            "warnings": undefined,
                          }
                        }
                        itemId="k8t4ylcb07mi9d006214ifyg"
                        key=".0"
                      >
                        <CustomItemAction
                          action={
                            Object {
                              "render": [Function],
                            }
                          }
                          className="euiTableCellContent__hoverItem"
                          enabled={true}
                          index={0}
                          item={
                            Object {
                              "attempts": 1,
                              "completed_at": "2020-04-09T19:10:10.049Z",
                              "created_at": "2020-04-09T19:09:52.139Z",
                              "created_by": "elastic",
                              "csv_contains_formulas": undefined,
                              "id": "k8t4ylcb07mi9d006214ifyg",
                              "max_attempts": 1,
                              "max_size_reached": undefined,
                              "object_title": "count",
                              "object_type": "visualization",
                              "started_at": "2020-04-09T19:09:54.570Z",
                              "status": "completed",
                              "statusLabel": "Completed",
                              "type": "PNG",
                              "warnings": undefined,
                            }
                          }
                          key="item_action_k8t4ylcb07mi9d006214ifyg_0"
                        >
                          <div
                            className="euiTableCellContent__hoverItem"
                          >
                            <div
                              onBlur={[Function]}
                              onFocus={[Function]}
                            >
                              <ReportDownloadButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-09T19:10:10.049Z",
                                    "created_at": "2020-04-09T19:09:52.139Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k8t4ylcb07mi9d006214ifyg",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "count",
                                    "object_type": "visualization",
                                    "started_at": "2020-04-09T19:09:54.570Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "PNG",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiToolTip
                                  content="Download report"
                                  delay="regular"
                                  position="top"
                                >
                                  <span
                                    className="euiToolTipAnchor"
                                    onKeyUp={[Function]}
                                    onMouseOut={[Function]}
                                    onMouseOver={[Function]}
                                  >
                                    <EuiButtonIcon
                                      aria-label="Download report"
                                      iconType="importAction"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onFocus={[Function]}
                                    >
                                      <button
                                        aria-label="Download report"
                                        className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        type="button"
                                      >
                                        <EuiIcon
                                          aria-hidden="true"
                                          className="euiButtonIcon__icon"
                                          color="inherit"
                                          size="m"
                                          type="importAction"
                                        >
                                          <span
                                            aria-hidden="true"
                                            className="euiButtonIcon__icon"
                                            color="inherit"
                                            data-euiicon-type="importAction"
                                            size="m"
                                          />
                                        </EuiIcon>
                                      </button>
                                    </EuiButtonIcon>
                                  </span>
                                </EuiToolTip>
                              </ReportDownloadButton>
                              <InjectIntl(ReportErrorButtonUi)
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                record={
                                  Object {
                                    "attempts": 1,
                                    "completed_at": "2020-04-09T19:10:10.049Z",
                                    "created_at": "2020-04-09T19:09:52.139Z",
                                    "created_by": "elastic",
                                    "csv_contains_formulas": undefined,
                                    "id": "k8t4ylcb07mi9d006214ifyg",
                                    "max_attempts": 1,
                                    "max_size_reached": undefined,
                                    "object_title": "count",
                                    "object_type": "visualization",
                                    "started_at": "2020-04-09T19:09:54.570Z",
                                    "status": "completed",
                                    "statusLabel": "Completed",
                                    "type": "PNG",
                                    "warnings": undefined,
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <ReportErrorButtonUi
                                  apiClient={
                                    Object {
                                      "list": [Function],
                                      "migrateReportingIndicesIlmPolicy": [MockFunction],
                                      "total": [Function],
                                    }
                                  }
                                  ilmPolicyContextValue={
                                    Object {
                                      "isLoading": false,
                                      "recheckStatus": [Function],
                                      "status": undefined,
                                    }
                                  }
                                  intl={
                                    Object {
                                      "defaultFormats": Object {},
                                      "defaultLocale": "en",
                                      "formatDate": [Function],
                                      "formatHTMLMessage": [Function],
                                      "formatMessage": [Function],
                                      "formatNumber": [Function],
                                      "formatPlural": [Function],
                                      "formatRelative": [Function],
                                      "formatTime": [Function],
                                      "formats": Object {
                                        "date": Object {
                                          "full": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "weekday": "long",
                                            "year": "numeric",
                                          },
                                          "long": Object {
                                            "day": "numeric",
                                            "month": "long",
                                            "year": "numeric",
                                          },
                                          "medium": Object {
                                            "day": "numeric",
                                            "month": "short",
                                            "year": "numeric",
                                          },
                                          "short": Object {
                                            "day": "numeric",
                                            "month": "numeric",
                                            "year": "2-digit",
                                          },
                                        },
                                        "number": Object {
                                          "currency": Object {
                                            "style": "currency",
                                          },
                                          "percent": Object {
                                            "style": "percent",
                                          },
                                        },
                                        "relative": Object {
                                          "days": Object {
                                            "units": "day",
                                          },
                                          "hours": Object {
                                            "units": "hour",
                                          },
                                          "minutes": Object {
                                            "units": "minute",
                                          },
                                          "months": Object {
                                            "units": "month",
                                          },
                                          "seconds": Object {
                                            "units": "second",
                                          },
                                          "years": Object {
                                            "units": "year",
                                          },
                                        },
                                        "time": Object {
                                          "full": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "long": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                            "timeZoneName": "short",
                                          },
                                          "medium": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                            "second": "numeric",
                                          },
                                          "short": Object {
                                            "hour": "numeric",
                                            "minute": "numeric",
                                          },
                                        },
                                      },
                                      "formatters": Object {
                                        "getDateTimeFormat": [Function],
                                        "getMessageFormat": [Function],
                                        "getNumberFormat": [Function],
                                        "getPluralFormat": [Function],
                                        "getRelativeFormat": [Function],
                                      },
                                      "locale": "en",
                                      "messages": Object {},
                                      "now": [Function],
                                      "onError": [Function],
                                      "textComponent": Symbol(react.fragment),
                                      "timeZone": null,
                                    }
                                  }
                                  license$={
                                    Object {
                                      "subscribe": [Function],
                                    }
                                  }
                                  navigateToUrl={[MockFunction]}
                                  pollConfig={
                                    Object {
                                      "jobCompletionNotifier": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                      "jobsRefresh": Object {
                                        "interval": 5000,
                                        "intervalErrorMultiplier": 3,
                                      },
                                    }
                                  }
                                  record={
                                    Object {
                                      "attempts": 1,
                                      "completed_at": "2020-04-09T19:10:10.049Z",
                                      "created_at": "2020-04-09T19:09:52.139Z",
                                      "created_by": "elastic",
                                      "csv_contains_formulas": undefined,
                                      "id": "k8t4ylcb07mi9d006214ifyg",
                                      "max_attempts": 1,
                                      "max_size_reached": undefined,
                                      "object_title": "count",
                                      "object_type": "visualization",
                                      "started_at": "2020-04-09T19:09:54.570Z",
                                      "status": "completed",
                                      "statusLabel": "Completed",
                                      "type": "PNG",
                                      "warnings": undefined,
                                    }
                                  }
                                  redirect={[MockFunction]}
                                  toasts={
                                    Object {
                                      "add": [MockFunction],
                                      "addDanger": [MockFunction],
                                      "addError": [MockFunction],
                                      "addInfo": [MockFunction],
                                      "addSuccess": [MockFunction],
                                      "addWarning": [MockFunction],
                                      "get$": [MockFunction],
                                      "remove": [MockFunction],
                                    }
                                  }
                                  urlService={
                                    Object {
                                      "locators": Object {
                                        "get": [Function],
                                      },
                                    }
                                  }
                                />
                              </InjectIntl(ReportErrorButtonUi)>
                              <ReportInfoButton
                                apiClient={
                                  Object {
                                    "list": [Function],
                                    "migrateReportingIndicesIlmPolicy": [MockFunction],
                                    "total": [Function],
                                  }
                                }
                                ilmPolicyContextValue={
                                  Object {
                                    "isLoading": false,
                                    "recheckStatus": [Function],
                                    "status": undefined,
                                  }
                                }
                                intl={
                                  Object {
                                    "defaultFormats": Object {},
                                    "defaultLocale": "en",
                                    "formatDate": [Function],
                                    "formatHTMLMessage": [Function],
                                    "formatMessage": [Function],
                                    "formatNumber": [Function],
                                    "formatPlural": [Function],
                                    "formatRelative": [Function],
                                    "formatTime": [Function],
                                    "formats": Object {
                                      "date": Object {
                                        "full": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "weekday": "long",
                                          "year": "numeric",
                                        },
                                        "long": Object {
                                          "day": "numeric",
                                          "month": "long",
                                          "year": "numeric",
                                        },
                                        "medium": Object {
                                          "day": "numeric",
                                          "month": "short",
                                          "year": "numeric",
                                        },
                                        "short": Object {
                                          "day": "numeric",
                                          "month": "numeric",
                                          "year": "2-digit",
                                        },
                                      },
                                      "number": Object {
                                        "currency": Object {
                                          "style": "currency",
                                        },
                                        "percent": Object {
                                          "style": "percent",
                                        },
                                      },
                                      "relative": Object {
                                        "days": Object {
                                          "units": "day",
                                        },
                                        "hours": Object {
                                          "units": "hour",
                                        },
                                        "minutes": Object {
                                          "units": "minute",
                                        },
                                        "months": Object {
                                          "units": "month",
                                        },
                                        "seconds": Object {
                                          "units": "second",
                                        },
                                        "years": Object {
                                          "units": "year",
                                        },
                                      },
                                      "time": Object {
                                        "full": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "long": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                          "timeZoneName": "short",
                                        },
                                        "medium": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                          "second": "numeric",
                                        },
                                        "short": Object {
                                          "hour": "numeric",
                                          "minute": "numeric",
                                        },
                                      },
                                    },
                                    "formatters": Object {
                                      "getDateTimeFormat": [Function],
                                      "getMessageFormat": [Function],
                                      "getNumberFormat": [Function],
                                      "getPluralFormat": [Function],
                                      "getRelativeFormat": [Function],
                                    },
                                    "locale": "en",
                                    "messages": Object {},
                                    "now": [Function],
                                    "onError": [Function],
                                    "textComponent": Symbol(react.fragment),
                                    "timeZone": null,
                                  }
                                }
                                jobId="k8t4ylcb07mi9d006214ifyg"
                                license$={
                                  Object {
                                    "subscribe": [Function],
                                  }
                                }
                                navigateToUrl={[MockFunction]}
                                pollConfig={
                                  Object {
                                    "jobCompletionNotifier": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                    "jobsRefresh": Object {
                                      "interval": 5000,
                                      "intervalErrorMultiplier": 3,
                                    },
                                  }
                                }
                                redirect={[MockFunction]}
                                toasts={
                                  Object {
                                    "add": [MockFunction],
                                    "addDanger": [MockFunction],
                                    "addError": [MockFunction],
                                    "addInfo": [MockFunction],
                                    "addSuccess": [MockFunction],
                                    "addWarning": [MockFunction],
                                    "get$": [MockFunction],
                                    "remove": [MockFunction],
                                  }
                                }
                                urlService={
                                  Object {
                                    "locators": Object {
                                      "get": [Function],
                                    },
                                  }
                                }
                              >
                                <EuiButtonIcon
                                  aria-label="Show report info"
                                  color="primary"
                                  data-test-subj="reportInfoButton"
                                  iconType="iInCircle"
                                  onClick={[Function]}
                                >
                                  <button
                                    aria-label="Show report info"
                                    className="euiButtonIcon euiButtonIcon--primary euiButtonIcon--empty euiButtonIcon--xSmall"
                                    data-test-subj="reportInfoButton"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiIcon
                                      aria-hidden="true"
                                      className="euiButtonIcon__icon"
                                      color="inherit"
                                      size="m"
                                      type="iInCircle"
                                    >
                                      <span
                                        aria-hidden="true"
                                        className="euiButtonIcon__icon"
                                        color="inherit"
                                        data-euiicon-type="iInCircle"
                                        size="m"
                                      />
                                    </EuiIcon>
                                  </button>
                                </EuiButtonIcon>
                              </ReportInfoButton>
                            </div>
                          </div>
                        </CustomItemAction>
                      </ExpandedItemActions>
                    </div>
                  </td>
                </EuiTableRowCell>
              </tr>
            </EuiTableRow>
          </tbody>
        </EuiTableBody>
      </table>
    </EuiTable>
  </div>
  <PaginationBar
    aria-controls="generated-id"
    aria-label={
      <EuiI18n
        default="Pagination for preceding table: {tableCaption}"
        token="euiBasicTable.tablePagination"
        values={
          Object {
            "tableCaption": "Reports generated in Kibana applications",
          }
        }
      />
    }
    onPageChange={[Function]}
    onPageSizeChange={[Function]}
    pagination={
      Object {
        "hidePerPageOptions": true,
        "pageIndex": 0,
        "pageSize": 10,
        "totalItemCount": 18,
      }
    }
  >
    <div>
      <EuiSpacer
        size="m"
      >
        <div
          className="euiSpacer euiSpacer--m"
        />
      </EuiSpacer>
      <EuiTablePagination
        activePage={0}
        aria-controls="generated-id"
        hidePerPageOptions={true}
        itemsPerPage={10}
        itemsPerPageOptions={
          Array [
            10,
            25,
            50,
          ]
        }
        onChangeItemsPerPage={[Function]}
        onChangePage={[Function]}
        pageCount={2}
      >
        <EuiFlexGroup
          alignItems="center"
          justifyContent="spaceBetween"
          responsive={false}
        >
          <div
            className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--alignItemsCenter euiFlexGroup--justifyContentSpaceBetween euiFlexGroup--directionRow"
          >
            <EuiFlexItem
              grow={false}
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
              />
            </EuiFlexItem>
            <EuiFlexItem
              grow={false}
            >
              <div
                className="euiFlexItem euiFlexItem--flexGrowZero"
              >
                <EuiPagination
                  activePage={0}
                  aria-controls="generated-id"
                  onPageClick={[Function]}
                  pageCount={2}
                >
                  <nav
                    className="euiPagination"
                  >
                    <EuiI18n
                      default="Previous page, {page}"
                      token="euiPagination.previousPage"
                      values={
                        Object {
                          "page": 0,
                        }
                      }
                    >
                      <EuiI18n
                        default="Previous page"
                        token="euiPagination.disabledPreviousPage"
                      >
                        <EuiButtonIcon
                          aria-label="Previous page"
                          color="text"
                          data-test-subj="pagination-button-previous"
                          disabled={true}
                          iconType="arrowLeft"
                          onClick={[Function]}
                        >
                          <button
                            aria-label="Previous page"
                            className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall"
                            data-test-subj="pagination-button-previous"
                            disabled={true}
                            onClick={[Function]}
                            type="button"
                          >
                            <EuiIcon
                              aria-hidden="true"
                              className="euiButtonIcon__icon"
                              color="inherit"
                              size="m"
                              type="arrowLeft"
                            >
                              <span
                                aria-hidden="true"
                                className="euiButtonIcon__icon"
                                color="inherit"
                                data-euiicon-type="arrowLeft"
                                size="m"
                              />
                            </EuiIcon>
                          </button>
                        </EuiButtonIcon>
                      </EuiI18n>
                    </EuiI18n>
                    <ul
                      className="euiPagination__list"
                    >
                      <PaginationButton
                        key="0"
                        pageIndex={0}
                      >
                        <li
                          className="euiPagination__item"
                        >
                          <EuiPaginationButton
                            aria-controls="generated-id"
                            hideOnMobile={true}
                            isActive={true}
                            onClick={[Function]}
                            pageIndex={0}
                            totalPages={2}
                          >
                            <EuiI18n
                              default="Page {page} of {totalPages}"
                              token="euiPaginationButton.longPageString"
                              values={
                                Object {
                                  "page": 1,
                                  "totalPages": 2,
                                }
                              }
                            >
                              <EuiI18n
                                default="Page {page}"
                                token="euiPaginationButton.shortPageString"
                                values={
                                  Object {
                                    "page": 1,
                                  }
                                }
                              >
                                <EuiButtonEmpty
                                  aria-controls="generated-id"
                                  aria-current={true}
                                  aria-label="Page 1 of 2"
                                  className="euiPaginationButton euiPaginationButton-isActive euiPaginationButton--hideOnMobile"
                                  color="text"
                                  data-test-subj="pagination-button-0"
                                  href="#generated-id"
                                  isDisabled={true}
                                  onClick={[Function]}
                                  size="s"
                                >
                                  <button
                                    aria-controls="generated-id"
                                    aria-current={true}
                                    aria-label="Page 1 of 2"
                                    className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiButtonEmpty-isDisabled euiPaginationButton euiPaginationButton-isActive euiPaginationButton--hideOnMobile"
                                    data-test-subj="pagination-button-0"
                                    disabled={true}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <EuiButtonContent
                                      className="euiButtonEmpty__content"
                                      iconSide="left"
                                      iconSize="m"
                                      textProps={
                                        Object {
                                          "className": "euiButtonEmpty__text",
                                        }
                                      }
                                    >
                                      <span
                                        className="euiButtonContent euiButtonEmpty__content"
                                      >
                                        <span
                                          className="euiButtonEmpty__text"
                                        >
                                          1
                                        </span>
                                      </span>
                                    </EuiButtonContent>
                                  </button>
                                </EuiButtonEmpty>
                              </EuiI18n>
                            </EuiI18n>
                          </EuiPaginationButton>
                        </li>
                      </PaginationButton>
                      <PaginationButton
                        key="1"
                        pageIndex={1}
                      >
                        <li
                          className="euiPagination__item"
                        >
                          <EuiPaginationButton
                            aria-controls="generated-id"
                            hideOnMobile={true}
                            isActive={false}
                            onClick={[Function]}
                            pageIndex={1}
                            totalPages={2}
                          >
                            <EuiI18n
                              default="Page {page} of {totalPages}"
                              token="euiPaginationButton.longPageString"
                              values={
                                Object {
                                  "page": 2,
                                  "totalPages": 2,
                                }
                              }
                            >
                              <EuiI18n
                                default="Page {page}"
                                token="euiPaginationButton.shortPageString"
                                values={
                                  Object {
                                    "page": 2,
                                  }
                                }
                              >
                                <EuiButtonEmpty
                                  aria-controls="generated-id"
                                  aria-label="Page 2 of 2"
                                  className="euiPaginationButton euiPaginationButton--hideOnMobile"
                                  color="text"
                                  data-test-subj="pagination-button-1"
                                  href="#generated-id"
                                  isDisabled={false}
                                  onClick={[Function]}
                                  size="s"
                                >
                                  <a
                                    aria-controls="generated-id"
                                    aria-label="Page 2 of 2"
                                    className="euiButtonEmpty euiButtonEmpty--text euiButtonEmpty--small euiPaginationButton euiPaginationButton--hideOnMobile"
                                    data-test-subj="pagination-button-1"
                                    href="#generated-id"
                                    onClick={[Function]}
                                    rel="noreferrer"
                                  >
                                    <EuiButtonContent
                                      className="euiButtonEmpty__content"
                                      iconSide="left"
                                      iconSize="m"
                                      textProps={
                                        Object {
                                          "className": "euiButtonEmpty__text",
                                        }
                                      }
                                    >
                                      <span
                                        className="euiButtonContent euiButtonEmpty__content"
                                      >
                                        <span
                                          className="euiButtonEmpty__text"
                                        >
                                          2
                                        </span>
                                      </span>
                                    </EuiButtonContent>
                                  </a>
                                </EuiButtonEmpty>
                              </EuiI18n>
                            </EuiI18n>
                          </EuiPaginationButton>
                        </li>
                      </PaginationButton>
                    </ul>
                    <EuiI18n
                      default="Next page, {page}"
                      token="euiPagination.nextPage"
                      values={
                        Object {
                          "page": 2,
                        }
                      }
                    >
                      <EuiI18n
                        default="Next page"
                        token="euiPagination.disabledNextPage"
                      >
                        <EuiButtonIcon
                          aria-controls="generated-id"
                          aria-label="Next page, 2"
                          color="text"
                          data-test-subj="pagination-button-next"
                          href="#generated-id"
                          iconType="arrowRight"
                          onClick={[Function]}
                        >
                          <a
                            aria-controls="generated-id"
                            aria-label="Next page, 2"
                            className="euiButtonIcon euiButtonIcon--text euiButtonIcon--empty euiButtonIcon--xSmall"
                            data-test-subj="pagination-button-next"
                            href="#generated-id"
                            onClick={[Function]}
                            rel="noreferrer"
                          >
                            <EuiIcon
                              aria-hidden="true"
                              className="euiButtonIcon__icon"
                              color="inherit"
                              size="m"
                              type="arrowRight"
                            >
                              <span
                                aria-hidden="true"
                                className="euiButtonIcon__icon"
                                color="inherit"
                                data-euiicon-type="arrowRight"
                                size="m"
                              />
                            </EuiIcon>
                          </a>
                        </EuiButtonIcon>
                      </EuiI18n>
                    </EuiI18n>
                  </nav>
                </EuiPagination>
              </div>
            </EuiFlexItem>
          </div>
        </EuiFlexGroup>
      </EuiTablePagination>
    </div>
  </PaginationBar>
</div>
`;
