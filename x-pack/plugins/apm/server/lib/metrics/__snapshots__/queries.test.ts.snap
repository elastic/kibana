// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`metrics queries with a service node name fetches cpu chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "processCPUAverage": Object {
        "avg": Object {
          "field": "system.process.cpu.total.norm.pct",
        },
      },
      "processCPUMax": Object {
        "max": Object {
          "field": "system.process.cpu.total.norm.pct",
        },
      },
      "systemCPUAverage": Object {
        "avg": Object {
          "field": "system.cpu.total.norm.pct",
        },
      },
      "systemCPUMax": Object {
        "max": Object {
          "field": "system.cpu.total.norm.pct",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "processCPUAverage": Object {
            "avg": Object {
              "field": "system.process.cpu.total.norm.pct",
            },
          },
          "processCPUMax": Object {
            "max": Object {
              "field": "system.process.cpu.total.norm.pct",
            },
          },
          "systemCPUAverage": Object {
            "avg": Object {
              "field": "system.cpu.total.norm.pct",
            },
          },
          "systemCPUMax": Object {
            "max": Object {
              "field": "system.cpu.total.norm.pct",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "term": Object {
              "service.node.name": "bar",
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries with a service node name fetches heap memory chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "heapMemoryCommitted": Object {
        "avg": Object {
          "field": "jvm.memory.heap.committed",
        },
      },
      "heapMemoryMax": Object {
        "avg": Object {
          "field": "jvm.memory.heap.max",
        },
      },
      "heapMemoryUsed": Object {
        "avg": Object {
          "field": "jvm.memory.heap.used",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "heapMemoryCommitted": Object {
            "avg": Object {
              "field": "jvm.memory.heap.committed",
            },
          },
          "heapMemoryMax": Object {
            "avg": Object {
              "field": "jvm.memory.heap.max",
            },
          },
          "heapMemoryUsed": Object {
            "avg": Object {
              "field": "jvm.memory.heap.used",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "term": Object {
              "service.node.name": "bar",
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "term": Object {
              "agent.name": "java",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries with a service node name fetches memory chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "memoryUsedAvg": Object {
        "avg": Object {
          "script": Object {
            "lang": "painless",
            "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
          },
        },
      },
      "memoryUsedMax": Object {
        "max": Object {
          "script": Object {
            "lang": "painless",
            "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
          },
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "memoryUsedAvg": Object {
            "avg": Object {
              "script": Object {
                "lang": "painless",
                "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
              },
            },
          },
          "memoryUsedMax": Object {
            "max": Object {
              "script": Object {
                "lang": "painless",
                "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
              },
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "term": Object {
              "service.node.name": "bar",
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "exists": Object {
              "field": "system.process.cgroup.memory.mem.usage.bytes",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries with a service node name fetches non heap memory chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "nonHeapMemoryCommitted": Object {
        "avg": Object {
          "field": "jvm.memory.non_heap.committed",
        },
      },
      "nonHeapMemoryMax": Object {
        "avg": Object {
          "field": "jvm.memory.non_heap.max",
        },
      },
      "nonHeapMemoryUsed": Object {
        "avg": Object {
          "field": "jvm.memory.non_heap.used",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "nonHeapMemoryCommitted": Object {
            "avg": Object {
              "field": "jvm.memory.non_heap.committed",
            },
          },
          "nonHeapMemoryMax": Object {
            "avg": Object {
              "field": "jvm.memory.non_heap.max",
            },
          },
          "nonHeapMemoryUsed": Object {
            "avg": Object {
              "field": "jvm.memory.non_heap.used",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "term": Object {
              "service.node.name": "bar",
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "term": Object {
              "agent.name": "java",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries with a service node name fetches thread count chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "threadCount": Object {
        "avg": Object {
          "field": "jvm.thread.count",
        },
      },
      "threadCountMax": Object {
        "max": Object {
          "field": "jvm.thread.count",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "threadCount": Object {
            "avg": Object {
              "field": "jvm.thread.count",
            },
          },
          "threadCountMax": Object {
            "max": Object {
              "field": "jvm.thread.count",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "term": Object {
              "service.node.name": "bar",
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "term": Object {
              "agent.name": "java",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries with service_node_name_missing fetches cpu chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "processCPUAverage": Object {
        "avg": Object {
          "field": "system.process.cpu.total.norm.pct",
        },
      },
      "processCPUMax": Object {
        "max": Object {
          "field": "system.process.cpu.total.norm.pct",
        },
      },
      "systemCPUAverage": Object {
        "avg": Object {
          "field": "system.cpu.total.norm.pct",
        },
      },
      "systemCPUMax": Object {
        "max": Object {
          "field": "system.cpu.total.norm.pct",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "processCPUAverage": Object {
            "avg": Object {
              "field": "system.process.cpu.total.norm.pct",
            },
          },
          "processCPUMax": Object {
            "max": Object {
              "field": "system.process.cpu.total.norm.pct",
            },
          },
          "systemCPUAverage": Object {
            "avg": Object {
              "field": "system.cpu.total.norm.pct",
            },
          },
          "systemCPUMax": Object {
            "max": Object {
              "field": "system.cpu.total.norm.pct",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "bool": Object {
              "must_not": Array [
                Object {
                  "exists": Object {
                    "field": "service.node.name",
                  },
                },
              ],
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries with service_node_name_missing fetches heap memory chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "heapMemoryCommitted": Object {
        "avg": Object {
          "field": "jvm.memory.heap.committed",
        },
      },
      "heapMemoryMax": Object {
        "avg": Object {
          "field": "jvm.memory.heap.max",
        },
      },
      "heapMemoryUsed": Object {
        "avg": Object {
          "field": "jvm.memory.heap.used",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "heapMemoryCommitted": Object {
            "avg": Object {
              "field": "jvm.memory.heap.committed",
            },
          },
          "heapMemoryMax": Object {
            "avg": Object {
              "field": "jvm.memory.heap.max",
            },
          },
          "heapMemoryUsed": Object {
            "avg": Object {
              "field": "jvm.memory.heap.used",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "bool": Object {
              "must_not": Array [
                Object {
                  "exists": Object {
                    "field": "service.node.name",
                  },
                },
              ],
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "term": Object {
              "agent.name": "java",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries with service_node_name_missing fetches memory chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "memoryUsedAvg": Object {
        "avg": Object {
          "script": Object {
            "lang": "painless",
            "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
          },
        },
      },
      "memoryUsedMax": Object {
        "max": Object {
          "script": Object {
            "lang": "painless",
            "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
          },
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "memoryUsedAvg": Object {
            "avg": Object {
              "script": Object {
                "lang": "painless",
                "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
              },
            },
          },
          "memoryUsedMax": Object {
            "max": Object {
              "script": Object {
                "lang": "painless",
                "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
              },
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "bool": Object {
              "must_not": Array [
                Object {
                  "exists": Object {
                    "field": "service.node.name",
                  },
                },
              ],
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "exists": Object {
              "field": "system.process.cgroup.memory.mem.usage.bytes",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries with service_node_name_missing fetches non heap memory chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "nonHeapMemoryCommitted": Object {
        "avg": Object {
          "field": "jvm.memory.non_heap.committed",
        },
      },
      "nonHeapMemoryMax": Object {
        "avg": Object {
          "field": "jvm.memory.non_heap.max",
        },
      },
      "nonHeapMemoryUsed": Object {
        "avg": Object {
          "field": "jvm.memory.non_heap.used",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "nonHeapMemoryCommitted": Object {
            "avg": Object {
              "field": "jvm.memory.non_heap.committed",
            },
          },
          "nonHeapMemoryMax": Object {
            "avg": Object {
              "field": "jvm.memory.non_heap.max",
            },
          },
          "nonHeapMemoryUsed": Object {
            "avg": Object {
              "field": "jvm.memory.non_heap.used",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "bool": Object {
              "must_not": Array [
                Object {
                  "exists": Object {
                    "field": "service.node.name",
                  },
                },
              ],
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "term": Object {
              "agent.name": "java",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries with service_node_name_missing fetches thread count chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "threadCount": Object {
        "avg": Object {
          "field": "jvm.thread.count",
        },
      },
      "threadCountMax": Object {
        "max": Object {
          "field": "jvm.thread.count",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "threadCount": Object {
            "avg": Object {
              "field": "jvm.thread.count",
            },
          },
          "threadCountMax": Object {
            "max": Object {
              "field": "jvm.thread.count",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "bool": Object {
              "must_not": Array [
                Object {
                  "exists": Object {
                    "field": "service.node.name",
                  },
                },
              ],
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "term": Object {
              "agent.name": "java",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries without a service node name fetches cpu chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "processCPUAverage": Object {
        "avg": Object {
          "field": "system.process.cpu.total.norm.pct",
        },
      },
      "processCPUMax": Object {
        "max": Object {
          "field": "system.process.cpu.total.norm.pct",
        },
      },
      "systemCPUAverage": Object {
        "avg": Object {
          "field": "system.cpu.total.norm.pct",
        },
      },
      "systemCPUMax": Object {
        "max": Object {
          "field": "system.cpu.total.norm.pct",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "processCPUAverage": Object {
            "avg": Object {
              "field": "system.process.cpu.total.norm.pct",
            },
          },
          "processCPUMax": Object {
            "max": Object {
              "field": "system.process.cpu.total.norm.pct",
            },
          },
          "systemCPUAverage": Object {
            "avg": Object {
              "field": "system.cpu.total.norm.pct",
            },
          },
          "systemCPUMax": Object {
            "max": Object {
              "field": "system.cpu.total.norm.pct",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries without a service node name fetches heap memory chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "heapMemoryCommitted": Object {
        "avg": Object {
          "field": "jvm.memory.heap.committed",
        },
      },
      "heapMemoryMax": Object {
        "avg": Object {
          "field": "jvm.memory.heap.max",
        },
      },
      "heapMemoryUsed": Object {
        "avg": Object {
          "field": "jvm.memory.heap.used",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "heapMemoryCommitted": Object {
            "avg": Object {
              "field": "jvm.memory.heap.committed",
            },
          },
          "heapMemoryMax": Object {
            "avg": Object {
              "field": "jvm.memory.heap.max",
            },
          },
          "heapMemoryUsed": Object {
            "avg": Object {
              "field": "jvm.memory.heap.used",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "term": Object {
              "agent.name": "java",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries without a service node name fetches memory chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "memoryUsedAvg": Object {
        "avg": Object {
          "script": Object {
            "lang": "painless",
            "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
          },
        },
      },
      "memoryUsedMax": Object {
        "max": Object {
          "script": Object {
            "lang": "painless",
            "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
          },
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "memoryUsedAvg": Object {
            "avg": Object {
              "script": Object {
                "lang": "painless",
                "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
              },
            },
          },
          "memoryUsedMax": Object {
            "max": Object {
              "script": Object {
                "lang": "painless",
                "source": "
  boolean isFieldAvailable(def doc, def x) {
    return doc.containsKey(x) 
      && !doc[x].empty
  }

  if(!isFieldAvailable(doc, 'system.process.cgroup.memory.mem.usage.bytes')) {
    return null;
  }

  double total = -1;
  // uses cgroup.memory.mem.limit as total when it is available and not empty
  if(isFieldAvailable(doc, 'system.process.cgroup.memory.mem.limit.bytes')){
    total = doc['system.process.cgroup.memory.mem.limit.bytes'].value;

  //Otherwise uses system.memory.total as total
  }else if (isFieldAvailable(doc, 'system.memory.total')){
    total = doc['system.memory.total'].value;
  }
  
  // If both cgroup.memory.mem.limit and system.memory.total are not defined, does not calculate the percent and return null
  if(total == -1) {
    return null;

  //When the cgroup limit is equal to CGROUP_LIMIT_MAX_VALUE, uses the system total to calculate
  } else if(total == 9223372036854771712L){
    total = doc['system.memory.total'].value;
  }

  double used = doc['system.process.cgroup.memory.mem.usage.bytes'].value;
  
  return used / total;
    ",
              },
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "exists": Object {
              "field": "system.process.cgroup.memory.mem.usage.bytes",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries without a service node name fetches non heap memory chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "nonHeapMemoryCommitted": Object {
        "avg": Object {
          "field": "jvm.memory.non_heap.committed",
        },
      },
      "nonHeapMemoryMax": Object {
        "avg": Object {
          "field": "jvm.memory.non_heap.max",
        },
      },
      "nonHeapMemoryUsed": Object {
        "avg": Object {
          "field": "jvm.memory.non_heap.used",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "nonHeapMemoryCommitted": Object {
            "avg": Object {
              "field": "jvm.memory.non_heap.committed",
            },
          },
          "nonHeapMemoryMax": Object {
            "avg": Object {
              "field": "jvm.memory.non_heap.max",
            },
          },
          "nonHeapMemoryUsed": Object {
            "avg": Object {
              "field": "jvm.memory.non_heap.used",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "term": Object {
              "agent.name": "java",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;

exports[`metrics queries without a service node name fetches thread count chart data 1`] = `
Object {
  "apm": Object {
    "events": Array [
      "metric",
    ],
  },
  "body": Object {
    "aggs": Object {
      "threadCount": Object {
        "avg": Object {
          "field": "jvm.thread.count",
        },
      },
      "threadCountMax": Object {
        "max": Object {
          "field": "jvm.thread.count",
        },
      },
      "timeseriesData": Object {
        "aggs": Object {
          "threadCount": Object {
            "avg": Object {
              "field": "jvm.thread.count",
            },
          },
          "threadCountMax": Object {
            "max": Object {
              "field": "jvm.thread.count",
            },
          },
        },
        "date_histogram": Object {
          "extended_bounds": Object {
            "max": 1528977600000,
            "min": 1528113600000,
          },
          "field": "@timestamp",
          "fixed_interval": "10800s",
          "min_doc_count": 0,
        },
      },
    },
    "query": Object {
      "bool": Object {
        "filter": Array [
          Object {
            "term": Object {
              "service.name": "foo",
            },
          },
          Object {
            "range": Object {
              "@timestamp": Object {
                "format": "epoch_millis",
                "gte": 1528113600000,
                "lte": 1528977600000,
              },
            },
          },
          Object {
            "term": Object {
              "my.custom.ui.filter": "foo-bar",
            },
          },
          Object {
            "term": Object {
              "agent.name": "java",
            },
          },
        ],
      },
    },
    "size": 0,
  },
}
`;
