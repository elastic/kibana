// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DetailView should render Discover button 1`] = `
<DiscoverErrorLink
  error={
    Object {
      "@timestamp": "myTimestamp",
      "error": Object {
        "exception": Object {
          "handled": true,
        },
      },
      "http": Object {
        "request": Object {
          "method": "GET",
        },
      },
      "service": Object {
        "name": "myService",
      },
      "transaction": Object {
        "id": "myTransactionId",
        "sampled": true,
      },
      "url": Object {
        "full": "myUrl",
      },
      "user": Object {
        "id": "myUserId",
      },
    }
  }
>
  <EuiButtonEmpty
    color="primary"
    iconSide="left"
    iconType="discoverApp"
    type="button"
  >
    View 10 occurrences in Discover
  </EuiButtonEmpty>
</DiscoverErrorLink>
`;

exports[`DetailView should render StickyProperties 1`] = `
<StickyProperties
  stickyProperties={
    Array [
      Object {
        "fieldName": "@timestamp",
        "label": "Timestamp",
        "val": "myTimestamp",
        "width": "50%",
      },
      Object {
        "fieldName": "url.full",
        "label": "URL",
        "truncated": true,
        "val": "myUrl",
        "width": "50%",
      },
      Object {
        "fieldName": "http.request.method",
        "label": "Request method",
        "val": "GET",
        "width": "25%",
      },
      Object {
        "fieldName": "error.exception.handled",
        "label": "Handled",
        "val": "true",
        "width": "25%",
      },
      Object {
        "fieldName": "transaction.id",
        "label": "Transaction sample ID",
        "val": <TransactionLink
          error={
            Object {
              "@timestamp": "myTimestamp",
              "error": Object {
                "exception": Array [
                  Object {
                    "handled": true,
                  },
                ],
              },
              "http": Object {
                "request": Object {
                  "method": "GET",
                },
              },
              "service": Object {
                "name": "myService",
              },
              "transaction": Object {
                "id": "myTransactionId",
                "sampled": true,
              },
              "url": Object {
                "full": "myUrl",
              },
              "user": Object {
                "id": "myUserId",
              },
            }
          }
          transaction={
            Object {
              "http": Object {
                "request": Object {
                  "method": "GET",
                },
              },
              "service": Object {
                "name": "myService",
              },
              "trace": Object {
                "id": "traceId",
              },
              "transaction": Object {
                "id": "myTransactionName",
                "name": "myTransactionName",
                "type": "myTransactionType",
              },
              "url": Object {
                "full": "myUrl",
              },
              "user": Object {
                "id": "myUserId",
              },
            }
          }
        />,
        "width": "25%",
      },
      Object {
        "fieldName": "user.id",
        "label": "User ID",
        "val": "myUserId",
        "width": "25%",
      },
    ]
  }
/>
`;

exports[`DetailView should render TabContent 1`] = `
<TabContent
  currentTab={
    Object {
      "key": "exception_stacktrace",
      "label": "Exception stacktrace",
    }
  }
  error={
    Object {
      "@timestamp": "myTimestamp",
      "context": Object {},
    }
  }
/>
`;

exports[`DetailView should render tabs 1`] = `
<EuiTabs
  expand={false}
  size="m"
>
  <EuiTab
    disabled={false}
    isSelected={true}
    key="exception_stacktrace"
    onClick={[Function]}
  >
    Exception stacktrace
  </EuiTab>
  <EuiTab
    disabled={false}
    isSelected={false}
    key="service"
    onClick={[Function]}
  >
    Service
  </EuiTab>
  <EuiTab
    disabled={false}
    isSelected={false}
    key="user"
    onClick={[Function]}
  >
    User
  </EuiTab>
  <EuiTab
    disabled={false}
    isSelected={false}
    key="labels"
    onClick={[Function]}
  >
    Labels
  </EuiTab>
</EuiTabs>
`;
