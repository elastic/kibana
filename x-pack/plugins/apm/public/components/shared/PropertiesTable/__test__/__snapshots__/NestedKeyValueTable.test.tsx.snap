// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormattedKey component should render when the value is defined 1`] = `
<FormattedKey
  k="testKey"
  value="hi"
>
  testKey
</FormattedKey>
`;

exports[`FormattedKey component should render when the value is defined 2`] = `
<FormattedKey
  k="testKey"
  value={123}
>
  testKey
</FormattedKey>
`;

exports[`FormattedKey component should render when the value is defined 3`] = `
<FormattedKey
  k="testKey"
  value={Object {}}
>
  testKey
</FormattedKey>
`;

exports[`FormattedKey component should render when the value is null or undefined 1`] = `
.c0 {
  color: #98a2b3;
}

<FormattedKey
  k="testKey"
  value={null}
>
  <styled.span>
    <span
      className="c0"
    >
      testKey
    </span>
  </styled.span>
</FormattedKey>
`;

exports[`FormattedKey component should render when the value is null or undefined 2`] = `
.c0 {
  color: #98a2b3;
}

<FormattedKey
  k="testKey"
>
  <styled.span>
    <span
      className="c0"
    >
      testKey
    </span>
  </styled.span>
</FormattedKey>
`;

exports[`FormattedValue component should render a boolean 1`] = `
<FormattedValue
  value={true}
>
  true
</FormattedValue>
`;

exports[`FormattedValue component should render a boolean 2`] = `
<FormattedValue
  value={false}
>
  false
</FormattedValue>
`;

exports[`FormattedValue component should render a number 1`] = `
<FormattedValue
  value={243}
>
  243
</FormattedValue>
`;

exports[`FormattedValue component should render a string 1`] = `
<FormattedValue
  value="hey ok cool"
>
  hey ok cool
</FormattedValue>
`;

exports[`FormattedValue component should render an array 1`] = `
<FormattedValue
  value={
    Array [
      1,
      2,
      3,
    ]
  }
>
  <pre>
    [
    1,
    2,
    3
]
  </pre>
</FormattedValue>
`;

exports[`FormattedValue component should render an object 1`] = `
<FormattedValue
  value={
    Object {
      "a": "ok",
    }
  }
>
  <pre>
    {
    "a": "ok"
}
  </pre>
</FormattedValue>
`;

exports[`FormattedValue component should render null 1`] = `
.c0 {
  color: #98a2b3;
}

<FormattedValue
  value={null}
>
  <styled.span>
    <span
      className="c0"
    >
      N/A
    </span>
  </styled.span>
</FormattedValue>
`;

exports[`FormattedValue component should render undefined 1`] = `
.c0 {
  color: #98a2b3;
}

<FormattedValue>
  <styled.span>
    <span
      className="c0"
    >
      N/A
    </span>
  </styled.span>
</FormattedValue>
`;

exports[`NestedKeyValueTable component should render an empty table if there is no data 1`] = `
<styled.table>
  <tbody />
</styled.table>
`;

exports[`NestedKeyValueTable component should render with data 1`] = `
<styled.table>
  <tbody>
    <styled.tr
      key="a"
    >
      <styled.td>
        <FormattedKey
          k="a"
          value={1}
        />
      </styled.td>
      <styled.td>
        <NestedValue
          depth={0}
          parentKey="a"
          value={1}
        />
      </styled.td>
    </styled.tr>
    <styled.tr
      key="b"
    >
      <styled.td>
        <FormattedKey
          k="b"
          value={2}
        />
      </styled.td>
      <styled.td>
        <NestedValue
          depth={0}
          parentKey="b"
          value={2}
        />
      </styled.td>
    </styled.tr>
    <styled.tr
      key="c"
    >
      <styled.td>
        <FormattedKey
          k="c"
          value={
            Array [
              3,
              4,
              5,
            ]
          }
        />
      </styled.td>
      <styled.td>
        <NestedValue
          depth={0}
          parentKey="c"
          value={
            Array [
              3,
              4,
              5,
            ]
          }
        />
      </styled.td>
    </styled.tr>
    <styled.tr
      key="d"
    >
      <styled.td>
        <FormattedKey
          k="d"
          value={
            Object {
              "aa": 1,
              "bb": 2,
            }
          }
        />
      </styled.td>
      <styled.td>
        <NestedValue
          depth={0}
          parentKey="d"
          value={
            Object {
              "aa": 1,
              "bb": 2,
            }
          }
        />
      </styled.td>
    </styled.tr>
  </tbody>
</styled.table>
`;

exports[`NestedValue component should render a formatted value when depth > 0 but value is not an object 1`] = `
<FormattedValue
  value={2}
/>
`;

exports[`NestedValue component should render a nested KV Table when depth > 0 and value is an object 1`] = `
<NestedKeyValueTable
  data={
    Object {
      "a": "hello",
    }
  }
  depth={2}
  parentKey="who_cares"
/>
`;
