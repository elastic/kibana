/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import { i18n } from '@kbn/i18n';
import { AlertMessageDocLinkToken } from './types';
import { AlertMessageTokenType } from '../../common/enums';

export class AlertingDefaults {
  public static readonly ALERT_STATE = {
    resolved: i18n.translate('xpack.monitoring.alerts.state.resolved', {
      defaultMessage: 'resolved',
    }),
    firing: i18n.translate('xpack.monitoring.alerts.state.firing', {
      defaultMessage: 'firing',
    }),
  };
  public static readonly ALERT_TYPE = {
    context: {
      internalShortMessage: {
        name: 'internalShortMessage',
        description: i18n.translate(
          'xpack.monitoring.alerts.actionVariables.internalShortMessage',
          {
            defaultMessage: 'The short internal message generated by Elastic.',
          }
        ),
      },
      internalFullMessage: {
        name: 'internalFullMessage',
        description: i18n.translate('xpack.monitoring.alerts.actionVariables.internalFullMessage', {
          defaultMessage: 'The full internal message generated by Elastic.',
        }),
      },
      state: {
        name: 'state',
        description: i18n.translate('xpack.monitoring.alerts.actionVariables.state', {
          defaultMessage: 'The current state of the alert.',
        }),
      },
      clusterName: {
        name: 'clusterName',
        description: i18n.translate('xpack.monitoring.alerts.actionVariables.clusterName', {
          defaultMessage: 'The cluster to which the nodes belong.',
        }),
      },
      action: {
        name: 'action',
        description: i18n.translate('xpack.monitoring.alerts.actionVariables.action', {
          defaultMessage: 'The recommended action for this alert.',
        }),
      },
      actionPlain: {
        name: 'actionPlain',
        description: i18n.translate('xpack.monitoring.alerts.actionVariables.actionPlain', {
          defaultMessage: 'The recommended action for this alert, without any markdown.',
        }),
      },
    },
  };
}

export const createLink = (
  linkText: string,
  linkURL: string,
  type: AlertMessageTokenType = AlertMessageTokenType.DocLink
) => {
  const link = type === AlertMessageTokenType.DocLink ? { partialUrl: linkURL } : { url: linkURL };
  return {
    text: linkText,
    tokens: [
      {
        ...link,
        startToken: '#start_link',
        endToken: '#end_link',
        type,
      } as AlertMessageDocLinkToken,
    ],
  };
};
