/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */
import { IUiSettingsClient, Logger } from 'kibana/server';
import { i18n } from '@kbn/i18n';
import moment from 'moment';
import { BaseAlert } from './base_alert';
import {
  AlertData,
  AlertCluster,
  AlertState,
  AlertMessage,
  AlertMissingDataState,
  AlertMissingData,
  AlertMessageTimeToken,
  AlertInstanceState,
  AlertMessageDocLinkToken,
} from './types';
import { AlertInstance, AlertServices } from '../../../alerts/server';
import { INDEX_PATTERN, ALERT_MISSING_DATA } from '../../common/constants';
import { getCcsIndexPattern } from '../lib/alerts/get_ccs_index_pattern';
import { AlertMessageTokenType, AlertSeverity, AlertParamType } from '../../common/enums';
import { RawAlertInstance } from '../../../alerts/common';
import { parseDuration } from '../../../alerts/common/parse_duration';
import { CommonAlertFilter, CommonAlertParams, CommonAlertParamDetail } from '../../common/types';
import { appendMetricbeatIndex } from '../lib/alerts/append_mb_index';
import { fetchMissingData } from '../lib/alerts/fetch_missing_data';

// const RESOLVED = i18n.translate('xpack.monitoring.alerts.missingData.resolved', {
//   defaultMessage: 'resolved',
// });
const FIRING = i18n.translate('xpack.monitoring.alerts.missingData.firing', {
  defaultMessage: 'firing',
});

const DEFAULT_DURATION = '5m';
const DEFAULT_LIMIT = '1d';

interface MissingDataParams {
  duration: string;
  limit: string;
}

export class MissingDataAlert extends BaseAlert {
  public static paramDetails = {
    duration: {
      label: i18n.translate('xpack.monitoring.alerts.missingData.paramDetails.duration.label', {
        defaultMessage: `Notify if data is missing for`,
      }),
      type: AlertParamType.Duration,
    } as CommonAlertParamDetail,
    limit: {
      label: i18n.translate('xpack.monitoring.alerts.missingData.paramDetails.limit.label', {
        defaultMessage: `Look this far back in time for any data`,
      }),
      type: AlertParamType.Duration,
    } as CommonAlertParamDetail,
  };

  public type = ALERT_MISSING_DATA;
  public label = i18n.translate('xpack.monitoring.alerts.missingData.label', {
    defaultMessage: 'Missing data',
  });

  protected defaultParams: MissingDataParams = {
    duration: DEFAULT_DURATION,
    limit: DEFAULT_LIMIT,
  };

  protected actionVariables = [
    {
      name: 'internalShortMessage',
      description: i18n.translate(
        'xpack.monitoring.alerts.missingData.actionVariables.internalShortMessage',
        {
          defaultMessage: 'The short internal message generated by Elastic.',
        }
      ),
    },
    {
      name: 'internalFullMessage',
      description: i18n.translate(
        'xpack.monitoring.alerts.missingData.actionVariables.internalFullMessage',
        {
          defaultMessage: 'The full internal message generated by Elastic.',
        }
      ),
    },
    {
      name: 'state',
      description: i18n.translate('xpack.monitoring.alerts.missingData.actionVariables.state', {
        defaultMessage: 'The current state of the alert.',
      }),
    },
    {
      name: 'stackProducts',
      description: i18n.translate(
        'xpack.monitoring.alerts.missingData.actionVariables.stackProducts',
        {
          defaultMessage: 'The stack products missing data.',
        }
      ),
    },
    {
      name: 'count',
      description: i18n.translate('xpack.monitoring.alerts.missingData.actionVariables.count', {
        defaultMessage: 'The number of stack products missing data.',
      }),
    },
    {
      name: 'clusterName',
      description: i18n.translate(
        'xpack.monitoring.alerts.missingData.actionVariables.clusterName',
        {
          defaultMessage: 'The cluster to which the stack products belong.',
        }
      ),
    },
    {
      name: 'action',
      description: i18n.translate('xpack.monitoring.alerts.missingData.actionVariables.action', {
        defaultMessage: 'The recommended action for this alert.',
      }),
    },
    {
      name: 'actionPlain',
      description: i18n.translate(
        'xpack.monitoring.alerts.missingData.actionVariables.actionPlain',
        {
          defaultMessage: 'The recommended action for this alert, without any markdown.',
        }
      ),
    },
  ];

  protected async fetchData(
    params: CommonAlertParams,
    callCluster: any,
    clusters: AlertCluster[],
    uiSettings: IUiSettingsClient,
    availableCcs: string[]
  ): Promise<AlertData[]> {
    let indexPattern = appendMetricbeatIndex(this.config, INDEX_PATTERN);
    if (availableCcs) {
      indexPattern = getCcsIndexPattern(indexPattern, availableCcs);
    }
    const duration = parseDuration(((params as unknown) as MissingDataParams).duration);
    const limit = parseDuration(((params as unknown) as MissingDataParams).limit);
    const missingData = await fetchMissingData(
      callCluster,
      clusters,
      indexPattern,
      limit,
      this.config.ui.max_bucket_size
    );
    return missingData.map((missing) => {
      return {
        instanceKey: `${missing.clusterUuid}:${missing.stackProduct}:${missing.stackProductUuid}`,
        clusterUuid: missing.clusterUuid,
        shouldFire: missing.gapDuration > duration,
        severity: AlertSeverity.Danger,
        meta: missing,
        ccs: missing.ccs,
      };
    });
  }

  protected filterAlertInstance(alertInstance: RawAlertInstance, filters: CommonAlertFilter[]) {
    // const alertInstanceState = (alertInstance.state as unknown) as AlertInstanceState;
    // if (filters && filters.length) {
    //   for (const _filter of filters) {
    //     const filter = _filter as CommonAlertCpuUsageFilter;
    //     if (filter && filter.nodeUuid) {
    //       let nodeExistsInStates = false;
    //       for (const state of alertInstanceState.alertStates) {
    //         if ((state as AlertMissingDataState).nodeId === filter.nodeUuid) {
    //           nodeExistsInStates = true;
    //           break;
    //         }
    //       }
    //       if (!nodeExistsInStates) {
    //         return false;
    //       }
    //     }
    //   }
    // }
    return true;
  }

  protected getDefaultAlertState(cluster: AlertCluster, item: AlertData): AlertState {
    const base = super.getDefaultAlertState(cluster, item);
    return {
      ...base,
      ui: {
        ...base.ui,
        severity: AlertSeverity.Danger,
      },
    };
  }

  protected getUiMessage(alertState: AlertState, item: AlertData): AlertMessage {
    const missing = item.meta as AlertMissingData;
    if (!alertState.ui.isFiring) {
      return {
        text: i18n.translate('xpack.monitoring.alerts.missingData.ui.resolvedMessage', {
          defaultMessage: `We are no longer detecting that monitoring data is missing for {stackProduct}:{stackProductName}, as of #resolved`,
          values: {
            stackProduct: missing.stackProduct,
            stackProductName: missing.stackProductName,
          },
        }),
        tokens: [
          {
            startToken: '#resolved',
            type: AlertMessageTokenType.Time,
            isAbsolute: true,
            isRelative: false,
            timestamp: alertState.ui.resolvedMS,
          } as AlertMessageTimeToken,
        ],
      };
    }
    return {
      text: i18n.translate('xpack.monitoring.alerts.missingData.ui.firingMessage', {
        defaultMessage: `For the past {gapDuration}, we have not detected any monitoring data from {stackProduct}:{stackProductName}, starting at #absolute`,
        values: {
          gapDuration: moment.duration(missing.gapDuration, 'milliseconds').humanize(),
          stackProduct: missing.stackProduct,
          stackProductName: missing.stackProductName,
        },
      }),
      nextSteps: [
        {
          text: i18n.translate('xpack.monitoring.alerts.missingData.ui.nextSteps.hotThreads', {
            defaultMessage: `#start_linkCheck hot threads#end_link`,
          }),
          tokens: [
            {
              startToken: '#start_link',
              endToken: '#end_link',
              type: AlertMessageTokenType.DocLink,
              partialUrl: `{elasticWebsiteUrl}/guide/en/elasticsearch/reference/{docLinkVersion}/cluster-nodes-hot-threads.html`,
            } as AlertMessageDocLinkToken,
          ],
        },
        {
          text: i18n.translate('xpack.monitoring.alerts.missingData.ui.nextSteps.runningTasks', {
            defaultMessage: `#start_linkCheck long running tasks#end_link`,
          }),
          tokens: [
            {
              startToken: '#start_link',
              endToken: '#end_link',
              type: AlertMessageTokenType.DocLink,
              partialUrl: `{elasticWebsiteUrl}/guide/en/elasticsearch/reference/{docLinkVersion}/tasks.html`,
            } as AlertMessageDocLinkToken,
          ],
        },
      ],
      tokens: [
        {
          startToken: '#absolute',
          type: AlertMessageTokenType.Time,
          isAbsolute: true,
          isRelative: false,
          timestamp: alertState.ui.triggeredMS,
        } as AlertMessageTimeToken,
      ],
    };
  }

  protected executeActions(
    instance: AlertInstance,
    instanceState: AlertInstanceState,
    item: AlertData | null,
    cluster: AlertCluster
  ) {
    if (instanceState.alertStates.length === 0) {
      return;
    }

    const ccs = instanceState.alertStates.reduce((accum: string, state): string => {
      if (state.ccs) {
        return state.ccs;
      }
      return accum;
    }, '');

    const firingCount = instanceState.alertStates.filter((alertState) => alertState.ui.isFiring)
      .length;
    const firingStackProducts = instanceState.alertStates
      .filter((_state) => (_state as AlertMissingDataState).ui.isFiring)
      .map((_state) => {
        const state = _state as AlertMissingDataState;
        return `${state.stackProduct}:${state.stackProductUuid}`;
      })
      .join(',');
    if (firingCount > 0) {
      const shortActionText = i18n.translate('xpack.monitoring.alerts.missingData.shortAction', {
        defaultMessage:
          'Verify these stack products are up and running, then double check the monitoring settings.',
      });
      const fullActionText = i18n.translate('xpack.monitoring.alerts.missingData.fullAction', {
        defaultMessage: 'View what monitoring data we do have for these stack products.',
      });
      const globalState = [`cluster_uuid:${cluster.clusterUuid}`];
      if (ccs) {
        globalState.push(`ccs:${ccs}`);
      }
      const url = `${this.kibanaUrl}/app/monitoring#overview?_g=(${globalState.join(',')})`;
      const action = `[${fullActionText}](${url})`;
      const internalShortMessage = i18n.translate(
        'xpack.monitoring.alerts.missingData.firing.internalShortMessage',
        {
          defaultMessage: `We are not detecting monitoring data for {count} stack product(s) in cluster: {clusterName}. {shortActionText}`,
          values: {
            count: firingCount,
            clusterName: cluster.clusterName,
            shortActionText,
          },
        }
      );
      const internalFullMessage = i18n.translate(
        'xpack.monitoring.alerts.missingData.firing.internalFullMessage',
        {
          defaultMessage: `We are not detecting monitoring data for {count} stack product(s) in cluster: {clusterName}. {action}`,
          values: {
            count: firingCount,
            clusterName: cluster.clusterName,
            action,
          },
        }
      );
      instance.scheduleActions('default', {
        internalShortMessage,
        internalFullMessage: this.isCloud ? internalShortMessage : internalFullMessage,
        state: FIRING,
        stackProducts: firingStackProducts,
        count: firingCount,
        clusterName: cluster.clusterName,
        action,
        actionPlain: shortActionText,
      });
    } else {
      // const resolvedCount = instanceState.alertStates.filter(
      //   (alertState) => !alertState.ui.isFiring
      // ).length;
      // const resolvedNodes = instanceState.alertStates
      //   .filter((_state) => !(_state as AlertMissingDataState).ui.isFiring)
      //   .map((_state) => {
      //     const state = _state as AlertMissingDataState;
      //     return `${state.stackProduct}:${state.stackProductUuid}`;
      //   })
      //   .join(',');
      // if (resolvedCount > 0) {
      //   instance.scheduleActions('default', {
      //     internalShortMessage: i18n.translate(
      //       'xpack.monitoring.alerts.missingData.resolved.internalShortMessage',
      //       {
      //         defaultMessage: `CPU usage alert is resolved for {count} node(s) in cluster: {clusterName}.`,
      //         values: {
      //           count: resolvedCount,
      //           clusterName: cluster.clusterName,
      //         },
      //       }
      //     ),
      //     internalFullMessage: i18n.translate(
      //       'xpack.monitoring.alerts.missingData.resolved.internalFullMessage',
      //       {
      //         defaultMessage: `CPU usage alert is resolved for {count} node(s) in cluster: {clusterName}.`,
      //         values: {
      //           count: resolvedCount,
      //           clusterName: cluster.clusterName,
      //         },
      //       }
      //     ),
      //     state: RESOLVED,
      //     nodes: resolvedNodes,
      //     count: resolvedCount,
      //     clusterName: cluster.clusterName,
      //   });
      // }
    }
  }

  protected processData(
    data: AlertData[],
    clusters: AlertCluster[],
    services: AlertServices,
    logger: Logger
  ) {
    for (const cluster of clusters) {
      const stackProducts = data.filter((_item) => _item.clusterUuid === cluster.clusterUuid);
      if (stackProducts.length === 0) {
        continue;
      }

      const firingInstances = stackProducts.reduce((list: string[], stackProduct) => {
        const missing = stackProduct.meta as AlertMissingData;
        if (stackProduct.shouldFire) {
          list.push(`${missing.stackProduct}:${missing.stackProductUuid}`);
        }
        return list;
      }, [] as string[]);
      firingInstances.sort(); // It doesn't matter how we sort, but keep the order consistent
      const instanceId = `${this.type}:${cluster.clusterUuid}:${firingInstances.join(',')}`;
      const instance = services.alertInstanceFactory(instanceId);
      const instanceState = (instance.getState() as unknown) as AlertInstanceState;
      const alertInstanceState: AlertInstanceState = {
        alertStates: instanceState?.alertStates || [],
      };
      let shouldExecuteActions = false;
      for (const stackProduct of stackProducts) {
        const missing = stackProduct.meta as AlertMissingData;
        let state: AlertMissingDataState;
        const indexInState = alertInstanceState.alertStates.findIndex((alertState) => {
          const _alertState = alertState as AlertMissingDataState;
          return (
            _alertState.cluster.clusterUuid === cluster.clusterUuid &&
            _alertState.stackProduct === (stackProduct.meta as AlertMissingData).stackProduct &&
            _alertState.stackProductUuid ===
              (stackProduct.meta as AlertMissingData).stackProductUuid
          );
        });
        if (indexInState > -1) {
          state = alertInstanceState.alertStates[indexInState] as AlertMissingDataState;
        } else {
          state = this.getDefaultAlertState(cluster, stackProduct) as AlertMissingDataState;
        }

        state.stackProduct = missing.stackProduct;
        state.stackProductUuid = missing.stackProductUuid;
        state.gapDuration = missing.gapDuration;

        if (stackProduct.shouldFire) {
          state.ui.triggeredMS = new Date().valueOf();
          state.ui.isFiring = true;
          state.ui.message = this.getUiMessage(state, stackProduct);
          state.ui.severity = stackProduct.severity;
          state.ui.resolvedMS = 0;
          shouldExecuteActions = true;
        } else if (!stackProduct.shouldFire && state.ui.isFiring) {
          state.ui.isFiring = false;
          state.ui.resolvedMS = new Date().valueOf();
          state.ui.message = this.getUiMessage(state, stackProduct);
          shouldExecuteActions = true;
        }

        if (indexInState === -1) {
          alertInstanceState.alertStates.push(state);
        } else {
          alertInstanceState.alertStates = [
            ...alertInstanceState.alertStates.slice(0, indexInState),
            state,
            ...alertInstanceState.alertStates.slice(indexInState + 1),
          ];
        }
      }

      instance.replaceState(alertInstanceState);
      if (shouldExecuteActions) {
        this.executeActions(instance, alertInstanceState, null, cluster);
      }
    }
  }
}
