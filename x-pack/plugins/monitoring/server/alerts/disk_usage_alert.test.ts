/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import { DiskUsageAlert } from './disk_usage_alert';
import { ALERT_DISK_USAGE } from '../../common/constants';
import { fetchDiskUsageNodeStats } from '../lib/alerts/fetch_disk_usage_node_stats';
import { fetchClusters } from '../lib/alerts/fetch_clusters';

type IDiskUsageAlertMock = DiskUsageAlert & {
  defaultParams: {
    threshold: number;
    duration: string;
  };
} & {
  actionVariables: Array<{
    name: string;
    description: string;
  }>;
};

const RealDate = Date;

jest.mock('../lib/alerts/fetch_disk_usage_node_stats', () => ({
  fetchDiskUsageNodeStats: jest.fn(),
}));
jest.mock('../lib/alerts/fetch_clusters', () => ({
  fetchClusters: jest.fn(),
}));

describe('DiskUsageAlert', () => {
  it('should have defaults', () => {
    const alert = new DiskUsageAlert() as IDiskUsageAlertMock;
    expect(alert.type).toBe(ALERT_DISK_USAGE);
    expect(alert.label).toBe('Disk Usage');
    expect(alert.defaultThrottle).toBe('1d');
    expect(alert.defaultParams).toStrictEqual({ threshold: 85, duration: '5m' });
    expect(alert.actionVariables).toStrictEqual([
      { name: 'nodes', description: 'The list of nodes reporting high disk usage.' },
      { name: 'count', description: 'The number of nodes reporting high disk usage.' },
      {
        name: 'internalShortMessage',
        description: 'The short internal message generated by Elastic.',
      },
      {
        name: 'internalFullMessage',
        description: 'The full internal message generated by Elastic.',
      },
      { name: 'state', description: 'The current state of the alert.' },
      { name: 'clusterName', description: 'The cluster to which the nodes belong.' },
      { name: 'action', description: 'The recommended action for this alert.' },
      {
        name: 'actionPlain',
        description: 'The recommended action for this alert, without any markdown.',
      },
    ]);
  });

  describe('execute', () => {
    const FakeDate = function () {};
    FakeDate.prototype.valueOf = () => 1;

    const clusterUuid = 'abc123';
    const clusterName = 'testCluster';
    const nodeId = 'myNodeId';
    const nodeName = 'myNodeName';
    const diskUsage = 91;
    const stat = {
      clusterUuid,
      nodeId,
      nodeName,
      diskUsage,
    };
    const getUiSettingsService = () => ({
      asScopedToClient: jest.fn(),
    });
    const getLogger = () => ({
      debug: jest.fn(),
    });
    const monitoringCluster = null;
    const config = {
      ui: {
        ccs: { enabled: true },
        container: { elasticsearch: { enabled: false } },
        metricbeat: { index: 'metricbeat-*' },
      },
    };
    const kibanaUrl = 'http://localhost:5601';

    const replaceState = jest.fn();
    const scheduleActions = jest.fn();
    const getState = jest.fn();
    const executorOptions = {
      services: {
        callCluster: jest.fn(),
        alertInstanceFactory: jest.fn().mockImplementation(() => {
          return {
            replaceState,
            scheduleActions,
            getState,
          };
        }),
      },
      state: {},
    };

    beforeEach(() => {
      Date = FakeDate as DateConstructor;
      (fetchDiskUsageNodeStats as jest.Mock).mockImplementation(() => {
        return [stat];
      });
      (fetchClusters as jest.Mock).mockImplementation(() => {
        return [{ clusterUuid, clusterName }];
      });
    });

    afterEach(() => {
      Date = RealDate;
      replaceState.mockReset();
      scheduleActions.mockReset();
      getState.mockReset();
    });

    it('should fire actions', async () => {
      const alert = new DiskUsageAlert() as IDiskUsageAlertMock;
      alert.initializeAlertType(
        getUiSettingsService as any,
        monitoringCluster as any,
        getLogger as any,
        config as any,
        kibanaUrl,
        false
      );
      const type = alert.getAlertType();
      await type.executor({
        ...executorOptions,
        params: alert.defaultParams,
      } as any);
      const count = 1;
      expect(scheduleActions).toHaveBeenCalledWith('default', {
        internalFullMessage: `Disk usage alert is firing for ${count} node(s) in cluster: ${clusterName}. [View nodes](http://localhost:5601/app/monitoring#elasticsearch/nodes?_g=(cluster_uuid:${clusterUuid}))`,
        internalShortMessage: `Disk usage alert is firing for ${count} node(s) in cluster: ${clusterName}. Verify disk usage levels across affected nodes.`,
        action: `[View nodes](http://localhost:5601/app/monitoring#elasticsearch/nodes?_g=(cluster_uuid:${clusterUuid}))`,
        actionPlain: 'Verify disk usage levels across affected nodes.',
        clusterName,
        count,
        nodes: `${nodeName}:${diskUsage.toFixed(2)}`,
        state: 'firing',
      });
    });

    it('should not fire actions if under threshold', async () => {
      (fetchDiskUsageNodeStats as jest.Mock).mockImplementation(() => {
        return [
          {
            ...stat,
            diskUsage: 1,
          },
        ];
      });
      const alert = new DiskUsageAlert() as IDiskUsageAlertMock;
      alert.initializeAlertType(
        getUiSettingsService as any,
        monitoringCluster as any,
        getLogger as any,
        config as any,
        kibanaUrl,
        false
      );
      const type = alert.getAlertType();
      await type.executor({
        ...executorOptions,
        params: alert.defaultParams,
      } as any);
      expect(replaceState).toHaveBeenCalledWith({
        alertStates: [
          {
            ccs: undefined,
            cluster: {
              clusterUuid,
              clusterName,
            },
            diskUsage: 1,
            nodeId,
            nodeName,
            ui: {
              isFiring: false,
              lastCheckedMS: 0,
              message: null,
              resolvedMS: 0,
              severity: 'danger',
              triggeredMS: 0,
            },
          },
        ],
      });
      expect(scheduleActions).not.toHaveBeenCalled();
    });

    it('should resolve with a resolved message', async () => {
      (fetchDiskUsageNodeStats as jest.Mock).mockImplementation(() => {
        return [
          {
            ...stat,
            diskUsage: 1,
          },
        ];
      });
      (getState as jest.Mock).mockImplementation(() => {
        return {
          alertStates: [
            {
              cluster: {
                clusterUuid,
                clusterName,
              },
              ccs: null,
              diskUsage: 91,
              nodeId,
              nodeName,
              ui: {
                isFiring: true,
                message: null,
                severity: 'danger',
                resolvedMS: 0,
                triggeredMS: 1,
                lastCheckedMS: 0,
              },
            },
          ],
        };
      });
      const alert = new DiskUsageAlert() as IDiskUsageAlertMock;
      alert.initializeAlertType(
        getUiSettingsService as any,
        monitoringCluster as any,
        getLogger as any,
        config as any,
        kibanaUrl,
        false
      );
      const type = alert.getAlertType();
      await type.executor({
        ...executorOptions,
        params: alert.defaultParams,
      } as any);
      const count = 1;
      expect(replaceState).toHaveBeenCalledWith({
        alertStates: [
          {
            cluster: { clusterUuid, clusterName },
            ccs: null,
            diskUsage: 1,
            nodeId,
            nodeName,
            ui: {
              isFiring: false,
              message: {
                text:
                  'The disk usage on node myNodeName is now under the threshold, currently reporting at 1.00% as of #resolved',
                tokens: [
                  {
                    startToken: '#resolved',
                    type: 'time',
                    isAbsolute: true,
                    isRelative: false,
                    timestamp: 1,
                  },
                ],
              },
              severity: 'danger',
              resolvedMS: 1,
              triggeredMS: 1,
              lastCheckedMS: 0,
            },
          },
        ],
      });
      expect(scheduleActions).toHaveBeenCalledWith('default', {
        internalFullMessage: `Disk usage alert is resolved for ${count} node(s) in cluster: ${clusterName}.`,
        internalShortMessage: `Disk usage alert is resolved for ${count} node(s) in cluster: ${clusterName}.`,
        clusterName,
        count,
        nodes: `${nodeName}:1.00`,
        state: 'resolved',
      });
    });

    it('should handle ccs', async () => {
      const ccs = 'testCluster';
      (fetchDiskUsageNodeStats as jest.Mock).mockImplementation(() => {
        return [
          {
            ...stat,
            ccs,
          },
        ];
      });
      const alert = new DiskUsageAlert() as IDiskUsageAlertMock;
      alert.initializeAlertType(
        getUiSettingsService as any,
        monitoringCluster as any,
        getLogger as any,
        config as any,
        kibanaUrl,
        false
      );
      const type = alert.getAlertType();
      await type.executor({
        ...executorOptions,
        params: alert.defaultParams,
      } as any);
      const count = 1;
      expect(scheduleActions).toHaveBeenCalledWith('default', {
        internalFullMessage: `Disk usage alert is firing for ${count} node(s) in cluster: ${clusterName}. [View nodes](http://localhost:5601/app/monitoring#elasticsearch/nodes?_g=(cluster_uuid:${clusterUuid},ccs:${ccs}))`,
        internalShortMessage: `Disk usage alert is firing for ${count} node(s) in cluster: ${clusterName}. Verify disk usage levels across affected nodes.`,
        action: `[View nodes](http://localhost:5601/app/monitoring#elasticsearch/nodes?_g=(cluster_uuid:${clusterUuid},ccs:${ccs}))`,
        actionPlain: 'Verify disk usage levels across affected nodes.',
        clusterName,
        count,
        nodes: `${nodeName}:${diskUsage.toFixed(2)}`,
        state: 'firing',
      });
    });

    it('should show proper counts for resolved and firing nodes', async () => {
      (fetchDiskUsageNodeStats as jest.Mock).mockImplementation(() => {
        return [
          {
            ...stat,
            diskUsage: 1,
          },
          {
            ...stat,
            nodeId: 'anotherNode',
            nodeName: 'anotherNode',
            diskUsage: 99,
          },
        ];
      });
      (getState as jest.Mock).mockImplementation(() => {
        return {
          alertStates: [
            {
              cluster: {
                clusterUuid,
                clusterName,
              },
              ccs: null,
              diskUsage: 91,
              nodeId,
              nodeName,
              ui: {
                isFiring: true,
                message: null,
                severity: 'danger',
                resolvedMS: 0,
                triggeredMS: 1,
                lastCheckedMS: 0,
              },
            },
            {
              cluster: {
                clusterUuid,
                clusterName,
              },
              ccs: null,
              diskUsage: 100,
              nodeId: 'anotherNode',
              nodeName: 'anotherNode',
              ui: {
                isFiring: true,
                message: null,
                severity: 'danger',
                resolvedMS: 0,
                triggeredMS: 1,
                lastCheckedMS: 0,
              },
            },
          ],
        };
      });
      const alert = new DiskUsageAlert() as IDiskUsageAlertMock;
      alert.initializeAlertType(
        getUiSettingsService as any,
        monitoringCluster as any,
        getLogger as any,
        config as any,
        kibanaUrl,
        false
      );
      const type = alert.getAlertType();
      await type.executor({
        ...executorOptions,
        params: alert.defaultParams,
      } as any);
      const count = 1;
      expect(replaceState).toHaveBeenCalledWith({
        alertStates: [
          {
            cluster: { clusterUuid, clusterName },
            ccs: null,
            diskUsage: 1,
            nodeId,
            nodeName,
            ui: {
              isFiring: false,
              message: {
                text:
                  'The disk usage on node myNodeName is now under the threshold, currently reporting at 1.00% as of #resolved',
                tokens: [
                  {
                    startToken: '#resolved',
                    type: 'time',
                    isAbsolute: true,
                    isRelative: false,
                    timestamp: 1,
                  },
                ],
              },
              severity: 'danger',
              resolvedMS: 1,
              triggeredMS: 1,
              lastCheckedMS: 0,
            },
          },
          {
            ccs: null,
            cluster: { clusterUuid, clusterName },
            diskUsage: 99,
            nodeId: 'anotherNode',
            nodeName: 'anotherNode',
            ui: {
              isFiring: true,
              message: {
                text:
                  'Node #start_linkanotherNode#end_link is reporting disk usage of 99.00% at #absolute',
                nextSteps: [
                  {
                    text: '#start_linkCheck hot threads#end_link',
                    tokens: [
                      {
                        startToken: '#start_link',
                        endToken: '#end_link',
                        type: 'docLink',
                        partialUrl:
                          '{elasticWebsiteUrl}/guide/en/elasticsearch/reference/{docLinkVersion}/cluster-nodes-hot-threads.html',
                      },
                    ],
                  },
                  {
                    text: '#start_linkCheck long running tasks#end_link',
                    tokens: [
                      {
                        startToken: '#start_link',
                        endToken: '#end_link',
                        type: 'docLink',
                        partialUrl:
                          '{elasticWebsiteUrl}/guide/en/elasticsearch/reference/{docLinkVersion}/tasks.html',
                      },
                    ],
                  },
                ],
                tokens: [
                  {
                    startToken: '#absolute',
                    type: 'time',
                    isAbsolute: true,
                    isRelative: false,
                    timestamp: 1,
                  },
                  {
                    startToken: '#start_link',
                    endToken: '#end_link',
                    type: 'link',
                    url: 'elasticsearch/nodes/anotherNode',
                  },
                ],
              },
              severity: 'danger',
              resolvedMS: 0,
              triggeredMS: 1,
              lastCheckedMS: 0,
            },
          },
        ],
      });
      expect(scheduleActions).toHaveBeenCalledTimes(1);
      expect(scheduleActions.mock.calls[0]).toEqual([
        'default',
        {
          action:
            '[View nodes](http://localhost:5601/app/monitoring#elasticsearch/nodes?_g=(cluster_uuid:abc123))',
          actionPlain: 'Verify disk usage levels across affected nodes.',
          internalFullMessage:
            'Disk usage alert is firing for 1 node(s) in cluster: testCluster. [View nodes](http://localhost:5601/app/monitoring#elasticsearch/nodes?_g=(cluster_uuid:abc123))',
          internalShortMessage:
            'Disk usage alert is firing for 1 node(s) in cluster: testCluster. Verify disk usage levels across affected nodes.',
          nodes: 'anotherNode:99.00',
          clusterName,
          count,
          state: 'firing',
        },
      ]);
    });

    it('should fire with different messaging for cloud', async () => {
      const alert = new DiskUsageAlert() as IDiskUsageAlertMock;
      alert.initializeAlertType(
        getUiSettingsService as any,
        monitoringCluster as any,
        getLogger as any,
        config as any,
        kibanaUrl,
        true
      );
      const type = alert.getAlertType();
      await type.executor({
        ...executorOptions,
        params: alert.defaultParams,
      } as any);
      const count = 1;
      expect(scheduleActions).toHaveBeenCalledWith('default', {
        internalFullMessage: `Disk usage alert is firing for ${count} node(s) in cluster: ${clusterName}. Verify disk usage levels across affected nodes.`,
        internalShortMessage: `Disk usage alert is firing for ${count} node(s) in cluster: ${clusterName}. Verify disk usage levels across affected nodes.`,
        action: `[View nodes](http://localhost:5601/app/monitoring#elasticsearch/nodes?_g=(cluster_uuid:${clusterUuid}))`,
        actionPlain: 'Verify disk usage levels across affected nodes.',
        clusterName,
        count,
        nodes: `${nodeName}:${diskUsage.toFixed(2)}`,
        state: 'firing',
      });
    });
  });
});
