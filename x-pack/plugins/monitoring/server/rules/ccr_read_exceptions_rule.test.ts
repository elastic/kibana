/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { CCRReadExceptionsRule } from './ccr_read_exceptions_rule';
import { RULE_CCR_READ_EXCEPTIONS } from '../../common/constants';
import { fetchCCRReadExceptions } from '../lib/alerts/fetch_ccr_read_exceptions';
import { fetchClusters } from '../lib/alerts/fetch_clusters';
import { alertsMock } from '@kbn/alerting-plugin/server/mocks';
import { ALERT_REASON } from '@kbn/rule-data-utils';

type ICCRReadExceptionsRuleMock = CCRReadExceptionsRule & {
  defaultParams: {
    duration: string;
  };
} & {
  actionVariables: Array<{
    name: string;
    description: string;
  }>;
};

const RealDate = Date;

jest.mock('../lib/alerts/fetch_ccr_read_exceptions', () => ({
  fetchCCRReadExceptions: jest.fn(),
}));
jest.mock('../lib/alerts/fetch_clusters', () => ({
  fetchClusters: jest.fn(),
}));

jest.mock('../static_globals', () => ({
  Globals: {
    app: {
      getLogger: () => ({ debug: jest.fn() }),
      url: 'http://localhost:5601',
      config: {
        ui: {
          ccs: { enabled: true },
          container: { elasticsearch: { enabled: false } },
        },
      },
    },
  },
}));

describe('CCRReadExceptionsRule', () => {
  it('should have defaults', () => {
    const rule = new CCRReadExceptionsRule() as ICCRReadExceptionsRuleMock;
    expect(rule.ruleOptions.id).toBe(RULE_CCR_READ_EXCEPTIONS);
    expect(rule.ruleOptions.name).toBe('CCR read exceptions');
    expect(rule.ruleOptions.throttle).toBe('6h');
    expect(rule.ruleOptions.defaultParams).toStrictEqual({
      duration: '1h',
    });
    expect(rule.ruleOptions.actionVariables).toStrictEqual([
      {
        name: 'remoteCluster',
        description: 'The remote cluster experiencing CCR read exceptions.',
      },
      {
        name: 'followerIndex',
        description: 'The follower index reporting CCR read exceptions.',
      },
      {
        name: 'internalShortMessage',
        description: 'The short internal message generated by Elastic.',
      },
      {
        name: 'internalFullMessage',
        description: 'The full internal message generated by Elastic.',
      },
      { name: 'state', description: 'The current state of the alert.' },
      { name: 'clusterName', description: 'The cluster to which the node(s) belongs.' },
      { name: 'action', description: 'The recommended action for this alert.' },
      {
        name: 'actionPlain',
        description: 'The recommended action for this alert, without any markdown.',
      },
    ]);
  });
  describe('execute', () => {
    const FakeDate = function () {};
    FakeDate.prototype.valueOf = () => 1;

    const clusterUuid = 'abc123';
    const clusterName = 'testCluster';
    const nodeId = 'myNodeId';
    const nodeName = 'myNodeName';
    const remoteCluster = 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1';
    const followerIndex = '.follower_index_1';
    const leaderIndex = '.leader_index_1';
    const readExceptions = [
      {
        exception: {
          type: 'read_exceptions_type_1',
          reason: 'read_exceptions_reason_1',
        },
      },
    ];
    const stat = {
      remoteCluster,
      followerIndex,
      leaderIndex,
      read_exceptions: readExceptions,
      clusterUuid,
      nodeId,
      nodeName,
    };

    const services = alertsMock.createRuleExecutorServices();

    const executorOptions = {
      services,
      state: {},
    };

    beforeEach(() => {
      Date = FakeDate as DateConstructor;
      (fetchCCRReadExceptions as jest.Mock).mockImplementation(() => {
        return [stat];
      });
      (fetchClusters as jest.Mock).mockImplementation(() => {
        return [{ clusterUuid, clusterName }];
      });
    });

    afterEach(() => {
      Date = RealDate;
      jest.resetAllMocks();
    });

    it('should fire action', async () => {
      const rule = new CCRReadExceptionsRule() as ICCRReadExceptionsRuleMock;
      const type = rule.getRuleType();
      await type.executor({
        ...executorOptions,
        params: rule.ruleOptions.defaultParams,
      } as any);
      expect(services.alertsClient.report).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.report).toHaveBeenCalledWith({
        actionGroup: 'default',
        id: 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1:.follower_index_1',
        state: {
          alertStates: [
            {
              ccs: undefined,
              cluster: { clusterName: 'testCluster', clusterUuid: 'abc123' },
              itemLabel: '.follower_index_1',
              meta: {
                followerIndex: '.follower_index_1',
                instanceId: 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1:.follower_index_1',
                itemLabel: '.follower_index_1',
                lastReadException: undefined,
                leaderIndex: '.leader_index_1',
                remoteCluster: 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1',
                shardId: undefined,
              },
              nodeId: 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1:.follower_index_1',
              nodeName: '.follower_index_1',
              ui: {
                isFiring: true,
                lastCheckedMS: 0,
                message: {
                  code: undefined,
                  nextSteps: [
                    {
                      text: '#start_linkIdentify CCR usage/stats#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          startToken: '#start_link',
                          type: 'link',
                          url: 'elasticsearch/ccr',
                        },
                      ],
                    },
                    {
                      text: '#start_linkManage CCR follower indices#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{basePath}management/data/cross_cluster_replication/follower_indices',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkCreate auto-follow patterns#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{basePath}management/data/cross_cluster_replication/auto_follow_patterns',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkAdd follower index API (Docs)#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/elasticsearch/reference/{docLinkVersion}/ccr-put-follow.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkCross-cluster replication (Docs)#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/elasticsearch/reference/{docLinkVersion}/xpack-ccr.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkBi-directional replication (Blog)#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}blog/bi-directional-replication-with-elasticsearch-cross-cluster-replication-ccr',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkFollow the Leader (Blog)#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}blog/follow-the-leader-an-introduction-to-cross-cluster-replication-in-elasticsearch',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                  ],
                  text: 'Follower index #start_link.follower_index_1#end_link is reporting CCR read exceptions on remote cluster: BcK-0pmsQniyPQfZuauuXw_remote_cluster_1 at #absolute',
                  tokens: [
                    {
                      isAbsolute: true,
                      isRelative: false,
                      startToken: '#absolute',
                      timestamp: 1,
                      type: 'time',
                    },
                    {
                      endToken: '#end_link',
                      startToken: '#start_link',
                      type: 'link',
                      url: 'elasticsearch/ccr/.follower_index_1/shard/undefined',
                    },
                  ],
                },
                severity: 'danger',
                triggeredMS: 1,
              },
            },
          ],
        },
      });
      expect(services.alertsClient.setAlertData).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.setAlertData).toHaveBeenCalledWith({
        id: 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1:.follower_index_1',
        context: {
          internalFullMessage: `CCR read exceptions alert is firing for the following remote cluster: ${remoteCluster}. Current 'follower_index' index affected: ${followerIndex}. [View CCR stats](http://localhost:5601/app/monitoring#/elasticsearch/ccr?_g=(cluster_uuid:'${clusterUuid}'))`,
          internalShortMessage: `CCR read exceptions alert is firing for the following remote cluster: ${remoteCluster}. Verify follower and leader index relationships on the affected remote cluster.`,
          action: `[View CCR stats](http://localhost:5601/app/monitoring#/elasticsearch/ccr?_g=(cluster_uuid:'${clusterUuid}'))`,
          actionPlain:
            'Verify follower and leader index relationships on the affected remote cluster.',
          clusterName,
          state: 'firing',
          remoteCluster,
          remoteClusters: remoteCluster,
          followerIndex,
          followerIndices: followerIndex,
        },
        payload: {
          [ALERT_REASON]: `CCR read exceptions alert is firing for the following remote cluster: ${remoteCluster}. Verify follower and leader index relationships on the affected remote cluster.`,
        },
      });
    });

    it('should handle ccs', async () => {
      const ccs = 'testCluster';
      (fetchCCRReadExceptions as jest.Mock).mockImplementation(() => {
        return [
          {
            ...stat,
            ccs,
          },
        ];
      });
      const rule = new CCRReadExceptionsRule() as ICCRReadExceptionsRuleMock;
      const type = rule.getRuleType();
      await type.executor({
        ...executorOptions,
        params: rule.ruleOptions.defaultParams,
      } as any);
      expect(services.alertsClient.report).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.report).toHaveBeenCalledWith({
        actionGroup: 'default',
        id: 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1:.follower_index_1',
        state: {
          alertStates: [
            {
              ccs: 'testCluster',
              cluster: { clusterName: 'testCluster', clusterUuid: 'abc123' },
              itemLabel: '.follower_index_1',
              meta: {
                followerIndex: '.follower_index_1',
                instanceId: 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1:.follower_index_1',
                itemLabel: '.follower_index_1',
                lastReadException: undefined,
                leaderIndex: '.leader_index_1',
                remoteCluster: 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1',
                shardId: undefined,
              },
              nodeId: 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1:.follower_index_1',
              nodeName: '.follower_index_1',
              ui: {
                isFiring: true,
                lastCheckedMS: 0,
                message: {
                  code: undefined,
                  nextSteps: [
                    {
                      text: '#start_linkIdentify CCR usage/stats#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          startToken: '#start_link',
                          type: 'link',
                          url: 'elasticsearch/ccr',
                        },
                      ],
                    },
                    {
                      text: '#start_linkManage CCR follower indices#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{basePath}management/data/cross_cluster_replication/follower_indices',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkCreate auto-follow patterns#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{basePath}management/data/cross_cluster_replication/auto_follow_patterns',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkAdd follower index API (Docs)#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/elasticsearch/reference/{docLinkVersion}/ccr-put-follow.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkCross-cluster replication (Docs)#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}guide/en/elasticsearch/reference/{docLinkVersion}/xpack-ccr.html',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkBi-directional replication (Blog)#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}blog/bi-directional-replication-with-elasticsearch-cross-cluster-replication-ccr',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                    {
                      text: '#start_linkFollow the Leader (Blog)#end_link',
                      tokens: [
                        {
                          endToken: '#end_link',
                          partialUrl:
                            '{elasticWebsiteUrl}blog/follow-the-leader-an-introduction-to-cross-cluster-replication-in-elasticsearch',
                          startToken: '#start_link',
                          type: 'docLink',
                        },
                      ],
                    },
                  ],
                  text: 'Follower index #start_link.follower_index_1#end_link is reporting CCR read exceptions on remote cluster: BcK-0pmsQniyPQfZuauuXw_remote_cluster_1 at #absolute',
                  tokens: [
                    {
                      isAbsolute: true,
                      isRelative: false,
                      startToken: '#absolute',
                      timestamp: 1,
                      type: 'time',
                    },
                    {
                      endToken: '#end_link',
                      startToken: '#start_link',
                      type: 'link',
                      url: 'elasticsearch/ccr/.follower_index_1/shard/undefined',
                    },
                  ],
                },
                severity: 'danger',
                triggeredMS: 1,
              },
            },
          ],
        },
      });
      expect(services.alertsClient.setAlertData).toHaveBeenCalledTimes(1);
      expect(services.alertsClient.setAlertData).toHaveBeenCalledWith({
        id: 'BcK-0pmsQniyPQfZuauuXw_remote_cluster_1:.follower_index_1',
        context: {
          internalFullMessage: `CCR read exceptions alert is firing for the following remote cluster: ${remoteCluster}. Current 'follower_index' index affected: ${followerIndex}. [View CCR stats](http://localhost:5601/app/monitoring#/elasticsearch/ccr?_g=(cluster_uuid:'${clusterUuid}',ccs:testCluster))`,
          internalShortMessage: `CCR read exceptions alert is firing for the following remote cluster: ${remoteCluster}. Verify follower and leader index relationships on the affected remote cluster.`,
          action: `[View CCR stats](http://localhost:5601/app/monitoring#/elasticsearch/ccr?_g=(cluster_uuid:'${clusterUuid}',ccs:testCluster))`,
          actionPlain:
            'Verify follower and leader index relationships on the affected remote cluster.',
          clusterName,
          state: 'firing',
          remoteCluster,
          remoteClusters: remoteCluster,
          followerIndex,
          followerIndices: followerIndex,
        },
        payload: {
          [ALERT_REASON]: `CCR read exceptions alert is firing for the following remote cluster: ${remoteCluster}. Verify follower and leader index relationships on the affected remote cluster.`,
        },
      });
    });
  });
});
