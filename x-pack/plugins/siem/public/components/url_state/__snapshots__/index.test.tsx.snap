// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UrlStateComponents UrlStateContainer mounts and renders 1`] = `
<MockedProvider
  addTypename={true}
>
  <ApolloProvider
    client={
      ApolloClient {
        "__operations_cache__": Map {},
        "cache": InMemoryCache {
          "addTypename": true,
          "config": Object {
            "addTypename": true,
            "dataIdFromObject": [Function],
            "fragmentMatcher": HeuristicFragmentMatcher {},
            "storeFactory": [Function],
          },
          "data": ObjectCache {
            "data": Object {},
          },
          "optimistic": Array [],
          "silenceBroadcast": false,
          "typenameDocumentCache": WeakMap {},
          "watches": Array [],
        },
        "defaultOptions": Object {},
        "disableNetworkFetches": false,
        "link": ApolloLink {
          "request": [Function],
        },
        "mutate": [Function],
        "query": [Function],
        "queryDeduplication": true,
        "reFetchObservableQueries": [Function],
        "resetStore": [Function],
        "resetStoreCallbacks": Array [],
        "ssrMode": false,
        "store": DataStore {
          "cache": InMemoryCache {
            "addTypename": true,
            "config": Object {
              "addTypename": true,
              "dataIdFromObject": [Function],
              "fragmentMatcher": HeuristicFragmentMatcher {},
              "storeFactory": [Function],
            },
            "data": ObjectCache {
              "data": Object {},
            },
            "optimistic": Array [],
            "silenceBroadcast": false,
            "typenameDocumentCache": WeakMap {},
            "watches": Array [],
          },
        },
        "version": "2.3.8",
        "watchQuery": [Function],
      }
    }
  >
    <pure(Component)
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <Component
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <I18nProvider>
          <IntlProvider
            defaultLocale="en"
            formats={
              Object {
                "date": Object {
                  "full": Object {
                    "day": "numeric",
                    "month": "long",
                    "weekday": "long",
                    "year": "numeric",
                  },
                  "long": Object {
                    "day": "numeric",
                    "month": "long",
                    "year": "numeric",
                  },
                  "medium": Object {
                    "day": "numeric",
                    "month": "short",
                    "year": "numeric",
                  },
                  "short": Object {
                    "day": "numeric",
                    "month": "numeric",
                    "year": "2-digit",
                  },
                },
                "number": Object {
                  "currency": Object {
                    "style": "currency",
                  },
                  "percent": Object {
                    "style": "percent",
                  },
                },
                "relative": Object {
                  "days": Object {
                    "units": "day",
                  },
                  "hours": Object {
                    "units": "hour",
                  },
                  "minutes": Object {
                    "units": "minute",
                  },
                  "months": Object {
                    "units": "month",
                  },
                  "seconds": Object {
                    "units": "second",
                  },
                  "years": Object {
                    "units": "year",
                  },
                },
                "time": Object {
                  "full": Object {
                    "hour": "numeric",
                    "minute": "numeric",
                    "second": "numeric",
                    "timeZoneName": "short",
                  },
                  "long": Object {
                    "hour": "numeric",
                    "minute": "numeric",
                    "second": "numeric",
                    "timeZoneName": "short",
                  },
                  "medium": Object {
                    "hour": "numeric",
                    "minute": "numeric",
                    "second": "numeric",
                  },
                  "short": Object {
                    "hour": "numeric",
                    "minute": "numeric",
                  },
                },
              }
            }
            locale="en"
            messages={Object {}}
            textComponent={Symbol(react.fragment)}
          >
            <ApolloProvider
              client={
                ApolloClient {
                  "__operations_cache__": Map {},
                  "cache": InMemoryCache {
                    "addTypename": true,
                    "config": Object {
                      "addTypename": true,
                      "dataIdFromObject": [Function],
                      "fragmentMatcher": HeuristicFragmentMatcher {},
                      "storeFactory": [Function],
                    },
                    "data": ObjectCache {
                      "data": Object {},
                    },
                    "optimistic": Array [],
                    "silenceBroadcast": false,
                    "typenameDocumentCache": WeakMap {},
                    "watches": Array [],
                  },
                  "defaultOptions": Object {},
                  "disableNetworkFetches": false,
                  "link": ApolloLink {
                    "request": [Function],
                  },
                  "mutate": [Function],
                  "query": [Function],
                  "queryDeduplication": true,
                  "reFetchObservableQueries": [Function],
                  "resetStore": [Function],
                  "resetStoreCallbacks": Array [],
                  "ssrMode": false,
                  "store": DataStore {
                    "cache": InMemoryCache {
                      "addTypename": true,
                      "config": Object {
                        "addTypename": true,
                        "dataIdFromObject": [Function],
                        "fragmentMatcher": HeuristicFragmentMatcher {},
                        "storeFactory": [Function],
                      },
                      "data": ObjectCache {
                        "data": Object {},
                      },
                      "optimistic": Array [],
                      "silenceBroadcast": false,
                      "typenameDocumentCache": WeakMap {},
                      "watches": Array [],
                    },
                  },
                  "version": "2.3.8",
                  "watchQuery": [Function],
                }
              }
            >
              <Provider
                store={
                  Object {
                    "dispatch": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                    Symbol(observable): [Function],
                  }
                }
              >
                <ThemeProvider
                  theme={[Function]}
                >
                  <DragDropContext
                    onDragEnd={[MockFunction]}
                  >
                    <Router
                      history={
                        Object {
                          "action": "POP",
                          "block": [MockFunction],
                          "createHref": [MockFunction],
                          "go": [MockFunction],
                          "goBack": [MockFunction],
                          "goForward": [MockFunction],
                          "length": 2,
                          "listen": [MockFunction] {
                            "calls": Array [
                              Array [
                                [Function],
                              ],
                            ],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                          "location": Object {
                            "hash": "",
                            "pathname": "/network",
                            "search": "",
                            "state": "",
                          },
                          "push": [MockFunction],
                          "replace": [MockFunction] {
                            "calls": Array [
                              Array [
                                Object {
                                  "hash": "",
                                  "pathname": "/network",
                                  "search": "?kqlQuery=!((filterQuery:!n,model:hosts,type:details),(filterQuery:!n,model:hosts,type:page),(filterQuery:!n,model:network,type:details),(filterQuery:!n,model:network,type:page))",
                                  "state": "",
                                },
                              ],
                            ],
                            "results": Array [
                              Object {
                                "type": "return",
                                "value": undefined,
                              },
                            ],
                          },
                        }
                      }
                    >
                      <Connect(pure(Component))>
                        <pure(Component)
                          setAbsoluteTimerange={[Function]}
                          setHostsKql={[Function]}
                          setNetworkKql={[Function]}
                          setRelativeTimerange={[Function]}
                          toggleTimelineLinkTo={[Function]}
                          urlState={
                            Object {
                              "kqlQuery": Array [
                                Object {
                                  "filterQuery": null,
                                  "model": "hosts",
                                  "type": "details",
                                },
                                Object {
                                  "filterQuery": null,
                                  "model": "hosts",
                                  "type": "page",
                                },
                                Object {
                                  "filterQuery": null,
                                  "model": "network",
                                  "type": "details",
                                },
                                Object {
                                  "filterQuery": null,
                                  "model": "network",
                                  "type": "page",
                                },
                              ],
                              "timerange": Object {
                                "global": Object {
                                  "linkTo": Array [
                                    "timeline",
                                  ],
                                  "timerange": Object {
                                    "from": 0,
                                    "fromStr": "now-24h",
                                    "kind": "relative",
                                    "to": 1,
                                    "toStr": "now",
                                  },
                                },
                                "timeline": Object {
                                  "linkTo": Object {
                                    "from": 0,
                                    "fromStr": "now-24h",
                                    "kind": "relative",
                                    "to": 1,
                                    "toStr": "now",
                                  },
                                  "timerange": Array [
                                    "global",
                                  ],
                                },
                              },
                            }
                          }
                        >
                          <Component
                            setAbsoluteTimerange={[Function]}
                            setHostsKql={[Function]}
                            setNetworkKql={[Function]}
                            setRelativeTimerange={[Function]}
                            toggleTimelineLinkTo={[Function]}
                            urlState={
                              Object {
                                "kqlQuery": Array [
                                  Object {
                                    "filterQuery": null,
                                    "model": "hosts",
                                    "type": "details",
                                  },
                                  Object {
                                    "filterQuery": null,
                                    "model": "hosts",
                                    "type": "page",
                                  },
                                  Object {
                                    "filterQuery": null,
                                    "model": "network",
                                    "type": "details",
                                  },
                                  Object {
                                    "filterQuery": null,
                                    "model": "network",
                                    "type": "page",
                                  },
                                ],
                                "timerange": Object {
                                  "global": Object {
                                    "linkTo": Array [
                                      "timeline",
                                    ],
                                    "timerange": Object {
                                      "from": 0,
                                      "fromStr": "now-24h",
                                      "kind": "relative",
                                      "to": 1,
                                      "toStr": "now",
                                    },
                                  },
                                  "timeline": Object {
                                    "linkTo": Object {
                                      "from": 0,
                                      "fromStr": "now-24h",
                                      "kind": "relative",
                                      "to": 1,
                                      "toStr": "now",
                                    },
                                    "timerange": Array [
                                      "global",
                                    ],
                                  },
                                },
                              }
                            }
                          >
                            <Route>
                              <UrlStateContainerLifecycle
                                data-test-subj="urlStateComponents"
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [MockFunction],
                                    "createHref": [MockFunction],
                                    "go": [MockFunction],
                                    "goBack": [MockFunction],
                                    "goForward": [MockFunction],
                                    "length": 2,
                                    "listen": [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          [Function],
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                    "location": Object {
                                      "hash": "",
                                      "pathname": "/network",
                                      "search": "",
                                      "state": "",
                                    },
                                    "push": [MockFunction],
                                    "replace": [MockFunction] {
                                      "calls": Array [
                                        Array [
                                          Object {
                                            "hash": "",
                                            "pathname": "/network",
                                            "search": "?kqlQuery=!((filterQuery:!n,model:hosts,type:details),(filterQuery:!n,model:hosts,type:page),(filterQuery:!n,model:network,type:details),(filterQuery:!n,model:network,type:page))",
                                            "state": "",
                                          },
                                        ],
                                      ],
                                      "results": Array [
                                        Object {
                                          "type": "return",
                                          "value": undefined,
                                        },
                                      ],
                                    },
                                  }
                                }
                                location={
                                  Object {
                                    "hash": "",
                                    "pathname": "/network",
                                    "search": "",
                                    "state": "",
                                  }
                                }
                                setAbsoluteTimerange={[Function]}
                                setHostsKql={[Function]}
                                setNetworkKql={[Function]}
                                setRelativeTimerange={[Function]}
                                toggleTimelineLinkTo={[Function]}
                                urlState={
                                  Object {
                                    "kqlQuery": Array [
                                      Object {
                                        "filterQuery": null,
                                        "model": "hosts",
                                        "type": "details",
                                      },
                                      Object {
                                        "filterQuery": null,
                                        "model": "hosts",
                                        "type": "page",
                                      },
                                      Object {
                                        "filterQuery": null,
                                        "model": "network",
                                        "type": "details",
                                      },
                                      Object {
                                        "filterQuery": null,
                                        "model": "network",
                                        "type": "page",
                                      },
                                    ],
                                    "timerange": Object {
                                      "global": Object {
                                        "linkTo": Array [
                                          "timeline",
                                        ],
                                        "timerange": Object {
                                          "from": 0,
                                          "fromStr": "now-24h",
                                          "kind": "relative",
                                          "to": 1,
                                          "toStr": "now",
                                        },
                                      },
                                      "timeline": Object {
                                        "linkTo": Object {
                                          "from": 0,
                                          "fromStr": "now-24h",
                                          "kind": "relative",
                                          "to": 1,
                                          "toStr": "now",
                                        },
                                        "timerange": Array [
                                          "global",
                                        ],
                                      },
                                    },
                                  }
                                }
                              />
                            </Route>
                          </Component>
                        </pure(Component)>
                      </Connect(pure(Component))>
                    </Router>
                  </DragDropContext>
                </ThemeProvider>
              </Provider>
            </ApolloProvider>
          </IntlProvider>
        </I18nProvider>
      </Component>
    </pure(Component)>
  </ApolloProvider>
</MockedProvider>
`;
