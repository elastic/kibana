// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IndicatorValueActions should only render add to timeline and copy to clipboard 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="euiFlexGroup emotion-euiFlexGroup-responsive-none-center-center-row"
      >
        <span
          class="euiToolTipAnchor emotion-euiToolTipAnchor-inlineBlock"
        >
          <div
            class="euiFlexItem emotion-euiFlexItem-grow-1"
            data-test-subj="undefinedTimelineButton"
          >
            <span
              data-test-subj="test-add-to-timeline"
            >
              Add To Timeline
            </span>
          </div>
        </span>
        <span
          class="euiToolTipAnchor emotion-euiToolTipAnchor-inlineBlock"
        >
          <button
            aria-label="Copy to clipboard"
            class="euiButtonIcon euiButtonIcon--xSmall emotion-euiButtonIcon-empty-primary-hoverStyles"
            data-test-subj="undefinedCopyToClipboardButton"
            type="button"
          >
            <span
              aria-hidden="true"
              class="euiButtonIcon__icon"
              color="inherit"
              data-euiicon-type="copyClipboard"
            />
          </button>
        </span>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="euiFlexGroup emotion-euiFlexGroup-responsive-none-center-center-row"
    >
      <span
        class="euiToolTipAnchor emotion-euiToolTipAnchor-inlineBlock"
      >
        <div
          class="euiFlexItem emotion-euiFlexItem-grow-1"
          data-test-subj="undefinedTimelineButton"
        >
          <span
            data-test-subj="test-add-to-timeline"
          >
            Add To Timeline
          </span>
        </div>
      </span>
      <span
        class="euiToolTipAnchor emotion-euiToolTipAnchor-inlineBlock"
      >
        <button
          aria-label="Copy to clipboard"
          class="euiButtonIcon euiButtonIcon--xSmall emotion-euiButtonIcon-empty-primary-hoverStyles"
          data-test-subj="undefinedCopyToClipboardButton"
          type="button"
        >
          <span
            aria-hidden="true"
            class="euiButtonIcon__icon"
            color="inherit"
            data-euiicon-type="copyClipboard"
          />
        </button>
      </span>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`IndicatorValueActions should render filter in/out and dropdown for add to timeline and copy to clipboard 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="euiFlexGroup emotion-euiFlexGroup-responsive-none-center-center-row"
      >
        <span
          class="euiToolTipAnchor emotion-euiToolTipAnchor-inlineBlock"
        >
          <button
            aria-label="Filter In"
            class="euiButtonIcon euiButtonIcon--xSmall emotion-euiButtonIcon-empty-primary-hoverStyles"
            data-test-subj="undefinedFilterInButton"
            type="button"
          >
            <span
              aria-hidden="true"
              class="euiButtonIcon__icon"
              color="inherit"
              data-euiicon-type="plusInCircle"
            />
          </button>
        </span>
        <span
          class="euiToolTipAnchor emotion-euiToolTipAnchor-inlineBlock"
        >
          <button
            aria-label="Filter Out"
            class="euiButtonIcon euiButtonIcon--xSmall emotion-euiButtonIcon-empty-primary-hoverStyles"
            data-test-subj="undefinedFilterOutButton"
            type="button"
          >
            <span
              aria-hidden="true"
              class="euiButtonIcon__icon"
              color="inherit"
              data-euiicon-type="minusInCircle"
            />
          </button>
        </span>
        <div
          class="euiPopover emotion-euiPopover"
          data-test-subj="undefinedPopoverButton"
        >
          <div
            class="euiPopover__anchor css-16vtueo-render"
          >
            <span
              class="euiToolTipAnchor emotion-euiToolTipAnchor-inlineBlock"
            >
              <button
                aria-label="More actions"
                class="euiButtonIcon euiButtonIcon--xSmall emotion-euiButtonIcon-empty-primary-hoverStyles"
                style="height: 100%;"
                type="button"
              >
                <span
                  aria-hidden="true"
                  class="euiButtonIcon__icon"
                  color="inherit"
                  data-euiicon-type="boxesHorizontal"
                />
              </button>
            </span>
          </div>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="euiFlexGroup emotion-euiFlexGroup-responsive-none-center-center-row"
    >
      <span
        class="euiToolTipAnchor emotion-euiToolTipAnchor-inlineBlock"
      >
        <button
          aria-label="Filter In"
          class="euiButtonIcon euiButtonIcon--xSmall emotion-euiButtonIcon-empty-primary-hoverStyles"
          data-test-subj="undefinedFilterInButton"
          type="button"
        >
          <span
            aria-hidden="true"
            class="euiButtonIcon__icon"
            color="inherit"
            data-euiicon-type="plusInCircle"
          />
        </button>
      </span>
      <span
        class="euiToolTipAnchor emotion-euiToolTipAnchor-inlineBlock"
      >
        <button
          aria-label="Filter Out"
          class="euiButtonIcon euiButtonIcon--xSmall emotion-euiButtonIcon-empty-primary-hoverStyles"
          data-test-subj="undefinedFilterOutButton"
          type="button"
        >
          <span
            aria-hidden="true"
            class="euiButtonIcon__icon"
            color="inherit"
            data-euiicon-type="minusInCircle"
          />
        </button>
      </span>
      <div
        class="euiPopover emotion-euiPopover"
        data-test-subj="undefinedPopoverButton"
      >
        <div
          class="euiPopover__anchor css-16vtueo-render"
        >
          <span
            class="euiToolTipAnchor emotion-euiToolTipAnchor-inlineBlock"
          >
            <button
              aria-label="More actions"
              class="euiButtonIcon euiButtonIcon--xSmall emotion-euiButtonIcon-empty-primary-hoverStyles"
              style="height: 100%;"
              type="button"
            >
              <span
                aria-hidden="true"
                class="euiButtonIcon__icon"
                color="inherit"
                data-euiicon-type="boxesHorizontal"
              />
            </button>
          </span>
        </div>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`IndicatorValueActions should return null if field and value are invalid 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div />
  </body>,
  "container": <div />,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
