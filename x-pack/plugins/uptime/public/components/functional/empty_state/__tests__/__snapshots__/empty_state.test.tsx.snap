// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EmptyState component doesn't render child components when count is falsey 1`] = `
<EmptyState
  basePath=""
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
>
  <EmptyStateLoading>
    <EuiEmptyPrompt
      body={
        <React.Fragment>
          <EuiLoadingSpinner
            size="xl"
          />
          <EuiSpacer />
          <EuiTitle
            size="l"
            textTransform="none"
          >
            <h2>
              Loading…
            </h2>
          </EuiTitle>
        </React.Fragment>
      }
      iconColor="subdued"
    >
      <div
        className="euiEmptyPrompt"
      >
        <EuiTextColor
          color="subdued"
          component="span"
        >
          <span
            className="euiTextColor euiTextColor--subdued"
          >
            <EuiText
              grow={true}
              size="m"
            >
              <div
                className="euiText euiText--medium"
              >
                <EuiLoadingSpinner
                  size="xl"
                >
                  <div
                    className="euiLoadingSpinner euiLoadingSpinner--xLarge"
                  />
                </EuiLoadingSpinner>
                <EuiSpacer>
                  <div
                    className="euiSpacer euiSpacer--l"
                  />
                </EuiSpacer>
                <EuiTitle
                  size="l"
                  textTransform="none"
                >
                  <h2
                    className="euiTitle euiTitle--large"
                  >
                    Loading…
                  </h2>
                </EuiTitle>
              </div>
            </EuiText>
          </span>
        </EuiTextColor>
      </div>
    </EuiEmptyPrompt>
  </EmptyStateLoading>
</EmptyState>
`;

exports[`EmptyState component renders child components when count is truthy 1`] = `
<Fragment>
  <div>
    Foo
  </div>
  <div>
    Bar
  </div>
  <div>
    Baz
  </div>
</Fragment>
`;

exports[`EmptyState component renders children while loading 1`] = `
<EmptyState
  basePath=""
  count={1}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  loading={true}
>
  <div>
    Should appear even while loading...
  </div>
</EmptyState>
`;

exports[`EmptyState component renders empty state with appropriate base path 1`] = `
<EmptyState
  basePath="foo"
  count={0}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  loading={false}
>
  <EmptyIndex
    basePath="foo"
  >
    <EuiFlexGroup
      justifyContent="center"
    >
      <div
        className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
      >
        <EuiFlexItem
          grow={false}
        >
          <div
            className="euiFlexItem euiFlexItem--flexGrowZero"
          >
            <EuiSpacer
              size="xs"
            >
              <div
                className="euiSpacer euiSpacer--xs"
              />
            </EuiSpacer>
            <EuiPanel
              grow={true}
              hasShadow={false}
              paddingSize="m"
            >
              <div
                className="euiPanel euiPanel--paddingMedium"
              >
                <EuiEmptyPrompt
                  body={
                    <React.Fragment>
                      <p>
                        <FormattedMessage
                          defaultMessage="{configureHeartbeatLink} to start logging uptime data."
                          id="xpack.uptime.emptyState.configureHeartbeatToGetStartedMessage"
                          values={
                            Object {
                              "configureHeartbeatLink": <EuiLink
                                color="primary"
                                href="foo/app/kibana#/home/tutorial/uptimeMonitors"
                                target="_blank"
                                type="button"
                              >
                                <FormattedMessage
                                  defaultMessage="Configure Heartbeat"
                                  id="xpack.uptime.emptyState.configureHeartbeatLinkText"
                                  values={Object {}}
                                />
                              </EuiLink>,
                            }
                          }
                        />
                      </p>
                    </React.Fragment>
                  }
                  iconColor="subdued"
                  iconType="uptimeApp"
                  title={
                    <EuiTitle
                      size="l"
                      textTransform="none"
                    >
                      <h3>
                        <FormattedMessage
                          defaultMessage="No uptime data available"
                          id="xpack.uptime.emptyState.noDataTitle"
                          values={Object {}}
                        />
                      </h3>
                    </EuiTitle>
                  }
                >
                  <div
                    className="euiEmptyPrompt"
                  >
                    <EuiIcon
                      color="subdued"
                      size="xxl"
                      type="uptimeApp"
                    >
                      <uptimeApp
                        className="euiIcon euiIcon--xxLarge euiIcon--subdued euiIcon--app"
                        focusable="false"
                        height="32"
                        style={null}
                        viewBox="0 0 32 32"
                        width="32"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <svg
                          className="euiIcon euiIcon--xxLarge euiIcon--subdued euiIcon--app"
                          focusable="false"
                          height="32"
                          style={null}
                          viewBox="0 0 32 32"
                          width="32"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            className="euiIcon__fillSecondary"
                            d="M4.216 12.377A10.948 10.948 0 0 0 2.181 17H.153a12.941 12.941 0 0 1 2.693-6.118l1.37 1.495zm2.948-2.703l-1.37-1.495A12.94 12.94 0 0 1 13 6v2c-2.144 0-4.144.613-5.836 1.674z"
                          />
                          <path
                            d="M26 4.414V19c0 7.18-5.82 13-13 13C6.5 32 1.115 27.23.153 21H2.18c.94 5.12 5.427 9 10.819 9 6.075 0 11-4.925 11-11V4.414l-4.293 4.293-1.414-1.414L25 .586l6.707 6.707-1.414 1.414L26 4.414zm-7.836 9.909l1.472 1.354-7.577 8.235-4.835-4.442 1.353-1.473 3.364 3.09 6.223-6.764z"
                          />
                        </svg>
                      </uptimeApp>
                    </EuiIcon>
                    <EuiSpacer
                      size="s"
                    >
                      <div
                        className="euiSpacer euiSpacer--s"
                      />
                    </EuiSpacer>
                    <EuiTextColor
                      color="subdued"
                      component="span"
                    >
                      <span
                        className="euiTextColor euiTextColor--subdued"
                      >
                        <EuiTitle
                          size="m"
                          textTransform="none"
                        >
                          <EuiTitle
                            className="euiTitle euiTitle--medium"
                            size="l"
                            textTransform="none"
                          >
                            <h3
                              className="euiTitle euiTitle--large euiTitle euiTitle--medium"
                            >
                              <FormattedMessage
                                defaultMessage="No uptime data available"
                                id="xpack.uptime.emptyState.noDataTitle"
                                values={Object {}}
                              >
                                No uptime data available
                              </FormattedMessage>
                            </h3>
                          </EuiTitle>
                        </EuiTitle>
                        <EuiSpacer
                          size="m"
                        >
                          <div
                            className="euiSpacer euiSpacer--m"
                          />
                        </EuiSpacer>
                        <EuiText
                          grow={true}
                          size="m"
                        >
                          <div
                            className="euiText euiText--medium"
                          >
                            <p>
                              <FormattedMessage
                                defaultMessage="{configureHeartbeatLink} to start logging uptime data."
                                id="xpack.uptime.emptyState.configureHeartbeatToGetStartedMessage"
                                values={
                                  Object {
                                    "configureHeartbeatLink": <EuiLink
                                      color="primary"
                                      href="foo/app/kibana#/home/tutorial/uptimeMonitors"
                                      target="_blank"
                                      type="button"
                                    >
                                      <FormattedMessage
                                        defaultMessage="Configure Heartbeat"
                                        id="xpack.uptime.emptyState.configureHeartbeatLinkText"
                                        values={Object {}}
                                      />
                                    </EuiLink>,
                                  }
                                }
                              >
                                <EuiLink
                                  color="primary"
                                  href="foo/app/kibana#/home/tutorial/uptimeMonitors"
                                  target="_blank"
                                  type="button"
                                >
                                  <a
                                    className="euiLink euiLink--primary"
                                    href="foo/app/kibana#/home/tutorial/uptimeMonitors"
                                    rel="noopener noreferrer"
                                    target="_blank"
                                  >
                                    <FormattedMessage
                                      defaultMessage="Configure Heartbeat"
                                      id="xpack.uptime.emptyState.configureHeartbeatLinkText"
                                      values={Object {}}
                                    >
                                      Configure Heartbeat
                                    </FormattedMessage>
                                  </a>
                                </EuiLink>
                                 to start logging uptime data.
                              </FormattedMessage>
                            </p>
                          </div>
                        </EuiText>
                      </span>
                    </EuiTextColor>
                  </div>
                </EuiEmptyPrompt>
              </div>
            </EuiPanel>
          </div>
        </EuiFlexItem>
      </div>
    </EuiFlexGroup>
  </EmptyIndex>
</EmptyState>
`;


exports[`EmptyState component renders the message when an error occurs 1`] = `
<EmptyState
  basePath=""
  count={1}
  error="An error occurred"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
>
  <EmptyStateError
    errorMessage="An error occurred"
  >
    <EuiPanel
      grow={true}
      hasShadow={false}
      paddingSize="m"
    >
      <div
        className="euiPanel euiPanel--paddingMedium"
      >
        <EuiEmptyPrompt
          body={
            <p>
              An error occurred
            </p>
          }
          iconColor="subdued"
          title={
            <EuiTitle
              size="l"
              textTransform="none"
            >
              <h3>
                Error
              </h3>
            </EuiTitle>
          }
        >
          <div
            className="euiEmptyPrompt"
          >
            <EuiTextColor
              color="subdued"
              component="span"
            >
              <span
                className="euiTextColor euiTextColor--subdued"
              >
                <EuiTitle
                  size="m"
                  textTransform="none"
                >
                  <EuiTitle
                    className="euiTitle euiTitle--medium"
                    size="l"
                    textTransform="none"
                  >
                    <h3
                      className="euiTitle euiTitle--large euiTitle euiTitle--medium"
                    >
                      Error
                    </h3>
                  </EuiTitle>
                </EuiTitle>
                <EuiSpacer
                  size="m"
                >
                  <div
                    className="euiSpacer euiSpacer--m"
                  />
                </EuiSpacer>
                <EuiText
                  grow={true}
                  size="m"
                >
                  <div
                    className="euiText euiText--medium"
                  >
                    <p>
                      An error occurred
                    </p>
                  </div>
                </EuiText>
              </span>
            </EuiTextColor>
          </div>
        </EuiEmptyPrompt>
      </div>
    </EuiPanel>
  </EmptyStateError>
</EmptyState>
`;
