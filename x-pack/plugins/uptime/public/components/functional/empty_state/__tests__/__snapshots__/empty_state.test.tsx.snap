// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EmptyState component doesn't render child components when count is falsey 1`] = `
<EmptyState
  basePath=""
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
>
  <EmptyStateLoading>
    <EuiEmptyPrompt
      body={
        <React.Fragment>
          <EuiLoadingSpinner
            size="xl"
          />
          <EuiSpacer />
          <EuiTitle
            size="l"
            textTransform="none"
          >
            <h2>
              Loading…
            </h2>
          </EuiTitle>
        </React.Fragment>
      }
      iconColor="subdued"
    >
      <div
        className="euiEmptyPrompt"
      >
        <EuiTextColor
          color="subdued"
          component="span"
        >
          <span
            className="euiTextColor euiTextColor--subdued"
          >
            <EuiText
              grow={true}
              size="m"
            >
              <div
                className="euiText euiText--medium"
              >
                <EuiLoadingSpinner
                  size="xl"
                >
                  <div
                    className="euiLoadingSpinner euiLoadingSpinner--xLarge"
                  />
                </EuiLoadingSpinner>
                <EuiSpacer>
                  <div
                    className="euiSpacer euiSpacer--l"
                  />
                </EuiSpacer>
                <EuiTitle
                  size="l"
                  textTransform="none"
                >
                  <h2
                    className="euiTitle euiTitle--large"
                  >
                    Loading…
                  </h2>
                </EuiTitle>
              </div>
            </EuiText>
          </span>
        </EuiTextColor>
      </div>
    </EuiEmptyPrompt>
  </EmptyStateLoading>
</EmptyState>
`;

exports[`EmptyState component renders child components when count is truthy 1`] = `
<Fragment>
  <div>
    Foo
  </div>
  <div>
    Bar
  </div>
  <div>
    Baz
  </div>
</Fragment>
`;

exports[`EmptyState component renders children while loading 1`] = `
<EmptyState
  basePath=""
  count={1}
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  loading={true}
>
  <div>
    Should appear even while loading...
  </div>
</EmptyState>
`;

exports[`EmptyState component renders the message when an error occurs 1`] = `
<EmptyState
  basePath=""
  count={1}
  error="An error occurred"
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
>
  <EmptyStateError
    errorMessage="An error occurred"
  >
    <EuiPanel
      grow={true}
      hasShadow={false}
      paddingSize="m"
    >
      <div
        className="euiPanel euiPanel--paddingMedium"
      >
        <EuiEmptyPrompt
          body={
            <p>
              An error occurred
            </p>
          }
          iconColor="subdued"
          title={
            <EuiTitle
              size="l"
              textTransform="none"
            >
              <h3>
                Error
              </h3>
            </EuiTitle>
          }
        >
          <div
            className="euiEmptyPrompt"
          >
            <EuiTextColor
              color="subdued"
              component="span"
            >
              <span
                className="euiTextColor euiTextColor--subdued"
              >
                <EuiTitle
                  size="m"
                  textTransform="none"
                >
                  <EuiTitle
                    className="euiTitle euiTitle--medium"
                    size="l"
                    textTransform="none"
                  >
                    <h3
                      className="euiTitle euiTitle--large euiTitle euiTitle--medium"
                    >
                      Error
                    </h3>
                  </EuiTitle>
                </EuiTitle>
                <EuiSpacer
                  size="m"
                >
                  <div
                    className="euiSpacer euiSpacer--m"
                  />
                </EuiSpacer>
                <EuiText
                  grow={true}
                  size="m"
                >
                  <div
                    className="euiText euiText--medium"
                  >
                    <p>
                      An error occurred
                    </p>
                  </div>
                </EuiText>
              </span>
            </EuiTextColor>
          </div>
        </EuiEmptyPrompt>
      </div>
    </EuiPanel>
  </EmptyStateError>
</EmptyState>
`;
