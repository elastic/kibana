// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EmptyState component doesn't render child components when count is falsey 1`] = `
<EmptyStateComponent
  basePath=""
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  loading={false}
>
  <EmptyStateLoading>
    <EuiEmptyPrompt
      body={
        <React.Fragment>
          <EuiLoadingSpinner
            size="xl"
          />
          <EuiSpacer />
          <EuiTitle
            size="l"
          >
            <h2>
              Loading…
            </h2>
          </EuiTitle>
        </React.Fragment>
      }
      iconColor="subdued"
    >
      <div
        className="euiEmptyPrompt"
      >
        <EuiTextColor
          color="subdued"
        >
          <span
            className="euiTextColor euiTextColor--subdued"
          >
            <EuiText>
              <div
                className="euiText euiText--medium"
              >
                <EuiLoadingSpinner
                  size="xl"
                >
                  <span
                    className="euiLoadingSpinner euiLoadingSpinner--xLarge"
                  />
                </EuiLoadingSpinner>
                <EuiSpacer>
                  <div
                    className="euiSpacer euiSpacer--l"
                  />
                </EuiSpacer>
                <EuiTitle
                  size="l"
                >
                  <h2
                    className="euiTitle euiTitle--large"
                  >
                    Loading…
                  </h2>
                </EuiTitle>
              </div>
            </EuiText>
          </span>
        </EuiTextColor>
      </div>
    </EuiEmptyPrompt>
  </EmptyStateLoading>
</EmptyStateComponent>
`;

exports[`EmptyState component renders child components when count is truthy 1`] = `
<Fragment>
  <div>
    Foo
  </div>
  <div>
    Bar
  </div>
  <div>
    Baz
  </div>
</Fragment>
`;

exports[`EmptyState component renders empty state with appropriate base path 1`] = `
<EmptyStateComponent
  basePath="foo"
  data={
    Object {
      "getDocCount": Object {
        "count": 0,
      },
    }
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  loading={false}
>
  <EmptyIndex
    basePath="foo"
  >
    <EuiFlexGroup
      justifyContent="center"
    >
      <div
        className="euiFlexGroup euiFlexGroup--gutterLarge euiFlexGroup--justifyContentCenter euiFlexGroup--directionRow euiFlexGroup--responsive"
      >
        <EuiFlexItem
          grow={false}
        >
          <div
            className="euiFlexItem euiFlexItem--flexGrowZero"
          >
            <EuiSpacer
              size="xs"
            >
              <div
                className="euiSpacer euiSpacer--xs"
              />
            </EuiSpacer>
            <EuiPanel
              grow={true}
              hasShadow={false}
              paddingSize="m"
            >
              <div
                className="euiPanel euiPanel--paddingMedium"
              >
                <EuiEmptyPrompt
                  body={
                    <React.Fragment>
                      <p>
                        <FormattedMessage
                          defaultMessage="{configureHeartbeatLink} to start logging uptime data."
                          id="xpack.uptime.emptyState.configureHeartbeatToGetStartedMessage"
                          values={
                            Object {
                              "configureHeartbeatLink": <EuiLink
                                color="primary"
                                href="foo/app/kibana#/home/tutorial/uptimeMonitors"
                                target="_blank"
                                type="button"
                              >
                                <FormattedMessage
                                  defaultMessage="Configure Heartbeat"
                                  id="xpack.uptime.emptyState.configureHeartbeatLinkText"
                                  values={Object {}}
                                />
                              </EuiLink>,
                            }
                          }
                        />
                      </p>
                    </React.Fragment>
                  }
                  iconColor="subdued"
                  iconType="uptimeApp"
                  title={
                    <EuiTitle
                      size="l"
                    >
                      <h3>
                        <FormattedMessage
                          defaultMessage="No uptime data available"
                          id="xpack.uptime.emptyState.noDataTitle"
                          values={Object {}}
                        />
                      </h3>
                    </EuiTitle>
                  }
                >
                  <div
                    className="euiEmptyPrompt"
                  >
                    <EuiIcon
                      color="subdued"
                      size="xxl"
                      type="uptimeApp"
                    >
                      <EuiIconEmpty
                        className="euiIcon euiIcon--xxLarge euiIcon--subdued euiIcon--app euiIcon-isLoading"
                        focusable="false"
                        style={null}
                      >
                        <svg
                          className="euiIcon euiIcon--xxLarge euiIcon--subdued euiIcon--app euiIcon-isLoading"
                          focusable="false"
                          height={16}
                          style={null}
                          viewBox="0 0 16 16"
                          width={16}
                          xmlns="http://www.w3.org/2000/svg"
                        />
                      </EuiIconEmpty>
                    </EuiIcon>
                    <EuiSpacer
                      size="s"
                    >
                      <div
                        className="euiSpacer euiSpacer--s"
                      />
                    </EuiSpacer>
                    <EuiTextColor
                      color="subdued"
                    >
                      <span
                        className="euiTextColor euiTextColor--subdued"
                      >
                        <EuiTitle>
                          <EuiTitle
                            className="euiTitle euiTitle--medium"
                            size="l"
                          >
                            <h3
                              className="euiTitle euiTitle--large euiTitle euiTitle--medium"
                            >
                              <FormattedMessage
                                defaultMessage="No uptime data available"
                                id="xpack.uptime.emptyState.noDataTitle"
                                values={Object {}}
                              >
                                No uptime data available
                              </FormattedMessage>
                            </h3>
                          </EuiTitle>
                        </EuiTitle>
                        <EuiSpacer
                          size="m"
                        >
                          <div
                            className="euiSpacer euiSpacer--m"
                          />
                        </EuiSpacer>
                        <EuiText>
                          <div
                            className="euiText euiText--medium"
                          >
                            <p>
                              <FormattedMessage
                                defaultMessage="{configureHeartbeatLink} to start logging uptime data."
                                id="xpack.uptime.emptyState.configureHeartbeatToGetStartedMessage"
                                values={
                                  Object {
                                    "configureHeartbeatLink": <EuiLink
                                      color="primary"
                                      href="foo/app/kibana#/home/tutorial/uptimeMonitors"
                                      target="_blank"
                                      type="button"
                                    >
                                      <FormattedMessage
                                        defaultMessage="Configure Heartbeat"
                                        id="xpack.uptime.emptyState.configureHeartbeatLinkText"
                                        values={Object {}}
                                      />
                                    </EuiLink>,
                                  }
                                }
                              >
                                <EuiLink
                                  color="primary"
                                  href="foo/app/kibana#/home/tutorial/uptimeMonitors"
                                  target="_blank"
                                  type="button"
                                >
                                  <a
                                    className="euiLink euiLink--primary"
                                    href="foo/app/kibana#/home/tutorial/uptimeMonitors"
                                    rel="noopener noreferrer"
                                    target="_blank"
                                  >
                                    <FormattedMessage
                                      defaultMessage="Configure Heartbeat"
                                      id="xpack.uptime.emptyState.configureHeartbeatLinkText"
                                      values={Object {}}
                                    >
                                      Configure Heartbeat
                                    </FormattedMessage>
                                  </a>
                                </EuiLink>
                                 to start logging uptime data.
                              </FormattedMessage>
                            </p>
                          </div>
                        </EuiText>
                      </span>
                    </EuiTextColor>
                  </div>
                </EuiEmptyPrompt>
              </div>
            </EuiPanel>
          </div>
        </EuiFlexItem>
      </div>
    </EuiFlexGroup>
  </EmptyIndex>
</EmptyStateComponent>
`;

exports[`EmptyState component renders error message when an error occurs 1`] = `
<EmptyStateComponent
  basePath=""
  errors={
    Array [
      Object {
        "extensions": undefined,
        "locations": undefined,
        "message": "An error occurred",
        "name": "foo",
        "nodes": undefined,
        "originalError": undefined,
        "path": undefined,
        "positions": undefined,
        "source": undefined,
      },
    ]
  }
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  loading={false}
>
  <EmptyStateError
    errorMessage="Error: An error occurred
"
  >
    <EuiPanel
      grow={true}
      hasShadow={false}
      paddingSize="m"
    >
      <div
        className="euiPanel euiPanel--paddingMedium"
      >
        <EuiEmptyPrompt
          body={
            <p>
              Error: An error occurred

            </p>
          }
          iconColor="subdued"
          title={
            <EuiTitle
              size="l"
            >
              <h3>
                Error
              </h3>
            </EuiTitle>
          }
        >
          <div
            className="euiEmptyPrompt"
          >
            <EuiTextColor
              color="subdued"
            >
              <span
                className="euiTextColor euiTextColor--subdued"
              >
                <EuiTitle>
                  <EuiTitle
                    className="euiTitle euiTitle--medium"
                    size="l"
                  >
                    <h3
                      className="euiTitle euiTitle--large euiTitle euiTitle--medium"
                    >
                      Error
                    </h3>
                  </EuiTitle>
                </EuiTitle>
                <EuiSpacer
                  size="m"
                >
                  <div
                    className="euiSpacer euiSpacer--m"
                  />
                </EuiSpacer>
                <EuiText>
                  <div
                    className="euiText euiText--medium"
                  >
                    <p>
                      Error: An error occurred

                    </p>
                  </div>
                </EuiText>
              </span>
            </EuiTextColor>
          </div>
        </EuiEmptyPrompt>
      </div>
    </EuiPanel>
  </EmptyStateError>
</EmptyStateComponent>
`;

exports[`EmptyState component renders loading state if no errors or doc count 1`] = `
<EmptyStateComponent
  basePath=""
  intl={
    Object {
      "defaultFormats": Object {},
      "defaultLocale": "en",
      "formatDate": [Function],
      "formatHTMLMessage": [Function],
      "formatMessage": [Function],
      "formatNumber": [Function],
      "formatPlural": [Function],
      "formatRelative": [Function],
      "formatTime": [Function],
      "formats": Object {
        "date": Object {
          "full": Object {
            "day": "numeric",
            "month": "long",
            "weekday": "long",
            "year": "numeric",
          },
          "long": Object {
            "day": "numeric",
            "month": "long",
            "year": "numeric",
          },
          "medium": Object {
            "day": "numeric",
            "month": "short",
            "year": "numeric",
          },
          "short": Object {
            "day": "numeric",
            "month": "numeric",
            "year": "2-digit",
          },
        },
        "number": Object {
          "currency": Object {
            "style": "currency",
          },
          "percent": Object {
            "style": "percent",
          },
        },
        "relative": Object {
          "days": Object {
            "units": "day",
          },
          "hours": Object {
            "units": "hour",
          },
          "minutes": Object {
            "units": "minute",
          },
          "months": Object {
            "units": "month",
          },
          "seconds": Object {
            "units": "second",
          },
          "years": Object {
            "units": "year",
          },
        },
        "time": Object {
          "full": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "long": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
            "timeZoneName": "short",
          },
          "medium": Object {
            "hour": "numeric",
            "minute": "numeric",
            "second": "numeric",
          },
          "short": Object {
            "hour": "numeric",
            "minute": "numeric",
          },
        },
      },
      "formatters": Object {
        "getDateTimeFormat": [Function],
        "getMessageFormat": [Function],
        "getNumberFormat": [Function],
        "getPluralFormat": [Function],
        "getRelativeFormat": [Function],
      },
      "locale": "en",
      "messages": Object {},
      "now": [Function],
      "onError": [Function],
      "textComponent": Symbol(react.fragment),
      "timeZone": null,
    }
  }
  loading={true}
>
  <EmptyStateLoading>
    <EuiEmptyPrompt
      body={
        <React.Fragment>
          <EuiLoadingSpinner
            size="xl"
          />
          <EuiSpacer />
          <EuiTitle
            size="l"
          >
            <h2>
              Loading…
            </h2>
          </EuiTitle>
        </React.Fragment>
      }
      iconColor="subdued"
    >
      <div
        className="euiEmptyPrompt"
      >
        <EuiTextColor
          color="subdued"
        >
          <span
            className="euiTextColor euiTextColor--subdued"
          >
            <EuiText>
              <div
                className="euiText euiText--medium"
              >
                <EuiLoadingSpinner
                  size="xl"
                >
                  <span
                    className="euiLoadingSpinner euiLoadingSpinner--xLarge"
                  />
                </EuiLoadingSpinner>
                <EuiSpacer>
                  <div
                    className="euiSpacer euiSpacer--l"
                  />
                </EuiSpacer>
                <EuiTitle
                  size="l"
                >
                  <h2
                    className="euiTitle euiTitle--large"
                  >
                    Loading…
                  </h2>
                </EuiTitle>
              </div>
            </EuiText>
          </span>
        </EuiTextColor>
      </div>
    </EuiEmptyPrompt>
  </EmptyStateLoading>
</EmptyStateComponent>
`;
