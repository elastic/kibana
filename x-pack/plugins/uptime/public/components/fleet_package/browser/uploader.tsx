/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useState, useRef } from 'react';

import { EuiFormRow, EuiFilePicker } from '@elastic/eui';

interface Props {
  onUpload: ({ scriptText, fileName }: { scriptText: string; fileName: string }) => void;
}

const syntheticsRecorderToken = '/* Generated by the Elastic Synthetics Recorder */';

export function Uploader({ onUpload }: Props) {
  const fileReader = useRef<null | FileReader>(null);
  const [error, setError] = useState<string | null>('');
  const filePickerRef = useRef<EuiFilePicker>(null);

  const handleFileRead = (fileName: string) => {
    // @ts-expect-error update types
    const content = fileReader.current.result;

    try {
      const parsedContent = `${syntheticsRecorderToken}\n${content}`;

      onUpload({ scriptText: parsedContent, fileName });
      setError(null);
    } catch (e) {
      setError('error parsing file');
      filePickerRef.current?.removeFiles();
    }
  };

  // @ts-expect-error update types
  const handleFileChosen = (files) => {
    if (files.length && files[0].type !== 'text/javascript') {
      setError(
        'Invalid file type. Please upload a Javascript file generated by the Elastic Synthetics Recorder.'
      );
      filePickerRef.current?.removeFiles();
      return;
    }
    fileReader.current = new FileReader();
    fileReader.current.onloadend = () => handleFileRead(files[0].name);
    fileReader.current.readAsText(files[0]);
  };

  return (
    <>
      <EuiFormRow isInvalid={Boolean(error)} error={error} label="Testing script">
        <EuiFilePicker
          id="asdf2"
          ref={filePickerRef}
          initialPromptText="Select recorder-generated Javascript file"
          onChange={handleFileChosen}
          display={'large'}
        />
      </EuiFormRow>
    </>
  );
}
