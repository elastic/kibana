/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React, { useState, useRef } from 'react';

import { i18n } from '@kbn/i18n';

import { EuiFormRow, EuiFilePicker } from '@elastic/eui';

interface Props {
  onUpload: ({ scriptText, fileName }: { scriptText: string; fileName: string }) => void;
}

export function Uploader({ onUpload }: Props) {
  const fileReader = useRef<null | FileReader>(null);
  const [error, setError] = useState<string | null>('');
  const filePickerRef = useRef<EuiFilePicker>(null);

  const handleFileRead = (fileName: string) => {
    const content = fileReader?.current?.result as string;

    try {
      const parsedContent = `${content}`;

      if (content?.trim().slice(0, 4) !== 'step') {
        throw new Error('inline scripts must begin with the keyword "step"');
      }

      onUpload({ scriptText: parsedContent, fileName });
      setError(null);
    } catch (e) {
      setError(PARSING_ERROR);
      filePickerRef.current?.removeFiles();
    }
  };

  // @ts-expect-error update types
  const handleFileChosen = (files) => {
    if (!files.length) {
      onUpload({ scriptText: '', fileName: '' });
      return;
    }
    if (files.length && files[0].type !== 'text/javascript') {
      setError(INVALID_FILE_ERROR);
      filePickerRef.current?.removeFiles();
      return;
    }
    fileReader.current = new FileReader();
    fileReader.current.onloadend = () => handleFileRead(files[0].name);
    fileReader.current.readAsText(files[0]);
  };

  return (
    <>
      <EuiFormRow isInvalid={Boolean(error)} error={error} label={TESTING_SCRIPT_LABEL}>
        <EuiFilePicker
          id="syntheticsFleetScriptRecorderUploader"
          data-test-subj="syntheticsFleetScriptRecorderUploader"
          ref={filePickerRef}
          initialPromptText={PROMPT_TEXT}
          onChange={handleFileChosen}
          display={'large'}
        />
      </EuiFormRow>
    </>
  );
}

const TESTING_SCRIPT_LABEL = i18n.translate(
  'xpack.uptime.createPackagePolicy.stepConfigure.monitorIntegrationSettingsSection.browser.uploader.fieldLabel',
  {
    defaultMessage: 'Testing script',
  }
);

const PROMPT_TEXT = i18n.translate(
  'xpack.uptime.createPackagePolicy.stepConfigure.monitorIntegrationSettingsSection.browser.uploader.label',
  {
    defaultMessage: 'Select recorder-generated .js file',
  }
);

const INVALID_FILE_ERROR = i18n.translate(
  'xpack.uptime.createPackagePolicy.stepConfigure.monitorIntegrationSettingsSection.browser.uploader.invalidFileError',
  {
    defaultMessage:
      'Invalid file type. Please upload a .js file generated by the Elastic Synthetics Recorder.',
  }
);

const PARSING_ERROR = i18n.translate(
  'xpack.uptime.createPackagePolicy.stepConfigure.monitorIntegrationSettingsSection.browser.uploader.parsingError',
  {
    defaultMessage:
      'Error uploading file. Please upload a .js file generated by the Elastic Synthetics Recorder in inline script format.',
  }
);
