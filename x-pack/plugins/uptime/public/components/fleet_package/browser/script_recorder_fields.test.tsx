/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import React from 'react';
import { fireEvent, waitFor } from '@testing-library/react';
import { render } from '../../../lib/helper/rtl_helpers';
import { ScriptRecorderFields } from './script_recorder_fields';
import { PolicyConfigContextProvider } from '../contexts';

jest.mock('@elastic/eui/lib/services/accessibility/html_id_generator', () => ({
  ...jest.requireActual('@elastic/eui/lib/services/accessibility/html_id_generator'),
  htmlIdGenerator: () => () => `id-${Math.random()}`,
}));

const onChange = jest.fn();

describe('<ScriptRecorderFields />', () => {
  let file: File;
  const testScript = 'step(() => {})';
  const WrappedComponent = ({
    isEditable = true,
    script = '',
    fileName = '',
  }: {
    isEditable?: boolean;
    script?: string;
    fileName?: string;
  }) => {
    return (
      <PolicyConfigContextProvider isEditable={isEditable}>
        <ScriptRecorderFields script={script} fileName={fileName} onChange={onChange} />
      </PolicyConfigContextProvider>
    );
  };

  beforeEach(() => {
    jest.clearAllMocks();
    file = new File([testScript], 'samplescript.js', { type: 'text/javascript' });
  });

  it('renders ScriptRecorderFields', () => {
    const { getByText, queryByText } = render(<WrappedComponent />);

    const downloadLink = getByText('Download the Elastic Synthetics Recorder');

    expect(downloadLink).toBeInTheDocument();
    expect(downloadLink).toHaveAttribute('target', '_blank');

    expect(queryByText('Show script')).not.toBeInTheDocument();
    expect(queryByText('Remove script')).not.toBeInTheDocument();
  });

  it('handles uploading files', async () => {
    const { getByTestId } = render(<WrappedComponent />);

    const uploader = getByTestId('syntheticsFleetScriptRecorderUploader');

    fireEvent.change(uploader, {
      target: { files: [file] },
    });

    await waitFor(() => {
      expect(onChange).toBeCalledWith({ scriptText: testScript, fileName: 'samplescript.js' });
    });
  });

  it('shows user errors for invalid file types', async () => {
    const { getByTestId, getByText } = render(<WrappedComponent />);
    file = new File(['journey(() => {})'], 'samplescript.js', { type: 'text/javascript' });

    let uploader = getByTestId('syntheticsFleetScriptRecorderUploader') as HTMLInputElement;

    fireEvent.change(uploader, {
      target: { files: [file] },
    });

    uploader = getByTestId('syntheticsFleetScriptRecorderUploader') as HTMLInputElement;

    await waitFor(() => {
      expect(onChange).not.toBeCalled();
      expect(
        getByText(
          'Error uploading file. Please upload a .js file generated by the Elastic Synthetics Recorder in inline script format.'
        )
      ).toBeInTheDocument();
    });
  });

  it('shows show script button when script is available', () => {
    const { getByText, queryByText } = render(<WrappedComponent script={testScript} />);

    const showScriptBtn = getByText('Show script');

    expect(queryByText(testScript)).not.toBeInTheDocument();

    fireEvent.click(showScriptBtn);

    expect(getByText(testScript)).toBeInTheDocument();
  });

  it('shows show remove script button when script is available and isEditable is true', async () => {
    const { getByText, getByTestId } = render(
      <WrappedComponent script={testScript} isEditable={true} />
    );

    const showScriptBtn = getByText('Show script');
    fireEvent.click(showScriptBtn);

    expect(getByText(testScript)).toBeInTheDocument();

    fireEvent.click(getByTestId('euiFlyoutCloseButton'));

    const removeScriptBtn = getByText('Remove script');

    fireEvent.click(removeScriptBtn);

    await waitFor(() => {
      expect(onChange).toBeCalledWith({ scriptText: '', fileName: '' });
    });
  });
});
