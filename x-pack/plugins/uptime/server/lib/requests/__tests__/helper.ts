/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import { LegacyScopedClusterClient } from 'src/core/server';
import { elasticsearchServiceMock } from '../../../../../../../src/core/server/mocks';

export interface MultiPageCriteria<K, T> {
  after_key?: K;
  bucketCriteria: T[];
}

export type MockCallES = (method: any, params: any) => Promise<any>;

/**
 * This utility function will set up a mock ES client, and store subsequent calls. It is designed
 * to let callers easily simulate an arbitrary series of chained composite aggregation calls by supplying
 * custom after_key values.
 *
 * This function is used by supplying criteria, a flat collection of values, and a function that can map
 * those values to the same document shape the tested code expects to receive from elasticsearch.
 * @param criteria A series of objects with the fields of interest.
 * @param genBucketItem A function that maps the criteria to the structure of a document.
 * @template K The Key type of the mock after_key value for simulated composite aggregation queries.
 * @template C The Criteria type that specifies the values of interest in the buckets returned by the mock ES.
 * @template I The Item type that specifies the simulated documents that are generated by the mock.
 */
export const setupMockEsCompositeQuery = <K, C, I>(
  criteria: Array<MultiPageCriteria<K, C>>,
  genBucketItem: (criteria: C) => I
): [MockCallES, jest.Mocked<Pick<LegacyScopedClusterClient, 'callAsCurrentUser'>>] => {
  const esMock = elasticsearchServiceMock.createLegacyScopedClusterClient();

  criteria.forEach(({ after_key, bucketCriteria }) => {
    const mockResponse = {
      aggregations: {
        monitors: {
          after_key,
          buckets: bucketCriteria.map((item) => genBucketItem(item)),
        },
      },
    };
    esMock.callAsCurrentUser.mockResolvedValueOnce(mockResponse);
  });

  return [(method: any, params: any) => esMock.callAsCurrentUser(method, params), esMock];
};
