/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import React, { useCallback } from 'react';
import { useDispatch } from 'react-redux';
import styled from 'styled-components';
import { EuiRadio, EuiSwitch, EuiTitle, EuiSpacer } from '@elastic/eui';
import { i18n } from '@kbn/i18n';
import { FormattedMessage } from '@kbn/i18n/react';
import { OS, ProtectionModes, MalwareProtectionOSes } from '../../../../types';
import { ConfigForm } from '../config_form';
import { policyConfig } from '../../../../store/policy_details/selectors';
import { usePolicyDetailsSelector } from '../../policy_hooks';
import { clone } from '../../../../models/policy_details_config';

const ProtectionRadioGroup = styled.div`
  display: flex;
  .policyDetailsProtectionRadio {
    margin-right: ${props => props.theme.eui.euiSizeXXL};
  }
`;

export const MalwareProtections = React.memo(() => {
  const policyDetailsConfig = usePolicyDetailsSelector(policyConfig);
  const dispatch = useDispatch();
  const selected = policyDetailsConfig && policyDetailsConfig.windows.malware.mode;
  const OSes: MalwareProtectionOSes[] = [OS.windows, OS.mac];
  const protection = 'malware';

  const radios = [
    {
      id: 'malware.detect',
      label: i18n.translate('xpack.endpoint.policy.details.detect', { defaultMessage: 'Detect' }),
    },
    {
      id: 'malware.prevent',
      label: i18n.translate('xpack.endpoint.policy.details.prevent', { defaultMessage: 'Prevent' }),
    },
    {
      id: 'malware.preventNotify',
      label: i18n.translate('xpack.endpoint.policy.details.preventAndNotify', {
        defaultMessage: 'Prevent and notify user',
      }),
    },
  ];

  const handleRadioChange = useCallback(
    e => {
      const radioId = e.target.id;
      const separater = radioId.indexOf('.');
      const radioProtection = radioId.substring(0, separater);
      const radioOption = radioId.substring(separater + 1);
      if (policyDetailsConfig && radioProtection === protection) {
        const newPayload = clone(policyDetailsConfig);
        for (const os of OSes) {
          newPayload[os][protection].mode = radioOption;
        }
        dispatch({
          type: 'userChangedPolicyConfig',
          payload: { policyConfig: newPayload },
        });
      }
    },
    [OSes, dispatch, policyDetailsConfig]
  );

  const handleSwitchChange = useCallback(
    event => {
      if (policyDetailsConfig) {
        const newPayload = clone(policyDetailsConfig);
        if (event.target.checked === false) {
          for (const os of OSes) {
            newPayload[os][protection].mode = ProtectionModes.off;
          }
        } else {
          for (const os of OSes) {
            newPayload[os][protection].mode = ProtectionModes.prevent;
          }
        }
        dispatch({
          type: 'userChangedPolicyConfig',
          payload: { policyConfig: newPayload },
        });
      }
    },
    [OSes, dispatch, policyDetailsConfig]
  );

  const radioButtons = () => {
    return (
      <>
        <EuiTitle size="xxxs">
          <h6>
            <FormattedMessage
              id="xpack.endpoint.policyDetailsConfig.eventingEvents"
              defaultMessage="Protection Level"
            />
          </h6>
        </EuiTitle>
        <EuiSpacer size="xs" />
        <ProtectionRadioGroup>
          {radios.map((radio, index) => {
            return (
              <EuiRadio
                className="policyDetailsProtectionRadio"
                id={radio.id}
                label={radio.label}
                checked={`malware.${selected}` === radio.id}
                key={index}
                onChange={handleRadioChange}
                disabled={selected === ProtectionModes.off}
              />
            );
          })}
        </ProtectionRadioGroup>
      </>
    );
  };

  const protectionSwitch = () => {
    return (
      <EuiSwitch
        label={i18n.translate('xpack.endpoint.policy.details.malwareProtectionsEnabled', {
          defaultMessage: 'Malware Protections Enabled',
        })}
        checked={selected !== ProtectionModes.off}
        onChange={handleSwitchChange}
      />
    );
  };

  return (
    <ConfigForm
      type={i18n.translate('xpack.endpoint.policy.details.malware', { defaultMessage: 'Malware' })}
      supportedOss={[
        i18n.translate('xpack.endpoint.policy.details.windows', { defaultMessage: 'Windows' }),
        i18n.translate('xpack.endpoint.policy.details.mac', { defaultMessage: 'Mac' }),
      ]}
      id="malwareProtectionsForm"
      rightCorner={protectionSwitch()}
      children={radioButtons()}
    />
  );
});
