/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import expect from '@kbn/expect';

import {
  LIST_URL,
  LIST_ITEMS_URL,
  LIST_ITEM_URL_BULK,
  LIST_INDEX,
} from '@kbn/securitysolution-list-constants';
import { getListItemResponseMockWithoutAutoGeneratedValues } from '@kbn/lists-plugin/common/schemas/response/list_item_schema.mock';
import { getCreateMinimalListItemSchemaMock } from '@kbn/lists-plugin/common/schemas/request/create_list_item_schema.mock';
import { getCreateMinimalListSchemaMock } from '@kbn/lists-plugin/common/schemas/request/create_list_schema.mock';

import TestAgent from 'supertest/lib/agent';
import {
  createListsIndex,
  deleteListsIndex,
  removeListItemServerGeneratedProperties,
} from '../../../utils';
import { FtrProviderContext } from '../../../../../ftr_provider_context';

export default ({ getService }: FtrProviderContext) => {
  const log = getService('log');
  const utils = getService('securitySolutionUtils');

  describe('@ess @serverless @serverlessQA bulk_delete_list_items', () => {
    let supertest: TestAgent;

    before(async () => {
      supertest = await utils.createSuperTest();
    });

    describe('deleting list items', () => {
      beforeEach(async () => {
        await createListsIndex(supertest, log);
      });

      afterEach(async () => {
        await deleteListsIndex(supertest, log);
      });

      it('should delete a single list item with a list item id', async () => {
        // create a list
        await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMock())
          .expect(200);

        await supertest.get(LIST_INDEX).set('kbn-xsrf', 'true').expect(200);
        // create a list item
        await supertest
          .post(LIST_ITEMS_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListItemSchemaMock())
          .expect(200);

        await supertest
          .get(`${LIST_ITEMS_URL}?id=${getCreateMinimalListItemSchemaMock().id}`)
          .set('kbn-xsrf', 'true')
          .expect(200);

        // // delete the list item by its list item id
        const { body: bulkDeleteBody } = await supertest
          .delete(`${LIST_ITEM_URL_BULK}?ids=${getCreateMinimalListItemSchemaMock().id}`)
          .set('kbn-xsrf', 'true');

        const bodyToCompare = removeListItemServerGeneratedProperties(bulkDeleteBody[0]);
        expect(bodyToCompare).to.eql(
          getListItemResponseMockWithoutAutoGeneratedValues(await utils.getUsername())
        );
      });

      it('should delete a single list item using an auto generated id', async () => {
        // create a list
        await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMock())
          .expect(200);

        // create a list item
        const { body: bodyWithCreateListItem } = await supertest
          .post(LIST_ITEMS_URL)
          .set('kbn-xsrf', 'true')
          .send({ ...getCreateMinimalListItemSchemaMock(), id: undefined })
          .expect(200);

        // delete that list by its auto-generated id
        const { body } = await supertest
          .delete(`${LIST_ITEM_URL_BULK}?ids=${bodyWithCreateListItem.id}`)
          .set('kbn-xsrf', 'true')
          .expect(200);

        const bodyToCompare = removeListItemServerGeneratedProperties(body[0]);
        expect(bodyToCompare).to.eql(
          getListItemResponseMockWithoutAutoGeneratedValues(await utils.getUsername())
        );
      });

      it('should delete a mutliple list items using auto generated ids', async () => {
        // create a list
        await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMock())
          .expect(200);

        // create two list items
        const { body: bodyWithCreateListItem } = await supertest
          .post(LIST_ITEMS_URL)
          .set('kbn-xsrf', 'true')
          .send({ ...getCreateMinimalListItemSchemaMock(), id: undefined })
          .expect(200);
        const { body: bodyWithCreateListItem2 } = await supertest
          .post(LIST_ITEMS_URL)
          .set('kbn-xsrf', 'true')
          .send({
            ...getCreateMinimalListItemSchemaMock(),
            value: '255.255.255.0',
            id: 'another-list-id',
          })
          .expect(200);

        // ensure they are fetch-able
        [bodyWithCreateListItem.id, bodyWithCreateListItem2.id].every(
          async (bodyId) =>
            await supertest
              .get(`${LIST_ITEMS_URL}?id=${bodyId}`)
              .set('kbn-xsrf', 'true')
              .expect(200)
        );

        // delete list items by their ids
        await supertest
          .delete(
            `${LIST_ITEM_URL_BULK}?ids=${bodyWithCreateListItem.id},${bodyWithCreateListItem2.id}`
          )
          .set('kbn-xsrf', 'true')
          .expect(200);

        // try to fetch deleted items, expect 404's
        [bodyWithCreateListItem.id, bodyWithCreateListItem2.id].every(
          async (bodyId) =>
            await supertest
              .get(`${LIST_ITEMS_URL}?id=${bodyId}`)
              .set('kbn-xsrf', 'true')
              .expect(404)
        );
      });

      it('should return an error if the id does not exist when trying to delete it', async () => {
        const { body } = await supertest
          .delete(`${LIST_ITEM_URL_BULK}?ids=c1e1b359-7ac1-4e96-bc81-c683c092436f`)
          .set('kbn-xsrf', 'true')
          .expect(404);

        expect(body).to.eql({
          message: 'list item with id: "c1e1b359-7ac1-4e96-bc81-c683c092436f" not found',
          status_code: 404,
        });
      });
    });
  });
};
