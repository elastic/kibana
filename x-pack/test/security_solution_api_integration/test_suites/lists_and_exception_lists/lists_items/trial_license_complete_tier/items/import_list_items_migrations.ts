/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import expect from '@kbn/expect';
import type { ListSchema } from '@kbn/securitysolution-io-ts-list-types';
import { LIST_ITEM_URL } from '@kbn/securitysolution-list-constants';
import { getListResponseMockWithoutAutoGeneratedValues } from '@kbn/lists-plugin/common/schemas/response/list_schema.mock';
import { getImportListItemAsBuffer } from '@kbn/lists-plugin/common/schemas/request/import_list_item_schema.mock';

import {
  deleteListsIndex,
  removeListServerGeneratedProperties,
  createListsIndices,
} from '../../../utils';
import { FtrProviderContext } from '../../../../../ftr_provider_context';

export default ({ getService }: FtrProviderContext): void => {
  const supertest = getService('supertest');
  const log = getService('log');
  const es = getService('es');
  const utils = getService('securitySolutionUtils');

  describe('@ess import_list_items_migrations', () => {
    describe('import list to legacy index and migrate it', () => {
      describe('legacy index (before migration to data streams)', () => {
        beforeEach(async () => {
          await deleteListsIndex(supertest, log);
        });

        afterEach(async () => {
          await deleteListsIndex(supertest, log);
        });

        it('should import list to legacy index and migrate it', async () => {
          // create legacy indices
          await createListsIndices(es);

          const { body } = await supertest
            .post(`${LIST_ITEM_URL}/_import?type=ip`)
            .set('kbn-xsrf', 'true')
            .attach('file', getImportListItemAsBuffer(['127.0.0.1', '127.0.0.2']), 'list_items.txt')
            .expect('Content-Type', 'application/json; charset=utf-8')
            .expect(200);

          const bodyToCompare = removeListServerGeneratedProperties(body);
          const outputtedList: Partial<ListSchema> = {
            ...getListResponseMockWithoutAutoGeneratedValues(await utils.getUsername()),
            name: 'list_items.txt',
            description: 'File uploaded from file system of list_items.txt',
          };
          expect(bodyToCompare).to.eql(outputtedList);
        });
      });
    });
  });
};
