/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import expect from '@kbn/expect';
import { ELASTIC_HTTP_VERSION_HEADER } from '@kbn/core-http-common';
import type { FtrProviderContext } from '../ftr_provider_context';

const VULNERABILITIES_LATEST_INDEX = 'logs-cloud_security_posture.vulnerabilities_latest-default';
const BENCHMARK_SCORES_INDEX = 'logs-cloud_security_posture.scores-default';

export function VulnerabilityDashboardPageProvider({
  getService,
  getPageObjects,
}: FtrProviderContext) {
  const PageObjects = getPageObjects(['common', 'header']);
  const retry = getService('retry');
  const es = getService('es');
  const supertest = getService('supertest');
  const log = getService('log');
  const testSubjects = getService('testSubjects');

  /**
   * required before indexing findings
   */
  const waitForPluginInitialized = (): Promise<void> =>
    retry.try(async () => {
      log.debug('Check CSP plugin is initialized');
      const response = await supertest
        .get('/internal/cloud_security_posture/status?check=init')
        .set(ELASTIC_HTTP_VERSION_HEADER, '1')
        .expect(200);
      expect(response.body).to.eql({ isPluginInitialized: true });
      log.debug('CSP plugin is initialized');
    });

  const navigateToVulnerabilityDashboardPage = async () => {
    await PageObjects.common.navigateToUrl(
      'securitySolution', // Defined in Security Solution plugin
      'cloud_security_posture/vulnerability_dashboard',
      { shouldUseHashForSubUrl: false }
    );
  };

  const index = {
    addFindings: async <T>(vulnerabilitiesMock: T[]) => {
      await Promise.all(
        vulnerabilitiesMock.map((vulnerabilityDoc) =>
          es.index({
            index: VULNERABILITIES_LATEST_INDEX,
            body: vulnerabilityDoc,
            refresh: true,
          })
        )
      );
    },

    addScores: async <T>(scoresMock: T[]) => {
      await Promise.all(
        scoresMock.map((scoreDoc) =>
          es.index({
            index: BENCHMARK_SCORES_INDEX,
            body: scoreDoc,
            refresh: true,
          })
        )
      );
    },

    removeFindings: async () => {
      const indexExists = await es.indices.exists({ index: VULNERABILITIES_LATEST_INDEX });

      if (indexExists) {
        await es.deleteByQuery({
          index: VULNERABILITIES_LATEST_INDEX,
          query: { match_all: {} },
          refresh: true,
        });
      }
    },

    removeScores: async () => {
      const indexExists = await es.indices.exists({ index: BENCHMARK_SCORES_INDEX });

      if (indexExists) {
        await es.deleteByQuery({
          index: BENCHMARK_SCORES_INDEX,
          query: { match_all: {} },
          refresh: true,
        });
      }
    },

    deleteFindingsIndex: async () => {
      const indexExists = await es.indices.exists({ index: VULNERABILITIES_LATEST_INDEX });

      if (indexExists) {
        await es.indices.delete({ index: VULNERABILITIES_LATEST_INDEX });
      }
    },
  };

  const dashboard = {
    getDashboardPageHeader: () => testSubjects.find('vulnerability-dashboard-page-header'),

    getCriticalStat: () => testSubjects.find('critical-count-stat'),
    getHighStat: () => testSubjects.find('high-count-stat'),
    getMediumStat: () => testSubjects.find('medium-count-stat'),
  };

  return {
    navigateToVulnerabilityDashboardPage,
    waitForPluginInitialized,
    index,
    dashboard,
  };
}
