- name: '@timestamp'
  level: core
  required: true
  type: date
  description: 'Date/time when the event originated.

    This is the date/time extracted from the event, typically representing when the event was generated by the source.

    If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.

    Required field for all events.'
  example: '2016-05-23T08:05:34.853Z'
- name: message
  level: core
  type: text
  description: 'For log events the message field contains the log message, optimized for viewing in a log viewer.

    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.

    If multiple messages exist, they can be combined into one message.'
  example: Hello World
- name: Endpoint
  title: Endpoint
  group: 2
  description: Fields describing the state of the Elastic Endpoint when an event occurs.
  type: group
  fields:
    - name: metrics
      level: custom
      type: object
      description: Metrics fields hold the endpoint and system's performance metrics
      default_field: false
    - name: metrics.cpu
      level: custom
      type: object
      description: CPU statistics
      default_field: false
    - name: metrics.cpu.endpoint
      level: custom
      type: object
      description: CPU metrics for the endpoint
      default_field: false
    - name: metrics.cpu.endpoint.histogram
      level: custom
      type: histogram
      description: This field defines an elasticsearch histogram field (https://www.elastic.co/guide/en/elasticsearch/reference/current/histogram.html#histogram) The values field includes 20 buckets (each bucket is 5%) representing the cpu usage The counts field includes 20 buckets of how many times the endpoint's cpu usage fell into each bucket
      default_field: false
    - name: metrics.cpu.endpoint.latest
      level: custom
      type: half_float
      description: Average CPU over the last sample interval
      default_field: false
    - name: metrics.cpu.endpoint.mean
      level: custom
      type: half_float
      description: Average CPU load used by the endpoint
      default_field: false
    - name: metrics.disks
      level: custom
      type: object
      description: An array of disk information for the host
      enabled: false
      default_field: false
    - name: metrics.disks.device
      level: custom
      type: keyword
      ignore_above: 1024
      description: Device name
      default_field: false
    - name: metrics.disks.endpoint_drive
      level: custom
      type: boolean
      description: This field will be present and set to true only for the drive that holds the installed endpoint
      default_field: false
    - name: metrics.disks.free
      level: custom
      type: long
      description: The number of bytes marked as free on the disk
      default_field: false
    - name: metrics.disks.fstype
      level: custom
      type: keyword
      ignore_above: 1024
      description: The file system type for the drive
      default_field: false
    - name: metrics.disks.mount
      level: custom
      type: keyword
      ignore_above: 1024
      description: The disks mount location
      default_field: false
    - name: metrics.disks.total
      level: custom
      type: long
      description: The size of the disk in bytes
      default_field: false
    - name: metrics.memory
      level: custom
      type: object
      description: Memory statistics
      default_field: false
    - name: metrics.memory.endpoint
      level: custom
      type: object
      description: Endpoint memory utilization
      default_field: false
    - name: metrics.memory.endpoint.private
      level: custom
      type: object
      description: The memory private to the endpoint
      default_field: false
    - name: metrics.memory.endpoint.private.latest
      level: custom
      type: long
      description: The memory usage by the endpoint for the last sample interval
      default_field: false
    - name: metrics.memory.endpoint.private.mean
      level: custom
      type: long
      description: Average memory usage by the endpoint since its start
      default_field: false
    - name: metrics.threads
      level: custom
      type: object
      description: Statistics about the individual threads of the system (array)
      enabled: false
      default_field: false
    - name: metrics.uptime
      level: custom
      type: object
      description: Number of seconds since boot
      default_field: false
    - name: metrics.uptime.endpoint
      level: custom
      type: long
      description: Number of seconds since the endpoint was started
      default_field: false
    - name: metrics.uptime.system
      level: custom
      type: long
      description: Number of seconds since the system was started
      default_field: false
- name: agent
  title: Agent
  group: 2
  description: 'The agent fields contain the data about the software entity, if any, that collects, detects, or observes events on a host, or takes measurements on a host.

    Examples include Beats. Agents may also run on observers. ECS agent.* fields shall be populated with details of the agent running on the host or observer where the event happened or the measurement was taken.'
  footnote: 'Examples: In the case of Beats for logs, the agent.name is filebeat. For APM, it is the agent running in the app/service. The agent information does not change if data is sent through queuing systems like Kafka, Redis, or processing systems such as Logstash or APM Server.'
  type: group
  fields:
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Unique identifier of this agent (if one exists).

        Example: For Beats this would be beat.id.'
      example: 8a4f500d
    - name: type
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Type of the agent.

        The agent type always stays the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.'
      example: filebeat
    - name: version
      level: core
      type: keyword
      ignore_above: 1024
      description: Version of the agent.
      example: 6.0.0-rc2
- name: data_stream
  title: data_stream
  group: 2
  description: Fields describing the new indexing strategy <type>-<dataset>-<namespace>
  type: group
  fields:
    - name: dataset
      level: custom
      type: constant_keyword
      description: Data stream dataset name.
      default_field: false
    - name: namespace
      level: custom
      type: constant_keyword
      description: Data stream namespace.
      default_field: false
    - name: type
      level: custom
      type: constant_keyword
      description: Data stream type.
      default_field: false
- name: ecs
  title: ECS
  group: 2
  description: Meta-information specific to ECS.
  type: group
  fields:
    - name: version
      level: core
      required: true
      type: keyword
      ignore_above: 1024
      description: 'ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.

        When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.'
      example: 1.0.0
- name: event
  title: Event
  group: 2
  description: 'The event fields are used for context information about the log or metric event itself.

    A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host and device temperature. See the `event.kind` definition in this section for additional details about metric and state events.'
  type: group
  fields:
    - name: action
      level: core
      type: keyword
      ignore_above: 1024
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.'
      example: user-password-change
    - name: category
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.

        `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.

        This field is an array. This will allow proper categorization of some events that fall in multiple categories.'
      example: authentication
    - name: created
      level: core
      type: date
      description: 'event.created contains the date/time when the event was first read by an agent, or by your pipeline.

        This field is distinct from @timestamp in that @timestamp typically contain the time extracted from the original event.

        In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent''s or pipeline''s ability to keep up with your event source.

        In case the two timestamps are identical, @timestamp should be used.'
      example: '2016-05-23T08:05:34.857Z'
    - name: dataset
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Name of the dataset.

        If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.

        It''s recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.'
      example: apache.access
    - name: end
      level: extended
      type: date
      description: event.end contains the date when the event ended or when the activity was last observed.
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique ID to describe the event.
      example: 8a4f500d
    - name: ingested
      level: core
      type: date
      description: 'Timestamp when an event arrived in the central data store.

        This is different from `@timestamp`, which is when the event originally occurred.  It''s also different from `event.created`, which is meant to capture the first time an agent saw the event.

        In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.'
      example: '2016-05-23T08:05:35.101Z'
      default_field: false
    - name: kind
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.

        `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.

        The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.'
      example: alert
    - name: module
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Name of the module this data is coming from.

        If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.'
      example: apache
    - name: sequence
      level: extended
      type: long
      format: string
      description: 'Sequence number of the event.

        The sequence number is a value published by some event sources, to make the exact ordering of events unambiguous, regardless of the timestamp precision.'
    - name: start
      level: extended
      type: date
      description: event.start contains the date when the event started or when the activity was first observed.
    - name: type
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.

        `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.

        This field is an array. This will allow proper categorization of some events that fall in multiple event types.'
- name: host
  title: Host
  group: 2
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the event happened, or from which the measurement was taken. Host types include hardware, virtual machines, Docker containers, and Kubernetes nodes.'
  type: group
  fields:
    - name: architecture
      level: core
      type: keyword
      ignore_above: 1024
      description: Operating system architecture.
      example: x86_64
    - name: hostname
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Hostname of the host.

        It normally contains what the `hostname` command returns on the host machine.'
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Unique host id.

        As hostname is not always unique, use values that are meaningful in your environment.

        Example: The current usage of `beat.name`.'
    - name: ip
      level: core
      type: ip
      description: Host ip addresses.
    - name: mac
      level: core
      type: keyword
      ignore_above: 1024
      description: Host mac addresses.
    - name: name
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.'
    - name: os.Ext
      level: custom
      type: object
      description: Object for all custom defined fields to live in.
      default_field: false
    - name: os.Ext.variant
      level: custom
      type: keyword
      ignore_above: 1024
      description: A string value or phrase that further aid to classify or qualify the operating system (OS).  For example the distribution for a Linux OS will be entered in this field.
      example: Ubuntu
      default_field: false
    - name: os.family
      level: extended
      type: keyword
      ignore_above: 1024
      description: OS family (such as redhat, debian, freebsd, windows).
      example: debian
    - name: os.full
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: caseless
          type: keyword
          default_field: false
          normalizer: lowercase
          ignore_above: 1024
        - name: text
          type: text
          norms: false
          default_field: false
      description: Operating system name, including the version or code name.
      example: Mac OS Mojave
    - name: os.kernel
      level: extended
      type: keyword
      ignore_above: 1024
      description: Operating system kernel version as a raw string.
      example: 4.4.0-112-generic
    - name: os.name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: caseless
          type: keyword
          default_field: false
          normalizer: lowercase
          ignore_above: 1024
        - name: text
          type: text
          norms: false
          default_field: false
      description: Operating system name, without the version.
      example: Mac OS X
    - name: os.platform
      level: extended
      type: keyword
      ignore_above: 1024
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin
    - name: os.version
      level: extended
      type: keyword
      ignore_above: 1024
      description: Operating system version as a raw string.
      example: 10.14.1
