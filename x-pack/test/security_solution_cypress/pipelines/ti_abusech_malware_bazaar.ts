/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { Pipeline } from './pipeline';

export const tiAbusechMalwareBazaar: Pipeline = {
  name: 'logs-ti_abusech.malwarebazaar-1.3.1',
  processors: [
    {
      set: {
        field: 'ecs.version',
        value: '8.2.0',
      },
    },
    {
      set: {
        field: 'event.kind',
        value: 'enrichment',
      },
    },
    {
      set: {
        field: 'event.category',
        value: 'threat',
      },
    },
    {
      set: {
        field: 'event.type',
        value: 'indicator',
      },
    },
    {
      rename: {
        field: 'message',
        target_field: 'event.original',
        ignore_missing: true,
      },
    },
    {
      json: {
        field: 'event.original',
        target_field: 'abusech.malwarebazaar',
      },
    },
    {
      fingerprint: {
        fields: ['abusech.malwarebazaar.md5_hash', 'abusech.malwarebazaar.sha256_hash'],
        target_field: '_id',
      },
    },
    {
      date: {
        field: 'abusech.malwarebazaar.first_seen',
        target_field: 'threat.indicator.first_seen',
        formats: ['yyyy-MM-dd HH:mm:ss z', 'yyyy-MM-dd HH:mm:ss Z', 'yyyy-MM-dd HH:mm:ss'],
        if: 'ctx.abusech?.malwarebazaar?.first_seen != null',
      },
    },
    {
      date: {
        field: 'abusech.malwarebazaar.last_seen',
        target_field: 'threat.indicator.last_seen',
        formats: ['yyyy-MM-dd HH:mm:ss z', 'yyyy-MM-dd HH:mm:ss Z', 'yyyy-MM-dd HH:mm:ss'],
        if: 'ctx.abusech?.malwarebazaar?.last_seen != null',
      },
    },
    {
      set: {
        field: 'threat.indicator.type',
        value: 'file',
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.file_name',
        target_field: 'threat.indicator.file.name',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.file_type_mime',
        target_field: 'threat.indicator.file.mime_type',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.reporter',
        target_field: 'threat.indicator.provider',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.origin_country',
        target_field: 'threat.indicator.geo.country_iso_code',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.signature',
        target_field: 'threat.software.alias',
        ignore_missing: true,
      },
    },
    {
      foreach: {
        field: 'abusech.malwarebazaar.code_sign',
        ignore_missing: true,
        processor: {
          rename: {
            field: '_ingest._value.subject_cn',
            target_field: 'threat.indicator.file.x509.subject.common_name',
          },
        },
      },
    },
    {
      foreach: {
        field: 'abusech.malwarebazaar.code_sign',
        ignore_missing: true,
        processor: {
          rename: {
            field: '_ingest._value.issuer_cn',
            target_field: 'threat.indicator.file.x509.issuer.common_name',
          },
        },
      },
    },
    {
      foreach: {
        field: 'abusech.malwarebazaar.code_sign',
        ignore_missing: true,
        processor: {
          rename: {
            field: '_ingest._value.algorithm',
            target_field: 'threat.indicator.file.x509.public_key_algorithm',
          },
        },
      },
    },
    {
      foreach: {
        field: 'abusech.malwarebazaar.code_sign',
        ignore_missing: true,
        processor: {
          rename: {
            field: '_ingest._value.valid_from',
            target_field: 'threat.indicator.file.x509.not_before',
          },
        },
      },
    },
    {
      foreach: {
        field: 'abusech.malwarebazaar.code_sign',
        ignore_missing: true,
        processor: {
          rename: {
            field: '_ingest._value.valid_to',
            target_field: 'threat.indicator.file.x509.not_after',
          },
        },
      },
    },
    {
      foreach: {
        field: 'abusech.malwarebazaar.code_sign',
        ignore_missing: true,
        processor: {
          rename: {
            field: '_ingest._value.serial_number',
            target_field: 'threat.indicator.file.x509.serial_number',
          },
        },
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.file_size',
        target_field: 'threat.indicator.file.size',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.file_type',
        target_field: 'threat.indicator.file.extension',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.md5_hash',
        target_field: 'threat.indicator.file.hash.md5',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.sha256_hash',
        target_field: 'threat.indicator.file.hash.sha256',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.sha1_hash',
        target_field: 'threat.indicator.file.hash.sha1',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.sha3_384_hash',
        target_field: 'threat.indicator.file.hash.sha384',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.imphash',
        target_field: 'threat.indicator.file.pe.imphash',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.ssdeep',
        target_field: 'threat.indicator.file.hash.ssdeep',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.tlsh',
        target_field: 'threat.indicator.file.hash.tlsh',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malwarebazaar.telfhash',
        target_field: 'threat.indicator.file.elf.telfhash',
        ignore_missing: true,
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{ threat.indicator.file.hash.md5 }}',
        if: 'ctx?.threat?.indicator?.file?.hash?.md5 != null',
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{ threat.indicator.file.hash.sha256 }}',
        if: 'ctx?.threat?.indicator?.file?.hash?.sha256 != null',
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{ threat.indicator.file.hash.ssdeep }}',
        if: 'ctx?.threat?.indicator?.file?.hash?.ssdeep != null',
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{ threat.indicator.file.pe.imphash }}',
        if: 'ctx?.threat?.indicator?.file?.pe?.imphash != null',
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{ threat.indicator.file.elf.telfhash }}',
        if: 'ctx?.threat?.indicator?.file?.elf?.telfhash != null',
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{ threat.indicator.file.hash.tlsh }}',
        if: 'ctx?.threat?.indicator?.file?.hash?.tlsh != null',
      },
    },
    {
      convert: {
        field: 'threat.indicator.file.size',
        type: 'long',
        ignore_missing: true,
      },
    },
    {
      convert: {
        field: 'abusech.malwarebazaar.intelligence.downloads',
        type: 'long',
        ignore_missing: true,
      },
    },
    {
      convert: {
        field: 'abusech.malwarebazaar.intelligence.uploads',
        type: 'long',
        ignore_missing: true,
      },
    },
    {
      set: {
        field: 'threat.indicator.type',
        value: 'unknown',
        if: 'ctx?.threat?.indicator?.type == null',
      },
    },
    {
      script: {
        lang: 'painless',
        if: 'ctx?.abusech != null',
        source:
          'void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\nmap.values().removeIf(v -> v == null);\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n}\nhandleMap(ctx);\n',
      },
    },
    {
      remove: {
        field: 'event.original',
        if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
        ignore_failure: true,
        ignore_missing: true,
      },
    },
    {
      remove: {
        field: ['abusech.malwarebazaar.first_seen', 'abusech.malwarebazaar.last_seen', 'message'],
        ignore_missing: true,
      },
    },
  ],
  on_failure: [
    {
      set: {
        field: 'error.message',
        value: '{{ _ingest.on_failure_message }}',
      },
    },
  ],
};
