/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { Pipeline } from './pipeline';

export const tiAbusechMalware: Pipeline = {
  name: 'logs-ti_abusech.malware-1.3.1',
  processors: [
    {
      set: {
        field: 'ecs.version',
        value: '8.2.0',
      },
    },
    {
      set: {
        field: 'event.kind',
        value: 'enrichment',
      },
    },
    {
      set: {
        field: 'event.category',
        value: 'threat',
      },
    },
    {
      set: {
        field: 'event.type',
        value: 'indicator',
      },
    },
    {
      rename: {
        field: 'message',
        target_field: 'event.original',
        ignore_missing: true,
      },
    },
    {
      json: {
        field: 'event.original',
        target_field: 'abusech.malware',
      },
    },
    {
      fingerprint: {
        fields: ['abusech.malware.md5_hash', 'abusech.malware.sha256_hash'],
        target_field: '_id',
      },
    },
    {
      date: {
        field: 'abusech.malware.firstseen',
        target_field: 'threat.indicator.first_seen',
        formats: ['yyyy-MM-dd HH:mm:ss z', 'yyyy-MM-dd HH:mm:ss Z', 'yyyy-MM-dd HH:mm:ss'],
        if: 'ctx.abusech?.malware?.firstseen != null',
      },
    },
    {
      set: {
        field: 'threat.indicator.type',
        value: 'file',
      },
    },
    {
      rename: {
        field: 'abusech.malware.file_size',
        target_field: 'threat.indicator.file.size',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malware.file_type',
        target_field: 'threat.indicator.file.type',
        ignore_missing: true,
      },
    },
    {
      remove: {
        field: 'abusech.malware.urlhaus_download',
        ignore_missing: true,
      },
    },
    {
      convert: {
        field: 'threat.indicator.file.size',
        type: 'long',
        ignore_missing: true,
      },
    },
    {
      convert: {
        field: 'abusech.malware.virustotal.percent',
        type: 'float',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malware.md5_hash',
        target_field: 'threat.indicator.file.hash.md5',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malware.sha256_hash',
        target_field: 'threat.indicator.file.hash.sha256',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malware.imphash',
        target_field: 'threat.indicator.file.pe.imphash',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malware.ssdeep',
        target_field: 'threat.indicator.file.hash.ssdeep',
        ignore_missing: true,
      },
    },
    {
      rename: {
        field: 'abusech.malware.tlsh',
        target_field: 'threat.indicator.file.hash.tlsh',
        ignore_missing: true,
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{{threat.indicator.file.hash.md5}}}',
        if: 'ctx?.threat?.indicator?.file?.hash?.md5 != null',
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{{threat.indicator.file.hash.sha256}}}',
        if: 'ctx?.threat?.indicator?.file?.hash?.sha256 != null',
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{{threat.indicator.file.hash.ssdeep}}}',
        if: 'ctx?.threat?.indicator?.file?.hash?.ssdeep != null',
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{{threat.indicator.file.pe.imphash}}}',
        if: 'ctx?.threat?.indicator?.file?.pe?.imphash != null',
      },
    },
    {
      append: {
        field: 'related.hash',
        value: '{{{threat.indicator.file.hash.tlsh}}}',
        if: 'ctx?.threat?.indicator?.file?.hash?.tlsh != null',
      },
    },
    {
      set: {
        field: 'threat.indicator.type',
        value: 'unknown',
        if: 'ctx?.threat?.indicator?.type == null',
      },
    },
    {
      script: {
        lang: 'painless',
        if: 'ctx?.abusech != null',
        source:
          'void handleMap(Map map) {\n  for (def x : map.values()) {\n    if (x instanceof Map) {\n        handleMap(x);\n    } else if (x instanceof List) {\n        handleList(x);\n    }\n  }\nmap.values().removeIf(v -> v == null);\n}\nvoid handleList(List list) {\n  for (def x : list) {\n      if (x instanceof Map) {\n          handleMap(x);\n      } else if (x instanceof List) {\n          handleList(x);\n      }\n  }\n}\nhandleMap(ctx);\n',
      },
    },
    {
      remove: {
        field: 'event.original',
        if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))",
        ignore_failure: true,
        ignore_missing: true,
      },
    },
    {
      remove: {
        field: ['abusech.malware.firstseen', 'message'],
        ignore_missing: true,
      },
    },
  ],
  on_failure: [
    {
      set: {
        field: 'error.message',
        value: '{{ _ingest.on_failure_message }}',
      },
    },
  ],
};
