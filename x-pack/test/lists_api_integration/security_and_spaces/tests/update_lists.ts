/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import expect from '@kbn/expect';

import type { UpdateListSchema, ListSchema } from '@kbn/securitysolution-io-ts-list-types';
import { FtrProviderContext } from '../../common/ftr_provider_context';
import { LIST_URL } from '../../../../plugins/lists/common/constants';

import { getCreateMinimalListSchemaMock } from '../../../../plugins/lists/common/schemas/request/create_list_schema.mock';
import {
  createListsIndex,
  deleteListsIndex,
  removeListServerGeneratedProperties,
} from '../../utils';
import { getListResponseMockWithoutAutoGeneratedValues } from '../../../../plugins/lists/common/schemas/response/list_schema.mock';
import { getUpdateMinimalListSchemaMock } from '../../../../plugins/lists/common/schemas/request/update_list_schema.mock';

// eslint-disable-next-line import/no-default-export
export default ({ getService }: FtrProviderContext) => {
  const supertest = getService('supertest');

  describe('update_lists', () => {
    describe('update lists', () => {
      beforeEach(async () => {
        await createListsIndex(supertest);
      });

      afterEach(async () => {
        await deleteListsIndex(supertest);
      });

      it('should update a single list property of name using an id', async () => {
        // create a simple list
        await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMock())
          .expect(200);

        // update a simple list's name
        const updatedList: UpdateListSchema = {
          ...getUpdateMinimalListSchemaMock(),
          name: 'some other name',
        };

        const { body } = await supertest
          .put(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(updatedList)
          .expect(200);

        const outputList: Partial<ListSchema> = {
          ...getListResponseMockWithoutAutoGeneratedValues(),
          name: 'some other name',
          version: 2,
        };
        const bodyToCompare = removeListServerGeneratedProperties(body);
        expect(bodyToCompare).to.eql(outputList);
      });

      it('should update a single list property of name using an auto-generated id', async () => {
        const { id, ...listNoId } = getCreateMinimalListSchemaMock();
        // create a simple list with no id which will use an auto-generated id
        const { body: createListBody } = await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(listNoId)
          .expect(200);

        // update a simple list's name
        const updatedList: UpdateListSchema = {
          ...getUpdateMinimalListSchemaMock(),
          id: createListBody.id,
          name: 'some other name',
        };
        const { body } = await supertest
          .put(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(updatedList)
          .expect(200);

        const outputList: Partial<ListSchema> = {
          ...getListResponseMockWithoutAutoGeneratedValues(),
          name: 'some other name',
          version: 2,
        };
        const bodyToCompare = removeListServerGeneratedProperties(body);
        expect(bodyToCompare).to.eql(outputList);
      });

      it('should change the version of a list when it updates a property', async () => {
        // create a simple list
        await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMock())
          .expect(200);

        // update a simple list property of name and description
        const updatedList: UpdateListSchema = {
          ...getUpdateMinimalListSchemaMock(),
          name: 'some other name',
          description: 'some other description',
        };

        const { body } = await supertest.put(LIST_URL).set('kbn-xsrf', 'true').send(updatedList);

        const outputList: Partial<ListSchema> = {
          ...getListResponseMockWithoutAutoGeneratedValues(),
          name: 'some other name',
          description: 'some other description',
          version: 2,
        };

        const bodyToCompare = removeListServerGeneratedProperties(body);
        expect(bodyToCompare).to.eql(outputList);
      });

      it('should give a 404 if it is given a fake id', async () => {
        const simpleList: UpdateListSchema = {
          ...getUpdateMinimalListSchemaMock(),
          id: '5096dec6-b6b9-4d8d-8f93-6c2602079d9d',
        };
        const { body } = await supertest
          .put(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(simpleList)
          .expect(404);

        expect(body).to.eql({
          status_code: 404,
          message: 'list id: "5096dec6-b6b9-4d8d-8f93-6c2602079d9d" not found',
        });
      });
    });
  });
};
