/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import expect from '@kbn/expect';

import {
  ENDPOINT_LIST_URL,
  EXCEPTION_LIST_ITEM_URL,
  EXCEPTION_LIST_URL,
} from '@kbn/securitysolution-list-constants';
import { getExceptionResponseMockWithoutAutoGeneratedValues } from '@kbn/lists-plugin/common/schemas/response/exception_list_schema.mock';
import { getCreateExceptionListDetectionSchemaMock } from '@kbn/lists-plugin/common/schemas/request/create_exception_list_schema.mock';
import { getCreateExceptionListItemMinimalSchemaMock } from '@kbn/lists-plugin/common/schemas/request/create_exception_list_item_schema.mock';
import { FtrProviderContext } from '../../../common/ftr_provider_context';

import { deleteAllExceptions, removeExceptionListServerGeneratedProperties } from '../../utils';

// eslint-disable-next-line import/no-default-export
export default ({ getService }: FtrProviderContext) => {
  const supertest = getService('supertest');
  const log = getService('log');

  describe('duplicate_exception_lists', () => {
    afterEach(async () => {
      await deleteAllExceptions(supertest, log);
    });

    it('should duplicate a list with no exception items', async () => {
      // create an exception list
      await supertest
        .post(EXCEPTION_LIST_URL)
        .set('kbn-xsrf', 'true')
        .send(getCreateExceptionListDetectionSchemaMock())
        .expect(200);

      const { body } = await supertest
        .post(
          `${EXCEPTION_LIST_URL}/_duplicate?list_id=${
            getCreateExceptionListDetectionSchemaMock().list_id
          }&namespace_type=single&include_expired_exceptions=true`
        )
        .set('kbn-xsrf', 'true')
        .expect(200);

      const bodyToCompare = removeExceptionListServerGeneratedProperties(body);
      expect(bodyToCompare).to.eql({
        ...getExceptionResponseMockWithoutAutoGeneratedValues(),
        type: 'detection',
        list_id: body.list_id,
        name: `${getCreateExceptionListDetectionSchemaMock().name} [Duplicate]`,
      });
    });

    it('should duplicate a list and its items', async () => {
      // create an exception list
      await supertest
        .post(EXCEPTION_LIST_URL)
        .set('kbn-xsrf', 'true')
        .send(getCreateExceptionListDetectionSchemaMock())
        .expect(200);

      await supertest
        .post(EXCEPTION_LIST_ITEM_URL)
        .set('kbn-xsrf', 'true')
        .send({
          ...getCreateExceptionListItemMinimalSchemaMock(),
          list_id: getCreateExceptionListDetectionSchemaMock().list_id,
        })
        .expect(200);

      const { body: listBody } = await supertest
        .post(
          `${EXCEPTION_LIST_URL}/_duplicate?list_id=${
            getCreateExceptionListDetectionSchemaMock().list_id
          }&namespace_type=single&include_expired_exceptions=true`
        )
        .set('kbn-xsrf', 'true')
        .expect(200);

      const { body } = await supertest
        .get(`${EXCEPTION_LIST_ITEM_URL}/_find?list_id=${listBody.list_id}`)
        .set('kbn-xsrf', 'true')
        .send()
        .expect(200);

      const listBodyToCompare = removeExceptionListServerGeneratedProperties(listBody);
      expect(listBodyToCompare).to.eql({
        ...getExceptionResponseMockWithoutAutoGeneratedValues(),
        type: 'detection',
        list_id: listBody.list_id,
        name: `${getCreateExceptionListDetectionSchemaMock().name} [Duplicate]`,
      });

      expect(body.total).to.eql(1);
    });

    it('should duplicate a list with expired exception items', async () => {
      const expiredDate = new Date(Date.now() - 1000000).toISOString();

      // create an exception list
      await supertest
        .post(EXCEPTION_LIST_URL)
        .set('kbn-xsrf', 'true')
        .send(getCreateExceptionListDetectionSchemaMock())
        .expect(200);

      await supertest
        .post(EXCEPTION_LIST_ITEM_URL)
        .set('kbn-xsrf', 'true')
        .send({ ...getCreateExceptionListItemMinimalSchemaMock(), expire_time: expiredDate })
        .expect(200);

      const { body: listBody } = await supertest
        .post(
          `${EXCEPTION_LIST_URL}/_duplicate?list_id=${
            getCreateExceptionListDetectionSchemaMock().list_id
          }&namespace_type=single&include_expired_exceptions=true`
        )
        .set('kbn-xsrf', 'true')
        .expect(200);

      const { body } = await supertest
        .get(`${EXCEPTION_LIST_ITEM_URL}/_find?list_id=${listBody.list_id}`)
        .set('kbn-xsrf', 'true')
        .send()
        .expect(200);

      expect(body.total).to.eql(1);
    });

    it('should duplicate a list and EXCLUDE expired exception items when "include_expired_exceptions" set to "false"', async () => {
      const expiredDate = new Date(Date.now() - 1000000).toISOString();

      // create an exception list
      await supertest
        .post(EXCEPTION_LIST_URL)
        .set('kbn-xsrf', 'true')
        .send(getCreateExceptionListDetectionSchemaMock())
        .expect(200);

      await supertest
        .post(EXCEPTION_LIST_ITEM_URL)
        .set('kbn-xsrf', 'true')
        .send({
          ...getCreateExceptionListItemMinimalSchemaMock(),
          list_id: getCreateExceptionListDetectionSchemaMock().list_id,
          expire_time: expiredDate,
        })
        .expect(200);

      const { body: listBody } = await supertest
        .post(
          `${EXCEPTION_LIST_URL}/_duplicate?list_id=${
            getCreateExceptionListDetectionSchemaMock().list_id
          }&namespace_type=single&include_expired_exceptions=false`
        )
        .set('kbn-xsrf', 'true')
        .expect(200);

      const { body } = await supertest
        .get(`${EXCEPTION_LIST_ITEM_URL}/_find?list_id=${listBody.list_id}`)
        .set('kbn-xsrf', 'true')
        .send()
        .expect(200);

      expect(body.total).to.eql(0);
    });

    describe('error states', () => {
      it('should cause a 409 if list does not exist', async () => {
        const { body } = await supertest
          .post(
            `${EXCEPTION_LIST_URL}/_duplicate?list_id=exception_list_id&namespace_type=agnostic&include_expired_exceptions=true`
          )
          .set('kbn-xsrf', 'true')
          .expect(404);

        expect(body).to.eql({
          message: 'exception list id: "exception_list_id" does not exist',
          status_code: 404,
        });
      });

      it('should cause a 405 if trying to duplicate a reserved exception list type', async () => {
        // create an exception list
        await supertest.post(ENDPOINT_LIST_URL).set('kbn-xsrf', 'true').expect(200);

        const { body } = await supertest
          .post(
            `${EXCEPTION_LIST_URL}/_duplicate?list_id=endpoint_list&namespace_type=agnostic&include_expired_exceptions=true`
          )
          .set('kbn-xsrf', 'true')
          .expect(405);

        expect(body).to.eql({
          message:
            'unable to duplicate exception list with list_id: endpoint_list - action not allowed',
          status_code: 405,
        });
      });
    });
  });
};
