/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import expect from '@kbn/expect';

import { LIST_URL } from '../../../../plugins/lists/common/constants';
import { FtrProviderContext } from '../../common/ftr_provider_context';
import {
  getCreateMinimalListSchemaMock,
  getCreateMinimalListSchemaMockWithoutId,
} from '../../../../plugins/lists/common/schemas/request/create_list_schema.mock';
import { getListResponseMockWithoutAutoGeneratedValues } from '../../../../plugins/lists/common/schemas/response/list_schema.mock';

import {
  createListsIndex,
  deleteListsIndex,
  removeListServerGeneratedProperties,
} from '../../utils';

// eslint-disable-next-line import/no-default-export
export default ({ getService }: FtrProviderContext) => {
  const supertest = getService('supertest');

  describe('create_lists', () => {
    describe('validation errors', () => {
      it('should give an error that the index must exist first if it does not exist before creating a list', async () => {
        const { body } = await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMock())
          .expect(400);

        expect(body).to.eql({
          message:
            'To create a list, the index must exist first. Index ".lists-default" does not exist',
          status_code: 400,
        });
      });
    });

    describe('creating lists', () => {
      beforeEach(async () => {
        await createListsIndex(supertest);
      });

      afterEach(async () => {
        await deleteListsIndex(supertest);
      });

      it('should create a simple list with a list_id', async () => {
        const { body } = await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMock())
          .expect(200);

        const bodyToCompare = removeListServerGeneratedProperties(body);
        expect(bodyToCompare).to.eql(getListResponseMockWithoutAutoGeneratedValues());
      });

      it('should create a simple list without a list_id', async () => {
        const { body } = await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMockWithoutId())
          .expect(200);

        const bodyToCompare = removeListServerGeneratedProperties(body);
        expect(bodyToCompare).to.eql(getListResponseMockWithoutAutoGeneratedValues());
      });

      it('should cause a 409 conflict if we attempt to create the same list_id twice', async () => {
        await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMock())
          .expect(200);

        const { body } = await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMock())
          .expect(409);

        expect(body).to.eql({
          message: 'list id: "some-list-id" already exists',
          status_code: 409,
        });
      });
    });
  });
};
