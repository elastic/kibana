/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import expect from '@kbn/expect';

import { getExceptionListItemResponseMockWithoutAutoGeneratedValues } from '../../../../plugins/lists/common/schemas/response/exception_list_item_schema.mock';
import { getCreateExceptionListItemMinimalSchemaMock } from '../../../../plugins/lists/common/schemas/request/create_exception_list_item_schema.mock';
import { getCreateExceptionListMinimalSchemaMock } from '../../../../plugins/lists/common/schemas/request/create_exception_list_schema.mock';
import { FtrProviderContext } from '../../common/ftr_provider_context';
import {
  EXCEPTION_LIST_URL,
  EXCEPTION_LIST_ITEM_URL,
} from '../../../../plugins/lists/common/constants';

import { deleteAllExceptions, removeExceptionListItemServerGeneratedProperties } from '../../utils';

// eslint-disable-next-line import/no-default-export
export default ({ getService }: FtrProviderContext): void => {
  const supertest = getService('supertest');
  const es = getService('es');

  describe('find_exception_list_items', () => {
    describe('find exception list items', () => {
      afterEach(async () => {
        await deleteAllExceptions(es);
      });

      it('should return an empty find body correctly if no exception list items are loaded', async () => {
        await supertest
          .post(EXCEPTION_LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateExceptionListMinimalSchemaMock())
          .expect(200);

        const { body } = await supertest
          .get(
            `${EXCEPTION_LIST_ITEM_URL}/_find?list_id=${
              getCreateExceptionListMinimalSchemaMock().list_id
            }`
          )
          .set('kbn-xsrf', 'true')
          .send()
          .expect(200);

        expect(body).to.eql({
          data: [],
          page: 1,
          per_page: 20,
          total: 0,
        });
      });

      it('should return 404 if given a list_id that does not exist', async () => {
        const { body } = await supertest
          .get(`${EXCEPTION_LIST_ITEM_URL}/_find?list_id=non_exist`)
          .set('kbn-xsrf', 'true')
          .send()
          .expect(404);

        expect(body).to.eql({
          message: 'exception list id: "non_exist" does not exist',
          status_code: 404,
        });
      });

      it('should return a single exception list item when a single exception list item is loaded from a find with defaults added', async () => {
        // add the exception list
        await supertest
          .post(EXCEPTION_LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateExceptionListMinimalSchemaMock())
          .expect(200);

        // add a single exception list item
        await supertest
          .post(EXCEPTION_LIST_ITEM_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateExceptionListItemMinimalSchemaMock())
          .expect(200);

        // query the single exception list from _find
        const { body } = await supertest
          .get(
            `${EXCEPTION_LIST_ITEM_URL}/_find?list_id=${
              getCreateExceptionListMinimalSchemaMock().list_id
            }`
          )
          .set('kbn-xsrf', 'true')
          .send()
          .expect(200);

        body.data = [removeExceptionListItemServerGeneratedProperties(body.data[0])];
        expect(body).to.eql({
          data: [getExceptionListItemResponseMockWithoutAutoGeneratedValues()],
          page: 1,
          per_page: 20,
          total: 1,
        });
      });
    });
  });
};
