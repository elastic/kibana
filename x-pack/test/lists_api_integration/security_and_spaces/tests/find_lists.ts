/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

import expect from '@kbn/expect';

import { FtrProviderContext } from '../../common/ftr_provider_context';
import { LIST_URL } from '../../../../plugins/lists/common/constants';

import { getCreateMinimalListSchemaMock } from '../../../../plugins/lists/common/schemas/request/create_list_schema.mock';
import {
  createListsIndex,
  deleteListsIndex,
  removeListServerGeneratedProperties,
} from '../../utils';
import { getListResponseMockWithoutAutoGeneratedValues } from '../../../../plugins/lists/common/schemas/response/list_schema.mock';

// eslint-disable-next-line import/no-default-export
export default ({ getService }: FtrProviderContext): void => {
  const supertest = getService('supertest');

  describe('find_lists', () => {
    describe('find lists', () => {
      beforeEach(async () => {
        await createListsIndex(supertest);
      });

      afterEach(async () => {
        await deleteListsIndex(supertest);
      });

      it('should return an empty find body correctly if no lists are loaded', async () => {
        const { body } = await supertest
          .get(`${LIST_URL}/_find`)
          .set('kbn-xsrf', 'true')
          .send()
          .expect(200);

        expect(body).to.eql({
          cursor: 'WzBd',
          data: [],
          page: 1,
          per_page: 20,
          total: 0,
        });
      });

      it('should return a single list when a single list is loaded from a find with defaults added', async () => {
        // add a single list
        await supertest
          .post(LIST_URL)
          .set('kbn-xsrf', 'true')
          .send(getCreateMinimalListSchemaMock())
          .expect(200);

        // query the single list from _find
        const { body } = await supertest
          .get(`${LIST_URL}/_find`)
          .set('kbn-xsrf', 'true')
          .send()
          .expect(200);

        body.data = [removeListServerGeneratedProperties(body.data[0])];
        // cursor is a constant changing value so we have to delete it as well.
        delete body.cursor;
        expect(body).to.eql({
          data: [getListResponseMockWithoutAutoGeneratedValues()],
          page: 1,
          per_page: 20,
          total: 1,
        });
      });
    });
  });
};
