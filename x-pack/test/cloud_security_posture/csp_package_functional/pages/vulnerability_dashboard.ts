/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import expect from '@kbn/expect';
import type { FunctionalFtrProviderContext } from '../../common/ftr_provider_context';
import { setupCSPPackage } from '../../common/utils/csp_package_helpers';
import {
  deleteExistingIndex,
  addIndexDocsWithoutTimestamp,
} from '../../common/utils/index_api_helpers';
import { BENCHMARK_SCORES_INDEX, VULNERABILITIES_LATEST_INDEX } from '../../common/utils/indices';
import {
  scoresVulnerabilitiesMock,
  vulnerabilitiesLatestMock,
} from '../mocks/vulnerabilities_latest_mock';

// eslint-disable-next-line import/no-default-export
export default function ({ getPageObjects, getService }: FunctionalFtrProviderContext) {
  const retry = getService('retry');
  const filterBar = getService('filterBar');
  const pageObjects = getPageObjects(['common', 'vulnerabilityDashboard', 'findings']);
  const es = getService('es');
  const log = getService('log');
  const supertest = getService('supertest');

  describe('Vulnerability Dashboard Page', function () {
    this.tags(['cloud_security_vulnerability_dashboard']);

    let navigateToVulnerabilityDashboardPage: typeof pageObjects.vulnerabilityDashboard.navigateToVulnerabilityDashboardPage;

    let dashboard: typeof pageObjects.vulnerabilityDashboard.dashboard;

    before(async () => {
      navigateToVulnerabilityDashboardPage =
        pageObjects.vulnerabilityDashboard.navigateToVulnerabilityDashboardPage;

      dashboard = pageObjects.vulnerabilityDashboard.dashboard;

      await setupCSPPackage(retry, log, supertest);

      await addIndexDocsWithoutTimestamp(es, scoresVulnerabilitiesMock, BENCHMARK_SCORES_INDEX);
      await addIndexDocsWithoutTimestamp(
        es,
        vulnerabilitiesLatestMock,
        VULNERABILITIES_LATEST_INDEX
      );

      await navigateToVulnerabilityDashboardPage();
      await retry.waitFor(
        'Vulnerability dashboard to be displayed',
        async () => !!dashboard.getDashboardPageHeader()
      );
    });

    after(async () => {
      //   await deleteExistingIndex(es, BENCHMARK_SCORES_INDEX);
      await deleteExistingIndex(es, VULNERABILITIES_LATEST_INDEX);
    });

    describe('Vulnerability Dashboard', () => {
      it('Page Header renders on startup', async () => {
        const vulnPageHeader = await dashboard.getDashboardPageHeader();

        expect(
          (await vulnPageHeader.getVisibleText()) === 'Cloud Native Vulnerability Management'
        ).to.be(true);
      });

      it('Stats render accurate output', async () => {
        const criticalStat = await dashboard.getCriticalStat();
        const highStat = await dashboard.getHighStat();
        const mediumStat = await dashboard.getMediumStat();

        const criticalCount = await criticalStat.findByTagName('span');
        const highCount = await highStat.findByTagName('span');
        const mediumCount = await mediumStat.findByTagName('span');

        expect((await criticalCount.getVisibleText()) === '0').to.be(true);
        expect((await highCount.getVisibleText()) === '1').to.be(true);
        expect((await mediumCount.getVisibleText()) === '1').to.be(true);
      });

      it('should navigate to vulnerability findings page with high severity filter', async () => {
        const stat = await dashboard.getHighStat();
        await stat.click();

        const isFilterApplied = await filterBar.hasFilter('vulnerability.severity', 'HIGH');
        expect(isFilterApplied).to.be(true);

        // not removing the filter on purpose, to make sure it doesn't exist when navigating again from dashboard
        await navigateToVulnerabilityDashboardPage();
      });

      it('should navigate to vulnerability findings page with critical severity filter and no high severity filter', async () => {
        const stat = await dashboard.getCriticalStat();
        await stat.click();

        const isHighFilterApplied = await filterBar.hasFilter('vulnerability.severity', 'HIGH');
        expect(isHighFilterApplied).to.be(false);
        const isFilterApplied = await filterBar.hasFilter('vulnerability.severity', 'CRITICAL');
        expect(isFilterApplied).to.be(true);

        await filterBar.removeFilter('vulnerability.severity');
        await navigateToVulnerabilityDashboardPage();
      });
    });
  });
}
