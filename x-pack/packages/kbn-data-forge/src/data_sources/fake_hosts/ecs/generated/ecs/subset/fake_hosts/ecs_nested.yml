base:
  description: The `base` field set contains all fields which are at the root of the
    events. These fields are common across all types of events.
  fields:
    '@timestamp':
      dashed_name: timestamp
      description: 'Date/time when the event originated.

        This is the date/time extracted from the event, typically representing when
        the event was generated by the source.

        If the event source has no original timestamp, this value is typically populated
        by the first time the event was received by the pipeline.

        Required field for all events.'
      example: '2016-05-23T08:05:34.853Z'
      flat_name: '@timestamp'
      level: core
      name: '@timestamp'
      normalize: []
      required: true
      short: Date/time when the event originated.
      type: date
    labels:
      dashed_name: labels
      description: 'Custom key/value pairs.

        Can be used to add meta information to events. Should not contain nested objects.
        All values are stored as keyword.

        Example: `docker` and `k8s` labels.'
      example: '{"application": "foo-bar", "env": "production"}'
      flat_name: labels
      level: core
      name: labels
      normalize: []
      object_type: keyword
      short: Custom key/value pairs.
      type: object
    message:
      dashed_name: message
      description: 'For log events the message field contains the log message, optimized
        for viewing in a log viewer.

        For structured logs without an original message field, other fields can be
        concatenated to form a human-readable summary of the event.

        If multiple messages exist, they can be combined into one message.'
      example: Hello World
      flat_name: message
      level: core
      name: message
      normalize: []
      short: Log message optimized for viewing in a log viewer.
      type: match_only_text
    tags:
      dashed_name: tags
      description: List of keywords used to tag each event.
      example: '["production", "env2"]'
      flat_name: tags
      ignore_above: 1024
      level: core
      name: tags
      normalize:
      - array
      short: List of keywords used to tag each event.
      type: keyword
  group: 1
  name: base
  prefix: ''
  root: true
  short: All fields defined directly at the root of the events.
  title: Base
  type: group
event:
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    measurements and the time at which the measurement was taken. Examples of metric
    events include memory pressure measured on a host and device temperature. See
    the `event.kind` definition in this section for additional details about metric
    and state events.'
  fields:
    event.dataset:
      dashed_name: event-dataset
      description: 'Name of the dataset.

        If an event source publishes more than one type of log or events (e.g. access
        log, error log), the dataset is used to specify which one the event comes
        from.

        It''s recommended but not required to start the dataset name with the module
        name, followed by a dot, then the dataset name.'
      example: apache.access
      flat_name: event.dataset
      ignore_above: 1024
      level: core
      name: dataset
      normalize: []
      short: Name of the dataset.
      type: keyword
    event.module:
      dashed_name: event-module
      description: 'Name of the module this data is coming from.

        If your monitoring agent supports the concept of modules or plugins to process
        events of a given source (e.g. Apache logs), `event.module` should contain
        the name of this module.'
      example: apache
      flat_name: event.module
      ignore_above: 1024
      level: core
      name: module
      normalize: []
      short: Name of the module this data is coming from.
      type: keyword
  group: 2
  name: event
  prefix: event.
  short: Fields breaking down the event details.
  title: Event
  type: group
host:
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:
    host.architecture:
      dashed_name: host-architecture
      description: Operating system architecture.
      example: x86_64
      flat_name: host.architecture
      ignore_above: 1024
      level: core
      name: architecture
      normalize: []
      short: Operating system architecture.
      type: keyword
    host.cpu.usage:
      dashed_name: host-cpu-usage
      description: 'Percent CPU used which is normalized by the number of CPU cores
        and it ranges from 0 to 1.

        Scaling factor: 1000.

        For example: For a two core host, this value should be the average of the
        two cores, between 0 and 1.'
      flat_name: host.cpu.usage
      level: extended
      name: cpu.usage
      normalize: []
      scaling_factor: 1000
      short: Percent CPU used, between 0 and 1.
      type: scaled_float
    host.disk.read.bytes:
      dashed_name: host-disk-read-bytes
      description: The total number of bytes (gauge) read successfully (aggregated
        from all disks) since the last metric collection.
      flat_name: host.disk.read.bytes
      level: extended
      name: disk.read.bytes
      normalize: []
      short: The number of bytes read by all disks.
      type: long
    host.disk.write.bytes:
      dashed_name: host-disk-write-bytes
      description: The total number of bytes (gauge) written successfully (aggregated
        from all disks) since the last metric collection.
      flat_name: host.disk.write.bytes
      level: extended
      name: disk.write.bytes
      normalize: []
      short: The number of bytes written on all disks.
      type: long
    host.domain:
      dashed_name: host-domain
      description: 'Name of the domain of which the host is a member.

        For example, on Windows this could be the host''s Active Directory domain
        or NetBIOS domain name. For Linux this could be the domain of the host''s
        LDAP provider.'
      example: CONTOSO
      flat_name: host.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      short: Name of the directory the group is a member of.
      type: keyword
    host.geo.city_name:
      dashed_name: host-geo-city-name
      description: City name.
      example: Montreal
      flat_name: host.geo.city_name
      ignore_above: 1024
      level: core
      name: city_name
      normalize: []
      original_fieldset: geo
      short: City name.
      type: keyword
    host.geo.continent_code:
      dashed_name: host-geo-continent-code
      description: Two-letter code representing continent's name.
      example: NA
      flat_name: host.geo.continent_code
      ignore_above: 1024
      level: core
      name: continent_code
      normalize: []
      original_fieldset: geo
      short: Continent code.
      type: keyword
    host.geo.continent_name:
      dashed_name: host-geo-continent-name
      description: Name of the continent.
      example: North America
      flat_name: host.geo.continent_name
      ignore_above: 1024
      level: core
      name: continent_name
      normalize: []
      original_fieldset: geo
      short: Name of the continent.
      type: keyword
    host.geo.country_iso_code:
      dashed_name: host-geo-country-iso-code
      description: Country ISO code.
      example: CA
      flat_name: host.geo.country_iso_code
      ignore_above: 1024
      level: core
      name: country_iso_code
      normalize: []
      original_fieldset: geo
      short: Country ISO code.
      type: keyword
    host.geo.country_name:
      dashed_name: host-geo-country-name
      description: Country name.
      example: Canada
      flat_name: host.geo.country_name
      ignore_above: 1024
      level: core
      name: country_name
      normalize: []
      original_fieldset: geo
      short: Country name.
      type: keyword
    host.geo.location:
      dashed_name: host-geo-location
      description: Longitude and latitude.
      example: '{ "lon": -73.614830, "lat": 45.505918 }'
      flat_name: host.geo.location
      level: core
      name: location
      normalize: []
      original_fieldset: geo
      short: Longitude and latitude.
      type: geo_point
    host.geo.name:
      dashed_name: host-geo-name
      description: 'User-defined description of a location, at the level of granularity
        they care about.

        Could be the name of their data centers, the floor number, if this describes
        a local physical entity, city names.

        Not typically used in automated geolocation.'
      example: boston-dc
      flat_name: host.geo.name
      ignore_above: 1024
      level: extended
      name: name
      normalize: []
      original_fieldset: geo
      short: User-defined description of a location.
      type: keyword
    host.geo.postal_code:
      dashed_name: host-geo-postal-code
      description: 'Postal code associated with the location.

        Values appropriate for this field may also be known as a postcode or ZIP code
        and will vary widely from country to country.'
      example: 94040
      flat_name: host.geo.postal_code
      ignore_above: 1024
      level: core
      name: postal_code
      normalize: []
      original_fieldset: geo
      short: Postal code.
      type: keyword
    host.geo.region_iso_code:
      dashed_name: host-geo-region-iso-code
      description: Region ISO code.
      example: CA-QC
      flat_name: host.geo.region_iso_code
      ignore_above: 1024
      level: core
      name: region_iso_code
      normalize: []
      original_fieldset: geo
      short: Region ISO code.
      type: keyword
    host.geo.region_name:
      dashed_name: host-geo-region-name
      description: Region name.
      example: Quebec
      flat_name: host.geo.region_name
      ignore_above: 1024
      level: core
      name: region_name
      normalize: []
      original_fieldset: geo
      short: Region name.
      type: keyword
    host.geo.timezone:
      dashed_name: host-geo-timezone
      description: The time zone of the location, such as IANA time zone name.
      example: America/Argentina/Buenos_Aires
      flat_name: host.geo.timezone
      ignore_above: 1024
      level: core
      name: timezone
      normalize: []
      original_fieldset: geo
      short: Time zone.
      type: keyword
    host.hostname:
      dashed_name: host-hostname
      description: 'Hostname of the host.

        It normally contains what the `hostname` command returns on the host machine.'
      flat_name: host.hostname
      ignore_above: 1024
      level: core
      name: hostname
      normalize: []
      short: Hostname of the host.
      type: keyword
    host.id:
      dashed_name: host-id
      description: 'Unique host id.

        As hostname is not always unique, use values that are meaningful in your environment.

        Example: The current usage of `beat.name`.'
      flat_name: host.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      short: Unique host id.
      type: keyword
    host.ip:
      dashed_name: host-ip
      description: Host ip addresses.
      flat_name: host.ip
      level: core
      name: ip
      normalize:
      - array
      short: Host ip addresses.
      type: ip
    host.mac:
      dashed_name: host-mac
      description: 'Host MAC addresses.

        The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit
        byte) is represented by two [uppercase] hexadecimal digits giving the value
        of the octet as an unsigned integer. Successive octets are separated by a
        hyphen.'
      example: '["00-00-5E-00-53-23", "00-00-5E-00-53-24"]'
      flat_name: host.mac
      ignore_above: 1024
      level: core
      name: mac
      normalize:
      - array
      short: Host MAC addresses.
      type: keyword
    host.name:
      dashed_name: host-name
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified
        domain name, or a name specified by the user. The sender decides which value
        to use.'
      flat_name: host.name
      ignore_above: 1024
      level: core
      name: name
      normalize: []
      short: Name of the host.
      type: keyword
    host.network.egress.bytes:
      dashed_name: host-network-egress-bytes
      description: The number of bytes (gauge) sent out on all network interfaces
        by the host since the last metric collection.
      flat_name: host.network.egress.bytes
      level: extended
      name: network.egress.bytes
      normalize: []
      short: The number of bytes sent on all network interfaces.
      type: long
    host.network.egress.packets:
      dashed_name: host-network-egress-packets
      description: The number of packets (gauge) sent out on all network interfaces
        by the host since the last metric collection.
      flat_name: host.network.egress.packets
      level: extended
      name: network.egress.packets
      normalize: []
      short: The number of packets sent on all network interfaces.
      type: long
    host.network.ingress.bytes:
      dashed_name: host-network-ingress-bytes
      description: The number of bytes received (gauge) on all network interfaces
        by the host since the last metric collection.
      flat_name: host.network.ingress.bytes
      level: extended
      name: network.ingress.bytes
      normalize: []
      short: The number of bytes received on all network interfaces.
      type: long
    host.network.ingress.packets:
      dashed_name: host-network-ingress-packets
      description: The number of packets (gauge) received on all network interfaces
        by the host since the last metric collection.
      flat_name: host.network.ingress.packets
      level: extended
      name: network.ingress.packets
      normalize: []
      short: The number of packets received on all network interfaces.
      type: long
    host.os.family:
      dashed_name: host-os-family
      description: OS family (such as redhat, debian, freebsd, windows).
      example: debian
      flat_name: host.os.family
      ignore_above: 1024
      level: extended
      name: family
      normalize: []
      original_fieldset: os
      short: OS family (such as redhat, debian, freebsd, windows).
      type: keyword
    host.os.full:
      dashed_name: host-os-full
      description: Operating system name, including the version or code name.
      example: Mac OS Mojave
      flat_name: host.os.full
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: host.os.full.text
        name: text
        type: match_only_text
      name: full
      normalize: []
      original_fieldset: os
      short: Operating system name, including the version or code name.
      type: keyword
    host.os.kernel:
      dashed_name: host-os-kernel
      description: Operating system kernel version as a raw string.
      example: 4.4.0-112-generic
      flat_name: host.os.kernel
      ignore_above: 1024
      level: extended
      name: kernel
      normalize: []
      original_fieldset: os
      short: Operating system kernel version as a raw string.
      type: keyword
    host.os.name:
      dashed_name: host-os-name
      description: Operating system name, without the version.
      example: Mac OS X
      flat_name: host.os.name
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: host.os.name.text
        name: text
        type: match_only_text
      name: name
      normalize: []
      original_fieldset: os
      short: Operating system name, without the version.
      type: keyword
    host.os.platform:
      dashed_name: host-os-platform
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin
      flat_name: host.os.platform
      ignore_above: 1024
      level: extended
      name: platform
      normalize: []
      original_fieldset: os
      short: Operating system platform (such centos, ubuntu, windows).
      type: keyword
    host.os.type:
      dashed_name: host-os-type
      description: 'Use the `os.type` field to categorize the operating system into
        one of the broad commercial families.

        One of these following values should be used (lowercase): linux, macos, unix,
        windows.

        If the OS you''re dealing with is not in the list, the field should not be
        populated. Please let us know by opening an issue with ECS, to propose its
        addition.'
      example: macos
      flat_name: host.os.type
      ignore_above: 1024
      level: extended
      name: type
      normalize: []
      original_fieldset: os
      short: 'Which commercial OS family (one of: linux, macos, unix or windows).'
      type: keyword
    host.os.version:
      dashed_name: host-os-version
      description: Operating system version as a raw string.
      example: 10.14.1
      flat_name: host.os.version
      ignore_above: 1024
      level: extended
      name: version
      normalize: []
      original_fieldset: os
      short: Operating system version as a raw string.
      type: keyword
    host.type:
      dashed_name: host-type
      description: 'Type of host.

        For Cloud providers this can be the machine type like `t2.medium`. If vm,
        this could be the container, for example, or other information meaningful
        in your environment.'
      flat_name: host.type
      ignore_above: 1024
      level: core
      name: type
      normalize: []
      short: Type of host.
      type: keyword
    host.uptime:
      dashed_name: host-uptime
      description: Seconds the host has been up.
      example: 1325
      flat_name: host.uptime
      level: extended
      name: uptime
      normalize: []
      short: Seconds the host has been up.
      type: long
  group: 2
  name: host
  nestings:
  - host.geo
  - host.os
  prefix: host.
  reused_here:
  - full: host.geo
    schema_name: geo
    short: Fields describing a location.
  - full: host.os
    schema_name: os
    short: OS fields contain information about the operating system.
  short: Fields describing the relevant computing instance.
  title: Host
  type: group
metricset:
  description: Metricset data
  fields:
    metricset.interval:
      dashed_name: metricset-interval
      description: The interval of the data
      flat_name: metricset.interval
      level: custom
      name: interval
      normalize: []
      short: The interval of the data
      type: long
  group: 2
  name: metricset
  prefix: metricset.
  short: Metricset data
  title: Metricset
  type: group
system:
  description: System-related information
  fields:
    system.cpu.cores:
      dashed_name: system-cpu-cores
      description: Number of CPU cores
      flat_name: system.cpu.cores
      level: custom
      name: cpu.cores
      normalize: []
      short: Number of CPU cores
      type: integer
    system.cpu.system.pct:
      dashed_name: system-cpu-system-pct
      description: Percentage of CPU usage by system processes
      flat_name: system.cpu.system.pct
      level: custom
      name: cpu.system.pct
      normalize: []
      short: Percentage of CPU usage by system processes
      type: float
    system.cpu.total.norm.pct:
      dashed_name: system-cpu-total-norm-pct
      description: Percentage of CPU usage
      flat_name: system.cpu.total.norm.pct
      level: custom
      name: cpu.total.norm.pct
      normalize: []
      short: Percentage of CPU usage
      type: float
    system.cpu.user.pct:
      dashed_name: system-cpu-user-pct
      description: Percentage of CPU usage by user processes
      flat_name: system.cpu.user.pct
      level: custom
      name: cpu.user.pct
      normalize: []
      short: Percentage of CPU usage by user processes
      type: float
    system.filesystem.used.pct:
      dashed_name: system-filesystem-used-pct
      description: Percentage of filesytem used by system processes
      flat_name: system.filesystem.used.pct
      level: custom
      name: filesystem.used.pct
      normalize: []
      short: Percentage of filesytem used by system processes
      type: float
    system.load.1:
      dashed_name: system-load-1
      description: Load 1m by system processes
      flat_name: system.load.1
      level: custom
      name: load.1
      normalize: []
      short: Load 1m by system processes
      type: float
    system.memory.actual.used.pct:
      dashed_name: system-memory-actual-used-pct
      description: Percentage of actual memory by system processes
      flat_name: system.memory.actual.used.pct
      level: custom
      name: memory.actual.used.pct
      normalize: []
      short: Percentage of actual memory by system processes
      type: float
    system.network.in.bytes:
      dashed_name: system-network-in-bytes
      description: Number of incoming bytes
      flat_name: system.network.in.bytes
      level: custom
      name: network.in.bytes
      normalize: []
      short: Number of incoming bytes
      type: long
    system.network.name:
      dashed_name: system-network-name
      description: Name of the network interface
      flat_name: system.network.name
      ignore_above: 1024
      level: custom
      name: network.name
      normalize: []
      short: Name of the network interface
      type: keyword
    system.network.out.bytes:
      dashed_name: system-network-out-bytes
      description: Number of outgoing bytes
      flat_name: system.network.out.bytes
      level: custom
      name: network.out.bytes
      normalize: []
      short: Number of outgoing bytes
      type: long
  group: 2
  level: custom
  name: system
  prefix: system.
  short: System-related information
  title: System
  type: group
