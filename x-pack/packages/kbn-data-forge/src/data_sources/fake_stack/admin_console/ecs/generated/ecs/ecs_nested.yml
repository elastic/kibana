base:
  description: The `base` field set contains all fields which are at the root of the
    events. These fields are common across all types of events.
  fields:
    '@timestamp':
      dashed_name: timestamp
      description: 'Date/time when the event originated.

        This is the date/time extracted from the event, typically representing when
        the event was generated by the source.

        If the event source has no original timestamp, this value is typically populated
        by the first time the event was received by the pipeline.

        Required field for all events.'
      example: '2016-05-23T08:05:34.853Z'
      flat_name: '@timestamp'
      level: core
      name: '@timestamp'
      normalize: []
      required: true
      short: Date/time when the event originated.
      type: date
    labels:
      dashed_name: labels
      description: 'Custom key/value pairs.

        Can be used to add meta information to events. Should not contain nested objects.
        All values are stored as keyword.

        Example: `docker` and `k8s` labels.'
      example: '{"application": "foo-bar", "env": "production"}'
      flat_name: labels
      level: core
      name: labels
      normalize: []
      object_type: keyword
      short: Custom key/value pairs.
      type: object
    message:
      dashed_name: message
      description: 'For log events the message field contains the log message, optimized
        for viewing in a log viewer.

        For structured logs without an original message field, other fields can be
        concatenated to form a human-readable summary of the event.

        If multiple messages exist, they can be combined into one message.'
      example: Hello World
      flat_name: message
      level: core
      name: message
      normalize: []
      short: Log message optimized for viewing in a log viewer.
      type: match_only_text
    tags:
      dashed_name: tags
      description: List of keywords used to tag each event.
      example: '["production", "env2"]'
      flat_name: tags
      ignore_above: 1024
      level: core
      name: tags
      normalize:
      - array
      short: List of keywords used to tag each event.
      type: keyword
  group: 1
  name: base
  prefix: ''
  root: true
  short: All fields defined directly at the root of the events.
  title: Base
  type: group
event:
  description: 'The event fields are used for context information about the log or
    metric event itself.

    A log is defined as an event containing details of something that happened. Log
    events must include the time at which the thing happened. Examples of log events
    include a process starting on a host, a network packet being sent from a source
    to a destination, or a network connection between a client and a server being
    initiated or closed. A metric is defined as an event containing one or more numerical
    measurements and the time at which the measurement was taken. Examples of metric
    events include memory pressure measured on a host and device temperature. See
    the `event.kind` definition in this section for additional details about metric
    and state events.'
  fields:
    event.action:
      dashed_name: event-action
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`.
        Examples are `group-add`, `process-started`, `file-created`. The value is
        normally defined by the implementer.'
      example: user-password-change
      flat_name: event.action
      ignore_above: 1024
      level: core
      name: action
      normalize: []
      short: The action captured by the event.
      type: keyword
    event.category:
      allowed_values:
      - description: Events in this category are related to the challenge and response
          process in which credentials are supplied and verified to allow the creation
          of a session. Common sources for these logs are Windows event logs and ssh
          logs. Visualize and analyze events in this category to look for failed logins,
          and other authentication-related activity.
        expected_event_types:
        - start
        - end
        - info
        name: authentication
      - description: 'Events in the configuration category have to deal with creating,
          modifying, or deleting the settings or parameters of an application, process,
          or system.

          Example sources include security policy change logs, configuration auditing
          logging, and system integrity monitoring.'
        expected_event_types:
        - access
        - change
        - creation
        - deletion
        - info
        name: configuration
      - description: The database category denotes events and metrics relating to
          a data storage and retrieval system. Note that use of this category is not
          limited to relational database systems. Examples include event logs from
          MS SQL, MySQL, Elasticsearch, MongoDB, etc. Use this category to visualize
          and analyze database activity such as accesses and changes.
        expected_event_types:
        - access
        - change
        - info
        - error
        name: database
      - description: 'Events in the driver category have to do with operating system
          device drivers and similar software entities such as Windows drivers, kernel
          extensions, kernel modules, etc.

          Use events and metrics in this category to visualize and analyze driver-related
          activity and status on hosts.'
        expected_event_types:
        - change
        - end
        - info
        - start
        name: driver
      - description: Relating to a set of information that has been created on, or
          has existed on a filesystem. Use this category of events to visualize and
          analyze the creation, access, and deletions of files. Events in this category
          can come from both host-based and network-based sources. An example source
          of a network-based detection of a file transfer would be the Zeek file.log.
        expected_event_types:
        - change
        - creation
        - deletion
        - info
        name: file
      - description: 'Use this category to visualize and analyze information such
          as host inventory or host lifecycle events.

          Most of the events in this category can usually be observed from the outside,
          such as from a hypervisor or a control plane''s point of view. Some can
          also be seen from within, such as "start" or "end".

          Note that this category is for information about hosts themselves; it is
          not meant to capture activity "happening on a host".'
        expected_event_types:
        - access
        - change
        - end
        - info
        - start
        name: host
      - description: Identity and access management (IAM) events relating to users,
          groups, and administration. Use this category to visualize and analyze IAM-related
          logs and data from active directory, LDAP, Okta, Duo, and other IAM systems.
        expected_event_types:
        - admin
        - change
        - creation
        - deletion
        - group
        - info
        - user
        name: iam
      - description: Relating to intrusion detections from IDS/IPS systems and functions,
          both network and host-based. Use this category to visualize and analyze
          intrusion detection alerts from systems such as Snort, Suricata, and Palo
          Alto threat detections.
        expected_event_types:
        - allowed
        - denied
        - info
        name: intrusion_detection
      - description: Malware detection events and alerts. Use this category to visualize
          and analyze malware detections from EDR/EPP systems such as Elastic Endpoint
          Security, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS
          systems such as Suricata, or other sources of malware-related events such
          as Palo Alto Networks threat logs and Wildfire logs.
        expected_event_types:
        - info
        name: malware
      - description: Relating to all network activity, including network connection
          lifecycle, network traffic, and essentially any event that includes an IP
          address. Many events containing decoded network protocol transactions fit
          into this category. Use events in this category to visualize or analyze
          counts of network ports, protocols, addresses, geolocation information,
          etc.
        expected_event_types:
        - access
        - allowed
        - connection
        - denied
        - end
        - info
        - protocol
        - start
        name: network
      - description: Relating to software packages installed on hosts. Use this category
          to visualize and analyze inventory of software installed on various hosts,
          or to determine host vulnerability in the absence of vulnerability scan
          data.
        expected_event_types:
        - access
        - change
        - deletion
        - info
        - installation
        - start
        name: package
      - description: Use this category of events to visualize and analyze process-specific
          information such as lifecycle events or process ancestry.
        expected_event_types:
        - access
        - change
        - end
        - info
        - start
        name: process
      - description: Having to do with settings and assets stored in the Windows registry.
          Use this category to visualize and analyze activity such as registry access
          and modifications.
        expected_event_types:
        - access
        - change
        - creation
        - deletion
        name: registry
      - description: The session category is applied to events and metrics regarding
          logical persistent connections to hosts and services. Use this category
          to visualize and analyze interactive or automated persistent connections
          between assets. Data for this category may come from Windows Event logs,
          SSH logs, or stateless sessions such as HTTP cookie-based sessions, etc.
        expected_event_types:
        - start
        - end
        - info
        name: session
      - description: Use this category to visualize and analyze events describing
          threat actors' targets, motives, or behaviors.
        expected_event_types:
        - indicator
        name: threat
      - description: 'Relating to web server access. Use this category to create a
          dashboard of web server/proxy activity from apache, IIS, nginx web servers,
          etc. Note: events from network observers such as Zeek http log may also
          be included in this category.'
        expected_event_types:
        - access
        - error
        - info
        name: web
      dashed_name: event-category
      description: 'This is one of four ECS Categorization Fields, and indicates the
        second level in the ECS category hierarchy.

        `event.category` represents the "big buckets" of ECS categories. For example,
        filtering on `event.category:process` yields all events relating to process
        activity. This field is closely related to `event.type`, which is used as
        a subcategory.

        This field is an array. This will allow proper categorization of some events
        that fall in multiple categories.'
      example: authentication
      flat_name: event.category
      ignore_above: 1024
      level: core
      name: category
      normalize:
      - array
      short: Event category. The second categorization field in the hierarchy.
      type: keyword
    event.duration:
      dashed_name: event-duration
      description: 'Duration of the event in nanoseconds.

        If event.start and event.end are known this value should be the difference
        between the end and start time.'
      flat_name: event.duration
      format: duration
      input_format: nanoseconds
      level: core
      name: duration
      normalize: []
      output_format: asMilliseconds
      output_precision: 1
      short: Duration of the event in nanoseconds.
      type: long
  group: 2
  name: event
  prefix: event.
  short: Fields breaking down the event details.
  title: Event
  type: group
host:
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the
    event happened, or from which the measurement was taken. Host types include hardware,
    virtual machines, Docker containers, and Kubernetes nodes.'
  fields:
    host.name:
      dashed_name: host-name
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified
        domain name, or a name specified by the user. The sender decides which value
        to use.'
      flat_name: host.name
      ignore_above: 1024
      level: core
      name: name
      normalize: []
      short: Name of the host.
      type: keyword
  group: 2
  name: host
  nestings:
  - host.geo
  - host.os
  prefix: host.
  reused_here:
  - full: host.geo
    schema_name: geo
    short: Fields describing a location.
  - full: host.os
    schema_name: os
    short: OS fields contain information about the operating system.
  short: Fields describing the relevant computing instance.
  title: Host
  type: group
http:
  description: Fields related to HTTP activity. Use the `url` field set to store the
    url of the request.
  fields:
    http.request.body.bytes:
      dashed_name: http-request-body-bytes
      description: Size in bytes of the request body.
      example: 887
      flat_name: http.request.body.bytes
      format: bytes
      level: extended
      name: request.body.bytes
      normalize: []
      short: Size in bytes of the request body.
      type: long
    http.request.body.content:
      dashed_name: http-request-body-content
      description: The full HTTP request body.
      example: Hello world
      flat_name: http.request.body.content
      level: extended
      multi_fields:
      - flat_name: http.request.body.content.text
        name: text
        type: match_only_text
      name: request.body.content
      normalize: []
      short: The full HTTP request body.
      type: wildcard
    http.request.bytes:
      dashed_name: http-request-bytes
      description: Total size in bytes of the request (body and headers).
      example: 1437
      flat_name: http.request.bytes
      format: bytes
      level: extended
      name: request.bytes
      normalize: []
      short: Total size in bytes of the request (body and headers).
      type: long
    http.request.id:
      dashed_name: http-request-id
      description: 'A unique identifier for each HTTP request to correlate logs between
        clients and servers in transactions.

        The id may be contained in a non-standard HTTP header, such as `X-Request-ID`
        or `X-Correlation-ID`.'
      example: 123e4567-e89b-12d3-a456-426614174000
      flat_name: http.request.id
      ignore_above: 1024
      level: extended
      name: request.id
      normalize: []
      short: HTTP request ID.
      type: keyword
    http.request.method:
      dashed_name: http-request-method
      description: 'HTTP request method.

        The value should retain its casing from the original event. For example, `GET`,
        `get`, and `GeT` are all considered valid values for this field.'
      example: POST
      flat_name: http.request.method
      ignore_above: 1024
      level: extended
      name: request.method
      normalize: []
      short: HTTP request method.
      type: keyword
    http.request.mime_type:
      dashed_name: http-request-mime-type
      description: 'Mime type of the body of the request.

        This value must only be populated based on the content of the request body,
        not on the `Content-Type` header. Comparing the mime type of a request with
        the request''s Content-Type header can be helpful in detecting threats or
        misconfigured clients.'
      example: image/gif
      flat_name: http.request.mime_type
      ignore_above: 1024
      level: extended
      name: request.mime_type
      normalize: []
      short: Mime type of the body of the request.
      type: keyword
    http.request.referrer:
      dashed_name: http-request-referrer
      description: Referrer for this HTTP request.
      example: https://blog.example.com/
      flat_name: http.request.referrer
      ignore_above: 1024
      level: extended
      name: request.referrer
      normalize: []
      short: Referrer for this HTTP request.
      type: keyword
    http.response.body.bytes:
      dashed_name: http-response-body-bytes
      description: Size in bytes of the response body.
      example: 887
      flat_name: http.response.body.bytes
      format: bytes
      level: extended
      name: response.body.bytes
      normalize: []
      short: Size in bytes of the response body.
      type: long
    http.response.body.content:
      dashed_name: http-response-body-content
      description: The full HTTP response body.
      example: Hello world
      flat_name: http.response.body.content
      level: extended
      multi_fields:
      - flat_name: http.response.body.content.text
        name: text
        type: match_only_text
      name: response.body.content
      normalize: []
      short: The full HTTP response body.
      type: wildcard
    http.response.bytes:
      dashed_name: http-response-bytes
      description: Total size in bytes of the response (body and headers).
      example: 1437
      flat_name: http.response.bytes
      format: bytes
      level: extended
      name: response.bytes
      normalize: []
      short: Total size in bytes of the response (body and headers).
      type: long
    http.response.mime_type:
      dashed_name: http-response-mime-type
      description: 'Mime type of the body of the response.

        This value must only be populated based on the content of the response body,
        not on the `Content-Type` header. Comparing the mime type of a response with
        the response''s Content-Type header can be helpful in detecting misconfigured
        servers.'
      example: image/gif
      flat_name: http.response.mime_type
      ignore_above: 1024
      level: extended
      name: response.mime_type
      normalize: []
      short: Mime type of the body of the response.
      type: keyword
    http.response.status_code:
      dashed_name: http-response-status-code
      description: HTTP response status code.
      example: 404
      flat_name: http.response.status_code
      format: string
      level: extended
      name: response.status_code
      normalize: []
      short: HTTP response status code.
      type: long
    http.version:
      dashed_name: http-version
      description: HTTP version.
      example: 1.1
      flat_name: http.version
      ignore_above: 1024
      level: extended
      name: version
      normalize: []
      short: HTTP version.
      type: keyword
  group: 2
  name: http
  prefix: http.
  short: Fields describing an HTTP request.
  title: HTTP
  type: group
log:
  description: 'Details about the event''s logging mechanism or logging transport.

    The log.* fields are typically populated with details about the logging mechanism
    used to create and/or transport the event. For example, syslog details belong
    under `log.syslog.*`.

    The details specific to your event source are typically not logged under `log.*`,
    but rather in `event.*` or in other ECS fields.'
  fields:
    log.level:
      dashed_name: log-level
      description: 'Original log level of the log event.

        If the source of the event provides a log level or textual severity, this
        is the one that goes in `log.level`. If your source doesn''t specify one,
        you may put your event transport''s severity here (e.g. Syslog severity).

        Some examples are `warn`, `err`, `i`, `informational`.'
      example: error
      flat_name: log.level
      ignore_above: 1024
      level: core
      name: level
      normalize: []
      short: Log level of the log event.
      type: keyword
    log.logger:
      dashed_name: log-logger
      description: The name of the logger inside an application. This is usually the
        name of the class which initialized the logger, or can be a custom name.
      example: org.elasticsearch.bootstrap.Bootstrap
      flat_name: log.logger
      ignore_above: 1024
      level: core
      name: logger
      normalize: []
      short: Name of the logger.
      type: keyword
  group: 2
  name: log
  prefix: log.
  short: Details about the event's logging mechanism.
  title: Log
  type: group
url:
  description: URL fields provide support for complete or partial URLs, and supports
    the breaking down into scheme, domain, path, and so on.
  fields:
    url.domain:
      dashed_name: url-domain
      description: 'Domain of the url, such as "www.elastic.co".

        In some cases a URL may refer to an IP and/or port directly, without a domain
        name. In this case, the IP address would go to the `domain` field.

        If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC
        2732), the `[` and `]` characters should also be captured in the `domain`
        field.'
      example: www.elastic.co
      flat_name: url.domain
      ignore_above: 1024
      level: extended
      name: domain
      normalize: []
      short: Domain of the url.
      type: keyword
    url.extension:
      dashed_name: url-extension
      description: 'The field contains the file extension from the original request
        url, excluding the leading dot.

        The file extension is only set if it exists, as not every url has a file extension.

        The leading period must not be included. For example, the value must be "png",
        not ".png".

        Note that when the file name has multiple extensions (example.tar.gz), only
        the last one should be captured ("gz", not "tar.gz").'
      example: png
      flat_name: url.extension
      ignore_above: 1024
      level: extended
      name: extension
      normalize: []
      short: File extension from the request url, excluding the leading dot.
      type: keyword
    url.fragment:
      dashed_name: url-fragment
      description: 'Portion of the url after the `#`, such as "top".

        The `#` is not part of the fragment.'
      flat_name: url.fragment
      ignore_above: 1024
      level: extended
      name: fragment
      normalize: []
      short: Portion of the url after the `#`.
      type: keyword
    url.full:
      dashed_name: url-full
      description: If full URLs are important to your use case, they should be stored
        in `url.full`, whether this field is reconstructed or present in the event
        source.
      example: https://www.elastic.co:443/search?q=elasticsearch#top
      flat_name: url.full
      level: extended
      multi_fields:
      - flat_name: url.full.text
        name: text
        type: match_only_text
      name: full
      normalize: []
      short: Full unparsed URL.
      type: wildcard
    url.original:
      dashed_name: url-original
      description: 'Unmodified original url as seen in the event source.

        Note that in network monitoring, the observed URL may be a full URL, whereas
        in access logs, the URL is often just represented as a path.

        This field is meant to represent the URL as it was observed, complete or not.'
      example: https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch
      flat_name: url.original
      level: extended
      multi_fields:
      - flat_name: url.original.text
        name: text
        type: match_only_text
      name: original
      normalize: []
      short: Unmodified original url as seen in the event source.
      type: wildcard
    url.password:
      dashed_name: url-password
      description: Password of the request.
      flat_name: url.password
      ignore_above: 1024
      level: extended
      name: password
      normalize: []
      short: Password of the request.
      type: keyword
    url.path:
      dashed_name: url-path
      description: Path of the request, such as "/search".
      flat_name: url.path
      level: extended
      name: path
      normalize: []
      short: Path of the request, such as "/search".
      type: wildcard
    url.port:
      dashed_name: url-port
      description: Port of the request, such as 443.
      example: 443
      flat_name: url.port
      format: string
      level: extended
      name: port
      normalize: []
      short: Port of the request, such as 443.
      type: long
    url.query:
      dashed_name: url-query
      description: 'The query field describes the query string of the request, such
        as "q=elasticsearch".

        The `?` is excluded from the query string. If a URL contains no `?`, there
        is no query field. If there is a `?` but no query, the query field exists
        with an empty string. The `exists` query can be used to differentiate between
        the two cases.'
      flat_name: url.query
      ignore_above: 1024
      level: extended
      name: query
      normalize: []
      short: Query string of the request.
      type: keyword
    url.registered_domain:
      dashed_name: url-registered-domain
      description: 'The highest registered url domain, stripped of the subdomain.

        For example, the registered domain for "foo.example.com" is "example.com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last two labels will not work well for TLDs such as "co.uk".'
      example: example.com
      flat_name: url.registered_domain
      ignore_above: 1024
      level: extended
      name: registered_domain
      normalize: []
      short: The highest registered url domain, stripped of the subdomain.
      type: keyword
    url.scheme:
      dashed_name: url-scheme
      description: 'Scheme of the request, such as "https".

        Note: The `:` is not part of the scheme.'
      example: https
      flat_name: url.scheme
      ignore_above: 1024
      level: extended
      name: scheme
      normalize: []
      short: Scheme of the url.
      type: keyword
    url.subdomain:
      dashed_name: url-subdomain
      description: 'The subdomain portion of a fully qualified domain name includes
        all of the names except the host name under the registered_domain.  In a partially
        qualified domain, or if the the qualification level of the full name cannot
        be determined, subdomain contains all of the names below the registered domain.

        For example the subdomain portion of "www.east.mydomain.co.uk" is "east".
        If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",
        the subdomain field should contain "sub2.sub1", with no trailing period.'
      example: east
      flat_name: url.subdomain
      ignore_above: 1024
      level: extended
      name: subdomain
      normalize: []
      short: The subdomain of the domain.
      type: keyword
    url.top_level_domain:
      dashed_name: url-top-level-domain
      description: 'The effective top level domain (eTLD), also known as the domain
        suffix, is the last part of the domain name. For example, the top level domain
        for example.com is "com".

        This value can be determined precisely with a list like the public suffix
        list (http://publicsuffix.org). Trying to approximate this by simply taking
        the last label will not work well for effective TLDs such as "co.uk".'
      example: co.uk
      flat_name: url.top_level_domain
      ignore_above: 1024
      level: extended
      name: top_level_domain
      normalize: []
      short: The effective top level domain (com, org, net, co.uk).
      type: keyword
    url.username:
      dashed_name: url-username
      description: Username of the request.
      flat_name: url.username
      ignore_above: 1024
      level: extended
      name: username
      normalize: []
      short: Username of the request.
      type: keyword
  group: 2
  name: url
  prefix: url.
  reusable:
    expected:
    - as: url
      at: threat.indicator
      full: threat.indicator.url
    - as: url
      at: threat.enrichments.indicator
      beta: Reusing the `url` fields in this location is currently considered beta.
      full: threat.enrichments.indicator.url
    top_level: true
  short: Fields that let you store URLs in various forms.
  title: URL
  type: group
user:
  description: 'The user fields describe information about the user that is relevant
    to the event.

    Fields can have one entry or multiple entries. If a user has more than one id,
    provide an array that includes all of them.'
  fields:
    user.id:
      dashed_name: user-id
      description: Unique identifier of the user.
      example: S-1-5-21-202424912787-2692429404-2351956786-1000
      flat_name: user.id
      ignore_above: 1024
      level: core
      name: id
      normalize: []
      short: Unique identifier of the user.
      type: keyword
    user.name:
      dashed_name: user-name
      description: Short name or login of the user.
      example: a.einstein
      flat_name: user.name
      ignore_above: 1024
      level: core
      multi_fields:
      - flat_name: user.name.text
        name: text
        type: match_only_text
      name: name
      normalize: []
      short: Short name or login of the user.
      type: keyword
    user.roles:
      dashed_name: user-roles
      description: Array of user roles at the time of the event.
      example: '["kibana_admin", "reporting_user"]'
      flat_name: user.roles
      ignore_above: 1024
      level: extended
      name: roles
      normalize:
      - array
      short: Array of user roles at the time of the event.
      type: keyword
  group: 2
  name: user
  nestings:
  - user.changes
  - user.effective
  - user.group
  - user.target
  prefix: user.
  reusable:
    expected:
    - as: user
      at: client
      full: client.user
    - as: user
      at: destination
      full: destination.user
    - as: user
      at: server
      full: server.user
    - as: user
      at: source
      full: source.user
    - as: target
      at: user
      full: user.target
      short_override: Targeted user of action taken.
    - as: effective
      at: user
      full: user.effective
      short_override: User whose privileges were assumed.
    - as: changes
      at: user
      full: user.changes
      short_override: Captures changes made to a user.
    top_level: true
  reused_here:
  - full: user.group
    schema_name: group
    short: User's group relevant to the event.
  - full: user.target
    schema_name: user
    short: Targeted user of action taken.
  - full: user.effective
    schema_name: user
    short: User whose privileges were assumed.
  - full: user.changes
    schema_name: user
    short: Captures changes made to a user.
  short: Fields to describe the user relevant to the event.
  title: User
  type: group
user_agent:
  description: 'The user_agent fields normally come from a browser request.

    They often show up in web service logs coming from the parsed user agent string.'
  fields:
    user_agent.original:
      dashed_name: user-agent-original
      description: Unparsed user_agent string.
      example: Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15
        (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1
      flat_name: user_agent.original
      ignore_above: 1024
      level: extended
      multi_fields:
      - flat_name: user_agent.original.text
        name: text
        type: match_only_text
      name: original
      normalize: []
      short: Unparsed user_agent string.
      type: keyword
  group: 2
  name: user_agent
  nestings:
  - user_agent.os
  prefix: user_agent.
  reused_here:
  - full: user_agent.os
    schema_name: os
    short: OS fields contain information about the operating system.
  short: Fields to describe a browser user_agent string.
  title: User agent
  type: group
