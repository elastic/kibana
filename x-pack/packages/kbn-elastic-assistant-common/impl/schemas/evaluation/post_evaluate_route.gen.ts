/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Post Evaluate API endpoint
 *   version: 1
 */

import { z } from 'zod';

export type OutputIndex = z.infer<typeof OutputIndex>;
export const OutputIndex = z.string().regex(/^.kibana-elastic-ai-assistant-/);

export type DatasetItem = z.infer<typeof DatasetItem>;
export const DatasetItem = z.object({
  id: z.string().optional(),
  input: z.string(),
  prediction: z.string().optional(),
  reference: z.string(),
  tags: z.array(z.string()).optional(),
});

export type Dataset = z.infer<typeof Dataset>;
export const Dataset = z.array(DatasetItem).default([]);

export type PostEvaluateBody = z.infer<typeof PostEvaluateBody>;
export const PostEvaluateBody = z.object({
  dataset: Dataset.optional(),
  evalPrompt: z.string().optional(),
});

export type PostEvaluateRequestQuery = z.infer<typeof PostEvaluateRequestQuery>;
export const PostEvaluateRequestQuery = z.object({
  /**
   * Agents parameter description
   */
  agents: z.string(),
  /**
   * Dataset Name parameter description
   */
  datasetName: z.string().optional(),
  /**
   * Evaluation Type parameter description
   */
  evaluationType: z.string().optional(),
  /**
   * Eval Model parameter description
   */
  evalModel: z.string().optional(),
  /**
   * Models parameter description
   */
  models: z.string(),
  /**
   * Output Index parameter description
   */
  outputIndex: OutputIndex,
  /**
   * Project Name parameter description
   */
  projectName: z.string().optional(),
  /**
   * Run Name parameter description
   */
  runName: z.string().optional(),
});
export type PostEvaluateRequestQueryInput = z.input<typeof PostEvaluateRequestQuery>;

export type PostEvaluateRequestBody = z.infer<typeof PostEvaluateRequestBody>;
export const PostEvaluateRequestBody = PostEvaluateBody;
export type PostEvaluateRequestBodyInput = z.input<typeof PostEvaluateRequestBody>;

export type PostEvaluateResponse = z.infer<typeof PostEvaluateResponse>;
export const PostEvaluateResponse = z.object({
  evaluationId: z.string(),
  success: z.boolean(),
});
