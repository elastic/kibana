/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Attack Discovery Attributes
 *   version: not applicable
 */

import { z } from 'zod';

import { NonEmptyString, User } from '../common_attributes.gen';
import { Replacements, ApiConfig } from '../conversations/common_attributes.gen';

/**
 * An attack discovery generated from one or more alerts
 */
export type AttackDiscovery = z.infer<typeof AttackDiscovery>;
export const AttackDiscovery = z.object({
  /**
   * The alert IDs that the attack discovery is based on
   */
  alertIds: z.array(z.string()),
  /**
   * UUID of attack discovery
   */
  id: z.string().optional(),
  /**
   * Details of the attack with bulleted markdown that always uses special syntax for field names and values from the source data.
   */
  detailsMarkdown: z.string(),
  /**
   * A short (no more than a sentence) summary of the attack discovery featuring only the host.name and user.name fields (when they are applicable), using the same syntax
   */
  entitySummaryMarkdown: z.string(),
  /**
   * An array of MITRE ATT&CK tactic for the attack discovery
   */
  mitreAttackTactics: z.array(z.string()).optional(),
  /**
   * A markdown summary of attack discovery, using the same syntax
   */
  summaryMarkdown: z.string(),
  /**
   * A title for the attack discovery, in plain text
   */
  title: z.string(),
  /**
   * The time the attack discovery was generated
   */
  timestamp: NonEmptyString,
});

/**
 * Array of attack discoveries
 */
export type AttackDiscoveries = z.infer<typeof AttackDiscoveries>;
export const AttackDiscoveries = z.array(AttackDiscovery);

/**
 * The status of the attack discovery.
 */
export type AttackDiscoveryStatus = z.infer<typeof AttackDiscoveryStatus>;
export const AttackDiscoveryStatus = z.enum(['running', 'succeeded', 'failed', 'canceled']);
export type AttackDiscoveryStatusEnum = typeof AttackDiscoveryStatus.enum;
export const AttackDiscoveryStatusEnum = AttackDiscoveryStatus.enum;

/**
 * Run durations for the attack discovery
 */
export type GenerationInterval = z.infer<typeof GenerationInterval>;
export const GenerationInterval = z.object({
  /**
   * The time the attack discovery was generated
   */
  date: z.string(),
  /**
   * The duration of the attack discovery generation
   */
  durationMs: z.number().int(),
});

export type AttackDiscoveryResponse = z.infer<typeof AttackDiscoveryResponse>;
export const AttackDiscoveryResponse = z.object({
  id: NonEmptyString,
  timestamp: NonEmptyString.optional(),
  /**
   * The last time attack discovery was updated.
   */
  updatedAt: z.string().optional(),
  /**
   * The number of alerts in the context.
   */
  alertsContextCount: z.number().int().optional(),
  /**
   * The time attack discovery was created.
   */
  createdAt: z.string(),
  replacements: Replacements.optional(),
  users: z.array(User),
  /**
   * The status of the attack discovery.
   */
  status: AttackDiscoveryStatus,
  /**
   * The attack discoveries.
   */
  attackDiscoveries: AttackDiscoveries,
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig,
  /**
   * Kibana space
   */
  namespace: z.string(),
  /**
   * The backing index required for update requests.
   */
  backingIndex: z.string(),
  /**
   * The most 5 recent generation intervals
   */
  generationIntervals: z.array(GenerationInterval),
  /**
   * The average generation interval in milliseconds
   */
  averageIntervalMs: z.number().int(),
  /**
   * The reason for a status of failed.
   */
  failureReason: z.string().optional(),
});

export type AttackDiscoveryUpdateProps = z.infer<typeof AttackDiscoveryUpdateProps>;
export const AttackDiscoveryUpdateProps = z.object({
  id: NonEmptyString,
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig.optional(),
  /**
   * The number of alerts in the context.
   */
  alertsContextCount: z.number().int().optional(),
  /**
   * The attack discoveries.
   */
  attackDiscoveries: AttackDiscoveries.optional(),
  /**
   * The status of the attack discovery.
   */
  status: AttackDiscoveryStatus,
  replacements: Replacements.optional(),
  /**
   * The most 5 recent generation intervals
   */
  generationIntervals: z.array(GenerationInterval).optional(),
  /**
   * The backing index required for update requests.
   */
  backingIndex: z.string(),
  /**
   * The reason for a status of failed.
   */
  failureReason: z.string().optional(),
});

export type AttackDiscoveryCreateProps = z.infer<typeof AttackDiscoveryCreateProps>;
export const AttackDiscoveryCreateProps = z.object({
  /**
   * The attack discovery id.
   */
  id: z.string().optional(),
  /**
   * The status of the attack discovery.
   */
  status: AttackDiscoveryStatus,
  /**
   * The number of alerts in the context.
   */
  alertsContextCount: z.number().int().optional(),
  /**
   * The attack discoveries.
   */
  attackDiscoveries: AttackDiscoveries,
  /**
   * LLM API configuration.
   */
  apiConfig: ApiConfig,
  replacements: Replacements.optional(),
});
