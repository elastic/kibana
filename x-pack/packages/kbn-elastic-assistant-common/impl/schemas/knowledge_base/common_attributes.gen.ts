/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { z } from 'zod';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Common Knowledge Base Attributes
 *   version: not applicable
 */

/**
 * A string that is not empty and does not contain only whitespace
 */
export type NonEmptyString = z.infer<typeof NonEmptyString>;
export const NonEmptyString = z
  .string()
  .min(1)
  .regex(/^(?! *$).+$/);

/**
 * A universally unique identifier
 */
export type UUID = z.infer<typeof UUID>;
export const UUID = z.string().uuid();

/**
 * Could be any string, not necessarily a UUID
 */
export type User = z.infer<typeof User>;
export const User = z.object({
  /**
   * User id
   */
  id: z.string().optional(),
  /**
   * User name
   */
  name: z.string().optional(),
});

/**
 * Metadata about an Knowledge Base Entry
 */
export type Metadata = z.infer<typeof Metadata>;
export const Metadata = z.object({
  /**
   * Knowledge Base resource name
   */
  kbResource: z.string(),
  /**
   * Original text content
   */
  source: z.string(),
  /**
   * Whether or not this resource should always be included
   */
  required: z.boolean(),
});

/**
 * Object containing Metadata.source embeddings and modelId used to create the embeddings
 */
export type Vector = z.infer<typeof Vector>;
export const Vector = z.object({
  /**
   * ID of the model used to create the embeddings
   */
  modelId: z.string(),
  /**
   * Tokens with their corresponding values
   */
  tokens: z.object({}).catchall(z.number()),
});

export type ErrorSchema = z.infer<typeof ErrorSchema>;
export const ErrorSchema = z
  .object({
    statusCode: z.number(),
    error: z.string(),
    message: z.string(),
  })
  .strict();

export type KnowledgeBaseEntryResponse = z.infer<typeof KnowledgeBaseEntryResponse>;
export const KnowledgeBaseEntryResponse = z.object({
  timestamp: NonEmptyString.optional(),
  id: z.union([UUID, NonEmptyString]),
  /**
   * Time the Knowledge Base Entry was created
   */
  createdAt: z.string(),
  /**
   * User who created the Knowledge Base Entry
   */
  createdBy: z.string().optional(),
  /**
   * Time the Knowledge Base Entry was last updated
   */
  updatedAt: z.string().optional(),
  /**
   * User who last updated the Knowledge Base Entry
   */
  updatedBy: z.string().optional(),
  users: z.array(User),
  /**
   * Metadata about the Knowledge Base Entry
   */
  metadata: Metadata.optional(),
  /**
   * Kibana space
   */
  namespace: z.string(),
  vector: Vector.optional(),
});

export type KnowledgeBaseEntryUpdateProps = z.infer<typeof KnowledgeBaseEntryUpdateProps>;
export const KnowledgeBaseEntryUpdateProps = z.object({
  id: z.union([UUID, NonEmptyString]),
  /**
   * Metadata about the Knowledge Base Entry
   */
  metadata: Metadata.optional(),
});

export type KnowledgeBaseEntryCreateProps = z.infer<typeof KnowledgeBaseEntryCreateProps>;
export const KnowledgeBaseEntryCreateProps = z.object({
  /**
   * Metadata about the Knowledge Base Entry
   */
  metadata: Metadata,
});
