/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Bulk Knowledge Base Actions API endpoint
 *   version: 2023-10-31
 */

import { z } from 'zod';

import {
  KnowledgeBaseEntryCreateProps,
  KnowledgeBaseEntryUpdateProps,
  KnowledgeBaseEntryResponse,
} from './common_attributes.gen';

export type KnowledgeBaseEntryBulkActionSkipReason = z.infer<
  typeof KnowledgeBaseEntryBulkActionSkipReason
>;
export const KnowledgeBaseEntryBulkActionSkipReason = z.literal(
  'KNOWLEDGE_BASE_ENTRY_NOT_MODIFIED'
);

export type KnowledgeBaseEntryBulkActionSkipResult = z.infer<
  typeof KnowledgeBaseEntryBulkActionSkipResult
>;
export const KnowledgeBaseEntryBulkActionSkipResult = z.object({
  id: z.string(),
  name: z.string().optional(),
  skip_reason: KnowledgeBaseEntryBulkActionSkipReason,
});

export type KnowledgeBaseEntryDetailsInError = z.infer<typeof KnowledgeBaseEntryDetailsInError>;
export const KnowledgeBaseEntryDetailsInError = z.object({
  id: z.string(),
  name: z.string().optional(),
});

export type NormalizedKnowledgeBaseEntryError = z.infer<typeof NormalizedKnowledgeBaseEntryError>;
export const NormalizedKnowledgeBaseEntryError = z.object({
  message: z.string(),
  statusCode: z.number().int(),
  err_code: z.string().optional(),
  knowledgeBaseEntries: z.array(KnowledgeBaseEntryDetailsInError),
});

export type KnowledgeBaseEntryBulkCrudActionResults = z.infer<
  typeof KnowledgeBaseEntryBulkCrudActionResults
>;
export const KnowledgeBaseEntryBulkCrudActionResults = z.object({
  updated: z.array(KnowledgeBaseEntryResponse),
  created: z.array(KnowledgeBaseEntryResponse),
  deleted: z.array(z.string()),
  skipped: z.array(KnowledgeBaseEntryBulkActionSkipResult),
});

export type KnowledgeBaseEntryBulkCrudActionSummary = z.infer<
  typeof KnowledgeBaseEntryBulkCrudActionSummary
>;
export const KnowledgeBaseEntryBulkCrudActionSummary = z.object({
  failed: z.number().int(),
  skipped: z.number().int(),
  succeeded: z.number().int(),
  total: z.number().int(),
});

export type KnowledgeBaseEntryBulkCrudActionResponse = z.infer<
  typeof KnowledgeBaseEntryBulkCrudActionResponse
>;
export const KnowledgeBaseEntryBulkCrudActionResponse = z.object({
  success: z.boolean().optional(),
  statusCode: z.number().int().optional(),
  message: z.string().optional(),
  knowledgeBaseEntriesCount: z.number().int().optional(),
  attributes: z.object({
    results: KnowledgeBaseEntryBulkCrudActionResults,
    summary: KnowledgeBaseEntryBulkCrudActionSummary,
    errors: z.array(NormalizedKnowledgeBaseEntryError).optional(),
  }),
});

export type KnowledgeBaseEntryBulkActionBase = z.infer<typeof KnowledgeBaseEntryBulkActionBase>;
export const KnowledgeBaseEntryBulkActionBase = z.object({
  /**
   * Query to filter Knowledge Base Entries
   */
  query: z.string().optional(),
  /**
   * Array of Knowledge base Entry IDs
   */
  ids: z.array(z.string()).min(1).optional(),
});

export type PerformKnowledgeBaseEntryBulkActionRequestBody = z.infer<
  typeof PerformKnowledgeBaseEntryBulkActionRequestBody
>;
export const PerformKnowledgeBaseEntryBulkActionRequestBody = z.object({
  delete: KnowledgeBaseEntryBulkActionBase.optional(),
  create: z.array(KnowledgeBaseEntryCreateProps).optional(),
  update: z.array(KnowledgeBaseEntryUpdateProps).optional(),
});
export type PerformKnowledgeBaseEntryBulkActionRequestBodyInput = z.input<
  typeof PerformKnowledgeBaseEntryBulkActionRequestBody
>;

export type PerformKnowledgeBaseEntryBulkActionResponse = z.infer<
  typeof PerformKnowledgeBaseEntryBulkActionResponse
>;
export const PerformKnowledgeBaseEntryBulkActionResponse = KnowledgeBaseEntryBulkCrudActionResponse;
