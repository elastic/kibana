/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { z } from 'zod';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Alerts insights API endpoint
 *   version: 1
 */

import { AnonymizationFieldResponse } from '../../anonymization_fields/bulk_crud_anonymization_fields_route.gen';
import { Replacements, TraceData } from '../../conversations/common_attributes.gen';

/**
 * An insight generated from one or more alerts
 */
export type AlertsInsight = z.infer<typeof AlertsInsight>;
export const AlertsInsight = z.object({
  /**
   * The alert IDs that the insight is based on
   */
  alertIds: z.array(z.string()),
  /**
   * A detailed insight with bulleted markdown that always uses special syntax for field names and values from the source data.
   */
  detailsMarkdown: z.string(),
  /**
   * A short (no more than a sentence) summary of the insight featuring only the host.name and user.name fields (when they are applicable), using the same syntax
   */
  entitySummaryMarkdown: z.string(),
  /**
   * An array of MITRE ATT&CK tactic for the insight
   */
  mitreAttackTactics: z.array(z.string()).optional(),
  /**
   * A markdown summary of insight, using the same syntax
   */
  summaryMarkdown: z.string(),
  /**
   * A title for the insight, in plain text
   */
  title: z.string(),
});

export type AlertsInsightsPostRequestBody = z.infer<typeof AlertsInsightsPostRequestBody>;
export const AlertsInsightsPostRequestBody = z.object({
  alertsIndexPattern: z.string(),
  anonymizationFields: z.array(AnonymizationFieldResponse),
  connectorId: z.string(),
  actionTypeId: z.string(),
  langSmithProject: z.string().optional(),
  langSmithApiKey: z.string().optional(),
  model: z.string().optional(),
  replacements: Replacements.optional(),
  size: z.number(),
  subAction: z.enum(['invokeAI', 'invokeStream']),
});
export type AlertsInsightsPostRequestBodyInput = z.input<typeof AlertsInsightsPostRequestBody>;

export type AlertsInsightsPostResponse = z.infer<typeof AlertsInsightsPostResponse>;
export const AlertsInsightsPostResponse = z.object({
  connector_id: z.string().optional(),
  insights: z.array(AlertsInsight).optional(),
  replacements: Replacements.optional(),
  status: z.string().optional(),
  trace_data: TraceData.optional(),
});
