/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { z } from 'zod';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Chat Complete API endpoint
 *   version: 2023-10-31
 */

import { NonEmptyString } from '../common_attributes.gen';

export type RootContext = z.infer<typeof RootContext>;
export const RootContext = z.literal('security');

/**
 * Message role.
 */
export type ChatMessageRole = z.infer<typeof ChatMessageRole>;
export const ChatMessageRole = z.enum(['system', 'user', 'assistant', 'function', 'elastic']);
export type ChatMessageRoleEnum = typeof ChatMessageRole.enum;
export const ChatMessageRoleEnum = ChatMessageRole.enum;

/**
 * Message role.
 */
export type TriggerType = z.infer<typeof TriggerType>;
export const TriggerType = z.enum(['user', 'assistant', 'elastic']);
export type TriggerTypeEnum = typeof TriggerType.enum;
export const TriggerTypeEnum = TriggerType.enum;

export type TriggerArguments = z.infer<typeof TriggerArguments>;
export const TriggerArguments = z.object({}).catchall(z.unknown());

export type TriggerData = z.infer<typeof TriggerData>;
export const TriggerData = z.object({}).catchall(z.unknown());

/**
 * AI assistant message.
 */
export type InstructionsObject = z.infer<typeof InstructionsObject>;
export const InstructionsObject = z.object({
  doc_id: z.string().optional(),
  text: z.string().optional(),
});

/**
 * AI assistant message.
 */
export type FunctionCall = z.infer<typeof FunctionCall>;
export const FunctionCall = z.object({
  /**
   * Trigger type.
   */
  trigger: TriggerType,
  arguments: TriggerArguments.optional(),
  data: TriggerData.optional(),
});

export type MessageData = z.infer<typeof MessageData>;
export const MessageData = z.object({}).catchall(z.unknown());

/**
 * AI assistant message.
 */
export type ChatMessage = z.infer<typeof ChatMessage>;
export const ChatMessage = z.object({
  /**
   * Message content.
   */
  content: z.string().optional(),
  /**
   * Message name.
   */
  name: z.string().optional(),
  /**
   * Function definition.
   */
  function_call: FunctionCall.optional(),
  /**
   * Message role.
   */
  role: ChatMessageRole,
  /**
   * The timestamp message was sent or received.
   */
  '@timestamp': NonEmptyString,
  /**
   * ECS objects array to attach to the context of the message.
   */
  data: z.array(MessageData).optional(),
  fields_to_anonymize: z.array(z.string()).optional(),
});

export type ChatCompleteProps = z.infer<typeof ChatCompleteProps>;
export const ChatCompleteProps = z.object({
  /**
   * Solution context.
   */
  context: RootContext.optional(),
  conversationId: z.string().optional(),
  responseLanguage: z.string().optional(),
  langSmithProject: z.string().optional(),
  langSmithApiKey: z.string().optional(),
  disableFunctions: z.boolean().optional(),
  connectorId: z.string(),
  model: z.string().optional(),
  title: z.string().optional(),
  persist: z.boolean(),
  messages: z.array(ChatMessage),
  instructions: z.array(z.union([InstructionsObject, z.string()])).optional(),
});

export type ChatCompleteRequestBody = z.infer<typeof ChatCompleteRequestBody>;
export const ChatCompleteRequestBody = ChatCompleteProps;
export type ChatCompleteRequestBodyInput = z.input<typeof ChatCompleteRequestBody>;
