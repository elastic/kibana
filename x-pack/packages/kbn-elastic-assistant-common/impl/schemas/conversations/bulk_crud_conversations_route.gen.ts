/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */

import { z } from 'zod';

/*
 * NOTICE: Do not edit this file manually.
 * This file is automatically generated by the OpenAPI Generator, @kbn/openapi-generator.
 *
 * info:
 *   title: Bulk Actions API endpoint
 *   version: 2023-10-31
 */

import {
  ConversationCreateProps,
  ConversationUpdateProps,
  ConversationResponse,
} from './common_attributes.gen';

export type BulkActionSkipReason = z.infer<typeof BulkActionSkipReason>;
export const BulkActionSkipReason = z.literal('CONVERSATION_NOT_MODIFIED');

export type BulkActionSkipResult = z.infer<typeof BulkActionSkipResult>;
export const BulkActionSkipResult = z.object({
  id: z.string(),
  name: z.string().optional(),
  skip_reason: BulkActionSkipReason,
});

export type ConversationDetailsInError = z.infer<typeof ConversationDetailsInError>;
export const ConversationDetailsInError = z.object({
  id: z.string(),
  name: z.string().optional(),
});

export type NormalizedConversationError = z.infer<typeof NormalizedConversationError>;
export const NormalizedConversationError = z.object({
  message: z.string(),
  status_code: z.number().int(),
  err_code: z.string().optional(),
  conversations: z.array(ConversationDetailsInError),
});

export type BulkCrudActionResults = z.infer<typeof BulkCrudActionResults>;
export const BulkCrudActionResults = z.object({
  updated: z.array(ConversationResponse),
  created: z.array(ConversationResponse),
  deleted: z.array(z.string()),
  skipped: z.array(BulkActionSkipResult),
});

export type BulkCrudActionSummary = z.infer<typeof BulkCrudActionSummary>;
export const BulkCrudActionSummary = z.object({
  failed: z.number().int(),
  skipped: z.number().int(),
  succeeded: z.number().int(),
  total: z.number().int(),
});

export type BulkCrudActionResponse = z.infer<typeof BulkCrudActionResponse>;
export const BulkCrudActionResponse = z.object({
  success: z.boolean().optional(),
  status_code: z.number().int().optional(),
  message: z.string().optional(),
  conversations_count: z.number().int().optional(),
  attributes: z.object({
    results: BulkCrudActionResults,
    summary: BulkCrudActionSummary,
    errors: z.array(NormalizedConversationError).optional(),
  }),
});

export type BulkActionBase = z.infer<typeof BulkActionBase>;
export const BulkActionBase = z.object({
  /**
   * Query to filter conversations
   */
  query: z.string().optional(),
  /**
   * Array of conversation IDs
   */
  ids: z.array(z.string()).min(1).optional(),
});

export type PerformBulkActionRequestBody = z.infer<typeof PerformBulkActionRequestBody>;
export const PerformBulkActionRequestBody = z.object({
  delete: BulkActionBase.optional(),
  create: z.array(ConversationCreateProps).optional(),
  update: z.array(ConversationUpdateProps).optional(),
});
export type PerformBulkActionRequestBodyInput = z.input<typeof PerformBulkActionRequestBody>;

export type PerformBulkActionResponse = z.infer<typeof PerformBulkActionResponse>;
export const PerformBulkActionResponse = BulkCrudActionResponse;
