/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

/**
 * An instance of the unmodified schema exported from https://github.com/elastic/ecs
 * A map of `EcsNamespace.name` `->` `EcsNamespace`
 *
 * - NOTE: This instance does NOT include "virtual (non-spec)" ECS fields e.g `_id`.
 * - NOTE: This instance does NOT include "mappings" from ECS fields, to `ECS`
 *   instances e.g. `@timestamp` to  `timestamp`
 */

import { EcsSchema } from '../type';

export const ecsSchema: EcsSchema = {
  agent: {
    description:
      'The agent fields contain the data about the software entity, if any,\nthat collects, detects, or observes events on a host, or takes measurements on\na host.\n\nExamples include Beats. Agents may also run on observers. ECS agent.* fields shall\nbe populated with details of the agent running on the host or observer where the\nevent happened or the measurement was taken.',
    fields: {
      ephemeral_id: {
        dashed_name: 'agent-ephemeral-id',
        description:
          'Ephemeral identifier of this agent (if one exists).\n\nThis id normally changes across restarts, but `agent.id` does not.',
        example: '8a4f500f',
        flat_name: 'agent.ephemeral_id',
        ignore_above: 1024,
        level: 'extended',
        name: 'ephemeral_id',
        normalize: [],
        order: 4,
        short: 'Ephemeral identifier of this agent.',
        type: 'keyword',
      },
      id: {
        dashed_name: 'agent-id',
        description:
          'Unique identifier of this agent (if one exists).\n\nExample: For Beats this would be beat.id.',
        example: '8a4f500d',
        flat_name: 'agent.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 3,
        short: 'Unique identifier of this agent.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'agent-name',
        description:
          'Custom name of the agent.\n\nThis is a name that can be given to an agent. This can be helpful if for example\ntwo Filebeat instances are running on the same host but a human readable separation\nis needed on which Filebeat instance data is coming from.\n\nIf no name is given, the name is often left empty.',
        example: 'foo',
        flat_name: 'agent.name',
        ignore_above: 1024,
        level: 'core',
        name: 'name',
        normalize: [],
        order: 1,
        short: 'Custom name of the agent.',
        type: 'keyword',
      },
      type: {
        dashed_name: 'agent-type',
        description:
          'Type of the agent.\n\nThe agent type stays always the same and should be given by the agent used.\nIn case of Filebeat the agent would always be Filebeat also if two Filebeat\ninstances are run on the same machine.',
        example: 'filebeat',
        flat_name: 'agent.type',
        ignore_above: 1024,
        level: 'core',
        name: 'type',
        normalize: [],
        order: 2,
        short: 'Type of the agent.',
        type: 'keyword',
      },
      version: {
        dashed_name: 'agent-version',
        description: 'Version of the agent.',
        example: '6.0.0-rc2',
        flat_name: 'agent.version',
        ignore_above: 1024,
        level: 'core',
        name: 'version',
        normalize: [],
        order: 0,
        short: 'Version of the agent.',
        type: 'keyword',
      },
    },
    footnote:
      'Examples: In the case of Beats for logs, the agent.name is filebeat.\nFor APM, it is the agent running in the app/service. The agent information does\nnot change if data is sent through queuing systems like Kafka, Redis, or processing\nsystems such as Logstash or APM Server.',
    group: 2,
    name: 'agent',
    prefix: 'agent.',
    short: 'Fields about the monitoring agent.',
    title: 'Agent',
    type: 'group',
  },
  as: {
    description:
      'An autonomous system (AS) is a collection of connected Internet Protocol\n(IP) routing prefixes under the control of one or more network operators on behalf\nof a single administrative entity or domain that presents a common, clearly defined\nrouting policy to the internet.',
    fields: {
      number: {
        dashed_name: 'as-number',
        description:
          'Unique number allocated to the autonomous system. The autonomous\nsystem number (ASN) uniquely identifies each network on the Internet.',
        example: 15169,
        flat_name: 'as.number',
        level: 'extended',
        name: 'number',
        normalize: [],
        order: 0,
        short:
          'Unique number allocated to the autonomous system. The autonomous system\nnumber (ASN) uniquely identifies each network on the Internet.',
        type: 'long',
      },
      'organization.name': {
        dashed_name: 'as-organization-name',
        description: 'Organization name.',
        example: 'Google LLC',
        flat_name: 'as.organization.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'as.organization.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'organization.name',
        normalize: [],
        order: 1,
        short: 'Organization name.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'as',
    prefix: 'as.',
    reusable: {
      expected: ['client', 'destination', 'server', 'source'],
      top_level: false,
    },
    short: 'Fields describing an Autonomous System (Internet routing prefix).',
    title: 'Autonomous System',
    type: 'group',
  },
  base: {
    description:
      'The `base` field set contains all fields which are on the top level.\nThese fields are common across all types of events.',
    fields: {
      '@timestamp': {
        dashed_name: '@timestamp',
        description:
          'Date/time when the event originated.\n\nThis is the date/time extracted from the event, typically representing when\nthe event was generated by the source.\n\nIf the event source has no original timestamp, this value is typically populated\nby the first time the event was received by the pipeline.\n\nRequired field for all events.',
        example: '2016-05-23T08:05:34.853Z',
        flat_name: '@timestamp',
        level: 'core',
        name: '@timestamp',
        normalize: [],
        order: 0,
        required: true,
        short: 'Date/time when the event originated.',
        type: 'date',
      },
      labels: {
        dashed_name: 'labels',
        description:
          'Custom key/value pairs.\n\nCan be used to add meta information to events. Should not contain nested objects.\nAll values are stored as keyword.\n\nExample: `docker` and `k8s` labels.',
        example: '{"application": "foo-bar", "env": "production"}',
        flat_name: 'labels',
        level: 'core',
        name: 'labels',
        normalize: [],
        object_type: 'keyword',
        order: 2,
        short: 'Custom key/value pairs.',
        type: 'object',
      },
      message: {
        dashed_name: 'message',
        description:
          'For log events the message field contains the log message, optimized\nfor viewing in a log viewer.\n\nFor structured logs without an original message field, other fields can be\nconcatenated to form a human-readable summary of the event.\n\nIf multiple messages exist, they can be combined into one message.',
        example: 'Hello World',
        flat_name: 'message',
        level: 'core',
        name: 'message',
        normalize: [],
        norms: false,
        order: 3,
        short: 'Log message optimized for viewing in a log viewer.',
        type: 'text',
      },
      tags: {
        dashed_name: 'tags',
        description: 'List of keywords used to tag each event.',
        example: '["production", "env2"]',
        flat_name: 'tags',
        ignore_above: 1024,
        level: 'core',
        name: 'tags',
        normalize: ['array'],
        order: 1,
        short: 'List of keywords used to tag each event.',
        type: 'keyword',
      },
    },
    group: 1,
    name: 'base',
    prefix: '',
    root: true,
    short: 'All fields defined directly at the top level',
    title: 'Base',
    type: 'group',
  },
  client: {
    description:
      'A client is defined as the initiator of a network connection for events\nregarding sessions, connections, or bidirectional flow records.\n\nFor TCP events, the client is the initiator of the TCP connection that sends the\nSYN packet(s). For other protocols, the client is generally the initiator or requestor\nin the network transaction. Some systems use the term "originator" to refer the\nclient in TCP connections. The client fields describe details about the system\nacting as the client in the network event. Client fields are usually populated\nin conjunction with server fields. Client fields are generally not populated for\npacket-level events.\n\nClient / server representations can add semantic context to an exchange, which\nis helpful to visualize the data in certain situations. If your context falls\nin that category, you should still ensure that source and destination are filled\nappropriately.',
    fields: {
      address: {
        dashed_name: 'client-address',
        description:
          'Some event client addresses are defined ambiguously. The event\nwill sometimes list an IP, a domain or a unix socket.  You should always store\nthe raw address in the `.address` field.\n\nThen it should be duplicated to `.ip` or `.domain`, depending on which one\nit is.',
        flat_name: 'client.address',
        ignore_above: 1024,
        level: 'extended',
        name: 'address',
        normalize: [],
        order: 0,
        short: 'Client network address.',
        type: 'keyword',
      },
      'as.number': {
        dashed_name: 'client-as-number',
        description:
          'Unique number allocated to the autonomous system. The autonomous\nsystem number (ASN) uniquely identifies each network on the Internet.',
        example: 15169,
        flat_name: 'client.as.number',
        level: 'extended',
        name: 'number',
        normalize: [],
        order: 0,
        original_fieldset: 'as',
        short:
          'Unique number allocated to the autonomous system. The autonomous system\nnumber (ASN) uniquely identifies each network on the Internet.',
        type: 'long',
      },
      'as.organization.name': {
        dashed_name: 'client-as-organization-name',
        description: 'Organization name.',
        example: 'Google LLC',
        flat_name: 'client.as.organization.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'client.as.organization.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'organization.name',
        normalize: [],
        order: 1,
        original_fieldset: 'as',
        short: 'Organization name.',
        type: 'keyword',
      },
      bytes: {
        dashed_name: 'client-bytes',
        description: 'Bytes sent from the client to the server.',
        example: 184,
        flat_name: 'client.bytes',
        format: 'bytes',
        level: 'core',
        name: 'bytes',
        normalize: [],
        order: 7,
        short: 'Bytes sent from the client to the server.',
        type: 'long',
      },
      domain: {
        dashed_name: 'client-domain',
        description: 'Client domain.',
        flat_name: 'client.domain',
        ignore_above: 1024,
        level: 'core',
        name: 'domain',
        normalize: [],
        order: 4,
        short: 'Client domain.',
        type: 'keyword',
      },
      'geo.city_name': {
        dashed_name: 'client-geo-city-name',
        description: 'City name.',
        example: 'Montreal',
        flat_name: 'client.geo.city_name',
        ignore_above: 1024,
        level: 'core',
        name: 'city_name',
        normalize: [],
        order: 4,
        original_fieldset: 'geo',
        short: 'City name.',
        type: 'keyword',
      },
      'geo.continent_name': {
        dashed_name: 'client-geo-continent-name',
        description: 'Name of the continent.',
        example: 'North America',
        flat_name: 'client.geo.continent_name',
        ignore_above: 1024,
        level: 'core',
        name: 'continent_name',
        normalize: [],
        order: 1,
        original_fieldset: 'geo',
        short: 'Name of the continent.',
        type: 'keyword',
      },
      'geo.country_iso_code': {
        dashed_name: 'client-geo-country-iso-code',
        description: 'Country ISO code.',
        example: 'CA',
        flat_name: 'client.geo.country_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'country_iso_code',
        normalize: [],
        order: 5,
        original_fieldset: 'geo',
        short: 'Country ISO code.',
        type: 'keyword',
      },
      'geo.country_name': {
        dashed_name: 'client-geo-country-name',
        description: 'Country name.',
        example: 'Canada',
        flat_name: 'client.geo.country_name',
        ignore_above: 1024,
        level: 'core',
        name: 'country_name',
        normalize: [],
        order: 2,
        original_fieldset: 'geo',
        short: 'Country name.',
        type: 'keyword',
      },
      'geo.location': {
        dashed_name: 'client-geo-location',
        description: 'Longitude and latitude.',
        example: '{ "lon": -73.614830, "lat": 45.505918 }',
        flat_name: 'client.geo.location',
        level: 'core',
        name: 'location',
        normalize: [],
        order: 0,
        original_fieldset: 'geo',
        short: 'Longitude and latitude.',
        type: 'geo_point',
      },
      'geo.name': {
        dashed_name: 'client-geo-name',
        description:
          'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
        example: 'boston-dc',
        flat_name: 'client.geo.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 7,
        original_fieldset: 'geo',
        short: 'User-defined description of a location.',
        type: 'keyword',
      },
      'geo.region_iso_code': {
        dashed_name: 'client-geo-region-iso-code',
        description: 'Region ISO code.',
        example: 'CA-QC',
        flat_name: 'client.geo.region_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'region_iso_code',
        normalize: [],
        order: 6,
        original_fieldset: 'geo',
        short: 'Region ISO code.',
        type: 'keyword',
      },
      'geo.region_name': {
        dashed_name: 'client-geo-region-name',
        description: 'Region name.',
        example: 'Quebec',
        flat_name: 'client.geo.region_name',
        ignore_above: 1024,
        level: 'core',
        name: 'region_name',
        normalize: [],
        order: 3,
        original_fieldset: 'geo',
        short: 'Region name.',
        type: 'keyword',
      },
      ip: {
        dashed_name: 'client-ip',
        description: 'IP address of the client (IPv4 or IPv6).',
        flat_name: 'client.ip',
        level: 'core',
        name: 'ip',
        normalize: [],
        order: 1,
        short: 'IP address of the client.',
        type: 'ip',
      },
      mac: {
        dashed_name: 'client-mac',
        description: 'MAC address of the client.',
        flat_name: 'client.mac',
        ignore_above: 1024,
        level: 'core',
        name: 'mac',
        normalize: [],
        order: 3,
        short: 'MAC address of the client.',
        type: 'keyword',
      },
      'nat.ip': {
        dashed_name: 'client-nat-ip',
        description:
          'Translated IP of source based NAT sessions (e.g. internal client\nto internet).\n\nTypically connections traversing load balancers, firewalls, or routers.',
        flat_name: 'client.nat.ip',
        level: 'extended',
        name: 'nat.ip',
        normalize: [],
        order: 9,
        short: 'Client NAT ip address',
        type: 'ip',
      },
      'nat.port': {
        dashed_name: 'client-nat-port',
        description:
          'Translated port of source based NAT sessions (e.g. internal client\nto internet).\n\nTypically connections traversing load balancers, firewalls, or routers.',
        flat_name: 'client.nat.port',
        format: 'string',
        level: 'extended',
        name: 'nat.port',
        normalize: [],
        order: 10,
        short: 'Client NAT port',
        type: 'long',
      },
      packets: {
        dashed_name: 'client-packets',
        description: 'Packets sent from the client to the server.',
        example: 12,
        flat_name: 'client.packets',
        level: 'core',
        name: 'packets',
        normalize: [],
        order: 8,
        short: 'Packets sent from the client to the server.',
        type: 'long',
      },
      port: {
        dashed_name: 'client-port',
        description: 'Port of the client.',
        flat_name: 'client.port',
        format: 'string',
        level: 'core',
        name: 'port',
        normalize: [],
        order: 2,
        short: 'Port of the client.',
        type: 'long',
      },
      registered_domain: {
        dashed_name: 'client-registered-domain',
        description:
          'The highest registered client domain, stripped of the subdomain.\n\nFor example, the registered domain for "foo.google.com" is "google.com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last two labels will not work well for TLDs such as "co.uk".',
        example: 'google.com',
        flat_name: 'client.registered_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'registered_domain',
        normalize: [],
        order: 5,
        short: 'The highest registered client domain, stripped of the subdomain.',
        type: 'keyword',
      },
      top_level_domain: {
        dashed_name: 'client-top-level-domain',
        description:
          'The effective top level domain (eTLD), also known as the domain\nsuffix, is the last part of the domain name. For example, the top level domain\nfor google.com is "com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last label will not work well for effective TLDs such as "co.uk".',
        example: 'co.uk',
        flat_name: 'client.top_level_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'top_level_domain',
        normalize: [],
        order: 6,
        short: 'The effective top level domain (com, org, net, co.uk).',
        type: 'keyword',
      },
      'user.domain': {
        dashed_name: 'client-user-domain',
        description:
          'Name of the directory the user is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'client.user.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 5,
        original_fieldset: 'user',
        short: 'Name of the directory the user is a member of.',
        type: 'keyword',
      },
      'user.email': {
        dashed_name: 'client-user-email',
        description: 'User email address.',
        flat_name: 'client.user.email',
        ignore_above: 1024,
        level: 'extended',
        name: 'email',
        normalize: [],
        order: 3,
        original_fieldset: 'user',
        short: 'User email address.',
        type: 'keyword',
      },
      'user.full_name': {
        dashed_name: 'client-user-full-name',
        description: "User's full name, if available.",
        example: 'Albert Einstein',
        flat_name: 'client.user.full_name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'client.user.full_name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full_name',
        normalize: [],
        order: 2,
        original_fieldset: 'user',
        short: "User's full name, if available.",
        type: 'keyword',
      },
      'user.group.domain': {
        dashed_name: 'client-user-group-domain',
        description:
          'Name of the directory the group is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'client.user.group.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 2,
        original_fieldset: 'group',
        short: 'Name of the directory the group is a member of.',
        type: 'keyword',
      },
      'user.group.id': {
        dashed_name: 'client-user-group-id',
        description: 'Unique identifier for the group on the system/platform.',
        flat_name: 'client.user.group.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'group',
        short: 'Unique identifier for the group on the system/platform.',
        type: 'keyword',
      },
      'user.group.name': {
        dashed_name: 'client-user-group-name',
        description: 'Name of the group.',
        flat_name: 'client.user.group.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'group',
        short: 'Name of the group.',
        type: 'keyword',
      },
      'user.hash': {
        dashed_name: 'client-user-hash',
        description:
          'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
        flat_name: 'client.user.hash',
        ignore_above: 1024,
        level: 'extended',
        name: 'hash',
        normalize: [],
        order: 4,
        original_fieldset: 'user',
        short: 'Unique user hash to correlate information for a user in anonymized form.',
        type: 'keyword',
      },
      'user.id': {
        dashed_name: 'client-user-id',
        description: 'Unique identifier of the user.',
        flat_name: 'client.user.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'user',
        short: 'Unique identifier of the user.',
        type: 'keyword',
      },
      'user.name': {
        dashed_name: 'client-user-name',
        description: 'Short name or login of the user.',
        example: 'albert',
        flat_name: 'client.user.name',
        ignore_above: 1024,
        level: 'core',
        multi_fields: [
          {
            flat_name: 'client.user.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'user',
        short: 'Short name or login of the user.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'client',
    nestings: ['as', 'geo', 'user'],
    prefix: 'client.',
    short: 'Fields about the client side of a network connection, used with server.',
    title: 'Client',
    type: 'group',
  },
  cloud: {
    description: 'Fields related to the cloud or infrastructure the events are coming\nfrom.',
    fields: {
      'account.id': {
        dashed_name: 'cloud-account-id',
        description:
          'The cloud account or organization id used to identify different\nentities in a multi-tenant environment.\n\nExamples: AWS account id, Google Cloud ORG Id, or other unique identifier.',
        example: 666777888999,
        flat_name: 'cloud.account.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'account.id',
        normalize: [],
        order: 6,
        short: 'The cloud account or organization id.',
        type: 'keyword',
      },
      availability_zone: {
        dashed_name: 'cloud-availability-zone',
        description: 'Availability zone in which this host is running.',
        example: 'us-east-1c',
        flat_name: 'cloud.availability_zone',
        ignore_above: 1024,
        level: 'extended',
        name: 'availability_zone',
        normalize: [],
        order: 1,
        short: 'Availability zone in which this host is running.',
        type: 'keyword',
      },
      'instance.id': {
        dashed_name: 'cloud-instance-id',
        description: 'Instance ID of the host machine.',
        example: 'i-1234567890abcdef0',
        flat_name: 'cloud.instance.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'instance.id',
        normalize: [],
        order: 3,
        short: 'Instance ID of the host machine.',
        type: 'keyword',
      },
      'instance.name': {
        dashed_name: 'cloud-instance-name',
        description: 'Instance name of the host machine.',
        flat_name: 'cloud.instance.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'instance.name',
        normalize: [],
        order: 4,
        short: 'Instance name of the host machine.',
        type: 'keyword',
      },
      'machine.type': {
        dashed_name: 'cloud-machine-type',
        description: 'Machine type of the host machine.',
        example: 't2.medium',
        flat_name: 'cloud.machine.type',
        ignore_above: 1024,
        level: 'extended',
        name: 'machine.type',
        normalize: [],
        order: 5,
        short: 'Machine type of the host machine.',
        type: 'keyword',
      },
      provider: {
        dashed_name: 'cloud-provider',
        description:
          'Name of the cloud provider. Example values are aws, azure, gcp,\nor digitalocean.',
        example: 'aws',
        flat_name: 'cloud.provider',
        ignore_above: 1024,
        level: 'extended',
        name: 'provider',
        normalize: [],
        order: 0,
        short: 'Name of the cloud provider.',
        type: 'keyword',
      },
      region: {
        dashed_name: 'cloud-region',
        description: 'Region in which this host is running.',
        example: 'us-east-1',
        flat_name: 'cloud.region',
        ignore_above: 1024,
        level: 'extended',
        name: 'region',
        normalize: [],
        order: 2,
        short: 'Region in which this host is running.',
        type: 'keyword',
      },
    },
    footnote:
      'Examples: If Metricbeat is running on an EC2 host and fetches data from\nits host, the cloud info contains the data about this machine. If Metricbeat runs\non a remote machine outside the cloud and fetches data from a service running\nin the cloud, the field contains cloud data from the machine the service is running\non.',
    group: 2,
    name: 'cloud',
    prefix: 'cloud.',
    short: 'Fields about the cloud resource.',
    title: 'Cloud',
    type: 'group',
  },
  code_signature: {
    description: 'These fields contain information about binary code signatures.',
    fields: {
      exists: {
        dashed_name: 'code-signature-exists',
        description: 'Boolean to capture if a signature is present.',
        example: 'true',
        flat_name: 'code_signature.exists',
        level: 'core',
        name: 'exists',
        normalize: [],
        order: 0,
        short: 'Boolean to capture if a signature is present.',
        type: 'boolean',
      },
      status: {
        dashed_name: 'code-signature-status',
        description:
          'Additional information about the certificate status.\n\nThis is useful for logging cryptographic errors with the certificate validity\nor trust status. Leave unpopulated if the validity or trust of the certificate\nwas unchecked.',
        example: 'ERROR_UNTRUSTED_ROOT',
        flat_name: 'code_signature.status',
        ignore_above: 1024,
        level: 'extended',
        name: 'status',
        normalize: [],
        order: 4,
        short: 'Additional information about the certificate status.',
        type: 'keyword',
      },
      subject_name: {
        dashed_name: 'code-signature-subject-name',
        description: 'Subject name of the code signer',
        example: 'Microsoft Corporation',
        flat_name: 'code_signature.subject_name',
        ignore_above: 1024,
        level: 'core',
        name: 'subject_name',
        normalize: [],
        order: 1,
        short: 'Subject name of the code signer',
        type: 'keyword',
      },
      trusted: {
        dashed_name: 'code-signature-trusted',
        description:
          'Stores the trust status of the certificate chain.\n\nValidating the trust of the certificate chain may be complicated, and this\nfield should only be populated by tools that actively check the status.',
        example: 'true',
        flat_name: 'code_signature.trusted',
        level: 'extended',
        name: 'trusted',
        normalize: [],
        order: 3,
        short: 'Stores the trust status of the certificate chain.',
        type: 'boolean',
      },
      valid: {
        dashed_name: 'code-signature-valid',
        description:
          'Boolean to capture if the digital signature is verified against\nthe binary content.\n\nLeave unpopulated if a certificate was unchecked.',
        example: 'true',
        flat_name: 'code_signature.valid',
        level: 'extended',
        name: 'valid',
        normalize: [],
        order: 2,
        short:
          'Boolean to capture if the digital signature is verified against the binary\ncontent.',
        type: 'boolean',
      },
    },
    group: 2,
    name: 'code_signature',
    prefix: 'code_signature.',
    reusable: {
      expected: ['file', 'process', 'process.parent', 'dll'],
      top_level: false,
    },
    short: 'These fields contain information about binary code signatures.',
    title: 'Code Signature',
    type: 'group',
  },
  container: {
    description:
      'Container fields are used for meta information about the specific\ncontainer that is the source of information.\n\nThese fields help correlate data based containers from any runtime.',
    fields: {
      id: {
        dashed_name: 'container-id',
        description: 'Unique container id.',
        flat_name: 'container.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 1,
        short: 'Unique container id.',
        type: 'keyword',
      },
      'image.name': {
        dashed_name: 'container-image-name',
        description: 'Name of the image the container was built on.',
        flat_name: 'container.image.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'image.name',
        normalize: [],
        order: 2,
        short: 'Name of the image the container was built on.',
        type: 'keyword',
      },
      'image.tag': {
        dashed_name: 'container-image-tag',
        description: 'Container image tags.',
        flat_name: 'container.image.tag',
        ignore_above: 1024,
        level: 'extended',
        name: 'image.tag',
        normalize: ['array'],
        order: 3,
        short: 'Container image tags.',
        type: 'keyword',
      },
      labels: {
        dashed_name: 'container-labels',
        description: 'Image labels.',
        flat_name: 'container.labels',
        level: 'extended',
        name: 'labels',
        normalize: [],
        object_type: 'keyword',
        order: 5,
        short: 'Image labels.',
        type: 'object',
      },
      name: {
        dashed_name: 'container-name',
        description: 'Container name.',
        flat_name: 'container.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 4,
        short: 'Container name.',
        type: 'keyword',
      },
      runtime: {
        dashed_name: 'container-runtime',
        description: 'Runtime managing this container.',
        example: 'docker',
        flat_name: 'container.runtime',
        ignore_above: 1024,
        level: 'extended',
        name: 'runtime',
        normalize: [],
        order: 0,
        short: 'Runtime managing this container.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'container',
    prefix: 'container.',
    short: 'Fields describing the container that generated this event.',
    title: 'Container',
    type: 'group',
  },
  destination: {
    description:
      'Destination fields describe details about the destination of a packet/event.\n\nDestination fields are usually populated in conjunction with source fields.',
    fields: {
      address: {
        dashed_name: 'destination-address',
        description:
          'Some event destination addresses are defined ambiguously. The\nevent will sometimes list an IP, a domain or a unix socket.  You should always\nstore the raw address in the `.address` field.\n\nThen it should be duplicated to `.ip` or `.domain`, depending on which one\nit is.',
        flat_name: 'destination.address',
        ignore_above: 1024,
        level: 'extended',
        name: 'address',
        normalize: [],
        order: 0,
        short: 'Destination network address.',
        type: 'keyword',
      },
      'as.number': {
        dashed_name: 'destination-as-number',
        description:
          'Unique number allocated to the autonomous system. The autonomous\nsystem number (ASN) uniquely identifies each network on the Internet.',
        example: 15169,
        flat_name: 'destination.as.number',
        level: 'extended',
        name: 'number',
        normalize: [],
        order: 0,
        original_fieldset: 'as',
        short:
          'Unique number allocated to the autonomous system. The autonomous system\nnumber (ASN) uniquely identifies each network on the Internet.',
        type: 'long',
      },
      'as.organization.name': {
        dashed_name: 'destination-as-organization-name',
        description: 'Organization name.',
        example: 'Google LLC',
        flat_name: 'destination.as.organization.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'destination.as.organization.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'organization.name',
        normalize: [],
        order: 1,
        original_fieldset: 'as',
        short: 'Organization name.',
        type: 'keyword',
      },
      bytes: {
        dashed_name: 'destination-bytes',
        description: 'Bytes sent from the destination to the source.',
        example: 184,
        flat_name: 'destination.bytes',
        format: 'bytes',
        level: 'core',
        name: 'bytes',
        normalize: [],
        order: 7,
        short: 'Bytes sent from the destination to the source.',
        type: 'long',
      },
      domain: {
        dashed_name: 'destination-domain',
        description: 'Destination domain.',
        flat_name: 'destination.domain',
        ignore_above: 1024,
        level: 'core',
        name: 'domain',
        normalize: [],
        order: 4,
        short: 'Destination domain.',
        type: 'keyword',
      },
      'geo.city_name': {
        dashed_name: 'destination-geo-city-name',
        description: 'City name.',
        example: 'Montreal',
        flat_name: 'destination.geo.city_name',
        ignore_above: 1024,
        level: 'core',
        name: 'city_name',
        normalize: [],
        order: 4,
        original_fieldset: 'geo',
        short: 'City name.',
        type: 'keyword',
      },
      'geo.continent_name': {
        dashed_name: 'destination-geo-continent-name',
        description: 'Name of the continent.',
        example: 'North America',
        flat_name: 'destination.geo.continent_name',
        ignore_above: 1024,
        level: 'core',
        name: 'continent_name',
        normalize: [],
        order: 1,
        original_fieldset: 'geo',
        short: 'Name of the continent.',
        type: 'keyword',
      },
      'geo.country_iso_code': {
        dashed_name: 'destination-geo-country-iso-code',
        description: 'Country ISO code.',
        example: 'CA',
        flat_name: 'destination.geo.country_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'country_iso_code',
        normalize: [],
        order: 5,
        original_fieldset: 'geo',
        short: 'Country ISO code.',
        type: 'keyword',
      },
      'geo.country_name': {
        dashed_name: 'destination-geo-country-name',
        description: 'Country name.',
        example: 'Canada',
        flat_name: 'destination.geo.country_name',
        ignore_above: 1024,
        level: 'core',
        name: 'country_name',
        normalize: [],
        order: 2,
        original_fieldset: 'geo',
        short: 'Country name.',
        type: 'keyword',
      },
      'geo.location': {
        dashed_name: 'destination-geo-location',
        description: 'Longitude and latitude.',
        example: '{ "lon": -73.614830, "lat": 45.505918 }',
        flat_name: 'destination.geo.location',
        level: 'core',
        name: 'location',
        normalize: [],
        order: 0,
        original_fieldset: 'geo',
        short: 'Longitude and latitude.',
        type: 'geo_point',
      },
      'geo.name': {
        dashed_name: 'destination-geo-name',
        description:
          'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
        example: 'boston-dc',
        flat_name: 'destination.geo.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 7,
        original_fieldset: 'geo',
        short: 'User-defined description of a location.',
        type: 'keyword',
      },
      'geo.region_iso_code': {
        dashed_name: 'destination-geo-region-iso-code',
        description: 'Region ISO code.',
        example: 'CA-QC',
        flat_name: 'destination.geo.region_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'region_iso_code',
        normalize: [],
        order: 6,
        original_fieldset: 'geo',
        short: 'Region ISO code.',
        type: 'keyword',
      },
      'geo.region_name': {
        dashed_name: 'destination-geo-region-name',
        description: 'Region name.',
        example: 'Quebec',
        flat_name: 'destination.geo.region_name',
        ignore_above: 1024,
        level: 'core',
        name: 'region_name',
        normalize: [],
        order: 3,
        original_fieldset: 'geo',
        short: 'Region name.',
        type: 'keyword',
      },
      ip: {
        dashed_name: 'destination-ip',
        description: 'IP address of the destination (IPv4 or IPv6).',
        flat_name: 'destination.ip',
        level: 'core',
        name: 'ip',
        normalize: [],
        order: 1,
        short: 'IP address of the destination.',
        type: 'ip',
      },
      mac: {
        dashed_name: 'destination-mac',
        description: 'MAC address of the destination.',
        flat_name: 'destination.mac',
        ignore_above: 1024,
        level: 'core',
        name: 'mac',
        normalize: [],
        order: 3,
        short: 'MAC address of the destination.',
        type: 'keyword',
      },
      'nat.ip': {
        dashed_name: 'destination-nat-ip',
        description:
          'Translated ip of destination based NAT sessions (e.g. internet\nto private DMZ)\n\nTypically used with load balancers, firewalls, or routers.',
        flat_name: 'destination.nat.ip',
        level: 'extended',
        name: 'nat.ip',
        normalize: [],
        order: 9,
        short: 'Destination NAT ip',
        type: 'ip',
      },
      'nat.port': {
        dashed_name: 'destination-nat-port',
        description:
          'Port the source session is translated to by NAT Device.\n\nTypically used with load balancers, firewalls, or routers.',
        flat_name: 'destination.nat.port',
        format: 'string',
        level: 'extended',
        name: 'nat.port',
        normalize: [],
        order: 10,
        short: 'Destination NAT Port',
        type: 'long',
      },
      packets: {
        dashed_name: 'destination-packets',
        description: 'Packets sent from the destination to the source.',
        example: 12,
        flat_name: 'destination.packets',
        level: 'core',
        name: 'packets',
        normalize: [],
        order: 8,
        short: 'Packets sent from the destination to the source.',
        type: 'long',
      },
      port: {
        dashed_name: 'destination-port',
        description: 'Port of the destination.',
        flat_name: 'destination.port',
        format: 'string',
        level: 'core',
        name: 'port',
        normalize: [],
        order: 2,
        short: 'Port of the destination.',
        type: 'long',
      },
      registered_domain: {
        dashed_name: 'destination-registered-domain',
        description:
          'The highest registered destination domain, stripped of the subdomain.\n\nFor example, the registered domain for "foo.google.com" is "google.com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last two labels will not work well for TLDs such as "co.uk".',
        example: 'google.com',
        flat_name: 'destination.registered_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'registered_domain',
        normalize: [],
        order: 5,
        short: 'The highest registered destination domain, stripped of the subdomain.',
        type: 'keyword',
      },
      top_level_domain: {
        dashed_name: 'destination-top-level-domain',
        description:
          'The effective top level domain (eTLD), also known as the domain\nsuffix, is the last part of the domain name. For example, the top level domain\nfor google.com is "com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last label will not work well for effective TLDs such as "co.uk".',
        example: 'co.uk',
        flat_name: 'destination.top_level_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'top_level_domain',
        normalize: [],
        order: 6,
        short: 'The effective top level domain (com, org, net, co.uk).',
        type: 'keyword',
      },
      'user.domain': {
        dashed_name: 'destination-user-domain',
        description:
          'Name of the directory the user is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'destination.user.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 5,
        original_fieldset: 'user',
        short: 'Name of the directory the user is a member of.',
        type: 'keyword',
      },
      'user.email': {
        dashed_name: 'destination-user-email',
        description: 'User email address.',
        flat_name: 'destination.user.email',
        ignore_above: 1024,
        level: 'extended',
        name: 'email',
        normalize: [],
        order: 3,
        original_fieldset: 'user',
        short: 'User email address.',
        type: 'keyword',
      },
      'user.full_name': {
        dashed_name: 'destination-user-full-name',
        description: "User's full name, if available.",
        example: 'Albert Einstein',
        flat_name: 'destination.user.full_name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'destination.user.full_name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full_name',
        normalize: [],
        order: 2,
        original_fieldset: 'user',
        short: "User's full name, if available.",
        type: 'keyword',
      },
      'user.group.domain': {
        dashed_name: 'destination-user-group-domain',
        description:
          'Name of the directory the group is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'destination.user.group.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 2,
        original_fieldset: 'group',
        short: 'Name of the directory the group is a member of.',
        type: 'keyword',
      },
      'user.group.id': {
        dashed_name: 'destination-user-group-id',
        description: 'Unique identifier for the group on the system/platform.',
        flat_name: 'destination.user.group.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'group',
        short: 'Unique identifier for the group on the system/platform.',
        type: 'keyword',
      },
      'user.group.name': {
        dashed_name: 'destination-user-group-name',
        description: 'Name of the group.',
        flat_name: 'destination.user.group.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'group',
        short: 'Name of the group.',
        type: 'keyword',
      },
      'user.hash': {
        dashed_name: 'destination-user-hash',
        description:
          'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
        flat_name: 'destination.user.hash',
        ignore_above: 1024,
        level: 'extended',
        name: 'hash',
        normalize: [],
        order: 4,
        original_fieldset: 'user',
        short: 'Unique user hash to correlate information for a user in anonymized form.',
        type: 'keyword',
      },
      'user.id': {
        dashed_name: 'destination-user-id',
        description: 'Unique identifier of the user.',
        flat_name: 'destination.user.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'user',
        short: 'Unique identifier of the user.',
        type: 'keyword',
      },
      'user.name': {
        dashed_name: 'destination-user-name',
        description: 'Short name or login of the user.',
        example: 'albert',
        flat_name: 'destination.user.name',
        ignore_above: 1024,
        level: 'core',
        multi_fields: [
          {
            flat_name: 'destination.user.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'user',
        short: 'Short name or login of the user.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'destination',
    nestings: ['as', 'geo', 'user'],
    prefix: 'destination.',
    short: 'Fields about the destination side of a network connection, used with source.',
    title: 'Destination',
    type: 'group',
  },
  dll: {
    description:
      'These fields contain information about code libraries dynamically\nloaded into processes.\n\n\nMany operating systems refer to "shared code libraries" with different names,\nbut this field set refers to all of the following:\n\n* Dynamic-link library (`.dll`) commonly used on Windows\n\n* Shared Object (`.so`) commonly used on Unix-like operating systems\n\n* Dynamic library (`.dylib`) commonly used on macOS',
    fields: {
      'code_signature.exists': {
        dashed_name: 'dll-code-signature-exists',
        description: 'Boolean to capture if a signature is present.',
        example: 'true',
        flat_name: 'dll.code_signature.exists',
        level: 'core',
        name: 'exists',
        normalize: [],
        order: 0,
        original_fieldset: 'code_signature',
        short: 'Boolean to capture if a signature is present.',
        type: 'boolean',
      },
      'code_signature.status': {
        dashed_name: 'dll-code-signature-status',
        description:
          'Additional information about the certificate status.\n\nThis is useful for logging cryptographic errors with the certificate validity\nor trust status. Leave unpopulated if the validity or trust of the certificate\nwas unchecked.',
        example: 'ERROR_UNTRUSTED_ROOT',
        flat_name: 'dll.code_signature.status',
        ignore_above: 1024,
        level: 'extended',
        name: 'status',
        normalize: [],
        order: 4,
        original_fieldset: 'code_signature',
        short: 'Additional information about the certificate status.',
        type: 'keyword',
      },
      'code_signature.subject_name': {
        dashed_name: 'dll-code-signature-subject-name',
        description: 'Subject name of the code signer',
        example: 'Microsoft Corporation',
        flat_name: 'dll.code_signature.subject_name',
        ignore_above: 1024,
        level: 'core',
        name: 'subject_name',
        normalize: [],
        order: 1,
        original_fieldset: 'code_signature',
        short: 'Subject name of the code signer',
        type: 'keyword',
      },
      'code_signature.trusted': {
        dashed_name: 'dll-code-signature-trusted',
        description:
          'Stores the trust status of the certificate chain.\n\nValidating the trust of the certificate chain may be complicated, and this\nfield should only be populated by tools that actively check the status.',
        example: 'true',
        flat_name: 'dll.code_signature.trusted',
        level: 'extended',
        name: 'trusted',
        normalize: [],
        order: 3,
        original_fieldset: 'code_signature',
        short: 'Stores the trust status of the certificate chain.',
        type: 'boolean',
      },
      'code_signature.valid': {
        dashed_name: 'dll-code-signature-valid',
        description:
          'Boolean to capture if the digital signature is verified against\nthe binary content.\n\nLeave unpopulated if a certificate was unchecked.',
        example: 'true',
        flat_name: 'dll.code_signature.valid',
        level: 'extended',
        name: 'valid',
        normalize: [],
        order: 2,
        original_fieldset: 'code_signature',
        short:
          'Boolean to capture if the digital signature is verified against the binary\ncontent.',
        type: 'boolean',
      },
      'hash.md5': {
        dashed_name: 'dll-hash-md5',
        description: 'MD5 hash.',
        flat_name: 'dll.hash.md5',
        ignore_above: 1024,
        level: 'extended',
        name: 'md5',
        normalize: [],
        order: 0,
        original_fieldset: 'hash',
        short: 'MD5 hash.',
        type: 'keyword',
      },
      'hash.sha1': {
        dashed_name: 'dll-hash-sha1',
        description: 'SHA1 hash.',
        flat_name: 'dll.hash.sha1',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha1',
        normalize: [],
        order: 1,
        original_fieldset: 'hash',
        short: 'SHA1 hash.',
        type: 'keyword',
      },
      'hash.sha256': {
        dashed_name: 'dll-hash-sha256',
        description: 'SHA256 hash.',
        flat_name: 'dll.hash.sha256',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha256',
        normalize: [],
        order: 2,
        original_fieldset: 'hash',
        short: 'SHA256 hash.',
        type: 'keyword',
      },
      'hash.sha512': {
        dashed_name: 'dll-hash-sha512',
        description: 'SHA512 hash.',
        flat_name: 'dll.hash.sha512',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha512',
        normalize: [],
        order: 3,
        original_fieldset: 'hash',
        short: 'SHA512 hash.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'dll-name',
        description: 'Name of the library.\n\nThis generally maps to the name of the file on disk.',
        example: 'kernel32.dll',
        flat_name: 'dll.name',
        ignore_above: 1024,
        level: 'core',
        name: 'name',
        normalize: [],
        order: 0,
        short: 'Name of the library.',
        type: 'keyword',
      },
      path: {
        dashed_name: 'dll-path',
        description: 'Full file path of the library.',
        example: 'C:\\Windows\\System32\\kernel32.dll',
        flat_name: 'dll.path',
        ignore_above: 1024,
        level: 'extended',
        name: 'path',
        normalize: [],
        order: 1,
        short: 'Full file path of the library.',
        type: 'keyword',
      },
      'pe.company': {
        dashed_name: 'dll-pe-company',
        description: 'Internal company name of the file, provided at compile-time.',
        example: 'Microsoft Corporation',
        flat_name: 'dll.pe.company',
        ignore_above: 1024,
        level: 'extended',
        name: 'company',
        normalize: [],
        order: 4,
        original_fieldset: 'pe',
        short: 'Internal company name of the file, provided at compile-time.',
        type: 'keyword',
      },
      'pe.description': {
        dashed_name: 'dll-pe-description',
        description: 'Internal description of the file, provided at compile-time.',
        example: 'Paint',
        flat_name: 'dll.pe.description',
        ignore_above: 1024,
        level: 'extended',
        name: 'description',
        normalize: [],
        order: 2,
        original_fieldset: 'pe',
        short: 'Internal description of the file, provided at compile-time.',
        type: 'keyword',
      },
      'pe.file_version': {
        dashed_name: 'dll-pe-file-version',
        description: 'Internal version of the file, provided at compile-time.',
        example: '6.3.9600.17415',
        flat_name: 'dll.pe.file_version',
        ignore_above: 1024,
        level: 'extended',
        name: 'file_version',
        normalize: [],
        order: 1,
        original_fieldset: 'pe',
        short: 'Process name.',
        type: 'keyword',
      },
      'pe.original_file_name': {
        dashed_name: 'dll-pe-original-file-name',
        description: 'Internal name of the file, provided at compile-time.',
        example: 'MSPAINT.EXE',
        flat_name: 'dll.pe.original_file_name',
        ignore_above: 1024,
        level: 'extended',
        name: 'original_file_name',
        normalize: [],
        order: 0,
        original_fieldset: 'pe',
        short: 'Internal name of the file, provided at compile-time.',
        type: 'keyword',
      },
      'pe.product': {
        dashed_name: 'dll-pe-product',
        description: 'Internal product name of the file, provided at compile-time.',
        example: 'MicrosoftÂ® WindowsÂ® Operating System',
        flat_name: 'dll.pe.product',
        ignore_above: 1024,
        level: 'extended',
        name: 'product',
        normalize: [],
        order: 3,
        original_fieldset: 'pe',
        short: 'Internal product name of the file, provided at compile-time.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'dll',
    nestings: ['code_signature', 'hash', 'pe'],
    prefix: 'dll.',
    short:
      'These fields contain information about code libraries dynamically loaded\ninto processes.',
    title: 'DLL',
    type: 'group',
  },
  dns: {
    description:
      'Fields describing DNS queries and answers.\n\nDNS events should either represent a single DNS query prior to getting answers\n(`dns.type:query`) or they should represent a full exchange and contain the query\ndetails as well as all of the answers that were provided for this query (`dns.type:answer`).',
    fields: {
      answers: {
        dashed_name: 'dns-answers',
        description:
          'An array containing an object for each answer section returned\nby the server.\n\nThe main keys that should be present in these objects are defined by ECS.\nRecords that have more information may contain more keys than what ECS defines.\n\nNot all DNS data sources give all details about DNS answers. At minimum, answer\nobjects must contain the `data` key. If more information is available, map\nas much of it to ECS as possible, and add any additional fields to the answer\nobjects as custom fields.',
        flat_name: 'dns.answers',
        level: 'extended',
        name: 'answers',
        normalize: ['array'],
        object_type: 'keyword',
        order: 11,
        short: 'Array of DNS answers.',
        type: 'object',
      },
      'answers.class': {
        dashed_name: 'dns-answers-class',
        description: 'The class of DNS data contained in this resource record.',
        example: 'IN',
        flat_name: 'dns.answers.class',
        ignore_above: 1024,
        level: 'extended',
        name: 'answers.class',
        normalize: [],
        order: 14,
        short: 'The class of DNS data contained in this resource record.',
        type: 'keyword',
      },
      'answers.data': {
        dashed_name: 'dns-answers-data',
        description:
          'The data describing the resource.\n\nThe meaning of this data depends on the type and class of the resource record.',
        example: '10.10.10.10',
        flat_name: 'dns.answers.data',
        ignore_above: 1024,
        level: 'extended',
        name: 'answers.data',
        normalize: [],
        order: 16,
        short: 'The data describing the resource.',
        type: 'keyword',
      },
      'answers.name': {
        dashed_name: 'dns-answers-name',
        description:
          "The domain name to which this resource record pertains.\n\nIf a chain of CNAME is being resolved, each answer's `name` should be the\none that corresponds with the answer's `data`. It should not simply be the\noriginal `question.name` repeated.",
        example: 'www.google.com',
        flat_name: 'dns.answers.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'answers.name',
        normalize: [],
        order: 12,
        short: 'The domain name to which this resource record pertains.',
        type: 'keyword',
      },
      'answers.ttl': {
        dashed_name: 'dns-answers-ttl',
        description:
          'The time interval in seconds that this resource record may be cached\nbefore it should be discarded. Zero values mean that the data should not be\ncached.',
        example: 180,
        flat_name: 'dns.answers.ttl',
        level: 'extended',
        name: 'answers.ttl',
        normalize: [],
        order: 15,
        short:
          'The time interval in seconds that this resource record may be cached\nbefore it should be discarded. Zero values mean that the data should not be\ncached.',
        type: 'long',
      },
      'answers.type': {
        dashed_name: 'dns-answers-type',
        description: 'The type of data contained in this resource record.',
        example: 'CNAME',
        flat_name: 'dns.answers.type',
        ignore_above: 1024,
        level: 'extended',
        name: 'answers.type',
        normalize: [],
        order: 13,
        short: 'The type of data contained in this resource record.',
        type: 'keyword',
      },
      header_flags: {
        dashed_name: 'dns-header-flags',
        description:
          'Array of 2 letter DNS header flags.\n\nExpected values are: AA, TC, RD, RA, AD, CD, DO.',
        example: ['RD', 'RA'],
        flat_name: 'dns.header_flags',
        ignore_above: 1024,
        level: 'extended',
        name: 'header_flags',
        normalize: ['array'],
        order: 3,
        short: 'Array of DNS header flags.',
        type: 'keyword',
      },
      id: {
        dashed_name: 'dns-id',
        description:
          'The DNS packet identifier assigned by the program that generated\nthe query. The identifier is copied to the response.',
        example: 62111,
        flat_name: 'dns.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 1,
        short:
          'The DNS packet identifier assigned by the program that generated the\nquery. The identifier is copied to the response.',
        type: 'keyword',
      },
      op_code: {
        dashed_name: 'dns-op-code',
        description:
          'The DNS operation code that specifies the kind of query in the\nmessage. This value is set by the originator of a query and copied into the\nresponse.',
        example: 'QUERY',
        flat_name: 'dns.op_code',
        ignore_above: 1024,
        level: 'extended',
        name: 'op_code',
        normalize: [],
        order: 2,
        short:
          'The DNS operation code that specifies the kind of query in the message.\nThis value is set by the originator of a query and copied into the response.',
        type: 'keyword',
      },
      'question.class': {
        dashed_name: 'dns-question-class',
        description: 'The class of records being queried.',
        example: 'IN',
        flat_name: 'dns.question.class',
        ignore_above: 1024,
        level: 'extended',
        name: 'question.class',
        normalize: [],
        order: 7,
        short: 'The class of records being queried.',
        type: 'keyword',
      },
      'question.name': {
        dashed_name: 'dns-question-name',
        description:
          'The name being queried.\n\nIf the name field contains non-printable characters (below 32 or above 126),\nthose characters should be represented as escaped base 10 integers (\\DDD).\nBack slashes and quotes should be escaped. Tabs, carriage returns, and line\nfeeds should be converted to \\t, \\r, and \\n respectively.',
        example: 'www.google.com',
        flat_name: 'dns.question.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'question.name',
        normalize: [],
        order: 5,
        short: 'The name being queried.',
        type: 'keyword',
      },
      'question.registered_domain': {
        dashed_name: 'dns-question-registered-domain',
        description:
          'The highest registered domain, stripped of the subdomain.\n\nFor example, the registered domain for "foo.google.com" is "google.com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last two labels will not work well for TLDs such as "co.uk".',
        example: 'google.com',
        flat_name: 'dns.question.registered_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'question.registered_domain',
        normalize: [],
        order: 8,
        short: 'The highest registered domain, stripped of the subdomain.',
        type: 'keyword',
      },
      'question.subdomain': {
        dashed_name: 'dns-question-subdomain',
        description:
          'The subdomain is all of the labels under the registered_domain.\n\nIf the domain has multiple levels of subdomain, such as "sub2.sub1.example.com",\nthe subdomain field should contain "sub2.sub1", with no trailing period.',
        example: 'www',
        flat_name: 'dns.question.subdomain',
        ignore_above: 1024,
        level: 'extended',
        name: 'question.subdomain',
        normalize: [],
        order: 10,
        short: 'The subdomain of the domain.',
        type: 'keyword',
      },
      'question.top_level_domain': {
        dashed_name: 'dns-question-top-level-domain',
        description:
          'The effective top level domain (eTLD), also known as the domain\nsuffix, is the last part of the domain name. For example, the top level domain\nfor google.com is "com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last label will not work well for effective TLDs such as "co.uk".',
        example: 'co.uk',
        flat_name: 'dns.question.top_level_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'question.top_level_domain',
        normalize: [],
        order: 9,
        short: 'The effective top level domain (com, org, net, co.uk).',
        type: 'keyword',
      },
      'question.type': {
        dashed_name: 'dns-question-type',
        description: 'The type of record being queried.',
        example: 'AAAA',
        flat_name: 'dns.question.type',
        ignore_above: 1024,
        level: 'extended',
        name: 'question.type',
        normalize: [],
        order: 6,
        short: 'The type of record being queried.',
        type: 'keyword',
      },
      resolved_ip: {
        dashed_name: 'dns-resolved-ip',
        description:
          'Array containing all IPs seen in `answers.data`.\n\nThe `answers` array can be difficult to use, because of the variety of data\nformats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip`\nmakes it possible to index them as IP addresses, and makes them easier to\nvisualize and query for.',
        example: ['10.10.10.10', '10.10.10.11'],
        flat_name: 'dns.resolved_ip',
        level: 'extended',
        name: 'resolved_ip',
        normalize: ['array'],
        order: 17,
        short: 'Array containing all IPs seen in answers.data',
        type: 'ip',
      },
      response_code: {
        dashed_name: 'dns-response-code',
        description: 'The DNS response code.',
        example: 'NOERROR',
        flat_name: 'dns.response_code',
        ignore_above: 1024,
        level: 'extended',
        name: 'response_code',
        normalize: [],
        order: 4,
        short: 'The DNS response code.',
        type: 'keyword',
      },
      type: {
        dashed_name: 'dns-type',
        description:
          'The type of DNS event captured, query or answer.\n\nIf your source of DNS events only gives you DNS queries, you should only create\ndns events of type `dns.type:query`.\n\nIf your source of DNS events gives you answers as well, you should create\none event per query (optionally as soon as the query is seen). And a second\nevent containing all query details as well as an array of answers.',
        example: 'answer',
        flat_name: 'dns.type',
        ignore_above: 1024,
        level: 'extended',
        name: 'type',
        normalize: [],
        order: 0,
        short: 'The type of DNS event captured, query or answer.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'dns',
    prefix: 'dns.',
    short: 'Fields describing DNS queries and answers.',
    title: 'DNS',
    type: 'group',
  },
  ecs: {
    description: 'Meta-information specific to ECS.',
    fields: {
      version: {
        dashed_name: 'ecs-version',
        description:
          'ECS version this event conforms to. `ecs.version` is a required\nfield and must exist in all events.\n\nWhen querying across multiple indices -- which may conform to slightly different\nECS versions -- this field lets integrations adjust to the schema version\nof the events.',
        example: '1.0.0',
        flat_name: 'ecs.version',
        ignore_above: 1024,
        level: 'core',
        name: 'version',
        normalize: [],
        order: 0,
        required: true,
        short: 'ECS version this event conforms to.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'ecs',
    prefix: 'ecs.',
    short: 'Meta-information specific to ECS.',
    title: 'ECS',
    type: 'group',
  },
  error: {
    description:
      'These fields can represent errors of any kind.\n\nUse them for errors that happen while fetching events or in cases where the event\nitself contains an error.',
    fields: {
      code: {
        dashed_name: 'error-code',
        description: 'Error code describing the error.',
        flat_name: 'error.code',
        ignore_above: 1024,
        level: 'core',
        name: 'code',
        normalize: [],
        order: 2,
        short: 'Error code describing the error.',
        type: 'keyword',
      },
      id: {
        dashed_name: 'error-id',
        description: 'Unique identifier for the error.',
        flat_name: 'error.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 0,
        short: 'Unique identifier for the error.',
        type: 'keyword',
      },
      message: {
        dashed_name: 'error-message',
        description: 'Error message.',
        flat_name: 'error.message',
        level: 'core',
        name: 'message',
        normalize: [],
        norms: false,
        order: 1,
        short: 'Error message.',
        type: 'text',
      },
      stack_trace: {
        dashed_name: 'error-stack-trace',
        description: 'The stack trace of this error in plain text.',
        doc_values: false,
        flat_name: 'error.stack_trace',
        ignore_above: 1024,
        index: false,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'error.stack_trace.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'stack_trace',
        normalize: [],
        order: 4,
        short: 'The stack trace of this error in plain text.',
        type: 'keyword',
      },
      type: {
        dashed_name: 'error-type',
        description: 'The type of the error, for example the class name of the exception.',
        example: 'java.lang.NullPointerException',
        flat_name: 'error.type',
        ignore_above: 1024,
        level: 'extended',
        name: 'type',
        normalize: [],
        order: 3,
        short: 'The type of the error, for example the class name of the exception.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'error',
    prefix: 'error.',
    short: 'Fields about errors of any kind.',
    title: 'Error',
    type: 'group',
  },
  event: {
    description:
      'The event fields are used for context information about the log or\nmetric event itself.\n\nA log is defined as an event containing details of something that happened. Log\nevents must include the time at which the thing happened. Examples of log events\ninclude a process starting on a host, a network packet being sent from a source\nto a destination, or a network connection between a client and a server being\ninitiated or closed. A metric is defined as an event containing one or more numerical\nmeasurements and the time at which the measurement was taken. Examples of metric\nevents include memory pressure measured on a host and device temperature. See\nthe `event.kind` definition in this section for additional details about metric\nand state events.',
    fields: {
      action: {
        dashed_name: 'event-action',
        description:
          'The action captured by the event.\n\nThis describes the information in the event. It is more specific than `event.category`.\nExamples are `group-add`, `process-started`, `file-created`. The value is\nnormally defined by the implementer.',
        example: 'user-password-change',
        flat_name: 'event.action',
        ignore_above: 1024,
        level: 'core',
        name: 'action',
        normalize: [],
        order: 4,
        short: 'The action captured by the event.',
        type: 'keyword',
      },
      category: {
        allowed_values: [
          {
            description:
              'Events in this category are related to the challenge and response\nprocess in which credentials are supplied and verified to allow the creation\nof a session. Common sources for these logs are Windows event logs and ssh\nlogs. Visualize and analyze events in this category to look for failed logins,\nand other authentication-related activity.\n\n',
            expected_event_types: ['start', 'end', 'info'],
            name: 'authentication',
          },
          {
            description:
              'The database category denotes events and metrics relating to\na data storage and retrieval system. Note that use of this category is not\nlimited to relational database systems. Examples include event logs from\nMS SQL, MySQL, Elasticsearch, MongoDB, etc. Use this category to visualize\nand analyze database activity such as accesses and changes.\n\n',
            expected_event_types: ['access', 'change', 'info', 'error'],
            name: 'database',
          },
          {
            description:
              'Events in the driver category have to do with operating system\ndevice drivers and similar software entities such as Windows drivers, kernel\nextensions, kernel modules, etc.\n\nUse events and metrics in this category to visualize and analyze driver-related\nactivity and status on hosts.\n\n',
            expected_event_types: ['change', 'end', 'info', 'start'],
            name: 'driver',
          },
          {
            description:
              'Relating to a set of information that has been created on, or\nhas existed on a filesystem. Use this category of events to visualize and\nanalyze the creation, access, and deletions of files. Events in this category\ncan come from both host-based and network-based sources. An example source\nof a network-based detection of a file transfer would be the Zeek file.log.\n\n',
            expected_event_types: ['change', 'creation', 'deletion', 'info'],
            name: 'file',
          },
          {
            description:
              '`Use this category to visualize and analyze information such\nas host inventory or host lifecycle events.\n\nMost of the events in this category can usually be observed from the outside,\nsuch as from a hypervisor or a control plane\'s point of view. Some can\nalso be seen from within, such as "start" or "end".\n\nNote that this category is for information about hosts themselves; it is\nnot meant to capture activity "happening on a host".\n\n`',
            expected_event_types: ['access', 'change', 'end', 'info', 'start'],
            name: 'host',
          },
          {
            description:
              'Identity and access management (IAM) events relating to users,\ngroups, and administration. Use this category to visualize and analyze IAM-related\nlogs and data from active directory, LDAP, Okta, Duo, and other IAM systems.\n\n',
            expected_event_types: [
              'admin',
              'change',
              'creation',
              'deletion',
              'group',
              'info',
              'user',
            ],
            name: 'iam',
          },
          {
            description:
              'Relating to intrusion detections from IDS/IPS systems and functions,\nboth network and host-based. Use this category to visualize and analyze\nintrusion detection alerts from systems such as Snort, Suricata, and Palo\nAlto threat detections.\n\n',
            expected_event_types: ['allowed', 'denied', 'info'],
            name: 'intrusion_detection',
          },
          {
            description:
              'Malware detection events and alerts. Use this category to visualize\nand analyze malware detections from EDR/EPP systems such as Elastic Endpoint\nSecurity, Symantec Endpoint Protection, Crowdstrike, and network IDS/IPS\nsystems such as Suricata, or other sources of malware-related events such\nas Palo Alto Networks threat logs and Wildfire logs.\n\n',
            expected_event_types: ['info'],
            name: 'malware',
          },
          {
            description:
              'Relating to all network activity, including network connection\nlifecycle, network traffic, and essentially any event that includes an IP\naddress. Many events containing decoded network protocol transactions fit\ninto this category. Use events in this category to visualize or analyze\ncounts of network ports, protocols, addresses, geolocation information,\netc.\n\n',
            expected_event_types: [
              'access',
              'allowed',
              'connection',
              'denied',
              'end',
              'info',
              'protocol',
              'start',
            ],
            name: 'network',
          },
          {
            description:
              'Relating to software packages installed on hosts. Use this category\nto visualize and analyze inventory of software installed on various hosts,\nor to determine host vulnerability in the absence of vulnerability scan\ndata.\n\n',
            expected_event_types: ['access', 'change', 'deletion', 'info', 'installation', 'start'],
            name: 'package',
          },
          {
            description:
              'Use this category of events to visualize and analyze process-specific\ninformation such as lifecycle events or process ancestry.\n\n',
            expected_event_types: ['access', 'change', 'end', 'info', 'start'],
            name: 'process',
          },
          {
            description:
              'Relating to web server access. Use this category to create a\ndashboard of web server/proxy activity from apache, IIS, nginx web servers,\netc. Note: events from network observers such as Zeek http log may also\nbe included in this category.\n\n',
            expected_event_types: ['access', 'error', 'info'],
            name: 'web',
          },
        ],
        dashed_name: 'event-category',
        description:
          'This is one of four ECS Categorization Fields, and indicates the\nsecond level in the ECS category hierarchy.\n\n`event.category` represents the "big buckets" of ECS categories. For example,\nfiltering on `event.category:process` yields all events relating to process\nactivity. This field is closely related to `event.type`, which is used as\na subcategory.\n\nThis field is an array. This will allow proper categorization of some events\nthat fall in multiple categories.',
        example: 'authentication',
        flat_name: 'event.category',
        ignore_above: 1024,
        level: 'core',
        name: 'category',
        normalize: ['array'],
        order: 3,
        short: 'Event category. The second categorization field in the hierarchy.',
        type: 'keyword',
      },
      code: {
        dashed_name: 'event-code',
        description:
          'Identification code for this event, if one exists.\n\nSome event sources use event codes to identify messages unambiguously, regardless\nof message language or wording adjustments over time. An example of this is\nthe Windows Event ID.',
        example: 4648,
        flat_name: 'event.code',
        ignore_above: 1024,
        level: 'extended',
        name: 'code',
        normalize: [],
        order: 1,
        short: 'Identification code for this event.',
        type: 'keyword',
      },
      created: {
        dashed_name: 'event-created',
        description:
          "`event.created contains the date/time when the event was first\nread by an agent, or by your pipeline.\n\nThis field is distinct from @timestamp in that @timestamp typically contain\nthe time extracted from the original event.\n\nIn most situations, these two timestamps will be slightly different. The difference\ncan be used to calculate the delay between your source generating an event,\nand the time when your agent first processed it. This can be used to monitor\nyour agent's or pipeline's ability to keep up with your event source.\n\nIn case the two timestamps are identical, @timestamp should be used.`",
        example: '2016-05-23T08:05:34.857Z',
        flat_name: 'event.created',
        level: 'core',
        name: 'created',
        normalize: [],
        order: 16,
        short: 'Time when the event was first read by an agent or by your pipeline.',
        type: 'date',
      },
      dataset: {
        dashed_name: 'event-dataset',
        description:
          "`Name of the dataset.\nIf an event source publishes more than one type of log or events (e.g. access\nlog, error log), the dataset is used to specify which one the event comes\nfrom.\n\nIt's recommended but not required to start the dataset name with the module\nname, followed by a dot, then the dataset name.`",
        example: 'apache.access',
        flat_name: 'event.dataset',
        ignore_above: 1024,
        level: 'core',
        name: 'dataset',
        normalize: [],
        order: 8,
        short: 'Name of the dataset.',
        type: 'keyword',
      },
      duration: {
        dashed_name: 'event-duration',
        description:
          'Duration of the event in nanoseconds.\n\nIf event.start and event.end are known this value should be the difference\nbetween the end and start time.',
        flat_name: 'event.duration',
        format: 'duration',
        input_format: 'nanoseconds',
        level: 'core',
        name: 'duration',
        normalize: [],
        order: 13,
        output_format: 'asMilliseconds',
        output_precision: 1,
        short: 'Duration of the event in nanoseconds.',
        type: 'long',
      },
      end: {
        dashed_name: 'event-end',
        description:
          'event.end contains the date when the event ended or when the activity\nwas last observed.',
        flat_name: 'event.end',
        level: 'extended',
        name: 'end',
        normalize: [],
        order: 18,
        short:
          'event.end contains the date when the event ended or when the activity\nwas last observed.',
        type: 'date',
      },
      hash: {
        dashed_name: 'event-hash',
        description:
          'Hash (perhaps logstash fingerprint) of raw field to be able to\ndemonstrate log integrity.',
        example: '123456789012345678901234567890ABCD',
        flat_name: 'event.hash',
        ignore_above: 1024,
        level: 'extended',
        name: 'hash',
        normalize: [],
        order: 12,
        short:
          'Hash (perhaps logstash fingerprint) of raw field to be able to demonstrate\nlog integrity.',
        type: 'keyword',
      },
      id: {
        dashed_name: 'event-id',
        description: 'Unique ID to describe the event.',
        example: '8a4f500d',
        flat_name: 'event.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 0,
        short: 'Unique ID to describe the event.',
        type: 'keyword',
      },
      ingested: {
        dashed_name: 'event-ingested',
        description:
          "Timestamp when an event arrived in the central data store.\n\nThis is different from `@timestamp`, which is when the event originally occurred.  It's\nalso different from `event.created`, which is meant to capture the first time\nan agent saw the event.\n\nIn normal conditions, assuming no tampering, the timestamps should chronologically\nlook like this: `@timestamp` < `event.created` < `event.ingested`.",
        example: '2016-05-23T08:05:35.101Z',
        flat_name: 'event.ingested',
        level: 'core',
        name: 'ingested',
        normalize: [],
        order: 21,
        short: 'Timestamp when an event arrived in the central data store.',
        type: 'date',
      },
      kind: {
        allowed_values: [
          {
            description:
              'This value indicates an event that describes an alert or notable\nevent, triggered by a detection rule.\n\n`event.kind:alert` is often populated for events coming from firewalls,\nintrusion detection systems, endpoint detection and response systems, and\nso on.\n\n',
            name: 'alert',
          },
          {
            description:
              'This value is the most general and most common value for this\nfield. It is used to represent events that indicate that something happened.\n\n',
            name: 'event',
          },
          {
            description:
              'This value is used to indicate that this event describes a numeric\nmeasurement taken at given point in time.\n\nExamples include CPU utilization, memory usage, or device temperature.\n\nMetric events are often collected on a predictable frequency, such as once\nevery few seconds, or once a minute, but can also be used to describe ad-hoc\nnumeric metric queries.\n\n',
            name: 'metric',
          },
          {
            description:
              'The state value is similar to metric, indicating that this event\ndescribes a measurement taken at given point in time, except that the measurement\ndoes not result in a numeric value, but rather one of a fixed set of categorical\nvalues that represent conditions or states.\n\nExamples include periodic events reporting Elasticsearch cluster state (green/yellow/red),\nthe state of a TCP connection (open, closed, fin_wait, etc.), the state\nof a host with respect to a software vulnerability (vulnerable, not vulnerable),\nand the state of a system regarding compliance with a regulatory standard\n(compliant, not compliant).\n\nNote that an event that describes a change of state would not use `event.kind:state`,\nbut instead would use `event.kind:event` since a state change fits the\nmore general event definition of something that happened.\n\nState events are often collected on a predictable frequency, such as once\nevery few seconds, once a minute, once an hour, or once a day, but can also\nbe used to describe ad-hoc state queries.\n\n',
            name: 'state',
          },
          {
            description:
              'This value indicates that an error occurred during the ingestion\nof this event, and that event data may be missing, inconsistent, or incorrect.\n`event.kind:pipeline_error` is often associated with parsing errors.\n\n',
            name: 'pipeline_error',
          },
          {
            description:
              'This value is used by the Elastic SIEM app to denote an Elasticsearch\ndocument that was created by a SIEM detection engine rule.\n\nA signal will typically trigger a notification that something meaningful\nhappened and should be investigated.\n\nUsage of this value is reserved, and pipelines should not populate `event.kind`\nwith the value "signal".\n\n',
            name: 'signal',
          },
        ],
        dashed_name: 'event-kind',
        description:
          'This is one of four ECS Categorization Fields, and indicates the\nhighest level in the ECS category hierarchy.\n\n`event.kind` gives high-level information about what type of information the\nevent contains, without being specific to the contents of the event. For example,\nvalues of this field distinguish alert events from metric events.\n\nThe value of this field can be used to inform how these kinds of events should\nbe handled. They may warrant different retention, different access control,\nit may also help understand whether the data coming in at a regular interval\nor not.',
        example: 'alert',
        flat_name: 'event.kind',
        ignore_above: 1024,
        level: 'core',
        name: 'kind',
        normalize: [],
        order: 2,
        short: 'The kind of the event. The highest categorization field in the hierarchy.',
        type: 'keyword',
      },
      module: {
        dashed_name: 'event-module',
        description:
          'Name of the module this data is coming from.\n\nIf your monitoring agent supports the concept of modules or plugins to process\nevents of a given source (e.g. Apache logs), `event.module` should contain\nthe name of this module.',
        example: 'apache',
        flat_name: 'event.module',
        ignore_above: 1024,
        level: 'core',
        name: 'module',
        normalize: [],
        order: 7,
        short: 'Name of the module this data is coming from.',
        type: 'keyword',
      },
      original: {
        dashed_name: 'event-original',
        description:
          'Raw text message of entire event. Used to demonstrate log integrity.\n\nThis field is not indexed and doc_values are disabled. It cannot be searched,\nbut it can be retrieved from `_source`.',
        doc_values: false,
        example:
          'Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124;\nworm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232',
        flat_name: 'event.original',
        ignore_above: 1024,
        index: false,
        level: 'core',
        name: 'original',
        normalize: [],
        order: 11,
        short: 'Raw text message of entire event.',
        type: 'keyword',
      },
      outcome: {
        allowed_values: [
          {
            description:
              'Indicates that this event describes a failed result. A common\nexample is `event.category:file AND event.type:access AND event.outcome:failure`\nto indicate that a file access was attempted, but was not successful.\n\n',
            name: 'failure',
          },
          {
            description:
              'Indicates that this event describes a successful result. A common\nexample is `event.category:file AND event.type:create AND event.outcome:success`\nto indicate that a file was successfully created.\n\n',
            name: 'success',
          },
          {
            description:
              "Indicates that this event describes only an attempt for which\nthe result is unknown from the perspective of the event producer. For example,\nif the event contains information only about the request side of a transaction\nthat results in a response, populating `event.outcome:unknown` in the request\nevent is appropriate. The unknown value should not be used when an outcome\ndoesn't make logical sense for the event. In such cases `event.outcome`\nshould not be populated.\n\n",
            name: 'unknown',
          },
        ],
        dashed_name: 'event-outcome',
        description:
          'This is one of four ECS Categorization Fields, and indicates the\nlowest level in the ECS category hierarchy.\n\n`event.outcome` simply denotes whether the event represents a success or a\nfailure from the perspective of the entity that produced the event.\n\nNote that when a single transaction is described in multiple events, each\nevent may populate different values of `event.outcome`, according to their\nperspective.\n\nAlso note that in the case of a compound event (a single event that contains\nmultiple logical events), this field should be populated with the value that\nbest captures the overall success or failure from the perspective of the event\nproducer.\n\nFurther note that not all events will have an associated outcome. For example,\nthis field is generally not populated for metric events, events with `event.type:info`,\nor any events for which an outcome does not make logical sense.',
        example: 'success',
        flat_name: 'event.outcome',
        ignore_above: 1024,
        level: 'core',
        name: 'outcome',
        normalize: [],
        order: 5,
        short: 'The outcome of the event. The lowest level categorization field in the\nhierarchy.',
        type: 'keyword',
      },
      provider: {
        dashed_name: 'event-provider',
        description:
          'Source of the event.\n\nEvent transports such as Syslog or the Windows Event Log typically mention\nthe source of an event. It can be the name of the software that generated\nthe event (e.g. Sysmon, httpd), or of a subsystem of the operating system\n(kernel, Microsoft-Windows-Security-Auditing).',
        example: 'kernel',
        flat_name: 'event.provider',
        ignore_above: 1024,
        level: 'extended',
        name: 'provider',
        normalize: [],
        order: 9,
        short: 'Source of the event.',
        type: 'keyword',
      },
      reference: {
        dashed_name: 'event-reference',
        description:
          'Reference URL linking to additional information about this event.\n\nThis URL links to a static definition of the this event. Alert events, indicated\nby `event.kind:alert`, are a common use case for this field.',
        example: 'https://system.vendor.com/event/#0001234',
        flat_name: 'event.reference',
        ignore_above: 1024,
        level: 'extended',
        name: 'reference',
        normalize: [],
        order: 22,
        short: 'Event reference URL',
        type: 'keyword',
      },
      risk_score: {
        dashed_name: 'event-risk-score',
        description:
          "Risk score or priority of the event (e.g. security solutions).\nUse your system's original value here.",
        flat_name: 'event.risk_score',
        level: 'core',
        name: 'risk_score',
        normalize: [],
        order: 19,
        short:
          "Risk score or priority of the event (e.g. security solutions). Use your\nsystem's original value here.",
        type: 'float',
      },
      risk_score_norm: {
        dashed_name: 'event-risk-score-norm',
        description:
          'Normalized risk score or priority of the event, on a scale of\n0 to 100.\n\nThis is mainly useful if you use more than one system that assigns risk scores,\nand you want to see a normalized value across all systems.',
        flat_name: 'event.risk_score_norm',
        level: 'extended',
        name: 'risk_score_norm',
        normalize: [],
        order: 20,
        short: 'Normalized risk score or priority of the event (0-100).',
        type: 'float',
      },
      sequence: {
        dashed_name: 'event-sequence',
        description:
          'Sequence number of the event.\n\nThe sequence number is a value published by some event sources, to make the\nexact ordering of events unambiguous, regardless of the timestamp precision.',
        flat_name: 'event.sequence',
        format: 'string',
        level: 'extended',
        name: 'sequence',
        normalize: [],
        order: 14,
        short: 'Sequence number of the event.',
        type: 'long',
      },
      severity: {
        dashed_name: 'event-severity',
        description:
          "The numeric severity of the event according to your event source.\n\nWhat the different severity values mean can be different between sources and\nuse cases. It's up to the implementer to make sure severities are consistent\nacross events from the same source.\n\nThe Syslog severity belongs in `log.syslog.severity.code`. `event.severity`\nis meant to represent the severity according to the event source (e.g. firewall,\nIDS). If the event source does not publish its own severity, you may optionally\ncopy the `log.syslog.severity.code` to `event.severity`.",
        example: 7,
        flat_name: 'event.severity',
        format: 'string',
        level: 'core',
        name: 'severity',
        normalize: [],
        order: 10,
        short: 'Numeric severity of the event.',
        type: 'long',
      },
      start: {
        dashed_name: 'event-start',
        description:
          'event.start contains the date when the event started or when the\nactivity was first observed.',
        flat_name: 'event.start',
        level: 'extended',
        name: 'start',
        normalize: [],
        order: 17,
        short:
          'event.start contains the date when the event started or when the activity\nwas first observed.',
        type: 'date',
      },
      timezone: {
        dashed_name: 'event-timezone',
        description:
          '`This field should be populated when the event\'s timestamp does\nnot include timezone information already (e.g. default Syslog timestamps).\nIt\'\'s optional otherwise.\n\nAcceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"),\nabbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").`',
        flat_name: 'event.timezone',
        ignore_above: 1024,
        level: 'extended',
        name: 'timezone',
        normalize: [],
        order: 15,
        short: 'Event time zone.',
        type: 'keyword',
      },
      type: {
        allowed_values: [
          {
            description:
              'The access event type is used for the subset of events within\na category that indicate that something was accessed. Common examples include\n`event.category:database AND event.type:access`, or `event.category:file\nAND event.type:access`. Note for file access, both directory listings and\nfile opens should be included in this subcategory. You can further distinguish\naccess operations using the ECS `event.action` field.\n\n',
            name: 'access',
          },
          {
            description:
              'The admin event type is used for the subset of events within\na category that are related to admin objects. For example, administrative\nchanges within an IAM framework that do not specifically affect a user or\ngroup (e.g., adding new applications to a federation solution or connecting\ndiscrete forests in Active Directory) would fall into this subcategory.\nCommon example: `event.category:iam AND event.type:change AND event.type:admin`.\nYou can further distinguish admin operations using the ECS `event.action`\nfield.\n\n',
            name: 'admin',
          },
          {
            description:
              'The allowed event type is used for the subset of events within\na category that indicate that something was allowed. Common examples include\n`event.category:network AND event.type:connection AND event.type:allowed`\n(to indicate a network firewall event for which the firewall disposition\nwas to allow the connection to complete) and `event.category:intrusion_detection\nAND event.type:allowed` (to indicate a network intrusion prevention system\nevent for which the IPS disposition was to allow the connection to complete).\nYou can further distinguish allowed operations using the ECS `event.action`\nfield, populating with values of your choosing, such as "allow", "detect",\nor "pass".\n\n',
            name: 'allowed',
          },
          {
            description:
              'The change event type is used for the subset of events within\na category that indicate that something has changed. If semantics best describe\nan event as modified, then include them in this subcategory. Common examples\ninclude `event.category:process AND event.type:change`, and `event.category:file\nAND event.type:change`. You can further distinguish change operations using\nthe ECS `event.action` field.\n\n',
            name: 'change',
          },
          {
            description:
              'Used primarily with `event.category:network` this value is used\nfor the subset of network traffic that includes sufficient information for\nthe event to be included in flow or connection analysis. Events in this\nsubcategory will contain at least source and destination IP addresses, source\nand destination TCP/UDP ports, and will usually contain counts of bytes\nand/or packets transferred. Events in this subcategory may contain unidirectional\nor bidirectional information, including summary information. Use this subcategory\nto visualize and analyze network connections. Flow analysis, including Netflow,\nIPFIX, and other flow-related events fit in this subcategory. Note that\nfirewall events from many Next-Generation Firewall (NGFW) devices will also\nfit into this subcategory.  A common filter for flow/connection information\nwould be `event.category:network AND event.type:connection AND event.type:end`\n(to view or analyze all completed network connections, ignoring mid-flow\nreports). You can further distinguish connection events using the ECS `event.action`\nfield, populating with values of your choosing, such as "timeout", or "reset".\n\n',
            name: 'connection',
          },
          {
            description:
              'The "creation" event type is used for the subset of events within\na category that indicate that something was created. A common example is\n`event.category:file AND event.type:creation`.\n\n',
            name: 'creation',
          },
          {
            description:
              'The deletion event type is used for the subset of events within\na category that indicate that something was deleted. A common example is\n`event.category:file AND event.type:deletion` to indicate that a file has\nbeen deleted.\n\n',
            name: 'deletion',
          },
          {
            description:
              'The denied event type is used for the subset of events within\na category that indicate that something was denied. Common examples include\n`event.category:network AND event.type:denied` (to indicate a network firewall\nevent for which the firewall disposition was to deny the connection) and\n`event.category:intrusion_detection AND event.type:denied` (to indicate\na network intrusion prevention system event for which the IPS disposition\nwas to deny the connection to complete). You can further distinguish denied\noperations using the ECS `event.action` field, populating with values of\nyour choosing, such as "blocked", "dropped", or "quarantined".\n\n',
            name: 'denied',
          },
          {
            description:
              'The end event type is used for the subset of events within a\ncategory that indicate something has ended. A common example is `event.category:process\nAND event.type:end`.\n\n',
            name: 'end',
          },
          {
            description:
              'The error event type is used for the subset of events within\na category that indicate or describe an error. A common example is `event.category:database\nAND event.type:error`. Note that pipeline errors that occur during the event\ningestion process should not use this `event.type` value. Instead, they\nshould use `event.kind:pipeline_error`.\n\n',
            name: 'error',
          },
          {
            description:
              'The group event type is used for the subset of events within\na category that are related to group objects. Common example: `event.category:iam\nAND event.type:creation AND event.type:group`. You can further distinguish\ngroup operations using the ECS `event.action` field.\n\n',
            name: 'group',
          },
          {
            description:
              'The info event type is used for the subset of events within\na category that indicate that they are purely informational, and do not\nreport a state change, or any type of action. For example, an initial run\nof a file integrity monitoring system (FIM), where an agent reports all\nfiles under management, would fall into the "info" subcategory. Similarly,\nan event containing a dump of all currently running processes (as opposed\nto reporting that a process started/ended) would fall into the "info" subcategory.\nAn additional common examples is `event.category:intrusion_detection AND\nevent.type:info`.\n\n',
            name: 'info',
          },
          {
            description:
              'The installation event type is used for the subset of events\nwithin a category that indicate that something was installed. A common example\nis `event.category:package` AND `event.type:installation`.\n\n',
            name: 'installation',
          },
          {
            description:
              'The protocol event type is used for the subset of events within\na category that indicate that they contain protocol details or analysis,\nbeyond simply identifying the protocol. Generally, network events that contain\nspecific protocol details will fall into this subcategory. A common example\nis `event.category:network AND event.type:protocol AND event.type:connection\nAND event.type:end` (to indicate that the event is a network connection\nevent sent at the end of a connection that also includes a protocol detail\nbreakdown). Note that events that only indicate the name or id of the protocol\nshould not use the protocol value. Further note that when the protocol subcategory\nis used, the identified protocol is populated in the ECS `network.protocol`\nfield.\n\n',
            expected_event_types: ['access', 'change', 'end', 'info', 'start'],
            name: 'protocol',
          },
          {
            description:
              'The start event type is used for the subset of events within\na category that indicate something has started. A common example is `event.category:process\nAND event.type:start`.\n\n',
            name: 'start',
          },
          {
            description:
              'The user event type is used for the subset of events within\na category that are related to user objects. Common example: `event.category:iam\nAND event.type:deletion AND event.type:user`. You can further distinguish\nuser operations using the ECS `event.action` field.\n\n',
            name: 'user',
          },
        ],
        dashed_name: 'event-type',
        description:
          'This is one of four ECS Categorization Fields, and indicates the\nthird level in the ECS category hierarchy.\n\n`event.type` represents a categorization "sub-bucket" that, when used along\nwith the `event.category` field values, enables filtering events down to a\nlevel appropriate for single visualization.\n\nThis field is an array. This will allow proper categorization of some events\nthat fall in multiple event types.',
        flat_name: 'event.type',
        ignore_above: 1024,
        level: 'core',
        name: 'type',
        normalize: ['array'],
        order: 6,
        short: 'Event type. The third categorization field in the hierarchy.',
        type: 'keyword',
      },
      url: {
        dashed_name: 'event-url',
        description:
          'URL linking to an external system to continue investigation of\nthis event.\n\nThis URL links to another system where in-depth investigation of the specific\noccurence of this event can take place. Alert events, indicated by `event.kind:alert`,\nare a common use case for this field.',
        example: 'https://mysystem.mydomain.com/alert/5271dedb-f5b0-4218-87f0-4ac4870a38fe',
        flat_name: 'event.url',
        ignore_above: 1024,
        level: 'extended',
        name: 'url',
        normalize: [],
        order: 23,
        short: 'Event investigation URL',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'event',
    prefix: 'event.',
    short: 'Fields breaking down the event details.',
    title: 'Event',
    type: 'group',
  },
  file: {
    description:
      'A file is defined as a set of information that has been created on,\nor has existed on a filesystem.\n\nFile objects can be associated with host events, network events, and/or file events\n(e.g., those produced by File Integrity Monitoring [FIM] products or services).\nFile fields provide details about the affected file associated with the event\nor metric.',
    fields: {
      accessed: {
        dashed_name: 'file-accessed',
        description:
          'Last time the file was accessed.\n\nNote that not all filesystems keep track of access time.',
        flat_name: 'file.accessed',
        level: 'extended',
        name: 'accessed',
        normalize: [],
        order: 19,
        short: 'Last time the file was accessed.',
        type: 'date',
      },
      attributes: {
        dashed_name: 'file-attributes',
        description:
          'Array of file attributes.\n\nAttributes names will vary by platform. Here is a non-exhaustive list of values\nthat are expected in this field: archive, compressed, directory, encrypted,\nexecute, hidden, read, readonly, system, write.',
        example: '["readonly", "system"]',
        flat_name: 'file.attributes',
        ignore_above: 1024,
        level: 'extended',
        name: 'attributes',
        normalize: ['array'],
        order: 1,
        short: 'Array of file attributes.',
        type: 'keyword',
      },
      'code_signature.exists': {
        dashed_name: 'file-code-signature-exists',
        description: 'Boolean to capture if a signature is present.',
        example: 'true',
        flat_name: 'file.code_signature.exists',
        level: 'core',
        name: 'exists',
        normalize: [],
        order: 0,
        original_fieldset: 'code_signature',
        short: 'Boolean to capture if a signature is present.',
        type: 'boolean',
      },
      'code_signature.status': {
        dashed_name: 'file-code-signature-status',
        description:
          'Additional information about the certificate status.\n\nThis is useful for logging cryptographic errors with the certificate validity\nor trust status. Leave unpopulated if the validity or trust of the certificate\nwas unchecked.',
        example: 'ERROR_UNTRUSTED_ROOT',
        flat_name: 'file.code_signature.status',
        ignore_above: 1024,
        level: 'extended',
        name: 'status',
        normalize: [],
        order: 4,
        original_fieldset: 'code_signature',
        short: 'Additional information about the certificate status.',
        type: 'keyword',
      },
      'code_signature.subject_name': {
        dashed_name: 'file-code-signature-subject-name',
        description: 'Subject name of the code signer',
        example: 'Microsoft Corporation',
        flat_name: 'file.code_signature.subject_name',
        ignore_above: 1024,
        level: 'core',
        name: 'subject_name',
        normalize: [],
        order: 1,
        original_fieldset: 'code_signature',
        short: 'Subject name of the code signer',
        type: 'keyword',
      },
      'code_signature.trusted': {
        dashed_name: 'file-code-signature-trusted',
        description:
          'Stores the trust status of the certificate chain.\n\nValidating the trust of the certificate chain may be complicated, and this\nfield should only be populated by tools that actively check the status.',
        example: 'true',
        flat_name: 'file.code_signature.trusted',
        level: 'extended',
        name: 'trusted',
        normalize: [],
        order: 3,
        original_fieldset: 'code_signature',
        short: 'Stores the trust status of the certificate chain.',
        type: 'boolean',
      },
      'code_signature.valid': {
        dashed_name: 'file-code-signature-valid',
        description:
          'Boolean to capture if the digital signature is verified against\nthe binary content.\n\nLeave unpopulated if a certificate was unchecked.',
        example: 'true',
        flat_name: 'file.code_signature.valid',
        level: 'extended',
        name: 'valid',
        normalize: [],
        order: 2,
        original_fieldset: 'code_signature',
        short:
          'Boolean to capture if the digital signature is verified against the binary\ncontent.',
        type: 'boolean',
      },
      created: {
        dashed_name: 'file-created',
        description:
          'File creation time.\n\nNote that not all filesystems store the creation time.',
        flat_name: 'file.created',
        level: 'extended',
        name: 'created',
        normalize: [],
        order: 18,
        short: 'File creation time.',
        type: 'date',
      },
      ctime: {
        dashed_name: 'file-ctime',
        description:
          'Last time the file attributes or metadata changed.\n\nNote that changes to the file content will update `mtime`. This implies `ctime`\nwill be adjusted at the same time, since `mtime` is an attribute of the file.',
        flat_name: 'file.ctime',
        level: 'extended',
        name: 'ctime',
        normalize: [],
        order: 17,
        short: 'Last time the file attributes or metadata changed.',
        type: 'date',
      },
      device: {
        dashed_name: 'file-device',
        description: 'Device that is the source of the file.',
        example: 'sda',
        flat_name: 'file.device',
        ignore_above: 1024,
        level: 'extended',
        name: 'device',
        normalize: [],
        order: 8,
        short: 'Device that is the source of the file.',
        type: 'keyword',
      },
      directory: {
        dashed_name: 'file-directory',
        description:
          'Directory where the file is located. It should include the drive\nletter, when appropriate.',
        example: '/home/alice',
        flat_name: 'file.directory',
        ignore_above: 1024,
        level: 'extended',
        name: 'directory',
        normalize: [],
        order: 2,
        short: 'Directory where the file is located.',
        type: 'keyword',
      },
      drive_letter: {
        dashed_name: 'file-drive-letter',
        description:
          'Drive letter where the file is located. This field is only relevant\non Windows.\n\nThe value should be uppercase, and not include the colon.',
        example: 'C',
        flat_name: 'file.drive_letter',
        ignore_above: 1,
        level: 'extended',
        name: 'drive_letter',
        normalize: [],
        order: 3,
        short: 'Drive letter where the file is located.',
        type: 'keyword',
      },
      extension: {
        dashed_name: 'file-extension',
        description: 'File extension.',
        example: 'png',
        flat_name: 'file.extension',
        ignore_above: 1024,
        level: 'extended',
        name: 'extension',
        normalize: [],
        order: 6,
        short: 'File extension.',
        type: 'keyword',
      },
      gid: {
        dashed_name: 'file-gid',
        description: 'Primary group ID (GID) of the file.',
        example: '1001',
        flat_name: 'file.gid',
        ignore_above: 1024,
        level: 'extended',
        name: 'gid',
        normalize: [],
        order: 12,
        short: 'Primary group ID (GID) of the file.',
        type: 'keyword',
      },
      group: {
        dashed_name: 'file-group',
        description: 'Primary group name of the file.',
        example: 'alice',
        flat_name: 'file.group',
        ignore_above: 1024,
        level: 'extended',
        name: 'group',
        normalize: [],
        order: 13,
        short: 'Primary group name of the file.',
        type: 'keyword',
      },
      'hash.md5': {
        dashed_name: 'file-hash-md5',
        description: 'MD5 hash.',
        flat_name: 'file.hash.md5',
        ignore_above: 1024,
        level: 'extended',
        name: 'md5',
        normalize: [],
        order: 0,
        original_fieldset: 'hash',
        short: 'MD5 hash.',
        type: 'keyword',
      },
      'hash.sha1': {
        dashed_name: 'file-hash-sha1',
        description: 'SHA1 hash.',
        flat_name: 'file.hash.sha1',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha1',
        normalize: [],
        order: 1,
        original_fieldset: 'hash',
        short: 'SHA1 hash.',
        type: 'keyword',
      },
      'hash.sha256': {
        dashed_name: 'file-hash-sha256',
        description: 'SHA256 hash.',
        flat_name: 'file.hash.sha256',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha256',
        normalize: [],
        order: 2,
        original_fieldset: 'hash',
        short: 'SHA256 hash.',
        type: 'keyword',
      },
      'hash.sha512': {
        dashed_name: 'file-hash-sha512',
        description: 'SHA512 hash.',
        flat_name: 'file.hash.sha512',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha512',
        normalize: [],
        order: 3,
        original_fieldset: 'hash',
        short: 'SHA512 hash.',
        type: 'keyword',
      },
      inode: {
        dashed_name: 'file-inode',
        description: 'Inode representing the file in the filesystem.',
        example: '256383',
        flat_name: 'file.inode',
        ignore_above: 1024,
        level: 'extended',
        name: 'inode',
        normalize: [],
        order: 9,
        short: 'Inode representing the file in the filesystem.',
        type: 'keyword',
      },
      mime_type: {
        dashed_name: 'file-mime-type',
        description:
          'MIME type should identify the format of the file or stream of bytes\nusing https://www.iana.org/assignments/media-types/media-types.xhtml[IANA\nofficial types], where possible. When more than one type is applicable, the\nmost specific type should be used.',
        flat_name: 'file.mime_type',
        ignore_above: 1024,
        level: 'extended',
        name: 'mime_type',
        normalize: [],
        order: 20,
        short: 'Media type of file, document, or arrangement of bytes.',
        type: 'keyword',
      },
      mode: {
        dashed_name: 'file-mode',
        description: 'Mode of the file in octal representation.',
        example: '0640',
        flat_name: 'file.mode',
        ignore_above: 1024,
        level: 'extended',
        name: 'mode',
        normalize: [],
        order: 14,
        short: 'Mode of the file in octal representation.',
        type: 'keyword',
      },
      mtime: {
        dashed_name: 'file-mtime',
        description: 'Last time the file content was modified.',
        flat_name: 'file.mtime',
        level: 'extended',
        name: 'mtime',
        normalize: [],
        order: 16,
        short: 'Last time the file content was modified.',
        type: 'date',
      },
      name: {
        dashed_name: 'file-name',
        description: 'Name of the file including the extension, without the directory.',
        example: 'example.png',
        flat_name: 'file.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 0,
        short: 'Name of the file including the extension, without the directory.',
        type: 'keyword',
      },
      owner: {
        dashed_name: 'file-owner',
        description: "File owner's username.",
        example: 'alice',
        flat_name: 'file.owner',
        ignore_above: 1024,
        level: 'extended',
        name: 'owner',
        normalize: [],
        order: 11,
        short: "File owner's username.",
        type: 'keyword',
      },
      path: {
        dashed_name: 'file-path',
        description:
          'Full path to the file, including the file name. It should include\nthe drive letter, when appropriate.',
        example: '/home/alice/example.png',
        flat_name: 'file.path',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'file.path.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'path',
        normalize: [],
        order: 4,
        short: 'Full path to the file, including the file name.',
        type: 'keyword',
      },
      'pe.company': {
        dashed_name: 'file-pe-company',
        description: 'Internal company name of the file, provided at compile-time.',
        example: 'Microsoft Corporation',
        flat_name: 'file.pe.company',
        ignore_above: 1024,
        level: 'extended',
        name: 'company',
        normalize: [],
        order: 4,
        original_fieldset: 'pe',
        short: 'Internal company name of the file, provided at compile-time.',
        type: 'keyword',
      },
      'pe.description': {
        dashed_name: 'file-pe-description',
        description: 'Internal description of the file, provided at compile-time.',
        example: 'Paint',
        flat_name: 'file.pe.description',
        ignore_above: 1024,
        level: 'extended',
        name: 'description',
        normalize: [],
        order: 2,
        original_fieldset: 'pe',
        short: 'Internal description of the file, provided at compile-time.',
        type: 'keyword',
      },
      'pe.file_version': {
        dashed_name: 'file-pe-file-version',
        description: 'Internal version of the file, provided at compile-time.',
        example: '6.3.9600.17415',
        flat_name: 'file.pe.file_version',
        ignore_above: 1024,
        level: 'extended',
        name: 'file_version',
        normalize: [],
        order: 1,
        original_fieldset: 'pe',
        short: 'Process name.',
        type: 'keyword',
      },
      'pe.original_file_name': {
        dashed_name: 'file-pe-original-file-name',
        description: 'Internal name of the file, provided at compile-time.',
        example: 'MSPAINT.EXE',
        flat_name: 'file.pe.original_file_name',
        ignore_above: 1024,
        level: 'extended',
        name: 'original_file_name',
        normalize: [],
        order: 0,
        original_fieldset: 'pe',
        short: 'Internal name of the file, provided at compile-time.',
        type: 'keyword',
      },
      'pe.product': {
        dashed_name: 'file-pe-product',
        description: 'Internal product name of the file, provided at compile-time.',
        example: 'MicrosoftÂ® WindowsÂ® Operating System',
        flat_name: 'file.pe.product',
        ignore_above: 1024,
        level: 'extended',
        name: 'product',
        normalize: [],
        order: 3,
        original_fieldset: 'pe',
        short: 'Internal product name of the file, provided at compile-time.',
        type: 'keyword',
      },
      size: {
        dashed_name: 'file-size',
        description: 'File size in bytes.\n\nOnly relevant when `file.type` is "file".',
        example: 16384,
        flat_name: 'file.size',
        level: 'extended',
        name: 'size',
        normalize: [],
        order: 15,
        short: 'File size in bytes.',
        type: 'long',
      },
      target_path: {
        dashed_name: 'file-target-path',
        description: 'Target path for symlinks.',
        flat_name: 'file.target_path',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'file.target_path.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'target_path',
        normalize: [],
        order: 5,
        short: 'Target path for symlinks.',
        type: 'keyword',
      },
      type: {
        dashed_name: 'file-type',
        description: 'File type (file, dir, or symlink).',
        example: 'file',
        flat_name: 'file.type',
        ignore_above: 1024,
        level: 'extended',
        name: 'type',
        normalize: [],
        order: 7,
        short: 'File type (file, dir, or symlink).',
        type: 'keyword',
      },
      uid: {
        dashed_name: 'file-uid',
        description: 'The user ID (UID) or security identifier (SID) of the file owner.',
        example: '1001',
        flat_name: 'file.uid',
        ignore_above: 1024,
        level: 'extended',
        name: 'uid',
        normalize: [],
        order: 10,
        short: 'The user ID (UID) or security identifier (SID) of the file owner.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'file',
    nestings: ['code_signature', 'hash', 'pe'],
    prefix: 'file.',
    short: 'Fields describing files.',
    title: 'File',
    type: 'group',
  },
  geo: {
    description:
      'Geo fields can carry data about a specific location related to an\nevent.\n\nThis geolocation information can be derived from techniques such as Geo IP, or\nbe user-supplied.',
    fields: {
      city_name: {
        dashed_name: 'geo-city-name',
        description: 'City name.',
        example: 'Montreal',
        flat_name: 'geo.city_name',
        ignore_above: 1024,
        level: 'core',
        name: 'city_name',
        normalize: [],
        order: 4,
        short: 'City name.',
        type: 'keyword',
      },
      continent_name: {
        dashed_name: 'geo-continent-name',
        description: 'Name of the continent.',
        example: 'North America',
        flat_name: 'geo.continent_name',
        ignore_above: 1024,
        level: 'core',
        name: 'continent_name',
        normalize: [],
        order: 1,
        short: 'Name of the continent.',
        type: 'keyword',
      },
      country_iso_code: {
        dashed_name: 'geo-country-iso-code',
        description: 'Country ISO code.',
        example: 'CA',
        flat_name: 'geo.country_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'country_iso_code',
        normalize: [],
        order: 5,
        short: 'Country ISO code.',
        type: 'keyword',
      },
      country_name: {
        dashed_name: 'geo-country-name',
        description: 'Country name.',
        example: 'Canada',
        flat_name: 'geo.country_name',
        ignore_above: 1024,
        level: 'core',
        name: 'country_name',
        normalize: [],
        order: 2,
        short: 'Country name.',
        type: 'keyword',
      },
      location: {
        dashed_name: 'geo-location',
        description: 'Longitude and latitude.',
        example: '{ "lon": -73.614830, "lat": 45.505918 }',
        flat_name: 'geo.location',
        level: 'core',
        name: 'location',
        normalize: [],
        order: 0,
        short: 'Longitude and latitude.',
        type: 'geo_point',
      },
      name: {
        dashed_name: 'geo-name',
        description:
          'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
        example: 'boston-dc',
        flat_name: 'geo.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 7,
        short: 'User-defined description of a location.',
        type: 'keyword',
      },
      region_iso_code: {
        dashed_name: 'geo-region-iso-code',
        description: 'Region ISO code.',
        example: 'CA-QC',
        flat_name: 'geo.region_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'region_iso_code',
        normalize: [],
        order: 6,
        short: 'Region ISO code.',
        type: 'keyword',
      },
      region_name: {
        dashed_name: 'geo-region-name',
        description: 'Region name.',
        example: 'Quebec',
        flat_name: 'geo.region_name',
        ignore_above: 1024,
        level: 'core',
        name: 'region_name',
        normalize: [],
        order: 3,
        short: 'Region name.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'geo',
    prefix: 'geo.',
    reusable: {
      expected: ['client', 'destination', 'observer', 'host', 'server', 'source'],
      top_level: false,
    },
    short: 'Fields describing a location.',
    title: 'Geo',
    type: 'group',
  },
  group: {
    description: 'The group fields are meant to represent groups that are relevant to\nthe event.',
    fields: {
      domain: {
        dashed_name: 'group-domain',
        description:
          'Name of the directory the group is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'group.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 2,
        short: 'Name of the directory the group is a member of.',
        type: 'keyword',
      },
      id: {
        dashed_name: 'group-id',
        description: 'Unique identifier for the group on the system/platform.',
        flat_name: 'group.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        short: 'Unique identifier for the group on the system/platform.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'group-name',
        description: 'Name of the group.',
        flat_name: 'group.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        short: 'Name of the group.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'group',
    prefix: 'group.',
    reusable: {
      expected: ['user'],
      top_level: true,
    },
    short: "User's group relevant to the event.",
    title: 'Group',
    type: 'group',
  },
  hash: {
    description:
      'The hash fields represent different hash algorithms and their values.\n\nField names for common hashes (e.g. MD5, SHA1) are predefined. Add fields for\nother hashes by lowercasing the hash algorithm name and using underscore separators\nas appropriate (snake case, e.g. sha3_512).',
    fields: {
      md5: {
        dashed_name: 'hash-md5',
        description: 'MD5 hash.',
        flat_name: 'hash.md5',
        ignore_above: 1024,
        level: 'extended',
        name: 'md5',
        normalize: [],
        order: 0,
        short: 'MD5 hash.',
        type: 'keyword',
      },
      sha1: {
        dashed_name: 'hash-sha1',
        description: 'SHA1 hash.',
        flat_name: 'hash.sha1',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha1',
        normalize: [],
        order: 1,
        short: 'SHA1 hash.',
        type: 'keyword',
      },
      sha256: {
        dashed_name: 'hash-sha256',
        description: 'SHA256 hash.',
        flat_name: 'hash.sha256',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha256',
        normalize: [],
        order: 2,
        short: 'SHA256 hash.',
        type: 'keyword',
      },
      sha512: {
        dashed_name: 'hash-sha512',
        description: 'SHA512 hash.',
        flat_name: 'hash.sha512',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha512',
        normalize: [],
        order: 3,
        short: 'SHA512 hash.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'hash',
    prefix: 'hash.',
    reusable: {
      expected: ['file', 'process', 'process.parent', 'dll'],
      top_level: false,
    },
    short: 'Hashes, usually file hashes.',
    title: 'Hash',
    type: 'group',
  },
  host: {
    description:
      'A host is defined as a general computing instance.\n\nECS host.* fields should be populated with details about the host on which the\nevent happened, or from which the measurement was taken. Host types include hardware,\nvirtual machines, Docker containers, and Kubernetes nodes.',
    fields: {
      architecture: {
        dashed_name: 'host-architecture',
        description: 'Operating system architecture.',
        example: 'x86_64',
        flat_name: 'host.architecture',
        ignore_above: 1024,
        level: 'core',
        name: 'architecture',
        normalize: [],
        order: 7,
        short: 'Operating system architecture.',
        type: 'keyword',
      },
      domain: {
        dashed_name: 'host-domain',
        description:
          'Name of the domain of which the host is a member.\n\nFor example, on Windows this could be the host of Active Directory domain\nor NetBIOS domain name. For Linux this could be the domain of the hosts\nLDAP provider.',
        example: 'CONTOSO',
        flat_name: 'host.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 8,
        short: 'Name of the directory the group is a member of.',
        type: 'keyword',
      },
      'geo.city_name': {
        dashed_name: 'host-geo-city-name',
        description: 'City name.',
        example: 'Montreal',
        flat_name: 'host.geo.city_name',
        ignore_above: 1024,
        level: 'core',
        name: 'city_name',
        normalize: [],
        order: 4,
        original_fieldset: 'geo',
        short: 'City name.',
        type: 'keyword',
      },
      'geo.continent_name': {
        dashed_name: 'host-geo-continent-name',
        description: 'Name of the continent.',
        example: 'North America',
        flat_name: 'host.geo.continent_name',
        ignore_above: 1024,
        level: 'core',
        name: 'continent_name',
        normalize: [],
        order: 1,
        original_fieldset: 'geo',
        short: 'Name of the continent.',
        type: 'keyword',
      },
      'geo.country_iso_code': {
        dashed_name: 'host-geo-country-iso-code',
        description: 'Country ISO code.',
        example: 'CA',
        flat_name: 'host.geo.country_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'country_iso_code',
        normalize: [],
        order: 5,
        original_fieldset: 'geo',
        short: 'Country ISO code.',
        type: 'keyword',
      },
      'geo.country_name': {
        dashed_name: 'host-geo-country-name',
        description: 'Country name.',
        example: 'Canada',
        flat_name: 'host.geo.country_name',
        ignore_above: 1024,
        level: 'core',
        name: 'country_name',
        normalize: [],
        order: 2,
        original_fieldset: 'geo',
        short: 'Country name.',
        type: 'keyword',
      },
      'geo.location': {
        dashed_name: 'host-geo-location',
        description: 'Longitude and latitude.',
        example: '{ "lon": -73.614830, "lat": 45.505918 }',
        flat_name: 'host.geo.location',
        level: 'core',
        name: 'location',
        normalize: [],
        order: 0,
        original_fieldset: 'geo',
        short: 'Longitude and latitude.',
        type: 'geo_point',
      },
      'geo.name': {
        dashed_name: 'host-geo-name',
        description:
          'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
        example: 'boston-dc',
        flat_name: 'host.geo.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 7,
        original_fieldset: 'geo',
        short: 'User-defined description of a location.',
        type: 'keyword',
      },
      'geo.region_iso_code': {
        dashed_name: 'host-geo-region-iso-code',
        description: 'Region ISO code.',
        example: 'CA-QC',
        flat_name: 'host.geo.region_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'region_iso_code',
        normalize: [],
        order: 6,
        original_fieldset: 'geo',
        short: 'Region ISO code.',
        type: 'keyword',
      },
      'geo.region_name': {
        dashed_name: 'host-geo-region-name',
        description: 'Region name.',
        example: 'Quebec',
        flat_name: 'host.geo.region_name',
        ignore_above: 1024,
        level: 'core',
        name: 'region_name',
        normalize: [],
        order: 3,
        original_fieldset: 'geo',
        short: 'Region name.',
        type: 'keyword',
      },
      hostname: {
        dashed_name: 'host-hostname',
        description:
          'Hostname of the host.\n\nIt normally contains what the `hostname` command returns on the host machine.',
        flat_name: 'host.hostname',
        ignore_above: 1024,
        level: 'core',
        name: 'hostname',
        normalize: [],
        order: 0,
        short: 'Hostname of the host.',
        type: 'keyword',
      },
      id: {
        dashed_name: 'host-id',
        description:
          'Unique host id.\n\nAs hostname is not always unique, use values that are meaningful in your environment.\n\nExample: The current usage of `beat.name`.',
        flat_name: 'host.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 2,
        short: 'Unique host id.',
        type: 'keyword',
      },
      ip: {
        dashed_name: 'host-ip',
        description: 'Host ip addresses.',
        flat_name: 'host.ip',
        level: 'core',
        name: 'ip',
        normalize: ['array'],
        order: 3,
        short: 'Host ip addresses.',
        type: 'ip',
      },
      mac: {
        dashed_name: 'host-mac',
        description: 'Host mac addresses.',
        flat_name: 'host.mac',
        ignore_above: 1024,
        level: 'core',
        name: 'mac',
        normalize: ['array'],
        order: 4,
        short: 'Host mac addresses.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'host-name',
        description:
          'Name of the host.\n\nIt can contain what `hostname` returns on Unix systems, the fully qualified\ndomain name, or a name specified by the user. The sender decides which value\nto use.',
        flat_name: 'host.name',
        ignore_above: 1024,
        level: 'core',
        name: 'name',
        normalize: [],
        order: 1,
        short: 'Name of the host.',
        type: 'keyword',
      },
      'os.family': {
        dashed_name: 'host-os-family',
        description: 'OS family (such as redhat, debian, freebsd, windows).',
        example: 'debian',
        flat_name: 'host.os.family',
        ignore_above: 1024,
        level: 'extended',
        name: 'family',
        normalize: [],
        order: 3,
        original_fieldset: 'os',
        short: 'OS family (such as redhat, debian, freebsd, windows).',
        type: 'keyword',
      },
      'os.full': {
        dashed_name: 'host-os-full',
        description: 'Operating system name, including the version or code name.',
        example: 'Mac OS Mojave',
        flat_name: 'host.os.full',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'host.os.full.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full',
        normalize: [],
        order: 2,
        original_fieldset: 'os',
        short: 'Operating system name, including the version or code name.',
        type: 'keyword',
      },
      'os.kernel': {
        dashed_name: 'host-os-kernel',
        description: 'Operating system kernel version as a raw string.',
        example: '4.4.0-112-generic',
        flat_name: 'host.os.kernel',
        ignore_above: 1024,
        level: 'extended',
        name: 'kernel',
        normalize: [],
        order: 5,
        original_fieldset: 'os',
        short: 'Operating system kernel version as a raw string.',
        type: 'keyword',
      },
      'os.name': {
        dashed_name: 'host-os-name',
        description: 'Operating system name, without the version.',
        example: 'Mac OS X',
        flat_name: 'host.os.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'host.os.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'os',
        short: 'Operating system name, without the version.',
        type: 'keyword',
      },
      'os.platform': {
        dashed_name: 'host-os-platform',
        description: 'Operating system platform (such centos, ubuntu, windows).',
        example: 'darwin',
        flat_name: 'host.os.platform',
        ignore_above: 1024,
        level: 'extended',
        name: 'platform',
        normalize: [],
        order: 0,
        original_fieldset: 'os',
        short: 'Operating system platform (such centos, ubuntu, windows).',
        type: 'keyword',
      },
      'os.version': {
        dashed_name: 'host-os-version',
        description: 'Operating system version as a raw string.',
        example: '10.14.1',
        flat_name: 'host.os.version',
        ignore_above: 1024,
        level: 'extended',
        name: 'version',
        normalize: [],
        order: 4,
        original_fieldset: 'os',
        short: 'Operating system version as a raw string.',
        type: 'keyword',
      },
      type: {
        dashed_name: 'host-type',
        description:
          'Type of host.\n\nFor Cloud providers this can be the machine type like `t2.medium`. If vm,\nthis could be the container, for example, or other information meaningful\nin your environment.',
        flat_name: 'host.type',
        ignore_above: 1024,
        level: 'core',
        name: 'type',
        normalize: [],
        order: 5,
        short: 'Type of host.',
        type: 'keyword',
      },
      uptime: {
        dashed_name: 'host-uptime',
        description: 'Seconds the host has been up.',
        example: 1325,
        flat_name: 'host.uptime',
        level: 'extended',
        name: 'uptime',
        normalize: [],
        order: 6,
        short: 'Seconds the host has been up.',
        type: 'long',
      },
      'user.domain': {
        dashed_name: 'host-user-domain',
        description:
          'Name of the directory the user is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'host.user.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 5,
        original_fieldset: 'user',
        short: 'Name of the directory the user is a member of.',
        type: 'keyword',
      },
      'user.email': {
        dashed_name: 'host-user-email',
        description: 'User email address.',
        flat_name: 'host.user.email',
        ignore_above: 1024,
        level: 'extended',
        name: 'email',
        normalize: [],
        order: 3,
        original_fieldset: 'user',
        short: 'User email address.',
        type: 'keyword',
      },
      'user.full_name': {
        dashed_name: 'host-user-full-name',
        description: "User's full name, if available.",
        example: 'Albert Einstein',
        flat_name: 'host.user.full_name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'host.user.full_name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full_name',
        normalize: [],
        order: 2,
        original_fieldset: 'user',
        short: "User's full name, if available.",
        type: 'keyword',
      },
      'user.group.domain': {
        dashed_name: 'host-user-group-domain',
        description:
          'Name of the directory the group is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'host.user.group.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 2,
        original_fieldset: 'group',
        short: 'Name of the directory the group is a member of.',
        type: 'keyword',
      },
      'user.group.id': {
        dashed_name: 'host-user-group-id',
        description: 'Unique identifier for the group on the system/platform.',
        flat_name: 'host.user.group.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'group',
        short: 'Unique identifier for the group on the system/platform.',
        type: 'keyword',
      },
      'user.group.name': {
        dashed_name: 'host-user-group-name',
        description: 'Name of the group.',
        flat_name: 'host.user.group.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'group',
        short: 'Name of the group.',
        type: 'keyword',
      },
      'user.hash': {
        dashed_name: 'host-user-hash',
        description:
          'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
        flat_name: 'host.user.hash',
        ignore_above: 1024,
        level: 'extended',
        name: 'hash',
        normalize: [],
        order: 4,
        original_fieldset: 'user',
        short: 'Unique user hash to correlate information for a user in anonymized form.',
        type: 'keyword',
      },
      'user.id': {
        dashed_name: 'host-user-id',
        description: 'Unique identifier of the user.',
        flat_name: 'host.user.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'user',
        short: 'Unique identifier of the user.',
        type: 'keyword',
      },
      'user.name': {
        dashed_name: 'host-user-name',
        description: 'Short name or login of the user.',
        example: 'albert',
        flat_name: 'host.user.name',
        ignore_above: 1024,
        level: 'core',
        multi_fields: [
          {
            flat_name: 'host.user.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'user',
        short: 'Short name or login of the user.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'host',
    nestings: ['geo', 'os', 'user'],
    prefix: 'host.',
    short: 'Fields describing the relevant computing instance.',
    title: 'Host',
    type: 'group',
  },
  http: {
    description:
      'Fields related to HTTP activity. Use the `url` field set to store the\nurl of the request.',
    fields: {
      'request.body.bytes': {
        dashed_name: 'http-request-body-bytes',
        description: 'Size in bytes of the request body.',
        example: 887,
        flat_name: 'http.request.body.bytes',
        format: 'bytes',
        level: 'extended',
        name: 'request.body.bytes',
        normalize: [],
        order: 7,
        short: 'Size in bytes of the request body.',
        type: 'long',
      },
      'request.body.content': {
        dashed_name: 'http-request-body-content',
        description: 'The full HTTP request body.',
        example: 'Hello world',
        flat_name: 'http.request.body.content',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'http.request.body.content.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'request.body.content',
        normalize: [],
        order: 1,
        short: 'The full HTTP request body.',
        type: 'keyword',
      },
      'request.bytes': {
        dashed_name: 'http-request-bytes',
        description: 'Total size in bytes of the request (body and headers).',
        example: 1437,
        flat_name: 'http.request.bytes',
        format: 'bytes',
        level: 'extended',
        name: 'request.bytes',
        normalize: [],
        order: 6,
        short: 'Total size in bytes of the request (body and headers).',
        type: 'long',
      },
      'request.method': {
        dashed_name: 'http-request-method',
        description:
          'HTTP request method.\n\nThe field value must be normalized to lowercase for querying. See the documentation\nsection "Implementing ECS".',
        example: 'get, post, put',
        flat_name: 'http.request.method',
        ignore_above: 1024,
        level: 'extended',
        name: 'request.method',
        normalize: [],
        order: 0,
        short: 'HTTP request method.',
        type: 'keyword',
      },
      'request.referrer': {
        dashed_name: 'http-request-referrer',
        description: 'Referrer for this HTTP request.',
        example: 'https://blog.example.com/',
        flat_name: 'http.request.referrer',
        ignore_above: 1024,
        level: 'extended',
        name: 'request.referrer',
        normalize: [],
        order: 2,
        short: 'Referrer for this HTTP request.',
        type: 'keyword',
      },
      'response.body.bytes': {
        dashed_name: 'http-response-body-bytes',
        description: 'Size in bytes of the response body.',
        example: 887,
        flat_name: 'http.response.body.bytes',
        format: 'bytes',
        level: 'extended',
        name: 'response.body.bytes',
        normalize: [],
        order: 9,
        short: 'Size in bytes of the response body.',
        type: 'long',
      },
      'response.body.content': {
        dashed_name: 'http-response-body-content',
        description: 'The full HTTP response body.',
        example: 'Hello world',
        flat_name: 'http.response.body.content',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'http.response.body.content.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'response.body.content',
        normalize: [],
        order: 4,
        short: 'The full HTTP response body.',
        type: 'keyword',
      },
      'response.bytes': {
        dashed_name: 'http-response-bytes',
        description: 'Total size in bytes of the response (body and headers).',
        example: 1437,
        flat_name: 'http.response.bytes',
        format: 'bytes',
        level: 'extended',
        name: 'response.bytes',
        normalize: [],
        order: 8,
        short: 'Total size in bytes of the response (body and headers).',
        type: 'long',
      },
      'response.status_code': {
        dashed_name: 'http-response-status-code',
        description: 'HTTP response status code.',
        example: 404,
        flat_name: 'http.response.status_code',
        format: 'string',
        level: 'extended',
        name: 'response.status_code',
        normalize: [],
        order: 3,
        short: 'HTTP response status code.',
        type: 'long',
      },
      version: {
        dashed_name: 'http-version',
        description: 'HTTP version.',
        example: 1.1,
        flat_name: 'http.version',
        ignore_above: 1024,
        level: 'extended',
        name: 'version',
        normalize: [],
        order: 5,
        short: 'HTTP version.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'http',
    prefix: 'http.',
    short: 'Fields describing an HTTP request.',
    title: 'HTTP',
    type: 'group',
  },
  interface: {
    description:
      'The interface fields are used to record ingress and egress interface\ninformation when reported by an observer (e.g. firewall, router, load balancer)\nin the context of the observer handling a network connection.  In the case of\na single observer interface (e.g. network sensor on a span port) only the observer.ingress\ninformation should be populated.',
    fields: {
      alias: {
        dashed_name: 'interface-alias',
        description:
          'Interface alias as reported by the system, typically used in firewall\nimplementations for e.g. inside, outside, or dmz logical interface naming.',
        example: 'outside',
        flat_name: 'interface.alias',
        ignore_above: 1024,
        level: 'extended',
        name: 'alias',
        normalize: [],
        order: 2,
        short: 'Interface alias',
        type: 'keyword',
      },
      id: {
        dashed_name: 'interface-id',
        description: 'Interface ID as reported by an observer (typically SNMP interface\nID).',
        example: 10,
        flat_name: 'interface.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        short: 'Interface ID',
        type: 'keyword',
      },
      name: {
        dashed_name: 'interface-name',
        description: 'Interface name as reported by the system.',
        example: 'eth0',
        flat_name: 'interface.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        short: 'Interface name',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'interface',
    prefix: 'interface.',
    reusable: {
      expected: ['observer.ingress', 'observer.egress'],
      top_level: false,
    },
    short: 'Fields to describe observer interface information.',
    title: 'Interface',
    type: 'group',
  },
  log: {
    description:
      'Details about the event logging mechanism or logging transport.\n\nThe log.* fields are typically populated with details about the logging mechanism\nused to create and/or transport the event. For example, syslog details belong\nunder `log.syslog.*`.\n\nThe details specific to your event source are typically not logged under `log.*`,\nbut rather in `event.*` or in other ECS fields.',
    fields: {
      'file.path': {
        dashed_name: 'log-file-path',
        description:
          "Full path to the log file this event came from, including the\nfile name. It should include the drive letter, when appropriate.\n\nIf the event wasn't read from a log file, do not populate this field.",
        example: '/var/log/fun-times.log',
        flat_name: 'log.file.path',
        ignore_above: 1024,
        level: 'extended',
        name: 'file.path',
        normalize: [],
        order: 1,
        short: 'Full path to the log file this event came from.',
        type: 'keyword',
      },
      level: {
        dashed_name: 'log-level',
        description:
          'Original log level of the log event.\n\nIf the source of the event provides a log level or textual severity, this\nis the one that goes in `log.level`. If your source does not specify one,\nyou may put your event transport severity here (e.g. Syslog severity).\n\nSome examples are `warn`, `err`, `i`, `informational`.',
        example: 'error',
        flat_name: 'log.level',
        ignore_above: 1024,
        level: 'core',
        name: 'level',
        normalize: [],
        order: 0,
        short: 'Log level of the log event.',
        type: 'keyword',
      },
      logger: {
        dashed_name: 'log-logger',
        description:
          'The name of the logger inside an application. This is usually the\nname of the class which initialized the logger, or can be a custom name.',
        example: 'org.elasticsearch.bootstrap.Bootstrap',
        flat_name: 'log.logger',
        ignore_above: 1024,
        level: 'core',
        name: 'logger',
        normalize: [],
        order: 3,
        short: 'Name of the logger.',
        type: 'keyword',
      },
      'origin.file.line': {
        dashed_name: 'log-origin-file-line',
        description:
          'The line number of the file containing the source code which originated\nthe log event.',
        example: 42,
        flat_name: 'log.origin.file.line',
        level: 'extended',
        name: 'origin.file.line',
        normalize: [],
        order: 5,
        short: 'The line number of the file which originated the log event.',
        type: 'integer',
      },
      'origin.file.name': {
        dashed_name: 'log-origin-file-name',
        description:
          'The name of the file containing the source code which originated\nthe log event.\n\nNote that this field is not meant to capture the log file. The correct field\nto capture the log file is `log.file.path`.',
        example: 'Bootstrap.java',
        flat_name: 'log.origin.file.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'origin.file.name',
        normalize: [],
        order: 4,
        short: 'The code file which originated the log event.',
        type: 'keyword',
      },
      'origin.function': {
        dashed_name: 'log-origin-function',
        description: 'The name of the function or method which originated the log event.',
        example: 'init',
        flat_name: 'log.origin.function',
        ignore_above: 1024,
        level: 'extended',
        name: 'origin.function',
        normalize: [],
        order: 6,
        short: 'The function which originated the log event.',
        type: 'keyword',
      },
      original: {
        dashed_name: 'log-original',
        description:
          'This is the original log message and contains the full log message\nbefore splitting it up in multiple parts.\n\nIn contrast to the `message` field which can contain an extracted part of\nthe log message, this field contains the original, full log message. It can\nhave already some modifications applied like encoding or new lines removed\nto clean up the log message.\n\nThis field is not indexed and doc_values are disabled so it cannot be queried\nbut the value can be retrieved from `_source`.',
        doc_values: false,
        example: 'Sep 19 08:26:10 localhost My log',
        flat_name: 'log.original',
        ignore_above: 1024,
        index: false,
        level: 'core',
        name: 'original',
        normalize: [],
        order: 2,
        short: 'Original log message with light interpretation only (encoding, newlines).',
        type: 'keyword',
      },
      syslog: {
        dashed_name: 'log-syslog',
        description:
          'The Syslog metadata of the event, if the event was transmitted\nvia Syslog. Please see RFCs 5424 or 3164.',
        flat_name: 'log.syslog',
        level: 'extended',
        name: 'syslog',
        normalize: [],
        object_type: 'keyword',
        order: 7,
        short: 'Syslog metadata',
        type: 'object',
      },
      'syslog.facility.code': {
        dashed_name: 'log-syslog-facility-code',
        description:
          'The Syslog numeric facility of the log event, if available.\n\nAccording to RFCs 5424 and 3164, this value should be an integer between 0\nand 23.',
        example: 23,
        flat_name: 'log.syslog.facility.code',
        format: 'string',
        level: 'extended',
        name: 'syslog.facility.code',
        normalize: [],
        order: 10,
        short: 'Syslog numeric facility of the event.',
        type: 'long',
      },
      'syslog.facility.name': {
        dashed_name: 'log-syslog-facility-name',
        description: 'The Syslog text-based facility of the log event, if available.',
        example: 'local7',
        flat_name: 'log.syslog.facility.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'syslog.facility.name',
        normalize: [],
        order: 11,
        short: 'Syslog text-based facility of the event.',
        type: 'keyword',
      },
      'syslog.priority': {
        dashed_name: 'log-syslog-priority',
        description:
          'Syslog numeric priority of the event, if available.\n\nAccording to RFCs 5424 and 3164, the priority is 8 * facility + severity.\nThis number is therefore expected to contain a value between 0 and 191.',
        example: 135,
        flat_name: 'log.syslog.priority',
        format: 'string',
        level: 'extended',
        name: 'syslog.priority',
        normalize: [],
        order: 12,
        short: 'Syslog priority of the event.',
        type: 'long',
      },
      'syslog.severity.code': {
        dashed_name: 'log-syslog-severity-code',
        description:
          'The Syslog numeric severity of the log event, if available.\n\nIf the event source publishing via Syslog provides a different numeric severity\nvalue (e.g. firewall, IDS), your source numeric severity should go to `event.severity`.\nIf the event source does not specify a distinct severity, you can optionally\ncopy the Syslog severity to `event.severity`.',
        example: 3,
        flat_name: 'log.syslog.severity.code',
        level: 'extended',
        name: 'syslog.severity.code',
        normalize: [],
        order: 8,
        short: 'Syslog numeric severity of the event.',
        type: 'long',
      },
      'syslog.severity.name': {
        dashed_name: 'log-syslog-severity-name',
        description:
          'The Syslog numeric severity of the log event, if available.\n\nIf the event source publishing via Syslog provides a different severity value\n(e.g. firewall, IDS), your source text severity should go to `log.level`.\nIf the event source does not specify a distinct severity, you can optionally\ncopy the Syslog severity to `log.level`.',
        example: 'Error',
        flat_name: 'log.syslog.severity.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'syslog.severity.name',
        normalize: [],
        order: 9,
        short: 'Syslog text-based severity of the event.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'log',
    prefix: 'log.',
    short: "Details about the event's logging mechanism.",
    title: 'Log',
    type: 'group',
  },
  network: {
    description:
      'The network is defined as the communication path over which a host\nor network event happens.\n\nThe network.* fields should be populated with details about the network activity\nassociated with an event.',
    fields: {
      application: {
        dashed_name: 'network-application',
        description:
          'A name given to an application level protocol. This can be arbitrarily\nassigned for things like microservices, but also apply to things like skype,\nicq, facebook, twitter. This would be used in situations where the vendor\nor service can be decoded such as from the source/dest IP owners, ports, or\nwire format.\n\nThe field value must be normalized to lowercase for querying. See the documentation\nsection "Implementing ECS".',
        example: 'aim',
        flat_name: 'network.application',
        ignore_above: 1024,
        level: 'extended',
        name: 'application',
        normalize: [],
        order: 4,
        short: 'Application level protocol name.',
        type: 'keyword',
      },
      bytes: {
        dashed_name: 'network-bytes',
        description:
          'Total bytes transferred in both directions.\n\nIf `source.bytes` and `destination.bytes` are known, `network.bytes` is their\nsum.',
        example: 368,
        flat_name: 'network.bytes',
        format: 'bytes',
        level: 'core',
        name: 'bytes',
        normalize: [],
        order: 9,
        short: 'Total bytes transferred in both directions.',
        type: 'long',
      },
      community_id: {
        dashed_name: 'network-community-id',
        description:
          'A hash of source and destination IPs and ports, as well as the\nprotocol used in a communication. This is a tool-agnostic standard to identify\nflows.\n\nLearn more at https://github.com/corelight/community-id-spec.',
        example: '1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=',
        flat_name: 'network.community_id',
        ignore_above: 1024,
        level: 'extended',
        name: 'community_id',
        normalize: [],
        order: 8,
        short: 'A hash of source and destination IPs and ports.',
        type: 'keyword',
      },
      direction: {
        dashed_name: 'network-direction',
        description:
          "Direction of the network traffic.\nRecommended values are:\n * inbound\n  * outbound\n  * internal\n  * external\n  * unknown\n\nWhen mapping events from a host-based monitoring context, populate this field from the host's point of view.\nWhen mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of your network perimeter.",
        example: 'inbound',
        flat_name: 'network.direction',
        ignore_above: 1024,
        level: 'core',
        name: 'direction',
        normalize: [],
        order: 6,
        short: 'Direction of the network traffic.',
        type: 'keyword',
      },
      forwarded_ip: {
        dashed_name: 'network-forwarded-ip',
        description: 'Host IP address when the source IP address is the proxy.',
        example: '192.1.1.2',
        flat_name: 'network.forwarded_ip',
        level: 'core',
        name: 'forwarded_ip',
        normalize: [],
        order: 7,
        short: 'Host IP address when the source IP address is the proxy.',
        type: 'ip',
      },
      iana_number: {
        dashed_name: 'network-iana-number',
        description:
          'IANA Protocol Number (https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).\nStandardized list of protocols. This aligns well with NetFlow and sFlow related\nlogs which use the IANA Protocol Number.',
        example: 6,
        flat_name: 'network.iana_number',
        ignore_above: 1024,
        level: 'extended',
        name: 'iana_number',
        normalize: [],
        order: 2,
        short: 'IANA Protocol Number.',
        type: 'keyword',
      },
      inner: {
        dashed_name: 'network-inner',
        description:
          'Network.inner fields are added in addition to network.vlan fields\nto describe  the innermost VLAN when q-in-q VLAN tagging is present. Allowed\nfields include  vlan.id and vlan.name. Inner vlan fields are typically used\nwhen sending traffic with multiple 802.1q encapsulations to a network sensor\n(e.g. Zeek, Wireshark.)',
        flat_name: 'network.inner',
        level: 'extended',
        name: 'inner',
        normalize: [],
        object_type: 'keyword',
        order: 11,
        short: 'Inner VLAN tag information',
        type: 'object',
      },
      'inner.vlan.id': {
        dashed_name: 'network-inner-vlan-id',
        description: 'VLAN ID as reported by the observer.',
        example: 10,
        flat_name: 'network.inner.vlan.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'vlan',
        short: 'VLAN ID as reported by the observer.',
        type: 'keyword',
      },
      'inner.vlan.name': {
        dashed_name: 'network-inner-vlan-name',
        description: 'Optional VLAN name as reported by the observer.',
        example: 'outside',
        flat_name: 'network.inner.vlan.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'vlan',
        short: 'Optional VLAN name as reported by the observer.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'network-name',
        description: 'Name given by operators to sections of their network.',
        example: 'Guest Wifi',
        flat_name: 'network.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 0,
        short: 'Name given by operators to sections of their network.',
        type: 'keyword',
      },
      packets: {
        dashed_name: 'network-packets',
        description:
          'Total packets transferred in both directions.\n\nIf `source.packets` and `destination.packets` are known, `network.packets`\nis their sum.',
        example: 24,
        flat_name: 'network.packets',
        level: 'core',
        name: 'packets',
        normalize: [],
        order: 10,
        short: 'Total packets transferred in both directions.',
        type: 'long',
      },
      protocol: {
        dashed_name: 'network-protocol',
        description:
          'L7 Network protocol name. ex. http, lumberjack, transport protocol.\n\nThe field value must be normalized to lowercase for querying. See the documentation\nsection "Implementing ECS".',
        example: 'http',
        flat_name: 'network.protocol',
        ignore_above: 1024,
        level: 'core',
        name: 'protocol',
        normalize: [],
        order: 5,
        short: 'L7 Network protocol name.',
        type: 'keyword',
      },
      transport: {
        dashed_name: 'network-transport',
        description:
          'Same as network.iana_number, but instead using the Keyword name\nof the transport layer (udp, tcp, ipv6-icmp, etc.)\n\nThe field value must be normalized to lowercase for querying. See the documentation\nsection "Implementing ECS".',
        example: 'tcp',
        flat_name: 'network.transport',
        ignore_above: 1024,
        level: 'core',
        name: 'transport',
        normalize: [],
        order: 3,
        short: 'Protocol Name corresponding to the field `iana_number`.',
        type: 'keyword',
      },
      type: {
        dashed_name: 'network-type',
        description:
          'In the OSI Model this would be the Network Layer. ipv4, ipv6,\nipsec, pim, etc\n\nThe field value must be normalized to lowercase for querying. See the documentation\nsection "Implementing ECS".',
        example: 'ipv4',
        flat_name: 'network.type',
        ignore_above: 1024,
        level: 'core',
        name: 'type',
        normalize: [],
        order: 1,
        short: 'In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec,\npim, etc',
        type: 'keyword',
      },
      'vlan.id': {
        dashed_name: 'network-vlan-id',
        description: 'VLAN ID as reported by the observer.',
        example: 10,
        flat_name: 'network.vlan.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'vlan',
        short: 'VLAN ID as reported by the observer.',
        type: 'keyword',
      },
      'vlan.name': {
        dashed_name: 'network-vlan-name',
        description: 'Optional VLAN name as reported by the observer.',
        example: 'outside',
        flat_name: 'network.vlan.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'vlan',
        short: 'Optional VLAN name as reported by the observer.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'network',
    nestings: ['vlan'],
    prefix: 'network.',
    short: 'Fields describing the communication path over which the event happened.',
    title: 'Network',
    type: 'group',
  },
  observer: {
    description:
      'An observer is defined as a special network, security, or application\ndevice used to detect, observe, or create network, security, or application-related\nevents and metrics.\n\nThis could be a custom hardware appliance or a server that has been configured\nto run special network, security, or application software. Examples include firewalls,\nweb proxies, intrusion detection/prevention systems, network monitoring sensors,\nweb application firewalls, data loss prevention systems, and APM servers. The\nobserver.* fields shall be populated with details of the system, if any, that\ndetects, observes and/or creates a network, security, or application event or\nmetric. Message queues and ETL components used in processing events or metrics\nare not considered observers in ECS.',
    fields: {
      egress: {
        dashed_name: 'observer-egress',
        description:
          'Observer.egress holds information like interface number and name,\nvlan, and zone information to  classify egress traffic.  Single armed monitoring\nsuch as a network sensor on a span port should  only use observer.ingress\nto categorize traffic.',
        flat_name: 'observer.egress',
        level: 'extended',
        name: 'egress',
        normalize: [],
        object_type: 'keyword',
        order: 11,
        short: 'Object field for egress information',
        type: 'object',
      },
      'egress.interface.alias': {
        dashed_name: 'observer-egress-interface-alias',
        description:
          'Interface alias as reported by the system, typically used in firewall\nimplementations for e.g. inside, outside, or dmz logical interface naming.',
        example: 'outside',
        flat_name: 'observer.egress.interface.alias',
        ignore_above: 1024,
        level: 'extended',
        name: 'alias',
        normalize: [],
        order: 2,
        original_fieldset: 'interface',
        short: 'Interface alias',
        type: 'keyword',
      },
      'egress.interface.id': {
        dashed_name: 'observer-egress-interface-id',
        description: 'Interface ID as reported by an observer (typically SNMP interface\nID).',
        example: 10,
        flat_name: 'observer.egress.interface.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'interface',
        short: 'Interface ID',
        type: 'keyword',
      },
      'egress.interface.name': {
        dashed_name: 'observer-egress-interface-name',
        description: 'Interface name as reported by the system.',
        example: 'eth0',
        flat_name: 'observer.egress.interface.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'interface',
        short: 'Interface name',
        type: 'keyword',
      },
      'egress.vlan.id': {
        dashed_name: 'observer-egress-vlan-id',
        description: 'VLAN ID as reported by the observer.',
        example: 10,
        flat_name: 'observer.egress.vlan.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'vlan',
        short: 'VLAN ID as reported by the observer.',
        type: 'keyword',
      },
      'egress.vlan.name': {
        dashed_name: 'observer-egress-vlan-name',
        description: 'Optional VLAN name as reported by the observer.',
        example: 'outside',
        flat_name: 'observer.egress.vlan.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'vlan',
        short: 'Optional VLAN name as reported by the observer.',
        type: 'keyword',
      },
      'egress.zone': {
        dashed_name: 'observer-egress-zone',
        description:
          'Network zone of outbound traffic as reported by the observer to\ncategorize the destination area of egress  traffic, e.g. Internal, External,\nDMZ, HR, Legal, etc.',
        example: 'Public_Internet',
        flat_name: 'observer.egress.zone',
        ignore_above: 1024,
        level: 'extended',
        name: 'egress.zone',
        normalize: [],
        order: 12,
        short: 'Observer Egress zone',
        type: 'keyword',
      },
      'geo.city_name': {
        dashed_name: 'observer-geo-city-name',
        description: 'City name.',
        example: 'Montreal',
        flat_name: 'observer.geo.city_name',
        ignore_above: 1024,
        level: 'core',
        name: 'city_name',
        normalize: [],
        order: 4,
        original_fieldset: 'geo',
        short: 'City name.',
        type: 'keyword',
      },
      'geo.continent_name': {
        dashed_name: 'observer-geo-continent-name',
        description: 'Name of the continent.',
        example: 'North America',
        flat_name: 'observer.geo.continent_name',
        ignore_above: 1024,
        level: 'core',
        name: 'continent_name',
        normalize: [],
        order: 1,
        original_fieldset: 'geo',
        short: 'Name of the continent.',
        type: 'keyword',
      },
      'geo.country_iso_code': {
        dashed_name: 'observer-geo-country-iso-code',
        description: 'Country ISO code.',
        example: 'CA',
        flat_name: 'observer.geo.country_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'country_iso_code',
        normalize: [],
        order: 5,
        original_fieldset: 'geo',
        short: 'Country ISO code.',
        type: 'keyword',
      },
      'geo.country_name': {
        dashed_name: 'observer-geo-country-name',
        description: 'Country name.',
        example: 'Canada',
        flat_name: 'observer.geo.country_name',
        ignore_above: 1024,
        level: 'core',
        name: 'country_name',
        normalize: [],
        order: 2,
        original_fieldset: 'geo',
        short: 'Country name.',
        type: 'keyword',
      },
      'geo.location': {
        dashed_name: 'observer-geo-location',
        description: 'Longitude and latitude.',
        example: '{ "lon": -73.614830, "lat": 45.505918 }',
        flat_name: 'observer.geo.location',
        level: 'core',
        name: 'location',
        normalize: [],
        order: 0,
        original_fieldset: 'geo',
        short: 'Longitude and latitude.',
        type: 'geo_point',
      },
      'geo.name': {
        dashed_name: 'observer-geo-name',
        description:
          'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
        example: 'boston-dc',
        flat_name: 'observer.geo.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 7,
        original_fieldset: 'geo',
        short: 'User-defined description of a location.',
        type: 'keyword',
      },
      'geo.region_iso_code': {
        dashed_name: 'observer-geo-region-iso-code',
        description: 'Region ISO code.',
        example: 'CA-QC',
        flat_name: 'observer.geo.region_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'region_iso_code',
        normalize: [],
        order: 6,
        original_fieldset: 'geo',
        short: 'Region ISO code.',
        type: 'keyword',
      },
      'geo.region_name': {
        dashed_name: 'observer-geo-region-name',
        description: 'Region name.',
        example: 'Quebec',
        flat_name: 'observer.geo.region_name',
        ignore_above: 1024,
        level: 'core',
        name: 'region_name',
        normalize: [],
        order: 3,
        original_fieldset: 'geo',
        short: 'Region name.',
        type: 'keyword',
      },
      hostname: {
        dashed_name: 'observer-hostname',
        description: 'Hostname of the observer.',
        flat_name: 'observer.hostname',
        ignore_above: 1024,
        level: 'core',
        name: 'hostname',
        normalize: [],
        order: 2,
        short: 'Hostname of the observer.',
        type: 'keyword',
      },
      ingress: {
        dashed_name: 'observer-ingress',
        description:
          'Observer.ingress holds information like interface number and name,\nvlan, and zone information to  classify ingress traffic.  Single armed monitoring\nsuch as a network sensor on a span port should  only use observer.ingress\nto categorize traffic.',
        flat_name: 'observer.ingress',
        level: 'extended',
        name: 'ingress',
        normalize: [],
        object_type: 'keyword',
        order: 9,
        short: 'Object field for ingress information',
        type: 'object',
      },
      'ingress.interface.alias': {
        dashed_name: 'observer-ingress-interface-alias',
        description:
          'Interface alias as reported by the system, typically used in firewall\nimplementations for e.g. inside, outside, or dmz logical interface naming.',
        example: 'outside',
        flat_name: 'observer.ingress.interface.alias',
        ignore_above: 1024,
        level: 'extended',
        name: 'alias',
        normalize: [],
        order: 2,
        original_fieldset: 'interface',
        short: 'Interface alias',
        type: 'keyword',
      },
      'ingress.interface.id': {
        dashed_name: 'observer-ingress-interface-id',
        description: 'Interface ID as reported by an observer (typically SNMP interface\nID).',
        example: 10,
        flat_name: 'observer.ingress.interface.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'interface',
        short: 'Interface ID',
        type: 'keyword',
      },
      'ingress.interface.name': {
        dashed_name: 'observer-ingress-interface-name',
        description: 'Interface name as reported by the system.',
        example: 'eth0',
        flat_name: 'observer.ingress.interface.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'interface',
        short: 'Interface name',
        type: 'keyword',
      },
      'ingress.vlan.id': {
        dashed_name: 'observer-ingress-vlan-id',
        description: 'VLAN ID as reported by the observer.',
        example: 10,
        flat_name: 'observer.ingress.vlan.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'vlan',
        short: 'VLAN ID as reported by the observer.',
        type: 'keyword',
      },
      'ingress.vlan.name': {
        dashed_name: 'observer-ingress-vlan-name',
        description: 'Optional VLAN name as reported by the observer.',
        example: 'outside',
        flat_name: 'observer.ingress.vlan.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'vlan',
        short: 'Optional VLAN name as reported by the observer.',
        type: 'keyword',
      },
      'ingress.zone': {
        dashed_name: 'observer-ingress-zone',
        description:
          'Network zone of incoming traffic as reported by the observer to\ncategorize the source area of ingress  traffic. e.g. internal, External, DMZ,\nHR, Legal, etc.',
        example: 'DMZ',
        flat_name: 'observer.ingress.zone',
        ignore_above: 1024,
        level: 'extended',
        name: 'ingress.zone',
        normalize: [],
        order: 10,
        short: 'Observer ingress zone',
        type: 'keyword',
      },
      ip: {
        dashed_name: 'observer-ip',
        description: 'IP addresses of the observer.',
        flat_name: 'observer.ip',
        level: 'core',
        name: 'ip',
        normalize: ['array'],
        order: 1,
        short: 'IP addresses of the observer.',
        type: 'ip',
      },
      mac: {
        dashed_name: 'observer-mac',
        description: 'MAC addresses of the observer',
        flat_name: 'observer.mac',
        ignore_above: 1024,
        level: 'core',
        name: 'mac',
        normalize: ['array'],
        order: 0,
        short: 'MAC addresses of the observer',
        type: 'keyword',
      },
      name: {
        dashed_name: 'observer-name',
        description:
          'Custom name of the observer.\n\nThis is a name that can be given to an observer. This can be helpful for example\nif multiple firewalls of the same model are used in an organization.\n\nIf no custom name is needed, the field can be left empty.',
        example: '1_proxySG',
        flat_name: 'observer.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 3,
        short: 'Custom name of the observer.',
        type: 'keyword',
      },
      'os.family': {
        dashed_name: 'observer-os-family',
        description: 'OS family (such as redhat, debian, freebsd, windows).',
        example: 'debian',
        flat_name: 'observer.os.family',
        ignore_above: 1024,
        level: 'extended',
        name: 'family',
        normalize: [],
        order: 3,
        original_fieldset: 'os',
        short: 'OS family (such as redhat, debian, freebsd, windows).',
        type: 'keyword',
      },
      'os.full': {
        dashed_name: 'observer-os-full',
        description: 'Operating system name, including the version or code name.',
        example: 'Mac OS Mojave',
        flat_name: 'observer.os.full',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'observer.os.full.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full',
        normalize: [],
        order: 2,
        original_fieldset: 'os',
        short: 'Operating system name, including the version or code name.',
        type: 'keyword',
      },
      'os.kernel': {
        dashed_name: 'observer-os-kernel',
        description: 'Operating system kernel version as a raw string.',
        example: '4.4.0-112-generic',
        flat_name: 'observer.os.kernel',
        ignore_above: 1024,
        level: 'extended',
        name: 'kernel',
        normalize: [],
        order: 5,
        original_fieldset: 'os',
        short: 'Operating system kernel version as a raw string.',
        type: 'keyword',
      },
      'os.name': {
        dashed_name: 'observer-os-name',
        description: 'Operating system name, without the version.',
        example: 'Mac OS X',
        flat_name: 'observer.os.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'observer.os.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'os',
        short: 'Operating system name, without the version.',
        type: 'keyword',
      },
      'os.platform': {
        dashed_name: 'observer-os-platform',
        description: 'Operating system platform (such centos, ubuntu, windows).',
        example: 'darwin',
        flat_name: 'observer.os.platform',
        ignore_above: 1024,
        level: 'extended',
        name: 'platform',
        normalize: [],
        order: 0,
        original_fieldset: 'os',
        short: 'Operating system platform (such centos, ubuntu, windows).',
        type: 'keyword',
      },
      'os.version': {
        dashed_name: 'observer-os-version',
        description: 'Operating system version as a raw string.',
        example: '10.14.1',
        flat_name: 'observer.os.version',
        ignore_above: 1024,
        level: 'extended',
        name: 'version',
        normalize: [],
        order: 4,
        original_fieldset: 'os',
        short: 'Operating system version as a raw string.',
        type: 'keyword',
      },
      product: {
        dashed_name: 'observer-product',
        description: 'The product name of the observer.',
        example: 's200',
        flat_name: 'observer.product',
        ignore_above: 1024,
        level: 'extended',
        name: 'product',
        normalize: [],
        order: 4,
        short: 'The product name of the observer.',
        type: 'keyword',
      },
      serial_number: {
        dashed_name: 'observer-serial-number',
        description: 'Observer serial number.',
        flat_name: 'observer.serial_number',
        ignore_above: 1024,
        level: 'extended',
        name: 'serial_number',
        normalize: [],
        order: 7,
        short: 'Observer serial number.',
        type: 'keyword',
      },
      type: {
        dashed_name: 'observer-type',
        description:
          'The type of the observer the data is coming from.\n\nThere is no predefined list of observer types. Some examples are `forwarder`,\n`firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.',
        example: 'firewall',
        flat_name: 'observer.type',
        ignore_above: 1024,
        level: 'core',
        name: 'type',
        normalize: [],
        order: 8,
        short: 'The type of the observer the data is coming from.',
        type: 'keyword',
      },
      vendor: {
        dashed_name: 'observer-vendor',
        description: 'Vendor name of the observer.',
        example: 'Symantec',
        flat_name: 'observer.vendor',
        ignore_above: 1024,
        level: 'core',
        name: 'vendor',
        normalize: [],
        order: 5,
        short: 'Vendor name of the observer.',
        type: 'keyword',
      },
      version: {
        dashed_name: 'observer-version',
        description: 'Observer version.',
        flat_name: 'observer.version',
        ignore_above: 1024,
        level: 'core',
        name: 'version',
        normalize: [],
        order: 6,
        short: 'Observer version.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'observer',
    nestings: ['geo', 'interface', 'os', 'vlan'],
    prefix: 'observer.',
    short: 'Fields describing an entity observing the event from outside the host.',
    title: 'Observer',
    type: 'group',
  },
  organization: {
    description:
      'The organization fields enrich data with information about the company\nor entity the data is associated with.\n\nThese fields help you arrange or filter data stored in an index by one or multiple\norganizations.',
    fields: {
      id: {
        dashed_name: 'organization-id',
        description: 'Unique identifier for the organization.',
        flat_name: 'organization.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 1,
        short: 'Unique identifier for the organization.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'organization-name',
        description: 'Organization name.',
        flat_name: 'organization.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'organization.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 0,
        short: 'Organization name.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'organization',
    prefix: 'organization.',
    short: 'Fields describing the organization or company the event is associated with.',
    title: 'Organization',
    type: 'group',
  },
  os: {
    description: 'The OS fields contain information about the operating system.',
    fields: {
      family: {
        dashed_name: 'os-family',
        description: 'OS family (such as redhat, debian, freebsd, windows).',
        example: 'debian',
        flat_name: 'os.family',
        ignore_above: 1024,
        level: 'extended',
        name: 'family',
        normalize: [],
        order: 3,
        short: 'OS family (such as redhat, debian, freebsd, windows).',
        type: 'keyword',
      },
      full: {
        dashed_name: 'os-full',
        description: 'Operating system name, including the version or code name.',
        example: 'Mac OS Mojave',
        flat_name: 'os.full',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'os.full.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full',
        normalize: [],
        order: 2,
        short: 'Operating system name, including the version or code name.',
        type: 'keyword',
      },
      kernel: {
        dashed_name: 'os-kernel',
        description: 'Operating system kernel version as a raw string.',
        example: '4.4.0-112-generic',
        flat_name: 'os.kernel',
        ignore_above: 1024,
        level: 'extended',
        name: 'kernel',
        normalize: [],
        order: 5,
        short: 'Operating system kernel version as a raw string.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'os-name',
        description: 'Operating system name, without the version.',
        example: 'Mac OS X',
        flat_name: 'os.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'os.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 1,
        short: 'Operating system name, without the version.',
        type: 'keyword',
      },
      platform: {
        dashed_name: 'os-platform',
        description: 'Operating system platform (such centos, ubuntu, windows).',
        example: 'darwin',
        flat_name: 'os.platform',
        ignore_above: 1024,
        level: 'extended',
        name: 'platform',
        normalize: [],
        order: 0,
        short: 'Operating system platform (such centos, ubuntu, windows).',
        type: 'keyword',
      },
      version: {
        dashed_name: 'os-version',
        description: 'Operating system version as a raw string.',
        example: '10.14.1',
        flat_name: 'os.version',
        ignore_above: 1024,
        level: 'extended',
        name: 'version',
        normalize: [],
        order: 4,
        short: 'Operating system version as a raw string.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'os',
    prefix: 'os.',
    reusable: {
      expected: ['observer', 'host', 'user_agent'],
      top_level: false,
    },
    short: 'OS fields contain information about the operating system.',
    title: 'Operating System',
    type: 'group',
  },
  package: {
    description:
      'These fields contain information about an installed software package.\nIt contains general information about a package, such as name, version or size.\nIt also contains installation details, such as time or location.',
    fields: {
      architecture: {
        dashed_name: 'package-architecture',
        description: 'Package architecture.',
        example: 'x86_64',
        flat_name: 'package.architecture',
        ignore_above: 1024,
        level: 'extended',
        name: 'architecture',
        normalize: [],
        order: 7,
        short: 'Package architecture.',
        type: 'keyword',
      },
      build_version: {
        dashed_name: 'package-build-version',
        description:
          'Additional information about the build version of the installed\npackage.\n\nFor example use the commit SHA of a non-released package.',
        example: '36f4f7e89dd61b0988b12ee000b98966867710cd',
        flat_name: 'package.build_version',
        ignore_above: 1024,
        level: 'extended',
        name: 'build_version',
        normalize: [],
        order: 2,
        short: 'Build version information',
        type: 'keyword',
      },
      checksum: {
        dashed_name: 'package-checksum',
        description: 'Checksum of the installed package for verification.',
        example: '68b329da9893e34099c7d8ad5cb9c940',
        flat_name: 'package.checksum',
        ignore_above: 1024,
        level: 'extended',
        name: 'checksum',
        normalize: [],
        order: 8,
        short: 'Checksum of the installed package for verification.',
        type: 'keyword',
      },
      description: {
        dashed_name: 'package-description',
        description: 'Description of the package.',
        example: 'Open source programming language to build simple/reliable/efficient\nsoftware.',
        flat_name: 'package.description',
        ignore_above: 1024,
        level: 'extended',
        name: 'description',
        normalize: [],
        order: 3,
        short: 'Description of the package.',
        type: 'keyword',
      },
      install_scope: {
        dashed_name: 'package-install-scope',
        description: 'Indicating how the package was installed, e.g. user-local, global.',
        example: 'global',
        flat_name: 'package.install_scope',
        ignore_above: 1024,
        level: 'extended',
        name: 'install_scope',
        normalize: [],
        order: 9,
        short: 'Indicating how the package was installed, e.g. user-local, global.',
        type: 'keyword',
      },
      installed: {
        dashed_name: 'package-installed',
        description: 'Time when package was installed.',
        flat_name: 'package.installed',
        level: 'extended',
        name: 'installed',
        normalize: [],
        order: 5,
        short: 'Time when package was installed.',
        type: 'date',
      },
      license: {
        dashed_name: 'package-license',
        description:
          'License under which the package was released.\n\nUse a short name, e.g. the license identifier from SPDX License List where\npossible (https://spdx.org/licenses/).',
        example: 'Apache License 2.0',
        flat_name: 'package.license',
        ignore_above: 1024,
        level: 'extended',
        name: 'license',
        normalize: [],
        order: 10,
        short: 'Package license',
        type: 'keyword',
      },
      name: {
        dashed_name: 'package-name',
        description: 'Package name',
        example: 'go',
        flat_name: 'package.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 0,
        short: 'Package name',
        type: 'keyword',
      },
      path: {
        dashed_name: 'package-path',
        description: 'Path where the package is installed.',
        example: '/usr/local/Cellar/go/1.12.9/',
        flat_name: 'package.path',
        ignore_above: 1024,
        level: 'extended',
        name: 'path',
        normalize: [],
        order: 6,
        short: 'Path where the package is installed.',
        type: 'keyword',
      },
      reference: {
        dashed_name: 'package-reference',
        description: 'Home page or reference URL of the software in this package, if\navailable.',
        example: 'https://golang.org',
        flat_name: 'package.reference',
        ignore_above: 1024,
        level: 'extended',
        name: 'reference',
        normalize: [],
        order: 11,
        short: 'Package home page or reference URL',
        type: 'keyword',
      },
      size: {
        dashed_name: 'package-size',
        description: 'Package size in bytes.',
        example: 62231,
        flat_name: 'package.size',
        format: 'string',
        level: 'extended',
        name: 'size',
        normalize: [],
        order: 4,
        short: 'Package size in bytes.',
        type: 'long',
      },
      type: {
        dashed_name: 'package-type',
        description:
          'Type of package.\n\nThis should contain the package file type, rather than the package manager\nname. Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.',
        example: 'rpm',
        flat_name: 'package.type',
        ignore_above: 1024,
        level: 'extended',
        name: 'type',
        normalize: [],
        order: 12,
        short: 'Package type',
        type: 'keyword',
      },
      version: {
        dashed_name: 'package-version',
        description: 'Package version',
        example: '1.12.9',
        flat_name: 'package.version',
        ignore_above: 1024,
        level: 'extended',
        name: 'version',
        normalize: [],
        order: 1,
        short: 'Package version',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'package',
    prefix: 'package.',
    short: 'These fields contain information about an installed software package.',
    title: 'Package',
    type: 'group',
  },
  pe: {
    description: 'These fields contain Windows Portable Executable (PE) metadata.',
    fields: {
      company: {
        dashed_name: 'pe-company',
        description: 'Internal company name of the file, provided at compile-time.',
        example: 'Microsoft Corporation',
        flat_name: 'pe.company',
        ignore_above: 1024,
        level: 'extended',
        name: 'company',
        normalize: [],
        order: 4,
        short: 'Internal company name of the file, provided at compile-time.',
        type: 'keyword',
      },
      description: {
        dashed_name: 'pe-description',
        description: 'Internal description of the file, provided at compile-time.',
        example: 'Paint',
        flat_name: 'pe.description',
        ignore_above: 1024,
        level: 'extended',
        name: 'description',
        normalize: [],
        order: 2,
        short: 'Internal description of the file, provided at compile-time.',
        type: 'keyword',
      },
      file_version: {
        dashed_name: 'pe-file-version',
        description: 'Internal version of the file, provided at compile-time.',
        example: '6.3.9600.17415',
        flat_name: 'pe.file_version',
        ignore_above: 1024,
        level: 'extended',
        name: 'file_version',
        normalize: [],
        order: 1,
        short: 'Process name.',
        type: 'keyword',
      },
      original_file_name: {
        dashed_name: 'pe-original-file-name',
        description: 'Internal name of the file, provided at compile-time.',
        example: 'MSPAINT.EXE',
        flat_name: 'pe.original_file_name',
        ignore_above: 1024,
        level: 'extended',
        name: 'original_file_name',
        normalize: [],
        order: 0,
        short: 'Internal name of the file, provided at compile-time.',
        type: 'keyword',
      },
      product: {
        dashed_name: 'pe-product',
        description: 'Internal product name of the file, provided at compile-time.',
        example: 'MicrosoftÂ® WindowsÂ® Operating System',
        flat_name: 'pe.product',
        ignore_above: 1024,
        level: 'extended',
        name: 'product',
        normalize: [],
        order: 3,
        short: 'Internal product name of the file, provided at compile-time.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'pe',
    prefix: 'pe.',
    reusable: {
      expected: ['file', 'dll', 'process'],
      top_level: false,
    },
    short: 'These fields contain Windows Portable Executable (PE) metadata.',
    title: 'PE Header',
    type: 'group',
  },
  process: {
    description:
      'These fields contain information about a process.\n\nThese fields can help you correlate metrics information with a process id/name\nfrom a log message.  The `process.pid` often stays in the metric itself and is\ncopied to the global field for correlation.',
    fields: {
      args: {
        dashed_name: 'process-args',
        description:
          'Array of process arguments, starting with the absolute path to\nthe executable.\n\nMay be filtered to protect sensitive information.',
        example: ['/usr/bin/ssh', '-l', 'user', '10.0.0.16'],
        flat_name: 'process.args',
        ignore_above: 1024,
        level: 'extended',
        name: 'args',
        normalize: ['array'],
        order: 12,
        short: 'Array of process arguments.',
        type: 'keyword',
      },
      args_count: {
        dashed_name: 'process-args-count',
        description:
          'Length of the process.args array.\n\nThis field can be useful for querying or performing bucket analysis on how\nmany arguments were provided to start a process. More arguments may be an\nindication of suspicious activity.',
        example: 4,
        flat_name: 'process.args_count',
        level: 'extended',
        name: 'args_count',
        normalize: [],
        order: 14,
        short: 'Length of the process.args array.',
        type: 'long',
      },
      'code_signature.exists': {
        dashed_name: 'process-code-signature-exists',
        description: 'Boolean to capture if a signature is present.',
        example: 'true',
        flat_name: 'process.code_signature.exists',
        level: 'core',
        name: 'exists',
        normalize: [],
        order: 0,
        original_fieldset: 'code_signature',
        short: 'Boolean to capture if a signature is present.',
        type: 'boolean',
      },
      'code_signature.status': {
        dashed_name: 'process-code-signature-status',
        description:
          'Additional information about the certificate status.\n\nThis is useful for logging cryptographic errors with the certificate validity\nor trust status. Leave unpopulated if the validity or trust of the certificate\nwas unchecked.',
        example: 'ERROR_UNTRUSTED_ROOT',
        flat_name: 'process.code_signature.status',
        ignore_above: 1024,
        level: 'extended',
        name: 'status',
        normalize: [],
        order: 4,
        original_fieldset: 'code_signature',
        short: 'Additional information about the certificate status.',
        type: 'keyword',
      },
      'code_signature.subject_name': {
        dashed_name: 'process-code-signature-subject-name',
        description: 'Subject name of the code signer',
        example: 'Microsoft Corporation',
        flat_name: 'process.code_signature.subject_name',
        ignore_above: 1024,
        level: 'core',
        name: 'subject_name',
        normalize: [],
        order: 1,
        original_fieldset: 'code_signature',
        short: 'Subject name of the code signer',
        type: 'keyword',
      },
      'code_signature.trusted': {
        dashed_name: 'process-code-signature-trusted',
        description:
          'Stores the trust status of the certificate chain.\n\nValidating the trust of the certificate chain may be complicated, and this\nfield should only be populated by tools that actively check the status.',
        example: 'true',
        flat_name: 'process.code_signature.trusted',
        level: 'extended',
        name: 'trusted',
        normalize: [],
        order: 3,
        original_fieldset: 'code_signature',
        short: 'Stores the trust status of the certificate chain.',
        type: 'boolean',
      },
      'code_signature.valid': {
        dashed_name: 'process-code-signature-valid',
        description:
          'Boolean to capture if the digital signature is verified against\nthe binary content.\n\nLeave unpopulated if a certificate was unchecked.',
        example: 'true',
        flat_name: 'process.code_signature.valid',
        level: 'extended',
        name: 'valid',
        normalize: [],
        order: 2,
        original_fieldset: 'code_signature',
        short:
          'Boolean to capture if the digital signature is verified against the binary\ncontent.',
        type: 'boolean',
      },
      command_line: {
        dashed_name: 'process-command-line',
        description:
          'Full command line that started the process, including the absolute\npath to the executable, and all arguments.\n\nSome arguments may be filtered to protect sensitive information.',
        example: '/usr/bin/ssh -l user 10.0.0.16',
        flat_name: 'process.command_line',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'process.command_line.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'command_line',
        normalize: [],
        order: 10,
        short: 'Full command line that started the process.',
        type: 'keyword',
      },
      entity_id: {
        dashed_name: 'process-entity-id',
        description:
          'Unique identifier for the process.\n\nThe implementation of this is specified by the data source, but some examples\nof what could be used here are a process-generated UUID, Sysmon Process GUIDs,\nor a hash of some uniquely identifying components of a process.\n\nConstructing a globally unique identifier is a common practice to mitigate\nPID reuse as well as to identify a specific process over time, across multiple\nmonitored hosts.',
        example: 'c2c455d9f99375d',
        flat_name: 'process.entity_id',
        ignore_above: 1024,
        level: 'extended',
        name: 'entity_id',
        normalize: [],
        order: 2,
        short: 'Unique identifier for the process.',
        type: 'keyword',
      },
      executable: {
        dashed_name: 'process-executable',
        description: 'Absolute path to the process executable.',
        example: '/usr/bin/ssh',
        flat_name: 'process.executable',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'process.executable.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'executable',
        normalize: [],
        order: 16,
        short: 'Absolute path to the process executable.',
        type: 'keyword',
      },
      exit_code: {
        dashed_name: 'process-exit-code',
        description:
          'The exit code of the process, if this is a termination event.\n\nThe field should be absent if there is no exit code for the event (e.g. process\nstart).',
        example: 137,
        flat_name: 'process.exit_code',
        level: 'extended',
        name: 'exit_code',
        normalize: [],
        order: 30,
        short: 'The exit code of the process.',
        type: 'long',
      },
      'hash.md5': {
        dashed_name: 'process-hash-md5',
        description: 'MD5 hash.',
        flat_name: 'process.hash.md5',
        ignore_above: 1024,
        level: 'extended',
        name: 'md5',
        normalize: [],
        order: 0,
        original_fieldset: 'hash',
        short: 'MD5 hash.',
        type: 'keyword',
      },
      'hash.sha1': {
        dashed_name: 'process-hash-sha1',
        description: 'SHA1 hash.',
        flat_name: 'process.hash.sha1',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha1',
        normalize: [],
        order: 1,
        original_fieldset: 'hash',
        short: 'SHA1 hash.',
        type: 'keyword',
      },
      'hash.sha256': {
        dashed_name: 'process-hash-sha256',
        description: 'SHA256 hash.',
        flat_name: 'process.hash.sha256',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha256',
        normalize: [],
        order: 2,
        original_fieldset: 'hash',
        short: 'SHA256 hash.',
        type: 'keyword',
      },
      'hash.sha512': {
        dashed_name: 'process-hash-sha512',
        description: 'SHA512 hash.',
        flat_name: 'process.hash.sha512',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha512',
        normalize: [],
        order: 3,
        original_fieldset: 'hash',
        short: 'SHA512 hash.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'process-name',
        description: 'Process name.\n\nSometimes called program name or similar.',
        example: 'ssh',
        flat_name: 'process.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'process.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 4,
        short: 'Process name.',
        type: 'keyword',
      },
      'parent.args': {
        dashed_name: 'process-parent-args',
        description:
          'Array of process arguments.\n\nMay be filtered to protect sensitive information.',
        example: ['ssh', '-l', 'user', '10.0.0.16'],
        flat_name: 'process.parent.args',
        ignore_above: 1024,
        level: 'extended',
        name: 'parent.args',
        normalize: ['array'],
        order: 13,
        short: 'Array of process arguments.',
        type: 'keyword',
      },
      'parent.args_count': {
        dashed_name: 'process-parent-args-count',
        description:
          'Length of the process.args array.\n\nThis field can be useful for querying or performing bucket analysis on how\nmany arguments were provided to start a process. More arguments may be an\nindication of suspicious activity.',
        example: 4,
        flat_name: 'process.parent.args_count',
        level: 'extended',
        name: 'parent.args_count',
        normalize: [],
        order: 15,
        short: 'Length of the process.args array.',
        type: 'long',
      },
      'parent.code_signature.exists': {
        dashed_name: 'process-parent-code-signature-exists',
        description: 'Boolean to capture if a signature is present.',
        example: 'true',
        flat_name: 'process.parent.code_signature.exists',
        level: 'core',
        name: 'exists',
        normalize: [],
        order: 0,
        original_fieldset: 'code_signature',
        short: 'Boolean to capture if a signature is present.',
        type: 'boolean',
      },
      'parent.code_signature.status': {
        dashed_name: 'process-parent-code-signature-status',
        description:
          'Additional information about the certificate status.\n\nThis is useful for logging cryptographic errors with the certificate validity\nor trust status. Leave unpopulated if the validity or trust of the certificate\nwas unchecked.',
        example: 'ERROR_UNTRUSTED_ROOT',
        flat_name: 'process.parent.code_signature.status',
        ignore_above: 1024,
        level: 'extended',
        name: 'status',
        normalize: [],
        order: 4,
        original_fieldset: 'code_signature',
        short: 'Additional information about the certificate status.',
        type: 'keyword',
      },
      'parent.code_signature.subject_name': {
        dashed_name: 'process-parent-code-signature-subject-name',
        description: 'Subject name of the code signer',
        example: 'Microsoft Corporation',
        flat_name: 'process.parent.code_signature.subject_name',
        ignore_above: 1024,
        level: 'core',
        name: 'subject_name',
        normalize: [],
        order: 1,
        original_fieldset: 'code_signature',
        short: 'Subject name of the code signer',
        type: 'keyword',
      },
      'parent.code_signature.trusted': {
        dashed_name: 'process-parent-code-signature-trusted',
        description:
          'Stores the trust status of the certificate chain.\n\nValidating the trust of the certificate chain may be complicated, and this\nfield should only be populated by tools that actively check the status.',
        example: 'true',
        flat_name: 'process.parent.code_signature.trusted',
        level: 'extended',
        name: 'trusted',
        normalize: [],
        order: 3,
        original_fieldset: 'code_signature',
        short: 'Stores the trust status of the certificate chain.',
        type: 'boolean',
      },
      'parent.code_signature.valid': {
        dashed_name: 'process-parent-code-signature-valid',
        description:
          'Boolean to capture if the digital signature is verified against\nthe binary content.\n\nLeave unpopulated if a certificate was unchecked.',
        example: 'true',
        flat_name: 'process.parent.code_signature.valid',
        level: 'extended',
        name: 'valid',
        normalize: [],
        order: 2,
        original_fieldset: 'code_signature',
        short:
          'Boolean to capture if the digital signature is verified against the binary\ncontent.',
        type: 'boolean',
      },
      'parent.command_line': {
        dashed_name: 'process-parent-command-line',
        description:
          'Full command line that started the process, including the absolute\npath to the executable, and all arguments.\n\nSome arguments may be filtered to protect sensitive information.',
        example: '/usr/bin/ssh -l user 10.0.0.16',
        flat_name: 'process.parent.command_line',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'process.parent.command_line.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'parent.command_line',
        normalize: [],
        order: 11,
        short: 'Full command line that started the process.',
        type: 'keyword',
      },
      'parent.entity_id': {
        dashed_name: 'process-parent-entity-id',
        description:
          'Unique identifier for the process.\n\nThe implementation of this is specified by the data source, but some examples\nof what could be used here are a process-generated UUID, Sysmon Process GUIDs,\nor a hash of some uniquely identifying components of a process.\n\nConstructing a globally unique identifier is a common practice to mitigate\nPID reuse as well as to identify a specific process over time, across multiple\nmonitored hosts.',
        example: 'c2c455d9f99375d',
        flat_name: 'process.parent.entity_id',
        ignore_above: 1024,
        level: 'extended',
        name: 'parent.entity_id',
        normalize: [],
        order: 3,
        short: 'Unique identifier for the process.',
        type: 'keyword',
      },
      'parent.executable': {
        dashed_name: 'process-parent-executable',
        description: 'Absolute path to the process executable.',
        example: '/usr/bin/ssh',
        flat_name: 'process.parent.executable',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'process.parent.executable.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'parent.executable',
        normalize: [],
        order: 17,
        short: 'Absolute path to the process executable.',
        type: 'keyword',
      },
      'parent.exit_code': {
        dashed_name: 'process-parent-exit-code',
        description:
          'The exit code of the process, if this is a termination event.\n\nThe field should be absent if there is no exit code for the event (e.g. process\nstart).',
        example: 137,
        flat_name: 'process.parent.exit_code',
        level: 'extended',
        name: 'parent.exit_code',
        normalize: [],
        order: 31,
        short: 'The exit code of the process.',
        type: 'long',
      },
      'parent.hash.md5': {
        dashed_name: 'process-parent-hash-md5',
        description: 'MD5 hash.',
        flat_name: 'process.parent.hash.md5',
        ignore_above: 1024,
        level: 'extended',
        name: 'md5',
        normalize: [],
        order: 0,
        original_fieldset: 'hash',
        short: 'MD5 hash.',
        type: 'keyword',
      },
      'parent.hash.sha1': {
        dashed_name: 'process-parent-hash-sha1',
        description: 'SHA1 hash.',
        flat_name: 'process.parent.hash.sha1',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha1',
        normalize: [],
        order: 1,
        original_fieldset: 'hash',
        short: 'SHA1 hash.',
        type: 'keyword',
      },
      'parent.hash.sha256': {
        dashed_name: 'process-parent-hash-sha256',
        description: 'SHA256 hash.',
        flat_name: 'process.parent.hash.sha256',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha256',
        normalize: [],
        order: 2,
        original_fieldset: 'hash',
        short: 'SHA256 hash.',
        type: 'keyword',
      },
      'parent.hash.sha512': {
        dashed_name: 'process-parent-hash-sha512',
        description: 'SHA512 hash.',
        flat_name: 'process.parent.hash.sha512',
        ignore_above: 1024,
        level: 'extended',
        name: 'sha512',
        normalize: [],
        order: 3,
        original_fieldset: 'hash',
        short: 'SHA512 hash.',
        type: 'keyword',
      },
      'parent.name': {
        dashed_name: 'process-parent-name',
        description: 'Process name.\n\nSometimes called program name or similar.',
        example: 'ssh',
        flat_name: 'process.parent.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'process.parent.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'parent.name',
        normalize: [],
        order: 5,
        short: 'Process name.',
        type: 'keyword',
      },
      'parent.pgid': {
        dashed_name: 'process-parent-pgid',
        description: 'Identifier of the group of processes the process belongs to.',
        flat_name: 'process.parent.pgid',
        format: 'string',
        level: 'extended',
        name: 'parent.pgid',
        normalize: [],
        order: 9,
        short: 'Identifier of the group of processes the process belongs to.',
        type: 'long',
      },
      'parent.pid': {
        dashed_name: 'process-parent-pid',
        description: 'Process id.',
        example: 4242,
        flat_name: 'process.parent.pid',
        format: 'string',
        level: 'core',
        name: 'parent.pid',
        normalize: [],
        order: 1,
        short: 'Process id.',
        type: 'long',
      },
      'parent.ppid': {
        dashed_name: 'process-parent-ppid',
        description: "Parent process' pid.",
        example: 4241,
        flat_name: 'process.parent.ppid',
        format: 'string',
        level: 'extended',
        name: 'parent.ppid',
        normalize: [],
        order: 7,
        short: "Parent process' pid.",
        type: 'long',
      },
      'parent.start': {
        dashed_name: 'process-parent-start',
        description: 'The time the process started.',
        example: '2016-05-23T08:05:34.853Z',
        flat_name: 'process.parent.start',
        level: 'extended',
        name: 'parent.start',
        normalize: [],
        order: 25,
        short: 'The time the process started.',
        type: 'date',
      },
      'parent.thread.id': {
        dashed_name: 'process-parent-thread-id',
        description: 'Thread ID.',
        example: 4242,
        flat_name: 'process.parent.thread.id',
        format: 'string',
        level: 'extended',
        name: 'parent.thread.id',
        normalize: [],
        order: 21,
        short: 'Thread ID.',
        type: 'long',
      },
      'parent.thread.name': {
        dashed_name: 'process-parent-thread-name',
        description: 'Thread name.',
        example: 'thread-0',
        flat_name: 'process.parent.thread.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'parent.thread.name',
        normalize: [],
        order: 23,
        short: 'Thread name.',
        type: 'keyword',
      },
      'parent.title': {
        dashed_name: 'process-parent-title',
        description:
          'Process title.\n\nThe proctitle, some times the same as process name. Can also be different:\nfor example a browser setting its title to the web page currently opened.',
        flat_name: 'process.parent.title',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'process.parent.title.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'parent.title',
        normalize: [],
        order: 19,
        short: 'Process title.',
        type: 'keyword',
      },
      'parent.uptime': {
        dashed_name: 'process-parent-uptime',
        description: 'Seconds the process has been up.',
        example: 1325,
        flat_name: 'process.parent.uptime',
        level: 'extended',
        name: 'parent.uptime',
        normalize: [],
        order: 27,
        short: 'Seconds the process has been up.',
        type: 'long',
      },
      'parent.working_directory': {
        dashed_name: 'process-parent-working-directory',
        description: 'The working directory of the process.',
        example: '/home/alice',
        flat_name: 'process.parent.working_directory',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'process.parent.working_directory.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'parent.working_directory',
        normalize: [],
        order: 29,
        short: 'The working directory of the process.',
        type: 'keyword',
      },
      'pe.company': {
        dashed_name: 'process-pe-company',
        description: 'Internal company name of the file, provided at compile-time.',
        example: 'Microsoft Corporation',
        flat_name: 'process.pe.company',
        ignore_above: 1024,
        level: 'extended',
        name: 'company',
        normalize: [],
        order: 4,
        original_fieldset: 'pe',
        short: 'Internal company name of the file, provided at compile-time.',
        type: 'keyword',
      },
      'pe.description': {
        dashed_name: 'process-pe-description',
        description: 'Internal description of the file, provided at compile-time.',
        example: 'Paint',
        flat_name: 'process.pe.description',
        ignore_above: 1024,
        level: 'extended',
        name: 'description',
        normalize: [],
        order: 2,
        original_fieldset: 'pe',
        short: 'Internal description of the file, provided at compile-time.',
        type: 'keyword',
      },
      'pe.file_version': {
        dashed_name: 'process-pe-file-version',
        description: 'Internal version of the file, provided at compile-time.',
        example: '6.3.9600.17415',
        flat_name: 'process.pe.file_version',
        ignore_above: 1024,
        level: 'extended',
        name: 'file_version',
        normalize: [],
        order: 1,
        original_fieldset: 'pe',
        short: 'Process name.',
        type: 'keyword',
      },
      'pe.original_file_name': {
        dashed_name: 'process-pe-original-file-name',
        description: 'Internal name of the file, provided at compile-time.',
        example: 'MSPAINT.EXE',
        flat_name: 'process.pe.original_file_name',
        ignore_above: 1024,
        level: 'extended',
        name: 'original_file_name',
        normalize: [],
        order: 0,
        original_fieldset: 'pe',
        short: 'Internal name of the file, provided at compile-time.',
        type: 'keyword',
      },
      'pe.product': {
        dashed_name: 'process-pe-product',
        description: 'Internal product name of the file, provided at compile-time.',
        example: 'MicrosoftÂ® WindowsÂ® Operating System',
        flat_name: 'process.pe.product',
        ignore_above: 1024,
        level: 'extended',
        name: 'product',
        normalize: [],
        order: 3,
        original_fieldset: 'pe',
        short: 'Internal product name of the file, provided at compile-time.',
        type: 'keyword',
      },
      pgid: {
        dashed_name: 'process-pgid',
        description: 'Identifier of the group of processes the process belongs to.',
        flat_name: 'process.pgid',
        format: 'string',
        level: 'extended',
        name: 'pgid',
        normalize: [],
        order: 8,
        short: 'Identifier of the group of processes the process belongs to.',
        type: 'long',
      },
      pid: {
        dashed_name: 'process-pid',
        description: 'Process id.',
        example: 4242,
        flat_name: 'process.pid',
        format: 'string',
        level: 'core',
        name: 'pid',
        normalize: [],
        order: 0,
        short: 'Process id.',
        type: 'long',
      },
      ppid: {
        dashed_name: 'process-ppid',
        description: "Parent process' pid.",
        example: 4241,
        flat_name: 'process.ppid',
        format: 'string',
        level: 'extended',
        name: 'ppid',
        normalize: [],
        order: 6,
        short: "Parent process' pid.",
        type: 'long',
      },
      start: {
        dashed_name: 'process-start',
        description: 'The time the process started.',
        example: '2016-05-23T08:05:34.853Z',
        flat_name: 'process.start',
        level: 'extended',
        name: 'start',
        normalize: [],
        order: 24,
        short: 'The time the process started.',
        type: 'date',
      },
      'thread.id': {
        dashed_name: 'process-thread-id',
        description: 'Thread ID.',
        example: 4242,
        flat_name: 'process.thread.id',
        format: 'string',
        level: 'extended',
        name: 'thread.id',
        normalize: [],
        order: 20,
        short: 'Thread ID.',
        type: 'long',
      },
      'thread.name': {
        dashed_name: 'process-thread-name',
        description: 'Thread name.',
        example: 'thread-0',
        flat_name: 'process.thread.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'thread.name',
        normalize: [],
        order: 22,
        short: 'Thread name.',
        type: 'keyword',
      },
      title: {
        dashed_name: 'process-title',
        description:
          'Process title.\n\nThe proctitle, some times the same as process name. Can also be different:\nfor example a browser setting its title to the web page currently opened.',
        flat_name: 'process.title',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'process.title.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'title',
        normalize: [],
        order: 18,
        short: 'Process title.',
        type: 'keyword',
      },
      uptime: {
        dashed_name: 'process-uptime',
        description: 'Seconds the process has been up.',
        example: 1325,
        flat_name: 'process.uptime',
        level: 'extended',
        name: 'uptime',
        normalize: [],
        order: 26,
        short: 'Seconds the process has been up.',
        type: 'long',
      },
      working_directory: {
        dashed_name: 'process-working-directory',
        description: 'The working directory of the process.',
        example: '/home/alice',
        flat_name: 'process.working_directory',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'process.working_directory.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'working_directory',
        normalize: [],
        order: 28,
        short: 'The working directory of the process.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'process',
    nestings: ['code_signature', 'hash', 'pe'],
    prefix: 'process.',
    short: 'These fields contain information about a process.',
    title: 'Process',
    type: 'group',
  },
  registry: {
    description: 'Fields related to Windows Registry operations.',
    fields: {
      'data.bytes': {
        dashed_name: 'registry-data-bytes',
        description:
          'Original bytes written with base64 encoding.\n\nFor Windows registry operations, such as SetValueEx and RegQueryValueEx, this\ncorresponds to the data pointed by `lp_data`. This is optional but provides\nbetter recoverability and should be populated for REG_BINARY encoded values.',
        example: 'ZQBuAC0AVQBTAAAAZQBuAAAAAAA=',
        flat_name: 'registry.data.bytes',
        ignore_above: 1024,
        level: 'extended',
        name: 'data.bytes',
        normalize: [],
        order: 6,
        short: 'Original bytes written with base64 encoding.',
        type: 'keyword',
      },
      'data.strings': {
        dashed_name: 'registry-data-strings',
        description:
          'Content when writing string types.\n\nPopulated as an array when writing string data to the registry. For single\nstring registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with\none string. For sequences of string with REG_MULTI_SZ, this array will be\nvariable length. For numeric data, such as REG_DWORD and REG_QWORD, this should\nbe populated with the decimal representation (e.g `"1"`).',
        example: '["C:\\rta\\red_ttp\\bin\\myapp.exe"]',
        flat_name: 'registry.data.strings',
        ignore_above: 1024,
        level: 'core',
        name: 'data.strings',
        normalize: ['array'],
        order: 5,
        short: 'List of strings representing what was written to the registry.',
        type: 'keyword',
      },
      'data.type': {
        dashed_name: 'registry-data-type',
        description: 'Standard registry type for encoding contents',
        example: 'REG_SZ',
        flat_name: 'registry.data.type',
        ignore_above: 1024,
        level: 'core',
        name: 'data.type',
        normalize: [],
        order: 4,
        short: 'Standard registry type for encoding contents',
        type: 'keyword',
      },
      hive: {
        dashed_name: 'registry-hive',
        description: 'Abbreviated name for the hive.',
        example: 'HKLM',
        flat_name: 'registry.hive',
        ignore_above: 1024,
        level: 'core',
        name: 'hive',
        normalize: [],
        order: 0,
        short: 'Abbreviated name for the hive.',
        type: 'keyword',
      },
      key: {
        dashed_name: 'registry-key',
        description: 'Hive-relative path of keys.',
        example:
          'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\winword.exe',
        flat_name: 'registry.key',
        ignore_above: 1024,
        level: 'core',
        name: 'key',
        normalize: [],
        order: 1,
        short: 'Hive-relative path of keys.',
        type: 'keyword',
      },
      path: {
        dashed_name: 'registry-path',
        description: 'Full path, including hive, key and value',
        example:
          'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution\nOptions\\winword.exe\\Debugger',
        flat_name: 'registry.path',
        ignore_above: 1024,
        level: 'core',
        name: 'path',
        normalize: [],
        order: 3,
        short: 'Full path, including hive, key and value',
        type: 'keyword',
      },
      value: {
        dashed_name: 'registry-value',
        description: 'Name of the value written.',
        example: 'Debugger',
        flat_name: 'registry.value',
        ignore_above: 1024,
        level: 'core',
        name: 'value',
        normalize: [],
        order: 2,
        short: 'Name of the value written.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'registry',
    prefix: 'registry.',
    short: 'Fields related to Windows Registry operations.',
    title: 'Registry',
    type: 'group',
  },
  related: {
    description:
      'This field set is meant to facilitate pivoting around a piece of data.\n\nSome pieces of information can be seen in many places in an ECS event. To facilitate\nsearching for them, store an array of all seen values to their corresponding field\nin `related.`.\n\nA concrete example is IP addresses, which can be under host, observer, source,\ndestination, client, server, and network.forwarded_ip. If you append all IPs to\n`related.ip`, you can then search for a given IP trivially, no matter where it\nappeared, by querying `related.ip:192.0.2.15`.',
    fields: {
      hash: {
        dashed_name: 'related-hash',
        description:
          "All the hashes seen on your event. Populating this field, then\nusing it to search for hashes can help in situations where you're unsure what\nthe hash algorithm is (and therefore which key name to search).",
        flat_name: 'related.hash',
        ignore_above: 1024,
        level: 'extended',
        name: 'hash',
        normalize: ['array'],
        order: 2,
        short: 'All the hashes seen on your event.',
        type: 'keyword',
      },
      ip: {
        dashed_name: 'related-ip',
        description: 'All of the IPs seen on your event.',
        flat_name: 'related.ip',
        level: 'extended',
        name: 'ip',
        normalize: ['array'],
        order: 0,
        short: 'All of the IPs seen on your event.',
        type: 'ip',
      },
      user: {
        dashed_name: 'related-user',
        description: 'All the user names seen on your event.',
        flat_name: 'related.user',
        ignore_above: 1024,
        level: 'extended',
        name: 'user',
        normalize: ['array'],
        order: 1,
        short: 'All the user names seen on your event.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'related',
    prefix: 'related.',
    short: 'Fields meant to facilitate pivoting around a piece of data.',
    title: 'Related',
    type: 'group',
  },
  rule: {
    description:
      'Rule fields are used to capture the specifics of any observer or agent\nrules that generate alerts or other notable events.\n\nExamples of data sources that would populate the rule fields include: network\nadmission control platforms, network or host IDS/IPS, network firewalls, web application\nfirewalls, url filters, endpoint detection and response (EDR) systems, etc.',
    fields: {
      author: {
        dashed_name: 'rule-author',
        description:
          'Name, organization, or pseudonym of the author or authors who created\nthe rule used to generate this event.',
        example: ['Star-Lord'],
        flat_name: 'rule.author',
        ignore_above: 1024,
        level: 'extended',
        name: 'author',
        normalize: ['array'],
        order: 8,
        short: 'Rule author',
        type: 'keyword',
      },
      category: {
        dashed_name: 'rule-category',
        description:
          'A categorization value keyword used by the entity using the rule\nfor detection of this event.',
        example: 'Attempted Information Leak',
        flat_name: 'rule.category',
        ignore_above: 1024,
        level: 'extended',
        name: 'category',
        normalize: [],
        order: 5,
        short: 'Rule category',
        type: 'keyword',
      },
      description: {
        dashed_name: 'rule-description',
        description: 'The description of the rule generating the event.',
        example: 'Block requests to public DNS over HTTPS / TLS protocols',
        flat_name: 'rule.description',
        ignore_above: 1024,
        level: 'extended',
        name: 'description',
        normalize: [],
        order: 4,
        short: 'Rule description',
        type: 'keyword',
      },
      id: {
        dashed_name: 'rule-id',
        description:
          'A rule ID that is unique within the scope of an agent, observer,\nor other entity using the rule for detection of this event.',
        example: 101,
        flat_name: 'rule.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        short: 'Rule ID',
        type: 'keyword',
      },
      license: {
        dashed_name: 'rule-license',
        description:
          'Name of the license under which the rule used to generate this\nevent is made available.',
        example: 'Apache 2.0',
        flat_name: 'rule.license',
        ignore_above: 1024,
        level: 'extended',
        name: 'license',
        normalize: [],
        order: 9,
        short: 'Rule license',
        type: 'keyword',
      },
      name: {
        dashed_name: 'rule-name',
        description: 'The name of the rule or signature generating the event.',
        example: 'BLOCK_DNS_over_TLS',
        flat_name: 'rule.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 3,
        short: 'Rule name',
        type: 'keyword',
      },
      reference: {
        dashed_name: 'rule-reference',
        description:
          'Reference URL to additional information about the rule used to\ngenerate this event.\n\nThe URL can point to the vendor documentation about the rule. If that is\nnot available, it can also be a link to a more general page describing this\ntype of alert.',
        example: 'https://en.wikipedia.org/wiki/DNS_over_TLS',
        flat_name: 'rule.reference',
        ignore_above: 1024,
        level: 'extended',
        name: 'reference',
        normalize: [],
        order: 7,
        short: 'Rule reference URL',
        type: 'keyword',
      },
      ruleset: {
        dashed_name: 'rule-ruleset',
        description:
          'Name of the ruleset, policy, group, or parent category in which\nthe rule used to generate this event is a member.',
        example: 'Standard_Protocol_Filters',
        flat_name: 'rule.ruleset',
        ignore_above: 1024,
        level: 'extended',
        name: 'ruleset',
        normalize: [],
        order: 6,
        short: 'Rule ruleset',
        type: 'keyword',
      },
      uuid: {
        dashed_name: 'rule-uuid',
        description:
          'A rule ID that is unique within the scope of a set or group of\nagents, observers, or other entities using the rule for detection of this\nevent.',
        example: 1100110011,
        flat_name: 'rule.uuid',
        ignore_above: 1024,
        level: 'extended',
        name: 'uuid',
        normalize: [],
        order: 1,
        short: 'Rule UUID',
        type: 'keyword',
      },
      version: {
        dashed_name: 'rule-version',
        description: 'The version / revision of the rule being used for analysis.',
        example: 1.1,
        flat_name: 'rule.version',
        ignore_above: 1024,
        level: 'extended',
        name: 'version',
        normalize: [],
        order: 2,
        short: 'Rule version',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'rule',
    prefix: 'rule.',
    short:
      'Fields to capture details about rules used to generate alerts or other notable\nevents.',
    title: 'Rule',
    type: 'group',
  },
  search: {
    description:
      'The Search fields describe information about a search request event:\nquery or pagination. The fields that should be used with this field set include:\n`event.action` to describe the search action (e.g. `search.query`, `search.page`,\netc.), `event.duration` to describe the duration of a search request, `@timestamp`\nto record the event original timestamp and optionally the `source` fields to\nrecord context information such as `user.id` or `geo`.',
    fields: {
      'query.id': {
        dashed_name: 'search-query-id',
        description:
          'An opaque query identifier. This identifier needs to be unique\nto a user query, and all subsequent events (pagination, clicks) need to have\nthe same query identifier.',
        example: '2dc15175-de0d-44db-86d8-8a99f41b7a11',
        flat_name: 'search.query.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'query.id',
        normalize: [],
        order: 0,
        short: 'An opaque query identifier.',
        type: 'keyword',
      },
      'query.page': {
        dashed_name: 'search-query-page',
        description:
          'For search results that support pagination, this represents the\ncurrent page being requested. Initial search requests are `1` while subsequent\npage requests are incremental.',
        example: 1,
        flat_name: 'search.query.page',
        level: 'extended',
        name: 'query.page',
        normalize: [],
        order: 2,
        short: 'The page of search results being requested.',
        type: 'long',
      },
      'query.value': {
        dashed_name: 'search-query-value',
        description:
          'The query string being searched on. This field is not analyzed\nand should not be pre-processed in any way in the event (e.g. normalization\nlist lowercasing). This is useful for search use-cases that use a one- box\nstyle search interface. Other interfaces will have to rely on additional custom\nfields or labels to represent things like filters applied, extra parameters,\nuser context, etc.',
        example: 'where does the rain in Spain mainly fall',
        flat_name: 'search.query.value',
        ignore_above: 4096,
        level: 'extended',
        name: 'query.value',
        normalize: [],
        order: 1,
        short: 'The query string being searched on.',
        type: 'keyword',
      },
      'results.ids': {
        dashed_name: 'search-results-ids',
        description:
          "A list of opaque document IDs representing the results that were\nshown to the user. This is effectively the impression list and it's size should\nbe equal to `results.size`. This field can be empty when there are no results\nto return.",
        example: ['user:82375akja9f', 'issue:2782630'],
        flat_name: 'search.results.ids',
        ignore_above: 1024,
        level: 'extended',
        name: 'results.ids',
        normalize: ['array'],
        order: 5,
        short: 'A list of document IDs in the result set.',
        type: 'keyword',
      },
      'results.size': {
        dashed_name: 'search-results-size',
        description:
          'The size of the result set displayed to the user. This should be\nequivalent to the length of the results in `results.ids`. This is also known\nas the page size or limit.',
        example: 10,
        flat_name: 'search.results.size',
        level: 'extended',
        name: 'results.size',
        normalize: [],
        order: 3,
        short: 'The size of the result set displayed to the user.',
        type: 'long',
      },
      'results.total': {
        dashed_name: 'search-results-total',
        description:
          'The total number of matches for this query. This number is always\ngreater than or equal to `results.size`. This is the `hits.total` field in\nthe query response.',
        example: 134509,
        flat_name: 'search.results.total',
        level: 'extended',
        name: 'results.total',
        normalize: [],
        order: 4,
        short: 'The total number of matches for this query.',
        type: 'long',
      },
    },
    group: 2,
    name: 'search',
    prefix: 'search.',
    short: 'Fields to describe details of a search event.',
    title: 'Search',
    type: 'group',
  },
  server: {
    description:
      'A Server is defined as the responder in a network connection for events\nregarding sessions, connections, or bidirectional flow records.\n\nFor TCP events, the server is the receiver of the initial SYN packet(s) of the\nTCP connection. For other protocols, the server is generally the responder in\nthe network transaction. Some systems actually use the term "responder" to refer\nthe server in TCP connections. The server fields describe details about the system\nacting as the server in the network event. Server fields are usually populated\nin conjunction with client fields. Server fields are generally not populated for\npacket-level events.\n\nClient / server representations can add semantic context to an exchange, which\nis helpful to visualize the data in certain situations. If your context falls\nin that category, you should still ensure that source and destination are filled\nappropriately.',
    fields: {
      address: {
        dashed_name: 'server-address',
        description:
          'Some event server addresses are defined ambiguously. The event\nwill sometimes list an IP, a domain or a unix socket.  You should always store\nthe raw address in the `.address` field.\n\nThen it should be duplicated to `.ip` or `.domain`, depending on which one\nit is.',
        flat_name: 'server.address',
        ignore_above: 1024,
        level: 'extended',
        name: 'address',
        normalize: [],
        order: 0,
        short: 'Server network address.',
        type: 'keyword',
      },
      'as.number': {
        dashed_name: 'server-as-number',
        description:
          'Unique number allocated to the autonomous system. The autonomous\nsystem number (ASN) uniquely identifies each network on the Internet.',
        example: 15169,
        flat_name: 'server.as.number',
        level: 'extended',
        name: 'number',
        normalize: [],
        order: 0,
        original_fieldset: 'as',
        short:
          'Unique number allocated to the autonomous system. The autonomous system\nnumber (ASN) uniquely identifies each network on the Internet.',
        type: 'long',
      },
      'as.organization.name': {
        dashed_name: 'server-as-organization-name',
        description: 'Organization name.',
        example: 'Google LLC',
        flat_name: 'server.as.organization.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'server.as.organization.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'organization.name',
        normalize: [],
        order: 1,
        original_fieldset: 'as',
        short: 'Organization name.',
        type: 'keyword',
      },
      bytes: {
        dashed_name: 'server-bytes',
        description: 'Bytes sent from the server to the client.',
        example: 184,
        flat_name: 'server.bytes',
        format: 'bytes',
        level: 'core',
        name: 'bytes',
        normalize: [],
        order: 7,
        short: 'Bytes sent from the server to the client.',
        type: 'long',
      },
      domain: {
        dashed_name: 'server-domain',
        description: 'Server domain.',
        flat_name: 'server.domain',
        ignore_above: 1024,
        level: 'core',
        name: 'domain',
        normalize: [],
        order: 4,
        short: 'Server domain.',
        type: 'keyword',
      },
      'geo.city_name': {
        dashed_name: 'server-geo-city-name',
        description: 'City name.',
        example: 'Montreal',
        flat_name: 'server.geo.city_name',
        ignore_above: 1024,
        level: 'core',
        name: 'city_name',
        normalize: [],
        order: 4,
        original_fieldset: 'geo',
        short: 'City name.',
        type: 'keyword',
      },
      'geo.continent_name': {
        dashed_name: 'server-geo-continent-name',
        description: 'Name of the continent.',
        example: 'North America',
        flat_name: 'server.geo.continent_name',
        ignore_above: 1024,
        level: 'core',
        name: 'continent_name',
        normalize: [],
        order: 1,
        original_fieldset: 'geo',
        short: 'Name of the continent.',
        type: 'keyword',
      },
      'geo.country_iso_code': {
        dashed_name: 'server-geo-country-iso-code',
        description: 'Country ISO code.',
        example: 'CA',
        flat_name: 'server.geo.country_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'country_iso_code',
        normalize: [],
        order: 5,
        original_fieldset: 'geo',
        short: 'Country ISO code.',
        type: 'keyword',
      },
      'geo.country_name': {
        dashed_name: 'server-geo-country-name',
        description: 'Country name.',
        example: 'Canada',
        flat_name: 'server.geo.country_name',
        ignore_above: 1024,
        level: 'core',
        name: 'country_name',
        normalize: [],
        order: 2,
        original_fieldset: 'geo',
        short: 'Country name.',
        type: 'keyword',
      },
      'geo.location': {
        dashed_name: 'server-geo-location',
        description: 'Longitude and latitude.',
        example: '{ "lon": -73.614830, "lat": 45.505918 }',
        flat_name: 'server.geo.location',
        level: 'core',
        name: 'location',
        normalize: [],
        order: 0,
        original_fieldset: 'geo',
        short: 'Longitude and latitude.',
        type: 'geo_point',
      },
      'geo.name': {
        dashed_name: 'server-geo-name',
        description:
          'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
        example: 'boston-dc',
        flat_name: 'server.geo.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 7,
        original_fieldset: 'geo',
        short: 'User-defined description of a location.',
        type: 'keyword',
      },
      'geo.region_iso_code': {
        dashed_name: 'server-geo-region-iso-code',
        description: 'Region ISO code.',
        example: 'CA-QC',
        flat_name: 'server.geo.region_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'region_iso_code',
        normalize: [],
        order: 6,
        original_fieldset: 'geo',
        short: 'Region ISO code.',
        type: 'keyword',
      },
      'geo.region_name': {
        dashed_name: 'server-geo-region-name',
        description: 'Region name.',
        example: 'Quebec',
        flat_name: 'server.geo.region_name',
        ignore_above: 1024,
        level: 'core',
        name: 'region_name',
        normalize: [],
        order: 3,
        original_fieldset: 'geo',
        short: 'Region name.',
        type: 'keyword',
      },
      ip: {
        dashed_name: 'server-ip',
        description: 'IP address of the server (IPv4 or IPv6).',
        flat_name: 'server.ip',
        level: 'core',
        name: 'ip',
        normalize: [],
        order: 1,
        short: 'IP address of the server.',
        type: 'ip',
      },
      mac: {
        dashed_name: 'server-mac',
        description: 'MAC address of the server.',
        flat_name: 'server.mac',
        ignore_above: 1024,
        level: 'core',
        name: 'mac',
        normalize: [],
        order: 3,
        short: 'MAC address of the server.',
        type: 'keyword',
      },
      'nat.ip': {
        dashed_name: 'server-nat-ip',
        description:
          'Translated ip of destination based NAT sessions (e.g. internet\nto private DMZ)\n\nTypically used with load balancers, firewalls, or routers.',
        flat_name: 'server.nat.ip',
        level: 'extended',
        name: 'nat.ip',
        normalize: [],
        order: 9,
        short: 'Server NAT ip',
        type: 'ip',
      },
      'nat.port': {
        dashed_name: 'server-nat-port',
        description:
          'Translated port of destination based NAT sessions (e.g. internet\nto private DMZ)\n\nTypically used with load balancers, firewalls, or routers.',
        flat_name: 'server.nat.port',
        format: 'string',
        level: 'extended',
        name: 'nat.port',
        normalize: [],
        order: 10,
        short: 'Server NAT port',
        type: 'long',
      },
      packets: {
        dashed_name: 'server-packets',
        description: 'Packets sent from the server to the client.',
        example: 12,
        flat_name: 'server.packets',
        level: 'core',
        name: 'packets',
        normalize: [],
        order: 8,
        short: 'Packets sent from the server to the client.',
        type: 'long',
      },
      port: {
        dashed_name: 'server-port',
        description: 'Port of the server.',
        flat_name: 'server.port',
        format: 'string',
        level: 'core',
        name: 'port',
        normalize: [],
        order: 2,
        short: 'Port of the server.',
        type: 'long',
      },
      registered_domain: {
        dashed_name: 'server-registered-domain',
        description:
          'The highest registered server domain, stripped of the subdomain.\n\nFor example, the registered domain for "foo.google.com" is "google.com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last two labels will not work well for TLDs such as "co.uk".',
        example: 'google.com',
        flat_name: 'server.registered_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'registered_domain',
        normalize: [],
        order: 5,
        short: 'The highest registered server domain, stripped of the subdomain.',
        type: 'keyword',
      },
      top_level_domain: {
        dashed_name: 'server-top-level-domain',
        description:
          'The effective top level domain (eTLD), also known as the domain\nsuffix, is the last part of the domain name. For example, the top level domain\nfor google.com is "com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last label will not work well for effective TLDs such as "co.uk".',
        example: 'co.uk',
        flat_name: 'server.top_level_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'top_level_domain',
        normalize: [],
        order: 6,
        short: 'The effective top level domain (com, org, net, co.uk).',
        type: 'keyword',
      },
      'user.domain': {
        dashed_name: 'server-user-domain',
        description:
          'Name of the directory the user is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'server.user.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 5,
        original_fieldset: 'user',
        short: 'Name of the directory the user is a member of.',
        type: 'keyword',
      },
      'user.email': {
        dashed_name: 'server-user-email',
        description: 'User email address.',
        flat_name: 'server.user.email',
        ignore_above: 1024,
        level: 'extended',
        name: 'email',
        normalize: [],
        order: 3,
        original_fieldset: 'user',
        short: 'User email address.',
        type: 'keyword',
      },
      'user.full_name': {
        dashed_name: 'server-user-full-name',
        description: "User's full name, if available.",
        example: 'Albert Einstein',
        flat_name: 'server.user.full_name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'server.user.full_name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full_name',
        normalize: [],
        order: 2,
        original_fieldset: 'user',
        short: "User's full name, if available.",
        type: 'keyword',
      },
      'user.group.domain': {
        dashed_name: 'server-user-group-domain',
        description:
          'Name of the directory the group is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'server.user.group.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 2,
        original_fieldset: 'group',
        short: 'Name of the directory the group is a member of.',
        type: 'keyword',
      },
      'user.group.id': {
        dashed_name: 'server-user-group-id',
        description: 'Unique identifier for the group on the system/platform.',
        flat_name: 'server.user.group.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'group',
        short: 'Unique identifier for the group on the system/platform.',
        type: 'keyword',
      },
      'user.group.name': {
        dashed_name: 'server-user-group-name',
        description: 'Name of the group.',
        flat_name: 'server.user.group.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'group',
        short: 'Name of the group.',
        type: 'keyword',
      },
      'user.hash': {
        dashed_name: 'server-user-hash',
        description:
          'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
        flat_name: 'server.user.hash',
        ignore_above: 1024,
        level: 'extended',
        name: 'hash',
        normalize: [],
        order: 4,
        original_fieldset: 'user',
        short: 'Unique user hash to correlate information for a user in anonymized form.',
        type: 'keyword',
      },
      'user.id': {
        dashed_name: 'server-user-id',
        description: 'Unique identifier of the user.',
        flat_name: 'server.user.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'user',
        short: 'Unique identifier of the user.',
        type: 'keyword',
      },
      'user.name': {
        dashed_name: 'server-user-name',
        description: 'Short name or login of the user.',
        example: 'albert',
        flat_name: 'server.user.name',
        ignore_above: 1024,
        level: 'core',
        multi_fields: [
          {
            flat_name: 'server.user.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'user',
        short: 'Short name or login of the user.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'server',
    nestings: ['as', 'geo', 'user'],
    prefix: 'server.',
    short: 'Fields about the server side of a network connection, used with client.',
    title: 'Server',
    type: 'group',
  },
  service: {
    description:
      'The service fields describe the service for or from which the data\nwas collected.\n\nThese fields help you find and correlate logs for a specific service and version.',
    fields: {
      ephemeral_id: {
        dashed_name: 'service-ephemeral-id',
        description:
          'Ephemeral identifier of this service (if one exists).\n\nThis id normally changes across restarts, but `service.id` does not.',
        example: '8a4f500f',
        flat_name: 'service.ephemeral_id',
        ignore_above: 1024,
        level: 'extended',
        name: 'ephemeral_id',
        normalize: [],
        order: 6,
        short: 'Ephemeral identifier of this service.',
        type: 'keyword',
      },
      id: {
        dashed_name: 'service-id',
        description:
          'Unique identifier of the running service. If the service is comprised\nof many nodes, the `service.id` should be the same for all nodes.\n\nThis id should uniquely identify the service. This makes it possible to correlate\nlogs and metrics for one specific service, no matter which particular node\nemitted the event.\n\nNote that if you need to see the events from one specific host of the service,\nyou should filter on that `host.name` or `host.id` instead.',
        example: 'd37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6',
        flat_name: 'service.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 0,
        short: 'Unique identifier of the running service.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'service-name',
        description:
          'Name of the service data is collected from.\n\nThe name of the service is normally user given. This allows for distributed\nservices that run on multiple hosts to correlate the related instances based\non the name.\n\nIn the case of Elasticsearch the `service.name` could contain the cluster\nname. For Beats the `service.name` is by default a copy of the `service.type`\nfield if no name is specified.',
        example: 'elasticsearch-metrics',
        flat_name: 'service.name',
        ignore_above: 1024,
        level: 'core',
        name: 'name',
        normalize: [],
        order: 1,
        short: 'Name of the service.',
        type: 'keyword',
      },
      'node.name': {
        dashed_name: 'service-node-name',
        description:
          'Name of a service node.\n\nThis allows for two nodes of the same service running on the same host to\nbe differentiated. Therefore, `service.node.name` should typically be unique\nacross nodes of a given service.\n\nIn the case of Elasticsearch, the `service.node.name` could contain the unique\nnode name within the Elasticsearch cluster. In cases where the service does not\nhave the concept of a node name, the host name or container name can be used\nto distinguish running instances that make up this service. If those do not\nprovide uniqueness (e.g. multiple instances of the service running on the\nsame host) - the node name can be manually set.',
        example: 'instance-0000000016',
        flat_name: 'service.node.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'node.name',
        normalize: [],
        order: 2,
        short: 'Name of the service node.',
        type: 'keyword',
      },
      state: {
        dashed_name: 'service-state',
        description: 'Current state of the service.',
        flat_name: 'service.state',
        ignore_above: 1024,
        level: 'core',
        name: 'state',
        normalize: [],
        order: 4,
        short: 'Current state of the service.',
        type: 'keyword',
      },
      type: {
        dashed_name: 'service-type',
        description:
          'The type of the service data is collected from.\n\nThe type can be used to group and correlate logs and metrics from one service\ntype.\n\nExample: If logs or metrics are collected from Elasticsearch, `service.type`\nwould be `elasticsearch`.',
        example: 'elasticsearch',
        flat_name: 'service.type',
        ignore_above: 1024,
        level: 'core',
        name: 'type',
        normalize: [],
        order: 3,
        short: 'The type of the service.',
        type: 'keyword',
      },
      version: {
        dashed_name: 'service-version',
        description:
          'Version of the service the data was collected from.\n\nThis allows to look at a data set only for a specific version of a service.',
        example: '3.2.4',
        flat_name: 'service.version',
        ignore_above: 1024,
        level: 'core',
        name: 'version',
        normalize: [],
        order: 5,
        short: 'Version of the service.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'service',
    prefix: 'service.',
    short: 'Fields describing the service for or from which the data was collected.',
    title: 'Service',
    type: 'group',
  },
  source: {
    description:
      'Source fields describe details about the source of a packet/event.\n\nSource fields are usually populated in conjunction with destination fields.',
    fields: {
      address: {
        dashed_name: 'source-address',
        description:
          'Some event source addresses are defined ambiguously. The event\nwill sometimes list an IP, a domain or a unix socket.  You should always store\nthe raw address in the `.address` field.\n\nThen it should be duplicated to `.ip` or `.domain`, depending on which one\nit is.',
        flat_name: 'source.address',
        ignore_above: 1024,
        level: 'extended',
        name: 'address',
        normalize: [],
        order: 0,
        short: 'Source network address.',
        type: 'keyword',
      },
      'as.number': {
        dashed_name: 'source-as-number',
        description:
          'Unique number allocated to the autonomous system. The autonomous\nsystem number (ASN) uniquely identifies each network on the Internet.',
        example: 15169,
        flat_name: 'source.as.number',
        level: 'extended',
        name: 'number',
        normalize: [],
        order: 0,
        original_fieldset: 'as',
        short:
          'Unique number allocated to the autonomous system. The autonomous system\nnumber (ASN) uniquely identifies each network on the Internet.',
        type: 'long',
      },
      'as.organization.name': {
        dashed_name: 'source-as-organization-name',
        description: 'Organization name.',
        example: 'Google LLC',
        flat_name: 'source.as.organization.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'source.as.organization.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'organization.name',
        normalize: [],
        order: 1,
        original_fieldset: 'as',
        short: 'Organization name.',
        type: 'keyword',
      },
      bytes: {
        dashed_name: 'source-bytes',
        description: 'Bytes sent from the source to the destination.',
        example: 184,
        flat_name: 'source.bytes',
        format: 'bytes',
        level: 'core',
        name: 'bytes',
        normalize: [],
        order: 7,
        short: 'Bytes sent from the source to the destination.',
        type: 'long',
      },
      domain: {
        dashed_name: 'source-domain',
        description: 'Source domain.',
        flat_name: 'source.domain',
        ignore_above: 1024,
        level: 'core',
        name: 'domain',
        normalize: [],
        order: 4,
        short: 'Source domain.',
        type: 'keyword',
      },
      'geo.city_name': {
        dashed_name: 'source-geo-city-name',
        description: 'City name.',
        example: 'Montreal',
        flat_name: 'source.geo.city_name',
        ignore_above: 1024,
        level: 'core',
        name: 'city_name',
        normalize: [],
        order: 4,
        original_fieldset: 'geo',
        short: 'City name.',
        type: 'keyword',
      },
      'geo.continent_name': {
        dashed_name: 'source-geo-continent-name',
        description: 'Name of the continent.',
        example: 'North America',
        flat_name: 'source.geo.continent_name',
        ignore_above: 1024,
        level: 'core',
        name: 'continent_name',
        normalize: [],
        order: 1,
        original_fieldset: 'geo',
        short: 'Name of the continent.',
        type: 'keyword',
      },
      'geo.country_iso_code': {
        dashed_name: 'source-geo-country-iso-code',
        description: 'Country ISO code.',
        example: 'CA',
        flat_name: 'source.geo.country_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'country_iso_code',
        normalize: [],
        order: 5,
        original_fieldset: 'geo',
        short: 'Country ISO code.',
        type: 'keyword',
      },
      'geo.country_name': {
        dashed_name: 'source-geo-country-name',
        description: 'Country name.',
        example: 'Canada',
        flat_name: 'source.geo.country_name',
        ignore_above: 1024,
        level: 'core',
        name: 'country_name',
        normalize: [],
        order: 2,
        original_fieldset: 'geo',
        short: 'Country name.',
        type: 'keyword',
      },
      'geo.location': {
        dashed_name: 'source-geo-location',
        description: 'Longitude and latitude.',
        example: '{ "lon": -73.614830, "lat": 45.505918 }',
        flat_name: 'source.geo.location',
        level: 'core',
        name: 'location',
        normalize: [],
        order: 0,
        original_fieldset: 'geo',
        short: 'Longitude and latitude.',
        type: 'geo_point',
      },
      'geo.name': {
        dashed_name: 'source-geo-name',
        description:
          'User-defined description of a location, at the level of granularity\nthey care about.\n\nCould be the name of their data centers, the floor number, if this describes\na local physical entity, city names.\n\nNot typically used in automated geolocation.',
        example: 'boston-dc',
        flat_name: 'source.geo.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 7,
        original_fieldset: 'geo',
        short: 'User-defined description of a location.',
        type: 'keyword',
      },
      'geo.region_iso_code': {
        dashed_name: 'source-geo-region-iso-code',
        description: 'Region ISO code.',
        example: 'CA-QC',
        flat_name: 'source.geo.region_iso_code',
        ignore_above: 1024,
        level: 'core',
        name: 'region_iso_code',
        normalize: [],
        order: 6,
        original_fieldset: 'geo',
        short: 'Region ISO code.',
        type: 'keyword',
      },
      'geo.region_name': {
        dashed_name: 'source-geo-region-name',
        description: 'Region name.',
        example: 'Quebec',
        flat_name: 'source.geo.region_name',
        ignore_above: 1024,
        level: 'core',
        name: 'region_name',
        normalize: [],
        order: 3,
        original_fieldset: 'geo',
        short: 'Region name.',
        type: 'keyword',
      },
      ip: {
        dashed_name: 'source-ip',
        description: 'IP address of the source (IPv4 or IPv6).',
        flat_name: 'source.ip',
        level: 'core',
        name: 'ip',
        normalize: [],
        order: 1,
        short: 'IP address of the source.',
        type: 'ip',
      },
      mac: {
        dashed_name: 'source-mac',
        description: 'MAC address of the source.',
        flat_name: 'source.mac',
        ignore_above: 1024,
        level: 'core',
        name: 'mac',
        normalize: [],
        order: 3,
        short: 'MAC address of the source.',
        type: 'keyword',
      },
      'nat.ip': {
        dashed_name: 'source-nat-ip',
        description:
          'Translated ip of source based NAT sessions (e.g. internal client\nto internet)\n\nTypically connections traversing load balancers, firewalls, or routers.',
        flat_name: 'source.nat.ip',
        level: 'extended',
        name: 'nat.ip',
        normalize: [],
        order: 9,
        short: 'Source NAT ip',
        type: 'ip',
      },
      'nat.port': {
        dashed_name: 'source-nat-port',
        description:
          'Translated port of source based NAT sessions. (e.g. internal client\nto internet)\n\nTypically used with load balancers, firewalls, or routers.',
        flat_name: 'source.nat.port',
        format: 'string',
        level: 'extended',
        name: 'nat.port',
        normalize: [],
        order: 10,
        short: 'Source NAT port',
        type: 'long',
      },
      packets: {
        dashed_name: 'source-packets',
        description: 'Packets sent from the source to the destination.',
        example: 12,
        flat_name: 'source.packets',
        level: 'core',
        name: 'packets',
        normalize: [],
        order: 8,
        short: 'Packets sent from the source to the destination.',
        type: 'long',
      },
      port: {
        dashed_name: 'source-port',
        description: 'Port of the source.',
        flat_name: 'source.port',
        format: 'string',
        level: 'core',
        name: 'port',
        normalize: [],
        order: 2,
        short: 'Port of the source.',
        type: 'long',
      },
      registered_domain: {
        dashed_name: 'source-registered-domain',
        description:
          'The highest registered source domain, stripped of the subdomain.\n\nFor example, the registered domain for "foo.google.com" is "google.com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last two labels will not work well for TLDs such as "co.uk".',
        example: 'google.com',
        flat_name: 'source.registered_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'registered_domain',
        normalize: [],
        order: 5,
        short: 'The highest registered source domain, stripped of the subdomain.',
        type: 'keyword',
      },
      top_level_domain: {
        dashed_name: 'source-top-level-domain',
        description:
          'The effective top level domain (eTLD), also known as the domain\nsuffix, is the last part of the domain name. For example, the top level domain\nfor google.com is "com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last label will not work well for effective TLDs such as "co.uk".',
        example: 'co.uk',
        flat_name: 'source.top_level_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'top_level_domain',
        normalize: [],
        order: 6,
        short: 'The effective top level domain (com, org, net, co.uk).',
        type: 'keyword',
      },
      'user.domain': {
        dashed_name: 'source-user-domain',
        description:
          'Name of the directory the user is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'source.user.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 5,
        original_fieldset: 'user',
        short: 'Name of the directory the user is a member of.',
        type: 'keyword',
      },
      'user.email': {
        dashed_name: 'source-user-email',
        description: 'User email address.',
        flat_name: 'source.user.email',
        ignore_above: 1024,
        level: 'extended',
        name: 'email',
        normalize: [],
        order: 3,
        original_fieldset: 'user',
        short: 'User email address.',
        type: 'keyword',
      },
      'user.full_name': {
        dashed_name: 'source-user-full-name',
        description: "User's full name, if available.",
        example: 'Albert Einstein',
        flat_name: 'source.user.full_name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'source.user.full_name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full_name',
        normalize: [],
        order: 2,
        original_fieldset: 'user',
        short: "User's full name, if available.",
        type: 'keyword',
      },
      'user.group.domain': {
        dashed_name: 'source-user-group-domain',
        description:
          'Name of the directory the group is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'source.user.group.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 2,
        original_fieldset: 'group',
        short: 'Name of the directory the group is a member of.',
        type: 'keyword',
      },
      'user.group.id': {
        dashed_name: 'source-user-group-id',
        description: 'Unique identifier for the group on the system/platform.',
        flat_name: 'source.user.group.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'group',
        short: 'Unique identifier for the group on the system/platform.',
        type: 'keyword',
      },
      'user.group.name': {
        dashed_name: 'source-user-group-name',
        description: 'Name of the group.',
        flat_name: 'source.user.group.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'group',
        short: 'Name of the group.',
        type: 'keyword',
      },
      'user.hash': {
        dashed_name: 'source-user-hash',
        description:
          'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
        flat_name: 'source.user.hash',
        ignore_above: 1024,
        level: 'extended',
        name: 'hash',
        normalize: [],
        order: 4,
        original_fieldset: 'user',
        short: 'Unique user hash to correlate information for a user in anonymized form.',
        type: 'keyword',
      },
      'user.id': {
        dashed_name: 'source-user-id',
        description: 'Unique identifier of the user.',
        flat_name: 'source.user.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'user',
        short: 'Unique identifier of the user.',
        type: 'keyword',
      },
      'user.name': {
        dashed_name: 'source-user-name',
        description: 'Short name or login of the user.',
        example: 'albert',
        flat_name: 'source.user.name',
        ignore_above: 1024,
        level: 'core',
        multi_fields: [
          {
            flat_name: 'source.user.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'user',
        short: 'Short name or login of the user.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'source',
    nestings: ['as', 'geo', 'user'],
    prefix: 'source.',
    short: 'Fields about the source side of a network connection, used with destination.',
    title: 'Source',
    type: 'group',
  },
  threat: {
    description:
      'Fields to classify events and alerts according to a threat taxonomy\nsuch as the Mitre ATT&CK framework.\n\nThese fields are for users to classify alerts from all of their sources (e.g.\nIDS, NGFW, etc.) within a common taxonomy. The threat.tactic.* are meant to capture\nthe high level category of the threat (e.g. "impact"). The threat.technique.*\nfields are meant to capture which kind of approach is used by this detected threat,\nto accomplish the goal (e.g. "endpoint denial of service").',
    fields: {
      framework: {
        dashed_name: 'threat-framework',
        description:
          'Name of the threat framework used to further categorize and classify\nthe tactic and technique of the reported threat. Framework classification\ncan be provided by detecting systems, evaluated at ingest time, or retrospectively\ntagged to events.',
        example: 'MITRE ATT&CK',
        flat_name: 'threat.framework',
        ignore_above: 1024,
        level: 'extended',
        name: 'framework',
        normalize: [],
        order: 0,
        short: 'Threat classification framework.',
        type: 'keyword',
      },
      'tactic.id': {
        dashed_name: 'threat-tactic-id',
        description:
          'The id of tactic used by this threat. You can use the Mitre ATT&CK\nMatrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/\n)',
        example: 'TA0040',
        flat_name: 'threat.tactic.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'tactic.id',
        normalize: ['array'],
        order: 2,
        short: 'Threat tactic id.',
        type: 'keyword',
      },
      'tactic.name': {
        dashed_name: 'threat-tactic-name',
        description:
          'Name of the type of tactic used by this threat. You can use the\nMitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/\n)',
        example: 'impact',
        flat_name: 'threat.tactic.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'tactic.name',
        normalize: ['array'],
        order: 1,
        short: 'Threat tactic.',
        type: 'keyword',
      },
      'tactic.reference': {
        dashed_name: 'threat-tactic-reference',
        description:
          'The reference url of tactic used by this threat. You can use the\nMitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/tactics/TA0040/\n)',
        example: 'https://attack.mitre.org/tactics/TA0040/',
        flat_name: 'threat.tactic.reference',
        ignore_above: 1024,
        level: 'extended',
        name: 'tactic.reference',
        normalize: ['array'],
        order: 3,
        short: 'Threat tactic url reference.',
        type: 'keyword',
      },
      'technique.id': {
        dashed_name: 'threat-technique-id',
        description:
          'The id of technique used by this tactic. You can use the Mitre\nATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/\n)',
        example: 'T1499',
        flat_name: 'threat.technique.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'technique.id',
        normalize: ['array'],
        order: 5,
        short: 'Threat technique id.',
        type: 'keyword',
      },
      'technique.name': {
        dashed_name: 'threat-technique-name',
        description:
          'The name of technique used by this tactic. You can use the Mitre\nATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/\n)',
        example: 'endpoint denial of service',
        flat_name: 'threat.technique.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'threat.technique.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'technique.name',
        normalize: ['array'],
        order: 4,
        short: 'Threat technique name.',
        type: 'keyword',
      },
      'technique.reference': {
        dashed_name: 'threat-technique-reference',
        description:
          'The reference url of technique used by this tactic. You can use\nthe Mitre ATT&CK Matrix Tactic categorization, for example. (ex. https://attack.mitre.org/techniques/T1499/\n)',
        example: 'https://attack.mitre.org/techniques/T1499/',
        flat_name: 'threat.technique.reference',
        ignore_above: 1024,
        level: 'extended',
        name: 'technique.reference',
        normalize: ['array'],
        order: 6,
        short: 'Threat technique reference.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'threat',
    prefix: 'threat.',
    short: 'Fields to classify events and alerts according to a threat taxonomy.',
    title: 'Threat',
    type: 'group',
  },
  tls: {
    description:
      'Fields related to a TLS connection. These fields focus on the TLS protocol\nitself and intentionally avoids in-depth analysis of the related x.509 certificate\nfiles.',
    fields: {
      cipher: {
        dashed_name: 'tls-cipher',
        description: 'String indicating the cipher used during the current connection.',
        example: 'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
        flat_name: 'tls.cipher',
        ignore_above: 1024,
        level: 'extended',
        name: 'cipher',
        normalize: [],
        order: 2,
        short: 'String indicating the cipher used during the current connection.',
        type: 'keyword',
      },
      'client.certificate': {
        dashed_name: 'tls-client-certificate',
        description:
          'PEM-encoded stand-alone certificate offered by the client. This\nis usually mutually-exclusive of `client.certificate_chain` since this value\nalso exists in that list.',
        example: 'MII...',
        flat_name: 'tls.client.certificate',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.certificate',
        normalize: [],
        order: 15,
        short:
          'PEM-encoded stand-alone certificate offered by the client. This is usually\nmutually-exclusive of `client.certificate_chain` since this value also exists\nin that list.',
        type: 'keyword',
      },
      'client.certificate_chain': {
        dashed_name: 'tls-client-certificate-chain',
        description:
          'Array of PEM-encoded certificates that make up the certificate\nchain offered by the client. This is usually mutually-exclusive of `client.certificate`\nsince that value should be the first certificate in the chain.',
        example: ['MII...', 'MII...'],
        flat_name: 'tls.client.certificate_chain',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.certificate_chain',
        normalize: ['array'],
        order: 14,
        short:
          'Array of PEM-encoded certificates that make up the certificate chain\noffered by the client. This is usually mutually-exclusive of `client.certificate`\nsince that value should be the first certificate in the chain.',
        type: 'keyword',
      },
      'client.hash.md5': {
        dashed_name: 'tls-client-hash-md5',
        description:
          'Certificate fingerprint using the MD5 digest of DER-encoded version\nof certificate offered by the client. For consistency with other hash values,\nthis value should be formatted as an uppercase hash.',
        example: '0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC',
        flat_name: 'tls.client.hash.md5',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.hash.md5',
        normalize: [],
        order: 16,
        short:
          'Certificate fingerprint using the MD5 digest of DER-encoded version of\ncertificate offered by the client. For consistency with other hash values,\nthis value should be formatted as an uppercase hash.',
        type: 'keyword',
      },
      'client.hash.sha1': {
        dashed_name: 'tls-client-hash-sha1',
        description:
          'Certificate fingerprint using the SHA1 digest of DER-encoded version\nof certificate offered by the client. For consistency with other hash values,\nthis value should be formatted as an uppercase hash.',
        example: '9E393D93138888D288266C2D915214D1D1CCEB2A',
        flat_name: 'tls.client.hash.sha1',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.hash.sha1',
        normalize: [],
        order: 17,
        short:
          'Certificate fingerprint using the SHA1 digest of DER-encoded version\nof certificate offered by the client. For consistency with other hash values,\nthis value should be formatted as an uppercase hash.',
        type: 'keyword',
      },
      'client.hash.sha256': {
        dashed_name: 'tls-client-hash-sha256',
        description:
          'Certificate fingerprint using the SHA256 digest of DER-encoded\nversion of certificate offered by the client. For consistency with other hash\nvalues, this value should be formatted as an uppercase hash.',
        example: '0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0',
        flat_name: 'tls.client.hash.sha256',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.hash.sha256',
        normalize: [],
        order: 18,
        short:
          'Certificate fingerprint using the SHA256 digest of DER-encoded version\nof certificate offered by the client. For consistency with other hash values,\nthis value should be formatted as an uppercase hash.',
        type: 'keyword',
      },
      'client.issuer': {
        dashed_name: 'tls-client-issuer',
        description:
          'Distinguished name of subject of the issuer of the x.509 certificate\npresented by the client.',
        example: 'CN=MyDomain Root CA, OU=Infrastructure Team, DC=mydomain, DC=com',
        flat_name: 'tls.client.issuer',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.issuer',
        normalize: [],
        order: 11,
        short:
          'Distinguished name of subject of the issuer of the x.509 certificate\npresented by the client.',
        type: 'keyword',
      },
      'client.ja3': {
        dashed_name: 'tls-client-ja3',
        description:
          'A hash that identifies clients based on how they perform an SSL/TLS\nhandshake.',
        example: 'd4e5b18d6b55c71272893221c96ba240',
        flat_name: 'tls.client.ja3',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.ja3',
        normalize: [],
        order: 7,
        short: 'A hash that identifies clients based on how they perform an SSL/TLS handshake.',
        type: 'keyword',
      },
      'client.not_after': {
        dashed_name: 'tls-client-not-after',
        description: 'Date/Time indicating when client certificate is no longer considered\nvalid.',
        example: '2021-01-01T00:00:00.000Z',
        flat_name: 'tls.client.not_after',
        level: 'extended',
        name: 'client.not_after',
        normalize: [],
        order: 13,
        short: 'Date/Time indicating when client certificate is no longer considered\nvalid.',
        type: 'date',
      },
      'client.not_before': {
        dashed_name: 'tls-client-not-before',
        description: 'Date/Time indicating when client certificate is first considered\nvalid.',
        example: '1970-01-01T00:00:00.000Z',
        flat_name: 'tls.client.not_before',
        level: 'extended',
        name: 'client.not_before',
        normalize: [],
        order: 12,
        short: 'Date/Time indicating when client certificate is first considered valid.',
        type: 'date',
      },
      'client.server_name': {
        dashed_name: 'tls-client-server-name',
        description:
          'Also called an SNI, this tells the server which hostname to which\nthe client is attempting to connect. When this value is available, it should\nget copied to `destination.domain`.',
        example: 'www.elastic.co',
        flat_name: 'tls.client.server_name',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.server_name',
        normalize: [],
        order: 8,
        short:
          'Also called an SNI, this tells the server which hostname to which the\nclient is attempting to connect. When this value is available, it should get\ncopied to `destination.domain`.',
        type: 'keyword',
      },
      'client.subject': {
        dashed_name: 'tls-client-subject',
        description:
          'Distinguished name of subject of the x.509 certificate presented\nby the client.',
        example: 'CN=myclient, OU=Documentation Team, DC=mydomain, DC=com',
        flat_name: 'tls.client.subject',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.subject',
        normalize: [],
        order: 10,
        short: 'Distinguished name of subject of the x.509 certificate presented by the\nclient.',
        type: 'keyword',
      },
      'client.supported_ciphers': {
        dashed_name: 'tls-client-supported-ciphers',
        description: 'Array of ciphers offered by the client during the client hello.',
        example: [
          'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
          'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
          '...',
        ],
        flat_name: 'tls.client.supported_ciphers',
        ignore_above: 1024,
        level: 'extended',
        name: 'client.supported_ciphers',
        normalize: ['array'],
        order: 9,
        short: 'Array of ciphers offered by the client during the client hello.',
        type: 'keyword',
      },
      curve: {
        dashed_name: 'tls-curve',
        description: 'String indicating the curve used for the given cipher, when applicable.',
        example: 'secp256r1',
        flat_name: 'tls.curve',
        ignore_above: 1024,
        level: 'extended',
        name: 'curve',
        normalize: [],
        order: 3,
        short: 'String indicating the curve used for the given cipher, when applicable.',
        type: 'keyword',
      },
      established: {
        dashed_name: 'tls-established',
        description:
          'Boolean flag indicating if the TLS negotiation was successful and\ntransitioned to an encrypted tunnel.',
        flat_name: 'tls.established',
        level: 'extended',
        name: 'established',
        normalize: [],
        order: 5,
        short:
          'Boolean flag indicating if the TLS negotiation was successful and transitioned\nto an encrypted tunnel.',
        type: 'boolean',
      },
      next_protocol: {
        dashed_name: 'tls-next-protocol',
        description:
          'String indicating the protocol being tunneled. Per the values in\nthe IANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids),\nthis string should be lower case.',
        example: 'http/1.1',
        flat_name: 'tls.next_protocol',
        ignore_above: 1024,
        level: 'extended',
        name: 'next_protocol',
        normalize: [],
        order: 6,
        short:
          'String indicating the protocol being tunneled. Per the values in the\nIANA registry (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids),\nthis string should be lower case.',
        type: 'keyword',
      },
      resumed: {
        dashed_name: 'tls-resumed',
        description:
          'Boolean flag indicating if this TLS connection was resumed from\nan existing TLS negotiation.',
        flat_name: 'tls.resumed',
        level: 'extended',
        name: 'resumed',
        normalize: [],
        order: 4,
        short:
          'Boolean flag indicating if this TLS connection was resumed from an existing\nTLS negotiation.',
        type: 'boolean',
      },
      'server.certificate': {
        dashed_name: 'tls-server-certificate',
        description:
          'PEM-encoded stand-alone certificate offered by the server. This\nis usually mutually-exclusive of `server.certificate_chain` since this value\nalso exists in that list.',
        example: 'MII...',
        flat_name: 'tls.server.certificate',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.certificate',
        normalize: [],
        order: 25,
        short:
          'PEM-encoded stand-alone certificate offered by the server. This is usually\nmutually-exclusive of `server.certificate_chain` since this value also exists\nin that list.',
        type: 'keyword',
      },
      'server.certificate_chain': {
        dashed_name: 'tls-server-certificate-chain',
        description:
          'Array of PEM-encoded certificates that make up the certificate\nchain offered by the server. This is usually mutually-exclusive of `server.certificate`\nsince that value should be the first certificate in the chain.',
        example: ['MII...', 'MII...'],
        flat_name: 'tls.server.certificate_chain',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.certificate_chain',
        normalize: ['array'],
        order: 24,
        short:
          'Array of PEM-encoded certificates that make up the certificate chain\noffered by the server. This is usually mutually-exclusive of `server.certificate`\nsince that value should be the first certificate in the chain.',
        type: 'keyword',
      },
      'server.hash.md5': {
        dashed_name: 'tls-server-hash-md5',
        description:
          'Certificate fingerprint using the MD5 digest of DER-encoded version\nof certificate offered by the server. For consistency with other hash values,\nthis value should be formatted as an uppercase hash.',
        example: '0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC',
        flat_name: 'tls.server.hash.md5',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.hash.md5',
        normalize: [],
        order: 26,
        short:
          'Certificate fingerprint using the MD5 digest of DER-encoded version of\ncertificate offered by the server. For consistency with other hash values,\nthis value should be formatted as an uppercase hash.',
        type: 'keyword',
      },
      'server.hash.sha1': {
        dashed_name: 'tls-server-hash-sha1',
        description:
          'Certificate fingerprint using the SHA1 digest of DER-encoded version\nof certificate offered by the server. For consistency with other hash values,\nthis value should be formatted as an uppercase hash.',
        example: '9E393D93138888D288266C2D915214D1D1CCEB2A',
        flat_name: 'tls.server.hash.sha1',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.hash.sha1',
        normalize: [],
        order: 27,
        short:
          'Certificate fingerprint using the SHA1 digest of DER-encoded version\nof certificate offered by the server. For consistency with other hash values,\nthis value should be formatted as an uppercase hash.',
        type: 'keyword',
      },
      'server.hash.sha256': {
        dashed_name: 'tls-server-hash-sha256',
        description:
          'Certificate fingerprint using the SHA256 digest of DER-encoded\nversion of certificate offered by the server. For consistency with other hash\nvalues, this value should be formatted as an uppercase hash.',
        example: '0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0',
        flat_name: 'tls.server.hash.sha256',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.hash.sha256',
        normalize: [],
        order: 28,
        short:
          'Certificate fingerprint using the SHA256 digest of DER-encoded version\nof certificate offered by the server. For consistency with other hash values,\nthis value should be formatted as an uppercase hash.',
        type: 'keyword',
      },
      'server.issuer': {
        dashed_name: 'tls-server-issuer',
        description: 'Subject of the issuer of the x.509 certificate presented by the\nserver.',
        example: 'CN=MyDomain Root CA, OU=Infrastructure Team, DC=mydomain, DC=com',
        flat_name: 'tls.server.issuer',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.issuer',
        normalize: [],
        order: 21,
        short: 'Subject of the issuer of the x.509 certificate presented by the server.',
        type: 'keyword',
      },
      'server.ja3s': {
        dashed_name: 'tls-server-ja3s',
        description:
          'A hash that identifies servers based on how they perform an SSL/TLS\nhandshake.',
        example: '394441ab65754e2207b1e1b457b3641d',
        flat_name: 'tls.server.ja3s',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.ja3s',
        normalize: [],
        order: 19,
        short: 'A hash that identifies servers based on how they perform an SSL/TLS handshake.',
        type: 'keyword',
      },
      'server.not_after': {
        dashed_name: 'tls-server-not-after',
        description: 'Timestamp indicating when server certificate is no longer considered\nvalid.',
        example: '2021-01-01T00:00:00.000Z',
        flat_name: 'tls.server.not_after',
        level: 'extended',
        name: 'server.not_after',
        normalize: [],
        order: 23,
        short: 'Timestamp indicating when server certificate is no longer considered\nvalid.',
        type: 'date',
      },
      'server.not_before': {
        dashed_name: 'tls-server-not-before',
        description: 'Timestamp indicating when server certificate is first considered\nvalid.',
        example: '1970-01-01T00:00:00.000Z',
        flat_name: 'tls.server.not_before',
        level: 'extended',
        name: 'server.not_before',
        normalize: [],
        order: 22,
        short: 'Timestamp indicating when server certificate is first considered valid.',
        type: 'date',
      },
      'server.subject': {
        dashed_name: 'tls-server-subject',
        description: 'Subject of the x.509 certificate presented by the server.',
        example: 'CN=www.mydomain.com, OU=Infrastructure Team, DC=mydomain, DC=com',
        flat_name: 'tls.server.subject',
        ignore_above: 1024,
        level: 'extended',
        name: 'server.subject',
        normalize: [],
        order: 20,
        short: 'Subject of the x.509 certificate presented by the server.',
        type: 'keyword',
      },
      version: {
        dashed_name: 'tls-version',
        description: 'Numeric part of the version parsed from the original string.',
        example: '1.2',
        flat_name: 'tls.version',
        ignore_above: 1024,
        level: 'extended',
        name: 'version',
        normalize: [],
        order: 0,
        short: 'Numeric part of the version parsed from the original string.',
        type: 'keyword',
      },
      version_protocol: {
        dashed_name: 'tls-version-protocol',
        description: 'Normalized lowercase protocol name parsed from original string.',
        example: 'tls',
        flat_name: 'tls.version_protocol',
        ignore_above: 1024,
        level: 'extended',
        name: 'version_protocol',
        normalize: [],
        order: 1,
        short: 'Normalized lowercase protocol name parsed from original string.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'tls',
    prefix: 'tls.',
    short: 'Fields describing a TLS connection.',
    title: 'TLS',
    type: 'group',
  },
  tracing: {
    description:
      'Distributed tracing makes it possible to analyze performance throughout\na microservice architecture all in one view. This is accomplished by tracing all\nof the requests - from the initial web request in the front-end service - to queries\nmade through multiple back-end services.',
    fields: {
      'trace.id': {
        dashed_name: 'trace-id',
        description:
          'Unique identifier of the trace.\n\nA trace groups multiple events like transactions that belong together. For\nexample, a user request handled by multiple inter-connected services.',
        example: '4bf92f3577b34da6a3ce929d0e0e4736',
        flat_name: 'trace.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'trace.id',
        normalize: [],
        order: 0,
        short: 'Unique identifier of the trace.',
        type: 'keyword',
      },
      'transaction.id': {
        dashed_name: 'transaction-id',
        description:
          'Unique identifier of the transaction.\n\nA transaction is the highest level of work measured within a service, such\nas a request to a server.',
        example: '00f067aa0ba902b7',
        flat_name: 'transaction.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'transaction.id',
        normalize: [],
        order: 1,
        short: 'Unique identifier of the transaction.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'tracing',
    prefix: '',
    root: true,
    short: 'Fields related to distributed tracing.',
    title: 'Tracing',
    type: 'group',
  },
  url: {
    description:
      'URL fields provide support for complete or partial URLs, and supports\nthe breaking down into scheme, domain, path, and so on.',
    fields: {
      domain: {
        dashed_name: 'url-domain',
        description:
          'Domain of the url, such as "www.elastic.co".\n\nIn some cases a URL may refer to an IP and/or port directly, without a domain\nname. In this case, the IP address would go to the `domain` field.',
        example: 'www.elastic.co',
        flat_name: 'url.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 3,
        short: 'Domain of the url.',
        type: 'keyword',
      },
      extension: {
        dashed_name: 'url-extension',
        description:
          'The field contains the file extension from the original request\nurl.\n\nThe file extension is only set if it exists, as not every url has a file extension.\n\nThe leading period must not be included. For example, the value must be "png",\nnot ".png".',
        example: 'png',
        flat_name: 'url.extension',
        ignore_above: 1024,
        level: 'extended',
        name: 'extension',
        normalize: [],
        order: 9,
        short: 'File extension from the original request url.',
        type: 'keyword',
      },
      fragment: {
        dashed_name: 'url-fragment',
        description:
          'Portion of the url after the `#`, such as "top".\n\nThe `#` is not part of the fragment.',
        flat_name: 'url.fragment',
        ignore_above: 1024,
        level: 'extended',
        name: 'fragment',
        normalize: [],
        order: 10,
        short: 'Portion of the url after the `#`.',
        type: 'keyword',
      },
      full: {
        dashed_name: 'url-full',
        description:
          'If full URLs are important to your use case, they should be stored\nin `url.full`, whether this field is reconstructed or present in the event\nsource.',
        example: 'https://www.elastic.co:443/search?q=elasticsearch#top',
        flat_name: 'url.full',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'url.full.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full',
        normalize: [],
        order: 1,
        short: 'Full unparsed URL.',
        type: 'keyword',
      },
      original: {
        dashed_name: 'url-original',
        description:
          'Unmodified original url as seen in the event source.\n\nNote that in network monitoring, the observed URL may be a full URL, whereas\nin access logs, the URL is often just represented as a path.\n\nThis field is meant to represent the URL as it was observed, complete or not.',
        example: 'https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch',
        flat_name: 'url.original',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'url.original.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'original',
        normalize: [],
        order: 0,
        short: 'Unmodified original url as seen in the event source.',
        type: 'keyword',
      },
      password: {
        dashed_name: 'url-password',
        description: 'Password of the request.',
        flat_name: 'url.password',
        ignore_above: 1024,
        level: 'extended',
        name: 'password',
        normalize: [],
        order: 12,
        short: 'Password of the request.',
        type: 'keyword',
      },
      path: {
        dashed_name: 'url-path',
        description: 'Path of the request, such as "/search".',
        flat_name: 'url.path',
        ignore_above: 1024,
        level: 'extended',
        name: 'path',
        normalize: [],
        order: 7,
        short: 'Path of the request, such as "/search".',
        type: 'keyword',
      },
      port: {
        dashed_name: 'url-port',
        description: 'Port of the request, such as 443.',
        example: 443,
        flat_name: 'url.port',
        format: 'string',
        level: 'extended',
        name: 'port',
        normalize: [],
        order: 6,
        short: 'Port of the request, such as 443.',
        type: 'long',
      },
      query: {
        dashed_name: 'url-query',
        description:
          'The query field describes the query string of the request, such\nas "q=elasticsearch".\n\nThe `?` is excluded from the query string. If a URL contains no `?`, there\nis no query field. If there is a `?` but no query, the query field exists\nwith an empty string. The `exists` query can be used to differentiate between\nthe two cases.',
        flat_name: 'url.query',
        ignore_above: 1024,
        level: 'extended',
        name: 'query',
        normalize: [],
        order: 8,
        short: 'Query string of the request.',
        type: 'keyword',
      },
      registered_domain: {
        dashed_name: 'url-registered-domain',
        description:
          'The highest registered url domain, stripped of the subdomain.\n\nFor example, the registered domain for "foo.google.com" is "google.com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last two labels will not work well for TLDs such as "co.uk".',
        example: 'google.com',
        flat_name: 'url.registered_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'registered_domain',
        normalize: [],
        order: 4,
        short: 'The highest registered url domain, stripped of the subdomain.',
        type: 'keyword',
      },
      scheme: {
        dashed_name: 'url-scheme',
        description:
          'Scheme of the request, such as "https".\n\nNote: The `:` is not part of the scheme.',
        example: 'https',
        flat_name: 'url.scheme',
        ignore_above: 1024,
        level: 'extended',
        name: 'scheme',
        normalize: [],
        order: 2,
        short: 'Scheme of the url.',
        type: 'keyword',
      },
      top_level_domain: {
        dashed_name: 'url-top-level-domain',
        description:
          'The effective top level domain (eTLD), also known as the domain\nsuffix, is the last part of the domain name. For example, the top level domain\nfor google.com is "com".\n\nThis value can be determined precisely with a list like the public suffix\nlist (http://publicsuffix.org). Trying to approximate this by simply taking\nthe last label will not work well for effective TLDs such as "co.uk".',
        example: 'co.uk',
        flat_name: 'url.top_level_domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'top_level_domain',
        normalize: [],
        order: 5,
        short: 'The effective top level domain (com, org, net, co.uk).',
        type: 'keyword',
      },
      username: {
        dashed_name: 'url-username',
        description: 'Username of the request.',
        flat_name: 'url.username',
        ignore_above: 1024,
        level: 'extended',
        name: 'username',
        normalize: [],
        order: 11,
        short: 'Username of the request.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'url',
    prefix: 'url.',
    short: 'Fields that let you store URLs in various forms.',
    title: 'URL',
    type: 'group',
  },
  user: {
    description:
      'The user fields describe information about the user that is relevant\nto the event.\n\nFields can have one entry or multiple entries. If a user has more than one id,\nprovide an array that includes all of them.',
    fields: {
      domain: {
        dashed_name: 'user-domain',
        description:
          'Name of the directory the user is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'user.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 5,
        short: 'Name of the directory the user is a member of.',
        type: 'keyword',
      },
      email: {
        dashed_name: 'user-email',
        description: 'User email address.',
        flat_name: 'user.email',
        ignore_above: 1024,
        level: 'extended',
        name: 'email',
        normalize: [],
        order: 3,
        short: 'User email address.',
        type: 'keyword',
      },
      full_name: {
        dashed_name: 'user-full-name',
        description: "User's full name, if available.",
        example: 'Albert Einstein',
        flat_name: 'user.full_name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'user.full_name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full_name',
        normalize: [],
        order: 2,
        short: "User's full name, if available.",
        type: 'keyword',
      },
      'group.domain': {
        dashed_name: 'user-group-domain',
        description:
          'Name of the directory the group is a member of.\n\nFor example, an LDAP or Active Directory domain name.',
        flat_name: 'user.group.domain',
        ignore_above: 1024,
        level: 'extended',
        name: 'domain',
        normalize: [],
        order: 2,
        original_fieldset: 'group',
        short: 'Name of the directory the group is a member of.',
        type: 'keyword',
      },
      'group.id': {
        dashed_name: 'user-group-id',
        description: 'Unique identifier for the group on the system/platform.',
        flat_name: 'user.group.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        original_fieldset: 'group',
        short: 'Unique identifier for the group on the system/platform.',
        type: 'keyword',
      },
      'group.name': {
        dashed_name: 'user-group-name',
        description: 'Name of the group.',
        flat_name: 'user.group.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'group',
        short: 'Name of the group.',
        type: 'keyword',
      },
      hash: {
        dashed_name: 'user-hash',
        description:
          'Unique user hash to correlate information for a user in anonymized\nform.\n\nUseful if `user.id` or `user.name` contain confidential information and cannot\nbe used.',
        flat_name: 'user.hash',
        ignore_above: 1024,
        level: 'extended',
        name: 'hash',
        normalize: [],
        order: 4,
        short: 'Unique user hash to correlate information for a user in anonymized form.',
        type: 'keyword',
      },
      id: {
        dashed_name: 'user-id',
        description: 'Unique identifier of the user.',
        flat_name: 'user.id',
        ignore_above: 1024,
        level: 'core',
        name: 'id',
        normalize: [],
        order: 0,
        short: 'Unique identifier of the user.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'user-name',
        description: 'Short name or login of the user.',
        example: 'albert',
        flat_name: 'user.name',
        ignore_above: 1024,
        level: 'core',
        multi_fields: [
          {
            flat_name: 'user.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 1,
        short: 'Short name or login of the user.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'user',
    nestings: ['group'],
    prefix: 'user.',
    reusable: {
      expected: ['client', 'destination', 'host', 'server', 'source'],
      top_level: true,
    },
    short: 'Fields to describe the user relevant to the event.',
    title: 'User',
    type: 'group',
  },
  user_agent: {
    description:
      'The user_agent fields normally come from a browser request.\n\nThey often show up in web service logs coming from the parsed user agent string.',
    fields: {
      'device.name': {
        dashed_name: 'user-agent-device-name',
        description: 'Name of the device.',
        example: 'iPhone',
        flat_name: 'user_agent.device.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'device.name',
        normalize: [],
        order: 3,
        short: 'Name of the device.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'user-agent-name',
        description: 'Name of the user agent.',
        example: 'Safari',
        flat_name: 'user_agent.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        short: 'Name of the user agent.',
        type: 'keyword',
      },
      original: {
        dashed_name: 'user-agent-original',
        description: 'Unparsed user_agent string.',
        example:
          'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15\n(KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1',
        flat_name: 'user_agent.original',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'user_agent.original.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'original',
        normalize: [],
        order: 0,
        short: 'Unparsed user_agent string.',
        type: 'keyword',
      },
      'os.family': {
        dashed_name: 'user-agent-os-family',
        description: 'OS family (such as redhat, debian, freebsd, windows).',
        example: 'debian',
        flat_name: 'user_agent.os.family',
        ignore_above: 1024,
        level: 'extended',
        name: 'family',
        normalize: [],
        order: 3,
        original_fieldset: 'os',
        short: 'OS family (such as redhat, debian, freebsd, windows).',
        type: 'keyword',
      },
      'os.full': {
        dashed_name: 'user-agent-os-full',
        description: 'Operating system name, including the version or code name.',
        example: 'Mac OS Mojave',
        flat_name: 'user_agent.os.full',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'user_agent.os.full.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'full',
        normalize: [],
        order: 2,
        original_fieldset: 'os',
        short: 'Operating system name, including the version or code name.',
        type: 'keyword',
      },
      'os.kernel': {
        dashed_name: 'user-agent-os-kernel',
        description: 'Operating system kernel version as a raw string.',
        example: '4.4.0-112-generic',
        flat_name: 'user_agent.os.kernel',
        ignore_above: 1024,
        level: 'extended',
        name: 'kernel',
        normalize: [],
        order: 5,
        original_fieldset: 'os',
        short: 'Operating system kernel version as a raw string.',
        type: 'keyword',
      },
      'os.name': {
        dashed_name: 'user-agent-os-name',
        description: 'Operating system name, without the version.',
        example: 'Mac OS X',
        flat_name: 'user_agent.os.name',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'user_agent.os.name.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'name',
        normalize: [],
        order: 1,
        original_fieldset: 'os',
        short: 'Operating system name, without the version.',
        type: 'keyword',
      },
      'os.platform': {
        dashed_name: 'user-agent-os-platform',
        description: 'Operating system platform (such centos, ubuntu, windows).',
        example: 'darwin',
        flat_name: 'user_agent.os.platform',
        ignore_above: 1024,
        level: 'extended',
        name: 'platform',
        normalize: [],
        order: 0,
        original_fieldset: 'os',
        short: 'Operating system platform (such centos, ubuntu, windows).',
        type: 'keyword',
      },
      'os.version': {
        dashed_name: 'user-agent-os-version',
        description: 'Operating system version as a raw string.',
        example: '10.14.1',
        flat_name: 'user_agent.os.version',
        ignore_above: 1024,
        level: 'extended',
        name: 'version',
        normalize: [],
        order: 4,
        original_fieldset: 'os',
        short: 'Operating system version as a raw string.',
        type: 'keyword',
      },
      version: {
        dashed_name: 'user-agent-version',
        description: 'Version of the user agent.',
        example: 12,
        flat_name: 'user_agent.version',
        ignore_above: 1024,
        level: 'extended',
        name: 'version',
        normalize: [],
        order: 2,
        short: 'Version of the user agent.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'user_agent',
    nestings: ['os'],
    prefix: 'user_agent.',
    short: 'Fields to describe a browser user_agent string.',
    title: 'User agent',
    type: 'group',
  },
  vlan: {
    description:
      'The VLAN fields are used to identify 802.1q tag(s) of a packet, as\nwell as ingress and egress VLAN associations of an observer in relation to a specific\npacket or connection.\n\nNetwork.vlan fields are used to record a single VLAN tag, or the outer tag in\nthe case of q-in-q encapsulations, for a packet or connection as observed, typically\nprovided by a network sensor (e.g. Zeek, Wireshark) passively reporting on traffic.\n\nNetwork.inner VLAN fields are used to report inner q-in-q 802.1q tags (multiple\n802.1q encapsulations) as observed, typically provided by a network sensor  (e.g.\nZeek, Wireshark) passively reporting on traffic. Network.inner VLAN fields should\nonly be used in addition to network.vlan fields to indicate q-in-q tagging.\n\nObserver.ingress and observer.egress VLAN values are used to record observer specific\ninformation when observer events contain discrete ingress and egress VLAN information,\ntypically provided by firewalls, routers, or load balancers.',
    fields: {
      id: {
        dashed_name: 'vlan-id',
        description: 'VLAN ID as reported by the observer.',
        example: 10,
        flat_name: 'vlan.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 0,
        short: 'VLAN ID as reported by the observer.',
        type: 'keyword',
      },
      name: {
        dashed_name: 'vlan-name',
        description: 'Optional VLAN name as reported by the observer.',
        example: 'outside',
        flat_name: 'vlan.name',
        ignore_above: 1024,
        level: 'extended',
        name: 'name',
        normalize: [],
        order: 1,
        short: 'Optional VLAN name as reported by the observer.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'vlan',
    prefix: 'vlan.',
    reusable: {
      expected: ['observer.ingress', 'observer.egress', 'network', 'network.inner'],
      top_level: false,
    },
    short: 'Fields to describe observed VLAN information.',
    title: 'VLAN',
    type: 'group',
  },
  vulnerability: {
    description:
      'The vulnerability fields describe information about a vulnerability\nthat is relevant to an event.',
    fields: {
      category: {
        dashed_name: 'vulnerability-category',
        description:
          'The type of system or architecture that the vulnerability affects.\nThese may be platform-specific (for example, Debian or SUSE) or general (for\nexample, Database or Firewall). For example (https://qualysguard.qualys.com/qwebhelp/fo_portal/knowledgebase/vulnerability_categories.htm[Qualys\nvulnerability categories])\n\nThis field must be an array.',
        example: '["Firewall"]',
        flat_name: 'vulnerability.category',
        ignore_above: 1024,
        level: 'extended',
        name: 'category',
        normalize: ['array'],
        order: 7,
        short: 'Category of a vulnerability.',
        type: 'keyword',
      },
      classification: {
        dashed_name: 'vulnerability-classification',
        description:
          'The classification of the vulnerability scoring system. For example\n(https://www.first.org/cvss/)',
        example: 'CVSS',
        flat_name: 'vulnerability.classification',
        ignore_above: 1024,
        level: 'extended',
        name: 'classification',
        normalize: [],
        order: 0,
        short: 'Classification of the vulnerability.',
        type: 'keyword',
      },
      description: {
        dashed_name: 'vulnerability-description',
        description:
          'The description of the vulnerability that provides additional context\nof the vulnerability. For example (https://cve.mitre.org/about/faqs.html#cve_entry_descriptions_created[Common\nVulnerabilities and Exposure CVE description])',
        example: 'In macOS before 2.12.6, there is a vulnerability in the RPC...',
        flat_name: 'vulnerability.description',
        ignore_above: 1024,
        level: 'extended',
        multi_fields: [
          {
            flat_name: 'vulnerability.description.text',
            name: 'text',
            norms: false,
            type: 'text',
          },
        ],
        name: 'description',
        normalize: [],
        order: 8,
        short: 'Description of the vulnerability.',
        type: 'keyword',
      },
      enumeration: {
        dashed_name: 'vulnerability-enumeration',
        description:
          'The type of identifier used for this vulnerability. For example\n(https://cve.mitre.org/about/)',
        example: 'CVE',
        flat_name: 'vulnerability.enumeration',
        ignore_above: 1024,
        level: 'extended',
        name: 'enumeration',
        normalize: [],
        order: 1,
        short: 'Identifier of the vulnerability.',
        type: 'keyword',
      },
      id: {
        dashed_name: 'vulnerability-id',
        description:
          'The identification (ID) is the number portion of a vulnerability\nentry. It includes a unique identification number for the vulnerability. For\nexample (https://cve.mitre.org/about/faqs.html#what_is_cve_id)[Common Vulnerabilities\nand Exposure CVE ID]',
        example: 'CVE-2019-00001',
        flat_name: 'vulnerability.id',
        ignore_above: 1024,
        level: 'extended',
        name: 'id',
        normalize: [],
        order: 9,
        short: 'ID of the vulnerability.',
        type: 'keyword',
      },
      reference: {
        dashed_name: 'vulnerability-reference',
        description:
          'A resource that provides additional information, context, and mitigations\nfor the identified vulnerability.',
        example: 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6111',
        flat_name: 'vulnerability.reference',
        ignore_above: 1024,
        level: 'extended',
        name: 'reference',
        normalize: [],
        order: 2,
        short: 'Reference of the vulnerability.',
        type: 'keyword',
      },
      report_id: {
        dashed_name: 'vulnerability-report-id',
        description: 'The report or scan identification number.',
        example: 20191018.0001,
        flat_name: 'vulnerability.report_id',
        ignore_above: 1024,
        level: 'extended',
        name: 'report_id',
        normalize: [],
        order: 12,
        short: 'Scan identification number.',
        type: 'keyword',
      },
      'scanner.vendor': {
        dashed_name: 'vulnerability-scanner-vendor',
        description: 'The name of the vulnerability scanner vendor.',
        example: 'Tenable',
        flat_name: 'vulnerability.scanner.vendor',
        ignore_above: 1024,
        level: 'extended',
        name: 'scanner.vendor',
        normalize: [],
        order: 10,
        short: 'Name of the scanner vendor.',
        type: 'keyword',
      },
      'score.base': {
        dashed_name: 'vulnerability-score-base',
        description:
          'Scores can range from 0.0 to 10.0, with 10.0 being the most severe.\n\nBase scores cover an assessment for exploitability metrics (attack vector,\ncomplexity, privileges, and user interaction), impact metrics (confidentiality,\nintegrity, and availability), and scope. For example (https://www.first.org/cvss/specification-document)',
        example: 5.5,
        flat_name: 'vulnerability.score.base',
        level: 'extended',
        name: 'score.base',
        normalize: [],
        order: 3,
        short: 'Vulnerability Base score.',
        type: 'float',
      },
      'score.environmental': {
        dashed_name: 'vulnerability-score-environmental',
        description:
          'Scores can range from 0.0 to 10.0, with 10.0 being the most severe.\n\nEnvironmental scores cover an assessment for any modified Base metrics, confidentiality,\nintegrity, and availability requirements. For example (https://www.first.org/cvss/specification-document)',
        example: 5.5,
        flat_name: 'vulnerability.score.environmental',
        level: 'extended',
        name: 'score.environmental',
        normalize: [],
        order: 5,
        short: 'Vulnerability Environmental score.',
        type: 'float',
      },
      'score.temporal': {
        dashed_name: 'vulnerability-score-temporal',
        description:
          'Scores can range from 0.0 to 10.0, with 10.0 being the most severe.\n\nTemporal scores cover an assessment for code maturity, remediation level,\nand confidence. For example (https://www.first.org/cvss/specification-document)',
        flat_name: 'vulnerability.score.temporal',
        level: 'extended',
        name: 'score.temporal',
        normalize: [],
        order: 4,
        short: 'Vulnerability Temporal score.',
        type: 'float',
      },
      'score.version': {
        dashed_name: 'vulnerability-score-version',
        description:
          'The National Vulnerability Database (NVD) provides qualitative\nseverity rankings of "Low", "Medium", and "High" for CVSS v2.0 base score\nranges in addition to the severity ratings for CVSS v3.0 as they are defined\nin the CVSS v3.0 specification.\n\nCVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit\norganization, whose mission is to help computer security incident response\nteams across the world. For example (https://nvd.nist.gov/vuln-metrics/cvss)',
        example: 2,
        flat_name: 'vulnerability.score.version',
        ignore_above: 1024,
        level: 'extended',
        name: 'score.version',
        normalize: [],
        order: 6,
        short: 'CVSS version.',
        type: 'keyword',
      },
      severity: {
        dashed_name: 'vulnerability-severity',
        description:
          'The severity of the vulnerability can help with metrics and internal\nprioritization regarding remediation. For example (https://nvd.nist.gov/vuln-metrics/cvss)',
        example: 'Critical',
        flat_name: 'vulnerability.severity',
        ignore_above: 1024,
        level: 'extended',
        name: 'severity',
        normalize: [],
        order: 11,
        short: 'Severity of the vulnerability.',
        type: 'keyword',
      },
    },
    group: 2,
    name: 'vulnerability',
    prefix: 'vulnerability.',
    short: 'Fields to describe the vulnerability relevant to an event.',
    title: 'Vulnerability',
    type: 'group',
  },
};
