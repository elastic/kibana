// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StepDefineRule renders correctly against the snapshot 1`] = `
<Fragment>
  <Memo(styled.div)
    addPadding={true}
  >
    <Form
      data-test-subj="stepDefineRule"
      form={
        Object {
          "__addField": [Function],
          "__formData$": Object {
            "current": Subject {
              "callbacks": Set {},
              "value": Object {
                "anomalyThreshold": 50,
                "index": Array [
                  "apm-*-transaction*",
                  "auditbeat-*",
                  "endgame-*",
                  "filebeat-*",
                  "packetbeat-*",
                  "winlogbeat-*",
                ],
                "isNew": true,
                "machineLearningJobId": "",
                "queryBar.filters": Array [],
                "queryBar.query.language": "kuery",
                "queryBar.query.query": "",
                "queryBar.saved_id": undefined,
                "ruleType": "query",
                "timeline.id": null,
                "timeline.title": "Default blank timeline",
              },
            },
          },
          "__options": Object {
            "errorDisplayDelay": 500,
            "stripEmptyFields": false,
          },
          "__readFieldConfigFromSchema": [Function],
          "__removeField": [Function],
          "__updateFormDataAt": [Function],
          "__validateFields": [Function],
          "getErrors": [Function],
          "getFieldDefaultValue": [Function],
          "getFields": [Function],
          "getFormData": [Function],
          "isSubmitted": false,
          "isSubmitting": false,
          "isValid": undefined,
          "reset": [Function],
          "setFieldErrors": [Function],
          "setFieldValue": [Function],
          "submit": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Memo()
        component={[Function]}
        componentProps={
          Object {
            "describedByIds": Array [
              "detectionEngineStepDefineRuleType",
            ],
            "hasValidLicense": false,
            "isMlAdmin": false,
            "isReadOnly": false,
          }
        }
        path="ruleType"
      />
      <EuiFormRow
        describedByIds={Array []}
        display="row"
        fullWidth={true}
        hasChildLabel={true}
        hasEmptyLabelSpace={false}
        labelType="label"
        style={
          Object {
            "display": "flex",
          }
        }
      >
        <Component
          componentProps={
            Object {
              "data-test-subj": "detectionEngineStepDefineRuleIndices",
              "euiFieldProps": Object {
                "fullWidth": true,
                "isDisabled": false,
                "placeholder": "",
              },
              "idAria": "detectionEngineStepDefineRuleIndices",
            }
          }
          config={
            Object {
              "helpText": <EuiText
                size="xs"
              >
                Enter the pattern of Elasticsearch indices where you would like this rule to run. By default, these will include index patterns defined in SIEM advanced settings.
              </EuiText>,
              "label": "Index patterns",
              "labelAppend": null,
              "type": "comboBox",
              "validations": Array [
                Object {
                  "validator": [Function],
                },
              ],
            }
          }
          path="index"
        />
        <Memo()
          component={[Function]}
          componentProps={
            Object {
              "browserFields": Object {},
              "dataTestSubj": "detectionEngineStepDefineRuleQueryBar",
              "idAria": "detectionEngineStepDefineRuleQueryBar",
              "indexPattern": Object {
                "fields": Array [],
                "title": "",
              },
              "isDisabled": false,
              "isLoading": false,
              "onCloseTimelineSearch": [Function],
              "openTimelineSearch": false,
            }
          }
          config={
            Object {
              "label": "Custom query",
              "labelAppend": <ForwardRef(Styled(EuiButtonEmpty))
                flush="right"
                onClick={[Function]}
              >
                Import query from saved timeline
              </ForwardRef(Styled(EuiButtonEmpty))>,
              "validations": Array [
                Object {
                  "validator": [Function],
                },
                Object {
                  "validator": [Function],
                },
              ],
            }
          }
          path="queryBar"
        />
      </EuiFormRow>
      <EuiFormRow
        describedByIds={Array []}
        display="row"
        fullWidth={true}
        hasChildLabel={true}
        hasEmptyLabelSpace={false}
        labelType="label"
        style={
          Object {
            "display": "none",
          }
        }
      >
        <Memo()
          component={[Function]}
          componentProps={
            Object {
              "describedByIds": Array [
                "detectionEngineStepDefineRulemachineLearningJobId",
              ],
            }
          }
          path="machineLearningJobId"
        />
        <Memo()
          component={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "type": [Function],
            }
          }
          componentProps={
            Object {
              "describedByIds": Array [
                "detectionEngineStepDefineRuleAnomalyThreshold",
              ],
            }
          }
          path="anomalyThreshold"
        />
      </EuiFormRow>
      <Memo()
        component={[Function]}
        componentProps={
          Object {
            "dataTestSubj": "detectionEngineStepDefineRuleTimeline",
            "idAria": "detectionEngineStepDefineRuleTimeline",
            "isDisabled": false,
          }
        }
        path="timeline"
      />
      <Memo()
        pathsToWatch={
          Array [
            "index",
            "ruleType",
          ]
        }
      >
        <Component />
      </Memo()>
    </Form>
  </Memo(styled.div)>
  <NextStep
    dataTestSubj="define-continue"
    isDisabled={false}
    onClick={[Function]}
  />
</Fragment>
`;
