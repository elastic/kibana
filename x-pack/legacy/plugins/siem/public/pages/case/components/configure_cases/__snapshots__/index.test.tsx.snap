// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConfigureCases it renders 1`] = `
<styled.div>
  <styled.div>
    <Memo(ConnectorsComponent)
      connectors={
        Array [
          Object {
            "actionTypeId": ".servicenow",
            "config": Object {
              "apiUrl": "https://instance1.service-now.com",
              "casesConfiguration": Object {
                "mapping": Array [
                  Object {
                    "actionType": "overwrite",
                    "source": "title",
                    "target": "short_description",
                  },
                  Object {
                    "actionType": "append",
                    "source": "description",
                    "target": "description",
                  },
                  Object {
                    "actionType": "append",
                    "source": "comments",
                    "target": "comments",
                  },
                ],
              },
            },
            "id": "123",
            "name": "My Connector",
          },
          Object {
            "actionTypeId": ".servicenow",
            "config": Object {
              "apiUrl": "https://instance2.service-now.com",
              "casesConfiguration": Object {
                "mapping": Array [
                  Object {
                    "actionType": "overwrite",
                    "source": "title",
                    "target": "short_description",
                  },
                  Object {
                    "actionType": "overwrite",
                    "source": "description",
                    "target": "description",
                  },
                  Object {
                    "actionType": "append",
                    "source": "comments",
                    "target": "comments",
                  },
                ],
              },
            },
            "id": "456",
            "name": "My Connector 2",
          },
        ]
      }
      disabled={false}
      handleShowAddFlyout={[Function]}
      isLoading={false}
      onChangeConnector={[Function]}
      selectedConnector="none"
    />
  </styled.div>
  <styled.div>
    <Memo(ClosureOptionsComponent)
      closureTypeSelected="close-by-user"
      disabled={true}
      onChangeClosureType={[Function]}
    />
  </styled.div>
  <styled.div>
    <Memo(MappingComponent)
      disabled={true}
      mapping={null}
      onChangeMapping={[Function]}
      setEditFlyoutVisibility={[Function]}
      updateConnectorDisabled={true}
    />
  </styled.div>
  <ActionsConnectorsContextProvider
    value={
      Object {
        "actionTypeRegistry": Object {
          "get": [MockFunction],
          "has": [MockFunction],
          "list": [MockFunction],
          "register": [MockFunction],
        },
        "capabilities": Object {
          "catalogue": Object {},
          "management": Object {},
          "navLinks": Object {},
        },
        "http": Object {
          "addLoadingCountSource": [MockFunction],
          "anonymousPaths": Object {
            "isAnonymous": [MockFunction],
            "register": [MockFunction],
          },
          "basePath": BasePath {
            "basePath": "",
            "get": [Function],
            "prepend": [Function],
            "remove": [Function],
            "serverBasePath": "",
          },
          "delete": [MockFunction],
          "fetch": [MockFunction],
          "get": [MockFunction],
          "getLoadingCount$": [MockFunction],
          "head": [MockFunction],
          "intercept": [MockFunction],
          "options": [MockFunction],
          "patch": [MockFunction],
          "post": [MockFunction],
          "put": [MockFunction],
        },
        "reloadConnectors": [Function],
        "toastNotifications": Object {
          "add": [MockFunction],
          "addDanger": [MockFunction],
          "addError": [MockFunction],
          "addInfo": [MockFunction],
          "addSuccess": [MockFunction],
          "addWarning": [MockFunction],
          "get$": [MockFunction],
          "remove": [MockFunction],
        },
      }
    }
  >
    <ConnectorAddFlyout
      actionTypes={
        Array [
          Object {
            "enabled": true,
            "enabledInConfig": true,
            "enabledInLicense": true,
            "id": ".servicenow",
            "minimumLicenseRequired": "platinum",
            "name": "ServiceNow",
          },
        ]
      }
      addFlyoutVisible={false}
      setAddFlyoutVisibility={[Function]}
    />
  </ActionsConnectorsContextProvider>
</styled.div>
`;
